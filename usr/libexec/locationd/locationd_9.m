id sub_1002C7668(uint64_t a1)
{
  os_log_s *v2;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];
  sub_100DAA634(a1);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10182FA40);
  }
  v2 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "MotionStateObserver, Disabling update timer.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10182FA40);
    }
    v5[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "MotionStateObserver, Disabling update timer.",  v5,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionStateObserverCompanion::stopSessionAndTimer()", "%s\n", v4);
  }

  return [*(id *)(a1 + 152) setNextFireDelay:1.79769313e308 interval:1.79769313e308];
}

id sub_1002C7810(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1002C79F4;
  v6[3] = &unk_10181D3D0;
  v6[4] = a1;
  [*(id *)(a1 + 152) setHandler:v6];
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10182FA40);
  }
  v2 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "MotionStateObserver, Starting update timer.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10182FA40);
    }
    __int16 v5 = 0;
    v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "MotionStateObserver, Starting update timer.",  &v5,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionStateObserverCompanion::startSessionTimer()", "%s\n", v4);
  }

  return [*(id *)(a1 + 152) setNextFireDelay:90.0];
}

void *sub_1002C79F4(void *result)
{
  uint64_t v1 = result[4];
  if (*(_DWORD *)(v1 + 117) || *(_DWORD *)(v1 + 121))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10182FA40);
    }
    v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v7 = 0x4056800000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "MotionStateObserver, Timing out session since we have not heard a response in %f seconds.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10182FA40);
      }
      int v4 = 134217984;
      uint64_t v5 = 0x4056800000000000LL;
      v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "MotionStateObserver, Timing out session since we have not heard a response in %f seconds.",  COERCE_DOUBLE(&v4));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionStateObserverCompanion::startSessionTimer()_block_invoke",  "%s\n",  v3);
    }

    return sub_1002C7668(v1);
  }

  return result;
}

void sub_1002C7BC4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  if (*a2 == 6)
  {
    int v3 = *a3;
    if (*(unsigned __int8 *)(a1 + 208) != v3)
    {
      *(_BYTE *)(a1 + 208) = v3;
      sub_1002C7BEC(a1);
    }
  }

void sub_1002C7BEC(uint64_t a1)
{
  if (+[CMActivityAlarmLocal activityAlarmAvailable](&OBJC_CLASS___CMActivityAlarmLocal, "activityAlarmAvailable"))
  {
    sub_1002C73C0((id *)a1);
    if (*(_BYTE *)(a1 + 208)
      && *(_BYTE *)(a1 + 160)
      && (*(_DWORD *)buf = 1, sub_100247620(a1, (int *)buf, 1LL)))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      __int128 v12 = *(_OWORD *)(a1 + 162);
      int v13 = *(_DWORD *)(a1 + 178);
      BOOL v3 = Current < *(double *)&v12;
      double v4 = vabdd_f64(Current, *(double *)&v12);
      if (v3 || v4 > 320.0)
      {
        __int128 v12 = 0x10000000000000uLL;
        int v13 = 0;
      }

      sub_100DAA888(a1, &v12);
      int v14 = 1;
      *(_OWORD *)buf = v12;
      *(_DWORD *)&buf[16] = v13;
      (*(void (**)(uint64_t, int *, _BYTE *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v14,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10182FA40);
      }
      v6 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = DWORD2(v12);
        *(_WORD *)&buf[18] = 1024;
        int v21 = HIDWORD(v12);
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "MotionStateObserver,VehicularTracking,MotionState,startTime,%.3f,activityType,%d,vehicularConfidence,%d",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10182FA40);
        }
        int v14 = 134218496;
        uint64_t v15 = v12;
        __int16 v16 = 1024;
        int v17 = DWORD2(v12);
        __int16 v18 = 1024;
        int v19 = HIDWORD(v12);
        v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "MotionStateObserver,VehicularTracking,MotionState,startTime,%.3f,activityType,%d,vehicularConfidence,%d",  COERCE_DOUBLE(&v14),  24,  (_DWORD)v12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionStateObserverCompanion::trackVehicularConfidenceStateMachine()",  "%s\n",  v11);
        if (v11 != buf) {
          free(v11);
        }
      }

      if ((HIDWORD(v12) - 2) < 3)
      {
        float v7 = *(double *)(a1 + 216) + 300.0;
        *(void *)(a1 + 240) = sub_1002C80C4(a1, 4LL, v7);
LABEL_27:
        *(void *)(a1 + 248) = sub_1002C80C4(a1, 5LL, 10.0);
        return;
      }

      if (HIDWORD(v12) == 1)
      {
        float v9 = *(double *)(a1 + 216) + 300.0;
        *(void *)(a1 + 240) = sub_1002C80C4(a1, 4LL, v9);
        *(void *)(a1 + 232) = sub_1002C80C4(a1, 16LL, 10.0);
        goto LABEL_27;
      }

      if (!HIDWORD(v12)) {
        *(void *)(a1 + 224) = sub_1002C80C4(a1, 4LL, 10.0);
      }
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10182FA40);
      }
      v8 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "MotionStateObserver,VehicularTracking,STOP",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10182FA40);
        }
        LOWORD(v14) = 0;
        v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "MotionStateObserver,VehicularTracking,STOP",  &v14,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionStateObserverCompanion::trackVehicularConfidenceStateMachine()",  "%s\n",  v10);
        if (v10 != buf) {
          free(v10);
        }
      }
    }
  }

void sub_1002C8070(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!*a2)
  {
    int v3 = *(unsigned __int8 *)(a3 + 3);
    if (*(unsigned __int8 *)(a1 + 160) != v3)
    {
      *(_BYTE *)(a1 + 160) = v3;
      sub_1002C7BEC(a1);
    }
  }

double sub_1002C8094(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!*a2)
  {
    double result = *(double *)a3;
    int v4 = *(_DWORD *)(a3 + 8);
    int v5 = *(_DWORD *)(a3 + 108);
    int v6 = *(_DWORD *)(a3 + 72);
    *(void *)(a1 + 162) = *(void *)a3;
    *(_DWORD *)(a1 + 170) = v4;
    *(_DWORD *)(a1 + 174) = v5;
    *(_DWORD *)(a1 + 178) = v6;
  }

  return result;
}

CMActivityAlarmLocal *sub_1002C80C4(uint64_t a1, uint64_t a2, float a3)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10182FA40);
  }
  int v6 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    int v18 = a2;
    __int16 v19 = 2048;
    double v20 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "MotionStateObserver,VehicularTracking,setActivityAlarm,%d,duration,%0.3f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10182FA40);
    }
    double v7 = a3;
    v14[0] = 67109376;
    v14[1] = a2;
    __int16 v15 = 2048;
    double v16 = v7;
    LODWORD(v12) = 18;
    v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "MotionStateObserver,VehicularTracking,setActivityAlarm,%d,duration,%0.3f",  v14,  v12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMActivityAlarm *CLMotionStateObserverCompanion::createActivityAlarm(const CMActivityAlarmTrigger, const float)",  "%s\n",  v11);
  }

  else
  {
    double v7 = a3;
  }

  v8 = objc_alloc(&OBJC_CLASS___CMActivityAlarmLocal);
  id v9 = [*(id *)(a1 + 40) queue];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1002C8300;
  v13[3] = &unk_10182FA08;
  v13[4] = a1;
  return -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]( v8,  "initWithTrigger:duration:onQueue:withHandler:",  a2,  v9,  v13,  v7);
}

id sub_1002C8300(uint64_t a1, void *a2)
{
  return sub_1002C8308(*(void *)(a1 + 32), a2);
}

id sub_1002C8308(uint64_t a1, void *a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10182FA40);
  }
  int v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v11 = [a2 trigger];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "MotionStateObserver,VehicularTracking,onActivityAlarm,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10182FA40);
    }
    uint64_t v7 = qword_1019344B8;
    v9[0] = 67109120;
    v9[1] = [a2 trigger];
    v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  2LL,  "MotionStateObserver,VehicularTracking,onActivityAlarm,%d",  v9);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionStateObserverCompanion::onActivityAlarm(CMActivityAlarm *)",  "%s\n",  v8);
  }

  id result = [a2 trigger];
  if ((_DWORD)result == 16)
  {
LABEL_9:
    [a2 activityDuration];
    *(double *)(a1 + 216) = v6;
    return (id)sub_1002C7BEC(a1);
  }

  if ((_DWORD)result != 5)
  {
    if ((_DWORD)result != 4) {
      return result;
    }
    goto LABEL_9;
  }

  *(void *)(a1 + 216) = 0LL;
  return (id)sub_1002C7BEC(a1);
}

void sub_1002C8510(uint64_t a1, uint64_t a2)
{
  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        id v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v14 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182FA60);
      }
      v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        unsigned int v11 = (void *)(a1 + 8);
        *(_DWORD *)buf = 136446466;
        double v20 = v11;
        __int16 v21 = 1026;
        int v22 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10182FA60);
        }
        double v12 = (void *)(a1 + 8);
        int v15 = 136446466;
        double v16 = v12;
        __int16 v17 = 1026;
        int v18 = a2;
        LODWORD(v14) = 18;
        int v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData >::removeClient(int) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotion StateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
      }
    }
  }

uint64_t sub_1002C8784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101937108);
}

uint64_t sub_1002C8798(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          v24 = (uint64_t *)v18;
        }
        else {
          v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          v29 = (uint64_t *)v25;
        }
        else {
          v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)buf = &v41;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        int v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          v36 = sub_1002CAA88((uint64_t)buf);
          sub_1002CA48C((_BYTE *)a1, (uint64_t)v42, (uint64_t)&v40, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_101937109;
        HIDWORD(v39) = v17;
        *(void *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(void *)buf = (char *)&v39 + 4;
        v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v39) = *a3;
        *(void *)buf = (char *)&v39 + 4;
        v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)buf = &v41;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v41, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v42 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10182FA60);
  }
  uint64_t v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10182FA60);
    }
    v37 = (void *)(a1 + 8);
    *(_DWORD *)v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    LODWORD(v39) = 18;
    v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                    v42,
                    v39);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::r egisterForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateObs erver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    return 0LL;
  }

  return result;
}

BOOL sub_1002C8BFC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      id v9 = (uint64_t *)v5;
    }
    else {
      id v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10182FA60);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)buf = 136446466;
      v29 = v11;
      __int16 v30 = 1026;
      int v31 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182FA60);
      }
      int v22 = (void *)(a1 + 8);
      int v24 = 136446466;
      uint64_t v25 = v22;
      __int16 v26 = 1026;
      int v27 = a2;
      BOOL v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                      &v24,
                      18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>: :clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, Notif icationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1002C8E7C(char *a1, int a2, int *a3)
{
  HIDWORD(v33) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                uint64_t v25 = (uint64_t *)v20;
              }
              else {
                uint64_t v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10182FA60);
              }
              __int16 v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v43 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v35 = 2082;
                v36 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10182FA60);
                }
                v29 = a1 + 8;
                if (a1[31] < 0) {
                  v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v37 >= 0) {
                  int v31 = buf;
                }
                else {
                  int v31 = *(_BYTE **)buf;
                }
                int v38 = 136446466;
                uint64_t v39 = v29;
                __int16 v40 = 2082;
                int v41 = v31;
                LODWORD(v33) = 22;
                char v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::Notifica tionData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateObser ver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, Notificatio nInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v32);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_1002C9204(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(__int128 **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  __int128 v12 = *v11;
  __int128 v13 = v11[1];
  *(_DWORD *)(a3 + 32) = *((_DWORD *)v11 + 8);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  return 1LL;
}

uint64_t sub_1002C926C(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x40uLL);
  __int128 v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 2) = 0LL;
  *(void *)int v6 = off_10182FA90;
  *((void *)v6 + 1) = 0LL;
  *(_OWORD *)(v6 + 40) = v7;
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 32);
  *(void *)&__int128 v14 = v6 + 24;
  *((void *)&v14 + 1) = v6;
  int v13 = *a2;
  int v15 = &v13;
  int v8 = sub_10023347C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_1012CF090, &v15);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  BOOL v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_1002C934C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1002C9360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_1002C93CC(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10182FA60);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v12 = (void *)(a1 + 8);
      int v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&_BYTE buf[20] = "activity";
      __int16 v67 = 2082;
      v68 = v12;
      __int16 v69 = 2050;
      v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)v71 = &v71[8];
      memset(&v71[8], 0, 24);
      v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        uint64_t v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      int v27 = (char *)operator new(0x40uLL);
      __int128 v28 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v27 + 24) = *(_OWORD *)a3;
      *((void *)v27 + 2) = 0LL;
      *(void *)int v27 = off_10182FA90;
      *((void *)v27 + 1) = 0LL;
      *(_OWORD *)(v27 + 40) = v28;
      *((_DWORD *)v27 + 14) = *(_DWORD *)(a3 + 32);
      *(void *)buf = v27 + 24;
      *(void *)&buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      v29 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v30 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    char v32 = sub_1002CA030(a3);
    if (a5 == -1)
    {
      sub_1002CA0B8((void *)a1, (int *)a2, v32);
    }

    else
    {
      uint64_t v33 = a1 + 88;
      uint64_t v34 = *(void *)(a1 + 88);
      if (!v34) {
        goto LABEL_48;
      }
      uint64_t v35 = a1 + 88;
      do
      {
        int v36 = *(_DWORD *)(v34 + 32);
        BOOL v37 = v36 < a5;
        if (v36 >= a5) {
          int v38 = (uint64_t *)v34;
        }
        else {
          int v38 = (uint64_t *)(v34 + 8);
        }
        if (!v37) {
          uint64_t v35 = v34;
        }
        uint64_t v34 = *v38;
      }

      while (*v38);
      if (v35 == v33 || *(_DWORD *)(v35 + 32) > a5) {
LABEL_48:
      }
        uint64_t v35 = a1 + 88;
      uint64_t v64 = v35;
      unint64_t v39 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v40 = *a2;
      int v41 = (__n128 *)(a1 + 64);
      do
      {
        int v42 = *(_DWORD *)(v39 + 32);
        BOOL v43 = v42 < v40;
        if (v42 >= v40) {
          int v44 = (unint64_t *)v39;
        }
        else {
          int v44 = (unint64_t *)(v39 + 8);
        }
        if (!v43) {
          int v41 = (__n128 *)v39;
        }
        unint64_t v39 = *v44;
      }

      while (*v44);
      if (v41 == v15 || v40 < (signed __int32)v41[2].n128_u32[0])
      {
LABEL_59:
        v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10182FA60);
        }
        v45 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v46 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            v47 = v71;
          }
          else {
            v47 = *(_BYTE **)v71;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v46;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&_BYTE buf[20] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_10182FA60);
          }
          v48 = (void *)(a1 + 8);
          uint64_t v49 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            v50 = __p;
          }
          else {
            v50 = (void **)__p[0];
          }
          *(_DWORD *)v71 = 136315650;
          *(void *)&v71[4] = v48;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v50;
          v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v49,  2LL,  "%s; client %d has deregistered, not notifying %s",
                          v71,
                          28,
                          v60);
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationDa ta>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notificatio n_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::Notificatio nData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      v63 = v41;
      if (v35 == v33) {
        goto LABEL_60;
      }
      uint64_t v54 = v41[3].n128_i64[0];
      v52 = v41 + 3;
      v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v35 + 32);
      v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          v59 = v53;
        }
        else {
          v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          v56 = v53;
        }
        v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_1002CA48C((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v32);
    }

void sub_1002C9A10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1002C9A5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10182FA60);
    }
    v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)buf = 136315138;
      uint64_t v34 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182FA60);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v29 = 136315138;
      uint64_t v30 = v4;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
                     (const char *)&v29);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>: :listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObs erver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10182FA60);
    }
    int v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v7 = (void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      uint64_t v34 = v7;
      __int16 v35 = 2048;
      v36[0] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182FA60);
      }
      uint64_t v25 = (void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 96);
      int v29 = 136315394;
      uint64_t v30 = v25;
      __int16 v31 = 2048;
      v32[0] = v26;
      int v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
                      (const char *)&v29,
                      22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>: :listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObs erver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v27);
    }

    BOOL v9 = *(void **)(a1 + 80);
    if (v9 != (void *)(a1 + 88))
    {
      BOOL v10 = (void *)(a1 + 8);
      do
      {
        unint64_t v11 = (void *)v9[5];
        if (v11 != v9 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_10182FA60);
            }
            __int128 v12 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              int v13 = (void *)(a1 + 8);
              int v14 = *((_DWORD *)v9 + 8);
              int v15 = *((_DWORD *)v11 + 7);
              *(_DWORD *)buf = 136315650;
              uint64_t v34 = v13;
              __int16 v35 = 1024;
              LODWORD(v36[0]) = v14;
              WORD2(v36[0]) = 1024;
              *(_DWORD *)((char *)v36 + 6) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10182FA60);
              }
              BOOL v19 = (void *)(a1 + 8);
              int v20 = *((_DWORD *)v9 + 8);
              int v21 = *((_DWORD *)v11 + 7);
              int v29 = 136315650;
              uint64_t v30 = v19;
              __int16 v31 = 1024;
              LODWORD(v32[0]) = v20;
              WORD2(v32[0]) = 1024;
              *(_DWORD *)((char *)v32 + 6) = v21;
              int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                              (const char *)&v29,
                              24,
                              v28);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::Notificati onData>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v22);
            }

            signed __int32 v16 = (void *)v11[1];
            if (v16)
            {
              do
              {
                int v17 = v16;
                signed __int32 v16 = (void *)*v16;
              }

              while (v16);
            }

            else
            {
              do
              {
                int v17 = (void *)v11[2];
                BOOL v18 = *v17 == (void)v11;
                unint64_t v11 = v17;
              }

              while (!v18);
            }

            unint64_t v11 = v17;
          }

          while (v17 != v9 + 6);
        }

        unint64_t v23 = (void *)v9[1];
        if (v23)
        {
          do
          {
            BOOL v24 = v23;
            unint64_t v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            BOOL v24 = (void *)v9[2];
            BOOL v18 = *v24 == (void)v9;
            BOOL v9 = v24;
          }

          while (!v18);
        }

        BOOL v9 = v24;
      }

      while (v24 != (void *)(a1 + 88));
    }
  }

void sub_1002CA004(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

CLCppContainer *sub_1002CA030(uint64_t a1)
{
  v2 = operator new(0x24uLL);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  _OWORD *v2 = *(_OWORD *)a1;
  v2[1] = v3;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  uint64_t v5 = _NSConcreteStackBlock;
  uint64_t v6 = 3221225472LL;
  __int128 v7 = sub_1002CA5D4;
  uint64_t v8 = &unk_10181D3D0;
  BOOL v9 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_1002CA0B8(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          __int128 v12 = (uint64_t *)v4;
        }
        else {
          __int128 v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        id v13 = sub_1002CA5E4(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          signed __int32 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v49 = v19;
              sub_1002CA48C(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  char v32 = (uint64_t *)v27;
                }
                else {
                  char v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              v50 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                __int16 v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    unint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    unint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    __int16 v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  BOOL v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      BOOL v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      __int16 v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v49 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10182FA60);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                uint64_t v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                __int16 v57 = 1026;
                int v58 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10182FA60);
                }
                v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v51 = 136446466;
                v52 = v45;
                __int16 v53 = 1026;
                int v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData >::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionStateObse rver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, Notificati onInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
              }
            }
          }

          while (v14 != v50 + 6);
        }
      }
    }
  }

_BYTE *sub_1002CA48C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    __int128 v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_1002CA5E4(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    int v14 = (int *)(*(void *)a2 + 32LL);
    __int128 v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_1002CA568(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1002CA594(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10182FA90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002CA5A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10182FA90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1002CA5D4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_1002CA5E4(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppEncodableDataContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_1002CA65C(a1);
  }
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_1002CA814(a1);
  }
  else {
    return 0LL;
  }
}

id sub_1002CA65C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1002CA9E8((uint64_t)&v8, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10182FAD0);
    }
    uint64_t v3 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    *(_DWORD *)buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0LL;
    __int16 v13 = 2080;
    unint64_t v14 = 0x80000001012E55DALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10182FAD0);
    }
    uint64_t v7 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT)) {
      return 0LL;
    }
    *(_DWORD *)buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0LL;
    __int16 v13 = 2080;
    unint64_t v14 = 0x80000001012E55DALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }

  _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has cha nged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
  return 0LL;
}

id sub_1002CA814(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10182FAD0);
    }
    uint64_t v3 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001012E55DALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10182FAD0);
    }
    uint64_t v7 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001012E55DALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = (os_log_s *)v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }

  _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has cha nged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  (uint8_t *)&v8,  0x20u);
  return 0LL;
}

id sub_1002CA9E8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D30F8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)36) {
      sub_10123337C();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_1002CAA5C(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_1002CAA88(uint64_t a1)
{
  id v2 = operator new(0x24uLL);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  _OWORD *v2 = *(_OWORD *)a1;
  v2[1] = v3;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  os_log_type_t v5 = _NSConcreteStackBlock;
  uint64_t v6 = 3221225472LL;
  uint64_t v7 = sub_1002CAB10;
  int v8 = &unk_10181D3D0;
  id v9 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_1002CAB10(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

BOOL sub_1002CAB20()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 1144), OS_LOG_TYPE_INFO);
}

uint64_t sub_1002CADBC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_41;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_43;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_43:
        uint64_t v28 = 16LL;
        goto LABEL_48;
      case 2u:
        *(_BYTE *)(a1 + 24) |= 2u;
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v21 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v21 = 0;
        }

        uint64_t v29 = 12LL;
        goto LABEL_53;
      case 3u:
        *(_BYTE *)(a1 + 24) |= 4u;
        unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v21 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 4;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v21 = 0;
        }

        uint64_t v29 = 20LL;
LABEL_53:
        *(_DWORD *)(a1 + v29) = v21;
        continue;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
      v15 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0) {
        goto LABEL_45;
      }
      v23 += 7;
      BOOL v10 = v24++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_47;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_47:
    uint64_t v28 = 8LL;
LABEL_48:
    *(_DWORD *)(a1 + v28) = v15;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1002CBC3C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        LODWORD(v6) = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 68) |= 0x40u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_72;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_74;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_72:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_74:
        uint64_t v50 = 64LL;
        goto LABEL_91;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 68) |= 0x10u;
        while (2)
        {
          uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_78;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_78:
        uint64_t v50 = 56LL;
        goto LABEL_91;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 68) |= 0x20u;
        while (2)
        {
          uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v15 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v10 = v26++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_82;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_82:
        uint64_t v50 = 60LL;
        goto LABEL_91;
      case 4u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0LL;
        *(_BYTE *)(a1 + 68) |= 4u;
        while (2)
        {
          uint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v34 = v33 + 1;
          if (v33 == -1 || v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v35 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              BOOL v10 = v31++ >= 9;
              if (v10)
              {
                uint64_t v32 = 0LL;
                goto LABEL_86;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v32 = 0LL;
        }
LABEL_86:
        uint64_t v51 = 24LL;
        goto LABEL_96;
      case 5u:
        *(_BYTE *)(a1 + 68) |= 1u;
        unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v36 <= 0xFFFFFFFFFFFFFFF7LL && v36 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v37 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v37 = 0LL;
        }

        *(void *)(a1 + 8) = v37;
        goto LABEL_99;
      case 6u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 68) |= 8u;
        while (2)
        {
          uint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v42 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
            v15 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              BOOL v10 = v39++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_90;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_90:
        uint64_t v50 = 40LL;
LABEL_91:
        *(_DWORD *)(a1 + v50) = v15;
        goto LABEL_99;
      case 7u:
        BOOL v43 = objc_alloc_init(&OBJC_CLASS___TRANSITPbLocationFingerprintsV1);

        *(void *)(a1 + 32) = v43;
        goto LABEL_70;
      case 8u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v32 = 0LL;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (2)
        {
          uint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v48 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
            v32 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              BOOL v10 = v45++ >= 9;
              if (v10)
              {
                uint64_t v32 = 0LL;
                goto LABEL_95;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v32 = 0LL;
        }
LABEL_95:
        uint64_t v51 = 16LL;
LABEL_96:
        *(void *)(a1 + v51) = v32;
        goto LABEL_99;
      case 9u:
        uint64_t v49 = objc_alloc_init(&OBJC_CLASS___TRANSITPbLocationFingerprints);

        *(void *)(a1 + 48) = v49;
        if (PBReaderPlaceMark(a2, v52) && (sub_1005B0F70(v49, a2) & 1) != 0)
        {
LABEL_70:
          PBReaderRecallMark(a2, v52);
LABEL_99:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_99;
    }
  }

void sub_1002CD074(uint64_t a1, int a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 25LL) = 1;
  id v2 = *(void **)(a1 + 32);
  if ((v2[7] != 0LL) == a2)
  {
    [v2 _doSigningWhenReady];
  }

  else
  {
    __int128 v3 = (CLMescalSigner *)sub_101233908();
    -[CLMescalSigner _doSigningWhenReady](v3, v4);
  }

uint64_t sub_1002CD75C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    __int128 v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning MESCAL: churn failure: signing disabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182FBB8);
      }
      v7[0] = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning MESCAL: churn failure: signing disabled",  v7,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke",  "%s\n",  v6);
    }

    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 56LL);
    if (v4)
    {
      sub_10016C050(v4);
      *(void *)(*(void *)(a1 + 32) + 56LL) = 0LL;
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1002CD91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = _NSConcreteStackBlock;
  __int128 v3 = *(_OWORD *)(a1 + 32);
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v6[1] = 3221225472LL;
  v6[2] = sub_1002CD97C;
  v6[3] = &unk_10182FB70;
  v6[4] = a3;
  void v6[5] = a2;
  __int128 v7 = v3;
  return [v4 async:v6];
}

id sub_1002CD97C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    id v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      *(_DWORD *)buf = 136446210;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "MESCAL: could not load store URL bag: %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182FBB8);
      }
      uint64_t v10 = qword_101934A78;
      id v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      int v15 = 136446210;
      id v16 = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  17LL,  "MESCAL: could not load store URL bag: %{public}s",  &v15,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke",  "%s\n",  v12);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v5 = [*(id *)(a1 + 40) objectForKey:@"loc-sign-sap-version"];
    if (!v5) {
      id v5 = [*(id *)(a1 + 40) objectForKey:@"sign-sap-version"];
    }
    *(void *)(*(void *)(a1 + 48) + 64) = [v5 copy];
    id v6 = [*(id *)(a1 + 40) objectForKey:@"loc-sign-sap-setup-cert"];
    if (!v6) {
      id v6 = [*(id *)(a1 + 40) objectForKey:@"sign-sap-setup-cert"];
    }
    *(void *)(*(void *)(a1 + 48) + 72) = [v6 copy];
    id v7 = [*(id *)(a1 + 40) objectForKey:@"loc-sign-sap-setup"];
    if (!v7) {
      id v7 = [*(id *)(a1 + 40) objectForKey:@"sign-sap-setup"];
    }
    *(void *)(*(void *)(a1 + 48) + 80) = [v7 copy];
    unint64_t v8 = +[NSURLRequest requestWithURL:]( &OBJC_CLASS___NSURLRequest,  "requestWithURL:",  +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", *(void *)(*(void *)(a1 + 48) + 72LL)));
    id v9 = [*(id *)(a1 + 48) _mescalSignerNSURLSession];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1002CDC70;
    v13[3] = &unk_10182FB48;
    __int128 v14 = *(_OWORD *)(a1 + 48);
    objc_msgSend(objc_msgSend(v9, "dataTaskWithRequest:completionHandler:", v8, v13), "resume");
    return [v9 finishTasksAndInvalidate];
  }

id sub_1002CDC70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    id v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      id v18 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning MESCAL: signer cert download did fail, dude: %{public}s",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    uint64_t v14 = qword_101934A78;
    int v15 = 136446210;
    id v16 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
    char v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v14,  0LL,  "#Warning MESCAL: signer cert download did fail, dude: %{public}s",  &v15,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke",  "%s\n",  v13);
    goto LABEL_26;
  }

  id v8 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  a2,  0LL,  0LL,  0LL);
  id v9 = [v8 objectForKey:@"sign-sap-setup-cert"];
  if (!v9)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      id v11 = "Y";
      if (!v8) {
        id v11 = "N";
      }
      *(_DWORD *)buf = 136446210;
      id v18 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "MESCAL: could not extract data from cert download (dict:%{public}s)",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    __int16 v12 = "Y";
    if (!v8) {
      __int16 v12 = "N";
    }
    int v15 = 136446210;
    id v16 = v12;
    char v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "MESCAL: could not extract data from cert download (dict:%{public}s)",  &v15,  12);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke",  "%s\n",  v13);
LABEL_26:
    free(v13);
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  return _[*(id *)(a1 + 32) _churnMescalExchangeData:v9 withCompletion:*(void *)(a1 + 40)];
}

id sub_1002CE484(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    id v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      id v18 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning MESCAL: exchange data up/download did fail, dude: %{public}s",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    uint64_t v14 = qword_101934A78;
    int v15 = 136446210;
    id v16 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
    char v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v14,  0LL,  "#Warning MESCAL: exchange data up/download did fail, dude: %{public}s",  &v15,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMescalSigner _churnMescalExchangeData:withCompletion:]_block_invoke",  "%s\n",  v13);
    goto LABEL_26;
  }

  id v8 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  a2,  0LL,  0LL,  0LL);
  id v9 = [v8 objectForKey:@"sign-sap-setup-buffer"];
  if (!v9)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      id v11 = "Y";
      if (!v8) {
        id v11 = "N";
      }
      *(_DWORD *)buf = 136446210;
      id v18 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "MESCAL: could not extract data from exchange download (dict:%{public}s)",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182FBB8);
    }
    __int16 v12 = "Y";
    if (!v8) {
      __int16 v12 = "N";
    }
    int v15 = 136446210;
    id v16 = v12;
    char v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "MESCAL: could not extract data from exchange download (dict:%{public}s)",  &v15,  12);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMescalSigner _churnMescalExchangeData:withCompletion:]_block_invoke",  "%s\n",  v13);
LABEL_26:
    free(v13);
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  return _[*(id *)(a1 + 32) _churnMescalExchangeData:v9 withCompletion:*(void *)(a1 + 40)];
}

void sub_1002CE848(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

  ;
}

uint64_t sub_1002CE888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_10182FBE8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0x4034000000000000LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v16 = 2082;
    *(void *)&v16[2] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,init}",  buf,  0x12u);
  }

  sub_1002F0B04(buf);
  double v5 = *(double *)(a1 + 80);
  int v6 = sub_1002A82BC(*(uint64_t *)buf, "CLGNSSStateQueryAssertionPeriodicity_s", &v14);
  double v7 = v14;
  if (!v6) {
    double v7 = v5;
  }
  *(double *)(a1 + 80) = v7;
  id v8 = *(std::__shared_weak_count **)v16;
  if (*(void *)v16)
  {
    id v9 = (unint64_t *)(*(void *)v16 + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  id v11 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 80);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v16 = 2082;
    *(void *)&v16[2] = "";
    __int16 v17 = 2050;
    uint64_t v18 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,init, fResponsePeriodicity:%{public}0.3f}",  buf,  0x1Cu);
  }

  return a1;
}

void sub_1002CEA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = v3[9];
  v3[9] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_100213E60(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CEADC(uint64_t a1)
{
  *(void *)a1 = off_10182FBE8;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  id v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    id v8 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,Deinit}",  (uint8_t *)v6,  0x12u);
  }

  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 96) = 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100213E60((void *)a1);
  return a1;
}

void sub_1002CEBFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_1002CEC0C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002CEADC(a1);
  operator delete(v1);
}

void sub_1002CEC20(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    LODWORD(v24[0]) = 0;
    WORD2(v24[0]) = 2082;
    *(void *)((char *)v24 + 6) = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLGNSSStateQueryAssertion,handleMessage}",  buf,  0x12u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
  }

  uint64_t v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      __int16 v7 = (uint64_t *)*v6;
    }
    *(_DWORD *)buf = 136380675;
    v24[0] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#CLGNSSStateQueryAssertion,daemon,message,%{private}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    uint64_t v16 = qword_101934978;
    __int16 v17 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      uint64_t v18 = (uint64_t *)*v17;
    }
    int v21 = 136380675;
    uint64_t v22 = v18;
    BOOL v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  0LL,  "#CLGNSSStateQueryAssertion,daemon,message,%{private}s",  &v21,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGNSSStateQueryAssertion::handleMessage(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v19);
  }

  id v8 = (void *)CLConnectionMessage::name(*a2);
  int v9 = *((char *)v8 + 23);
  if (v9 < 0)
  {
    if (v8[1] != 37LL) {
      return;
    }
    id v8 = (void *)*v8;
  }

  else if (v9 != 37)
  {
    return;
  }

  if (!memcmp(v8, "kCLConnectionMessageBBGnssStatusQuery", 0x25uLL))
  {
    unint64_t v10 = *a2;
    id v11 = a2[1];
    v20[0] = v10;
    v20[1] = v11;
    if (v11)
    {
      uint64_t v12 = (unint64_t *)((char *)v11 + 8);
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }

    sub_1002CEF40(a1, v20);
    if (v11)
    {
      double v14 = (unint64_t *)((char *)v11 + 8);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(CLConnectionMessage *))(*(void *)v11 + 16LL))(v11);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
      }
    }
  }

void sub_1002CEF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1002CEF40(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_1010DDBC0(buf, "com.apple.locationd.bbgnssStatusResponse_callback");
  char isEntitled = CLConnection::isEntitled(v4, buf);
  char v6 = isEntitled;
  if (SBYTE3(v40) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
    {
LABEL_3:
      if ((sub_1004FCEC8() & 1) != 0)
      {
        Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
        id v8 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
        id v9 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
        id v10 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
        if (v9)
        {
          id v11 = v10;
          if (v10)
          {
            if (v8)
            {
              if ([v8 length])
              {
                if ([v9 length] || objc_msgSend(v11, "length"))
                {
                  if (qword_101934970 != -1) {
                    dispatch_once(&qword_101934970, &stru_10182FC28);
                  }
                  uint64_t v12 = (os_log_s *)qword_101934978;
                  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
                  {
                    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
                    int v13 = v35;
                    double v14 = (void **)__p[0];
                    unint64_t v15 = (const char *)[v8 UTF8String];
                    uint64_t v16 = __p;
                    *(_DWORD *)buf = 68289538;
                    if (v13 < 0) {
                      uint64_t v16 = v14;
                    }
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    __int16 v37 = 2082;
                    char v38 = "";
                    __int16 v39 = 2082;
                    uint64_t v40 = v16;
                    __int16 v41 = 2082;
                    char v42 = v15;
                    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,subscribed to status report, requested by: %{public, location:escape_only}s, reason:%{public, location:escape_only}s}",  buf,  0x26u);
                    if (v35 < 0) {
                      operator delete(__p[0]);
                    }
                  }

                  sub_100A9E608();
                }

                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_10182FC28);
                }
                char v29 = (os_log_s *)qword_101934978;
                if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
                {
                  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
                  int v30 = v35;
                  unsigned int v31 = (void **)__p[0];
                  uint64_t v32 = (const char *)[v8 UTF8String];
                  uint64_t v33 = __p;
                  *(_DWORD *)buf = 68289538;
                  if (v30 < 0) {
                    uint64_t v33 = v31;
                  }
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  __int16 v37 = 2082;
                  char v38 = "";
                  __int16 v39 = 2082;
                  uint64_t v40 = v33;
                  __int16 v41 = 2082;
                  char v42 = v32;
                  _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,#warning,daemon,no beneficiary,request denied,  requested by:%{public, location:escape_only}s, reason:%{public, location:escape_only}s}",  buf,  0x26u);
                  if (v35 < 0) {
                    operator delete(__p[0]);
                  }
                }
              }

              else
              {
                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_10182FC28);
                }
                uint64_t v27 = (os_log_s *)qword_101934978;
                if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
                {
                  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
                  unint64_t v28 = v35 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)buf = 68289282;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  __int16 v37 = 2082;
                  char v38 = "";
                  __int16 v39 = 2082;
                  uint64_t v40 = v28;
                  _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,#warning,daemon,empty reason,request denied, r equested by:%{public, location:escape_only}s}",  buf,  0x1Cu);
                  if (v35 < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
            }

            else
            {
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10182FC28);
              }
              char v25 = (os_log_s *)qword_101934978;
              if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
              {
                (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
                unsigned int v26 = v35 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)buf = 68289282;
                *(_DWORD *)&uint8_t buf[4] = 0;
                __int16 v37 = 2082;
                char v38 = "";
                __int16 v39 = 2082;
                uint64_t v40 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,#warning,daemon,missing reason,request denied, r equested by:%{public, location:escape_only}s}",  buf,  0x1Cu);
                if (v35 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }

          else
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10182FC28);
            }
            unint64_t v23 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
              char v24 = v35 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v37 = 2082;
              char v38 = "";
              __int16 v39 = 2082;
              uint64_t v40 = v24;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,#warning,daemon,missing bundlePath,request denied,  requested by:%{public, location:escape_only}s}",  buf,  0x1Cu);
              if (v35 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }

        else
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10182FC28);
          }
          int v21 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
            uint64_t v22 = v35 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v37 = 2082;
            char v38 = "";
            __int16 v39 = 2082;
            uint64_t v40 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,#warning,daemon,missing bundleID,request denied, req uested by:%{public, location:escape_only}s}",  buf,  0x1Cu);
            if (v35 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }

      else
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10182FC28);
        }
        BOOL v19 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
          char v20 = v35 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v37 = 2082;
          char v38 = "";
          __int16 v39 = 2082;
          uint64_t v40 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,#warning,feature not supported, requested by:%{publi c, location:escape_only}s}",  buf,  0x1Cu);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      goto LABEL_72;
    }
  }

  else if ((isEntitled & 1) != 0)
  {
    goto LABEL_3;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  __int16 v17 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
    uint64_t v18 = v35 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v37 = 2082;
    char v38 = "";
    __int16 v39 = 2082;
    uint64_t v40 = v18;
    __int16 v41 = 2082;
    char v42 = "com.apple.locationd.bbgnssStatusResponse_callback";
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,#warning,invalid entitlement, requested by:%{public, locat ion:escape_only}s, entitlement:%{public, location:escape_only}s}",  buf,  0x26u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1002CF9C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002CFA00(uint64_t a1, double *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = sub_101171D4C();
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  double v6 = Current - v5;
  __int16 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    double v8 = *a2;
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = *((void *)a2 + 2);
    double v11 = CFAbsoluteTimeGetCurrent();
    double v12 = a2[1];
    double v13 = -0.0;
    if (*a2 <= 0.0) {
      double v14 = -0.0;
    }
    else {
      double v14 = v6;
    }
    double v15 = *a2 + v14;
    if (v12 <= 0.0) {
      double v16 = -0.0;
    }
    else {
      double v16 = v6;
    }
    double v17 = v12 + v16;
    *(_DWORD *)buf = 134285057;
    double v18 = a2[2];
    *(double *)&uint8_t buf[4] = v8;
    if (v18 > 0.0) {
      double v13 = v6;
    }
    *(_WORD *)&_BYTE buf[12] = 2049;
    *(void *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2049;
    *(void *)&buf[24] = v10;
    *(_WORD *)&uint8_t buf[32] = 2049;
    double v78 = v11;
    *(_WORD *)v79 = 2049;
    *(double *)&v79[2] = v15;
    __int16 v80 = 2049;
    *(double *)v81 = v17;
    *(_WORD *)&v81[8] = 2049;
    double v82 = v18 + v13;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient,gnssStart,%{private}.3lf,gnssStop,%{private}.3lf,gn ssYield,%{private}.3lf,absoluteTime,%{private}.3lf,AbsoluteTimeOfGnssStart,%{private}.3lf,AbsoluteTimeOfGnssStop,% {private}.3lf,AbsoluteTimeOfYieldStop,%{private}.3lf",  buf,  0x48u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    uint64_t v58 = qword_101934978;
    double v43 = *a2;
    char v44 = a2 + 1;
    uint64_t v45 = *((void *)a2 + 1);
    unint64_t v47 = a2 + 2;
    uint64_t v46 = *((void *)a2 + 2);
    double v48 = CFAbsoluteTimeGetCurrent();
    double v49 = -0.0;
    if (*a2 <= 0.0) {
      double v50 = -0.0;
    }
    else {
      double v50 = v6;
    }
    double v51 = *a2 + v50;
    if (*v44 <= 0.0) {
      double v52 = -0.0;
    }
    else {
      double v52 = v6;
    }
    double v53 = *v44 + v52;
    *(_DWORD *)uint64_t v64 = 134285057;
    double v54 = *v47;
    if (*v47 > 0.0) {
      double v49 = v6;
    }
    *(double *)&v64[4] = v43;
    __int16 v65 = 2049;
    uint64_t v66 = v45;
    __int16 v67 = 2049;
    uint64_t v68 = v46;
    __int16 v69 = 2049;
    double v70 = v48;
    __int16 v71 = 2049;
    double v72 = v51;
    __int16 v73 = 2049;
    double v74 = v53;
    __int16 v75 = 2049;
    double v76 = v54 + v49;
    int v55 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v58,  1LL,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient,gnssStart,%{private}.3lf,gnssStop,%{p rivate}.3lf,gnssYield,%{private}.3lf,absoluteTime,%{private}.3lf,AbsoluteTimeOfGnssStart,%{private}. 3lf,AbsoluteTimeOfGnssStop,%{private}.3lf,AbsoluteTimeOfYieldStop,%{private}.3lf",  v64,  72);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssert ionReportData &)",  "%s\n",  v55);
    if (v55 != buf) {
      free(v55);
    }
  }

  if (!*(void *)(a1 + 8))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    unint64_t v23 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient invalid connection",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    *(_WORD *)uint64_t v64 = 0;
    LODWORD(v57) = 2;
    char v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient invalid connection",  v64,  v57);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssert ionReportData &)",  "%s\n",  v24);
LABEL_74:
    if (v24 != buf) {
      free(v24);
    }
    return;
  }

  double v19 = sub_101171D4C();
  double v20 = *(double *)(a1 + 88);
  double v21 = v19 - v20;
  BOOL v22 = v20 == 0.0 || v21 > *(double *)(a1 + 80) + -3.0;
  double v26 = *a2;
  double v25 = a2[1];
  double v27 = a2[2];
  double v28 = *(double *)(a1 + 48);
  double v29 = *(double *)(a1 + 64);
  int v30 = (v27 > *a2) ^ (v29 > v28);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  unsigned int v31 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290818;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(double *)&_BYTE buf[20] = v21;
    *(_WORD *)&_BYTE buf[28] = 1026;
    *(_DWORD *)&buf[30] = v22;
    LOWORD(v78) = 1026;
    *(_DWORD *)((char *)&v78 + 2) = v25 > v26;
    HIWORD(v78) = 1026;
    *(_DWORD *)v79 = v27 > v26;
    *(_WORD *)&v79[4] = 1026;
    *(_DWORD *)&v79[6] = v29 > v28;
    __int16 v80 = 1026;
    *(_DWORD *)v81 = v30;
    *(_WORD *)&v81[4] = 1026;
    *(_DWORD *)&v81[6] = v22 | v30;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient, timeSinceLastUpdate: %{public}0.3f, isMinTimeLapsedBetween2UpdatesToClient:%{public}d, isLastSessionStopped:%{public}d, did LastSessionYield:%{public}d, didSessionYieldDuringLastUpdateToClient:%{public}d, isStatusChangedFromPrevio usUpdateToClient:%{public}d, sendUpdateToCLient:%{public}d}",  buf,  0x40u);
  }

  if (((v22 | v30) & 1) != 0)
  {
    v62[0] = @"kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSStartKey";
    v63[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *a2);
    v62[1] = @"kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSStopKey";
    v63[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a2[1]);
    v62[2] = @"kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSYieldKey";
    v63[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a2[2]);
    v62[3] = @"kCLGNSSStateQueryAssertion_ResponseKey_PeriodicityKey";
    v63[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 80));
    *(void *)uint64_t v64 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v63,  v62,  4LL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    uint64_t v32 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient sent to client",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10182FC28);
      }
      v61[0] = 0;
      LODWORD(v57) = 2;
      v56 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient sent to client",  v61,  v57);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAsse rtionReportData &)",  "%s\n",  v56);
      if (v56 != buf) {
        free(v56);
      }
    }

    *(double *)(a1 + 88) = sub_101171D4C();
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 64) = *(void *)(a1 + 40);
    [*(id *)(a1 + 96) setNextFireDelay:*(double *)(a1 + 80) interval:*(double *)(a1 + 80)];
    sub_1002D0A78("kCLConnectionMessageCLGNSSStateQueryAssertionResponse", v64, buf);
    uint64_t v33 = *(void *)(a1 + 8);
    uint64_t v59 = *(void *)buf;
    v60 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      unint64_t v34 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }

    CLConnection::sendMessage(v33, &v59);
    unint64_t v36 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        unint64_t v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    __int16 v39 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v40 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

    return;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10182FC28);
  }
  char v42 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient recently update sent to client",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    *(_WORD *)uint64_t v64 = 0;
    LODWORD(v57) = 2;
    char v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient recently update sent to client",  v64,  v57);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssert ionReportData &)",  "%s\n",  v24);
    goto LABEL_74;
  }

void sub_1002D0314( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1002D0338(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10182FC48);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10182FC48);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification, event:%{public, loca tion:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1002D06B4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1002D04F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D0510(uint64_t a1)
{
}

void sub_1002D0518(uint64_t a1)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10182FC68);
  }
  id v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "#CLGNSSStateQueryAssertion,bbGnssStatusQueryReportingTimeout",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10182FC68);
    }
    v4[0] = 0;
    id v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#CLGNSSStateQueryAssertion,bbGnssStatusQueryReportingTimeout",  v4,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGNSSStateQueryAssertion::bbGnssStatusQueryReportingTimeout()",  "%s\n",  v3);
  }

  sub_1002CFA00(a1, (double *)(a1 + 24));
}

void sub_1002D06B4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 45)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a4 + 1488);
    double v5 = (double *)(a1 + 24);
    *(void *)(a1 + 40) = *(void *)(a4 + 1504);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    double v6 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134284033;
      uint64_t v23 = v7;
      __int16 v24 = 2049;
      uint64_t v25 = v8;
      __int16 v26 = 2049;
      uint64_t v27 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#CLGNSSStateQueryAssertion,daemon,handleGnssStatusUpdateNotification,gnssStart,%{private}.3lf,gnssStop,%{private }.3lf,gnssYield,%{private}.3lf",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10182FC28);
      }
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      int v16 = 134284033;
      uint64_t v17 = v11;
      __int16 v18 = 2049;
      uint64_t v19 = v12;
      __int16 v20 = 2049;
      uint64_t v21 = v13;
      __int16 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#CLGNSSStateQueryAssertion,daemon,handleGnssStatusUpdateNotification,gnssStart,%{private}.3lf,gnss Stop,%{private}.3lf,gnssYield,%{private}.3lf",  &v16,  32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification(int, const CLLocationProvider_Type::Notificat ion &, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v14);
    }

    sub_1002CFA00(a1, v5);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10182FC28);
    }
    uint64_t v10 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#CLGNSSStateQueryAssertion,daemon,not handleGnssStatusUpdateNotification",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10182FC28);
      }
      LOWORD(v16) = 0;
      double v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#CLGNSSStateQueryAssertion,daemon,not handleGnssStatusUpdateNotification",  &v16,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification(int, const CLLocationProvider_Type::Notificat ion &, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v15);
    }
  }

void sub_1002D09F4(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1002D0A20(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1002D0A4C(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_1002D0A78@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  double v6 = operator new(0x70uLL);
  uint64_t result = sub_100215340(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002D0AC4(_Unwind_Exception *a1)
{
}

void sub_1002D2520(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1002D254C(uint64_t a1, __int128 *a2)
{
  *(void *)a1 = &off_10182FCB8;
  __int128 v4 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 32), *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *(void *)(a1 + 48) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 32) = v5;
  }

  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 12);
  *(_BYTE *)(a1 + 64) = 0;
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_1019940F8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1019940F8))
  {
    unsigned __int8 v8 = 0;
    sub_1012049AC((unsigned __int8 *)&unk_1019940F0, "ResumeRemindersModelDebugLogging", &v8, 0);
    __cxa_guard_release(&qword_1019940F8);
  }

  *(_BYTE *)(a1 + 64) = byte_1019940F1;
  return a1;
}

void sub_1002D2638(_Unwind_Exception *a1)
{
}

void sub_1002D2660(uint64_t a1, double *a2)
{
  __int128 v4 = operator new(4uLL);
  __p = v4;
  _DWORD *v4 = 5;
  uint64_t v17 = v4 + 1;
  __int16 v18 = v4 + 1;
  __int16 v41 = 0;
  *(_OWORD *)uint64_t v40 = xmmword_1012E1E90;
  memset(&v40[2], 0, 135);
  __int128 v42 = xmmword_1012E1E90;
  uint64_t v43 = 0LL;
  int v44 = 0;
  v46[0] = 0LL;
  uint64_t v45 = 0LL;
  *(void *)((char *)v46 + 5) = 0LL;
  *(void *)((char *)&v46[1] + 6) = 0LL;
  char v47 = 0;
  memset(&v46[3], 0, 24);
  __int128 v48 = xmmword_1012E1E90;
  uint64_t v49 = 0LL;
  int v50 = 0;
  unint64_t v51 = 0xFFEFFFFFFFFFFFFFLL;
  int v62 = 0;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  int v57 = 0;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  memset(v61, 0, sizeof(v61));
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  unint64_t v65 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v66 = 0LL;
  int v67 = 0;
  uint64_t v73 = 0LL;
  __int16 v74 = 0;
  int v79 = 0;
  int v72 = 0;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  char v77 = 0;
  memset(v78, 0, sizeof(v78));
  unint64_t v80 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v99 = 0u;
  __int128 v98 = 0u;
  __int128 v97 = 0u;
  __int128 v96 = 0u;
  __int128 v95 = 0u;
  __int128 v94 = 0u;
  __int128 v93 = 0u;
  __int128 v92 = 0u;
  __int128 v91 = 0u;
  __int128 v90 = 0u;
  __int128 v89 = 0u;
  __int128 v88 = 0u;
  __int128 v87 = 0u;
  __int128 v86 = 0u;
  __int128 v85 = 0u;
  __int128 v84 = 0u;
  __int128 v83 = 0u;
  __int128 v82 = 0u;
  __int128 v81 = 0u;
  uint64_t v100 = 0LL;
  *(void *)v101 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v101[8], 0, 64);
  unint64_t v102 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v103 = 0LL;
  int v104 = 0;
  uint64_t v105 = 0LL;
  char v106 = 0;
  unint64_t v107 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v109 = 0LL;
  uint64_t v108 = 0LL;
  uint64_t v110 = 0x80000000800000LL;
  uint64_t v112 = 0LL;
  uint64_t v111 = 0LL;
  __int128 v113 = xmmword_1012E1EA0;
  uint64_t v114 = 0x80000000800000LL;
  __int128 v115 = 0u;
  __int128 v116 = 0u;
  uint64_t v117 = 0LL;
  unint64_t v118 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  __int128 v121 = 0u;
  __int128 v122 = 0u;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  int v125 = 0;
  unint64_t v126 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v127 = 0;
  int v128 = 0;
  unint64_t v129 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v130 = 7LL;
  unint64_t v131 = 0xFFEFFFFFFFFFFFFFLL;
  char v132 = 0;
  uint64_t v134 = 0LL;
  uint64_t v133 = 0LL;
  uint64_t v135 = 0LL;
  if (sub_100CDB578(a2, &__p, (uint64_t)v40))
  {
    __int128 v35 = *(_OWORD *)v101;
    __int128 v36 = *(_OWORD *)&v101[16];
    __int128 v37 = *(_OWORD *)&v101[32];
    __int128 v38 = *(_OWORD *)&v101[48];
    uint64_t v39 = *(void *)&v101[64];
    if (*(double *)v101 > *(double *)(a1 + 24))
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_101994110);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_101994110))
      {
        *(_DWORD *)buf = 0;
        sub_10023AE2C((unsigned __int8 *)&byte_101994100, "ResumeRemindersClassificationOverride", buf, 0);
        __cxa_guard_release(&qword_101994110);
      }

      if (byte_101994100) {
        *(void *)&__int128 v36 = dword_101994104;
      }
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      unsigned __int8 v6 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = (void *)(a1 + 32);
        *(_DWORD *)buf = 136315906;
        double v28 = v7;
        __int16 v29 = 2048;
        uint64_t v30 = v35;
        __int16 v31 = 2048;
        uint64_t v32 = v36;
        __int16 v33 = 2048;
        double v34 = *((float *)&v36 + 2);
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[resume reminders] model %s, adding tier2 entry,startTime,%f,type,%zu,confidence,%f",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10182FDE0);
        }
        uint64_t v12 = (void *)(a1 + 32);
        int v19 = 136315906;
        __int16 v20 = v12;
        __int16 v21 = 2048;
        uint64_t v22 = v35;
        __int16 v23 = 2048;
        uint64_t v24 = v36;
        __int16 v25 = 2048;
        double v26 = *((float *)&v36 + 2);
        LODWORD(v14) = 42;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "[resume reminders] model %s, adding tier2 entry,startTime,%f,type,%zu,confidence,%f",  (const char *)&v19,  v14,  v15,  *(double *)&__p);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWorkoutResumeReminders::DefaultActivityModel::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v13);
      }

      sub_1002D2CF4((void *)(a1 + 72), (uint64_t)&v35);
    }
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    unsigned __int8 v8 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 32);
      *(_DWORD *)buf = 136315138;
      double v28 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[resume reminders] model %s, failed to get tier2 source",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      uint64_t v10 = (void *)(a1 + 32);
      LODWORD(v35) = 136315138;
      *(void *)((char *)&v35 + 4) = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "[resume reminders] model %s, failed to get tier2 source",  (const char *)&v35);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLWorkoutResumeReminders::DefaultActivityModel::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v11);
    }
  }

  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }

void sub_1002D2CB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2CF4(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[5];
  if (v3 >= 0x78)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_1002D6744((uint64_t)a1, 1);
  }

uint64_t sub_1002D2D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = (void *)(a1 + 72);
  v55[0] = &off_10182FE10;
  v55[1] = a1;
  __int128 v56 = v55;
  sub_1002D341C((void *)(a1 + 72), (uint64_t)&unk_1012E5640, (uint64_t)v55, v34);
  unsigned __int8 v5 = v56;
  if (v56 == v55)
  {
    uint64_t v6 = 4LL;
    unsigned __int8 v5 = v55;
  }

  else
  {
    if (!v56) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v53[0] = &off_10182FE10;
  v53[1] = a1;
  __int128 v54 = v53;
  sub_1002D341C(v4, (uint64_t)&unk_1012E5658, (uint64_t)v53, v33);
  uint64_t v7 = v54;
  if (v54 == v53)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v53;
  }

  else
  {
    if (!v54) {
      goto LABEL_11;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v51[0] = &off_10182FE10;
  v51[1] = a1;
  __int128 v52 = v51;
  sub_1002D341C(v4, (uint64_t)&unk_1012E5670, (uint64_t)v51, v32);
  uint64_t v9 = v52;
  if (v52 == v51)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v51;
  }

  else
  {
    if (!v52) {
      goto LABEL_16;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  if (*(_BYTE *)(a1 + 64))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    uint64_t v11 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 8);
      sub_1010DDBC0(&v31, "ActivityTentative");
      sub_1002D3520((const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v35);
      if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v14 = &v35;
      }
      else {
        double v14 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v29, "ActivityConfident");
      uint64_t v15 = &v30;
      sub_1002D3520((const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)v33 + 8, &v30);
      if ((v30.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v27, "ActivityRetraction");
      sub_1002D3520((const void **)&v27.__r_.__value_.__l.__data_, (uint64_t)v32 + 8, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136316162;
      __int128 v42 = v12;
      __int16 v43 = 2048;
      uint64_t v44 = v13;
      __int16 v45 = 2080;
      uint64_t v46 = v14;
      __int16 v47 = 2080;
      __int128 v48 = v15;
      __int16 v49 = 2080;
      int v50 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[resume reminders] model,%s,workout,%zu,%s,%s,%s",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      __int16 v18 = (void *)(a1 + 32);
      uint64_t v19 = qword_101934688;
      std::string::size_type v20 = *(void *)(a1 + 8);
      sub_1010DDBC0(&v30, "ActivityTentative");
      __int16 v21 = &v31;
      sub_1002D3520((const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v31);
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&__p, "ActivityConfident");
      uint64_t v22 = &v29;
      sub_1002D3520((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v33 + 8, &v29);
      if ((v29.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(v25, "ActivityRetraction");
      sub_1002D3520((const void **)v25, (uint64_t)v32 + 8, &v27);
      if ((v27.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v23 = &v27;
      }
      else {
        __int16 v23 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      LODWORD(v35.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      WORD2(v35.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = v20;
      HIWORD(v35.__r_.__value_.__r.__words[2]) = 2080;
      __int128 v36 = v21;
      __int16 v37 = 2080;
      __int128 v38 = v22;
      __int16 v39 = 2080;
      uint64_t v40 = v23;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  2LL,  "[resume reminders] model,%s,workout,%zu,%s,%s,%s",  (const char *)&v35,  52,  (const char *)v25[0],  (const char *)v25[1],  v26);
      if (SHIBYTE(v26) < 0) {
        operator delete(v25[0]);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual Result CLWorkoutResumeReminders::DefaultActivityModel::run() const",  "%s\n",  v24);
    }
  }

  return sub_1002D3C40(a1, v4, v34, v33, v32, a2);
}

void sub_1002D32B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void *sub_1002D341C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = *(_DWORD *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_10001A504((uint64_t)v11, a3);
  v8.n128_f64[0] = sub_1002D67A0(a1, v6, v7, (uint64_t)v11, (uint64_t)(a4 + 2));
  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v10 = 4LL;
    uint64_t result = v11;
  }

  else
  {
    if (!v12) {
      return result;
    }
    uint64_t v10 = 5LL;
  }

  return (void *)(*(uint64_t (**)(__n128))(*result + 8 * v10))(v8);
}

void sub_1002D34E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1002D3520(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  else {
    size_t v6 = (size_t)a1[1];
  }
  unint64_t v7 = &v59;
  sub_1000392EC((uint64_t)&v59, v6 + 2);
  if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    unint64_t v7 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    else {
      __n128 v8 = *a1;
    }
    memmove(v7, v8, v6);
  }

  strcpy((char *)v7 + v6, "M,");
  std::to_string(&v58, *(void *)(a2 + 16));
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v9 = &v58;
  }
  else {
    uint64_t v9 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v58.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v59, (const std::string::value_type *)v9, size);
  std::string v60 = *v11;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  else {
    size_t v12 = (size_t)a1[1];
  }
  uint64_t v13 = &v58;
  sub_1000392EC((uint64_t)&v58, v12 + 2);
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v13 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    else {
      double v14 = *a1;
    }
    memmove(v13, v14, v12);
  }

  strcpy((char *)v13 + v12, "N,");
  std::to_string(&v57, *(void *)(a2 + 24));
  if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v15 = &v57;
  }
  else {
    uint64_t v15 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v16 = v57.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v16 = v57.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&v58, (const std::string::value_type *)v15, v16);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  else {
    size_t v19 = (size_t)a1[1];
  }
  std::string::size_type v20 = &v57;
  sub_1000392EC((uint64_t)&v57, v19 + 5);
  if ((v57.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if (v19)
  {
    else {
      __int16 v21 = *a1;
    }
    memmove(v20, v21, v19);
  }

  strcpy((char *)v20 + v19, "Time,");
  std::to_string(&v56, *(double *)a2);
  if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v22 = &v56;
  }
  else {
    uint64_t v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v23 = v56.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v23 = v56.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = std::string::append(&v57, (const std::string::value_type *)v22, v23);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  else {
    size_t v26 = (size_t)a1[1];
  }
  std::string v27 = &v56;
  sub_1000392EC((uint64_t)&v56, v26 + 8);
  if ((v56.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string v27 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    else {
      double v28 = *a1;
    }
    memmove(v27, v28, v26);
  }

  strcpy((char *)v27 + v26, "Matches,");
  std::to_string(&v55, *(_DWORD *)(a2 + 8));
  if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v29 = &v55;
  }
  else {
    std::string v29 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v30 = v55.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v30 = v55.__r_.__value_.__l.__size_;
  }
  std::string v31 = std::string::append(&v56, (const std::string::value_type *)v29, v30);
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  int v33 = (char)v60.__r_.__value_.__s.__size_;
  if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t v34 = v60.__r_.__value_.__s.__size_;
  }
  else {
    size_t v34 = v60.__r_.__value_.__l.__size_;
  }
  std::string v35 = &v52;
  sub_1000392EC((uint64_t)&v52, v34 + 1);
  if ((v52.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string v35 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if (v34)
  {
    if (v33 >= 0) {
      __int128 v36 = &v60;
    }
    else {
      __int128 v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    memmove(v35, v36, v34);
  }

  *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 44;
  if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v37 = &v59;
  }
  else {
    __int16 v37 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v38 = v59.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v38 = v59.__r_.__value_.__l.__size_;
  }
  __int16 v39 = std::string::append(&v52, (const std::string::value_type *)v37, v38);
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v41 = std::string::append(&v53, ",");
  __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v41->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0LL;
  v41->__r_.__value_.__l.__cap_ = 0LL;
  v41->__r_.__value_.__r.__words[0] = 0LL;
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v43 = &v58;
  }
  else {
    __int16 v43 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v44 = v58.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v44 = v58.__r_.__value_.__l.__size_;
  }
  __int16 v45 = std::string::append(&v54, (const std::string::value_type *)v43, v44);
  __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0LL;
  v45->__r_.__value_.__l.__cap_ = 0LL;
  v45->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v47 = std::string::append(&v55, ",");
  __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v47->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0LL;
  v47->__r_.__value_.__l.__cap_ = 0LL;
  v47->__r_.__value_.__r.__words[0] = 0LL;
  if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v49 = &v57;
  }
  else {
    __int16 v49 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v50 = v57.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v50 = v57.__r_.__value_.__l.__size_;
  }
  unint64_t v51 = std::string::append(&v56, (const std::string::value_type *)v49, v50);
  *a3 = *v51;
  v51->__r_.__value_.__l.__size_ = 0LL;
  v51->__r_.__value_.__l.__cap_ = 0LL;
  v51->__r_.__value_.__r.__words[0] = 0LL;
  if (((char)v59.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if ((v33 & 0x80000000) == 0) {
      return;
    }
LABEL_127:
    operator delete(v60.__r_.__value_.__l.__data_);
    return;
  }

  operator delete(v59.__r_.__value_.__l.__data_);
  if (v33 < 0) {
    goto LABEL_127;
  }
}

void sub_1002D3AB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D3BAC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    JUMPOUT(0x1002D3B80LL);
  }
  JUMPOUT(0x1002D3B84LL);
}

void sub_1002D3BD8()
{
}

void sub_1002D3BE0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1002D3B94LL);
}

void sub_1002D3C0C()
{
}

void sub_1002D3C14()
{
}

uint64_t sub_1002D3C40@<X0>( uint64_t result@<X0>, void *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0LL;
  *(_DWORD *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0xBFF0000000000000LL;
  *(_DWORD *)(a6 + 24) = 0;
  uint64_t v7 = a2[5];
  if (v7)
  {
    uint64_t v8 = result;
    int v9 = *(_DWORD *)(result + 56);
    if (v9 == 1)
    {
      uint64_t v17 = *(void *)(*(void *)(a2[1] + 8 * ((v7 + a2[4] - 1) / 0x38uLL)) + 72 * ((v7 + a2[4] - 1) % 0x38uLL));
      uint64_t v18 = *(void *)(result + 8);
      size_t v12 = operator new(0x30uLL);
      __int128 v19 = a5[1];
      *size_t v12 = *a5;
      v12[1] = v19;
      v12[2] = a5[2];
      if (*((double *)v12 + 1) == -1.0)
      {
        int v20 = 0;
        uint64_t v18 = 0LL;
      }

      else
      {
        int v20 = *(_DWORD *)v12;
        uint64_t v17 = *((void *)v12 + 1);
      }

      *(void *)a6 = v18;
      *(_DWORD *)(a6 + 8) = v20;
      *(void *)(a6 + 16) = v17;
    }

    else
    {
      if (v9)
      {
LABEL_15:
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16LL))(v8);
        *(_DWORD *)(a6 + 24) = result;
        return result;
      }

      double v10 = *(double *)(*(void *)(a2[1] + 8 * ((v7 + a2[4] - 1) / 0x38uLL)) + 72 * ((v7 + a2[4] - 1) % 0x38uLL));
      uint64_t v11 = *(void *)(result + 8);
      __int128 v21 = *a4;
      __int128 v22 = a4[1];
      __int128 v23 = a4[2];
      __int128 v24 = *a3;
      __int128 v25 = a3[1];
      __int128 v26 = a3[2];
      size_t v12 = operator new(0x60uLL);
      uint64_t v13 = 0LL;
      v12[2] = v23;
      v12[3] = v24;
      v12[4] = v25;
      v12[5] = v26;
      *size_t v12 = v21;
      v12[1] = v22;
      while (1)
      {
        double v14 = *((double *)&v12[v13] + 1);
        if (v14 != -1.0) {
          break;
        }
        v13 += 3LL;
        if (v13 == 6)
        {
          uint64_t v11 = 0LL;
          int v15 = 0;
          double v14 = v10;
          goto LABEL_11;
        }
      }

      int v15 = v12[v13];
LABEL_11:
      *(void *)a6 = v11;
      *(_DWORD *)(a6 + 8) = v15;
      *(double *)(a6 + 16) = v14;
    }

    *(_DWORD *)(a6 + 24) = 0;
    operator delete(v12);
    goto LABEL_15;
  }

  return result;
}

uint64_t sub_1002D3E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = (void *)(a1 + 72);
  v55[0] = &off_10182FEA0;
  std::string v56 = v55;
  sub_1002D341C((void *)(a1 + 72), (uint64_t)&unk_1012E5688, (uint64_t)v55, v34);
  unsigned __int8 v5 = v56;
  if (v56 == v55)
  {
    uint64_t v6 = 4LL;
    unsigned __int8 v5 = v55;
  }

  else
  {
    if (!v56) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v53[0] = &off_10182FEA0;
  std::string v54 = v53;
  sub_1002D341C(v4, (uint64_t)&unk_1012E56A0, (uint64_t)v53, v33);
  uint64_t v7 = v54;
  if (v54 == v53)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v53;
  }

  else
  {
    if (!v54) {
      goto LABEL_11;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v51[0] = &off_10182FEA0;
  std::string v52 = v51;
  sub_1002D341C(v4, (uint64_t)&unk_1012E5670, (uint64_t)v51, v32);
  int v9 = v52;
  if (v52 == v51)
  {
    uint64_t v10 = 4LL;
    int v9 = v51;
  }

  else
  {
    if (!v52) {
      goto LABEL_16;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  if (*(_BYTE *)(a1 + 64))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    uint64_t v11 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      size_t v12 = (void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 16);
      sub_1010DDBC0(&v31, "WalkingTentative");
      sub_1002D3520((const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v35);
      if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v14 = &v35;
      }
      else {
        double v14 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v29, "WalkingConfident");
      int v15 = &v30;
      sub_1002D3520((const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)v33 + 8, &v30);
      if ((v30.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&v27, "WalkingRetraction");
      sub_1002D3520((const void **)&v27.__r_.__value_.__l.__data_, (uint64_t)v32 + 8, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136316162;
      __int128 v42 = v12;
      __int16 v43 = 2048;
      uint64_t v44 = v13;
      __int16 v45 = 2080;
      __int128 v46 = v14;
      __int16 v47 = 2080;
      __int128 v48 = v15;
      __int16 v49 = 2080;
      std::string::size_type v50 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[resume reminders] model,%s,workout,%zu,%s,%s,%s",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      uint64_t v18 = (void *)(a1 + 32);
      uint64_t v19 = qword_101934688;
      std::string::size_type v20 = *(void *)(a1 + 16);
      sub_1010DDBC0(&v30, "WalkingTentative");
      __int128 v21 = &v31;
      sub_1002D3520((const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)v34 + 8, &v31);
      if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(&__p, "WalkingConfident");
      __int128 v22 = &v29;
      sub_1002D3520((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v33 + 8, &v29);
      if ((v29.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      sub_1010DDBC0(v25, "WalkingRetraction");
      sub_1002D3520((const void **)v25, (uint64_t)v32 + 8, &v27);
      if ((v27.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v23 = &v27;
      }
      else {
        __int128 v23 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      LODWORD(v35.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      WORD2(v35.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = v20;
      HIWORD(v35.__r_.__value_.__r.__words[2]) = 2080;
      __int128 v36 = v21;
      __int16 v37 = 2080;
      std::string::size_type v38 = v22;
      __int16 v39 = 2080;
      __int128 v40 = v23;
      __int128 v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  2LL,  "[resume reminders] model,%s,workout,%zu,%s,%s,%s",  (const char *)&v35,  52,  (const char *)v25[0],  (const char *)v25[1],  v26);
      if (SHIBYTE(v26) < 0) {
        operator delete(v25[0]);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual Result CLWorkoutResumeReminders::WalkModel::run() const",  "%s\n",  v24);
    }
  }

  return sub_1002D3C40(a1, v4, v34, v33, v32, a2);
}

void sub_1002D43B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_1002D451C(uint64_t a1, uint64_t a2)
{
  __int128 v4 = operator new(4uLL);
  std::string __p = v4;
  _DWORD *v4 = 3;
  uint64_t v19 = v4 + 1;
  std::string::size_type v20 = v4 + 1;
  __int16 v38 = 0;
  *(_OWORD *)__int16 v37 = xmmword_1012E1E90;
  memset(&v37[2], 0, 135);
  __int128 v39 = xmmword_1012E1E90;
  uint64_t v40 = 0LL;
  int v41 = 0;
  v43[0] = 0LL;
  uint64_t v42 = 0LL;
  *(void *)((char *)v43 + 5) = 0LL;
  *(void *)((char *)&v43[1] + 6) = 0LL;
  uint64_t v46 = 0LL;
  char v47 = 0;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  __int128 v48 = xmmword_1012E1E90;
  uint64_t v49 = 0LL;
  int v50 = 0;
  unint64_t v51 = 0xFFEFFFFFFFFFFFFFLL;
  int v62 = 0;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  int v57 = 0;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  memset(v61, 0, sizeof(v61));
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  unint64_t v65 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v66 = 0LL;
  int v67 = 0;
  uint64_t v73 = 0LL;
  __int16 v74 = 0;
  int v79 = 0;
  int v72 = 0;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  char v77 = 0;
  memset(v78, 0, sizeof(v78));
  unint64_t v80 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v99 = 0u;
  __int128 v98 = 0u;
  __int128 v97 = 0u;
  __int128 v96 = 0u;
  __int128 v95 = 0u;
  __int128 v94 = 0u;
  __int128 v93 = 0u;
  __int128 v92 = 0u;
  __int128 v91 = 0u;
  __int128 v90 = 0u;
  __int128 v89 = 0u;
  __int128 v88 = 0u;
  __int128 v87 = 0u;
  __int128 v86 = 0u;
  __int128 v85 = 0u;
  __int128 v84 = 0u;
  __int128 v83 = 0u;
  __int128 v82 = 0u;
  __int128 v81 = 0u;
  uint64_t v100 = 0LL;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v102 = 0u;
  __int128 v103 = 0u;
  __int128 v104 = 0u;
  __int128 v105 = 0u;
  unint64_t v106 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v107 = 0LL;
  int v108 = 0;
  uint64_t v109 = 0LL;
  char v110 = 0;
  unint64_t v111 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v113 = 0LL;
  uint64_t v112 = 0LL;
  uint64_t v114 = 0x80000000800000LL;
  uint64_t v116 = 0LL;
  uint64_t v115 = 0LL;
  __int128 v117 = xmmword_1012E1EA0;
  uint64_t v118 = 0x80000000800000LL;
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  uint64_t v121 = 0LL;
  unint64_t v122 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  __int128 v127 = 0u;
  __int128 v128 = 0u;
  int v129 = 0;
  unint64_t v130 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v131 = 0;
  int v132 = 0;
  unint64_t v133 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v134 = 7LL;
  unint64_t v135 = 0xFFEFFFFFFFFFFFFFLL;
  char v136 = 0;
  uint64_t v138 = 0LL;
  uint64_t v137 = 0LL;
  uint64_t v139 = 0LL;
  if (sub_100CDB578((double *)a2, &__p, (uint64_t)v37))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    unsigned __int8 v5 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 32);
      *(_DWORD *)buf = 136315906;
      std::string v30 = v6;
      __int16 v31 = 2048;
      uint64_t v32 = *((void *)&v48 + 1);
      __int16 v33 = 2048;
      uint64_t v34 = v45;
      __int16 v35 = 2048;
      uint64_t v36 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "[resume reminders] model %s, adding hr entry,startTime,%f,bpm,%f,confidence,%f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      double v14 = (void *)(a1 + 32);
      int v21 = 136315906;
      __int128 v22 = v14;
      __int16 v23 = 2048;
      uint64_t v24 = *((void *)&v48 + 1);
      __int16 v25 = 2048;
      uint64_t v26 = v45;
      __int16 v27 = 2048;
      uint64_t v28 = v46;
      LODWORD(v16) = 42;
      int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "[resume reminders] model %s, adding hr entry,startTime,%f,bpm,%f,confidence,%f",  (const char *)&v21,  v16,  v17,  *(double *)&__p);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWorkoutResumeReminders::HRModel::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v15);
    }

    sub_1002D4B34((void *)(a1 + 72), (uint64_t)&v44);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    uint64_t v7 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)(a1 + 32);
      *(_DWORD *)buf = 136315138;
      std::string v30 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[resume reminders] model %s, failed to get hr source",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      size_t v12 = (void *)(a1 + 32);
      int v21 = 136315138;
      __int128 v22 = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "[resume reminders] model %s, failed to get hr source",  (const char *)&v21);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLWorkoutResumeReminders::HRModel::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v13);
    }
  }

  __int128 v9 = *(_OWORD *)(a2 + 328);
  __int128 v10 = *(_OWORD *)(a2 + 344);
  __int128 v11 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 372);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
LABEL_19:
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }

void sub_1002D4B10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D4B34(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[5];
  if (v3 >= 0x78)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_1002D6E20((uint64_t)a1, 1);
  }

uint64_t sub_1002D4B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = (void *)(a1 + 72);
  v34[0] = &off_10182FF20;
  v34[1] = a1;
  __int16 v35 = v34;
  sub_1002D4FA8((void *)(a1 + 72), (uint64_t)&unk_1012E56F8, (uint64_t)v34, v23);
  unsigned __int8 v5 = v35;
  if (v35 == v34)
  {
    uint64_t v6 = 4LL;
    unsigned __int8 v5 = v34;
  }

  else
  {
    if (!v35) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v32[0] = &off_10182FF20;
  v32[1] = a1;
  __int16 v33 = v32;
  sub_1002D4FA8(v4, (uint64_t)&unk_1012E5670, (uint64_t)v32, v22);
  uint64_t v7 = v33;
  if (v33 == v32)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v32;
  }

  else
  {
    if (!v33) {
      goto LABEL_11;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  if (*(_BYTE *)(a1 + 64))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    __int128 v9 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      __int128 v10 = (void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 8);
      sub_1010DDBC0(&v21, "HRConfident");
      sub_1002D3520((const void **)&v21.__r_.__value_.__l.__data_, (uint64_t)v23 + 8, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      __int16 v27 = v10;
      __int16 v28 = 2048;
      uint64_t v29 = v11;
      __int16 v30 = 2080;
      __int16 v31 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "[resume reminders] model,%s,workout,%zu,%s",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      double v14 = (void *)(a1 + 32);
      uint64_t v15 = qword_101934688;
      std::string::size_type v16 = *(void *)(a1 + 8);
      sub_1010DDBC0(v19, "HRConfident");
      sub_1002D3520((const void **)v19, (uint64_t)v23 + 8, &v21);
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v17 = &v21;
      }
      else {
        double v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v16;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
      __int16 v25 = v17;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  2LL,  "[resume reminders] model,%s,workout,%zu,%s",  (const char *)&__p,  32,  (const char *)v19[0]);
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual Result CLWorkoutResumeReminders::HRModel::run() const",  "%s\n",  v18);
    }
  }

  return sub_1002D50AC(a1, v4, v23, v23, v22, a2);
}

void sub_1002D4F20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002D4FA8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = *(_DWORD *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_10001A504((uint64_t)v11, a3);
  v8.n128_f64[0] = sub_1002D6E7C(a1, v6, v7, (uint64_t)v11, (uint64_t)(a4 + 2));
  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v10 = 4LL;
    uint64_t result = v11;
  }

  else
  {
    if (!v12) {
      return result;
    }
    uint64_t v10 = 5LL;
  }

  return (void *)(*(uint64_t (**)(__n128))(*result + 8 * v10))(v8);
}

void sub_1002D506C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D50AC@<X0>( uint64_t result@<X0>, void *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0LL;
  *(_DWORD *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0xBFF0000000000000LL;
  *(_DWORD *)(a6 + 24) = 0;
  uint64_t v7 = a2[5];
  if (v7)
  {
    uint64_t v8 = result;
    int v9 = *(_DWORD *)(result + 56);
    if (v9 == 1)
    {
      uint64_t v17 = *(void *)(*(void *)(a2[1] + (((unint64_t)(v7 + a2[4] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL))
                      + (((v7 + a2[4] - 1) & 0x3F) << 6)
                      + 40);
      uint64_t v18 = *(void *)(result + 8);
      size_t v12 = operator new(0x30uLL);
      __int128 v19 = a5[1];
      *size_t v12 = *a5;
      v12[1] = v19;
      v12[2] = a5[2];
      if (*((double *)v12 + 1) == -1.0)
      {
        int v20 = 0;
        uint64_t v18 = 0LL;
      }

      else
      {
        int v20 = *(_DWORD *)v12;
        uint64_t v17 = *((void *)v12 + 1);
      }

      *(void *)a6 = v18;
      *(_DWORD *)(a6 + 8) = v20;
      *(void *)(a6 + 16) = v17;
    }

    else
    {
      if (v9)
      {
LABEL_15:
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16LL))(v8);
        *(_DWORD *)(a6 + 24) = result;
        return result;
      }

      double v10 = *(double *)(*(void *)(a2[1] + (((unint64_t)(v7 + a2[4] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL))
                      + (((v7 + a2[4] - 1) & 0x3F) << 6)
                      + 40);
      uint64_t v11 = *(void *)(result + 8);
      __int128 v21 = *a4;
      __int128 v22 = a4[1];
      __int128 v23 = a4[2];
      __int128 v24 = *a3;
      __int128 v25 = a3[1];
      __int128 v26 = a3[2];
      size_t v12 = operator new(0x60uLL);
      uint64_t v13 = 0LL;
      v12[2] = v23;
      v12[3] = v24;
      v12[4] = v25;
      v12[5] = v26;
      *size_t v12 = v21;
      v12[1] = v22;
      while (1)
      {
        double v14 = *((double *)&v12[v13] + 1);
        if (v14 != -1.0) {
          break;
        }
        v13 += 3LL;
        if (v13 == 6)
        {
          uint64_t v11 = 0LL;
          int v15 = 0;
          double v14 = v10;
          goto LABEL_11;
        }
      }

      int v15 = v12[v13];
LABEL_11:
      *(void *)a6 = v11;
      *(_DWORD *)(a6 + 8) = v15;
      *(double *)(a6 + 16) = v14;
    }

    *(_DWORD *)(a6 + 24) = 0;
    operator delete(v12);
    goto LABEL_15;
  }

  return result;
}

void *sub_1002D5280(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = a2;
  a1[4] = 66LL;
  a1[5] = 0x7FEFFFFFFFFFFFFFLL;
  sub_1002D52DC((uint64_t)a1, a3, a4);
  return a1;
}

void sub_1002D52C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1002D52DC(uint64_t a1, uint64_t a2, double a3)
{
  if (*(void *)(a1 + 32) == a2)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    __int128 v4 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] already selected workout %ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10182FDE0);
      }
      *(_DWORD *)int v72 = 134217984;
      *(void *)&v72[4] = a2;
      unsigned __int8 v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] already selected workout %ld",  v72);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutResumeReminders::Detector::createModelsForWorkout(CMWorkoutType, CFAbsoluteTime)",  "%s\n",  v5);
    }
  }

  else
  {
    *(void *)(a1 + 32) = a2;
    uint64_t v8 = *(char **)a1;
    int v9 = *(char **)(a1 + 8);
    while (v9 != v8)
    {
      uint64_t v11 = *((void *)v9 - 1);
      v9 -= 8;
      uint64_t v10 = v11;
      *(void *)int v9 = 0LL;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v10 + 32LL))(v10);
      }
    }

    *(void *)(a1 + 8) = v8;
    switch(a2)
    {
      case 1LL:
      case 2LL:
      case 15LL:
      case 16LL:
      case 17LL:
      case 18LL:
      case 24LL:
        *(void *)buf = a2;
        *(void *)&uint8_t buf[8] = 1LL;
        double v68 = a3;
        sub_1010DDBC0(__p, "WalkModel");
        int v71 = 0;
        __int16 v28 = (char *)operator new(0x78uLL);
        sub_1002D254C((uint64_t)v28, (__int128 *)buf);
        *(_OWORD *)(v28 + 104) = 0u;
        *(_OWORD *)(v28 + 88) = 0u;
        *(_OWORD *)(v28 + 72) = 0u;
        *(void *)__int16 v28 = off_10182FD28;
        unint64_t v29 = *(void *)(a1 + 16);
        __int16 v30 = *(void **)(a1 + 8);
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v32 = ((uint64_t)v30 - *(void *)a1) >> 3;
          uint64_t v33 = v29 - *(void *)a1;
          uint64_t v34 = v33 >> 2;
          else {
            unint64_t v35 = v34;
          }
          uint64_t v74 = a1 + 16;
          if (v35) {
            uint64_t v36 = (char *)sub_1000071BC(a1 + 16, v35);
          }
          else {
            uint64_t v36 = 0LL;
          }
          __int16 v38 = &v36[8 * v32];
          __int128 v39 = &v36[8 * v35];
          uint64_t v73 = v39;
          *(void *)__int16 v38 = v28;
          __int16 v31 = v38 + 8;
          *(void *)&v72[16] = v38 + 8;
          int v41 = *(char **)a1;
          uint64_t v40 = *(char **)(a1 + 8);
          if (v40 == *(char **)a1)
          {
            int64x2_t v43 = vdupq_n_s64((unint64_t)v40);
          }

          else
          {
            do
            {
              uint64_t v42 = *((void *)v40 - 1);
              v40 -= 8;
              *(void *)uint64_t v40 = 0LL;
              *((void *)v38 - 1) = v42;
              v38 -= 8;
            }

            while (v40 != v41);
            int64x2_t v43 = *(int64x2_t *)a1;
            __int16 v31 = *(void **)&v72[16];
            __int128 v39 = v73;
          }

          *(void *)a1 = v38;
          *(void *)(a1 + 8) = v31;
          *(int64x2_t *)&v72[8] = v43;
          uint64_t v44 = *(char **)(a1 + 16);
          *(void *)(a1 + 16) = v39;
          uint64_t v73 = v44;
          *(void *)int v72 = v43.i64[0];
          sub_1002D70CC((uint64_t)v72);
        }

        else
        {
          *__int16 v30 = v28;
          __int16 v31 = v30 + 1;
        }

        *(void *)(a1 + 8) = v31;
        if (v70 < 0) {
          operator delete(__p[0]);
        }
        *(void *)buf = a2;
        *(void *)&uint8_t buf[8] = 2LL;
        double v68 = a3;
        sub_1010DDBC0(__p, "DefaultActivityModel");
        int v71 = 0;
        uint64_t v45 = (char *)operator new(0x78uLL);
        sub_1002D254C((uint64_t)v45, (__int128 *)buf);
        *(void *)uint64_t v45 = off_10182FCF0;
        *(_OWORD *)(v45 + 72) = 0u;
        *(_OWORD *)(v45 + 88) = 0u;
        *(_OWORD *)(v45 + 104) = 0u;
        char v47 = *(void **)(a1 + 8);
        unint64_t v46 = *(void *)(a1 + 16);
        if ((unint64_t)v47 >= v46)
        {
          uint64_t v49 = ((uint64_t)v47 - *(void *)a1) >> 3;
          uint64_t v50 = v46 - *(void *)a1;
          uint64_t v51 = v50 >> 2;
          else {
            unint64_t v52 = v51;
          }
          uint64_t v74 = a1 + 16;
          if (v52) {
            __int128 v53 = (char *)sub_1000071BC(a1 + 16, v52);
          }
          else {
            __int128 v53 = 0LL;
          }
          __int128 v54 = &v53[8 * v49];
          __int128 v55 = &v53[8 * v52];
          uint64_t v73 = v55;
          *(void *)__int128 v54 = v45;
          __int128 v48 = v54 + 8;
          *(void *)&v72[16] = v54 + 8;
          int v57 = *(char **)a1;
          __int128 v56 = *(char **)(a1 + 8);
          if (v56 == *(char **)a1)
          {
            int64x2_t v59 = vdupq_n_s64((unint64_t)v56);
          }

          else
          {
            do
            {
              uint64_t v58 = *((void *)v56 - 1);
              v56 -= 8;
              *(void *)__int128 v56 = 0LL;
              *((void *)v54 - 1) = v58;
              v54 -= 8;
            }

            while (v56 != v57);
            int64x2_t v59 = *(int64x2_t *)a1;
            __int128 v48 = *(void **)&v72[16];
            __int128 v55 = v73;
          }

          *(void *)a1 = v54;
          *(void *)(a1 + 8) = v48;
          *(int64x2_t *)&v72[8] = v59;
          __int128 v60 = *(char **)(a1 + 16);
          *(void *)(a1 + 16) = v55;
          uint64_t v73 = v60;
          *(void *)int v72 = v59.i64[0];
          sub_1002D70CC((uint64_t)v72);
        }

        else
        {
          void *v47 = v45;
          __int128 v48 = v47 + 1;
        }

        *(void *)(a1 + 8) = v48;
        goto LABEL_33;
      case 3LL:
      case 4LL:
        *(void *)buf = a2;
        *(void *)&uint8_t buf[8] = 4LL;
        double v68 = a3;
        sub_1010DDBC0(__p, "DefaultActivityModel");
        int v71 = 0;
        sub_1002D6068((__int128 *)buf, &v66);
        uint64_t v37 = v66;
        uint64_t v66 = 0LL;
        *(void *)int v72 = v37;
        sub_1002D5F50((char **)a1, (uint64_t *)v72);
        goto LABEL_75;
      case 5LL:
      case 6LL:
      case 7LL:
      case 8LL:
      case 10LL:
      case 11LL:
      case 13LL:
      case 14LL:
      case 20LL:
      case 21LL:
      case 22LL:
      case 23LL:
      case 27LL:
      case 28LL:
      case 29LL:
      case 30LL:
      case 31LL:
      case 32LL:
      case 33LL:
      case 34LL:
      case 35LL:
      case 36LL:
      case 37LL:
      case 38LL:
      case 39LL:
      case 40LL:
      case 41LL:
      case 42LL:
      case 43LL:
      case 44LL:
      case 45LL:
      case 46LL:
      case 47LL:
      case 48LL:
      case 49LL:
      case 50LL:
      case 51LL:
      case 52LL:
      case 53LL:
      case 54LL:
      case 55LL:
      case 56LL:
      case 57LL:
      case 58LL:
      case 59LL:
      case 60LL:
      case 61LL:
      case 62LL:
      case 63LL:
      case 64LL:
      case 65LL:
        *(void *)buf = a2;
        *(void *)&uint8_t buf[8] = 0LL;
        double v68 = a3;
        sub_1010DDBC0(__p, "HRModel");
        int v71 = 0;
        size_t v12 = (char *)operator new(0xB8uLL);
        sub_1002D254C((uint64_t)v12, (__int128 *)buf);
        *(_OWORD *)(v12 + 72) = 0u;
        *(_OWORD *)(v12 + 88) = 0u;
        *(_OWORD *)(v12 + 104) = 0u;
        *(_OWORD *)(v12 + 120) = xmmword_1012E56B8;
        *(void *)size_t v12 = off_10182FD60;
        *(_OWORD *)(v12 + 136) = unk_1012E56C8;
        *(_OWORD *)(v12 + 152) = xmmword_1012E56D8;
        *(_OWORD *)(v12 + 164) = *(__int128 *)((char *)&xmmword_1012E56D8 + 12);
        unint64_t v13 = *(void *)(a1 + 16);
        double v14 = *(void **)(a1 + 8);
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((uint64_t)v14 - *(void *)a1) >> 3;
          uint64_t v17 = v13 - *(void *)a1;
          uint64_t v18 = v17 >> 2;
          else {
            unint64_t v19 = v18;
          }
          uint64_t v74 = a1 + 16;
          if (v19) {
            int v20 = (char *)sub_1000071BC(a1 + 16, v19);
          }
          else {
            int v20 = 0LL;
          }
          __int128 v21 = &v20[8 * v16];
          __int128 v22 = &v20[8 * v19];
          uint64_t v73 = v22;
          *(void *)__int128 v21 = v12;
          int v15 = v21 + 8;
          *(void *)&v72[16] = v21 + 8;
          __int128 v24 = *(char **)a1;
          __int128 v23 = *(char **)(a1 + 8);
          if (v23 == *(char **)a1)
          {
            int64x2_t v26 = vdupq_n_s64((unint64_t)v23);
          }

          else
          {
            do
            {
              uint64_t v25 = *((void *)v23 - 1);
              v23 -= 8;
              *(void *)__int128 v23 = 0LL;
              *((void *)v21 - 1) = v25;
              v21 -= 8;
            }

            while (v23 != v24);
            int64x2_t v26 = *(int64x2_t *)a1;
            int v15 = *(void **)&v72[16];
            __int128 v22 = v73;
          }

          *(void *)a1 = v21;
          *(void *)(a1 + 8) = v15;
          *(int64x2_t *)&v72[8] = v26;
          __int16 v27 = *(char **)(a1 + 16);
          *(void *)(a1 + 16) = v22;
          uint64_t v73 = v27;
          *(void *)int v72 = v26.i64[0];
          sub_1002D70CC((uint64_t)v72);
        }

        else
        {
          *double v14 = v12;
          int v15 = v14 + 1;
        }

        *(void *)(a1 + 8) = v15;
        goto LABEL_33;
      case 9LL:
        *(int64x2_t *)buf = vdupq_n_s64(9uLL);
        double v68 = a3;
        sub_1010DDBC0(__p, "DefaultActivityModel");
        int v71 = 0;
        sub_1002D6068((__int128 *)buf, &v66);
        uint64_t v62 = v66;
        uint64_t v66 = 0LL;
        *(void *)int v72 = v62;
        sub_1002D5F50((char **)a1, (uint64_t *)v72);
        goto LABEL_75;
      case 12LL:
        *(int64x2_t *)buf = vdupq_n_s64(0xCuLL);
        double v68 = a3;
        sub_1010DDBC0(__p, "DefaultActivityModel");
        int v71 = 0;
        sub_1002D6068((__int128 *)buf, &v66);
        uint64_t v63 = v66;
        uint64_t v66 = 0LL;
        *(void *)int v72 = v63;
        sub_1002D5F50((char **)a1, (uint64_t *)v72);
        goto LABEL_75;
      case 19LL:
        *(int64x2_t *)buf = vdupq_n_s64(0x13uLL);
        double v68 = a3;
        sub_1010DDBC0(__p, "DefaultActivityModel");
        int v71 = 0;
        sub_1002D6068((__int128 *)buf, &v66);
        uint64_t v61 = v66;
        uint64_t v66 = 0LL;
        *(void *)int v72 = v61;
        sub_1002D5F50((char **)a1, (uint64_t *)v72);
LABEL_75:
        uint64_t v64 = *(void *)v72;
        *(void *)int v72 = 0LL;
        if (v64) {
          (*(void (**)(uint64_t))(*(void *)v64 + 32LL))(v64);
        }
        uint64_t v65 = v66;
        uint64_t v66 = 0LL;
        if (v65) {
          (*(void (**)(uint64_t))(*(void *)v65 + 32LL))(v65);
        }
LABEL_33:
        if (v70 < 0) {
          operator delete(__p[0]);
        }
        break;
      default:
        return;
    }
  }

void sub_1002D5A4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  uint64_t v23 = *(void *)(v21 - 128);
  *(void *)(v21 - 128) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 32LL))(v23);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 32LL))(a12);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1002D5C20(uint64_t **a1)
{
  id v2 = *a1;
  unint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    uint64_t *v2 = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
    }
    ++v2;
  }

  unint64_t v6 = (void **)a1;
  sub_1002C5E9C(&v6);
  return a1;
}

double *sub_1002D5C8C@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0xBFF0000000000000LL;
  *(_DWORD *)(a2 + 24) = 0;
  unint64_t v3 = *(void **)result;
  uint64_t v4 = (void *)*((void *)result + 1);
  if (*(void **)result != v4)
  {
    unsigned __int8 v5 = result;
    int v6 = 0;
    do
    {
      (**(void (***)(void, void))*v3)(*v3, *((void *)v5 + 3));
      uint64_t result = (double *)(*(void *(**)(_BYTE *__return_ptr))(*(void *)*v3 + 8LL))(v9);
      if (*(int *)&v9[8] >= v6)
      {
        *(_OWORD *)a2 = *(_OWORD *)v9;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v9[12];
        int v6 = *(_DWORD *)(a2 + 8);
      }

      if ((v6 - 1) <= 1)
      {
        double v7 = *(double *)(a2 + 16);
        if (v7 >= v5[5]) {
          double v7 = v5[5];
        }
        v5[5] = v7;
      }

      ++v3;
    }

    while (v3 != v4);
    if (v6)
    {
      double v8 = v5[5];
    }

    else
    {
      v5[5] = 1.79769313e308;
      double v8 = 1.79769313e308;
    }

    if (v8 == 1.79769313e308) {
      double v8 = *(double *)(a2 + 16);
    }
    *(double *)(a2 + 16) = v8;
  }

  return result;
}

void sub_1002D5D8C(uint64_t **a1, int a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10182FDE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v11 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[resume reminders] setting detection mode to %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10182FDE0);
    }
    v9[0] = 67109120;
    v9[1] = a2;
    double v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "[resume reminders] setting detection mode to %d",  v9);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutResumeReminders::Detector::setMode(DetectionMode)", "%s\n", v8);
  }

  unsigned __int8 v5 = *a1;
  int v6 = a1[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    *(_DWORD *)(v7 + 56) = a2;
  }

uint64_t sub_1002D5F50(char **a1, uint64_t *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    uint64_t v26 = result;
    if (v13) {
      double v14 = (char *)sub_1000071BC(result, v13);
    }
    else {
      double v14 = 0LL;
    }
    int v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    uint64_t v25 = v16;
    uint64_t v17 = *a2;
    *a2 = 0LL;
    *(void *)int v15 = v17;
    int v9 = v15 + 8;
    v24.i64[1] = (uint64_t)(v15 + 8);
    unint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }

    else
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *(void *)uint64_t v18 = 0LL;
        *((void *)v15 - 1) = v20;
        v15 -= 8;
      }

      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
      int v9 = (char *)v24.i64[1];
      uint64_t v16 = v25;
    }

    *a1 = v15;
    a1[1] = v9;
    int64x2_t v24 = v21;
    __int128 v22 = a1[2];
    a1[2] = v16;
    uint64_t v25 = v22;
    uint64_t v23 = v21.i64[0];
    uint64_t result = sub_1002D70CC((uint64_t)&v23);
  }

  else
  {
    uint64_t v8 = *a2;
    *a2 = 0LL;
    *(void *)uint64_t v7 = v8;
    int v9 = v7 + 8;
  }

  a1[1] = v9;
  return result;
}

double sub_1002D6068@<D0>(__int128 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x78uLL);
  sub_1002D254C((uint64_t)v4, a1);
  *(void *)uint64_t v4 = off_10182FCF0;
  double result = 0.0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *a2 = v4;
  return result;
}

void sub_1002D60C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1002D60D8(uint64_t a1)
{
  *(void *)a1 = off_10182FCF0;
  sub_1002D6244((void *)(a1 + 72));
  *(void *)a1 = &off_10182FCB8;
  return a1;
}

void sub_1002D6128(char *a1)
{
  *(void *)a1 = off_10182FCF0;
  sub_1002D6244((void *)a1 + 9);
  *(void *)a1 = &off_10182FCB8;
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  operator delete(a1);
}

uint64_t sub_1002D6178(uint64_t a1)
{
  *(void *)a1 = off_10182FD60;
  sub_1002D62D8((void *)(a1 + 72));
  *(void *)a1 = &off_10182FCB8;
  return a1;
}

void sub_1002D61C8(char *a1)
{
  *(void *)a1 = off_10182FD60;
  sub_1002D62D8((void *)a1 + 9);
  *(void *)a1 = &off_10182FCB8;
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  operator delete(a1);
}

void sub_1002D6218(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_1002D6244(void *a1)
{
  id v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      id v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 28LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 56LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

uint64_t sub_1002D62D8(void *a1)
{
  id v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      id v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 32LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 64LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

__n128 sub_1002D636C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1002D6430(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v10 = *(_OWORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  *(void *)(v8 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

void sub_1002D6430(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x38;
  unint64_t v4 = v2 - 56;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1002D66F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002D6744(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x38) {
    a2 = 1;
  }
  if (v2 < 0x70) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 56LL;
  }

  return v4 ^ 1u;
}

double sub_1002D67A0@<D0>( void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000LL;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) / 0x38;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = *v15 + 72 * (v11 - 56 * v12);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1LL;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    unint64_t v19 = v14 == v13 ? 0LL : *(void *)(v13 + 8 * (a1[4] / 0x38uLL)) + 72 * (a1[4] % 0x38uLL);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4032LL;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_100008BDC();
    }
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4032LL;
      }
      double result = *(double *)(v16 - 72);
      *(double *)a5 = result;
      return result;
    }

    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4032;
    }

    v16 -= 72LL;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }

  return result;
}

void *sub_1002D6928(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10182FE10;
  result[1] = v3;
  return result;
}

uint64_t sub_1002D695C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10182FE10;
  a2[1] = v2;
  return result;
}

BOOL sub_1002D6978(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 8) + 16LL) == *(void *)(a2 + 16);
}

uint64_t sub_1002D6990(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1002D69CC()
{
}

void *sub_1002D69E0()
{
  double result = operator new(0x10uLL);
  *double result = &off_10182FEA0;
  return result;
}

void sub_1002D6A04(uint64_t a1, void *a2)
{
  *a2 = &off_10182FEA0;
}

BOOL sub_1002D6A1C(uint64_t a1, uint64_t a2)
{
  return (unint64_t)(*(void *)(a2 + 16) - 1LL) < 2;
}

uint64_t sub_1002D6A30(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1002D6A6C()
{
}

__n128 sub_1002D6A78(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1002D6B0C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + ((v7 & 0x3F) << 6);
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_1002D6B0C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1002D6DD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002D6E20(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x40) {
    a2 = 1;
  }
  if (v2 < 0x80) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 64LL;
  }

  return v4 ^ 1u;
}

double sub_1002D6E7C@<D0>( void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000LL;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  char v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) >> 6;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = *v15 + ((unint64_t)(v11 & 0x3F) << 6);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1LL;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    uint64_t v19 = v14 == v13 ? 0LL : *(void *)(v13 + ((a1[4] >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + ((a1[4] & 0x3FLL) << 6);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4096LL;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_100008BDC();
    }
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4096LL;
      }
      double result = *(double *)(v16 - 24);
      *(double *)a5 = result;
      return result;
    }

    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4096;
    }

    v16 -= 64LL;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }

  return result;
}

void *sub_1002D6FD8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10182FF20;
  result[1] = v3;
  return result;
}

uint64_t sub_1002D700C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10182FF20;
  a2[1] = v2;
  return result;
}

BOOL sub_1002D7028(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(float **)(a1 + 8);
  float v3 = (v2[37] - *(double *)(a2 + 8)) / (v2[37] - v2[36]);
  return (float)(sub_100D086F8(v3, v2[35]) * v2[34]) > 4.4021;
}

uint64_t sub_1002D7084(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1002D70C0()
{
}

uint64_t sub_1002D70CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002D75B8(uint64_t a1)
{
  if (qword_1019348A0 != -1) {
    dispatch_once(&qword_1019348A0, &stru_10182FFE8);
  }
  uint64_t v2 = (os_log_s *)qword_1019348A8;
  if (os_log_type_enabled((os_log_t)qword_1019348A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLGLS,GNSSLocationService,invalidation handler",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348A0 != -1) {
      dispatch_once(&qword_1019348A0, &stru_10182FFE8);
    }
    v6[0] = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348A8,  0LL,  "CLGLS,GNSSLocationService,invalidation handler",  v6,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLGnssLocationXPCServiceManager getConnection]_block_invoke", "%s\n", v5);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 32);
  if (v4)
  {

    uint64_t v3 = *(void *)(a1 + 32);
  }

  *(void *)(v3 + 32) = 0LL;
}

void sub_1002D7760(uint64_t a1)
{
  if (qword_1019348A0 != -1) {
    dispatch_once(&qword_1019348A0, &stru_10182FFE8);
  }
  uint64_t v2 = (os_log_s *)qword_1019348A8;
  if (os_log_type_enabled((os_log_t)qword_1019348A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLGLS,GNSSLocationService,interruption handler",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348A0 != -1) {
      dispatch_once(&qword_1019348A0, &stru_10182FFE8);
    }
    v6[0] = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348A8,  0LL,  "CLGLS,GNSSLocationService,interruption handler",  v6,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLGnssLocationXPCServiceManager getConnection]_block_invoke", "%s\n", v5);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 32);
  if (v4)
  {
    [v4 invalidate];

    uint64_t v3 = *(void *)(a1 + 32);
  }

  *(void *)(v3 + 32) = 0LL;
}

void sub_1002D7CF8(uint64_t a1, int a2)
{
  if (qword_1019348A0 != -1) {
    dispatch_once(&qword_1019348A0, &stru_10182FFE8);
  }
  uint64_t v4 = (os_log_s *)qword_1019348A8;
  if (os_log_type_enabled((os_log_t)qword_1019348A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLGLS,reconfigureRavenIfNeeded,completed,success,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348A0 != -1) {
      dispatch_once(&qword_1019348A0, &stru_10182FFE8);
    }
    v6[0] = 67240192;
    v6[1] = a2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348A8,  0LL,  "CLGLS,reconfigureRavenIfNeeded,completed,success,%{public}d",  v6,  8);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLGnssLocationXPCServiceManager reconfigureRavenIfNeeded]_block_invoke",  "%s\n",  v5);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
}

void sub_1002D7EC8(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_1019348A0 != -1) {
      dispatch_once(&qword_1019348A0, &stru_10182FFE8);
    }
    uint64_t v3 = (os_log_s *)qword_1019348A8;
    if (os_log_type_enabled((os_log_t)qword_1019348A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      unint64_t v9 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "CLGLS,getSynchronousRemoteObjectProxy error %{public}@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348A0 != -1) {
        dispatch_once(&qword_1019348A0, &stru_10182FFE8);
      }
      uint64_t v4 = qword_1019348A8;
      int v6 = 138543362;
      unint64_t v7 = -[NSError localizedDescription](a2, "localizedDescription");
      uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  16LL,  "CLGLS,getSynchronousRemoteObjectProxy error %{public}@",  &v6,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLGnssLocationXPCServiceManager getSynchronousRemoteObjectProxy]_block_invoke",  "%s\n",  v5);
    }
  }

uint64_t sub_1002D8430(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1002D8668(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1002D8850(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002D8BF4(id a1)
{
  qword_1019348A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

uint64_t sub_1002D8C20@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v6 = operator new(0x40uLL);
  uint64_t result = sub_1002D8C7C((uint64_t)v6, a2, a1);
  *a3 = v6;
  return result;
}

void sub_1002D8C68(_Unwind_Exception *a1)
{
}

uint64_t sub_1002D8C7C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = &off_101830018;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (std::string::size_type *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  sub_1003CC884((uint64_t)sub_1002D8FF0, a2, a3, &v23);
  std::string::size_type v5 = v23.__r_.__value_.__r.__words[0];
  v23.__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v6 = *v4;
  std::string::size_type *v4 = v5;
  if (v6)
  {
    (*(void (**)(std::string::size_type))(*(void *)v6 + 8LL))(v6);
    std::string::size_type v7 = v23.__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = 0LL;
    if (v7) {
      (*(void (**)(std::string::size_type))(*(void *)v7 + 8LL))(v7);
    }
  }

  [*(id *)(*v4 + 16) register:*(void *)(*v4 + 8) forNotification:6 registrationInfo:0];
  [*(id *)(*v4 + 16) register:*(void *)(*v4 + 8) forNotification:16 registrationInfo:0];
  sub_100583844((uint64_t)sub_1002D91D8, *(void *)(a1 + 48), *(void **)(a1 + 56), &v23);
  std::string::size_type v8 = v23.__r_.__value_.__r.__words[0];
  v23.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    std::string::size_type v10 = v23.__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = 0LL;
    if (v10) {
      (*(void (**)(std::string::size_type))(*(void *)v10 + 8LL))(v10);
    }
  }

  memset(&v23, 0, sizeof(v23));
  std::string::operator=(&v23, (const std::string *)&qword_101994118);
  [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0 registrationInfo:sub_10120E548((uint64_t)&v23)];
  [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:4 registrationInfo:0];
  sub_100C6E054((uint64_t)sub_1002D93C0, *(void *)(a1 + 48), *(void **)(a1 + 56), &v22);
  char v11 = v22;
  unint64_t v22 = 0LL;
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    uint64_t v13 = v22;
    unint64_t v22 = 0LL;
    if (v13) {
      (*((void (**)(id *))*v13 + 1))(v13);
    }
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 40) + 16),  "register:forNotification:registrationInfo:",  *(void *)(*(void *)(a1 + 40) + 8),  5,  0,  v22);
  sub_100ACD980((uint64_t)sub_1002D95A8, *(void *)(a1 + 48), *(void **)(a1 + 56), &v22);
  uint64_t v14 = v22;
  unint64_t v22 = 0LL;
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    uint64_t v16 = v22;
    unint64_t v22 = 0LL;
    if (v16) {
      (*((void (**)(id *))*v16 + 1))(v16);
    }
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 24) + 16),  "register:forNotification:registrationInfo:",  *(void *)(*(void *)(a1 + 24) + 8),  0,  0,  v22);
  sub_100328B0C((uint64_t)sub_1002D9790, *(void *)(a1 + 48), *(void **)(a1 + 56), &v22);
  uint64_t v17 = v22;
  unint64_t v22 = 0LL;
  uint64_t v18 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    uint64_t v19 = v22;
    unint64_t v22 = 0LL;
    if (v19) {
      (*((void (**)(id *))*v19 + 1))(v19);
    }
  }

  uint64_t v20 = *(void *)(a1 + 32);
  sub_100320874(&v22, (uint64_t)@"kDataStatusNotification");
  [*(id *)(v20 + 16) register:*(void *)(v20 + 8) forNotification:sub_100320924((unsigned int *)&v22) registrationInfo:0];
  return a1;
}

void sub_1002D8F28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = v15[5];
  v15[5] = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v19 = v15[4];
  v15[4] = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v20 = v15[3];
  v15[3] = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  uint64_t v21 = v15[2];
  v15[2] = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = *v16;
  *uint64_t v16 = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D8FF0(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101830070);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    std::string::size_type v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLNetworkLocationProvider::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101830070);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLNetworkLocationProvider::onStatusNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1004BBFE0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1002D91B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D91D8(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101830070);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    std::string::size_type v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLNetworkLocationProvider::onManagerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101830070);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLNetworkLocationProvider::onManagerNotification, event:%{public, location:escape_o nly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1004BC4E4(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1002D93A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D93C0(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101830070);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    std::string::size_type v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLNetworkLocationProvider::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101830070);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLNetworkLocationProvider::onCompanionNotification, event:%{public, location:escape _only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1004BCB18(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1002D9588( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D95A8(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101830070);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    std::string::size_type v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLNetworkLocationProvider::onDataProtectionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101830070);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLNetworkLocationProvider::onDataProtectionNotification, event:%{public, location:e scape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1004BD104(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1002D9770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D9790(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101830070);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    std::string::size_type v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLNetworkLocationProvider::onTelephonyNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101830070);
    }
    std::string::size_type v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLNetworkLocationProvider::onTelephonyNotification, event:%{public, location:escape _only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1004BD158(a4, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1002D9958( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_1002D9978(uint64_t a1)
{
  return objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "vendor"), "proxyForService:", @"CLDaemonStatus"),  "syncgetReachability");
}

BOOL sub_1002D999C(uint64_t a1)
{
  return objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 56), "vendor"),  "proxyForService:",  @"CLDataProtectionManager"),  "syncgetDataAvailability") != 1;
}

id sub_1002D99D0(uint64_t a1)
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "vendor"), "proxyForService:", @"CLClientManager");
  if (byte_10199412F >= 0) {
    uint64_t v2 = &qword_101994118;
  }
  else {
    uint64_t v2 = (uint64_t *)qword_101994118;
  }
  return objc_msgSend( v1,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

void *sub_1002D9A2C(void *a1)
{
  *a1 = &off_101830018;
  uint64_t v2 = a1[5];
  a1[5] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = a1[4];
  a1[4] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = a1[1];
  a1[1] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return a1;
}

void sub_1002D9AD0(void *__p)
{
  void *__p = &off_101830018;
  uint64_t v2 = __p[5];
  __p[5] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = __p[4];
  __p[4] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = __p[3];
  __p[3] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = __p[2];
  __p[2] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = __p[1];
  __p[1] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  operator delete(__p);
}

void sub_1002D9B74(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1002D9BA0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1002D9C04()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1002D9C78(_Unwind_Exception *a1)
{
}

uint64_t sub_1002D9C90()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101994118, (void *)&_mh_execute_header);
}

uint64_t sub_1002D9CD4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1002DC708((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1002D9D20(_Unwind_Exception *a1)
{
}

uint64_t sub_1002D9D34(uint64_t a1)
{
  return a1;
}

_DWORD *sub_1002D9D6C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E0454(a1);
  sub_1002DCA80((uint64_t)v4, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1002D9DB4(_Unwind_Exception *a1)
{
}

_DWORD *sub_1002D9DC8(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1002E0454(a1);
  std::string::size_type v7 = v6 + 1618;
  *(_OWORD *)(v6 + 1618) = 0u;
  sub_1002DCA80((uint64_t)v6, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  sub_1000F2F30(v7, a3);
  return a1;
}

void sub_1002D9E38(_Unwind_Exception *a1)
{
}

void sub_1002D9E54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 5020;
  sub_1002D9D6C((_DWORD *)a2, a1);
  if (*(_BYTE *)(v4 + 1356)
    && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) > 0)
    && *(_BYTE *)(a1 + 810))
  {
    if (sub_100869780(a1 + 4944))
    {
      __int128 v5 = *(_OWORD *)(a1 + 4992);
      __int128 v50 = *(_OWORD *)(a1 + 4976);
      v51[0] = v5;
      *(_OWORD *)((char *)v51 + 12) = *(_OWORD *)(a1 + 5004);
      __int128 v6 = *(_OWORD *)(a1 + 4960);
      __int128 v48 = *(_OWORD *)(a1 + 4944);
      __int128 v49 = v6;
      __int128 v7 = *(_OWORD *)(a1 + 5044);
      __int128 v8 = *(_OWORD *)(a1 + 5076);
      __int128 v45 = *(_OWORD *)(a1 + 5060);
      __int128 v46 = v8;
      uint64_t v47 = *(void *)(a1 + 5092);
      __int128 v43 = *(_OWORD *)(a1 + 5028);
      __int128 v44 = v7;
      uint64_t v9 = *(const char **)(a1 + 6384);
      sub_1008D83E8(a1 + 4944, (uint64_t)__src);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018302A8);
      }
      char v10 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        char v11 = *(const char **)v4;
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&buf[14] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, reissue, time, %{public}.1f, last, %{public}.1f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018302A8);
        }
        __int16 v27 = *(const char **)v4;
        int v52 = 134349312;
        __int128 v53 = v9;
        __int16 v54 = 2050;
        __int128 v55 = v27;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, reissue, time, %{public}.1f, last, %{public}.1f",  &v52,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const",  "%s\n",  v28);
        if (v28 != buf) {
          free(v28);
        }
      }

      __int128 v57 = v50;
      *(_OWORD *)uint64_t v58 = v51[0];
      *(_OWORD *)&v58[12] = *(_OWORD *)((char *)v51 + 12);
      *(_OWORD *)buf = v48;
      *(_OWORD *)&uint8_t buf[16] = v49;
      int64x2_t v59 = v9;
      __int128 v61 = v44;
      __int128 v62 = v45;
      __int128 v63 = v46;
      uint64_t v64 = v47;
      __int128 v60 = v43;
      memcpy(v65, __src, sizeof(v65));
      uint64_t v66 = v35;
      int v67 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          unint64_t v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }

      __int128 v72 = v41;
      v73[0] = *(_OWORD *)v42;
      *(void *)((char *)v73 + 13) = *(void *)&v42[13];
      __int128 v68 = v37;
      __int128 v69 = v38;
      __int128 v70 = v39;
      __int128 v71 = v40;
      sub_1002DA548(a2 + 1992, (uint64_t)buf);
      __int16 v14 = v67;
      if (v67)
      {
        __int16 v15 = (unint64_t *)&v67->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      ++*(_DWORD *)(*(void *)(a2 + 6424) + 244LL);
      __int16 v17 = (int *)(a2 + 6444);
      *(void *)(a2 + 6456) = sub_100787BA0(a2 + 6444);
      *(_BYTE *)(a2 + 6464) = v18;
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018302A8);
      }
      uint64_t v19 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = sub_100787ADC(*(_DWORD *)(a2 + 6456));
        uint64_t v21 = sub_100787ADC(*v17);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "@WifiFlow, inter-locreq state update per update timer event, staging, %{public}s, current, %{public}s",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018302A8);
        }
        uint64_t v29 = qword_101934868;
        __int128 v30 = sub_100787ADC(*(_DWORD *)(a2 + 6456));
        __int128 v31 = sub_100787ADC(*v17);
        int v52 = 136446466;
        __int128 v53 = v30;
        __int16 v54 = 2082;
        __int128 v55 = v31;
        LODWORD(v33) = 22;
        __int128 v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "@WifiFlow, inter-locreq state update per update timer event, staging, %{public}s, current, %{public}s",  &v52,  v33);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const",  "%s\n",  v32);
        if (v32 != buf) {
          free(v32);
        }
      }

      uint64_t v22 = v36;
      if (v36)
      {
        std::string v23 = (unint64_t *)&v36->__shared_owners_;
        do
          unint64_t v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }

    else
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018302A8);
      }
      unint64_t v25 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, reissue, invalid location, #CloneMe",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018302A8);
        }
        __src[0] = 0;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, reissue, invalid location, #CloneMe",  __src,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const",  "%s\n",  v26);
        if (v26 != buf) {
          free(v26);
        }
      }
    }
  }

void sub_1002DA4F4(_Unwind_Exception *a1)
{
}

uint64_t sub_1002DA548(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 800);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  __int128 v10 = *(_OWORD *)(a2 + 112);
  __int128 v9 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v11;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  int v12 = (__int128 *)(a2 + 680);
  if (v4)
  {
    sub_10005F550(a1 + 680, v12);
    __int128 v14 = *(_OWORD *)(a2 + 712);
    __int128 v13 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 712) = v14;
    *(_OWORD *)(a1 + 728) = v13;
    __int128 v16 = *(_OWORD *)(a2 + 760);
    __int128 v15 = *(_OWORD *)(a2 + 776);
    __int128 v17 = *(_OWORD *)(a2 + 744);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v16;
    *(_OWORD *)(a1 + 776) = v15;
    *(_OWORD *)(a1 + 744) = v17;
  }

  else
  {
    *(void *)(a1 + 680) = *(void *)(a2 + 680);
    *(void *)(a1 + 688) = *(void *)(a2 + 688);
    *(void *)int v12 = 0LL;
    *(void *)(a2 + 688) = 0LL;
    __int128 v18 = *(_OWORD *)(a2 + 696);
    __int128 v19 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v19;
    *(_OWORD *)(a1 + 696) = v18;
    __int128 v20 = *(_OWORD *)(a2 + 744);
    __int128 v21 = *(_OWORD *)(a2 + 760);
    __int128 v22 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v21;
    *(_OWORD *)(a1 + 776) = v22;
    *(_OWORD *)(a1 + 744) = v20;
    *(_BYTE *)(a1 + 800) = 1;
  }

  return a1;
}

void sub_1002DA648(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_BYTE *)(a1 + 6376)
    && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) >= 1)
    && *(_BYTE *)(a1 + 808))
  {
    sub_1002DA8CC(a1, 1, (uint64_t)&v13);
    sub_1002DCA80(a3, (uint64_t)&v13);
    sub_1002DC4C4(a3 + 808, (uint64_t)v17);
    sub_1002DC708(a3 + 3016, (uint64_t)v18);
    sub_1002E1244((uint64_t)v18);
    sub_1002E1094((uint64_t)v17);
    sub_1002DDAD8((uint64_t)&v13);
    (*(void (**)(uint64_t *__return_ptr, void, void))(**(void **)(a1 + 6472) + 24LL))( &v13,  *(void *)(a1 + 6472),  *(char *)(a2 + 48));
    unsigned __int8 v6 = v13;
    if (!v16) {
      unsigned __int8 v6 = 0;
    }
    sub_1002DAEE8(*(char *)(a2 + 48), v6 | (v16 << 8), &v11);
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(a3 + 6424);
    if (v7)
    {
      else {
        std::stringbuf::string_type __p = v11;
      }
      sub_100B83D9C(v8, (__int128 *)&__p, *(_DWORD *)(a3 + 1564));
    }

    else
    {
      int v12 = &v11;
      __int128 v9 = sub_1002E2A90( (uint64_t **)(v8 + 176),  (const void **)&v11.__r_.__value_.__l.__data_,  (uint64_t)&unk_1012CF090,  (__int128 **)&v12);
      ++*((_DWORD *)v9 + 14);
    }

    if (v16)
    {
      if (v14)
      {
        __int128 v15 = v14;
        operator delete(v14);
      }
    }
  }

void sub_1002DA854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, char a23, void *a24, uint64_t a25, uint64_t a26, char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a27)
  {
    if (a24) {
      operator delete(a24);
    }
  }

  sub_1002D9D34(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DA8CC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a1 + 1564) && *(double *)(a1 + 1428) > 0.0)
  {
    __int128 v6 = *(_OWORD *)(a1 + 1520);
    __int128 v47 = *(_OWORD *)(a1 + 1504);
    __int128 v48 = v6;
    v49[0] = *(_OWORD *)(a1 + 1536);
    *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)(a1 + 1548);
    __int128 v7 = *(_OWORD *)(a1 + 1456);
    __int128 v43 = *(_OWORD *)(a1 + 1440);
    __int128 v44 = v7;
    __int128 v8 = *(_OWORD *)(a1 + 1488);
    __int128 v45 = *(_OWORD *)(a1 + 1472);
    __int128 v46 = v8;
    __int128 v9 = *(_OWORD *)(a1 + 1424);
    __int128 v41 = *(_OWORD *)(a1 + 1408);
    __int128 v42 = v9;
    sub_1008D83E8(a1 + 1408, (uint64_t)__src);
    __int128 v59 = v47;
    __int128 v60 = v48;
    v61[0] = v49[0];
    *(_OWORD *)((char *)v61 + 12) = *(_OWORD *)((char *)v49 + 12);
    __int128 v55 = v43;
    __int128 v56 = v44;
    __int128 v57 = v45;
    __int128 v58 = v46;
    *(_OWORD *)buf = v41;
    *(_OWORD *)&uint8_t buf[16] = v42;
    memcpy(v62, __src, sizeof(v62));
    uint64_t v63 = v33;
    uint64_t v64 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    __int128 v69 = v39;
    v70[0] = *(_OWORD *)v40;
    *(void *)((char *)v70 + 13) = *(void *)&v40[13];
    __int128 v65 = v35;
    __int128 v66 = v36;
    __int128 v67 = v37;
    __int128 v68 = v38;
    sub_1002DA548(a3 + 1992, (uint64_t)buf);
    int v12 = v64;
    if (v64)
    {
      uint64_t v13 = (unint64_t *)&v64->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    ++*(_DWORD *)(*(void *)(a3 + 6424) + 244LL);
    __int128 v15 = (int *)(a3 + 6444);
    *(void *)(a3 + 6456) = sub_100787BA0(a3 + 6444);
    *(_BYTE *)(a3 + 6464) = v16;
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018302A8);
    }
    __int128 v17 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      __int128 v18 = sub_100787ADC(*(_DWORD *)(a3 + 6456));
      __int128 v19 = sub_100787ADC(*v15);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "@WifiFlow, inter-locreq state update, staging, %{public}s, current, %{public}s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018302A8);
      }
      uint64_t v27 = qword_101934868;
      uint64_t v28 = sub_100787ADC(*(_DWORD *)(a3 + 6456));
      uint64_t v29 = sub_100787ADC(*v15);
      int v50 = 136446466;
      uint64_t v51 = v28;
      __int16 v52 = 2082;
      __int128 v53 = v29;
      __int128 v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v27,  1LL,  "@WifiFlow, inter-locreq state update, staging, %{public}s, current, %{public}s",  &v50,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static Output CL::Wifi1::Policies::NotifyClients::HandleEvent::processLocationComputation(const Input &, BOOL)",  "%s\n",  v30);
      if (v30 != buf) {
        free(v30);
      }
    }

    __int128 v20 = v34;
    if (v34)
    {
      __int128 v21 = (unint64_t *)&v34->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }

  else if (a2)
  {
    if (!*(_BYTE *)(a3 + 1987)) {
      *(_BYTE *)(a3 + 1987) = 1;
    }
    uint64_t v23 = *(void *)(a3 + 6424);
    ++*(_DWORD *)(v23 + 248);
    if (*(_BYTE *)(a3 + 1616))
    {
      *(void *)buf = a3 + 1592;
      unint64_t v24 = sub_1002E2A90( (uint64_t **)(v23 + 264),  (const void **)(a3 + 1592),  (uint64_t)&unk_1012CF090,  (__int128 **)buf);
      ++*((_DWORD *)v24 + 14);
    }

    else
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018302A8);
      }
      unint64_t v25 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_FAULT,  "WifiCalc, did we forget to set failureReason?",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018302A8);
        }
        LOWORD(__src[0]) = 0;
        __int128 v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  17LL,  "WifiCalc, did we forget to set failureReason?",  __src,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static Output CL::Wifi1::Policies::NotifyClients::HandleEvent::processLocationComputation(const Input &, BOOL)",  "%s\n",  v31);
        if (v31 != buf) {
          free(v31);
        }
      }
    }
  }

  uint64_t result = sub_100E575B0();
  if ((_DWORD)result)
  {
    sub_1002A5370(buf);
    __src[0] = sub_100496E10((unsigned int *)(a1 + 5968));
    sub_1002AC220((uint64_t)buf, "wifiLocType", __src);
    sub_1002ABC7C((uint64_t)buf, "apsInSolution", (unsigned int *)(a1 + 1564));
    sub_1002AC7B8((uint64_t)buf, "hAcc", (const void *)(a1 + 1428));
    sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
    return sub_1002A5590(buf);
  }

  return result;
}

void sub_1002DAE84(_Unwind_Exception *a1)
{
}

uint64_t sub_1002DAEE8@<X0>(unsigned int a1@<W0>, __int16 a2@<W1>, std::stringbuf::string_type *a3@<X8>)
{
  __int128 v6 = sub_10099EBD8(a1);
  size_t v7 = strlen(v6);
  sub_10000CF44(&v14, (uint64_t)v6, v7);
  if ((a2 & 0xFF00) != 0)
  {
    __int128 v8 = sub_10000CF44(&v14, (uint64_t)"-", 1LL);
    __int128 v9 = sub_100C6E6F0((char)a2);
    size_t v10 = strlen(v9);
    sub_10000CF44(v8, (uint64_t)v9, v10);
  }

  std::stringbuf::str(a3, &v15);
  *(void *)((char *)v13
  uint64_t v14 = v11;
  std::streambuf::~streambuf(&v15);
  return std::ios::~ios(&v16);
}

void sub_1002DB004(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1002DB018(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[6376] && a1[809]) {
    sub_1002DA8CC((uint64_t)a1, a1[1657], a2);
  }
  else {
    sub_1002E1330(a2, (uint64_t)v4);
  }
  sub_1002E1244((uint64_t)&v6);
  sub_1002E1094((uint64_t)&v5);
  sub_1002DDAD8((uint64_t)v4);
}

void sub_1002DB0E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002DB104(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  else {
    sub_1002E1330(a2, (uint64_t)v4);
  }
  sub_1002E1244((uint64_t)&v6);
  sub_1002E1094((uint64_t)&v5);
  sub_1002DDAD8((uint64_t)v4);
}

void sub_1002DB1F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002DB20C(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 6376))
  {
    if (*(int *)(a1 + 6412) >= 1)
    {
      std::stringbuf::string_type __p = 0LL;
      __int128 v55 = 0uLL;
      uint64_t v4 = *(void *)(a1 + 1632);
      uint64_t v5 = *(void *)(a1 + 1640);
      if (v4 != v5)
      {
        uint64_t v53 = a1;
        uint64_t v6 = 0LL;
        do
        {
          if (*(double *)(v4 + 20) >= 0.0)
          {
            if ((unint64_t)v6 >= *((void *)&v55 + 1))
            {
              uint64_t v14 = __p;
              uint64_t v15 = 0x6F96F96F96F96F97LL * ((v6 - __p) >> 2);
              unint64_t v16 = v15 + 1;
              else {
                unint64_t v17 = v16;
              }
              if (v17)
              {
                __int128 v18 = (char *)sub_1002E01BC((uint64_t)&v55 + 8, v17);
                uint64_t v14 = __p;
                uint64_t v6 = (char *)v55;
              }

              else
              {
                __int128 v18 = 0LL;
              }

              __int128 v19 = &v18[156 * v15];
              __int128 v20 = *(_OWORD *)(v4 + 16);
              *(_OWORD *)__int128 v19 = *(_OWORD *)v4;
              *((_OWORD *)v19 + 1) = v20;
              __int128 v21 = *(_OWORD *)(v4 + 32);
              __int128 v22 = *(_OWORD *)(v4 + 48);
              __int128 v23 = *(_OWORD *)(v4 + 80);
              *((_OWORD *)v19 + 4) = *(_OWORD *)(v4 + 64);
              *((_OWORD *)v19 + 5) = v23;
              *((_OWORD *)v19 + 2) = v21;
              *((_OWORD *)v19 + 3) = v22;
              __int128 v24 = *(_OWORD *)(v4 + 96);
              __int128 v25 = *(_OWORD *)(v4 + 112);
              __int128 v26 = *(_OWORD *)(v4 + 128);
              *(_OWORD *)(v19 + 140) = *(_OWORD *)(v4 + 140);
              *((_OWORD *)v19 + 7) = v25;
              *((_OWORD *)v19 + 8) = v26;
              *((_OWORD *)v19 + 6) = v24;
              if (v6 == v14)
              {
                __int128 v35 = &v18[156 * v15];
              }

              else
              {
                uint64_t v27 = &v18[156 * v15];
                do
                {
                  __int128 v28 = *(_OWORD *)(v6 - 156);
                  *(_OWORD *)(v27 - 140) = *(_OWORD *)(v6 - 140);
                  *(_OWORD *)(v27 - 156) = v28;
                  __int128 v29 = *(_OWORD *)(v6 - 124);
                  __int128 v30 = *(_OWORD *)(v6 - 108);
                  __int128 v31 = *(_OWORD *)(v6 - 92);
                  *(_OWORD *)(v27 - 76) = *(_OWORD *)(v6 - 76);
                  *(_OWORD *)(v27 - 92) = v31;
                  *(_OWORD *)(v27 - 108) = v30;
                  *(_OWORD *)(v27 - 124) = v29;
                  __int128 v32 = *(_OWORD *)(v6 - 60);
                  __int128 v33 = *(_OWORD *)(v6 - 44);
                  __int128 v34 = *(_OWORD *)(v6 - 28);
                  __int128 v35 = v27 - 156;
                  *((_OWORD *)v27 - 1) = *((_OWORD *)v6 - 1);
                  *(_OWORD *)(v27 - 28) = v34;
                  *(_OWORD *)(v27 - 44) = v33;
                  *(_OWORD *)(v27 - 60) = v32;
                  v6 -= 156;
                  v27 -= 156;
                }

                while (v6 != v14);
              }

              uint64_t v6 = v19 + 156;
              std::stringbuf::string_type __p = v35;
              *((void *)&v55 + 1) = &v18[156 * v17];
              if (v14) {
                operator delete(v14);
              }
            }

            else
            {
              __int128 v7 = *(_OWORD *)(v4 + 16);
              *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
              *((_OWORD *)v6 + 1) = v7;
              __int128 v8 = *(_OWORD *)(v4 + 32);
              __int128 v9 = *(_OWORD *)(v4 + 48);
              __int128 v10 = *(_OWORD *)(v4 + 80);
              *((_OWORD *)v6 + 4) = *(_OWORD *)(v4 + 64);
              *((_OWORD *)v6 + 5) = v10;
              *((_OWORD *)v6 + 2) = v8;
              *((_OWORD *)v6 + 3) = v9;
              __int128 v11 = *(_OWORD *)(v4 + 96);
              __int128 v12 = *(_OWORD *)(v4 + 112);
              __int128 v13 = *(_OWORD *)(v4 + 128);
              *(_OWORD *)(v6 + 140) = *(_OWORD *)(v4 + 140);
              *((_OWORD *)v6 + 7) = v12;
              *((_OWORD *)v6 + 8) = v13;
              *((_OWORD *)v6 + 6) = v11;
              v6 += 156;
            }

            *(void *)&__int128 v55 = v6;
          }

          v4 += 184LL;
        }

        while (v4 != v5);
        __int128 v36 = __p;
        if (__p != v6)
        {
          __int16 v52 = a2;
          double v37 = *(double *)(__p + 76);
          __int128 v38 = __p;
          do
          {
            double v39 = v37;
            if (!sub_1002954D0(*(double *)(v38 + 4), *(double *)(v38 + 12)))
            {
              if (qword_101934860 != -1) {
                dispatch_once(&qword_101934860, &stru_1018302A8);
              }
              __int128 v40 = (os_log_s *)qword_101934868;
              if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&_BYTE buf[20] = 156;
                *(_WORD *)&buf[24] = 2097;
                *(void *)&buf[26] = v36;
                _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid batched location, location:%{private, location:CLClientLocation}.*P}",  buf,  0x22u);
                if (qword_101934860 != -1) {
                  dispatch_once(&qword_101934860, &stru_1018302A8);
                }
              }

              __int128 v41 = (os_log_s *)qword_101934868;
              if (os_signpost_enabled((os_log_t)qword_101934868))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&_BYTE buf[20] = 156;
                *(_WORD *)&buf[24] = 2097;
                *(void *)&buf[26] = v36;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v41,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid batched location",  "{msg%{public}.0s:Invalid batched location, location:%{private, location:CLClientLocation}.*P}",  buf,  0x22u);
              }
            }

            double v37 = *(double *)(v38 + 76);
            if (v39 > v37)
            {
              if (qword_101934860 != -1) {
                dispatch_once(&qword_101934860, &stru_1018302A8);
              }
              __int128 v42 = (os_log_s *)qword_101934868;
              if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2049;
                *(double *)&_BYTE buf[20] = v39;
                *(_WORD *)&_BYTE buf[28] = 2049;
                *(double *)&buf[30] = v37;
                _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Batched locations are supposed to be ordered from oldest to more recent, t0 :%{private}f, t1:%{private}f}",  buf,  0x26u);
                if (qword_101934860 != -1) {
                  dispatch_once(&qword_101934860, &stru_1018302A8);
                }
              }

              __int128 v43 = (os_log_s *)qword_101934868;
              if (os_signpost_enabled((os_log_t)qword_101934868))
              {
                *(_DWORD *)buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2049;
                *(double *)&_BYTE buf[20] = v39;
                *(_WORD *)&_BYTE buf[28] = 2049;
                *(double *)&buf[30] = v37;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v43,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Batched locations are supposed to be ordered from oldest to more recent",  "{msg%{public}.0s:Batched locations are supposed to be ordered from oldest to more recent, t0 :%{private}f, t1:%{private}f}",  buf,  0x26u);
              }
            }

            v38 += 156;
            v36 += 156;
          }

          while (v38 != v6);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_1018302A8);
          }
          __int128 v44 = v52;
          __int128 v45 = (os_log_s *)qword_101934868;
          if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v46 = 0xD37A6F4DE9BD37A7LL * ((uint64_t)(*(void *)(v53 + 1640) - *(void *)(v53 + 1632)) >> 3);
            *(_DWORD *)buf = 134349312;
            *(void *)&uint8_t buf[4] = 0x6F96F96F96F96F97LL * ((uint64_t)(v55 - (void)__p) >> 2);
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(void *)&buf[14] = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "WsbCalc, filter, live, %{public}lu, groups, %{public}lu",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934860 != -1) {
              dispatch_once(&qword_101934860, &stru_1018302A8);
            }
            unint64_t v50 = 0xD37A6F4DE9BD37A7LL * ((uint64_t)(*(void *)(v53 + 1640) - *(void *)(v53 + 1632)) >> 3);
            int v56 = 134349312;
            uint64_t v57 = 0x6F96F96F96F96F97LL * ((uint64_t)(v55 - (void)__p) >> 2);
            __int16 v58 = 2050;
            unint64_t v59 = v50;
            uint64_t v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbCalc, filter, live, %{public}lu, groups, %{public}lu",  &v56,  22);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Wifi::Wsb &) const",  "%s\n",  v51);
            if (v51 != buf) {
              free(v51);
            }
            __int128 v44 = v52;
          }

          uint64_t v47 = *((void *)v44 + 803);
          int v48 = *(_DWORD *)(v47 + 252);
          int v49 = *(_DWORD *)(v47 + 256);
          *(_OWORD *)&uint8_t buf[8] = v55;
          *(_DWORD *)(v47 + 252) = v48 + 1;
          *(_DWORD *)(v47 + 256) = v49 - 1762037865 * (((void)v55 - (void)__p) >> 2);
          __int128 v55 = 0uLL;
          *(void *)buf = __p;
          sub_10000AD00((uint64_t)(v44 + 700), (__n128 *)buf);
          if (*(void *)buf)
          {
            *(void *)&uint8_t buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }

          uint64_t v6 = 0LL;
        }

        if (v6) {
          operator delete(v6);
        }
      }
    }
  }

void sub_1002DB998( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002D9D34(a11);
  _Unwind_Resume(a1);
}

void sub_1002DB9E8(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = sub_1002D9D6C(a2, a1);
  uint64_t v4 = *(void *)(a1 + 1632);
  uint64_t v5 = *(void *)(a1 + 1640);
  if (v4 != v5)
  {
    __int128 v43 = v3;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v6 = 0LL;
    __int128 v45 = 0uLL;
    do
    {
      if (*(double *)(v4 + 20) >= 0.0)
      {
        if ((unint64_t)v6 >= *((void *)&v45 + 1))
        {
          uint64_t v14 = __p;
          uint64_t v15 = 0x6F96F96F96F96F97LL * ((v6 - __p) >> 2);
          unint64_t v16 = v15 + 1;
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            __int128 v18 = (char *)sub_1002E01BC((uint64_t)&v45 + 8, v17);
            uint64_t v14 = __p;
            uint64_t v6 = (char *)v45;
          }

          else
          {
            __int128 v18 = 0LL;
          }

          __int128 v19 = &v18[156 * v15];
          __int128 v20 = *(_OWORD *)(v4 + 16);
          *(_OWORD *)__int128 v19 = *(_OWORD *)v4;
          *((_OWORD *)v19 + 1) = v20;
          __int128 v21 = *(_OWORD *)(v4 + 32);
          __int128 v22 = *(_OWORD *)(v4 + 48);
          __int128 v23 = *(_OWORD *)(v4 + 80);
          *((_OWORD *)v19 + 4) = *(_OWORD *)(v4 + 64);
          *((_OWORD *)v19 + 5) = v23;
          *((_OWORD *)v19 + 2) = v21;
          *((_OWORD *)v19 + 3) = v22;
          __int128 v24 = *(_OWORD *)(v4 + 96);
          __int128 v25 = *(_OWORD *)(v4 + 112);
          __int128 v26 = *(_OWORD *)(v4 + 128);
          *(_OWORD *)(v19 + 140) = *(_OWORD *)(v4 + 140);
          *((_OWORD *)v19 + 7) = v25;
          *((_OWORD *)v19 + 8) = v26;
          *((_OWORD *)v19 + 6) = v24;
          if (v6 == v14)
          {
            __int128 v35 = &v18[156 * v15];
          }

          else
          {
            uint64_t v27 = &v18[156 * v15];
            do
            {
              __int128 v28 = *(_OWORD *)(v6 - 156);
              *(_OWORD *)(v27 - 140) = *(_OWORD *)(v6 - 140);
              *(_OWORD *)(v27 - 156) = v28;
              __int128 v29 = *(_OWORD *)(v6 - 124);
              __int128 v30 = *(_OWORD *)(v6 - 108);
              __int128 v31 = *(_OWORD *)(v6 - 92);
              *(_OWORD *)(v27 - 76) = *(_OWORD *)(v6 - 76);
              *(_OWORD *)(v27 - 92) = v31;
              *(_OWORD *)(v27 - 108) = v30;
              *(_OWORD *)(v27 - 124) = v29;
              __int128 v32 = *(_OWORD *)(v6 - 60);
              __int128 v33 = *(_OWORD *)(v6 - 44);
              __int128 v34 = *(_OWORD *)(v6 - 28);
              __int128 v35 = v27 - 156;
              *((_OWORD *)v27 - 1) = *((_OWORD *)v6 - 1);
              *(_OWORD *)(v27 - 28) = v34;
              *(_OWORD *)(v27 - 44) = v33;
              *(_OWORD *)(v27 - 60) = v32;
              v6 -= 156;
              v27 -= 156;
            }

            while (v6 != v14);
          }

          uint64_t v6 = v19 + 156;
          std::stringbuf::string_type __p = v35;
          *((void *)&v45 + 1) = &v18[156 * v17];
          if (v14) {
            operator delete(v14);
          }
        }

        else
        {
          __int128 v7 = *(_OWORD *)(v4 + 16);
          *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
          *((_OWORD *)v6 + 1) = v7;
          __int128 v8 = *(_OWORD *)(v4 + 32);
          __int128 v9 = *(_OWORD *)(v4 + 48);
          __int128 v10 = *(_OWORD *)(v4 + 80);
          *((_OWORD *)v6 + 4) = *(_OWORD *)(v4 + 64);
          *((_OWORD *)v6 + 5) = v10;
          *((_OWORD *)v6 + 2) = v8;
          *((_OWORD *)v6 + 3) = v9;
          __int128 v11 = *(_OWORD *)(v4 + 96);
          __int128 v12 = *(_OWORD *)(v4 + 112);
          __int128 v13 = *(_OWORD *)(v4 + 128);
          *(_OWORD *)(v6 + 140) = *(_OWORD *)(v4 + 140);
          *((_OWORD *)v6 + 7) = v12;
          *((_OWORD *)v6 + 8) = v13;
          *((_OWORD *)v6 + 6) = v11;
          v6 += 156;
        }

        *(void *)&__int128 v45 = v6;
      }

      v4 += 184LL;
    }

    while (v4 != v5);
    if (__p != v6)
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018302A8);
      }
      __int128 v36 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v37 = 0xD37A6F4DE9BD37A7LL * ((uint64_t)(*(void *)(a1 + 1640) - *(void *)(a1 + 1632)) >> 3);
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = 0x6F96F96F96F96F97LL * ((uint64_t)(v45 - (void)__p) >> 2);
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&buf[14] = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "WsbCalc, filter, reproc, %{public}lu, groups, %{public}lu",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018302A8);
        }
        unint64_t v41 = 0xD37A6F4DE9BD37A7LL * ((uint64_t)(*(void *)(a1 + 1640) - *(void *)(a1 + 1632)) >> 3);
        int v46 = 134349312;
        uint64_t v47 = 0x6F96F96F96F96F97LL * ((uint64_t)(v45 - (void)__p) >> 2);
        __int16 v48 = 2050;
        unint64_t v49 = v41;
        __int128 v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbCalc, filter, reproc, %{public}lu, groups, %{public}lu",  &v46,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const",  "%s\n",  v42);
        if (v42 != buf) {
          free(v42);
        }
      }

      uint64_t v38 = *((void *)v43 + 803);
      int v39 = *(_DWORD *)(v38 + 252);
      int v40 = *(_DWORD *)(v38 + 256);
      *(_OWORD *)&uint8_t buf[8] = v45;
      *(_DWORD *)(v38 + 252) = v39 + 1;
      *(_DWORD *)(v38 + 256) = v40 - 1762037865 * (((void)v45 - (void)__p) >> 2);
      __int128 v45 = 0uLL;
      *(void *)buf = __p;
      sub_10000AD00((uint64_t)(v43 + 700), (__n128 *)buf);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      uint64_t v6 = 0LL;
    }

    if (v6) {
      operator delete(v6);
    }
  }

void sub_1002DBEAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002D9D34(a11);
  _Unwind_Resume(a1);
}

void sub_1002DBEF4(_DWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_1018302A8);
  }
  uint64_t v6 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a2;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, alsreply, aps, error, tag, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018302A8);
    }
    int v10 = *a2;
    LODWORD(v14) = 67240192;
    HIDWORD(v14) = v10;
    __int128 v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, alsreply, aps, error, tag, %{public}d",  &v14,  8);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Network::AlsError &) const",  "%s\n",  v11);
  }

  if (((int)a1[1600] > 0 || (int)a1[1601] > 0 || (int)a1[1602] >= 1) && sub_100495E98(a1 + 1492))
  {
    if (!*(_BYTE *)(a3 + 1987)) {
      *(_BYTE *)(a3 + 1987) = 1;
    }
    uint64_t v8 = *(void *)(a3 + 6424);
    ++*(_DWORD *)(v8 + 248);
    sub_1010DDBC0(buf, "alsError");
    uint64_t v14 = buf;
    __int128 v9 = sub_1002E2BC8((uint64_t **)(v8 + 264), (const void **)buf, (uint64_t)&unk_1012CF090, (_OWORD **)&v14);
    ++*((_DWORD *)v9 + 14);
    if (v13 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_1002DC168( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1002DC19C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)(a1 + 6400) >= 1 && *a2 != 0)
  {
    if (!*(_BYTE *)(a3 + 1987)) {
      *(_BYTE *)(a3 + 1987) = 1;
    }
    uint64_t v7 = *(void *)(a3 + 6424);
    ++*(_DWORD *)(v7 + 248);
    sub_1010DDBC0(__p, "wifiPoweredOff");
    __int128 v11 = __p;
    uint64_t v8 = sub_1002E2BC8((uint64_t **)(v7 + 264), (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v11);
    ++*((_DWORD *)v8 + 14);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1002DC260( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1002D9D34(v15);
  _Unwind_Resume(a1);
}

void sub_1002DC28C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(_BYTE *)(a1 + 6379))
  {
    if (!*(_BYTE *)(a2 + 1987)) {
      *(_BYTE *)(a2 + 1987) = 1;
    }
    uint64_t v4 = *(void *)(a2 + 6424);
    ++*(_DWORD *)(v4 + 248);
    sub_1010DDBC0(__p, "wifiPoweredOff");
    uint64_t v8 = __p;
    uint64_t v5 = sub_1002E2BC8((uint64_t **)(v4 + 264), (const void **)__p, (uint64_t)&unk_1012CF090, (_OWORD **)&v8);
    ++*((_DWORD *)v5 + 14);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1002DC344( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1002D9D34(v15);
  _Unwind_Resume(a1);
}

__n128 sub_1002DC370(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  return result;
}

void sub_1002DC380(uint64_t *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  sub_1002E1244((uint64_t)&v10);
  sub_1002E1094((uint64_t)&v9);
  sub_1002DDAD8((uint64_t)v8);
}

void sub_1002DC464( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002DC480(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002DC4C4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  __int128 v5 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v7;
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  __int128 v8 = *(_OWORD *)(a2 + 184);
  __int128 v9 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  __int128 v10 = *(_OWORD *)(a2 + 216);
  __int128 v11 = *(_OWORD *)(a2 + 232);
  __int128 v12 = *(_OWORD *)(a2 + 241);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 241) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 216) = v10;
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  }

  else
  {
    sub_1002DE6C4( a1 + 264,  *(uint64_t **)(a2 + 264),  *(uint64_t **)(a2 + 272),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 272) - *(void *)(a2 + 264)) >> 3));
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
    sub_1002DEA74((void *)(a1 + 296), *(void **)(a2 + 312), 0LL);
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    sub_1002DF078((void *)(a1 + 336), *(uint64_t **)(a2 + 352), 0LL);
    *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
    sub_1002DF34C((void *)(a1 + 376), *(uint64_t **)(a2 + 392), 0LL);
    *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
    sub_1002DEA74((void *)(a1 + 416), *(void **)(a2 + 432), 0LL);
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
    sub_1002DEA74((void *)(a1 + 456), *(void **)(a2 + 472), 0LL);
  }

  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x120uLL);
  sub_1001588D0((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  if (a1 != a2) {
    sub_1002DF550( (char *)(a1 + 824),  *(char **)(a2 + 824),  *(void *)(a2 + 832),  0xD37A6F4DE9BD37A7LL * ((uint64_t)(*(void *)(a2 + 832) - *(void *)(a2 + 824)) >> 3));
  }
  *(_WORD *)(a1 + 848) = *(_WORD *)(a2 + 848);
  sub_1002DF744(a1 + 856, a2 + 856);
  sub_1002DFA20(a1 + 952, a2 + 952);
  sub_1002DFD58(a1 + 1008, a2 + 1008);
  __int128 v13 = *(_OWORD *)(a2 + 1064);
  __int128 v14 = *(_OWORD *)(a2 + 1080);
  __int128 v15 = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = v15;
  *(_OWORD *)(a1 + 1064) = v13;
  *(_OWORD *)(a1 + 1080) = v14;
  __int128 v16 = *(_OWORD *)(a2 + 1128);
  __int128 v17 = *(_OWORD *)(a2 + 1144);
  __int128 v18 = *(_OWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v17;
  *(_OWORD *)(a1 + 1160) = v18;
  *(_OWORD *)(a1 + 1128) = v16;
  sub_1002DFDE4(a1 + 1184, a2 + 1184);
  sub_1002DFF4C(a1 + 1992, a2 + 1992);
  sub_1002E027C(a1 + 2024, a2 + 2024);
  sub_1001588D0((std::string *)(a1 + 2176), (const std::string *)(a2 + 2176));
  return a1;
}

uint64_t sub_1002DC708(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  sub_1000F2F30((void *)(a1 + 144), (uint64_t *)(a2 + 144));
  sub_1000F2F30((void *)(a1 + 160), (uint64_t *)(a2 + 160));
  sub_1000F2F30((void *)(a1 + 176), (uint64_t *)(a2 + 176));
  sub_1000C6A74(a1 + 192, a2 + 192);
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
  sub_1000F2F30((void *)(a1 + 296), (uint64_t *)(a2 + 296));
  __int128 v10 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v10;
  __int128 v11 = *(_OWORD *)(a2 + 392);
  __int128 v13 = *(_OWORD *)(a2 + 344);
  __int128 v12 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v11;
  *(_OWORD *)(a1 + 344) = v13;
  *(_OWORD *)(a1 + 360) = v12;
  __int128 v15 = *(_OWORD *)(a2 + 424);
  __int128 v14 = *(_OWORD *)(a2 + 440);
  __int128 v16 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 452) = *(_OWORD *)(a2 + 452);
  *(_OWORD *)(a1 + 424) = v15;
  *(_OWORD *)(a1 + 440) = v14;
  *(_OWORD *)(a1 + 408) = v16;
  memcpy((void *)(a1 + 472), (const void *)(a2 + 472), 0x201uLL);
  sub_1000F2F30((void *)(a1 + 992), (uint64_t *)(a2 + 992));
  __int128 v17 = *(_OWORD *)(a2 + 1008);
  __int128 v18 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1008) = v17;
  *(_OWORD *)(a1 + 1024) = v18;
  __int128 v19 = *(_OWORD *)(a2 + 1056);
  __int128 v20 = *(_OWORD *)(a2 + 1072);
  __int128 v21 = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1101) = *(void *)(a2 + 1101);
  *(_OWORD *)(a1 + 1088) = v21;
  *(_OWORD *)(a1 + 1072) = v20;
  *(_OWORD *)(a1 + 1056) = v19;
  __int128 v23 = *(_OWORD *)(a2 + 1224);
  __int128 v22 = *(_OWORD *)(a2 + 1240);
  __int128 v24 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1252) = *(_OWORD *)(a2 + 1252);
  *(_OWORD *)(a1 + 1224) = v23;
  *(_OWORD *)(a1 + 1240) = v22;
  *(_OWORD *)(a1 + 1208) = v24;
  __int128 v26 = *(_OWORD *)(a2 + 1144);
  __int128 v25 = *(_OWORD *)(a2 + 1160);
  __int128 v27 = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v27;
  *(_OWORD *)(a1 + 1144) = v26;
  *(_OWORD *)(a1 + 1160) = v25;
  __int128 v28 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v28;
  memcpy((void *)(a1 + 1272), (const void *)(a2 + 1272), 0x201uLL);
  sub_1000F2F30((void *)(a1 + 1792), (uint64_t *)(a2 + 1792));
  __int128 v29 = *(_OWORD *)(a2 + 1840);
  __int128 v30 = *(_OWORD *)(a2 + 1824);
  *(_OWORD *)(a1 + 1808) = *(_OWORD *)(a2 + 1808);
  *(_OWORD *)(a1 + 1824) = v30;
  *(_OWORD *)(a1 + 1840) = v29;
  __int128 v31 = *(_OWORD *)(a2 + 1872);
  __int128 v32 = *(_OWORD *)(a2 + 1888);
  uint64_t v33 = *(void *)(a2 + 1901);
  *(_OWORD *)(a1 + 1856) = *(_OWORD *)(a2 + 1856);
  *(void *)(a1 + 1901) = v33;
  *(_OWORD *)(a1 + 1888) = v32;
  *(_OWORD *)(a1 + 1872) = v31;
  sub_1000F2F30((void *)(a1 + 1912), (uint64_t *)(a2 + 1912));
  memcpy((void *)(a1 + 1928), (const void *)(a2 + 1928), 0x170uLL);
  memcpy((void *)(a1 + 2296), (const void *)(a2 + 2296), 0x201uLL);
  sub_1000F2F30((void *)(a1 + 2816), (uint64_t *)(a2 + 2816));
  __int128 v34 = *(_OWORD *)(a2 + 2864);
  __int128 v35 = *(_OWORD *)(a2 + 2848);
  *(_OWORD *)(a1 + 2832) = *(_OWORD *)(a2 + 2832);
  *(_OWORD *)(a1 + 2848) = v35;
  *(_OWORD *)(a1 + 2864) = v34;
  __int128 v36 = *(_OWORD *)(a2 + 2896);
  __int128 v37 = *(_OWORD *)(a2 + 2912);
  uint64_t v38 = *(void *)(a2 + 2925);
  *(_OWORD *)(a1 + 2880) = *(_OWORD *)(a2 + 2880);
  *(void *)(a1 + 2925) = v38;
  *(_OWORD *)(a1 + 2912) = v37;
  *(_OWORD *)(a1 + 2896) = v36;
  char v39 = *(_BYTE *)(a2 + 2944);
  *(void *)(a1 + 2936) = *(void *)(a2 + 2936);
  *(_BYTE *)(a1 + 2944) = v39;
  char v40 = *(_BYTE *)(a2 + 2960);
  *(void *)(a1 + 2952) = *(void *)(a2 + 2952);
  *(_BYTE *)(a1 + 2960) = v40;
  std::string::operator=((std::string *)(a1 + 2968), (const std::string *)(a2 + 2968));
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  __int128 v41 = *(_OWORD *)(a2 + 3024);
  __int128 v42 = *(_OWORD *)(a2 + 3040);
  __int128 v43 = *(_OWORD *)(a2 + 3052);
  *(_OWORD *)(a1 + 3008) = *(_OWORD *)(a2 + 3008);
  *(_OWORD *)(a1 + 3052) = v43;
  *(_OWORD *)(a1 + 3040) = v42;
  *(_OWORD *)(a1 + 3024) = v41;
  std::string::operator=((std::string *)(a1 + 3072), (const std::string *)(a2 + 3072));
  __int128 v45 = *(_OWORD *)(a2 + 3112);
  __int128 v44 = *(_OWORD *)(a2 + 3128);
  *(_OWORD *)(a1 + 3096) = *(_OWORD *)(a2 + 3096);
  *(_OWORD *)(a1 + 3112) = v45;
  *(_OWORD *)(a1 + 3128) = v44;
  __int128 v46 = *(_OWORD *)(a2 + 3192);
  __int128 v48 = *(_OWORD *)(a2 + 3144);
  __int128 v47 = *(_OWORD *)(a2 + 3160);
  *(_OWORD *)(a1 + 3176) = *(_OWORD *)(a2 + 3176);
  *(_OWORD *)(a1 + 3192) = v46;
  *(_OWORD *)(a1 + 3144) = v48;
  *(_OWORD *)(a1 + 3160) = v47;
  __int128 v50 = *(_OWORD *)(a2 + 3224);
  __int128 v49 = *(_OWORD *)(a2 + 3240);
  __int128 v51 = *(_OWORD *)(a2 + 3208);
  *(_BYTE *)(a1 + 3256) = *(_BYTE *)(a2 + 3256);
  *(_OWORD *)(a1 + 3224) = v50;
  *(_OWORD *)(a1 + 3240) = v49;
  *(_OWORD *)(a1 + 3208) = v51;
  if (a1 != a2)
  {
    sub_1002DE6C4( a1 + 3264,  *(uint64_t **)(a2 + 3264),  *(uint64_t **)(a2 + 3272),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 3272) - *(void *)(a2 + 3264)) >> 3));
    *(_DWORD *)(a1 + 3320) = *(_DWORD *)(a2 + 3320);
    sub_1002DEA74((void *)(a1 + 3288), *(void **)(a2 + 3304), 0LL);
  }

  __int128 v52 = *(_OWORD *)(a2 + 3328);
  *(void *)(a1 + 3344) = *(void *)(a2 + 3344);
  *(_OWORD *)(a1 + 3328) = v52;
  __int128 v53 = *(_OWORD *)(a2 + 3352);
  __int128 v54 = *(_OWORD *)(a2 + 3368);
  __int128 v55 = *(_OWORD *)(a2 + 3384);
  *(void *)(a1 + 3399) = *(void *)(a2 + 3399);
  *(_OWORD *)(a1 + 3368) = v54;
  *(_OWORD *)(a1 + 3384) = v55;
  *(_OWORD *)(a1 + 3352) = v53;
  sub_1000F2F30((void *)(a1 + 3408), (uint64_t *)(a2 + 3408));
  __int128 v56 = *(_OWORD *)(a2 + 3433);
  *(_OWORD *)(a1 + 3424) = *(_OWORD *)(a2 + 3424);
  *(_OWORD *)(a1 + 3433) = v56;
  return a1;
}

void sub_1002DCA80(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a1;
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    __int128 v6 = (_BYTE *)(a2 + 8);
    uint64_t v27 = a2 + 8;
    int v7 = v4 ^ (v4 >> 31);
    __int128 v8 = (_BYTE *)(a1 + 8);
    switch(v7)
    {
      case 0:
      case 1:
      case 2:
      case 13:
      case 17:
      case 27:
      case 28:
      case 29:
        return;
      case 3:
      case 12:
      case 14:
      case 23:
        _BYTE *v8 = *v6;
        return;
      case 4:
      case 9:
      case 11:
      case 15:
      case 19:
      case 22:
      case 25:
      case 26:
        *(_DWORD *)__int128 v8 = *(_DWORD *)v6;
        return;
      case 5:
      case 6:
        sub_1000C6A74(a1 + 8, (uint64_t)v6);
        return;
      case 7:
        sub_1002DCEAC(&v27, a1 + 8);
        return;
      case 8:
        sub_1002DD6A4(&v27, a1 + 8);
        return;
      case 10:
      case 20:
      case 21:
        *(void *)__int128 v8 = *(void *)v6;
        return;
      case 16:
        __int128 v10 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)__int128 v8 = *(_OWORD *)v6;
        *(_OWORD *)(a1 + 24) = v10;
        __int128 v11 = *(_OWORD *)(a2 + 40);
        __int128 v12 = *(_OWORD *)(a2 + 56);
        __int128 v13 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = v13;
        *(_OWORD *)(a1 + 40) = v11;
        *(_OWORD *)(a1 + 56) = v12;
        __int128 v14 = *(_OWORD *)(a2 + 104);
        __int128 v15 = *(_OWORD *)(a2 + 120);
        __int128 v16 = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
        *(_OWORD *)(a1 + 120) = v15;
        *(_OWORD *)(a1 + 136) = v16;
        *(_OWORD *)(a1 + 104) = v14;
        memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
        sub_1000F2F30((void *)(a1 + 688), (uint64_t *)(a2 + 688));
        __int128 v18 = *(_OWORD *)(a2 + 720);
        __int128 v17 = *(_OWORD *)(a2 + 736);
        *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
        *(_OWORD *)(a1 + 720) = v18;
        *(_OWORD *)(a1 + 736) = v17;
        __int128 v20 = *(_OWORD *)(a2 + 768);
        __int128 v19 = *(_OWORD *)(a2 + 784);
        __int128 v21 = *(_OWORD *)(a2 + 752);
        *(void *)(a1 + 797) = *(void *)(a2 + 797);
        *(_OWORD *)(a1 + 768) = v20;
        *(_OWORD *)(a1 + 784) = v19;
        *(_OWORD *)(a1 + 752) = v21;
        return;
      case 18:
        *(_OWORD *)__int128 v8 = *(_OWORD *)v6;
        return;
      case 24:
        uint64_t v22 = *(void *)v6;
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(void *)__int128 v8 = v22;
        std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        __int128 v24 = *(_OWORD *)(a2 + 80);
        __int128 v23 = *(_OWORD *)(a2 + 96);
        __int128 v25 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
        *(_OWORD *)(a1 + 80) = v24;
        *(_OWORD *)(a1 + 96) = v23;
        *(_OWORD *)(a1 + 64) = v25;
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
        return;
      default:
        goto LABEL_44;
    }
  }

  uint64_t v27 = a1;
  int v28 = v5 ^ (v5 >> 31);
  __int128 v9 = (__int128 *)(a2 + 8);
  switch(v28)
  {
    case 0:
      sub_1002DDAD8(a1);
      *(_DWORD *)a1 = 0;
      return;
    case 1:
      sub_1002DDAD8(a1);
      int v26 = 1;
      goto LABEL_42;
    case 2:
      sub_1002DDAD8(a1);
      int v26 = 2;
      goto LABEL_42;
    case 3:
      sub_1002DDAD8(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      int v26 = 3;
      goto LABEL_42;
    case 4:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 4;
      goto LABEL_42;
    case 5:
    case 6:
      sub_1002DDCC4((uint64_t)&v27, (uint64_t)v9);
      return;
    case 7:
      sub_1002DDD84((uint64_t)&v27, (uint64_t)v9);
      return;
    case 8:
      sub_1002DE26C((uint64_t)&v27, (uint64_t)v9);
      return;
    case 9:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 9;
      goto LABEL_42;
    case 10:
      sub_1002DDAD8(a1);
      *(void *)(a1 + 8) = *(void *)v9;
      int v26 = 10;
      goto LABEL_42;
    case 11:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 11;
      goto LABEL_42;
    case 12:
      sub_1002DDAD8(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      int v26 = 12;
      goto LABEL_42;
    case 13:
      sub_1002DDAD8(a1);
      int v26 = 13;
      goto LABEL_42;
    case 14:
      sub_1002DDAD8(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      int v26 = 14;
      goto LABEL_42;
    case 15:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 15;
      goto LABEL_42;
    case 16:
      sub_1002DE44C((uint64_t)&v27, v9);
      return;
    case 17:
      sub_1002DDAD8(a1);
      int v26 = 17;
      goto LABEL_42;
    case 18:
      sub_1002DDAD8(a1);
      *(_OWORD *)(a1 + 8) = *v9;
      int v26 = 18;
      goto LABEL_42;
    case 19:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 19;
      goto LABEL_42;
    case 20:
      sub_1002DDAD8(a1);
      *(void *)(a1 + 8) = *(void *)v9;
      int v26 = 20;
      goto LABEL_42;
    case 21:
      sub_1002DDAD8(a1);
      *(void *)(a1 + 8) = *(void *)v9;
      int v26 = 21;
      goto LABEL_42;
    case 22:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 22;
      goto LABEL_42;
    case 23:
      sub_1002DDAD8(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      int v26 = 23;
      goto LABEL_42;
    case 24:
      sub_1002DE534((uint64_t)&v27, (uint64_t *)v9);
      return;
    case 25:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 25;
      goto LABEL_42;
    case 26:
      sub_1002DDAD8(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      int v26 = 26;
      goto LABEL_42;
    case 27:
      sub_1002DDAD8(a1);
      int v26 = 27;
      goto LABEL_42;
    case 28:
      sub_1002DDAD8(a1);
      int v26 = 28;
      goto LABEL_42;
    case 29:
      sub_1002DDAD8(a1);
      int v26 = 29;
LABEL_42:
      *(_DWORD *)a1 = v26;
      return;
    default:
LABEL_44:
      sub_1002DDAB0();
  }

void sub_1002DCEAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 != a2)
  {
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(v3 + 32);
    sub_1002DCF04((void *)a2, *(uint64_t **)(v3 + 16), 0LL);
  }

  *(void *)(a2 + 40) = *(void *)(v3 + 40);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(v3 + 48);
  sub_1000C6A74(a2 + 56, v3 + 56);
}

void sub_1002DCF04(void *a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = (const std::string *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    __int128 v8 = (void **)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      __int128 v10 = v8;
    }

    else
    {
      do
      {
        v8[2] = (void *)v4->__r_.__value_.__l.__cap_;
        std::string::operator=((std::string *)v8 + 1, v4 + 1);
        __int128 v11 = *(_OWORD *)&v4[2].__r_.__value_.__l.__data_;
        __int128 v12 = *(_OWORD *)&v4[2].__r_.__value_.__r.__words[2];
        __int128 v13 = *(_OWORD *)&v4[3].__r_.__value_.__r.__words[1];
        v8[12] = v4[4].__r_.__value_.__l.__data_;
        *((_OWORD *)v8 + 4) = v12;
        *((_OWORD *)v8 + 5) = v13;
        *((_OWORD *)v8 + 3) = v11;
        __int128 v10 = (void **)*v8;
        sub_1002DD01C(a1, v8);
        int v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
        if (!v10) {
          break;
        }
        __int128 v8 = v10;
      }

      while (v4 != (const std::string *)a3);
    }

    sub_1002DD088((int)a1, v10);
  }

  while (v4 != (const std::string *)a3)
  {
    sub_1002DD51C(a1, (uint64_t *)&v4->__r_.__value_.__l.__cap_);
    int v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
  }

void sub_1002DCFEC(void *a1)
{
}

void sub_1002DD008(_Unwind_Exception *a1)
{
}

void *sub_1002DD01C(void *a1, void *a2)
{
  int v4 = a2 + 2;
  uint64_t v8 = a2[2];
  unint64_t v5 = sub_1005B46E8((uint64_t)&v8);
  a2[1] = v5;
  uint64_t v6 = sub_1002DD0CC((uint64_t)a1, v5, v4);
  sub_100019674(a1, a2, v6);
  return a2;
}

void sub_1002DD088(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void *sub_1002DD0CC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1LL;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    sub_1002DD25C(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }

  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }

  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }

  __int128 v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    __int128 v17 = (void *)*v16;
    if (*v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = v17[1];
        if (v14 > 1)
        {
          unint64_t v20 = v17[1];
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }

        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }

        if (v20 != v15) {
          break;
        }
        if (v19 == a2)
        {
          uint64_t v25 = v17[2];
          uint64_t v21 = sub_1005B46E8((uint64_t)&v25);
          uint64_t v24 = *a3;
          BOOL v22 = v21 == sub_1005B46E8((uint64_t)&v24);
        }

        else
        {
          BOOL v22 = 0;
        }

        if ((v18 & !v22 & 1) != 0) {
          break;
        }
        v18 |= v22;
        __int128 v16 = (void *)*v16;
        __int128 v17 = (void *)*v16;
      }

      while (*v16);
    }
  }

  return v16;
}

void sub_1002DD25C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_1002DD338(a1, prime);
  }

void sub_1002DD338(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000070D4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }

        else
        {
          v13 &= a2 - 1;
        }

        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }

        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          uint64_t v14 = *i;
          unint64_t v15 = i;
          if (*i)
          {
            while (1)
            {
              uint64_t v21 = i[2];
              uint64_t v16 = sub_1005B46E8((uint64_t)&v21);
              uint64_t v20 = *(void *)(v14 + 16);
              uint64_t v17 = sub_1005B46E8((uint64_t)&v20);
              int v18 = (uint64_t *)*v15;
              if (v16 != v17) {
                break;
              }
              uint64_t v14 = *v18;
              unint64_t v15 = (uint64_t *)*v15;
              if (!*v18)
              {
                unint64_t v19 = 0LL;
                goto LABEL_30;
              }
            }

            unint64_t v19 = (uint64_t *)*v15;
            int v18 = v15;
          }

          else
          {
            unint64_t v19 = 0LL;
            int v18 = i;
          }

void *sub_1002DD51C(void *a1, uint64_t *a2)
{
  return sub_1002DD01C(a1, v4);
}

void sub_1002DD554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_1002DD658((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DD578@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (char *)operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(void *)uint64_t v6 = 0LL;
  *((void *)v6 + 1) = 0LL;
  uint64_t v7 = *a2;
  *((void *)v6 + 2) = *a2;
  unint64_t v8 = v6 + 24;
  if (*((char *)a2 + 31) < 0)
  {
    sub_1010DD48C(v8, (void *)a2[1], a2[2]);
    uint64_t v7 = *((void *)v6 + 2);
  }

  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)(a2 + 1);
    *((void *)v6 + 5) = a2[3];
  }

  __int128 v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)v6 + 3) = *((_OWORD *)a2 + 2);
  *((_OWORD *)v6 + 4) = v9;
  *((_OWORD *)v6 + 5) = *((_OWORD *)a2 + 4);
  *((void *)v6 + 12) = a2[10];
  *(_BYTE *)(a3 + 16) = 1;
  uint64_t v11 = v7;
  uint64_t result = sub_1005B46E8((uint64_t)&v11);
  *((void *)v6 + 1) = result;
  return result;
}

void sub_1002DD63C(_Unwind_Exception *a1)
{
  *int v1 = 0LL;
  sub_1002DD658(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002DD658(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1002DD6A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 != a2) {
    sub_1002DD704( (uint64_t *)a2,  *(void *)v3,  *(void *)(v3 + 8),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 3));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 24);
  sub_1000C6A74(a2 + 32, v3 + 32);
}

void sub_1002DD704(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x2E8BA2E8BA2E8BA3LL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_1002DD898(a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      sub_100007008();
    }
    unint64_t v10 = 0x5D1745D1745D1746LL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10004C510(a1, v11);
    uint64_t v12 = sub_1002DD8D0(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }

  if (0x2E8BA2E8BA2E8BA3LL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    sub_1002DDA30(a2, v13, v9);
    uint64_t v12 = sub_1002DD8D0(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }

  sub_1002DDA30(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      v16 -= 88LL;
    }

    while (v16 != v15);
  }

  a1[1] = v15;
}

void sub_1002DD888(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002DD890(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002DD898(uint64_t *a1)
{
  if (*a1)
  {
    sub_1000234D8(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t sub_1002DD8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (__int128 *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(void *)uint64_t v4 = *((void *)v6 - 1);
      uint64_t v8 = (_BYTE *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_1010DD48C(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v10 = v18;
      }

      else
      {
        __int128 v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v8 = v9;
        uint64_t v10 = v4;
      }

      __int128 v11 = *(__int128 *)((char *)v6 + 24);
      __int128 v12 = *(__int128 *)((char *)v6 + 40);
      __int128 v13 = *(__int128 *)((char *)v6 + 56);
      *(void *)(v4 + 80) = *((void *)v6 + 9);
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 64) = v13;
      *(_OWORD *)(v4 + 32) = v11;
      uint64_t v4 = v10 + 88;
      uint64_t v18 = v10 + 88;
      uint64_t v6 = (__int128 *)((char *)v6 + 88);
    }

    while (v7 + 88 != a3);
  }

  char v16 = 1;
  sub_1002DD9B8((uint64_t)v15);
  return v4;
}

void sub_1002DD9A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002DD9B8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1002DD9EC(a1);
  }
  return a1;
}

void sub_1002DD9EC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 88LL;
  }

uint64_t sub_1002DDA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(void *)a3 = *(void *)v4;
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v4 + 8));
    __int128 v7 = *(_OWORD *)(v4 + 48);
    __int128 v6 = *(_OWORD *)(v4 + 64);
    __int128 v8 = *(_OWORD *)(v4 + 32);
    *(void *)(a3 + 80) = *(void *)(v4 + 80);
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 64) = v6;
    *(_OWORD *)(a3 + 32) = v8;
    a3 += 88LL;
    v4 += 88LL;
  }

  while (v4 != v5);
  return v5;
}

void sub_1002DDAB0()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

void sub_1002DDAD8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return;
    case 5:
    case 6:
      if (*(_BYTE *)(a1 + 96))
      {
      }

      break;
    case 7:
      sub_1002DDB88((uint64_t)&v2, v1);
      break;
    case 8:
      sub_1002DDBF8((uint64_t)&v2, v1);
      break;
    case 0x10:
      sub_10000AE14(a1 + 688);
      break;
    case 0x18:
      sub_1002DDC40((uint64_t)&v2, v1);
      break;
    default:
      sub_1002DDAB0();
  }

uint64_t sub_1002DDB88(uint64_t a1, uint64_t a2)
{
  return sub_1002DDBC0(a2);
}

uint64_t sub_1002DDBC0(uint64_t a1)
{
  char v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1002DDBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)a2;
  sub_100023498(&v3);
}

void sub_1002DDC40(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002DDC84(uint64_t a1)
{
  return a1;
}

void sub_1002DDCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  *(_BYTE *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 96) = 0;
  if (v16)
  {
    *(void *)(v3 + 8) = v9;
    uint64_t v4 = v11;
    *(_OWORD *)(v3 + 16) = *(_OWORD *)__p;
    *(void *)(v3 + 32) = v4;
    __p[1] = 0LL;
    uint64_t v11 = 0LL;
    __p[0] = 0LL;
    uint64_t v5 = v15;
    __int128 v6 = v12;
    __int128 v7 = v13;
    *(_OWORD *)(v3 + 72) = v14;
    *(_OWORD *)(v3 + 56) = v7;
    *(_OWORD *)(v3 + 40) = v6;
    *(void *)(v3 + 88) = v5;
    *(_BYTE *)(v3 + 96) = 1;
    int v8 = v16;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if (v8)
    {
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }

uint64_t sub_1002DDD84(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = *(_BYTE *)(a2 + 48);
  sub_1000C6980(&v13, a2 + 56);
  sub_1002DDAD8(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  sub_10001B9CC(*(void *)a1 + 8LL, v10);
  *(void *)(v4 + 48) = v11;
  *(_BYTE *)(v4 + 56) = v12;
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 152) = 0;
  if (v20)
  {
    *(void *)(v4 + 64) = v13;
    uint64_t v5 = v15;
    *(_OWORD *)(v4 + 72) = *(_OWORD *)__p;
    *(void *)(v4 + 88) = v5;
    __p[1] = 0LL;
    uint64_t v15 = 0LL;
    __p[0] = 0LL;
    uint64_t v6 = v19;
    __int128 v7 = v16;
    __int128 v8 = v18;
    *(_OWORD *)(v4 + 112) = v17;
    *(_OWORD *)(v4 + 128) = v8;
    *(_OWORD *)(v4 + 96) = v7;
    *(void *)(v4 + 144) = v6;
    *(_BYTE *)(v4 + 152) = 1;
    LODWORD(v6) = v20;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if ((_DWORD)v6 && SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }

  return sub_1002DDBC0((uint64_t)v10);
}

void sub_1002DDE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002DDEA4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1002DDF18(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1002DDF00(_Unwind_Exception *a1)
{
}

void *sub_1002DDF18(uint64_t a1, void *a2, uint64_t a3)
{
  v25[0] = *a2;
  unint64_t v7 = sub_1005B46E8((uint64_t)v25);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }

    char v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            v25[0] = v13[2];
            uint64_t v15 = sub_1005B46E8((uint64_t)v25);
            uint64_t v26 = *a2;
          }

          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }

            else
            {
              v14 &= v9 - 1;
            }

            if (v14 != v3) {
              break;
            }
          }

          uint64_t v13 = (void *)*v13;
        }

        while (v13);
      }
    }
  }

  sub_1002DE1A4(a1, v8, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *BOOL v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }

      else
      {
        v23 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t v13 = (void *)v25[0];
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1002DE180( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10)
{
  if (__p) {
    sub_1002DD658((uint64_t)&a10, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1002DE1A4@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (__n128 *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->n128_u64[0] = 0LL;
  v8->n128_u64[1] = a2;
  v8[1].n128_u64[0] = *(void *)a3;
  unint64_t v9 = &v8[1].n128_u8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1010DD48C(v9, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)(a3 + 8);
    v8[2].n128_u64[1] = *(void *)(a3 + 24);
  }

  __n128 v10 = *(__n128 *)(a3 + 48);
  v8[3] = *(__n128 *)(a3 + 32);
  v8[4] = v10;
  __n128 result = *(__n128 *)(a3 + 64);
  v8[5] = result;
  v8[6].n128_u64[0] = *(void *)(a3 + 80);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1002DE250(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1002DD658(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002DE26C(uint64_t a1, uint64_t a2)
{
  __int128 v10 = 0uLL;
  uint64_t v11 = 0LL;
  sub_1002DE3C8( &v10,  *(void *)a2,  *(void *)(a2 + 8),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  int v12 = *(_DWORD *)(a2 + 24);
  sub_1000C6980(&v13, a2 + 32);
  sub_1002DDAD8(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  *(void *)(v4 + 16) = 0LL;
  *(void *)(v4 + 24) = 0LL;
  *(_OWORD *)(v4 + 8) = v10;
  *(void *)(v4 + 24) = v11;
  __int128 v10 = 0uLL;
  uint64_t v11 = 0LL;
  *(_DWORD *)(v4 + 32) = v12;
  *(_BYTE *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 128) = 0;
  if (v20)
  {
    *(void *)(v4 + 40) = v13;
    uint64_t v5 = v15;
    *(_OWORD *)(v4 + 48) = *(_OWORD *)__p;
    *(void *)(v4 + 64) = v5;
    __p[1] = 0LL;
    uint64_t v15 = 0LL;
    __p[0] = 0LL;
    uint64_t v6 = v19;
    __int128 v7 = v16;
    __int128 v8 = v17;
    *(_OWORD *)(v4 + 104) = v18;
    *(_OWORD *)(v4 + 88) = v8;
    *(_OWORD *)(v4 + 72) = v7;
    *(void *)(v4 + 120) = v6;
    *(_BYTE *)(v4 + 128) = 1;
    int v9 = v20;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if (v9 && SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }

  size_t v21 = (void **)&v10;
  sub_100023498(&v21);
}

void sub_1002DE3B0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_100023498((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void *sub_1002DE3C8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10004C510(result, a4);
    __n128 result = (void *)sub_1002DD8D0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_1002DE42C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100023498(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_1002DE44C(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *(void *)a1;
  __int128 v5 = *a2;
  *(_OWORD *)(v4 + 24) = a2[1];
  *(_OWORD *)(v4 + 8) = v5;
  __int128 v6 = a2[2];
  __int128 v7 = a2[3];
  __int128 v8 = a2[4];
  *(_OWORD *)(v4 + 88) = a2[5];
  *(_OWORD *)(v4 + 72) = v8;
  *(_OWORD *)(v4 + 56) = v7;
  *(_OWORD *)(v4 + 40) = v6;
  __int128 v9 = a2[6];
  __int128 v10 = a2[7];
  __int128 v11 = a2[8];
  *(_OWORD *)(v4 + 148) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(v4 + 136) = v11;
  *(_OWORD *)(v4 + 120) = v10;
  *(_OWORD *)(v4 + 104) = v9;
  memcpy((void *)(v4 + 168), a2 + 10, 0x201uLL);
  *(void *)(v4 + 688) = *((void *)a2 + 85);
  uint64_t v12 = *((void *)a2 + 86);
  *(void *)(v4 + 696) = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  __int128 v15 = *(__int128 *)((char *)a2 + 696);
  __int128 v16 = *(__int128 *)((char *)a2 + 728);
  *(_OWORD *)(v4 + 720) = *(__int128 *)((char *)a2 + 712);
  *(_OWORD *)(v4 + 736) = v16;
  *(_OWORD *)(v4 + 704) = v15;
  __n128 result = *(__n128 *)((char *)a2 + 744);
  __int128 v18 = *(__int128 *)((char *)a2 + 760);
  __int128 v19 = *(__int128 *)((char *)a2 + 776);
  *(void *)(v4 + 797) = *(void *)((char *)a2 + 789);
  *(_OWORD *)(v4 + 768) = v18;
  *(_OWORD *)(v4 + 784) = v19;
  *(__n128 *)(v4 + 752) = result;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_1002DE534(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *a2;
  char v11 = *((_BYTE *)a2 + 8);
  if (*((char *)a2 + 39) < 0)
  {
    sub_1010DD48C(&v12, (void *)a2[2], a2[3]);
  }

  else
  {
    __int128 v12 = *((_OWORD *)a2 + 1);
    uint64_t v13 = a2[4];
  }

  __int128 v15 = *(_OWORD *)(a2 + 7);
  __int128 v16 = *(_OWORD *)(a2 + 9);
  v17[0] = *(_OWORD *)(a2 + 11);
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a2 + 100);
  __int128 v14 = *(_OWORD *)(a2 + 5);
  if (*((char *)a2 + 143) < 0)
  {
    sub_1010DD48C(&__p, (void *)a2[15], a2[16]);
  }

  else
  {
    __int128 __p = *(_OWORD *)(a2 + 15);
    uint64_t v19 = a2[17];
  }

  sub_1002DDAD8(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  *(_BYTE *)(v4 + 16) = v11;
  *(void *)(v4 + 8) = v10;
  uint64_t v5 = v13;
  *(_OWORD *)(v4 + 24) = v12;
  *(void *)(v4 + 40) = v5;
  __int128 v12 = 0uLL;
  uint64_t v13 = 0LL;
  *(_OWORD *)(v4 + 48) = v14;
  __int128 v7 = v16;
  __int128 v6 = v17[0];
  __int128 v8 = v15;
  *(_OWORD *)(v4 + 108) = *(_OWORD *)((char *)v17 + 12);
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 96) = v6;
  *(_OWORD *)(v4 + 64) = v8;
  uint64_t v9 = v19;
  *(_OWORD *)(v4 + 128) = __p;
  *(void *)(v4 + 144) = v9;
  __int128 __p = 0uLL;
  uint64_t v19 = 0LL;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_1002DE6A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DE6C4(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1002DE844((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100006E1C((void *)a1, v11);
    __int128 v12 = sub_1002DE8B4(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_1002DE9F4((uint64_t)&v17, a2, v13, (uint64_t *)v9);
    __int128 v12 = sub_1002DE8B4(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }

  sub_1002DE9F4((uint64_t)&v18, a2, a3, (uint64_t *)v9);
  __int128 v15 = v14;
  __int128 v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      uint64_t v19 = v16;
      sub_100023498(&v19);
    }

    while (v16 != v15);
  }

  *(void *)(a1 + 8) = v15;
}

void sub_1002DE834(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002DE83C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002DE844(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        sub_100023498(&v5);
      }

      while (v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void *sub_1002DE8B4(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    __int128 v6 = a2;
    do
    {
      void *v4 = 0LL;
      v4[1] = 0LL;
      v4[2] = 0LL;
      sub_1002DE3C8(v4, *v6, v6[1], 0x2E8BA2E8BA2E8BA3LL * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_1002DE978((uint64_t)v8);
  return v4;
}

void sub_1002DE964( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002DE978(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1002DE9AC(a1);
  }
  return a1;
}

void sub_1002DE9AC(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    sub_100023498(&v3);
  }

uint64_t *sub_1002DE9F4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        sub_1002DD704(a4, *v5, v5[1], 0x2E8BA2E8BA2E8BA3LL * ((v5[1] - *v5) >> 3));
      }
      v5 += 3;
      a4 += 3;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void sub_1002DEA74(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0LL; i != v6; *(void *)(*a1 + 8 * i++) = 0LL)
    ;
  uint64_t v8 = (void *)a1[2];
  a1[2] = 0LL;
  a1[3] = 0LL;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      char v9 = (void *)*v8;
      sub_1002DEB68(a1, v8);
      a2 = (void *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }

    do
    {
      unint64_t v10 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v10;
    }

    while (v10);
  }

  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_1002DEFB4(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }

void sub_1002DEB34(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_1002DEB54(_Unwind_Exception *a1)
{
}

void *sub_1002DEB68(void *a1, void *a2)
{
  uint64_t v4 = a2 + 2;
  unint64_t v5 = sub_1005B46E8((uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_1002DEBC4((uint64_t)a1, v5, v4);
  sub_100019674(a1, a2, v6);
  return a2;
}

void *sub_1002DEBC4(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1LL;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    sub_1002DED24(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }

  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }

  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }

  __int128 v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    char v17 = (void *)*v16;
    if (*v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = v17[1];
        if (v14 > 1)
        {
          unint64_t v20 = v17[1];
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }

        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }

        if (v20 != v15) {
          break;
        }
        BOOL v21 = v19 == a2 && sub_1007EC0B0(v17 + 2, a3);
        if ((v18 & !v21 & 1) != 0) {
          break;
        }
        v18 |= v21;
        __int128 v16 = (void *)*v16;
        char v17 = (void *)*v16;
      }

      while (*v16);
    }
  }

  return v16;
}

void sub_1002DED24(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_1002DEE00(a1, prime);
  }

void sub_1002DEE00(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000070D4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }

        else
        {
          v13 &= a2 - 1;
        }

        if (v13 == v8)
        {
          uint64_t v7 = i;
        }

        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          unint64_t v14 = (void *)*i;
          if (*i)
          {
            unint64_t v15 = i;
            while (1)
            {
              BOOL v16 = sub_1007EC0B0(i + 2, v14 + 2);
              char v17 = (void *)*v15;
              if (!v16) {
                break;
              }
              unint64_t v14 = (void *)*v17;
              unint64_t v15 = (void *)*v15;
              if (!*v17) {
                goto LABEL_31;
              }
            }

            unint64_t v14 = (void *)*v15;
            char v17 = v15;
          }

          else
          {
            char v17 = i;
          }

void *sub_1002DEFB4(void *a1, void *a2)
{
  return sub_1002DEB68(a1, v4);
}

void sub_1002DEFEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DF008@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x18uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  void *v6 = 0LL;
  v6[1] = 0LL;
  _DWORD v6[2] = *a2;
  *(_BYTE *)(a3 + 16) = 1;
  uint64_t result = sub_1005B46E8((uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_1002DF060(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1002DF078(void *a1, uint64_t *a2, uint64_t *a3)
{
  int8x8_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    unint64_t v8 = (void **)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }

    else
    {
      do
      {
        v8[2] = (void *)v4[2];
        void v8[3] = (void *)v4[3];
        std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
        __int128 v11 = *(_OWORD *)(v4 + 7);
        __int128 v12 = *(_OWORD *)(v4 + 9);
        __int128 v13 = *(_OWORD *)(v4 + 11);
        v8[13] = (void *)v4[13];
        *(_OWORD *)(v8 + 11) = v13;
        *(_OWORD *)(v8 + 9) = v12;
        *(_OWORD *)(v8 + 7) = v11;
        unint64_t v10 = (void **)*v8;
        sub_1002DEB68(a1, v8);
        int8x8_t v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }

      while (v4 != a3);
    }

    sub_1002DF1A0((int)a1, v10);
  }

  while (v4 != a3)
  {
    sub_1002DF1E4(a1, (uint64_t)(v4 + 2));
    int8x8_t v4 = (uint64_t *)*v4;
  }

void sub_1002DF170(void *a1)
{
}

void sub_1002DF18C(_Unwind_Exception *a1)
{
}

void sub_1002DF1A0(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void *sub_1002DF1E4(void *a1, uint64_t a2)
{
  return sub_1002DEB68(a1, v4);
}

void sub_1002DF21C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100022988((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DF240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  void *v6 = 0LL;
  v6[1] = 0LL;
  uint64_t v7 = sub_1002DF2CC((uint64_t)(v6 + 2), a2);
  *(_BYTE *)(a3 + 16) = 1;
  uint64_t result = sub_1005B46E8(v7);
  v6[1] = result;
  return result;
}

void sub_1002DF2B0(_Unwind_Exception *a1)
{
  *int v1 = 0LL;
  sub_100022988(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DF2CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1010DD48C((_BYTE *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }

  __int128 v6 = *(_OWORD *)(a2 + 40);
  __int128 v7 = *(_OWORD *)(a2 + 56);
  __int128 v8 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  return a1;
}

void sub_1002DF34C(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0LL; i != v6; *(void *)(*a1 + 8 * i++) = 0LL)
    ;
  __int128 v8 = (uint64_t *)a1[2];
  a1[2] = 0LL;
  a1[3] = 0LL;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      __int128 v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v8 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v8 + 3) = v9;
      __int128 v10 = *(_OWORD *)(a2 + 7);
      __int128 v11 = *(_OWORD *)(a2 + 9);
      __int128 v12 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v8 + 13) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v8 + 11) = v12;
      *(_OWORD *)(v8 + 9) = v11;
      *(_OWORD *)(v8 + 7) = v10;
      __int128 v13 = (uint64_t *)*v8;
      sub_1002DEB68(a1, v8);
      a2 = (uint64_t *)*a2;
      __int128 v8 = v13;
      if (!v13) {
        goto LABEL_9;
      }
    }

    do
    {
      unint64_t v14 = (uint64_t *)*v8;
      operator delete(v8);
      __int128 v8 = v14;
    }

    while (v14);
  }

  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_1002DF470(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }

void sub_1002DF43C(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_1002DF45C(_Unwind_Exception *a1)
{
}

void *sub_1002DF470(void *a1, uint64_t a2)
{
  return sub_1002DEB68(a1, v4);
}

void sub_1002DF4A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DF4C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x78uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  void *v6 = 0LL;
  v6[1] = 0LL;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 5) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 6) = v7;
  v6[14] = *(void *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 2) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 4) = v9;
  *(_BYTE *)(a3 + 16) = 1;
  uint64_t result = sub_1005B46E8((uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_1002DF538(_Unwind_Exception *a1)
{
  *int v1 = 0LL;
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_1002DF550(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  __int128 v7 = result;
  uint64_t v8 = *((void *)result + 2);
  __int128 v9 = *(char **)result;
  if (0xD37A6F4DE9BD37A7LL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *__int128 v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 > 0x1642C8590B21642LL) {
      sub_100007008();
    }
    unint64_t v10 = 0xD37A6F4DE9BD37A7LL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xB21642C8590B21LL) {
      unint64_t v12 = 0x1642C8590B21642LL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_1002DF6A8(v7, v12);
    unint64_t v14 = (char *)v7[1];
    __int128 v13 = (void **)(v7 + 1);
    __int128 v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  __int128 v13 = (void **)(result + 8);
  unint64_t v15 = (_BYTE *)*((void *)result + 1);
  if (0xD37A6F4DE9BD37A7LL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  BOOL v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    __int128 v9 = (char *)*v13;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

char *sub_1002DF6A8(void *a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643LL) {
    sub_100007008();
  }
  uint64_t result = (char *)sub_1002DF6FC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

void *sub_1002DF6FC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643LL) {
    sub_1000070D4();
  }
  return operator new(184 * a2);
}

void sub_1002DF744(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      __int128 v4 = *(_OWORD *)a2;
      *(void *)(a1 + 13) = *(void *)(a2 + 13);
      *(_OWORD *)a1 = v4;
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
      sub_1002DF820(a1 + 48, a2 + 48);
    }
  }

  else if (*(_BYTE *)(a1 + 88))
  {
    sub_1002DF7D0(a1);
  }

  else
  {
    sub_1002DF8F4(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 88) = 1;
  }

void sub_1002DF7D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      uint64_t v2 = *(void **)(a1 + 56);
      if (v2)
      {
        *(void *)(a1 + 64) = v2;
        operator delete(v2);
      }
    }

    *(_BYTE *)(a1 + 88) = 0;
  }

void sub_1002DF820(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32)) {
      sub_1002DF8AC((_BYTE *)a1, a2);
    }
  }

  else if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 16) = v3;
      operator delete(v3);
    }

    *(_BYTE *)(a1 + 32) = 0;
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 8) = 0LL;
    sub_10001B72C( (void *)(a1 + 8),  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    *(_BYTE *)(a1 + 32) = 1;
  }

_BYTE *sub_1002DF8AC(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (_BYTE *)a2) {
    sub_10004C5F8( a1 + 8,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_1002DF8F4(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }

  sub_1002DF988(a1 + 48, (uint64_t)(a2 + 3));
  return a1;
}

void sub_1002DF96C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1002DF988(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  sub_1002DF9D0((void *)a1, a2);
  return a1;
}

void sub_1002DF9B4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 32)) {
    sub_101233E88(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002DF9D0(void *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 32))
  {
    uint64_t v2 = result;
    *(_BYTE *)uint64_t result = *(_BYTE *)a2;
    result[2] = 0LL;
    result[3] = 0LL;
    result[1] = 0LL;
    uint64_t result = sub_10001B72C( result + 1,  *(const void **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    *((_BYTE *)v2 + 32) = 1;
  }

  return result;
}

void sub_1002DFA20(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_1002DEA74((void *)a1, *(void **)(a2 + 16), 0LL);
      }

      *(void *)(a1 + 40) = *(void *)(a2 + 40);
    }
  }

  else if (*(_BYTE *)(a1 + 48))
  {
    sub_100019CEC(a1);
    *(_BYTE *)(a1 + 48) = 0;
  }

  else
  {
    sub_1002DFAAC(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }

uint64_t sub_1002DFAAC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1002DFB20(a1, i + 2, i + 2);
  return a1;
}

void sub_1002DFB08(_Unwind_Exception *a1)
{
}

void *sub_1002DFB20(uint64_t a1, void *a2, void *a3)
{
  unint64_t v7 = sub_1005B46E8((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }

    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (sub_1007EC0B0(i + 2, a2)) {
            return i;
          }
        }

        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }

          else
          {
            v14 &= v9 - 1;
          }

          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *BOOL v22 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }

    else
    {
      v23 &= v9 - 1;
    }

    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }

void sub_1002DFD44(_Unwind_Exception *a1)
{
}

void sub_1002DFD58(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_1002DEA74((void *)a1, *(void **)(a2 + 16), 0LL);
      }

      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    }
  }

  else if (*(_BYTE *)(a1 + 48))
  {
    sub_100019CEC(a1);
    *(_BYTE *)(a1 + 48) = 0;
  }

  else
  {
    sub_1002DFAAC(a1, a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }

__n128 sub_1002DFDE4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 800) == *(unsigned __int8 *)(a2 + 800))
  {
    if (*(_BYTE *)(a1 + 800))
    {
      __int128 v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      __int128 v5 = *(_OWORD *)(a2 + 32);
      __int128 v6 = *(_OWORD *)(a2 + 48);
      __int128 v7 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      __int128 v8 = *(_OWORD *)(a2 + 96);
      __int128 v9 = *(_OWORD *)(a2 + 112);
      __int128 v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v9;
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 96) = v8;
      memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
      sub_1000F2F30((void *)(a1 + 680), (uint64_t *)(a2 + 680));
      __int128 v12 = *(_OWORD *)(a2 + 712);
      __int128 v11 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 712) = v12;
      *(_OWORD *)(a1 + 728) = v11;
      __int128 v14 = *(_OWORD *)(a2 + 760);
      __n128 result = *(__n128 *)(a2 + 776);
      __int128 v15 = *(_OWORD *)(a2 + 744);
      *(void *)(a1 + 789) = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 760) = v14;
      *(__n128 *)(a1 + 776) = result;
      *(_OWORD *)(a1 + 744) = v15;
    }
  }

  else if (*(_BYTE *)(a1 + 800))
  {
    sub_10000AE14(a1 + 680);
    *(_BYTE *)(a1 + 800) = 0;
  }

  else
  {
    __int128 v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    __int128 v17 = *(_OWORD *)(a2 + 32);
    __int128 v18 = *(_OWORD *)(a2 + 48);
    __int128 v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v19;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
    __int128 v20 = *(_OWORD *)(a2 + 96);
    __int128 v21 = *(_OWORD *)(a2 + 112);
    __int128 v22 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v21;
    *(_OWORD *)(a1 + 128) = v22;
    *(_OWORD *)(a1 + 96) = v20;
    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
    *(void *)(a1 + 680) = *(void *)(a2 + 680);
    uint64_t v23 = *(void *)(a2 + 688);
    *(void *)(a1 + 688) = v23;
    if (v23)
    {
      uint64_t v24 = (unint64_t *)(v23 + 8);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }

    __int128 v26 = *(_OWORD *)(a2 + 696);
    __int128 v27 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v27;
    *(_OWORD *)(a1 + 696) = v26;
    __n128 result = *(__n128 *)(a2 + 744);
    __int128 v28 = *(_OWORD *)(a2 + 760);
    __int128 v29 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v28;
    *(_OWORD *)(a1 + 776) = v29;
    *(__n128 *)(a1 + 744) = result;
    *(_BYTE *)(a1 + 800) = 1;
  }

  return result;
}

void sub_1002DFF4C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24)) {
        sub_1002E0010( (char *)a1,  *(char **)a2,  *(void *)(a2 + 8),  0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
      }
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    unint64_t v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }

    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    sub_1002E0204( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    *(_BYTE *)(a1 + 24) = 1;
  }

char *sub_1002E0010(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  __int128 v7 = result;
  uint64_t v8 = *((void *)result + 2);
  __int128 v9 = *(char **)result;
  if (0x6F96F96F96F96F97LL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *__int128 v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 > 0x1A41A41A41A41A4LL) {
      sub_100007008();
    }
    unint64_t v10 = 0x6F96F96F96F96F97LL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xD20D20D20D20D2LL) {
      unint64_t v12 = 0x1A41A41A41A41A4LL;
    }
    else {
      unint64_t v12 = v11;
    }
    __n128 result = sub_1002E0168(v7, v12);
    __int128 v14 = (char *)v7[1];
    __int128 v13 = (void **)(v7 + 1);
    __int128 v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __int128 v18 = v9;
      __int128 v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  __int128 v13 = (void **)(result + 8);
  __int128 v15 = (_BYTE *)*((void *)result + 1);
  if (0x6F96F96F96F96F97LL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  __int128 v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v15 - v9);
    __int128 v9 = (char *)*v13;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __int128 v18 = v9;
    __int128 v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }

char *sub_1002E0168(void *a1, unint64_t a2)
{
  if (a2 >= 0x1A41A41A41A41A5LL) {
    sub_100007008();
  }
  __n128 result = (char *)sub_1002E01BC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[156 * v4];
  return result;
}

void *sub_1002E01BC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1A41A41A41A41A5LL) {
    sub_1000070D4();
  }
  return operator new(156 * a2);
}

void *sub_1002E0204(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    __n128 result = sub_1002E0168(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1002E0260(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1002E027C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144))
  {
    if (*(_BYTE *)(a1 + 144))
    {
      uint64_t v4 = *(void *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(void *)a1 = v4;
      std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      __int128 v5 = *(_OWORD *)(a2 + 72);
      __int128 v6 = *(_OWORD *)(a2 + 88);
      __int128 v7 = *(_OWORD *)(a2 + 100);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 100) = v7;
      *(_OWORD *)(a1 + 88) = v6;
      *(_OWORD *)(a1 + 72) = v5;
      std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    }
  }

  else if (*(_BYTE *)(a1 + 144))
  {
    sub_1002E0330(a1);
  }

  else
  {
    sub_1002E0378(a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 144) = 1;
  }

void sub_1002E0330(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    *(_BYTE *)(a1 + 144) = 0;
  }

uint64_t sub_1002E0378(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }

  else
  {
    __int128 v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  __int128 v6 = *(_OWORD *)(a2 + 7);
  __int128 v7 = *(_OWORD *)(a2 + 9);
  __int128 v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  __int128 v9 = (_BYTE *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_1010DD48C(v9, (void *)a2[15], a2[16]);
  }

  else
  {
    __int128 v10 = *(_OWORD *)(a2 + 15);
    *(void *)(a1 + 136) = a2[17];
    *(_OWORD *)__int128 v9 = v10;
  }

  return a1;
}

void sub_1002E0438(_Unwind_Exception *exception_object)
{
}

_DWORD *sub_1002E0454(_DWORD *a1)
{
  *a1 = 0;
  sub_1002E04B8((uint64_t)(a1 + 202));
  sub_1002E06EC((uint64_t)(a1 + 754));
  return a1;
}

void sub_1002E0494(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E04B8(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  sub_100495DD4(a1 + 8);
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_BYTE *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 264) = 0LL;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  sub_1002E05D4(a1 + 600);
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1132) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_WORD *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_BYTE *)(a1 + 1984) = 0;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_BYTE *)(a1 + 2016) = 0;
  *(_BYTE *)(a1 + 2024) = 0;
  *(_BYTE *)(a1 + 2168) = 0;
  *(_BYTE *)(a1 + 2176) = 0;
  *(_BYTE *)(a1 + 2200) = 0;
  *(_WORD *)(a1 + 848) = 0;
  *(void *)(a1 + 840) = 0LL;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 1176) = 0;
  return a1;
}

__n128 sub_1002E05D4(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(__n128 *)(a1 + 36) = result;
  *(__n128 *)(a1 + 52) = result;
  *(__n128 *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 88) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_WORD *)(a1 + 182) = 0;
  return result;
}

uint64_t sub_1002E0644(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1002E067C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    __int128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        __int128 v6 = v4;
        sub_100023498(&v6);
      }

      while (v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1002E06EC(uint64_t a1)
{
  *(_BYTE *)(sub_100E5C934(a1) + 136) = 0;
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v2 + 24) = 0u;
  *(void *)(a1 + 144) = v2 + 24;
  *((void *)v2 + 2) = 0LL;
  *(void *)uint64_t v2 = off_1018300A0;
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 7) = 0LL;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *(void *)(a1 + 152) = v2;
  unint64_t v3 = (char *)operator new(0x48uLL);
  *((void *)v3 + 1) = 0LL;
  *((void *)v3 + 2) = 0LL;
  *(void *)unint64_t v3 = off_1018300F0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 14) = 1065353216;
  *((void *)v3 + 8) = 0LL;
  *(void *)(a1 + 160) = v3 + 24;
  *(void *)(a1 + 168) = v3;
  uint64_t v4 = operator new(0x50uLL);
  v4[2] = 0LL;
  void *v4 = off_101830140;
  v4[1] = 0LL;
  v4[3] = off_101830190;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *(void *)(a1 + 176) = v4 + 3;
  *(void *)(a1 + 184) = v4;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  __int128 v5 = (char *)operator new(0x48uLL);
  *((void *)v5 + 2) = 0LL;
  *(void *)__int128 v5 = off_1018301C8;
  *((void *)v5 + 1) = 0LL;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 296) = v5 + 24;
  *(void *)(a1 + 304) = v5;
  *(_DWORD *)(a1 + 312) = 0xFFFF;
  *(void *)(a1 + 324) = 0LL;
  *(void *)(a1 + 316) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v15 = _Q0;
  *(_OWORD *)(a1 + 332) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 348) = _Q0;
  *(_OWORD *)(a1 + 364) = _Q0;
  *(_OWORD *)(a1 + 380) = _Q0;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 408) = 0LL;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 400) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 428) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 436) = 0x7FFFFFFF;
  *(void *)(a1 + 448) = 0LL;
  *(void *)(a1 + 456) = 0LL;
  *(void *)(a1 + 440) = 0LL;
  *(_BYTE *)(a1 + 464) = 0;
  sub_100869DC8(a1 + 472);
  *(_DWORD *)(a1 + 1112) = 0xFFFF;
  *(void *)(a1 + 1124) = 0LL;
  *(void *)(a1 + 1116) = 0LL;
  *(_OWORD *)(a1 + 1132) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 1148) = v15;
  *(_OWORD *)(a1 + 1164) = v15;
  *(_OWORD *)(a1 + 1180) = v15;
  *(_DWORD *)(a1 + 1196) = 0;
  *(void *)(a1 + 1200) = 0xBFF0000000000000LL;
  *(void *)(a1 + 1216) = 0LL;
  *(void *)(a1 + 1208) = 0LL;
  *(_DWORD *)(a1 + 1224) = 0;
  *(void *)(a1 + 1228) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 1236) = 0x7FFFFFFF;
  *(void *)(a1 + 1240) = 0LL;
  *(void *)(a1 + 1256) = 0LL;
  *(void *)(a1 + 1248) = 0LL;
  *(_BYTE *)(a1 + 1264) = 0;
  sub_100869DC8(a1 + 1272);
  uint64_t v16 = 0x4066800000000000LL;
  sub_1002E0D74(&v16, (void *)(a1 + 1912));
  sub_1002E05D4(a1 + 1928);
  sub_1002E05D4(a1 + 2112);
  sub_100869DC8(a1 + 2296);
  *(void *)(a1 + 2936) = 0LL;
  *(_BYTE *)(a1 + 2944) = 0;
  sub_100495DD4(a1 + 2952);
  *(_DWORD *)(a1 + 3096) = 0;
  *(_OWORD *)(a1 + 3104) = 0u;
  *(_OWORD *)(a1 + 3120) = 0u;
  *(_BYTE *)(a1 + 3136) = 1;
  *(_DWORD *)(a1 + 3140) = 0;
  *(void *)(a1 + 3144) = 0x4018000000000000LL;
  *(_DWORD *)(a1 + 3152) = 0;
  *(_BYTE *)(a1 + 3156) = 0;
  *(_BYTE *)(a1 + 3256) = 0;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(void *)(a1 + 3312) = 0LL;
  *(_DWORD *)(a1 + 3320) = 1065353216;
  *(_DWORD *)(a1 + 3328) = -1;
  *(void *)(a1 + 3348) = 0LL;
  *(_DWORD *)(a1 + 3356) = 0;
  *(void *)(a1 + 3332) = 0LL;
  *(void *)(a1 + 3340) = 0LL;
  *(_DWORD *)(a1 + 3360) = 16777217;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_DWORD *)(a1 + 3400) = 1176256512;
  *(_WORD *)(a1 + 3404) = 0;
  *(_BYTE *)(a1 + 3406) = 0;
  uint64_t v11 = operator new(0x160uLL);
  v11[2] = 0LL;
  void *v11 = off_101830268;
  v11[1] = 0LL;
  sub_1002E0EBC((uint64_t)&v17, (uint64_t)(v11 + 3));
  *(void *)(a1 + 3408) = v11 + 3;
  *(void *)(a1 + 3416) = v11;
  *(_BYTE *)(a1 + 3424) = 0;
  *(void *)(a1 + 3428) = sub_100787B08();
  *(_DWORD *)(a1 + 3436) = v12;
  *(void *)(a1 + 3440) = sub_100787B08();
  *(_DWORD *)(a1 + 3448) = v13;
  return a1;
}

void sub_1002E0A38(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v2 + 280))
  {
  }

  sub_10000AE14(v2 + 176);
  sub_10000AE14(v1 + 16);
  sub_10000AE14(v1);
  _Unwind_Resume(a1);
}

void **sub_1002E0AE8(void **a1)
{
  uint64_t v3 = a1;
  sub_1002E067C(&v3);
  return a1;
}

void sub_1002E0B24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018300A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002E0B38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018300A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1002E0B5C(uint64_t a1)
{
  return sub_1002DDBC0(a1 + 24);
}

void sub_1002E0B68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018300F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002E0B7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018300F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1002E0BA0(uint64_t a1)
{
  return sub_1002DDBC0(a1 + 24);
}

void sub_1002E0BAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101830140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002E0BC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101830140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1002E0BE4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_1002E0BF4(void *a1)
{
  *a1 = off_101830190;
  sub_100231C10(a1 + 1);
  return a1;
}

void sub_1002E0C28(void *a1)
{
  *a1 = off_101830190;
  sub_100231C10(a1 + 1);
  operator delete(a1);
}

BOOL sub_1002E0C5C(void *a1, double *a2)
{
  uint64_t v2 = a1[2];
  if (a1[3] == v2) {
    return 0LL;
  }
  unint64_t v3 = a1[5];
  uint64_t v4 = (void *)(v2 + 8 * (v3 >> 8));
  __int128 v5 = (double *)(*v4 + 16LL * v3);
  uint64_t v6 = *(void *)(v2 + (((a1[6] + v3) >> 5) & 0x7FFFFFFFFFFFFF8LL))
     + 16LL * (*((_BYTE *)a1 + 48) + v3);
  double v7 = 1.79769313e308;
  double v8 = -1.79769313e308;
  do
  {
    double v9 = v5[1];
    if (v9 >= *a2 + -30.0 && v9 <= *a2)
    {
      if (*v5 > v8) {
        double v8 = *v5;
      }
      if (*v5 < v7) {
        double v7 = *v5;
      }
    }

    v5 += 2;
    if ((double *)((char *)v5 - *v4) == (double *)4096)
    {
      uint64_t v11 = (double *)v4[1];
      ++v4;
      __int128 v5 = v11;
    }
  }

  while (v5 != (double *)v6);
  return v8 != -1.79769313e308 && v7 != 1.79769313e308 && vabdd_f64(v8, v7) < 2.5;
}

void sub_1002E0D30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018301C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002E0D44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018301C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1002E0D68(uint64_t a1)
{
  return sub_100210A00((void *)(a1 + 24));
}

void *sub_1002E0D74@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x58uLL);
  __n128 result = sub_1002E0DCC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1002E0DB8(_Unwind_Exception *a1)
{
}

void *sub_1002E0DCC(void *a1, void *a2)
{
  a1[2] = 0LL;
  *a1 = off_101830218;
  a1[1] = 0LL;
  sub_100E669B8((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1002E0E04(_Unwind_Exception *a1)
{
}

void sub_1002E0E18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101830218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002E0E2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101830218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1002E0E50(uint64_t a1)
{
  return sub_100210A94((void *)(a1 + 32));
}

void sub_1002E0E5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101830268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002E0E70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101830268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1002E0E94(uint64_t a1)
{
}

__n128 sub_1002E0EBC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 256) = 0LL;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *(void *)(a2 + 56) = a2 + 64;
  *(void *)(a2 + 88) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = a2 + 88;
  *(void *)(a2 + 112) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = a2 + 112;
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 128) = a2 + 136;
  *(void *)(a2 + 184) = 0LL;
  *(void *)(a2 + 160) = 0LL;
  *(void *)(a2 + 152) = a2 + 160;
  *(void *)(a2 + 192) = 0LL;
  *(void *)(a2 + 168) = 0LL;
  *(void *)(a2 + 176) = a2 + 184;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 244) = 0u;
  *(void *)(a2 + 264) = a2 + 272;
  *(void *)(a2 + 272) = 0LL;
  *(void *)(a2 + 288) = 0LL;
  *(void *)(a2 + sub_10000AE14(v2 + 296) = 0LL;
  *(void *)(a2 + 280) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(__n128 *)(a2 + 304) = result;
  *(void *)(a2 + 320) = 0xBFF0000000000000LL;
  return result;
}

void sub_1002E0F84(uint64_t a1, uint64_t a2)
{
}

void sub_1002E1008(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002E1008(a1, *a2);
    sub_1002E1008(a1, a2[1]);
    sub_1002E1050((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_1002E1050(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

uint64_t sub_1002E1094(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 2016))
  {
    uint64_t v2 = *(void **)(a1 + 1992);
    if (v2)
    {
      *(void *)(a1 + 2000) = v2;
      operator delete(v2);
    }
  }

  if (*(_BYTE *)(a1 + 1984)) {
    sub_10000AE14(a1 + 1864);
  }
  if (*(_BYTE *)(a1 + 1056)) {
    sub_100019CEC(a1 + 1008);
  }
  if (*(_BYTE *)(a1 + 1000)) {
    sub_100019CEC(a1 + 952);
  }
  sub_1002E11F4(a1 + 856);
  unint64_t v3 = *(void **)(a1 + 824);
  if (v3)
  {
    *(void *)(a1 + 832) = v3;
    operator delete(v3);
  }

  sub_100019CEC(a1 + 456);
  sub_100019CEC(a1 + 416);
  sub_100019CEC(a1 + 376);
  sub_1002E0644(a1 + 336);
  sub_100019CEC(a1 + 296);
  __int128 v5 = (void **)(a1 + 264);
  sub_1002E067C(&v5);
  return a1;
}

uint64_t sub_1002E11AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
  }

  return a1;
}

uint64_t sub_1002E11F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      uint64_t v2 = *(void **)(a1 + 56);
      if (v2)
      {
        *(void *)(a1 + 64) = v2;
        operator delete(v2);
      }
    }
  }

  return a1;
}

uint64_t sub_1002E1244(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 3264);
  sub_1002E067C(&v3);
  sub_10000AE14(a1 + 2816);
  sub_10000AE14(a1 + 1912);
  sub_10000AE14(a1 + 1792);
  sub_10000AE14(a1 + 992);
  sub_10000AE14(a1 + 296);
  sub_10000AE14(a1 + 176);
  sub_10000AE14(a1 + 160);
  sub_10000AE14(a1 + 144);
  return a1;
}

void sub_1002E1304(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1002E1330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E13A0(a1, a2);
  sub_1002E16C4(v4 + 808, a2 + 808);
  sub_1002E2510(a1 + 3016, a2 + 3016);
  return a1;
}

void sub_1002E137C(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E13A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v23 = v4;
  int v6 = *(_DWORD *)a2;
  uint64_t v5 = a2 + 8;
  switch(v6 ^ (v6 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 0xD:
    case 0x11:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      break;
    case 3:
    case 0xC:
    case 0xE:
    case 0x17:
      *(_BYTE *)uint64_t v4 = *(_BYTE *)v5;
      break;
    case 4:
    case 9:
    case 0xB:
    case 0xF:
    case 0x13:
    case 0x16:
    case 0x19:
    case 0x1A:
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v5;
      break;
    case 5:
    case 6:
      sub_1000C6980((_BYTE *)v4, v5);
      break;
    case 7:
      sub_1002E150C(&v23, v5);
      break;
    case 8:
      sub_1002E1564(&v23, v5);
      break;
    case 0xA:
    case 0x14:
    case 0x15:
      *(void *)uint64_t v4 = *(void *)v5;
      break;
    case 0x10:
      __int128 v7 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      *(_OWORD *)(v4 + 16) = v7;
      __int128 v8 = *(_OWORD *)(v5 + 32);
      __int128 v9 = *(_OWORD *)(v5 + 48);
      __int128 v10 = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v4 + 80) = v10;
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      __int128 v11 = *(_OWORD *)(v5 + 96);
      __int128 v12 = *(_OWORD *)(v5 + 112);
      __int128 v13 = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v4 + 140) = *(_OWORD *)(v5 + 140);
      *(_OWORD *)(v4 + 112) = v12;
      *(_OWORD *)(v4 + 128) = v13;
      *(_OWORD *)(v4 + 96) = v11;
      memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
      *(void *)(a1 + 688) = *(void *)(a2 + 688);
      uint64_t v14 = *(void *)(a2 + 696);
      *(void *)(a1 + 696) = v14;
      if (v14)
      {
        __int128 v15 = (unint64_t *)(v14 + 8);
        do
          unint64_t v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }

      __int128 v17 = *(_OWORD *)(a2 + 704);
      __int128 v18 = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 736) = v18;
      *(_OWORD *)(a1 + 704) = v17;
      __int128 v19 = *(_OWORD *)(a2 + 752);
      __int128 v20 = *(_OWORD *)(a2 + 768);
      __int128 v21 = *(_OWORD *)(a2 + 784);
      *(void *)(a1 + 797) = *(void *)(a2 + 797);
      *(_OWORD *)(a1 + 768) = v20;
      *(_OWORD *)(a1 + 784) = v21;
      *(_OWORD *)(a1 + 752) = v19;
      break;
    case 0x12:
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      break;
    case 0x18:
      sub_1002E15EC(&v23, (uint64_t *)v5);
      break;
    default:
      sub_1002DDAB0();
  }

  *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

_BYTE *sub_1002E150C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  sub_1002DDEA4(*a1, a2);
  *(void *)(v3 + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a2 + 48);
  return sub_1000C6980((_BYTE *)(v3 + 56), a2 + 56);
}

void sub_1002E1550(_Unwind_Exception *a1)
{
}

_BYTE *sub_1002E1564(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *(void *)uint64_t v3 = 0LL;
  *(void *)(v3 + 8) = 0LL;
  *(void *)(v3 + 16) = 0LL;
  sub_1002DE3C8( (void *)v3,  *(void *)a2,  *(void *)(a2 + 8),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a2 + 24);
  return sub_1000C6980((_BYTE *)(v3 + 32), a2 + 32);
}

void sub_1002E15D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_BYTE *sub_1002E15EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(_BYTE *)(v3 + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t v3 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1010DD48C((_BYTE *)(v3 + 16), (void *)a2[2], a2[3]);
  }

  else
  {
    __int128 v5 = *((_OWORD *)a2 + 1);
    *(void *)(v3 + 32) = a2[4];
    *(_OWORD *)(v3 + 16) = v5;
  }

  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 5);
  __int128 v6 = *(_OWORD *)(a2 + 7);
  __int128 v7 = *(_OWORD *)(a2 + 9);
  __int128 v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v3 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(v3 + 88) = v8;
  *(_OWORD *)(v3 + 72) = v7;
  *(_OWORD *)(v3 + 56) = v6;
  __n128 result = (_BYTE *)(v3 + 120);
  __int128 v10 = *(_OWORD *)(a2 + 15);
  *(void *)(v3 + 136) = a2[17];
  *(_OWORD *)__n128 result = v10;
  return result;
}

void sub_1002E16A8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1002E16C4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  char v4 = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  __int128 v9 = (_BYTE *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_1010DD48C(v9, *(void **)(a2 + 128), *(void *)(a2 + 136));
  }

  else
  {
    __int128 v10 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)__int128 v9 = v10;
  }

  __int128 v11 = *(_OWORD *)(a2 + 152);
  __int128 v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  __int128 v13 = *(_OWORD *)(a2 + 200);
  __int128 v14 = *(_OWORD *)(a2 + 216);
  __int128 v15 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  sub_1002E1B88( (void *)(a1 + 264),  *(uint64_t **)(a2 + 264),  *(uint64_t **)(a2 + 272),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 272) - *(void *)(a2 + 264)) >> 3));
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  sub_1002DFAAC(a1 + 296, a2 + 296);
  sub_1002E1C0C(a1 + 336, a2 + 336);
  sub_1002E1F70(a1 + 376, a2 + 376);
  sub_1002DFAAC(a1 + 416, a2 + 416);
  sub_1002DFAAC(a1 + 456, a2 + 456);
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x120uLL);
  sub_10004B7D4(a1 + 784, (__int128 *)(a2 + 784));
  *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  *(void *)(a1 + 824) = 0LL;
  *(void *)(a1 + 840) = 0LL;
  *(void *)(a1 + 832) = 0LL;
  sub_1002E2234( (void *)(a1 + 824),  *(const void **)(a2 + 824),  *(void *)(a2 + 832),  0xD37A6F4DE9BD37A7LL * ((uint64_t)(*(void *)(a2 + 832) - *(void *)(a2 + 824)) >> 3));
  *(_WORD *)(a1 + 848) = *(_WORD *)(a2 + 848);
  sub_1002E22AC((_BYTE *)(a1 + 856), a2 + 856);
  sub_1002E2300(a1 + 952, a2 + 952);
  sub_1002E2368(a1 + 1008, a2 + 1008);
  __int128 v16 = *(_OWORD *)(a2 + 1064);
  __int128 v17 = *(_OWORD *)(a2 + 1080);
  __int128 v18 = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = v18;
  *(_OWORD *)(a1 + 1064) = v16;
  *(_OWORD *)(a1 + 1080) = v17;
  __int128 v19 = *(_OWORD *)(a2 + 1128);
  __int128 v20 = *(_OWORD *)(a2 + 1144);
  __int128 v21 = *(_OWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v20;
  *(_OWORD *)(a1 + 1160) = v21;
  *(_OWORD *)(a1 + 1128) = v19;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_BYTE *)(a1 + 1984) = 0;
  if (*(_BYTE *)(a2 + 1984))
  {
    __int128 v22 = *(_OWORD *)(a2 + 1200);
    *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
    *(_OWORD *)(a1 + 1200) = v22;
    __int128 v23 = *(_OWORD *)(a2 + 1216);
    __int128 v24 = *(_OWORD *)(a2 + 1232);
    __int128 v25 = *(_OWORD *)(a2 + 1264);
    *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
    *(_OWORD *)(a1 + 1264) = v25;
    *(_OWORD *)(a1 + 1216) = v23;
    *(_OWORD *)(a1 + 1232) = v24;
    __int128 v26 = *(_OWORD *)(a2 + 1280);
    __int128 v27 = *(_OWORD *)(a2 + 1296);
    __int128 v28 = *(_OWORD *)(a2 + 1312);
    *(_OWORD *)(a1 + 1324) = *(_OWORD *)(a2 + 1324);
    *(_OWORD *)(a1 + 1sub_10000AE14(v2 + 296) = v27;
    *(_OWORD *)(a1 + 1312) = v28;
    *(_OWORD *)(a1 + 1280) = v26;
    memcpy((void *)(a1 + 1344), (const void *)(a2 + 1344), 0x201uLL);
    *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
    uint64_t v29 = *(void *)(a2 + 1872);
    *(void *)(a1 + 1872) = v29;
    if (v29)
    {
      __int128 v30 = (unint64_t *)(v29 + 8);
      do
        unint64_t v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }

    __int128 v32 = *(_OWORD *)(a2 + 1880);
    __int128 v33 = *(_OWORD *)(a2 + 1912);
    *(_OWORD *)(a1 + 1896) = *(_OWORD *)(a2 + 1896);
    *(_OWORD *)(a1 + 1912) = v33;
    *(_OWORD *)(a1 + 1880) = v32;
    __int128 v34 = *(_OWORD *)(a2 + 1928);
    __int128 v35 = *(_OWORD *)(a2 + 1944);
    __int128 v36 = *(_OWORD *)(a2 + 1960);
    *(void *)(a1 + 1973) = *(void *)(a2 + 1973);
    *(_OWORD *)(a1 + 1944) = v35;
    *(_OWORD *)(a1 + 1960) = v36;
    *(_OWORD *)(a1 + 1928) = v34;
    *(_BYTE *)(a1 + 1984) = 1;
  }

  sub_1002E23D0(a1 + 1992, a2 + 1992);
  sub_1002E2474((_BYTE *)(a1 + 2024), a2 + 2024);
  sub_1002E24C8(a1 + 2176, (__int128 *)(a2 + 2176));
  return a1;
}

void sub_1002E1A3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_1002E1B58()
{
}

void sub_1002E1B60()
{
}

void sub_1002E1B68()
{
}

void sub_1002E1B70()
{
}

void sub_1002E1B78()
{
}

void sub_1002E1B80()
{
}

void *sub_1002E1B88(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    sub_100006E1C(result, a4);
    __n128 result = sub_1002DE8B4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_1002E1BEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1002E067C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1C0C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1002E1C80(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1002E1C68(_Unwind_Exception *a1)
{
}

void *sub_1002E1C80(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v7 = sub_1005B46E8((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }

    __int128 v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      __int128 v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_1007EC0B0(v13 + 2, a2)) {
              return v13;
            }
          }

          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }

            else
            {
              v14 &= v9 - 1;
            }

            if (v14 != v3) {
              break;
            }
          }

          __int128 v13 = (void *)*v13;
        }

        while (v13);
      }
    }
  }

  sub_1002E1EE8(a1, v8, a3, (uint64_t)&v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  __int128 v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *v24 = *v21;
    *__int128 v21 = v24;
  }

  else
  {
    void *v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v24)
    {
      unint64_t v22 = *(void *)(*v24 + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }

      else
      {
        v22 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }

  __int128 v13 = v24;
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1002E1EC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100022988((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E1EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  uint64_t result = sub_1002DF2CC((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1002E1F54(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100022988(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1F70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1002E1FE4(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1002E1FCC(_Unwind_Exception *a1)
{
}

void *sub_1002E1FE4(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v7 = sub_1005B46E8((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }

    __int128 v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      __int128 v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_1007EC0B0(v13 + 2, a2)) {
              return v13;
            }
          }

          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }

            else
            {
              v14 &= v9 - 1;
            }

            if (v14 != v3) {
              break;
            }
          }

          __int128 v13 = (void *)*v13;
        }

        while (v13);
      }
    }
  }

  __int128 v13 = operator new(0x78uLL);
  *__int128 v13 = 0LL;
  v13[1] = v8;
  __int128 v15 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v13 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v13 + 6) = v15;
  v13[14] = *(void *)(a3 + 96);
  __int128 v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v13 + 2) = v16;
  __int128 v17 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v13 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v13 + 4) = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1LL;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100019E10(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v24 = *(void *)a1;
  __int128 v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *__int128 v13 = *v25;
LABEL_38:
    *__int128 v25 = v13;
    goto LABEL_39;
  }

  *__int128 v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v26 = *(void *)(*v13 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }

    else
    {
      v26 &= v9 - 1;
    }

    __int128 v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }

void sub_1002E2220(_Unwind_Exception *a1)
{
}

void *sub_1002E2234(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    uint64_t result = sub_1002DF6A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1002E2290(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

_BYTE *sub_1002E22AC(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    sub_1002DF8F4((uint64_t)a1, (__int128 *)a2);
    a1[88] = 1;
  }

  return a1;
}

void sub_1002E22EC(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E2300(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    sub_1002DFAAC(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }

  return a1;
}

void sub_1002E234C(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 48)) {
    sub_100019CEC(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E2368(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    sub_1002DFAAC(a1, a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }

  return a1;
}

void sub_1002E23B4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 48)) {
    sub_100019CEC(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E23D0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_1002E2418((void *)a1, a2);
  return a1;
}

void sub_1002E23FC(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_101233EA0(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002E2418(void *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    uint64_t v2 = result;
    *uint64_t result = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    uint64_t result = sub_1002E0204( result,  *(const void **)a2,  *(void *)(a2 + 8),  0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    *((_BYTE *)v2 + 24) = 1;
  }

  return result;
}

_BYTE *sub_1002E2474(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[144] = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    sub_1002E0378((uint64_t)a1, (uint64_t *)a2);
    a1[144] = 1;
  }

  return a1;
}

void sub_1002E24B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E24C8(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_100036D54((_OWORD *)a1, a2);
  return a1;
}

void sub_1002E24F4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_101233EB8((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E2510(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  if (v10)
  {
    unint64_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  uint64_t v13 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v13;
  if (v13)
  {
    unint64_t v14 = (unint64_t *)(v13 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  if (v16)
  {
    __int128 v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  sub_1000C6980((_BYTE *)(a1 + 192), a2 + 192);
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
  uint64_t v19 = *(void *)(a2 + 304);
  *(void *)(a1 + sub_10000AE14(v2 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v19;
  if (v19)
  {
    BOOL v20 = (unint64_t *)(v19 + 8);
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __int128 v22 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v22;
  __int128 v23 = *(_OWORD *)(a2 + 344);
  __int128 v24 = *(_OWORD *)(a2 + 360);
  __int128 v25 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v25;
  *(_OWORD *)(a1 + 344) = v23;
  *(_OWORD *)(a1 + 360) = v24;
  __int128 v26 = *(_OWORD *)(a2 + 408);
  __int128 v27 = *(_OWORD *)(a2 + 424);
  __int128 v28 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 452) = *(_OWORD *)(a2 + 452);
  *(_OWORD *)(a1 + 424) = v27;
  *(_OWORD *)(a1 + 440) = v28;
  *(_OWORD *)(a1 + 408) = v26;
  memcpy((void *)(a1 + 472), (const void *)(a2 + 472), 0x201uLL);
  *(void *)(a1 + sub_10000AE14(v2 + 992) = *(void *)(a2 + 992);
  uint64_t v29 = *(void *)(a2 + 1000);
  *(void *)(a1 + 1000) = v29;
  if (v29)
  {
    __int128 v30 = (unint64_t *)(v29 + 8);
    do
      unint64_t v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }

  __int128 v32 = *(_OWORD *)(a2 + 1008);
  __int128 v33 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1008) = v32;
  *(_OWORD *)(a1 + 1024) = v33;
  __int128 v34 = *(_OWORD *)(a2 + 1056);
  __int128 v35 = *(_OWORD *)(a2 + 1072);
  __int128 v36 = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1101) = *(void *)(a2 + 1101);
  *(_OWORD *)(a1 + 1088) = v36;
  *(_OWORD *)(a1 + 1072) = v35;
  *(_OWORD *)(a1 + 1056) = v34;
  __int128 v37 = *(_OWORD *)(a2 + 1192);
  __int128 v39 = *(_OWORD *)(a2 + 1144);
  __int128 v38 = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v37;
  *(_OWORD *)(a1 + 1144) = v39;
  *(_OWORD *)(a1 + 1160) = v38;
  __int128 v41 = *(_OWORD *)(a2 + 1224);
  __int128 v40 = *(_OWORD *)(a2 + 1240);
  __int128 v42 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1252) = *(_OWORD *)(a2 + 1252);
  *(_OWORD *)(a1 + 1224) = v41;
  *(_OWORD *)(a1 + 1240) = v40;
  *(_OWORD *)(a1 + 1208) = v42;
  __int128 v43 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v43;
  memcpy((void *)(a1 + 1272), (const void *)(a2 + 1272), 0x201uLL);
  *(void *)(a1 + sub_10000AE14(v2 + 1792) = *(void *)(a2 + 1792);
  uint64_t v44 = *(void *)(a2 + 1800);
  *(void *)(a1 + 1800) = v44;
  if (v44)
  {
    __int128 v45 = (unint64_t *)(v44 + 8);
    do
      unint64_t v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }

  __int128 v47 = *(_OWORD *)(a2 + 1808);
  __int128 v48 = *(_OWORD *)(a2 + 1824);
  *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a2 + 1840);
  *(_OWORD *)(a1 + 1824) = v48;
  *(_OWORD *)(a1 + 1808) = v47;
  __int128 v49 = *(_OWORD *)(a2 + 1856);
  __int128 v50 = *(_OWORD *)(a2 + 1872);
  __int128 v51 = *(_OWORD *)(a2 + 1888);
  *(void *)(a1 + 1901) = *(void *)(a2 + 1901);
  *(_OWORD *)(a1 + 1888) = v51;
  *(_OWORD *)(a1 + 1872) = v50;
  *(_OWORD *)(a1 + 1856) = v49;
  *(void *)(a1 + 1912) = *(void *)(a2 + 1912);
  uint64_t v52 = *(void *)(a2 + 1920);
  *(void *)(a1 + 1920) = v52;
  if (v52)
  {
    __int128 v53 = (unint64_t *)(v52 + 8);
    do
      unint64_t v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }

  memcpy((void *)(a1 + 1928), (const void *)(a2 + 1928), 0x170uLL);
  memcpy((void *)(a1 + 2296), (const void *)(a2 + 2296), 0x201uLL);
  *(void *)(a1 + sub_10000AE14(v2 + 2816) = *(void *)(a2 + 2816);
  uint64_t v55 = *(void *)(a2 + 2824);
  *(void *)(a1 + 2824) = v55;
  if (v55)
  {
    __int128 v56 = (unint64_t *)(v55 + 8);
    do
      unint64_t v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }

  __int128 v58 = *(_OWORD *)(a2 + 2832);
  __int128 v59 = *(_OWORD *)(a2 + 2848);
  *(_OWORD *)(a1 + 2864) = *(_OWORD *)(a2 + 2864);
  *(_OWORD *)(a1 + 2848) = v59;
  *(_OWORD *)(a1 + 2832) = v58;
  __int128 v60 = *(_OWORD *)(a2 + 2880);
  __int128 v61 = *(_OWORD *)(a2 + 2896);
  __int128 v62 = *(_OWORD *)(a2 + 2912);
  *(void *)(a1 + 2925) = *(void *)(a2 + 2925);
  *(_OWORD *)(a1 + 2912) = v62;
  *(_OWORD *)(a1 + 2896) = v61;
  *(_OWORD *)(a1 + 2880) = v60;
  uint64_t v63 = *(void *)(a2 + 2936);
  *(_BYTE *)(a1 + 2944) = *(_BYTE *)(a2 + 2944);
  *(void *)(a1 + 2936) = v63;
  uint64_t v64 = *(void *)(a2 + 2952);
  *(_BYTE *)(a1 + 2960) = *(_BYTE *)(a2 + 2960);
  *(void *)(a1 + 2952) = v64;
  if (*(char *)(a2 + 2991) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 2968), *(void **)(a2 + 2968), *(void *)(a2 + 2976));
  }

  else
  {
    __int128 v65 = *(_OWORD *)(a2 + 2968);
    *(void *)(a1 + 2984) = *(void *)(a2 + 2984);
    *(_OWORD *)(a1 + 2968) = v65;
  }

  *(_OWORD *)(a1 + 2sub_10000AE14(v2 + 992) = *(_OWORD *)(a2 + 2992);
  __int128 v66 = *(_OWORD *)(a2 + 3008);
  __int128 v67 = *(_OWORD *)(a2 + 3024);
  __int128 v68 = *(_OWORD *)(a2 + 3040);
  *(_OWORD *)(a1 + 3052) = *(_OWORD *)(a2 + 3052);
  *(_OWORD *)(a1 + 3040) = v68;
  *(_OWORD *)(a1 + 3024) = v67;
  *(_OWORD *)(a1 + 3008) = v66;
  __int128 v69 = (_BYTE *)(a1 + 3072);
  if (*(char *)(a2 + 3095) < 0)
  {
    sub_1010DD48C(v69, *(void **)(a2 + 3072), *(void *)(a2 + 3080));
  }

  else
  {
    __int128 v70 = *(_OWORD *)(a2 + 3072);
    *(void *)(a1 + 3088) = *(void *)(a2 + 3088);
    *(_OWORD *)__int128 v69 = v70;
  }

  __int128 v71 = *(_OWORD *)(a2 + 3096);
  __int128 v72 = *(_OWORD *)(a2 + 3128);
  *(_OWORD *)(a1 + 3112) = *(_OWORD *)(a2 + 3112);
  *(_OWORD *)(a1 + 3128) = v72;
  *(_OWORD *)(a1 + 3096) = v71;
  __int128 v73 = *(_OWORD *)(a2 + 3144);
  __int128 v74 = *(_OWORD *)(a2 + 3160);
  __int128 v75 = *(_OWORD *)(a2 + 3192);
  *(_OWORD *)(a1 + 3176) = *(_OWORD *)(a2 + 3176);
  *(_OWORD *)(a1 + 3192) = v75;
  *(_OWORD *)(a1 + 3144) = v73;
  *(_OWORD *)(a1 + 3160) = v74;
  __int128 v76 = *(_OWORD *)(a2 + 3208);
  __int128 v77 = *(_OWORD *)(a2 + 3224);
  __int128 v78 = *(_OWORD *)(a2 + 3240);
  *(_BYTE *)(a1 + 3256) = *(_BYTE *)(a2 + 3256);
  *(_OWORD *)(a1 + 3224) = v77;
  *(_OWORD *)(a1 + 3240) = v78;
  *(_OWORD *)(a1 + 3208) = v76;
  *(void *)(a1 + 3280) = 0LL;
  *(_OWORD *)(a1 + 3264) = 0u;
  sub_1002E1B88( (void *)(a1 + 3264),  *(uint64_t **)(a2 + 3264),  *(uint64_t **)(a2 + 3272),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 3272) - *(void *)(a2 + 3264)) >> 3));
  sub_1002DFAAC(a1 + 3288, a2 + 3288);
  __int128 v79 = *(_OWORD *)(a2 + 3328);
  *(void *)(a1 + 3344) = *(void *)(a2 + 3344);
  *(_OWORD *)(a1 + 3328) = v79;
  __int128 v80 = *(_OWORD *)(a2 + 3352);
  __int128 v81 = *(_OWORD *)(a2 + 3368);
  __int128 v82 = *(_OWORD *)(a2 + 3384);
  *(void *)(a1 + 3399) = *(void *)(a2 + 3399);
  *(_OWORD *)(a1 + 3368) = v81;
  *(_OWORD *)(a1 + 3384) = v82;
  *(_OWORD *)(a1 + 3352) = v80;
  *(void *)(a1 + 3408) = *(void *)(a2 + 3408);
  uint64_t v83 = *(void *)(a2 + 3416);
  *(void *)(a1 + 3416) = v83;
  if (v83)
  {
    __int128 v84 = (unint64_t *)(v83 + 8);
    do
      unint64_t v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }

  __int128 v86 = *(_OWORD *)(a2 + 3424);
  *(_OWORD *)(a1 + 3433) = *(_OWORD *)(a2 + 3433);
  *(_OWORD *)(a1 + 3424) = v86;
  return a1;
}

void sub_1002E29D8(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 280))
  {
  }

  sub_10000AE14(v4);
  sub_10000AE14(v3);
  sub_10000AE14(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002E2A90(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  __int128 v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1002E2B24((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000085FC(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

_BYTE *sub_1002E2B24@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  __int128 v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  __int128 v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }

  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002E2BAC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100022988(v3, v2);
  _Unwind_Resume(a1);
}

_OWORD *sub_1002E2BC8(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  __int128 v6 = (void **)sub_1000227E8((uint64_t)a1, &v12, a2);
  __int128 v7 = *v6;
  if (!*v6)
  {
    __int128 v8 = (uint64_t **)v6;
    __int128 v7 = operator new(0x40uLL);
    __int128 v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0LL;
    v9[2] = 0LL;
    *__int128 v9 = 0LL;
    *((_DWORD *)v7 + 14) = 0;
    sub_1000085FC(a1, v12, v8, (uint64_t *)v7);
  }

  return v7;
}

void sub_1002E2C60(int *a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x1A:
    case 0x1C:
      sub_1002D9D6C(a3, (uint64_t)a2);
      break;
    case 4:
      sub_1002DC19C((uint64_t)a2, v3, (uint64_t)a3);
      break;
    case 7:
      sub_1002DA648((uint64_t)a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 8:
      sub_1002DB20C((uint64_t)a2, a3);
      break;
    case 0x13:
      sub_1002DBEF4(a2, v3, (uint64_t)a3);
      break;
    case 0x14:
      sub_1002DB104((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x18:
      sub_1002DB018(a2, (uint64_t)a3);
      break;
    case 0x19:
      sub_1002DC28C((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x1B:
      sub_1002D9E54((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_1002DB9E8((uint64_t)a2, a3);
      break;
    default:
      sub_1002DDAB0();
  }

void sub_1002E2D1C(void **a1)
{
}

void sub_1002E2D24()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1002E2DC0(_Unwind_Exception *a1)
{
}

void sub_1002E2DD8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1002E2E64(_Unwind_Exception *a1)
{
}

void sub_1002E2F20(id a1)
{
  qword_101994130 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLContextMetricsServiceSilo");
}

id sub_1002E32D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWifiNotification:a2 data:a3];
}

id sub_1002E32E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStatusNotification:a2 data:a3];
}

id sub_1002E32F0(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  __int128 v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  __int128 v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  __int128 v7 = a3[3];
  v11[2] = a3[2];
  v11[3] = v7;
  __int128 v8 = a3[5];
  v11[4] = a3[4];
  v11[5] = v8;
  __int128 v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return [a4 onMotionStateNotification:v4 data:v11];
}

id sub_1002E37E0(uint64_t a1, uint64_t a2, double a3)
{
  if (a2) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = (int)(a3 * 100.0);
  }
  return [*(id *)(*(void *)(a1 + 32) + 24) visitEvent:*(void *)(a1 + 40) withFamiliarityIndex:v3];
}

void sub_1002E3A7C(id a1, NSArray *a2, NSError *a3)
{
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (a3)
  {
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_101830370);
    }
    __int128 v5 = (os_log_s *)qword_1019349A8;
    if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      int v28 = 0;
      __int16 v29 = 2082;
      __int128 v30 = "";
      __int16 v31 = 1026;
      LODWORD(v32) = -[NSError code](a3, "code");
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#cms mode query motion, error:%{public}d}",  buf,  0x18u);
    }
  }

  else
  {
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_101830370);
    }
    __int128 v7 = &OBJC_METACLASS___CLPrivacyManager.vtable;
    __int128 v8 = (os_log_s *)qword_1019349A8;
    if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      int v28 = 0;
      __int16 v29 = 2082;
      __int128 v30 = "";
      __int16 v31 = 1026;
      LODWORD(v32) = -[NSArray count](a2, "count");
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#cms mode query motion, count:%{public}d}",  buf,  0x18u);
    }

    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v9 = -[NSArray countByEnumeratingWithState:objects:count:]( a2,  "countByEnumeratingWithState:objects:count:",  &v23,  v39,  16LL);
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v24;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(a2);
          }
          uint64_t v13 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
          unint64_t v14 = (os_log_s *)v7[309];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            id v22 = [v13 startDate];
            id v15 = [v13 endDate];
            uint64_t v16 = v11;
            __int128 v17 = v7;
            unint64_t v18 = p_vtable;
            uint64_t v19 = a2;
            unsigned int v20 = [v13 automotive];
            unsigned int v21 = [v13 confidence];
            *(_DWORD *)buf = 68290050;
            int v28 = 0;
            __int16 v29 = 2082;
            __int128 v30 = "";
            __int16 v31 = 2114;
            id v32 = v22;
            __int16 v33 = 2114;
            id v34 = v15;
            __int16 v35 = 1026;
            unsigned int v36 = v20;
            a2 = v19;
            p_vtable = v18;
            __int128 v7 = v17;
            uint64_t v11 = v16;
            __int16 v37 = 1026;
            unsigned int v38 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#cms mode query motion, start:%{public, location:escape_only}@, end:%{pub lic, location:escape_only}@, automotive:%{public}hhd, confidence:%{public}d}",  buf,  0x32u);
          }
        }

        id v10 = -[NSArray countByEnumeratingWithState:objects:count:]( a2,  "countByEnumeratingWithState:objects:count:",  &v23,  v39,  16LL);
      }

      while (v10);
    }
  }

void sub_1002E3DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002E3E08;
  v4[3] = &unk_10181A328;
  v4[4] = a3;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1002E3E08(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_101830390);
    }
    uint64_t v2 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 2114;
      id v35 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#cms mode query visit, error:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_101830390);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934848;
    if (os_signpost_enabled((os_log_t)qword_101934848))
    {
      __int128 v5 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 2114;
      id v35 = v5;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#cms mode query visit",  "{msg%{public}.0s:#cms mode query visit, error:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

  else
  {
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_101830370);
    }
    __int128 v7 = &OBJC_METACLASS___CLPrivacyManager.vtable;
    __int128 v8 = (os_log_s *)qword_1019349A8;
    if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = [*(id *)(a1 + 40) count];
      *(_DWORD *)buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 1026;
      LODWORD(v35) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#cms mode query visit, count:%{public}d}",  buf,  0x18u);
    }

    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id obj = *(id *)(a1 + 40);
    id v10 = [obj countByEnumeratingWithState:&v26 objects:v42 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v27;
      uint64_t v13 = &CMOnBodyStatusManagerManufacturer_ptr;
      do
      {
        for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(obj);
          }
          id v15 =  [objc_alloc((Class)v13[330]) initWithVisit:*(void *)(*((void *)&v26 + 1) + 8 * (void)i)];
          uint64_t v16 = (os_log_s *)v7[309];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            id v25 = [v15 arrivalDate];
            id v17 = [v15 departureDate];
            uint64_t v18 = v12;
            uint64_t v19 = v13;
            unsigned int v20 = v7;
            unsigned int v21 = p_vtable;
            id v22 = [v15 detectionDate];
            unsigned int v23 = [v15 hasDepartureDate];
            *(_DWORD *)buf = 68290050;
            int v31 = 0;
            __int16 v32 = 2082;
            __int16 v33 = "";
            __int16 v34 = 2114;
            id v35 = v25;
            __int16 v36 = 2114;
            id v37 = v17;
            __int16 v38 = 2114;
            id v39 = v22;
            p_vtable = v21;
            __int128 v7 = v20;
            uint64_t v13 = v19;
            uint64_t v12 = v18;
            __int16 v40 = 1026;
            int v41 = v23 ^ 1;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#cms mode query visit, arrive:%{public, location:escape_only}@, end:%{pub lic, location:escape_only}@, detect:%{public, location:escape_only}@, entry:%{public}hhd}",  buf,  0x36u);
          }
        }

        id v11 = [obj countByEnumeratingWithState:&v26 objects:v42 count:16];
      }

      while (v11);
    }
  }

void sub_1002E43E4(id a1, NSArray *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_101830370);
    }
    uint64_t v4 = qword_1019349A8;
    if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 1026;
      LODWORD(v17) = -[NSError code](a3, "code");
      __int128 v5 = "{msg%{public}.0s:#cms mode init motion, error:%{public}d}";
LABEL_6:
      __int128 v6 = (os_log_s *)v4;
      uint32_t v7 = 24;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v12, v7);
    }
  }

  else
  {
    unsigned int v9 = -[NSArray count](a2, "count");
    if (v9)
    {
      id v10 = -[NSArray lastObject](a2, "lastObject");
      if (qword_1019349A0 != -1) {
        dispatch_once(&qword_1019349A0, &stru_101830370);
      }
      uint64_t v11 = qword_1019349A8;
      if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 68290306;
        int v13 = 0;
        __int16 v14 = 2082;
        id v15 = "";
        __int16 v16 = 2114;
        id v17 = [v10 startDate];
        __int16 v18 = 2114;
        id v19 = [v10 endDate];
        __int16 v20 = 1026;
        unsigned int v21 = [v10 automotive];
        __int16 v22 = 1026;
        unsigned int v23 = [v10 confidence];
        __int16 v24 = 1026;
        unsigned int v25 = v9;
        __int128 v5 = "{msg%{public}.0s:#cms mode init motion (skip), start:%{public, location:escape_only}@, end:"
             "%{public, location:escape_only}@, automotive:%{public}hhd, confidence:%{public}d, count:%{public}d}";
        __int128 v6 = (os_log_s *)v11;
        uint32_t v7 = 56;
        goto LABEL_12;
      }
    }

    else
    {
      if (qword_1019349A0 != -1) {
        dispatch_once(&qword_1019349A0, &stru_101830370);
      }
      uint64_t v4 = qword_1019349A8;
      if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        id v15 = "";
        __int16 v16 = 1026;
        LODWORD(v17) = 0;
        __int128 v5 = "{msg%{public}.0s:#cms mode init motion, count:%{public}d}";
        goto LABEL_6;
      }
    }
  }

void sub_1002E466C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(dispatch_queue_s **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002E46D0;
  block[3] = &unk_10181A2D8;
  block[4] = a3;
  block[5] = a2;
  block[6] = v3;
  dispatch_async(v4, block);
}

void sub_1002E46D0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_101830390);
    }
    uint64_t v2 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2114;
      v17[0] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#cms mode init visit, error:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_101830390);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934848;
    if (os_signpost_enabled((os_log_t)qword_101934848))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2114;
      v17[0] = v5;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#cms mode init visit",  "{msg%{public}.0s:#cms mode init visit, error:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

  else
  {
    __int128 v6 =  -[CLVisit initWithVisit:]( [CLVisit alloc],  "initWithVisit:",  [*(id *)(a1 + 40) firstObject]);
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_101830370);
    }
    uint32_t v7 = (os_log_s *)qword_1019349A8;
    if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 1026;
      LODWORD(v17[0]) = -[CLVisit hasDepartureDate](v6, "hasDepartureDate") ^ 1;
      WORD2(v17[0]) = 2113;
      *(void *)((char *)v17 + 6) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#cms mode init visit, entry:%{public}hhd, visit:%{private, location:escape_only}@}",  buf,  0x22u);
    }

    unsigned int v8 = -[CLVisit hasDepartureDate](v6, "hasDepartureDate");
    uint64_t v9 = *(void *)(a1 + 48);
    if (v8)
    {
      [*(id *)(v9 + 24) visitEvent:v6 withFamiliarityIndex:0];
    }

    else
    {
      id v10 = *(void **)(v9 + 64);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_1002E49B4;
      v11[3] = &unk_1018302F0;
      v11[4] = v9;
      v11[5] = v6;
      [v10 getFamiliarityIndexForVisit:v6 withReply:v11];
    }
  }

id sub_1002E49B4(uint64_t a1, uint64_t a2, double a3)
{
  if (a2) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = (int)(a3 * 100.0);
  }
  return [*(id *)(*(void *)(a1 + 32) + 24) visitEvent:*(void *)(a1 + 40) withFamiliarityIndex:v3];
}

void sub_1002E4A8C(id a1)
{
  qword_1019349A8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_1002E4AB8(id a1)
{
  qword_101934848 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

uint64_t sub_1002E4AE4(uint64_t result)
{
  byte_101994140 = result;
  return result;
}

uint64_t sub_1002E4AF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
}

uint64_t sub_1002E4AFC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
}

uint64_t sub_1002E4B08(uint64_t a1, const char *a2, int a3, char a4)
{
  *(void *)a1 = off_1018303C0;
  unsigned int v8 = operator new(0x70uLL);
  *(void *)(a1 + 8) = v8;
  v8[18] = 0;
  *((void *)v8 + 10) = 0LL;
  *((_BYTE *)v8 + 88) = a4;
  *((void *)v8 + 12) = 0LL;
  if (a2) {
    uint64_t v9 = strdup(a2);
  }
  else {
    uint64_t v9 = 0LL;
  }
  *((void *)v8 + 13) = v9;
  *((void *)v8 + 8) = 0LL;
  if ((byte_101994160 & 1) == 0)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_101994144);
    qword_101994150 = 1000000000 * (unint64_t)*(unsigned int *)algn_101994148 / dword_101994144;
    qword_101994158 = qword_101994150;
    byte_101994160 = 1;
  }

  pthread_mutexattr_init(&v12);
  if (a3) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  pthread_mutexattr_settype(&v12, v10);
  pthread_mutex_init(*(pthread_mutex_t **)(a1 + 8), &v12);
  pthread_mutexattr_destroy(&v12);
  return a1;
}

uint64_t sub_1002E4C40(uint64_t a1)
{
  *(void *)a1 = off_1018303C0;
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(v2 + 104);
  if (v3)
  {
    free(v3);
    uint64_t v2 = *(void *)(a1 + 8);
    *(void *)(v2 + 104) = 0LL;
  }

  [*(id *)(v2 + 64) assertInside];

  uint64_t v4 = *(void **)(a1 + 8);
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1002E4CB4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002E4C40(a1);
  operator delete(v1);
}

pthread_t sub_1002E4CC8(uint64_t a1)
{
  uint64_t v3 = (uint64_t)&unk_101994000;
  if (byte_101994140) {
    uint64_t v4 = mach_absolute_time();
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)))
  {
    pthread_t result = (pthread_t)sub_1012342E8();
    goto LABEL_26;
  }

  if (byte_101994140)
  {
    uint64_t v5 = mach_absolute_time();
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(v6 + 96) = v5;
    uint64_t v3 = v5 - v4;
    if (*(_BYTE *)(v6 + 88) && v3 > qword_101994150)
    {
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      if (qword_101934A70 == -1) {
        goto LABEL_12;
      }
      goto LABEL_28;
    }
  }

  while (1)
  {
    pthread_t result = pthread_self();
    uint64_t v13 = *(void *)(a1 + 8);
    int v14 = *(_DWORD *)(v13 + 72);
    if (v14 < 0)
    {
LABEL_26:
      pthread_t result = (pthread_t)sub_101233EC8(result);
      goto LABEL_27;
    }

    id v15 = *(_opaque_pthread_t **)(v13 + 80);
    if (v14)
    {
      if (v15 == result) {
        break;
      }
      pthread_t result = (pthread_t)sub_101234188();
    }

    if (!v15) {
      break;
    }
LABEL_27:
    sub_101234028(result);
LABEL_28:
    dispatch_once(&qword_101934A70, &stru_101830458);
LABEL_12:
    unsigned int v8 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(const char **)(*(void *)(a1 + 8) + 104LL);
      *(_DWORD *)buf = 134218498;
      double v26 = (double)(v3 * dword_101994144 / *(unsigned int *)algn_101994148) / 1000000000.0;
      if (!v9) {
        uint64_t v9 = "<unnamed>";
      }
      __int16 v27 = 2080;
      __int128 v28 = v9;
      __int16 v29 = 2048;
      uint64_t v30 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      __int16 v16 = *(const char **)(*(void *)(a1 + 8) + 104LL);
      int v19 = 134218498;
      double v20 = (double)(v3 * dword_101994144 / *(unsigned int *)algn_101994148) / 1000000000.0;
      if (!v16) {
        __int16 v16 = "<unnamed>";
      }
      __int16 v21 = 2080;
      __int16 v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = a1;
      LODWORD(v18) = 32;
      uint64_t v3 = (uint64_t)buf;
      id v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)",  COERCE_DOUBLE(&v19),  v18);
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void BasicMutex::lock()", "%s\n", v17);
    }

    uint64_t v10 = sub_1007B3C30();
    uint64_t v11 = *(FILE **)(v10 + 192);
    if (v11) {
      sub_1007B44FC(v10, 0, v11);
    }
  }

  *(_DWORD *)(v13 + 72) = v14 + 1;
  *(void *)(v13 + 80) = result;
  return result;
}

uint64_t sub_1002E4FD0(uint64_t a1)
{
  if (byte_101994140)
  {
    uint64_t v4 = mach_absolute_time();
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v1 = v4 - *(void *)(v5 + 96);
    if (*(_BYTE *)(v5 + 88) && v1 > qword_101994158)
    {
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      if (qword_101934A70 == -1) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
  }

  while (1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    int v12 = *(_DWORD *)(v11 + 72);
    if (v12 > 0) {
      break;
    }
    uint64_t result = sub_101234448();
LABEL_21:
    sub_1012345A8(result);
LABEL_22:
    dispatch_once(&qword_101934A70, &stru_101830458);
LABEL_8:
    uint32_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = *(const char **)(*(void *)(a1 + 8) + 104LL);
      if (!v8) {
        unsigned int v8 = "<unnamed>";
      }
      *(_DWORD *)buf = 136315650;
      unsigned int v25 = v8;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2048;
      double v29 = (double)(v1 * dword_101994144 / *(unsigned int *)algn_101994148) / 1000000000.0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning TIMEOUT: Held lock '%s' (%p) for %f seconds",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      id v15 = *(const char **)(*(void *)(a1 + 8) + 104LL);
      if (!v15) {
        id v15 = "<unnamed>";
      }
      int v18 = 136315650;
      int v19 = v15;
      __int16 v20 = 2048;
      uint64_t v21 = a1;
      __int16 v22 = 2048;
      double v23 = (double)(v1 * dword_101994144 / *(unsigned int *)algn_101994148) / 1000000000.0;
      LODWORD(v17) = 32;
      uint64_t v1 = (uint64_t)buf;
      __int16 v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning TIMEOUT: Held lock '%s' (%p) for %f seconds",  (const char *)&v18,  v17);
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void BasicMutex::unlock()", "%s\n", v16);
    }

    uint64_t v9 = sub_1007B3C30();
    uint64_t v10 = *(FILE **)(v9 + 192);
    if (v10) {
      sub_1007B44FC(v9, 0, v10);
    }
  }

  int v13 = v12 - 1;
  *(_DWORD *)(v11 + 72) = v13;
  if (!v13) {
    *(void *)(v11 + 80) = 0LL;
  }
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)v11);
  if ((_DWORD)result) {
    goto LABEL_21;
  }
  return result;
}

BOOL sub_1002E529C(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 8) + 72LL) == a2;
}

BOOL sub_1002E52D8(uint64_t a1)
{
  pthread_t v2 = *(pthread_t *)(*(void *)(a1 + 8) + 80LL);
  return v2 == pthread_self();
}

BOOL sub_1002E5314(uint64_t a1)
{
  pthread_t v2 = *(pthread_t *)(*(void *)(a1 + 8) + 80LL);
  return v2 != pthread_self();
}

uint64_t sub_1002E5350(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

pthread_cond_t **sub_1002E5358(pthread_cond_t **a1)
{
  pthread_t v2 = (pthread_cond_t *)malloc(0x30uLL);
  *a1 = v2;
  pthread_cond_init(v2, 0LL);
  return a1;
}

pthread_cond_t **sub_1002E538C(pthread_cond_t **a1)
{
  return a1;
}

void sub_1002E53C4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1002E53F0(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 6152) = 0;
  *(void *)(a1 + 12304) = 0LL;
  *(void *)(a1 + 12344) = 0LL;
  *(void *)(a1 + 12336) = 0LL;
  *(void *)(a1 + 12392) = 0LL;
  *(void *)(a1 + 12384) = 0LL;
  *(_BYTE *)(a1 + 12408) = 1;
}

void sub_1002E5438(uint64_t a1)
{
  if (*(void *)(a1 + 12344) <= *(void *)(a1 + 12392)) {
    unint64_t v2 = *(void *)(a1 + 12392);
  }
  else {
    unint64_t v2 = *(void *)(a1 + 12344);
  }
  uint64_t v3 = (_BYTE *)(a1 + 12408);
  if (*(_BYTE *)(a1 + 12408)) {
    unint64_t v4 = 0LL;
  }
  else {
    unint64_t v4 = 5LL;
  }
  if (v2 > v4)
  {
    do
      sub_1002E54BC((void *)a1, v4++);
    while (v2 != v4);
  }

  *(void *)(a1 + 12344) = 0LL;
  *(void *)(a1 + 12336) = 0LL;
  *(void *)(a1 + 12392) = 0LL;
  *(void *)(a1 + 12384) = 0LL;
  _BYTE *v3 = 1;
}

void sub_1002E54BC(void *a1, signed int a2)
{
  BOOL v4 = 0;
  float v26 = 0.0;
  float v27 = 0.0;
  unint64_t v5 = (unint64_t)(a1[1542] + a2) % a1[1544];
  uint64_t v6 = a1[1539];
  uint32_t v7 = (float *)(v6 + 48 * v5);
  float v8 = v7[2];
  float v9 = v7[9];
  if (v8 > v7[3] && v7[8] > 8.0 && v9 > 12.0 && v7[10] > 12.0) {
    BOOL v4 = (float)(*(float *)(v6 + 48 * v5 + 28) * 0.013486) < 0.001;
  }
  if (v4
    && (float v13 = *(float *)(v6 + 48 * v5 + 20),
        double v14 = (float)(sqrtf(v8 * 0.013486) * 980.0) / ((float)(v13 * v13) * 3.14159265 * 3.14159265),
        v14 > 0.00800000038)
    && (uint64_t v15 = sub_1002E6780((uint64_t)a1, (uint64_t)(a1 + 1539), a2), (int)v15 >= 2))
  {
    int v25 = 1;
    uint64_t v24 = *(void *)v7;
    unint64_t v16 = (unint64_t)(a1[1548] + a2) % a1[1550];
    uint64_t v17 = a1[1545];
    if (*(float *)(v17 + 48 * v16 + 8) > *(float *)(v17 + 48 * v16 + 12)
      && (float v18 = *(float *)(v17 + 48 * v16 + 36), v18 > 4.0)
      && (int)sub_1002E6780(v15, (uint64_t)(a1 + 1545), a2) >= 2
      && (float v19 = log10f(v9) + -0.565,
          float v20 = log10f(v18) + -0.325,
          (float)((float)((float)((float)(v19 * -7.8237) * v20) + (float)((float)(v19 * 9.8052) * v19))
                + (float)((float)(v20 * 4.529) * v20)) >= 3.36))
    {
      float v23 = v14;
      float v26 = v23;
      float v27 = v13;
    }

    else
    {
      int v25 = -2;
    }
  }

  else
  {
    else {
      int v21 = -1;
    }
    int v25 = v21;
    uint64_t v24 = *(void *)v7;
  }

  __int16 v22 = (void (*)(uint64_t *, void))a1[1552];
  if (v22) {
    v22(&v24, a1[1553]);
  }
}

void sub_1002E571C(unsigned __int16 *a1, uint64_t *a2, double a3)
{
  if (a3 > 0.0)
  {
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    sub_1002E5784(a1, a3);
    uint64_t v10 = *a2;
    *(double *)&__int128 v11 = a3;
    *((void *)&v11 + 1) = v10;
    int v12 = *((_DWORD *)a2 + 2);
    sub_1002E5BC0(a1, &v11);
    sub_1002E5C2C((uint64_t)a1, a3);
  }

void sub_1002E5784(unsigned __int16 *a1, double a2)
{
  if (a1[1])
  {
    uint64_t v4 = a1 + 4;
    unint64_t v5 = a1[1] + (unint64_t)*a1 - 1;
    unint64_t v6 = *((unsigned int *)a1 + 1);
    if (v5 < v6) {
      unint64_t v6 = 0LL;
    }
    if (*(double *)&v4[12 * (v5 - v6)] + 1.0 < a2)
    {
      if (qword_101934800 != -1) {
        dispatch_once(&qword_101934800, &stru_101830498);
      }
      uint32_t v7 = (os_log_s *)off_101934808;
      if (os_log_type_enabled((os_log_t)off_101934808, OS_LOG_TYPE_INFO))
      {
        unint64_t v8 = *a1 + (unint64_t)a1[1] - 1;
        unint64_t v9 = *((unsigned int *)a1 + 1);
        if (v8 < v9) {
          unint64_t v9 = 0LL;
        }
        float v10 = a2 - *(double *)&v4[12 * (v8 - v9)];
        *(_DWORD *)buf = 134217984;
        double v21 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Resetting detector, %.1f seconds without an accel sample",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_26;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934800 != -1) {
        dispatch_once(&qword_101934800, &stru_101830498);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934808,  1LL,  "Resetting detector, %.1f seconds without an accel sample");
LABEL_31:
      float v19 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CMTremorDetection::checkForGap(CFAbsoluteTime)", "%s\n", v11);
      if (v19 != buf) {
        free(v19);
      }
LABEL_26:
      sub_1002E5438((uint64_t)a1);
      *(_DWORD *)a1 = 0;
      *((_DWORD *)a1 + 1538) = 0;
      *((void *)a1 + 1538) = 0LL;
      *((void *)a1 + 1543) = 0LL;
      *((void *)a1 + 1542) = 0LL;
      *((void *)a1 + 1549) = 0LL;
      *((void *)a1 + 1548) = 0LL;
      *((_BYTE *)a1 + 12408) = 1;
      return;
    }
  }

  if (a1[3077])
  {
    int v12 = a1 + 3080;
    unint64_t v13 = a1[3077] + (unint64_t)a1[3076] - 1;
    unint64_t v14 = *((unsigned int *)a1 + 1539);
    if (v13 < v14) {
      unint64_t v14 = 0LL;
    }
    if (*(double *)&v12[12 * (v13 - v14)] + 1.0 < a2)
    {
      if (qword_101934800 != -1) {
        dispatch_once(&qword_101934800, &stru_101830498);
      }
      uint64_t v15 = (os_log_s *)off_101934808;
      if (os_log_type_enabled((os_log_t)off_101934808, OS_LOG_TYPE_INFO))
      {
        unint64_t v16 = a1[3076] + (unint64_t)a1[3077] - 1;
        unint64_t v17 = *((unsigned int *)a1 + 1539);
        if (v16 < v17) {
          unint64_t v17 = 0LL;
        }
        float v18 = a2 - *(double *)&v12[12 * (v16 - v17)];
        *(_DWORD *)buf = 134217984;
        double v21 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Resetting detector, %.1f seconds without a gyro sample",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_26;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934800 != -1) {
        dispatch_once(&qword_101934800, &stru_101830498);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934808,  1LL,  "Resetting detector, %.1f seconds without a gyro sample");
      goto LABEL_31;
    }
  }

unsigned __int16 *sub_1002E5BC0(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0LL;
  }
  uint64_t v4 = &result[12 * (v3 - v2)];
  __int128 v5 = *a2;
  *((void *)v4 + 3) = *((void *)a2 + 2);
  *(_OWORD *)(v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1LL;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    *uint64_t result = v8 - v7;
  }

  else
  {
    result[1] = v6 + 1;
  }

  return result;
}

void sub_1002E5C2C(uint64_t a1, double a2)
{
  if (!*(void *)(a1 + 12304)) {
    *(void *)(a1 + 12304) = 1280 * (1000 * (uint64_t)a2 / 1280) + 1280;
  }
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    unint64_t v3 = (double *)sub_1002E6340((unsigned __int16 *)a1, 0x80uLL);
    uint64_t v4 = *(void *)(a1 + 12304);
    if (v4 >= 1)
    {
      double v5 = (double)v4 / 1000.0;
      if (*v3 >= v5)
      {
        if (*v3 < (double)(v4 + 640) / 1000.0)
        {
          sub_1002E5D2C(a1, v5);
          uint64_t v4 = *(void *)(a1 + 12304);
        }

        *(void *)(a1 + 12304) = v4 + 1280;
      }
    }
  }

unsigned __int16 *sub_1002E5CEC(unsigned __int16 *result, uint64_t *a2, double a3)
{
  if (a3 > 0.0)
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    uint64_t v5 = *a2;
    *(double *)&__int128 v6 = a3;
    *((void *)&v6 + 1) = v5;
    int v7 = *((_DWORD *)a2 + 2);
    return sub_1002E5BC0(result + 3076, &v6);
  }

  return result;
}

void sub_1002E5D2C(uint64_t a1, double a2)
{
  if (*(_DWORD *)(a1 + 6156) == *(unsigned __int16 *)(a1 + 6154)
    && *(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    sub_1002E5EA4(a1, (unsigned __int16 *)a1, 273, (uint64_t)v6, a2);
    sub_1002E5E34((void *)(a1 + 12312), v6);
    sub_1002E5EA4(a1, (unsigned __int16 *)(a1 + 6152), 1, (uint64_t)v6, a2);
    sub_1002E5E34((void *)(a1 + 12360), v6);
    unint64_t v4 = *(void *)(a1 + 12344);
    if (v4 <= *(void *)(a1 + 12392)) {
      unint64_t v4 = *(void *)(a1 + 12392);
    }
    if (v4 >= 9)
    {
      if (*(_BYTE *)(a1 + 12408))
      {
        for (signed int i = 0; i != 4; ++i)
          sub_1002E54BC((void *)a1, i);
        *(_BYTE *)(a1 + 12408) = 0;
      }

      sub_1002E54BC((void *)a1, 4);
    }
  }

uint64_t sub_1002E5E34(void *a1, __int128 *a2)
{
  unint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = (_OWORD *)(*a1 + 48 * ((a1[3] + a1[4]) % v2));
    __int128 v4 = *a2;
    __int128 v5 = a2[1];
    *(_OWORD *)((char *)v3 + 28) = *(__int128 *)((char *)a2 + 28);
    _OWORD *v3 = v4;
    v3[1] = v5;
    unint64_t v6 = a1[4];
    if (v6 == a1[5])
    {
      unint64_t v2 = 0LL;
      a1[3] = (a1[3] + 1LL) % v6;
    }

    else
    {
      a1[4] = v6 + 1;
      return 1LL;
    }
  }

  return v2;
}

void sub_1002E5EA4( uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 24) = 0LL;
  *(double *)a4 = a5;
  int v7 = dword_101994164;
  uint64_t v8 = dword_101994164;
  int v9 = dword_101994164 + 1;
  if (dword_101994164 + 1 < dword_101994168)
  {
    float v10 = (float *)v52 + dword_101994164 + 1;
    do
    {
      float v11 = *v10++;
      ++v9;
    }

    while (dword_101994168 != v9);
  }

  if (v7 >= 0) {
    int v12 = v7;
  }
  else {
    int v12 = v7 + 1;
  }
  double v13 = (double)(v12 >> 1);
  int v14 = (int)(v13 + -0.001);
  if (v14 <= 1) {
    uint64_t v15 = 1LL;
  }
  else {
    uint64_t v15 = v14;
  }
  double v16 = v13 + 0.001;
  do
  {
    if ((int)v15 <= (int)v16 + 1)
    {
      int v17 = 0;
      uint64_t v18 = v15;
      do
      {
        BOOL v23 = v18++ <= (int)v16;
      }

      while (v23);
    }

    else
    {
      int v17 = 0;
    }
  }

  while (!v17);
  uint64_t v19 = (2LL * v7) | 1;
  float v20 = *((float *)v52 + v19);
  float v21 = *((float *)v52 + 2 * v7);
  uint64_t v22 = 2 * v7 - 1LL;
  if (v20 <= v21 || v21 <= *((float *)v52 + v22))
  {
    BOOL v23 = *((float *)v52 + v22) <= v21 || v21 <= v20;
    if (v23) {
      LODWORD(v19) = 2 * v7;
    }
    else {
      LODWORD(v19) = 2 * v7 - 1;
    }
  }

  int v24 = 3 * v7;
  float v25 = *((float *)v52 + 3 * v7 + 1);
  uint64_t v26 = 3 * v7;
  float v27 = *((float *)v52 + v26);
  uint64_t v28 = v26 - 1;
  if (v25 <= v27 || v27 <= *((float *)v52 + v28))
  {
    float v29 = *((float *)v52 + v28);
    if (v27 > v25 && v29 > v27)
    {
      uint64_t v31 = v26 - 2;
      else {
        int v24 = v31;
      }
    }
  }

  else if (*((float *)v52 + v26 + 2) <= v25)
  {
    int v24 = 3 * v7 + 1;
  }

  else
  {
    int v24 = v26 + 2;
  }

  uint64_t v32 = dword_10199416C;
  uint64_t v33 = dword_101994170;
  float v34 = *(float *)&dword_101994174;
  if (dword_10199416C >= dword_101994170)
  {
    int v36 = 0;
    int v35 = 0;
    float v43 = 0.0;
    float v42 = 0.0;
  }

  else
  {
    int v35 = 0;
    int v36 = 0;
    int v37 = -v24;
    int v38 = -(int)v19;
    float v39 = 0.0;
    float v40 = 0.0;
    float v41 = 0.0;
    float v42 = 0.0;
    float v43 = 0.0;
    do
    {
      unsigned int v44 = v32 - v7;
      if (v44 >= 2)
      {
        unsigned int v45 = v38 + v32;
        if (v45 >= 2)
        {
          unsigned int v46 = v37 + v32;
          if (v46 >= 2)
          {
            float v47 = *((float *)v52 + v32);
            if (v47 >= v41)
            {
              *(float *)(a4 + 12) = v47;
              float v41 = v47;
            }

            float v43 = v43 + v47;
            ++v36;
            if (v32 < v8)
            {
              if (v47 >= v40)
              {
                *(float *)(a4 + 28) = v47;
                float v40 = v47;
              }

              float v42 = v42 + v47;
              ++v35;
            }
          }
        }
      }

      float v48 = *((float *)v52 + v32);
      if (v48 > v39)
      {
        *(float *)(a4 + 16) = v48;
        *(float *)(a4 + 24) = v34 * (float)(int)v32;
        float v39 = v48;
      }

      ++v32;
    }

    while (v33 != v32);
  }

  float v49 = *((float *)v52 + v7);
  *(float *)(a4 + 8) = v49;
  *(float *)(a4 + 20) = v34 * (float)v7;
  float v50 = v49 / (float)(v43 / (float)v36);
  float v51 = *((float *)v52 + v17);
  *(float *)(a4 + 32) = v50;
  *(float *)(a4 + 36) = v49 / (float)(v42 / (float)v35);
  *(float *)(a4 + 40) = v49 / v51;
}

void sub_1002E61DC(uint64_t a1, _DWORD *a2, unsigned __int16 *a3, int a4)
{
  *(void *)double v16 = 0x10000000000LL;
  sub_100FBFFE8(v15);
  int v7 = 0;
  unint64_t v8 = 0LL;
  for (unint64_t i = 0LL; i != 256; ++i)
  {
    if (a4 == 256)
    {
      int v10 = *(_DWORD *)(sub_1002E6340(a3, i) + 16);
    }

    else if (a4 == 16)
    {
      int v10 = *(_DWORD *)(sub_1002E6340(a3, i) + 12);
    }

    else
    {
      int v10 = 0;
      if (a4 == 1) {
        int v10 = *(_DWORD *)(sub_1002E6340(a3, i) + 8);
      }
    }

    unint64_t v11 = v8 + (unsigned __int16)v7;
    if (v11 >= 0x100) {
      uint64_t v12 = -256LL;
    }
    else {
      uint64_t v12 = 0LL;
    }
    *(_DWORD *)&v16[2 * v12 + 4 + 2 * v11] = v10;
    if (v8 > 0xFF)
    {
      else {
        int v13 = 0;
      }
      int v14 = v7 + v13;
      int v7 = v14 + 1;
      v16[0] = v14 + 1;
    }

    else
    {
      v16[1] = ++v8;
    }
  }

  sub_1002E653C(v16);
  sub_100FBFFEC((uint64_t)v15, a2, v16);
}

uint64_t sub_1002E6340(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018304D8);
    }
    int v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018304D8);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      unint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CMTremorDetection::SensorSample>::operator[](const size_t) const [T = CMTremorDetection::SensorSample]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float *sub_1002E653C(unsigned __int16 *a1)
{
  unint64_t v2 = 0LL;
  unint64_t v3 = 255LL;
  do
  {
    float v4 = (float)(cosf((float)(int)v2 * 0.02464) * -0.46) + 0.54;
    float v5 = v4 * *(float *)sub_100208A44(a1, v2);
    *(float *)sub_100208A44(a1, sub_1002DF1A0(v1, v2) = v5;
    float v6 = v4 * *(float *)sub_100208A44(a1, v3);
    *(float *)sub_100208A44(a1, v3) = v6;
    ++v2;
    --v3;
  }

  while (v2 != 128);
  float v7 = *(float *)sub_100208A44(a1, 0x80uLL) * 0.99997;
  uint64_t result = (float *)sub_100208A44(a1, 0x80uLL);
  *uint64_t result = v7;
  return result;
}

float32x4_t sub_1002E662C(uint64_t a1, _OWORD *a2, unsigned __int16 *a3, __int16 a4)
{
  result.i64[0] = 0LL;
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if ((a4 & 1) != 0)
  {
    sub_1002E61DC(a1, v11, a3, 1);
    for (unint64_t i = 0LL; i != 512; i += 16LL)
    {
      float32x4_t result = vmlaq_f32((float32x4_t)a2[i / 0x10], *(float32x4_t *)&v11[i / 4], *(float32x4_t *)&v11[i / 4]);
      a2[i / 0x10] = result;
    }
  }

  if ((a4 & 0x10) != 0)
  {
    sub_1002E61DC(a1, v11, a3, 16);
    for (unint64_t j = 0LL; j != 512; j += 16LL)
    {
      float32x4_t result = vmlaq_f32((float32x4_t)a2[j / 0x10], *(float32x4_t *)&v11[j / 4], *(float32x4_t *)&v11[j / 4]);
      a2[j / 0x10] = result;
    }
  }

  if ((a4 & 0x100) != 0)
  {
    sub_1002E61DC(a1, v11, a3, 256);
    for (unint64_t k = 0LL; k != 512; k += 16LL)
    {
      float32x4_t result = vmlaq_f32((float32x4_t)a2[k / 0x10], *(float32x4_t *)&v11[k / 4], *(float32x4_t *)&v11[k / 4]);
      a2[k / 0x10] = result;
    }
  }

  return result;
}

uint64_t sub_1002E6780(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = a3 - 4;
  int v4 = *(_DWORD *)(a2 + 32);
  uint64_t v5 = v3 & ~(v3 >> 31);
  int v6 = v4 - 1;
  else {
    int v7 = v6;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 40);
  float v11 = *(float *)(*(void *)a2 + 48 * ((v9 + (int)a3) % v10) + 24);
  uint64_t v12 = (v7 + 1);
  unint64_t v13 = a3 - (unint64_t)v5;
  unint64_t v14 = v9 + v5;
  uint64_t v15 = v5 - v12;
  uint64_t result = 1LL;
  do
  {
    if (v13)
    {
    }

    --v13;
    ++v14;
  }

  while (!__CFADD__(v15++, 1LL));
  return result;
}

void sub_1002E6834(id a1)
{
  off_101934808 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_1002E6860(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1002E688C()
{
  float v0 = sub_1009AF760(100, 0x80uLL, 3.0);
  dword_101994164 = sub_1009AF58C(v0);
  float v1 = sub_1009AF760(100, 0x80uLL, 7.25);
  dword_101994168 = sub_1009AF58C(v1);
  float v2 = sub_1009AF760(100, 0x80uLL, 0.75);
  dword_10199416C = sub_1009AF58C(v2);
  float v3 = sub_1009AF760(100, 0x80uLL, 10.0);
  dword_101994170 = sub_1009AF58C(v3);
  dword_101994174 = sub_1009AF790(100, 0x80uLL);
}

uint64_t sub_1002E6920()
{
  if (qword_101994178 != -1) {
    dispatch_once(&qword_101994178, &stru_1018304F8);
  }
  return qword_1019A0E28;
}

void sub_1002E6960(id a1)
{
  float v1 = operator new(0xE0uLL);
  sub_1002E69A4((uint64_t)v1);
  qword_1019A0E28 = (uint64_t)v1;
}

void sub_1002E6990(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E69A4(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  sub_1010DDBC0((void *)(a1 + 40), "");
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  sub_1002E6A8C(a1);
  return a1;
}

void sub_1002E6A50(_Unwind_Exception *a1)
{
}

void sub_1002E6A8C(uint64_t a1)
{
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    BTAccessoryManagerDeregisterCustomMessageClient(v2, off_101937250);
    BTAccessoryManagerRemoveCallbacks(*(void *)(a1 + 8), &off_101937230);
    *(void *)(a1 + 8) = 0LL;
  }

  *(void *)a1 = 0LL;
  int v3 = BTSessionAttachWithQueue("CLAudioAccessoryInterface", off_101937258, a1, &_dispatch_main_q);
  if (v3)
  {
    int v4 = v3;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v5 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      int v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] Failed to register BT session callback. Error: %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      v7[0] = 67240192;
      v7[1] = v4;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] Failed to register BT session callback. Error: %{public}d",  v7,  8);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLAudioAccessoryInterface::attachBTSession()", "%s\n", v6);
    }
  }

void sub_1002E6C9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)__str = 0LL;
    uint64_t v13 = 0LL;
    __int16 v14 = 0;
    snprintf( __str,  0x12uLL,  "%02x:%02x:%02x:%02x:%02x:%02x",  a2,  BYTE1(a2),  BYTE2(a2),  BYTE3(a2),  BYTE4(a2),  BYTE5(a2));
    int v3 = (void *)(a1 + 40);
    std::string::assign((std::string *)(a1 + 40), __str);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v4 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)(a1 + 40);
      *(_DWORD *)buf = 136380675;
      double v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] BT address of the current device is %{private}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v10 = 136380675;
      float v11 = v3;
      LODWORD(v9) = 12;
      int v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] BT address of the current device is %{private}s",  &v10,  v9);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "%s\n", v7);
    }

    sub_1002E7014(a1);
  }

  else
  {
    std::string::assign((std::string *)(a1 + 40), "");
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v6 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] clear the BT address",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      *(_WORD *)__str = 0;
      int v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] clear the BT address",  __str,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "%s\n", v8);
    }

    *(void *)(a1 + 32) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = 0;
  }

void sub_1002E7014(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current != (CFRunLoopRef)sub_1006E2AB4())
  {
    uint64_t v3 = sub_1006E27E8();
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1002E77BC;
    v29[3] = &unk_10181D3D0;
    v29[4] = a1;
    sub_1006E28B8(v3, (uint64_t)v29);
    return;
  }

  if (!*(void *)a1)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v7 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] refresh device handle - invalid BT session",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      LOWORD(v30) = 0;
      int v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] refresh device handle - invalid BT session",  &v30,  2);
      goto LABEL_40;
    }

    return;
  }

  int v4 = (uint64_t *)(a1 + 40);
  int v5 = *(char *)(a1 + 63);
  if (v5 < 0)
  {
    if (*(void *)(a1 + 48) == 17LL)
    {
      uint64_t v6 = (void *)*v4;
LABEL_18:
      int v9 = BTDeviceAddressFromString(v6, v28);
      if (v9)
      {
        int v10 = v9;
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        float v11 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = a1 + 40;
          *(_DWORD *)buf = 136380931;
          uint64_t v35 = v12;
          __int16 v36 = 1026;
          int v37 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] refresh device handle - Failed to convert %{private}s into a valid BT address. E rror: %{public}d",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          int v30 = 136380931;
          uint64_t v31 = v4;
          __int16 v32 = 1026;
          int v33 = v10;
          int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] refresh device handle - Failed to convert %{private}s into a valid BT address. Error: %{public}d",  &v30,  18);
          sub_10029211C("Generic", 1LL, 0, 0LL, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v24);
        }

        if (v10 == 1) {
          sub_1002E6A8C(a1);
        }
        return;
      }

      int v16 = BTDeviceFromAddress(*(void *)a1, v28, a1 + 16);
      if (v16)
      {
        int v17 = v16;
        *(void *)(a1 + 16) = 0LL;
        *(_DWORD *)(a1 + 24) = 0;
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        __int16 v18 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = a1 + 40;
          *(_DWORD *)buf = 136380931;
          uint64_t v35 = v19;
          __int16 v36 = 1026;
          int v37 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] refresh device handle - Failed to get the device handle with BT address %{privat e}s. Error: %{public}d",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          int v30 = 136380931;
          uint64_t v31 = v4;
          __int16 v32 = 1026;
          int v33 = v17;
          int v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] refresh device handle - Failed to get the device handle with BT address %{private}s. Error: %{public}d",  &v30,  18);
LABEL_40:
          uint64_t v15 = (uint8_t *)v8;
          sub_10029211C("Generic", 1LL, 0, 0LL, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v8);
          if (v15 != buf) {
            free(v15);
          }
          return;
        }
      }

      else
      {
        uint64_t v27 = 0LL;
        int v26 = 0;
        int DeviceId = BTDeviceGetDeviceId(*(void *)(a1 + 16), (char *)&v27 + 4, &v27, a1 + 24, &v26);
        if (DeviceId)
        {
          int v21 = DeviceId;
          *(_DWORD *)(a1 + 24) = 0;
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          uint64_t v22 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            LODWORD(v35) = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] refresh device handle - Failed to get the product ID. Error: %{public}d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_101830578);
            }
            int v30 = 67240192;
            LODWORD(v31) = v21;
            float v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] refresh device handle - Failed to get the product ID. Error: %{public}d",  &v30,  8);
            sub_10029211C("Generic", 1LL, 0, 0LL, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v25);
          }
        }

        sub_1002E77C4(a1);
      }

      return;
    }
  }

  else if (v5 == 17)
  {
    uint64_t v6 = (void *)(a1 + 40);
    goto LABEL_18;
  }

  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_101830578);
  }
  uint64_t v13 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = a1 + 40;
    *(_DWORD *)buf = 136380675;
    uint64_t v35 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] refresh device handle - invalid BT address %{private}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v30 = 136380675;
    uint64_t v31 = v4;
    int v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] refresh device handle - invalid BT address %{private}s",  &v30,  12);
    goto LABEL_40;
  }

uint64_t sub_1002E77BC(uint64_t a1)
{
  return sub_1002E7014(*(void *)(a1 + 32));
}

void sub_1002E77C4(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current != (CFRunLoopRef)sub_1006E2AB4())
  {
    uint64_t v3 = sub_1006E27E8();
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1002E8548;
    v29[3] = &unk_10181D3D0;
    v29[4] = a1;
    sub_1006E28B8(v3, (uint64_t)v29);
    return;
  }

  if (*(void *)(a1 + 16))
  {
    else {
      uint64_t v4 = *(unsigned __int8 *)(a1 + 63);
    }
    if (v4 == 17)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      uint64_t v8 = *(void *)(a1 + 128);
      int v9 = BTAccessoryManagerRemoteTimeSyncEnable(*(void *)(a1 + 8));
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v10 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        float v11 = "disable";
        if (v7) {
          float v11 = "enable";
        }
        *(_DWORD *)buf = 136446722;
        int v37 = v11;
        if (v9) {
          uint64_t v12 = "failed";
        }
        else {
          uint64_t v12 = "succeeded";
        }
        __int16 v38 = 2082;
        float v39 = v12;
        __int16 v40 = 1026;
        int v41 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] %{public}s high precision TimeSync %{public}s. Status: %{public}d",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        uint64_t v22 = "disable";
        if (v7) {
          uint64_t v22 = "enable";
        }
        int v30 = 136446722;
        uint64_t v31 = v22;
        if (v9) {
          BOOL v23 = "failed";
        }
        else {
          BOOL v23 = "succeeded";
        }
        __int16 v32 = 2082;
        int v33 = v23;
        __int16 v34 = 1026;
        int v35 = v9;
        int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] %{public}s high precision TimeSync %{public}s. Status: %{public}d",  &v30,  28);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v24);
      }

      if (!v7)
      {
        if (v8) {
          uint64_t v13 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v13 = 0LL;
        }
        int v14 = BTAccessoryManagerSensorStreamTimeSyncEnable(*(void *)(a1 + 8), *(void *)(a1 + 16), v13);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        uint64_t v15 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = "disable";
          if (v8) {
            int v16 = "enable";
          }
          *(_DWORD *)buf = 136446722;
          int v37 = v16;
          if (v14) {
            int v17 = "failed";
          }
          else {
            int v17 = "succeeded";
          }
          __int16 v38 = 2082;
          float v39 = v17;
          __int16 v40 = 1026;
          int v41 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] %{public}s low precision TimeSync %{public}s. Status: %{public}d",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          float v25 = "disable";
          if (v8) {
            float v25 = "enable";
          }
          int v30 = 136446722;
          uint64_t v31 = v25;
          if (v14) {
            int v26 = "failed";
          }
          else {
            int v26 = "succeeded";
          }
          __int16 v32 = 2082;
          int v33 = v26;
          __int16 v34 = 1026;
          int v35 = v14;
          LODWORD(v28) = 28;
          uint64_t v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] %{public}s low precision TimeSync %{public}s. Status: %{public}d",  &v30,  v28);
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v27);
        }

        if (!v8)
        {

          *(void *)(a1 + 32) = 0LL;
        }
      }

      return;
    }

    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    __int16 v18 = (const char *)(a1 + 40);
    uint64_t v19 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      float v20 = (const char *)(a1 + 40);
      *(_DWORD *)buf = 136380675;
      int v37 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT address %{private}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v30 = 136380675;
      uint64_t v31 = v18;
      uint64_t v6 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT address %{private}s",  &v30,  12);
LABEL_55:
      int v21 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v6);
      if (v21 != buf) {
        free(v21);
      }
    }
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v5 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT device",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      LOWORD(v30) = 0;
      uint64_t v6 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT device",  &v30,  2);
      goto LABEL_55;
    }
  }

uint64_t sub_1002E7ED0(void *a1, uint64_t a2)
{
  if (!*a1) {
    return 1LL;
  }
  *(void *)__str = 0LL;
  uint64_t v20 = 0LL;
  __int16 v21 = 0;
  snprintf( __str,  0x12uLL,  "%02x:%02x:%02x:%02x:%02x:%02x",  a2,  BYTE1(a2),  BYTE2(a2),  BYTE3(a2),  BYTE4(a2),  BYTE5(a2));
  uint64_t v14 = 0LL;
  if (BTDeviceAddressFromString(__str, &v13))
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v3 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136380675;
      __int16 v18 = __str;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to convert %{private}s into a valid BT address",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v15 = 136380675;
    int v16 = __str;
    LODWORD(v12) = 12;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to convert %{private}s into a valid BT address",  &v15,  v12);
    goto LABEL_38;
  }

  if (BTDeviceFromAddress(*a1, &v13, &v14))
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v5 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136380675;
      __int16 v18 = __str;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to get the device handle with BT address %{private}s",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v15 = 136380675;
    int v16 = __str;
    LODWORD(v12) = 12;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to get the device handle with BT a ddress %{private}s",  &v15,  v12);
LABEL_38:
    float v11 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const",  "%s\n",  v4);
    if (v11 != buf) {
      free(v11);
    }
    return 1LL;
  }

  int v13 = 2;
  else {
    BOOL v8 = v13 == 1;
  }
  uint64_t v6 = v8;
  if (!v8)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v9 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      __int16 v18 = __str;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] isSpatialAudioSupported - not supported for device %{private}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v15 = 136380675;
      int v16 = __str;
      LODWORD(v12) = 12;
      int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] isSpatialAudioSupported - not supported for device %{private}s",  &v15,  v12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const",  "%s\n",  v10);
    }
  }

  return v6;
}

void sub_1002E8368(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = a2;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current == (CFRunLoopRef)sub_1006E2AB4())
  {
    if (a3)
    {
      sub_1002ED6A0((void *)(a1 + 104), &v11);
      uint64_t v8 = a1 + 64;
    }

    else
    {
      sub_1002ED6A0((void *)(a1 + 64), &v11);
      uint64_t v8 = a1 + 104;
    }

    sub_1002ED7C0(v8, &v11, &v11);
    sub_1002E77C4(a1);
  }

  else
  {
    uint64_t v7 = sub_1006E27E8();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002E8438;
    v9[3] = &unk_101830518;
    _DWORD v9[4] = a1;
    v9[5] = a2;
    char v10 = a3;
    sub_1006E28B8(v7, (uint64_t)v9);
  }

uint64_t sub_1002E8438(uint64_t a1)
{
  return sub_1002E8368(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_1002E8448(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current == (CFRunLoopRef)sub_1006E2AB4())
  {
    sub_1002ED6A0((void *)(a1 + 64), &v7);
    sub_1002ED6A0((void *)(a1 + 104), &v7);
    sub_1002E77C4(a1);
  }

  else
  {
    uint64_t v5 = sub_1006E27E8();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_1002E84F4;
    __int128 v6[3] = &unk_101830538;
    _DWORD v6[4] = a1;
    void v6[5] = a2;
    sub_1006E28B8(v5, (uint64_t)v6);
  }

uint64_t sub_1002E84F4(uint64_t a1)
{
  return sub_1002E8448(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1002E8500(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
}

void sub_1002E8514(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, unint64_t a5, uint64_t a6)
{
  if (a3 == 1024) {
    sub_1002EA63C(a6, a2, a4, a5);
  }
}

void sub_1002E8530(uint64_t a1, int a2, int a3, void *a4)
{
}

uint64_t sub_1002E8548(uint64_t a1)
{
  return sub_1002E77C4(*(void *)(a1 + 32));
}

id sub_1002E8550(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3 && [v3 lockState] == 2)
  {
    *(_DWORD *)buf = 0;
    return [*(id *)(a1 + 32) convertFromDomainToMachAbsoluteTime:a2 withFlags:buf];
  }

  double v6 = sub_101171D4C();
  if (*(void *)(a1 + 32))
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v7 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] TimeSync error! Clock not locked",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] TimeSync error! Clock not locked",  v11,  2,  v11[0]);
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v9 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] TimeSync error! No TimeSync clock",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] TimeSync error! No TimeSync clock",  v11,  2,  v11[0]);
  }

  char v10 = (uint8_t *)v8;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint64_t CLAudioAccessoryInterface::convertTimeSyncTimestamp(uint64_t) const",  "%s\n",  v8);
  if (v10 != buf) {
    free(v10);
  }
LABEL_20:
  id result = 0LL;
  qword_101994180 = *(void *)&v6;
  return result;
}

void sub_1002E8818(uint64_t a1, int *a2, int *a3)
{
  *a3 = 3;
  *a2 = 3;
  if (*(void *)(a1 + 16))
  {
    else {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
    }
    if (v6 == 17)
    {
      HIDWORD(v33) = -1;
      int v9 = BTAccessoryManagerGetInEarDetectionEnable(*(void *)(a1 + 8));
      if (v9)
      {
        int v10 = v9;
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        uint64_t v11 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v36) = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] in ear status - failed to get IED setting. Error: %{public}d",  buf,  8u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          *(_DWORD *)__int16 v34 = 67240192;
          *(_DWORD *)&v34[4] = v10;
          LODWORD(v33) = 8;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] in ear status - failed to get IED setting. Error: %{public}d",  v34,  v33,  *(_OWORD *)v34);
LABEL_58:
          int v24 = (uint8_t *)v8;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const",  "%s\n",  v8);
          if (v24 != buf) {
            free(v24);
          }
        }
      }

      else
      {
        int v15 = BTAccessoryManagerGetInEarStatus(*(void *)(a1 + 8), *(void *)(a1 + 16), a2, a3);
        if (v15)
        {
          int v16 = v15;
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          int v17 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            LODWORD(v36) = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] in ear status - failed to get inear status. Error: %{public}d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_101830578);
            }
            *(_DWORD *)__int16 v34 = 67240192;
            *(_DWORD *)&v34[4] = v16;
            LODWORD(v33) = 8;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] in ear status - failed to get inear status. Error: %{public}d",  v34,  v33);
            int v26 = (uint8_t *)v25;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const",  "%s\n",  v25);
            if (v26 != buf) {
              free(v26);
            }
          }

          *a3 = 3;
          *a2 = 3;
        }

        else
        {
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          __int16 v18 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = *a2;
            else {
              uint64_t v20 = *(&off_101830598 + v19);
            }
            uint64_t v21 = *a3;
            else {
              uint64_t v22 = *(&off_101830598 + v21);
            }
            *(_DWORD *)buf = 138543618;
            __int16 v36 = v20;
            __int16 v37 = 2114;
            __int16 v38 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] in ear status - Primary:%{public}@, Secondary:%{public}@",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_101830578);
            }
            uint64_t v27 = *a2;
            else {
              uint64_t v28 = *(&off_101830598 + v27);
            }
            uint64_t v29 = *a3;
            else {
              int v30 = *(&off_101830598 + v29);
            }
            *(_DWORD *)__int16 v34 = 138543618;
            *(void *)&v34[4] = v28;
            *(_WORD *)&v34[12] = 2114;
            *(void *)&v34[14] = v30;
            LODWORD(v33) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] in ear status - Primary:%{public}@, Secondary:%{public}@",  v34,  v33);
            __int16 v32 = (uint8_t *)v31;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const",  "%s\n",  v31);
            if (v32 != buf) {
              free(v32);
            }
          }

          if (!*a2)
          {
            unsigned int v23 = *(_DWORD *)(a1 + 24) - 8202;
            if (v23 <= 0x15 && ((1 << v23) & 0x202001) != 0) {
              *a3 = 0;
            }
          }
        }
      }
    }

    else
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      uint64_t v12 = (const __CFString *)(a1 + 40);
      int v13 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
      {
        isa = (const __CFString *)(a1 + 40);
        *(_DWORD *)buf = 136380675;
        __int16 v36 = isa;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] in ear status - invalid BT address %{private}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        *(_DWORD *)__int16 v34 = 136380675;
        *(void *)&v34[4] = v12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] in ear status - invalid BT address %{private}s",  v34,  12,  *(_OWORD *)v34);
        goto LABEL_58;
      }
    }
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v7 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] in ear status - invalid BT device",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      *(_WORD *)__int16 v34 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] in ear status - invalid BT device",  v34,  2,  *(_OWORD *)v34);
      goto LABEL_58;
    }
  }

BOOL sub_1002E90CC()
{
  if (qword_101994178 != -1) {
    dispatch_once(&qword_101994178, &stru_1018304F8);
  }
  sub_1002E8818(qword_1019A0E28, &v2, &v1);
  return v2 == 0;
}

void *sub_1002E912C(uint64_t a1, uint64_t (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = &v6;
  id result = sub_1002EDA10(a1 + 144, &v6, (uint64_t)&unk_1012CF090, &v7);
  result[3] = a2;
  if (*(void *)(a1 + 16)) {
    return (void *)a2(0LL, v6);
  }
  return result;
}

void *sub_1002E9194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = &v5;
  id result = sub_1002EDA10(a1 + 184, &v5, (uint64_t)&unk_1012CF090, &v6);
  result[3] = a2;
  return result;
}

uint64_t *sub_1002E91E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_1002ED6A0((void *)(a1 + 184), &v4);
  return sub_1002ED6A0((void *)(a1 + 144), &v4);
}

uint64_t sub_1002E9224(uint64_t result, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(uint64_t ***)(result + 200); i; unint64_t i = (uint64_t **)*i)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v6 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = i[2];
      *(_DWORD *)buf = 67109378;
      int v15 = a2;
      __int16 v16 = 2112;
      int v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[HeadphoneUsage] notifyClientsWithData,event %d,client %@",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      uint64_t v8 = i[2];
      v11[0] = 67109378;
      v11[1] = a2;
      __int16 v12 = 2112;
      int v13 = v8;
      LODWORD(v10) = 18;
      int v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[HeadphoneUsage] notifyClientsWithData,event %d,client %@",  v11,  v10);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::notifyClientsWithData(Event, NSDictionary *)",  "%s\n",  v9);
    }

    id result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))i[3])(a2, a3, i[2]);
  }

  return result;
}

void sub_1002E9428(void *a1, uint64_t a2, int a3, int a4)
{
  if ((a3 & 0xFFFFFFFD) != 0) {
    return;
  }
  if (a3 == 2 || !a3 && a4)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v8 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = "attaching BT session failed";
      if (a4 == 2) {
        int v9 = "BT session terminated";
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v29 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] %{public}s. Re-attaching......",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      uint64_t v22 = "attaching BT session failed";
      if (a4 == 2) {
        uint64_t v22 = "BT session terminated";
      }
      *(_DWORD *)uint64_t v27 = 136446210;
      *(void *)&v27[4] = v22;
      unsigned int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] %{public}s. Re-attaching......",  v27,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v23);
    }

    sub_1002E6A8C((uint64_t)a1);
    return;
  }

  *a1 = a2;
  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_101830578);
  }
  uint64_t v10 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] BT session attached",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    *(_WORD *)uint64_t v27 = 0;
    int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] BT session attached",  v27,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v24);
  }

  int Default = BTAccessoryManagerGetDefault(*a1, a1 + 1);
  if (Default)
  {
    int v12 = Default;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v13 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v29) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] Accessory Mananger unavailable. Status %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      *(_DWORD *)uint64_t v27 = 67240192;
      *(_DWORD *)&v27[4] = v12;
      LODWORD(v26) = 8;
      uint64_t v14 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] Accessory Mananger unavailable. Status %{public}d",  v27,  v26,  *(void *)v27);
LABEL_43:
      uint64_t v21 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v14);
      if (v21 != buf) {
        free(v21);
      }
    }
  }

  else
  {
    sub_1002E77C4((uint64_t)a1);
    int v15 = BTAccessoryManagerAddCallbacks(a1[1], &off_101937260, a1);
    if (v15)
    {
      int v16 = v15;
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v17 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v29) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] Failed to register BT accessory callback.  Status %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        *(_DWORD *)uint64_t v27 = 67240192;
        *(_DWORD *)&v27[4] = v16;
        LODWORD(v26) = 8;
        float v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] Failed to register BT accessory callback.  Status %{public}d",  v27,  v26);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v25);
      }
    }

    int v18 = BTAccessoryManagerRegisterCustomMessageClient(a1[1], &off_101937280, 1024LL, a1);
    if (!v18)
    {
      sub_1002E7014((uint64_t)a1);
      return;
    }

    int v19 = v18;
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v20 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v29) = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] Failed to register for custom callback. BTResult: %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      *(_DWORD *)uint64_t v27 = 67240192;
      *(_DWORD *)&v27[4] = v19;
      LODWORD(v26) = 8;
      uint64_t v14 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] Failed to register for custom callback. BTResult: %{public}d",  v27,  v26,  *(void *)v27);
      goto LABEL_43;
    }
  }

void sub_1002E9B34(uint64_t a1, uint64_t a2, int a3, int a4)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current != (CFRunLoopRef)sub_1006E2AB4())
  {
    uint64_t v9 = sub_1006E27E8();
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_1002EA62C;
    v35[3] = &unk_101830558;
    v35[4] = a1;
    v35[5] = a2;
    int v36 = a3;
    int v37 = a4;
    sub_1006E28B8(v9, (uint64_t)v35);
    return;
  }

  switch(a3)
  {
    case 5:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      uint64_t v10 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283521;
        uint64_t v45 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] BT_ACCESSORY_SETTINGS_CHANGED device:%{private}p",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        int v38 = 134283521;
        uint64_t v39 = a2;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] BT_ACCESSORY_SETTINGS_CHANGED device:%{private}p",  &v38,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)",  "%s\n",  v29);
      }

      return;
    case 6:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v17 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283521;
        uint64_t v45 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] BT_ACCESSORY_IN_EAR_STATUS_CHANGED device:%{private}p",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        int v38 = 134283521;
        uint64_t v39 = a2;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] BT_ACCESSORY_IN_EAR_STATUS_CHANGED device:%{private}p",  &v38,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)",  "%s\n",  v31);
      }

      return;
    case 7:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v12 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283521;
        uint64_t v45 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] TIMESYNC_AVAILABLE device:%{private}p",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        int v38 = 134283521;
        uint64_t v39 = a2;
        int v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] TIMESYNC_AVAILABLE device:%{private}p",  &v38,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)",  "%s\n",  v30);
      }

      if (+[TSClockManager sharedClockManager](&OBJC_CLASS___TSClockManager, "sharedClockManager"))
      {
        uint64_t v34 = 0LL;
        int TimeSyncId = BTAccessoryManagerGetTimeSyncId(*(void *)(a1 + 8), a2, &v34);
        if (TimeSyncId)
        {
          int v14 = TimeSyncId;
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          int v15 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            LODWORD(v45) = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] Get TimeSync ID failed result:%{public}d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_101830578);
            }
            int v38 = 67240192;
            LODWORD(v39) = v14;
            LODWORD(v33) = 8;
            uint64_t v16 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] Get TimeSync ID failed result:%{public}d",  &v38,  v33);
LABEL_51:
            uint64_t v22 = (uint8_t *)v16;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)",  "%s\n");
LABEL_52:
            if (v22 != buf) {
              free(v22);
            }
          }
        }

        else
        {

          id v23 = +[TSClockManager sharedClockManager](&OBJC_CLASS___TSClockManager, "sharedClockManager");
          id v24 = [v23 clockWithClockIdentifier:v34];
          *(void *)(a1 + 32) = v24;
          if (v24)
          {
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_101830578);
            }
            float v25 = (os_log_s *)qword_1019345C8;
            if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v26 = *(void *)(a1 + 32);
              *(_DWORD *)buf = 134284033;
              uint64_t v45 = a2;
              __int16 v46 = 2049;
              uint64_t v47 = v34;
              __int16 v48 = 2049;
              uint64_t v49 = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[CLAudioAccessoryInterface] Got TimeSync ID device:%{private}p tsID:0x%{private}llx clock:%{private}p",  buf,  0x20u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019345C0 != -1) {
                dispatch_once(&qword_1019345C0, &stru_101830578);
              }
              uint64_t v27 = *(void *)(a1 + 32);
              int v38 = 134284033;
              uint64_t v39 = a2;
              __int16 v40 = 2049;
              uint64_t v41 = v34;
              __int16 v42 = 2049;
              uint64_t v43 = v27;
              LODWORD(v33) = 32;
              uint64_t v22 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[CLAudioAccessoryInterface] Got TimeSync ID device:%{private}p tsID:0x%{private}llx clock:%{private}p",  &v38,  v33);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)",  "%s\n");
              goto LABEL_52;
            }
          }

          else
          {
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_101830578);
            }
            uint64_t v28 = (os_log_s *)qword_1019345C8;
            if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "[CLAuDioAccessoryInterface] Failed to get the TimeSync clock",  buf,  2u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019345C0 != -1) {
                dispatch_once(&qword_1019345C0, &stru_101830578);
              }
              LOWORD(v38) = 0;
              LODWORD(v33) = 2;
              uint64_t v16 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAuDioAccessoryInterface] Failed to get the TimeSync clock",  &v38,  v33);
              goto LABEL_51;
            }
          }
        }
      }

      else
      {
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        uint64_t v21 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] Failed to get the TimeSync clock manager",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          LOWORD(v38) = 0;
          LODWORD(v33) = 2;
          uint64_t v16 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] Failed to get the TimeSync clock manager",  &v38,  v33);
          goto LABEL_51;
        }
      }

      return;
    case 8:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v19 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134283521;
        uint64_t v45 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "[CLAudioAccessoryInterface] TIMESYNC_NOT_AVAILABLE device:%{private}p",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        int v38 = 134283521;
        uint64_t v39 = a2;
        __int16 v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[CLAudioAccessoryInterface] TIMESYNC_NOT_AVAILABLE device:%{private}p",  &v38,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)",  "%s\n",  v32);
      }

      uint64_t v20 = *(void **)(a1 + 32);
      if (v20)
      {

        *(void *)(a1 + 32) = 0LL;
      }

      return;
    default:
      return;
  }

uint64_t sub_1002EA62C(uint64_t a1)
{
  return sub_1002E9B34( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(unsigned int *)(a1 + 52));
}

void sub_1002EA63C(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  __int16 v4 = a4;
  if (sub_1002EABC4(a3, a4))
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v8 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[HeadphoneUsage] Interface: Bluetooth daily usage event received. Parsing data.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      LOWORD(v19) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[HeadphoneUsage] Interface: Bluetooth daily usage event received. Parsing data.",  &v19,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)",  "%s\n",  v14);
    }

    uint64_t v9 = sub_1002EB340((uint64_t)a3, v4);
    if (v9)
    {
      uint64_t v10 = (uint64_t)v9;
      if (!sub_1002ECAF8(*(void *)(a1 + 8), a2, v9))
      {
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        uint64_t v11 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] Error retrieving serial numbers, will omit from message.",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101830578);
          }
          LOWORD(v19) = 0;
          LODWORD(v18) = 2;
          int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] Error retrieving serial numbers, will omit from message.",  &v19,  v18);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)",  "%s\n",  v17);
        }
      }

      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v12 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138477827;
        uint64_t v22 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[HeadphoneUsage] Interface: Parsed metrics: %{private}@",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        int v19 = 138477827;
        uint64_t v20 = v10;
        LODWORD(v18) = 12;
        int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  1LL,  "[HeadphoneUsage] Interface: Parsed metrics: %{private}@",  &v19,  v18);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)",  "%s\n",  v15);
      }

      sub_1002E9224(a1, 1LL, v10);
    }

    else
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      int v13 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] Error forming metric dictionary, aborting.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        LOWORD(v19) = 0;
        LODWORD(v18) = 2;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] Error forming metric dictionary, aborting.",  &v19,  v18);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)",  "%s\n",  v16);
      }
    }
  }

BOOL sub_1002EABC4(_BYTE *a1, unint64_t a2)
{
  if (a2 <= 5)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v2 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] isValidDailyUsageMessage: Invalid header size",  buf,  2u);
    }

    BOOL v3 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] isValidDailyUsageMessage: Invalid header size");
LABEL_10:
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)",  "%s\n");
LABEL_38:
      if (v6 != buf) {
        free(v6);
      }
      return 0LL;
    }

    return result;
  }

  if (*a1 != 4)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v12 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[HeadphoneUsage] Ignoring, not an AACP Log Message ",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[HeadphoneUsage] Ignoring, not an AACP Log Message ");
LABEL_37:
    uint64_t v6 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)",  "%s\n");
    goto LABEL_38;
  }

  int v7 = a1[3] & 0x3F;
  if (v7 != 1)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v14 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      int v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[HeadphoneUsage] isValidDailyUsageMessage: Ignoring message type (%d) that is not DailyUsage",  buf,  8u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[HeadphoneUsage] isValidDailyUsageMessage: Ignoring message type (%d) that is not DailyUsage",  &v19);
    goto LABEL_37;
  }

  int v8 = a1[5];
  if ((v8 - 7) > 1)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v15 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[HeadphoneUsage] Unexpected AWD version %d",  buf,  8u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  1LL,  "[HeadphoneUsage] Unexpected AWD version %d",  &v19);
    goto LABEL_37;
  }

  int v9 = word_1012E5BE8[15 * a1[5] + 1];
  int v10 = (unsigned __int16)(a2 - 4);
  if (v10 == v9)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v11 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[HeadphoneUsage] Bluetooth message passed sanity checks.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      LOWORD(v19) = 0;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[HeadphoneUsage] Bluetooth message passed sanity checks.",  &v19,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)",  "%s\n",  v18);
    }

    return 1LL;
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v16 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109888;
      int v21 = v8;
      __int16 v22 = 1024;
      int v23 = 1;
      __int16 v24 = 1024;
      int v25 = v9;
      __int16 v26 = 1024;
      int v27 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "[HeadphoneUsage] Unexpected AWD data length for AWDVersion %d: type %d expected len %d actual %d. Header mismatc h with Bluetooth likely.",  buf,  0x1Au);
    }

    BOOL v17 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v17)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "[HeadphoneUsage] Unexpected AWD data length for AWDVersion %d: type %d expected len %d actual %d. Header mi smatch with Bluetooth likely.",  &v19,  26);
      goto LABEL_10;
    }
  }

  return result;
}

NSMutableDictionary *sub_1002EB340(uint64_t a1, __int16 a2)
{
  unsigned __int16 v2 = a2 - 4;
  BOOL v3 = (const void *)(a1 + 4);
  size_t v4 = (unsigned __int16)(a2 - 4);
  if (v4 <= 0x2D4) {
    size_t v5 = 725LL - (unsigned __int16)(a2 - 4);
  }
  else {
    size_t v5 = 0LL;
  }
  bzero(&__dst[v2], v5);
  memcpy(__dst, v3, v4);
  v183[0] = @"bud_type";
  v184[0] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", __dst[0]);
  v183[1] = @"awd_length";
  v184[1] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v12);
  v183[2] = @"awd_version";
  v184[2] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", __dst[1]);
  v183[3] = @"status";
  v184[3] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", __dst[2]);
  v183[4] = @"signature";
  v184[4] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v13);
  v183[5] = @"product_id";
  v184[5] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v14);
  v183[6] = @"sw_version";
  v184[6] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v15);
  v183[7] = @"case_hw_version";
  v184[7] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v16);
  v183[8] = @"case_sw_version";
  v184[8] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v17);
  v183[9] = @"a2dp_time_mode_off_l";
  v184[9] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v18);
  v183[10] = @"a2dp_time_mode_anc_l";
  v184[10] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v19);
  v183[11] = @"a2dp_time_mode_trcy_l";
  v184[11] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v20);
  v183[12] = @"a2dp_time_mode_unused_l";
  v184[12] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v21);
  v183[13] = @"hfp_time_off_l";
  v184[13] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v22);
  v183[14] = @"hfp_time_anc_l";
  v184[14] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v23);
  v183[15] = @"hfp_time_trcy_l";
  v184[15] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v24);
  v183[16] = @"hfp_time_unused_l";
  v184[16] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v25);
  v183[17] = @"idle_time_off_l";
  v184[17] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v26);
  v183[18] = @"idle_time_anc_l";
  v184[18] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v27);
  v183[19] = @"idle_time_trcy_l";
  v184[19] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v28);
  v183[20] = @"idle_time_unused_l";
  v184[20] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v29);
  v183[21] = @"a2dp_battery_usage_l";
  v184[21] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v30);
  v183[22] = @"hfp_battery_usage_l";
  v184[22] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v31);
  v183[23] = @"idle_battery_usage_l";
  v184[23] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v32);
  v183[24] = @"a2dp_bud_temp_max_l";
  v184[24] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v33);
  v183[25] = @"hfp_bud_temp_max_l";
  v184[25] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v34);
  v183[26] = @"a2dp_bud_temp_avg_l";
  v184[26] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v35);
  v183[27] = @"hfp_bud_temp_avg_l";
  v184[27] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v36);
  v183[28] = @"time_out_of_ear_idle_l";
  v184[28] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v37);
  v183[29] = @"time_out_of_ear_incase_l";
  v184[29] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v38);
  v183[30] = @"ied_activated_count_l";
  v184[30] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v39);
  v183[31] = @"fw_update_retry_count_l";
  v184[31] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v40);
  v183[32] = @"bud_charging_cycle_l";
  v184[32] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v41);
  v183[33] = @"a2dp_time_mode_off_r";
  v184[33] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v42);
  v183[34] = @"a2dp_time_mode_anc_r";
  v184[34] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v43);
  v183[35] = @"a2dp_time_mode_trcy_r";
  v184[35] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v44);
  v183[36] = @"a2dp_time_mode_unused_r";
  v184[36] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v45);
  v183[37] = @"hfp_time_off_r";
  v184[37] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v46);
  v183[38] = @"hfp_time_anc_r";
  v184[38] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v47);
  v183[39] = @"hfp_time_trcy_r";
  v184[39] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v48);
  v183[40] = @"hfp_time_unused_r";
  v184[40] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v49);
  v183[41] = @"idle_time_off_r";
  v184[41] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v50);
  v183[42] = @"idle_time_anc_r";
  v184[42] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v51);
  v183[43] = @"idle_time_trcy_r";
  v184[43] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v52);
  v183[44] = @"idle_time_unused_r";
  v184[44] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v53);
  v183[45] = @"a2dp_battery_usage_r";
  v184[45] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v54);
  v183[46] = @"hfp_battery_usage_r";
  v184[46] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v55);
  v183[47] = @"idle_battery_usage_r";
  v184[47] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v56);
  v183[48] = @"a2dp_bud_temp_max_r";
  v184[48] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v57);
  v183[49] = @"hfp_bud_temp_max_r";
  v184[49] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v58);
  v183[50] = @"a2dp_bud_temp_avg_r";
  v184[50] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v59);
  v183[51] = @"hfp_bud_temp_avg_r";
  v184[51] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v60);
  v183[52] = @"time_out_of_ear_idle_r";
  v184[52] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v61);
  v183[53] = @"time_out_of_ear_incase_r";
  v184[53] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v62);
  v183[54] = @"ied_activated_count_r";
  v184[54] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v63);
  v183[55] = @"fw_update_retry_count_r";
  v184[55] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v64);
  v183[56] = @"bud_charging_cycle_r";
  v184[56] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v65);
  v183[57] = @"a2dp_time_both_in_ear_off";
  v184[57] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v66);
  v183[58] = @"a2dp_time_both_in_ear_anc";
  v184[58] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v67);
  v183[59] = @"a2dp_time_both_in_ear_trcy";
  v184[59] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v68);
  v183[60] = @"a2dp_time_both_in_ear_unused";
  v184[60] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v69);
  v183[61] = @"hfp_time_both_in_ear_off";
  v184[61] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v70);
  v183[62] = @"hfp_time_both_in_ear_anc";
  v184[62] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v71);
  v183[63] = @"hfp_time_both_in_ear_trcy";
  v184[63] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v72);
  v183[64] = @"hfp_time_both_in_ear_unused";
  v184[64] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v73);
  v183[65] = @"idle_time_both_in_ear_off";
  v184[65] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v74);
  v183[66] = @"idle_time_both_in_ear_anc";
  v184[66] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v75);
  v183[67] = @"idle_time_both_in_ear_trcy";
  v184[67] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v76);
  v183[68] = @"idle_time_both_in_ear_unused";
  v184[68] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v77);
  v183[69] = @"time_both_out_of_ear_idle";
  v184[69] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v78);
  v183[70] = @"time_out_of_ear_both_incase";
  v184[70] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v79);
  v183[71] = @"hs_on_acc_cnt";
  v184[71] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v80);
  v183[72] = @"siri_on_source_cnt";
  v184[72] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v81);
  v183[73] = @"siri_on_accessory_cnt";
  v184[73] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v82);
  v183[74] = @"total_time_in_connect_session";
  v184[74] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v83);
  v183[75] = @"bud_swap_count";
  v184[75] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v84);
  v183[76] = @"bud_daily_charging_soc_delta_l";
  v184[76] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v86);
  v183[77] = @"bud_daily_charging_soc_delta_r";
  v184[77] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v87);
  v183[78] = @"bud_max_daily_temp_during_chr_l";
  v184[78] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v88);
  v183[79] = @"bud_max_daily_temp_during_chr_r";
  v184[79] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v89);
  v183[80] = @"bud_avg_daily_temp_during_chr_l";
  v184[80] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v90);
  v183[81] = @"bud_avg_daily_temp_during_chr_r";
  v184[81] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v91);
  v183[82] = @"case_soc_delta_bud_chr";
  v184[82] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v92);
  v183[83] = @"case_temp_max_while_discharging";
  v184[83] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v93);
  v183[84] = @"case_temp_avg_daily";
  v184[84] = +[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v94);
  v183[85] = @"case_at_maxchr_time_in_day";
  v184[85] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v95);
  v183[86] = @"case_charging_cycle";
  v184[86] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v96);
  v183[87] = @"source_conn_productid_1";
  v184[87] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v97);
  v183[88] = @"source_conn_productid_2";
  v184[88] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v98);
  v183[89] = @"source_conn_productid_3";
  v184[89] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v99);
  v183[90] = @"source_conn_productid_4";
  v184[90] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v100);
  v183[91] = @"source_conn_productid_5";
  v184[91] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v101);
  v183[92] = @"source_conn_time_1";
  v184[92] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v102);
  v183[93] = @"source_conn_time_2";
  v184[93] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v103);
  v183[94] = @"source_conn_time_3";
  v184[94] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v104);
  v183[95] = @"source_conn_time_4";
  v184[95] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v105);
  v183[96] = @"source_conn_time_5";
  v184[96] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v106);
  v183[97] = @"sw_version_ext";
  v184[97] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v107[5]);
  v183[98] = @"triangle_conn_time";
  v184[98] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v108);
  v183[99] = @"hw_version";
  v184[99] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v109);
  v183[100] = @"double_tap_cnt_l";
  v184[100] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v110);
  v183[101] = @"single_tap_cnt_l";
  v184[101] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v111);
  v183[102] = @"press_hold_l";
  v184[102] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v112);
  v183[103] = @"ied_detect_l";
  v184[103] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v113);
  v183[104] = @"crash_cnt_l";
  v184[104] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v114[2]);
  v183[105] = @"bud_mileage_l";
  v184[105] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)&v122[14]);
  v183[106] = @"first_time_use_l";
  v184[106] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v123);
  v183[107] = @"double_tap_cnt_r";
  v184[107] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v124);
  v183[108] = @"single_tap_cnt_r";
  v184[108] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v125);
  v183[109] = @"press_hold_r";
  v184[109] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v126);
  v183[110] = @"ied_detect_r";
  v184[110] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v127);
  v183[111] = @"crash_cnt_r";
  v184[111] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v128[2]);
  v183[112] = @"bud_mileage_r";
  v184[112] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)&v136[14]);
  v183[113] = @"first_time_use_r";
  v184[113] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v137);
  v183[114] = @"scp_active_time";
  v184[114] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v138);
  v183[115] = @"scp_ohd_time";
  v184[115] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v139);
  v183[116] = @"scp_fwup_time";
  v184[116] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v140);
  v183[117] = @"scp_idle_time";
  v184[117] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v141);
  v183[118] = @"scp_ttop_time";
  v184[118] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v142);
  v183[119] = @"scp_prioff_time";
  v184[119] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v143);
  v183[120] = @"scp_up_to_active";
  v184[120] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v144);
  v183[121] = @"scp_up_to_ohd";
  v184[121] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v145);
  v183[122] = @"scp_up_to_fwup";
  v184[122] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v146);
  v183[123] = @"scp_up_to_idle";
  v184[123] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v147);
  v183[124] = @"scp_up_to_ttop";
  v184[124] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v148);
  v183[125] = @"scp_down_to_ohd";
  v184[125] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v149);
  v183[126] = @"scp_down_to_fwup";
  v184[126] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v150);
  v183[127] = @"scp_down_to_idle";
  v184[127] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v151);
  v183[128] = @"scp_down_to_ttop";
  v184[128] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v152);
  v183[129] = @"scp_down_to_prioff";
  v184[129] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v153);
  v183[130] = @"scp_bt_disc";
  v184[130] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v154);
  v183[131] = @"scp_bt_conn";
  v184[131] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v155);
  v183[132] = @"scp_bt_a2dp";
  v184[132] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v156);
  v183[133] = @"scp_bt_call";
  v184[133] = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v157);
  v183[134] = @"scp_scp_b2p_timeout";
  v184[134] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v158);
  v183[135] = @"scp_scp_b2p_tx_retry";
  v184[135] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v159);
  v183[136] = @"scp_scp_b2p_rx_error";
  v184[136] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v160);
  v183[137] = @"scp_scp_b2p_tx_raw";
  v184[137] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v161);
  v183[138] = @"scp_scp_b2p_rx_raw";
  v184[138] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v162);
  v183[139] = @"scp_pri_b2p_timeout";
  v184[139] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v163);
  v183[140] = @"scp_pri_b2p_tx_retry";
  v184[140] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v164);
  v183[141] = @"scp_pri_b2p_rx_error";
  v184[141] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v165);
  v183[142] = @"scp_pri_b2p_tx_raw";
  v184[142] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v166);
  v183[143] = @"scp_pri_b2p_rx_raw";
  v184[143] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v167);
  v183[144] = @"scp_chun_tx_error";
  v184[144] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v168);
  v183[145] = @"scp_chun_rx_error";
  v184[145] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v169);
  v183[146] = @"scp_chun_unlock";
  v184[146] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v170);
  v183[147] = @"scp_chun_missed_frame";
  v184[147] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v171);
  v183[148] = @"appleID_paired_count";
  v184[148] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v172);
  v183[149] = @"uvlo_count_l";
  v184[149] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v173);
  v183[150] = @"time_since_last_uvlo_l";
  v184[150] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v174);
  v183[151] = @"low_batt_signal_count_l";
  v184[151] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v175);
  v183[152] = @"num_sessions_l";
  v184[152] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v176);
  v183[153] = @"flash_pe_count_l";
  v184[153] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v177);
  v183[154] = @"bud_color_l";
  v184[154] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v178);
  v183[155] = @"uvlo_count_r";
  v184[155] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v179);
  v183[156] = @"time_since_last_uvlo_r";
  v184[156] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v180);
  v183[157] = @"low_batt_signal_count_r";
  v184[157] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v181);
  v183[158] = @"num_sessions_r";
  v184[158] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[58]);
  v183[159] = @"flash_pe_count_r";
  v184[159] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[59]);
  v183[160] = @"bud_color_r";
  v184[160] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[60]);
  v183[161] = @"case_charge_event_count";
  v184[161] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v85);
  v183[162] = @"system_color";
  v184[162] = +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[61]);
  uint64_t v6 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v184,  v183,  163LL));
  sub_1002ED26C((uint64_t)@"array_rfu", 5, 4u, (uint64_t)v107, v6, 0);
  sub_1002ED26C((uint64_t)@"ied_histogram_l", 2, 2u, (uint64_t)v114, v6, 0);
  sub_1002ED26C((uint64_t)@"a2dp_time_ext_l", 4, 2u, (uint64_t)&v115, v6, 0);
  sub_1002ED26C((uint64_t)@"hfp_time_ext_l", 4, 2u, (uint64_t)&v116, v6, 0);
  sub_1002ED26C((uint64_t)@"idle_time_ext_l", 4, 2u, (uint64_t)&v117, v6, 0);
  sub_1002ED26C((uint64_t)@"a2dp_battery_usage_ext_l", 8, 2u, (uint64_t)&v118, v6, 0);
  sub_1002ED26C((uint64_t)@"hfp_battery_usage_ext_l", 8, 2u, (uint64_t)&v119, v6, 0);
  sub_1002ED26C((uint64_t)@"idle_battery_usage_ext_l", 8, 2u, (uint64_t)&v120, v6, 0);
  sub_1002ED26C((uint64_t)@"array_rfu_l", 5, 4u, (uint64_t)&v121, v6, 0);
  sub_1002ED26C((uint64_t)@"volume_his_l", 7, 2u, (uint64_t)v122, v6, 0);
  sub_1002ED26C((uint64_t)@"ied_histogram_r", 2, 2u, (uint64_t)v128, v6, 0);
  sub_1002ED26C((uint64_t)@"a2dp_time_ext_r", 4, 2u, (uint64_t)&v129, v6, 0);
  sub_1002ED26C((uint64_t)@"hfp_time_ext_r", 4, 2u, (uint64_t)&v130, v6, 0);
  sub_1002ED26C((uint64_t)@"idle_time_ext_r", 4, 2u, (uint64_t)&v131, v6, 0);
  sub_1002ED26C((uint64_t)@"a2dp_battery_usage_ext_r", 8, 2u, (uint64_t)&v132, v6, 0);
  sub_1002ED26C((uint64_t)@"hfp_battery_usage_ext_r", 8, 2u, (uint64_t)&v133, v6, 0);
  sub_1002ED26C((uint64_t)@"idle_battery_usage_ext_r", 8, 2u, (uint64_t)&v134, v6, 0);
  sub_1002ED26C((uint64_t)@"array_rfu_r", 5, 4u, (uint64_t)&v135, v6, 0);
  sub_1002ED26C((uint64_t)@"volume_his_r", 7, 2u, (uint64_t)v136, v6, 0);
  uint64_t v7 = 0LL;
  int v8 = (unsigned __int16 *)v182;
  do
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v8 - 71)),  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bud_start_soc_at_undock_l_%u",  v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v8 - 70)),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"bud_end_soc_at_dock_l_%u", v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)((char *)v8 - 69)),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"length_of_session_l_%u", v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v8 - 2)),  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bud_start_soc_at_undock_r_%u",  v7));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v8 - 1)),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"bud_end_soc_at_dock_r_%u", v7));
    unsigned int v9 = *v8;
    v8 += 2;
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v9),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"length_of_session_r_%u", v7++));
  }

  while (v7 != 15);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[62]),  @"case_hw_version_maj");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[63]),  @"case_hw_version_min");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[64]),  @"case_hw_version_rev");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[65]),  @"case_sw_version_maj");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[66]),  @"case_sw_version_min");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[67]),  @"case_sw_version_rev");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v182[68]),  @"appleID_hijack_cnt");
  return v6;
}

BOOL sub_1002ECAF8(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    unsigned __int16 v14 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v37[0] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[HeadphoneUsage] BT Accessory Manager no longer exists, cannot retrieve serial numbers,device:%@",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v34 = 138412290;
    v35[0] = a2;
    unsigned __int16 v15 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[HeadphoneUsage] BT Accessory Manager no longer exists, cannot retrieve serial numbers,device:%@",  &v34,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSM utableDictionary * _Nonnull)",  "%s\n");
LABEL_56:
    if (v15 != buf) {
      free(v15);
    }
    return 0LL;
  }

  uint64_t v6 = -[NSMutableData initWithLength:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithLength:", 1000LL);
  uint64_t v33 = 0LL;
  int AccessoryInfo = BTAccessoryManagerGetAccessoryInfo( a1,  a2,  -[NSMutableData mutableBytes](v6, "mutableBytes"),  &v33,  -[NSMutableData length](v6, "length"));
  if (AccessoryInfo) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v33 == 0;
  }
  if (v8)
  {
    int v9 = AccessoryInfo;

    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v10 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      LODWORD(v37[0]) = v9;
      WORD2(v37[0]) = 2048;
      *(void *)((char *)v37 + 6) = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] Error: Unable to retrieve data,status:%d,infoLen:%zu",  buf,  0x12u);
    }

    BOOL v11 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (!v11) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    int v34 = 67109376;
    LODWORD(v35[0]) = v9;
    WORD2(v35[0]) = 2048;
    *(void *)((char *)v35 + 6) = v33;
    uint64_t v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] Error: Unable to retrieve data,status:%d,infoLen:%zu",  &v34,  18);
    goto LABEL_55;
  }

  -[NSMutableData setLength:](v6, "setLength:");
  id v16 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v6,  0LL,  0LL);

  uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  char isKindOfClass = objc_opt_isKindOfClass(v16, v17);
  if ((isKindOfClass & 1) == 0)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    unsigned __int16 v27 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] Error: Accessory info dictionary is of unexpected class.",  buf,  2u);
    }

    BOOL v28 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (!v28) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    LOWORD(v34) = 0;
    uint64_t v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] Error: Accessory info dictionary is of unexpected class.",  &v34,  2);
    goto LABEL_55;
  }

  id v19 = [v16 objectForKeyedSubscript:@"AACPVersionInfo"];
  uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v19, v20) & 1) == 0 || (unint64_t)[v19 count] < 0xA)
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    unsigned __int16 v29 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] Error: AACPVersionInfo array of unexpected type or size.",  buf,  2u);
    }

    BOOL v30 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (!v30) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    LOWORD(v34) = 0;
    uint64_t v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] Error: AACPVersionInfo array of unexpected type or size.",  &v34,  2);
    goto LABEL_55;
  }

  id v21 = [v19 objectAtIndex:3];
  id v22 = [v19 objectAtIndex:8];
  id v23 = [v19 objectAtIndex:9];
  uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v21, v24) & 1) != 0)
  {
    uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v22, v25) & 1) != 0)
    {
      uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSString);
      if ((objc_opt_isKindOfClass(v23, v26) & 1) != 0)
      {
        [a3 setObject:v21 forKeyedSubscript:@"serial_number_system"];
        [a3 setObject:v22 forKeyedSubscript:@"serial_number_left"];
        [a3 setObject:v23 forKeyedSubscript:@"serial_number_right"];
        return 1LL;
      }
    }
  }

  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_101830578);
  }
  unsigned __int8 v31 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] Error: Expected serial number as NSString*, got different type.",  buf,  2u);
  }

  BOOL v32 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v32)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    LOWORD(v34) = 0;
    uint64_t v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] Error: Expected serial number as NSString*, got different type.",  &v34,  2);
LABEL_55:
    unsigned __int16 v15 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSM utableDictionary * _Nonnull)",  "%s\n");
    goto LABEL_56;
  }

  return result;
}

void sub_1002ED240(id a1)
{
  qword_1019345C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_1002ED26C(uint64_t a1, int a2, unsigned int a3, uint64_t a4, void *a5, int a6)
{
  if (a3 - 9 > 0xFFFFFFF7)
  {
    if (a1 && a4 && a5)
    {
      unsigned int v12 = a3 * a2;
      if (a3 * a2)
      {
        unsigned int v14 = 0;
        int v15 = a3 - 1;
        do
        {
          switch(v15)
          {
            case 0:
              unint64_t v16 = *(unsigned __int8 *)(a4 + v14);
              break;
            case 1:
              unint64_t v16 = *(unsigned __int16 *)(a4 + v14);
              break;
            case 2:
              unint64_t v16 = *(unsigned __int16 *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 2) << 16);
              break;
            case 3:
              unint64_t v16 = *(unsigned int *)(a4 + v14);
              break;
            case 4:
              unint64_t v16 = *(unsigned int *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 4) << 32);
              break;
            case 5:
              unint64_t v16 = *(unsigned int *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 5) << 40);
              break;
            case 6:
              unint64_t v16 = *(unsigned int *)(a4 + v14) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a4 + v14 + 6) << 48);
              break;
            case 7:
              unint64_t v16 = *(void *)(a4 + v14);
              break;
            default:
              unint64_t v16 = 0LL;
              break;
          }

          if (a6) {
            uint64_t v17 = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v16);
          }
          else {
            uint64_t v17 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v16);
          }
          [a5 setObject:v17, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@_%u", a1, v14 / a3) forKey];
          v14 += a3;
        }

        while (v14 < v12);
      }
    }

    else
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      unsigned __int16 v18 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        uint64_t v22 = a1;
        __int16 v23 = 2048;
        uint64_t v24 = a4;
        __int16 v25 = 2112;
        uint64_t v26 = a5;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101830578);
        }
        *(_DWORD *)uint64_t v20 = 138412802;
        *(void *)&v20[4] = a1;
        *(_WORD *)&v20[12] = 2048;
        *(void *)&v20[14] = a4;
        *(_WORD *)&v20[22] = 2112;
        BOOL v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@",  v20,  32,  *(_OWORD *)v20,  *(void *)&v20[16],  a5);
        goto LABEL_39;
      }
    }
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101830578);
    }
    uint64_t v7 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v22) = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid value for bytesPerEntry: %u",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101830578);
      }
      BOOL v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid value for bytesPerEntry: %u",  v20);
LABEL_39:
      id v19 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void BT::CLAudioAccessoryHelper::addExpandedArrayToDictionary(NSString * _Nonnull, uint32_t, uint8_t, uin t8_t * _Nonnull, NSMutableDictionary * _Nonnull, BOOL)",  "%s\n",  v8);
      if (v19 != buf) {
        free(v19);
      }
    }
  }

uint64_t *sub_1002ED6A0(void *a1, void *a2)
{
  BOOL result = sub_1002ED6D4(a1, a2);
  if (result)
  {
    sub_10005BE78(a1, result);
    return (uint64_t *)1;
  }

  return result;
}

void *sub_1002ED6D4(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  BOOL v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  BOOL result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      BOOL result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *sub_1002ED7C0(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    BOOL v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  unint64_t i = operator new(0x18uLL);
  *unint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100019E10(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  id v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *unint64_t i = *v21;
LABEL_38:
    *id v21 = i;
    goto LABEL_39;
  }

  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    id v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_1002ED9FC(_Unwind_Exception *a1)
{
}

void *sub_1002EDA10(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69LL * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69LL * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }

    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }

    unsigned int v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }

          else
          {
            v14 &= v10 - 1;
          }

          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }

  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0LL;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0LL;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1LL;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }

    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }

  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unint64_t i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }

  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }

    else
    {
      v23 &= v10 - 1;
    }

    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }

void sub_1002EDC50(_Unwind_Exception *a1)
{
}

void sub_1002EDDBC(id a1)
{
  qword_101994188 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLLocationStreamingConnectionManagerSilo");
}

void sub_1002EDE2C(id a1)
{
  if (objc_opt_class(&OBJC_CLASS___IDSService))
  {
    sub_1004F2598();
  }

id sub_1002EE024(uint64_t a1, void *a2)
{
  return _[a2 pairedDeviceIsNearby:*(unsigned __int8 *)(*(void *)(a1 + 32) + 9)];
}

id sub_1002EE248(uint64_t a1, void *a2)
{
  return _[a2 pairedDeviceIsNearby:*(unsigned __int8 *)(*(void *)(a1 + 32) + 9)];
}

void sub_1002EE3C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    unint64_t v3 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289282;
      v4[1] = 0;
      __int16 v5 = 2082;
      unint64_t v6 = "";
      __int16 v7 = 2114;
      uint64_t v8 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:failed to activate #Rapport link, Error:%{public, location:escape_only}@}",  (uint8_t *)v4,  0x1Cu);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
  }

id sub_1002EE4C0(uint64_t a1, void *a2)
{
  if ([a2 model]) {
    unint64_t v4 = (const char *)objc_msgSend(objc_msgSend(a2, "model"), "UTF8String");
  }
  else {
    unint64_t v4 = "Unknown Model";
  }
  if ([a2 name]) {
    __int16 v5 = (const char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String");
  }
  else {
    __int16 v5 = "Unknown Name";
  }
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_101830788);
  }
  unint64_t v6 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    unint64_t v10 = "";
    __int16 v11 = 2082;
    unsigned int v12 = v4;
    __int16 v13 = 2081;
    unint64_t v14 = v5;
    __int16 v15 = 2082;
    id v16 = objc_msgSend(objc_msgSend(a2, "effectiveIdentifier"), "UTF8String");
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Rapport discovered nearby device, model:%{public, location:escape_only}s, name:% {private, location:escape_only}s, effectiveID:%{public, location:escape_only}s}",  (uint8_t *)v8,  0x30u);
  }

  return [*(id *)(a1 + 32) updateNearbyStatusWithCompanionLinkDevice:a2 didConnect:1];
}

id sub_1002EE634(uint64_t a1, void *a2)
{
  if ([a2 model]) {
    unint64_t v4 = (const char *)objc_msgSend(objc_msgSend(a2, "model"), "UTF8String");
  }
  else {
    unint64_t v4 = "Unknown Model";
  }
  if ([a2 name]) {
    __int16 v5 = (const char *)objc_msgSend(objc_msgSend(a2, "name"), "UTF8String");
  }
  else {
    __int16 v5 = "Unknown Name";
  }
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_101830788);
  }
  unint64_t v6 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    unint64_t v10 = "";
    __int16 v11 = 2082;
    unsigned int v12 = v4;
    __int16 v13 = 2081;
    unint64_t v14 = v5;
    __int16 v15 = 2082;
    id v16 = objc_msgSend(objc_msgSend(a2, "effectiveIdentifier"), "UTF8String");
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Rapport lost nearby device, model:%{public, location:escape_only}s, name:%{priva te, location:escape_only}s, effectiveID:%{public, location:escape_only}s}",  (uint8_t *)v8,  0x30u);
  }

  return [*(id *)(a1 + 32) updateNearbyStatusWithCompanionLinkDevice:a2 didConnect:0];
}

void sub_1002EE7A8(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageKeyPayload"];
  id v5 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageKeyType"];
  if (v5)
  {
    unint64_t v6 = v5;
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    __int16 v7 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2082;
      id v22 = [v6 UTF8String];
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Rapport Got message, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    signed int v8 = objc_msgSend( objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLLocationStreamingMessageKeyVersion"),  "intValue");
    sub_1002EEB90();
    sub_1010DDBC0(buf, (char *)[v6 UTF8String]);
    uint64_t v9 = sub_10008E8D0((uint64_t)&qword_1019941A8, (const void **)buf);
    if (SBYTE3(v22) < 0) {
      operator delete(*(void **)buf);
    }
    if ((uint64_t *)v9 == &qword_1019941B0)
    {
      int v10 = -1;
      int v11 = -1;
    }

    else
    {
      int v11 = *(_DWORD *)(v9 + 56);
      int v10 = *(_DWORD *)(v9 + 60);
      if (v8 >= v11 && v8 <= v10)
      {
        unsigned int v12 = *(void **)(a1 + 32);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        void v17[2] = sub_1002EEC24;
        v17[3] = &unk_101830678;
        v17[4] = v6;
        v17[5] = v4;
        [v12 withClients:v17];
        return;
      }
    }

    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    __int16 v15 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v6 UTF8String];
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2082;
      id v22 = v16;
      __int16 v23 = 1026;
      signed int v24 = v8;
      __int16 v25 = 1026;
      int v26 = v11;
      __int16 v27 = 1026;
      int v28 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Received message of unsupported version, type:%{public, location:escape_only}s, d eclared version:%{public}d, minimum version:%{public}d, maximum version:%{public}d}",  buf,  0x2Eu);
    }
  }

  else
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    __int16 v13 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2113;
      id v22 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#Rapport Missing message type, message:%{private, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_101830788);
      }
    }

    unint64_t v14 = (os_log_s *)qword_101934998;
    if (os_signpost_enabled((os_log_t)qword_101934998))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2113;
      id v22 = a2;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Rapport Missing message type",  "{msg%{public}.0s:#Rapport Missing message type, message:%{private, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

void sub_1002EEB6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EEB90()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019941C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1019941C0))
  {
    qword_1019941B8 = 0LL;
    qword_1019941B0 = 0LL;
    qword_1019941A8 = (uint64_t)&qword_1019941B0;
    __cxa_atexit((void (*)(void *))sub_1002F0778, &qword_1019941A8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1019941C0);
  }

  if (qword_1019941C8 != -1) {
    dispatch_once(&qword_1019941C8, &stru_1018307A8);
  }
}

id sub_1002EEC24(uint64_t a1, void *a2)
{
  return _[a2 receivedMessageOfType:*(void *)(a1 + 32) withPayload:*(void *)(a1 + 40)];
}

void sub_1002EEE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    id v4 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:IDS service failed to initialize, Error:%{public, location:escape_only}@}",  (uint8_t *)&v8,  0x1Cu);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_101830788);
      }
    }

    id v5 = (os_log_s *)qword_101934998;
    if (os_signpost_enabled((os_log_t)qword_101934998))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "IDS service failed to initialize",  "{msg%{public}.0s:IDS service failed to initialize, Error:%{public, location:escape_only}@}",  (uint8_t *)&v8,  0x1Cu);
    }
  }

  else
  {
    [*(id *)(a1 + 32) setService:a2];
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    __int16 v7 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:IDS became available so resuming silo}",  (uint8_t *)&v8,  0x12u);
    }

    [*(id *)(a1 + 40) resume];
  }

id sub_1002EF638(uint64_t a1, void *a2)
{
  return _[a2 failedToSendMessage:*(void *)(a1 + 32) withError:*(void *)(a1 + 40) isFatal:*(_BYTE *)(a1 + 48) == 0];
}

void sub_1002EF9DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1002EFA0C(uint64_t a1, uint64_t a2)
{
}

void sub_1002EFA1C(uint64_t a1)
{
}

id sub_1002EFA28(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = a2;
  if (a2) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
  }
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    unint64_t v3 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
    {
      id v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "messageType"), "UTF8String");
      *(_DWORD *)buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      __int16 v19 = 2082;
      *(void *)size_t v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Rapport Send success, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1002EFC98;
    v13[3] = &unk_101830600;
    id v5 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    unint64_t v6 = v13;
  }

  else
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101830788);
    }
    __int16 v7 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      id v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "messageType"), "UTF8String");
      *(_DWORD *)buf = 68289794;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      __int16 v19 = 1026;
      *(_DWORD *)size_t v20 = v8;
      *(_WORD *)&v20[4] = 2114;
      *(void *)&v20[6] = v9;
      __int16 v21 = 2082;
      id v22 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning #Rapport failed to send event, writtenToNetworkStack:%{public}d, error :%{public, location:escape_only}@, type:%{public, location:escape_only}s}",  buf,  0x2Cu);
    }

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    _DWORD v14[2] = sub_1002EFC80;
    v14[3] = &unk_101830718;
    id v5 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    v14[4] = *(void *)(a1 + 32);
    v14[5] = v11;
    unint64_t v6 = v14;
  }

  return [v5 withClients:v6];
}

id sub_1002EFC80(uint64_t a1, void *a2)
{
  return _[a2 failedToSendMessage:*(void *)(a1 + 32) withError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isFatal:0];
}

id sub_1002EFC98(uint64_t a1, void *a2)
{
  return _[a2 successfullySentMessage:*(void *)(a1 + 32)];
}

id sub_1002EFCA4(void *a1, void *a2)
{
  return _[a2 failedToSendMessage:a1[4] withError:*(void *)(*(void *)(a1[5] + 8) + 40) isFatal:*(_BYTE *)(*(void *)(a1[6] + 8) + 24) == 0];
}

void sub_1002F01AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1002F01D0(uint64_t a1, void *a2)
{
  return _[a2 receivedMessageOfType:*(void *)(a1 + 32) withPayload:*(void *)(a1 + 40)];
}

id sub_1002F0650(uint64_t a1, void *a2)
{
  return _[a2 failedToSendMessage:*(void *)(a1 + 32) withError:*(void *)(a1 + 40) isFatal:0];
}

id sub_1002F0660(uint64_t a1, void *a2)
{
  return _[a2 successfullySentMessage:*(void *)(a1 + 32)];
}

void sub_1002F074C(id a1)
{
  qword_101934998 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_1002F0778(uint64_t a1)
{
  return a1;
}

void sub_1002F07A0(id a1)
{
  if (sub_1004F7500())
  {
    sub_1010DDBC0(__p, (char *)[@"kCLLocationStreamingMessageTypeRequestLocation" UTF8String]);
    unint64_t v3 = __p;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    sub_1010DDBC0(__p, (char *)[@"kCLLocationStreamingMessageTypeSetMotionAlarm" UTF8String]);
    unint64_t v3 = __p;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1004F2598();
  if (sub_1001B9A1C())
  {
    sub_1010DDBC0(__p, (char *)[@"kCLLocationStreamingMessageTypeLocation" UTF8String]);
    unint64_t v3 = __p;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    sub_1010DDBC0(__p, (char *)[@"kCLLocationStreamingMessageTypeAliveAgain" UTF8String]);
    unint64_t v3 = __p;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    sub_1010DDBC0(__p, (char *)[@"kCLLocationStreamingMessageTypeMotionAlarmUpdate" UTF8String]);
    unint64_t v3 = __p;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1002F0990( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F09BC(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1002F09E8()
{
  unsigned __int8 v0 = operator new(0x98uLL);
  sub_1007B7318((uint64_t)v0, @"com.apple.locationd", 0);
  *unsigned __int8 v0 = off_1018307F8;
  v0[17] = 0LL;
  v0[18] = 0LL;
  qword_1019A0E38 = (uint64_t)v0;
  uint64_t v1 = qword_1019A0E38;
  char v2 = operator new(0x20uLL);
  void *v2 = &off_101830BD8;
  v2[1] = 0LL;
  v2[2] = 0LL;
  v2[3] = v1;
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 144);
  *(void *)(v1 + 136) = v1;
  *(void *)(v1 + 144) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1002F0AD4(void *a1)
{
}

void sub_1002F0AE0(_Unwind_Exception *a1)
{
}

void sub_1002F0B04(void *a1@<X8>)
{
  if (qword_1019A0E30 != -1) {
    dispatch_once_f(&qword_1019A0E30, 0LL, (dispatch_function_t)sub_1002F09E8);
  }
  uint64_t v2 = *(void *)(qword_1019A0E38 + 144);
  *a1 = *(void *)(qword_1019A0E38 + 136);
  a1[1] = v2;
  if (v2)
  {
    unint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

uint64_t sub_1002F0B74(void *a1)
{
  *a1 = off_1018307F8;
  sub_10000AE14((uint64_t)(a1 + 17));
  return sub_1007B7380(a1);
}

void sub_1002F0BA4(void *a1)
{
  *a1 = off_1018307F8;
  sub_10000AE14((uint64_t)(a1 + 17));
  uint64_t v2 = (void *)sub_1007B7380(a1);
  operator delete(v2);
}

void sub_1002F0BDC(std::__shared_weak_count *a1)
{
}

uint64_t sub_1002F0BF4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1002F0C34(uint64_t a1, const __CFString *a2, char a3, uint64_t a4)
{
  int v8 = sub_1002A51A4((void *)a1);
  void *v8 = off_101830C38;
  *((_BYTE *)v8 + 16) = 0;
  *(_OWORD *)(v8 + 3) = 0u;
  uint64_t v9 = (void **)(v8 + 3);
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[10] = a4;
  v8[11] = -1LL;
  *((_BYTE *)v8 + 96) = a3;
  sub_1002A51A4(v8 + 13);
  *(void *)(a1 + 104) = &off_101831000;
  sub_1002A51A4((void *)(a1 + 120));
  *(void *)(a1 + 120) = &off_101831000;
  *(void *)(a1 + 72) = a2;
  CFRetain(a2);
  CFRetain(*(CFTypeRef *)(a1 + 80));
  sub_1002A6C50(*(const __CFString **)(a1 + 80), &v53);
  if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    id v10 = &v53;
  }
  else {
    id v10 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  uint64_t v11 = getpwnam((const char *)v10);
  if (v11)
  {
    *(void *)(a1 + 88) = *(void *)&v11->pw_uid;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    __int16 v12 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      uint64_t v13 = &v53;
      if ((v53.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v13 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "could not read user %{public}s uid/gid",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
      unsigned __int16 v44 = &v53;
      if ((v53.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unsigned __int16 v44 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      LODWORD(v54.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      unsigned __int16 v45 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not read user %{public}s uid/gid",  &v54,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLPreferences::CLPreferences(CFStringRef, BOOL, CFStringRef)",  "%s\n",  (const char *)v45);
      if (v45 != buf) {
        free(v45);
      }
    }
  }

  else {
    std::string __dst = v53;
  }
  sub_100309778((uint64_t *)&__dst, &v52);
  unint64_t v14 = std::string::append(&v52, "/Library/Preferences/");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  sub_1002A6C50(a2, &v50);
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v16 = &v50;
  }
  else {
    int v16 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v50.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
  }
  unint64_t v18 = std::string::append(&v54, (const std::string::value_type *)v16, size);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(&__p, ".plist");
  if ((v49 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v21 = v49;
  }
  else {
    std::string::size_type v21 = v48;
  }
  id v22 = std::string::append(buf, p_p, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v55[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v55 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v24 = v22->__r_.__value_.__s.__size_;
  v22->__r_.__value_.__l.__size_ = 0LL;
  v22->__r_.__value_.__l.__cap_ = 0LL;
  v22->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v25 = v55[0];
  *(void *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v25;
  *(void *)(a1 + 39) = *(void *)((char *)v55 + 7);
  *(_BYTE *)(a1 + 47) = v24;
  else {
    std::string v46 = v53;
  }
  sub_100309908((uint64_t)&v46, &v52);
  int v26 = std::string::append(&v52, "/");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  sub_1002A6C50(a2, &v50);
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v28 = &v50;
  }
  else {
    int v28 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v29 = v50.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v29 = v50.__r_.__value_.__l.__size_;
  }
  BOOL v30 = std::string::append(&v54, (const std::string::value_type *)v28, v29);
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(&__p, ".plist");
  if ((v49 & 0x80u) == 0) {
    BOOL v32 = (const std::string::value_type *)&__p;
  }
  else {
    BOOL v32 = (const std::string::value_type *)__p;
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v33 = v49;
  }
  else {
    std::string::size_type v33 = v48;
  }
  int v34 = std::string::append(buf, v32, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
  v55[0] = v34->__r_.__value_.__l.__size_;
  *(void *)((char *)v55 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v36 = v34->__r_.__value_.__s.__size_;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v37 = v55[0];
  *(void *)(a1 + 48) = v35;
  *(void *)(a1 + 56) = v37;
  *(void *)(a1 + 63) = *(void *)((char *)v55 + 7);
  *(_BYTE *)(a1 + 71) = v36;
  unsigned int v38 = getpwnam("root");
  BOOL v42 = 0;
  if (v38)
  {
    unsigned __int16 v39 = v38;
    uid_t pw_uid = v38->pw_uid;
    if (pw_uid == getuid())
    {
      gid_t pw_gid = v39->pw_gid;
      if (pw_gid == getgid()) {
        BOOL v42 = 1;
      }
    }
  }

  *(_BYTE *)(a1 + 16) = v42;
  sub_1002F13B4(a1);
  return a1;
}

void sub_1002F121C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, void *__p, uint64_t a44, int a45, __int16 a46, char a47, char a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  sub_1002A5554(v65);
  sub_1002A5554(v64);
  sub_1002A5554((void *)v63);
  _Unwind_Resume(a1);
}

BOOL sub_1002F13B4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 48);
  sub_1002A59D4(a1 + 120, (uint64_t)v2);
  int v3 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesAnyHost);
  if (*(_BYTE *)(a1 + 16)) {
    sub_1002F14E0(a1, 0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1019941D0);
  return v3 != 0;
}

void sub_1002F1438(_Unwind_Exception *a1)
{
}

void *sub_1002F1458(uint64_t a1)
{
  *(void *)a1 = off_101830C38;
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
  sub_1002A5554((void *)(a1 + 120));
  sub_1002A5554((void *)(a1 + 104));
  return sub_1002A5554((void *)a1);
}

void sub_1002F14CC(uint64_t a1)
{
  uint64_t v1 = sub_1002F1458(a1);
  operator delete(v1);
}

void sub_1002F14E0(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 96)) {
    return;
  }
  if (a2)
  {
    int v3 = (const char **)(a1 + 24);
    int v4 = *(char *)(a1 + 47);
    unint64_t v5 = (const char *)(a1 + 24);
    if (v4 < 0) {
      unint64_t v5 = *v3;
    }
    if (stat(v5, &v49))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
      CFTypeRef v6 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v7 = v3;
        int v8 = *__error();
        buf[0].st_dev = 136315394;
        *(void *)&buf[0].int st_mode = v7;
        WORD2(buf[0].st_ino) = 1024;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning could not check %s (errno %d)",  (uint8_t *)buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018313D8);
        }
        uint64_t v9 = qword_101934A78;
        int v10 = *__error();
        int v50 = 136315394;
        unsigned __int16 v51 = v3;
        __int16 v52 = 1024;
        uid_t st_uid = v10;
        uint64_t v11 = (stat *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  0LL,  "#Warning could not check %s (errno %d)",  (const char *)&v50,  18);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPreferences::setFileAttributes(BOOL)", "%s\n");
LABEL_68:
        if (v11 != buf) {
          free(v11);
        }
        return;
      }

      return;
    }

    if (v49.st_uid == *(_DWORD *)(a1 + 88) && v49.st_gid == *(_DWORD *)(a1 + 92) && (~v49.st_mode & 0x1B6) == 0) {
      return;
    }
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    __int16 v12 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = (const char *)(a1 + 24);
      gid_t v14 = *(_DWORD *)(a1 + 88);
      int v15 = *(_DWORD *)(a1 + 92);
      buf[0].st_dev = 136316674;
      *(void *)&buf[0].int st_mode = v13;
      WORD2(buf[0].st_ino) = 1024;
      *(_DWORD *)((char *)&buf[0].st_ino + 6) = v49.st_uid;
      HIWORD(buf[0].st_uid) = 1024;
      buf[0].st_gid = v14;
      LOWORD(buf[0].st_rdev) = 1024;
      *(dev_t *)((char *)&buf[0].st_rdev + 2) = v49.st_gid;
      *((_WORD *)&buf[0].st_rdev + 3) = 1024;
      LODWORD(buf[0].st_atimespec.tv_sec) = v15;
      WORD2(buf[0].st_atimespec.tv_sec) = 1024;
      *(_DWORD *)((char *)&buf[0].st_atimespec.tv_sec + 6) = v49.st_mode;
      WORD1(buf[0].st_atimespec.tv_nsec) = 1024;
      HIDWORD(buf[0].st_atimespec.tv_nsec) = 438;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting",  (uint8_t *)buf,  0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
      int v39 = *(_DWORD *)(a1 + 88);
      int v40 = *(_DWORD *)(a1 + 92);
      int v50 = 136316674;
      unsigned __int16 v51 = v3;
      __int16 v52 = 1024;
      uid_t st_uid = v49.st_uid;
      __int16 v54 = 1024;
      *(_DWORD *)unsigned __int8 v55 = v39;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v49.st_gid;
      __int16 v56 = 1024;
      int v57 = v40;
      __int16 v58 = 1024;
      int st_mode = v49.st_mode;
      __int16 v60 = 1024;
      int v61 = 438;
      unsigned int v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting",  (const char *)&v50,  48,  v49.st_dev,  LODWORD(v49.st_ino),  v49.st_uid,  v49.st_rdev,  LODWORD(v49.st_atimespec.tv_sec));
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLPreferences::setFileAttributes(BOOL)", "%s\n", v41);
    }
  }

  int v16 = (char **)(a1 + 24);
  __int16 v17 = (char *)(a1 + 24);
  unint64_t v18 = (__CFString *)sub_1002A6F04(v17);
  if (v18)
  {
    __int128 v19 = v18;
    size_t v20 = (char *)objc_msgSend(-[__CFString pathComponents](v18, "pathComponents"), "count") - 1;
    if ((unint64_t)v20 >= 2)
    {
      std::string::size_type v21 = v19;
      do
      {
        std::string::size_type v21 = (__CFString *)-[__CFString stringByDeletingLastPathComponent](v21, "stringByDeletingLastPathComponent");
        if ((-[__CFString isEqualToString:](v21, "isEqualToString:", @"/var") & 1) == 0
          && (-[__CFString isEqualToString:](v21, "isEqualToString:", @"/tmp") & 1) == 0
          && !lstat((const char *)-[__CFString fileSystemRepresentation](v21, "fileSystemRepresentation"), buf)
          && (buf[0].st_mode & 0xF000) == 0xA000)
        {
          sub_1012348D4();
        }

        --v20;
      }

      while ((unint64_t)v20 > 1);
    }

    CFRelease(v19);
  }

  id v22 = (const char *)(a1 + 24);
  if (!lstat(v22, &v49))
  {
    std::string::size_type v23 = (const char *)(a1 + 24);
    if (lchmod(v23, 0x1B6u))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
      unsigned __int8 v24 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        uint64_t v25 = (char *)(a1 + 24);
        int v26 = *__error();
        __int128 v27 = __error();
        int v28 = strerror(*v27);
        buf[0].st_dev = 136446722;
        *(void *)&buf[0].int st_mode = v25;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v26;
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "could not lchmod %{public}s errno %{public}d (%{public}s)",  (uint8_t *)buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018313D8);
        }
        uint64_t v42 = qword_101934A78;
        unsigned __int16 v43 = (char *)(a1 + 24);
        int v44 = *__error();
        unsigned __int16 v45 = __error();
        std::string v46 = strerror(*v45);
        int v50 = 136446722;
        unsigned __int16 v51 = v43;
        __int16 v52 = 1026;
        uid_t st_uid = v44;
        __int16 v54 = 2082;
        *(void *)unsigned __int8 v55 = v46;
        LODWORD(v48) = 28;
        unsigned __int16 v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v42,  17LL,  "could not lchmod %{public}s errno %{public}d (%{public}s)",  &v50,  v48);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLPreferences::setFileAttributes(BOOL)", "%s\n", v47);
      }
    }

    std::string::size_type v29 = (const char *)(a1 + 24);
    if (lchown(v29, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92)))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
      BOOL v30 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        __int128 v31 = (char *)(a1 + 24);
        int v32 = *__error();
        std::string::size_type v33 = __error();
        int v34 = strerror(*v33);
        buf[0].st_dev = 136446722;
        *(void *)&buf[0].int st_mode = v31;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v32;
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_FAULT,  "could not lchown %{public}s errno %{public}d (%{public}s)",  (uint8_t *)buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018313D8);
        }
        uint64_t v35 = qword_101934A78;
        int v36 = *__error();
        uint64_t v37 = __error();
        unsigned int v38 = strerror(*v37);
        int v50 = 136446722;
        unsigned __int16 v51 = v16;
        __int16 v52 = 1026;
        uid_t st_uid = v36;
        __int16 v54 = 2082;
        *(void *)unsigned __int8 v55 = v38;
        LODWORD(v48) = 28;
        uint64_t v11 = (stat *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v35,  17LL,  "could not lchown %{public}s errno %{public}d (%{public}s)",  &v50,  v48);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLPreferences::setFileAttributes(BOOL)", "%s\n");
        goto LABEL_68;
      }
    }
  }

uint64_t sub_1002F1D98(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

CFArrayRef sub_1002F1DA0(CFStringRef *a1)
{
  BOOL result = CFPreferencesCopyKeyList(a1[9], a1[10], kCFPreferencesCurrentHost);
  if (result)
  {
    int v3 = result;
    CFPreferencesSetMultiple(0LL, result, a1[9], a1[10], kCFPreferencesCurrentHost);
    CFRelease(v3);
    return (const __CFArray *)((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
  }

  return result;
}

uint64_t sub_1002F1E20(CFStringRef *a1, CFStringRef key)
{
  return ((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
}

CFIndex sub_1002F1E64(uint64_t a1)
{
  uint64_t v1 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  CFRelease(v2);
  return Count;
}

CFIndex sub_1002F1EB8(uint64_t a1, CFStringRef key)
{
  uint64_t v2 = (const __CFArray *)CFPreferencesCopyValue( key,  *(CFStringRef *)(a1 + 72),  *(CFStringRef *)(a1 + 80),  kCFPreferencesCurrentHost);
  if (!v2) {
    return 0LL;
  }
  int v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFArrayGetTypeID()) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 1LL;
  }
  CFRelease(v3);
  return Count;
}

uint64_t sub_1002F1F30()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    v3[0] = 0;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "***not supported***",  v3,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLPreferences::serialize(CFDataRef *) const", "%s\n", v2);
  }

  return 0LL;
}

uint64_t sub_1002F20B8()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    v3[0] = 0;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "***not supported***",  v3,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLPreferences::serializeBinary(CFDataRef *) const", "%s\n", v2);
  }

  return 0LL;
}

uint64_t sub_1002F2240()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    v3[0] = 0;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "***not supported***",  v3,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLPreferences::deserialize(const CFDataRef)", "%s\n", v2);
  }

  return 0LL;
}

void sub_1002F23C8(const __CFString *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a2 + 912LL))(a2, a1, &cf))
  {
    sub_1002B12A0(a1, (const __CFString *)cf);
    CFRelease(cf);
  }

void sub_1002F2420(CFStringRef *a1)
{
  if (qword_101934A80 != -1) {
    dispatch_once(&qword_101934A80, &stru_1018313F8);
  }
  if (os_log_type_enabled((os_log_t)qword_101934A88, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v2 = CFPreferencesCopyKeyList(a1[9], a1[10], kCFPreferencesCurrentHost);
    int v3 = v2;
    if (v2 && CFArrayGetCount(v2))
    {
      v8.length = CFArrayGetCount(v3);
      v8.location = 0LL;
      CFArrayApplyFunction(v3, v8, (CFArrayApplierFunction)sub_1002F23C8, a1);
      CFRelease(v3);
    }

    else
    {
      if (qword_101934A80 != -1) {
        dispatch_once(&qword_101934A80, &stru_1018313F8);
      }
      CFTypeID v4 = (os_log_s *)qword_101934A88;
      if (os_log_type_enabled((os_log_t)qword_101934A88, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "\t<empty>", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A80 != -1) {
          dispatch_once(&qword_101934A80, &stru_1018313F8);
        }
        v6[0] = 0;
        unint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A88,  2LL,  "\t<empty>",  v6,  2);
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLPreferences::print() const", "%s\n", v5);
      }

      if (v3) {
        CFRelease(v3);
      }
    }
  }

id sub_1002F26A0(uint64_t a1)
{
  id v2 = [(id)sub_1002A59CC(a1 + 104) mutableCopy];
  CFDictionaryRef v3 = CFPreferencesCopyMultiple(0LL, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  [v2 addEntriesFromDictionary:v3];
  CFRelease(v3);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1019941D0);
  [v2 addEntriesFromDictionary:sub_1002A59CC(a1 + 120)];
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1019941D0);
  return v2;
}

void sub_1002F2734(_Unwind_Exception *a1)
{
}

void sub_1002F274C()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    v2[0] = 0;
    uint64_t v1 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "***not supported***",  v2,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual void CLPreferences::merge(const CLPreferences &, BOOL)", "%s\n", v1);
  }

uint64_t sub_1002F28D0()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    v3[0] = 0;
    id v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "***not supported***",  v3,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLPreferences::loadFromFile(const char *)", "%s\n", v2);
  }

  return 0LL;
}

uint64_t sub_1002F2A58()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    v3[0] = 0;
    id v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "***not supported***",  v3,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLPreferences::saveToFile(const char *) const", "%s\n", v2);
  }

  return 0LL;
}

uint64_t sub_1002F2BE0()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    v3[0] = 0;
    id v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "***not supported***",  v3,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLPreferences::saveToBinaryFile(const char *) const",  "%s\n",  v2);
  }

  return 0LL;
}

void sub_1002F2D68(uint64_t a1, CFStringRef key, CFPropertyListRef value)
{
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018313D8);
    }
    unint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      CFTypeRef v6 = &v22;
      sub_1002A6C50(key, &v22);
      if ((v22.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        CFTypeRef v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      sub_1002A6C50(*(const __CFString **)(a1 + 72), &v21);
      int size = (char)v21.__r_.__value_.__s.__size_;
      std::string::size_type v8 = v21.__r_.__value_.__r.__words[0];
      sub_1002A6C50(*(const __CFString **)(a1 + 80), &__p);
      uint64_t v9 = &v21;
      if (size < 0) {
        uint64_t v9 = (std::string *)v8;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v25 = v6;
      __int16 v26 = 2082;
      __int128 v27 = v9;
      __int16 v28 = 2082;
      std::string::size_type v29 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
      uint64_t v11 = qword_101934A78;
      sub_1002A6C50(key, &v21);
      if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v12 = &v21;
      }
      else {
        __int16 v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      sub_1002A6C50(*(const __CFString **)(a1 + 72), &__p);
      int v13 = (char)__p.__r_.__value_.__s.__size_;
      std::string::size_type v14 = __p.__r_.__value_.__r.__words[0];
      sub_1002A6C50(*(const __CFString **)(a1 + 80), &v19);
      int v15 = &__p;
      if (v13 < 0) {
        int v15 = (std::string *)v14;
      }
      if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v16 = &v19;
      }
      else {
        int v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      LODWORD(v22.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(v22.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v22.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
      HIWORD(v22.__r_.__value_.__r.__words[2]) = 2082;
      std::string::size_type v23 = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  17LL,  "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!",  &v22,  32);
      unint64_t v18 = v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)",  "%s\n",  v18);
    }
  }

  else
  {
    CFPreferencesSetValue(key, value, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
    (*(void (**)(uint64_t))(*(void *)a1 + 848LL))(a1);
  }

void sub_1002F30DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002F3144(uint64_t a1, const __CFString *a2, void *a3)
{
  if (sub_1002AB310(a1 + 120, a2, a3)) {
    return 1LL;
  }
  CFPropertyListRef v6 = CFPreferencesCopyValue(a2, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  *a3 = v6;
  return v6 || sub_1002AB310(a1 + 104, a2, a3);
}

void sub_1002F31C0()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    unsigned __int8 v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      CFPropertyListRef v6 = "";
      __int16 v7 = 2082;
      std::string::size_type v8 = "assert";
      __int16 v9 = 2081;
      int v10 = "0";
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      *(_DWORD *)buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      CFPropertyListRef v6 = "";
      __int16 v7 = 2082;
      std::string::size_type v8 = "assert";
      __int16 v9 = 2081;
      int v10 = "0";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
    }

    id v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      CFPropertyListRef v6 = "";
      __int16 v7 = 2082;
      std::string::size_type v8 = "assert";
      __int16 v9 = 2081;
      int v10 = "0";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPreferences.mm",  327,  "containsInternal");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }

CFStringRef sub_1002F33E0()
{
  return @"OtherPref";
}

void sub_1002F33EC(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1002F3418(id a1)
{
  qword_101934A88 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
}

double sub_1002F3444()
{
  unsigned __int8 v0 = (char *)operator new(0xB0uLL);
  uint64_t v1 = sub_10071542C();
  sub_1006DC9EC((uint64_t)v0, (uint64_t)"DeviceMotionLite", 10);
  *(void *)unsigned __int8 v0 = off_101831448;
  *((void *)v0 + 4) = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *((_WORD *)v0 + 76) = 0;
  *((void *)v0 + 20) = 0LL;
  *(_DWORD *)(v0 + 167) = 0;
  qword_1019A0E40 = (uint64_t)v0;
  return result;
}

void sub_1002F34CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1002F34E0()
{
  if (qword_1019941D8 != -1) {
    dispatch_once(&qword_1019941D8, &stru_101831418);
  }
  return qword_1019A0E40;
}

double sub_1002F3524(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1006DC9EC(a1, (uint64_t)"DeviceMotionLite", 10);
  *(void *)uint64_t v3 = off_101831448;
  *(void *)(v3 + 32) = a2;
  double result = 0.0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_WORD *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0LL;
  *(_DWORD *)(v3 + 167) = 0;
  return result;
}

void *sub_1002F3590(void *a1)
{
  *a1 = off_101831448;
  uint64_t v2 = (uint64_t)(a1 + 5);
  sub_1002F73F0(a1 + 13);
  sub_1002F73F0(a1 + 7);
  sub_10000AE14(v2);
  return sub_1006DCAA8(a1);
}

void sub_1002F35DC(void *a1)
{
  uint64_t v1 = sub_1002F3590(a1);
  operator delete(v1);
}

BOOL sub_1002F35F0()
{
  unsigned __int8 v0 = IOServiceMatching("AppleEmbeddedBluetoothSensors");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  io_service_t v2 = MatchingService;
  if (MatchingService) {
    IOObjectRelease(MatchingService);
  }
  return v2 != 0;
}

void sub_1002F3644(uint64_t a1, int a2)
{
  if (sub_1002F35F0())
  {
    if (!*(void *)(a1 + 40))
    {
      uint64_t v4 = sub_1006E27E8();
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3321888768LL;
      v23[2] = sub_1002F3A9C;
      __int128 v23[3] = &unk_101831478;
      v23[4] = a1;
      v23[5] = 0x100000FF00LL;
      char v24 = 0;
      sub_1006E28B8(v4, (uint64_t)v23);
    }

    BOOL v22 = 0;
    uint64_t v5 = sub_1006E27E8();
    sub_100413284(v5, buf);
    sub_1002A6F64(*(uint64_t *)buf, "DeviceMotionLiteForceDebug", &v22);
    CFPropertyListRef v6 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    if (*(_BYTE *)(a1 + 170) && v22 && a2)
    {
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      __int16 v9 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Forcing debug mode", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018314C0);
        }
        LOWORD(v25[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Forcing debug mode",  v25,  2);
        size_t v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::configureDeviceMotionLite(CLMotionTypeDeviceMotionLiteConfigure)",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      int v10 = &off_1018D3140;
    }

    else
    {
      uint64_t v11 = &off_1018D3128;
      if (a2 == 1) {
        uint64_t v11 = &off_1018D3158;
      }
      if (a2 == 2) {
        int v10 = &off_1018D3140;
      }
      else {
        int v10 = v11;
      }
    }

    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    __int16 v12 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
    {
      unsigned int v13 = [v10 intValue];
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Setting DeviceMotionLite ReportInterval to %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      uint64_t v15 = qword_101934568;
      unsigned int v16 = [v10 intValue];
      v25[0] = 67240192;
      v25[1] = v16;
      LODWORD(v21) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  1LL,  "Setting DeviceMotionLite ReportInterval to %{public}d",  v25,  v21);
      unint64_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::configureDeviceMotionLite(CLMotionTypeDeviceMotionLiteConfigure)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  @"ReportInterval",  v10);
    std::string::size_type v14 = *(uint64_t **)(a1 + 40);
    if (a2) {
      sub_100719D78(v14, (uint64_t)sub_1002F3B54, a1);
    }
    else {
      sub_100719D78(v14, 0LL, 0LL);
    }
  }

void sub_1002F3A80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1002F3A9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  io_service_t v2 = *(uint64_t **)(v1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 48);
  sub_10121B774(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_10005F550(v1 + 40, &v8);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  sub_100719D78(*(uint64_t **)(v1 + 40), (uint64_t)sub_1002F3B54, v1);
  sub_10071A408(*(void *)(v1 + 40), (uint64_t)sub_1002F3B58, v1);
  sub_1002F3BB8(v1);
}

void sub_1002F3B58(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002F3DC0;
  v3[3] = &unk_10181D3D0;
  v3[4] = a1;
  sub_1006E28B8(v2, (uint64_t)v3);
}

void sub_1002F3BB8(uint64_t a1)
{
  *(_BYTE *)(a1 + 170) = objc_msgSend( (id)(*(uint64_t (**)(void, const __CFString *))(**(void **)(a1 + 40) + 24))( *(void *)(a1 + 40),  @"UsesCompass"),  "BOOLValue");
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  uint64_t v2 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 170)) {
      uint64_t v3 = "is";
    }
    else {
      uint64_t v3 = "is not";
    }
    *(_DWORD *)buf = 136446210;
    int v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "DeviceMotionLite %{public}s using compass",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    if (*(_BYTE *)(a1 + 170)) {
      uint64_t v4 = "is";
    }
    else {
      uint64_t v4 = "is not";
    }
    int v7 = 136446210;
    __int128 v8 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "DeviceMotionLite %{public}s using compass",  &v7,  12);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDeviceMotionLiteService::refreshUsingCompass()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void sub_1002F3DC0(uint64_t a1)
{
}

uint64_t sub_1002F3DC8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = *(_BYTE *)(a3 + 1) - *(_BYTE *)(a1 + 153);
  if (v6 >= 2u)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    int v7 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 153);
      int v9 = *(unsigned __int8 *)(a3 + 1);
      LODWORD(buf) = 67240448;
      DWORD1(buf) = v8;
      WORD4(buf) = 1026;
      *(_DWORD *)((char *)&buf + 10) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Jump in message sequence number: last=%{public}d, this=%{public}d",  (uint8_t *)&buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      int v24 = *(unsigned __int8 *)(a1 + 153);
      int v25 = *(unsigned __int8 *)(a3 + 1);
      LODWORD(v29) = 67240448;
      HIDWORD(v29) = v24;
      LOWORD(v30) = 1026;
      *(_DWORD *)((char *)&v30 + 2) = v25;
      __int16 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Jump in message sequence number: last=%{public}d, this=%{public}d",  &v29,  14);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleRawSensorV2Msg(uint64_t, RawSensorV2Msg &)",  "%s\n",  v26);
    }
  }

  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a3 + 1);
  uint64_t v29 = *(void *)(a1 + 160);
  unint64_t v30 = a2;
  v10.i32[0] = *(__int16 *)(a3 + 6);
  v10.i32[1] = *(__int16 *)(a3 + 8);
  float32x2_t v11 = (float32x2_t)vdup_n_s32(0x37800000u);
  float32x2_t v31 = vmul_f32(vmul_f32(vcvt_f32_s32(v10), (float32x2_t)0x4200000042000000LL), v11);
  float v32 = (float)((float)*(__int16 *)(a3 + 10) * 32.0) * 0.000015259;
  *(double *)&__int128 buf = (double)a2;
  sub_1006DD528(a1, 4LL, (uint64_t)&v29, 32LL);
  uint64_t v12 = 0LL;
  char v13 = 1;
  float32x2_t v14 = (float32x2_t)vdup_n_s32(0x457A0000u);
  do
  {
    char v15 = v13;
    *(void *)&__int128 buf = *(void *)(a1 + 160) + 5000 * v12;
    *((void *)&buf + 1) = a2;
    float v34 = (float)*(__int16 *)(a3 + 24) / 100.0;
    unsigned int v16 = (__int16 *)(a3 + 6 * v12);
    v17.i32[0] = v16[6];
    v17.i32[1] = v16[7];
    float32x2_t v35 = vmul_f32(vmul_f32(vcvt_f32_s32(v17), v14), v11);
    float v36 = (float)((float)v16[8] * 4000.0) * 0.000015259;
    v28[0] = (double)a2;
    sub_1006DD528(a1, 5LL, (uint64_t)&buf, 32LL);
    char v13 = 0;
    uint64_t v12 = 1LL;
  }

  while ((v15 & 1) != 0);
  *(void *)(a1 + 160) += 10000LL * v6;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  unint64_t v18 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a1 + 160);
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Updating mag timestamp to %{public}llu",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    uint64_t v22 = *(void *)(a1 + 160);
    LODWORD(v28[0]) = 134349056;
    *(void *)((char *)v28 + 4) = v22;
    LODWORD(v27) = 12;
    std::string::size_type v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Updating mag timestamp to %{public}llu",  v28,  v27);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleRawSensorV2Msg(uint64_t, RawSensorV2Msg &)",  "%s\n",  v23);
  }

  *(void *)&__int128 buf = *(void *)(a1 + 160);
  *((void *)&buf + 1) = a2;
  float32_t v20 = (float)*(__int16 *)(a3 + 28) * 0.075;
  float v34 = (float)*(__int16 *)(a3 + 26) * 0.075;
  v35.f32[0] = v20;
  v35.f32[1] = (float)*(__int16 *)(a3 + 30) * 0.075;
  v28[0] = (double)a2;
  return sub_1006DD528(a1, 6LL, (uint64_t)&buf, 32LL);
}

float sub_1002F42B0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float v4 = *(float *)(a3 + 4);
  float v5 = *(float *)(a3 + 8);
  double v6 = *(float *)a3;
  float v7 = (float)*(__int16 *)(a3 + 20) / 1000.0;
  float v8 = (float)*(__int16 *)(a3 + 22);
  *(double *)a4 = sqrtf( fmaxf( (float)((float)(1.0 - (float)(*(float *)a3 * *(float *)a3)) - (float)(v4 * v4)) - (float)(v5 * v5),  0.0));
  *(double *)(a4 + 8) = v6;
  *(double *)(a4 + 16) = v4;
  *(double *)(a4 + 24) = v5;
  *(float32x4_t *)(a4 + 32) = vdivq_f32( vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(a3 + 12))),  (float32x4_t)vdupq_n_s32(0x447A0000u));
  float result = v8 / 1000.0;
  *(float *)(a4 + 48) = v7;
  *(float *)(a4 + 52) = v8 / 1000.0;
  *(void *)(a4 + 56) = 0LL;
  *(void *)(a4 + 64) = 0LL;
  *(void *)(a4 + 72) = 0LL;
  *(void *)(a4 + 80) = a2;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a1 + 170);
  *(void *)(a4 + 107) = 0LL;
  *(void *)(a4 + 92) = 0LL;
  *(void *)(a4 + 100) = 0LL;
  return result;
}

void sub_1002F4348(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(_BYTE *)(a3 + 24) & 0xC0;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  float v7 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(a3 + 24);
    *(_DWORD *)__int128 buf = 67240448;
    int v15 = v6;
    __int16 v16 = 1026;
    int v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "FusedWithStatus msgType,%{public}u,infoByte,%{public}u",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    int v9 = *(unsigned __int8 *)(a3 + 24);
    v11[0] = 67240448;
    v11[1] = v6;
    __int16 v12 = 1026;
    int v13 = v9;
    int32x2_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "FusedWithStatus msgType,%{public}u,infoByte,%{public}u",  v11,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleFusedSizedStruct(uint64_t, FusedStructWithStatus &)",  "%s\n",  v10);
  }

  if (v6 == 64) {
    sub_1002F4548(a1, a2, a3);
  }
  else {
    sub_1002F4EB8(a1, a2, a3);
  }
}

void sub_1002F4548(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 25);
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  float v7 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a1 + 168);
    uint64_t v9 = *(void *)(a1 + 144);
    *(_DWORD *)__int128 buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v8;
    __int16 v56 = 2050;
    uint64_t v57 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "On-start data from remote seqNo,%{public}u,fLastOnStartDebugSeqNo,%{public}u,bufferSize,%{public}zu",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    int v37 = *(unsigned __int8 *)(a1 + 168);
    uint64_t v38 = *(void *)(a1 + 144);
    *(_DWORD *)__str = 67240704;
    *(_DWORD *)unsigned __int16 v51 = v6;
    *(_WORD *)&v51[4] = 1026;
    *(_DWORD *)&v51[6] = v37;
    __int16 v52 = 2050;
    uint64_t v53 = v38;
    int v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "On-start data from remote seqNo,%{public}u,fLastOnStartDebugSeqNo,%{public}u,bufferSize,%{public}zu",  __str,  24);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)",  "%s\n",  v39);
    if (v39 != buf) {
      free(v39);
    }
  }

  int32x2_t v10 = *(void ***)(a1 + 112);
  if (v6)
  {
    float32x2_t v11 = *(void ***)(a1 + 120);
    goto LABEL_16;
  }

  float32x2_t v11 = *(void ***)(a1 + 120);
  *(void *)(a1 + 144) = 0LL;
  unint64_t v12 = (char *)v11 - (char *)v10;
  if ((unint64_t)((char *)v11 - (char *)v10) >= 0x11)
  {
    do
    {
      operator delete(*v10);
      float32x2_t v11 = *(void ***)(a1 + 120);
      int32x2_t v10 = (void **)(*(void *)(a1 + 112) + 8LL);
      *(void *)(a1 + 112) = v10;
      unint64_t v12 = (char *)v11 - (char *)v10;
    }

    while ((unint64_t)((char *)v11 - (char *)v10) > 0x10);
  }

  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 2048LL;
    goto LABEL_14;
  }

  if (v13 == 2)
  {
    uint64_t v14 = 4096LL;
LABEL_14:
    *(void *)(a1 + 136) = v14;
  }

  *(_BYTE *)(a1 + 168) = 0;
LABEL_16:
  unint64_t v15 = *(void *)(a1 + 136) + *(void *)(a1 + 144);
  __int16 v16 = (char *)&v10[v15 >> 12];
  if (v11 == v10) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = *(void *)v16 + (v15 & 0xFFF);
  }
  sub_1002F7484((int64x2_t *)(a1 + 104), v16, v17, (char *)a3, (char *)(a3 + 24), 0x18uLL);
  if ((v6 - *(_BYTE *)(a1 + 168)) >= 2u)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    unint64_t v18 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)__int128 buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Jump in on-start sequence numbers last,%{public}u,this,%{public}u",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      int v40 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)__str = 67240448;
      *(_DWORD *)unsigned __int16 v51 = v6;
      *(_WORD *)&v51[4] = 1026;
      *(_DWORD *)&v51[6] = v40;
      LODWORD(v47) = 14;
      unsigned int v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Jump in on-start sequence numbers last,%{public}u,this,%{public}u",  __str,  v47);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)",  "%s\n",  v41);
      if (v41 != buf) {
        free(v41);
      }
    }

    float32_t v20 = *(void ***)(a1 + 112);
    uint64_t v21 = *(void *)(a1 + 120);
    *(void *)(a1 + 144) = 0LL;
    unint64_t v22 = v21 - (void)v20;
    if (v22 >= 0x11)
    {
      do
      {
        operator delete(*v20);
        uint64_t v23 = *(void *)(a1 + 120);
        float32_t v20 = (void **)(*(void *)(a1 + 112) + 8LL);
        *(void *)(a1 + 112) = v20;
        unint64_t v22 = v23 - (void)v20;
      }

      while (v22 > 0x10);
    }

    goto LABEL_46;
  }

  if (*(void *)(a1 + 144) >= 0xF0uLL)
  {
    for (uint64_t i = 0LL; i != 240; ++i)
    {
      int64x2_t v25 = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_1012CE4D0);
      v54[i] = *(_BYTE *)(*(void *)(*(void *)(a1 + 112) + ((*(void *)(a1 + 136) >> 9) & 0x7FFFFFFFFFFFF8LL))
                        + (*(void *)(a1 + 136) & 0xFFFLL));
      *(int64x2_t *)(a1 + 136) = v25;
      sub_1002F8718(a1 + 104, 1);
    }

    *(double *)__int128 buf = (double)a2;
    sub_1006DD528(a1, 9LL, (uint64_t)v54, 240LL);
    uint64_t v26 = 0LL;
    uint64_t v27 = __str;
    do
    {
      snprintf(v27, 3uLL, "%02hhX", v54[v26++]);
      v27 += 2;
    }

    while (v26 != 240);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    __int16 v28 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = __str;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "OnStartMsg: %{public}s", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      int v48 = 136446210;
      stat v49 = __str;
      LODWORD(v47) = 12;
      int v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "OnStartMsg: %{public}s",  &v48,  v47);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)",  "%s\n",  v44);
      if (v44 != buf) {
        free(v44);
      }
    }

    if (!*(void *)(a1 + 144)) {
      goto LABEL_57;
    }
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    uint64_t v29 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = *(void *)(a1 + 144);
      *(_DWORD *)__int128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Discarding %{public}zu bytes from onstart packet",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      unsigned __int16 v45 = *(char **)(a1 + 144);
      int v48 = 134349056;
      stat v49 = v45;
      LODWORD(v47) = 12;
      std::string v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "Discarding %{public}zu bytes from onstart packet",  &v48,  v47);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)",  "%s\n",  v46);
      if (v46 != buf) {
        free(v46);
      }
    }

    float32x2_t v31 = *(void ***)(a1 + 112);
    uint64_t v32 = *(void *)(a1 + 120);
    *(void *)(a1 + 144) = 0LL;
    unint64_t v22 = v32 - (void)v31;
    if (v22 >= 0x11)
    {
      do
      {
        operator delete(*v31);
        uint64_t v33 = *(void *)(a1 + 120);
        float32x2_t v31 = (void **)(*(void *)(a1 + 112) + 8LL);
        *(void *)(a1 + 112) = v31;
        unint64_t v22 = v33 - (void)v31;
      }

      while (v22 > 0x10);
    }

uint64_t sub_1002F4EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v7 = *(_WORD *)(a3 + 24);
  int v6 = (unsigned __int8 *)(a3 + 24);
  LOWORD(v44) = v7;
  BYTE2(v44) = v6[2];
  unsigned int v8 = *v6;
  int v9 = (v8 >> 4) & 3;
  int v10 = v8 & 0xF;
  LOWORD(v8) = ((v8 >> 4) & 3) - *(unsigned __int8 *)(a1 + 169) + 4;
  if ((v8 - ((v8 + ((unsigned __int16)(v8 & 0xC000) >> 14)) & 0xFC)) == 1)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    float32x2_t v11 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(unsigned __int8 *)(a1 + 169);
      int v13 = *v6;
      *(_DWORD *)__int128 buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v9;
      LOWORD(v84) = 1026;
      *(_DWORD *)((char *)&v84 + 2) = v10;
      HIWORD(v84) = 1026;
      *(_DWORD *)unsigned __int8 v85 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "handleFusedStruct(WithStatus) fLastFusedSeqNo,%{public}u,seqNo,%{public}u,rtc,%{public}u,byte,%{public}u",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      int v14 = *(unsigned __int8 *)(a1 + 169);
      int v15 = *v6;
      int v45 = 67240960;
      *(_DWORD *)std::string v46 = v14;
      *(_WORD *)&v46[4] = 1026;
      *(_DWORD *)&void v46[6] = v9;
      LOWORD(v47) = 1026;
      *(_DWORD *)((char *)&v47 + 2) = v10;
      HIWORD(v47) = 1026;
      *(_DWORD *)int v48 = v15;
      __int16 v16 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "handleFusedStruct(WithStatus) fLastFusedSeqNo,%{public}u,seqNo,%{public}u,rtc,%{public}u,byte,%{public}u",  &v45,  26);
LABEL_28:
      uint64_t v27 = (char *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStructWithStatus &)",  "%s\n",  v16);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

  else
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    uint64_t v17 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(unsigned __int8 *)(a1 + 169);
      int v19 = *v6;
      *(_DWORD *)__int128 buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v9;
      LOWORD(v84) = 1026;
      *(_DWORD *)((char *)&v84 + 2) = v10;
      HIWORD(v84) = 1026;
      *(_DWORD *)unsigned __int8 v85 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Jump in fused packet sequence number last,%{public}u,this,%{public}u,rtc,%{public}u,byte,%{public}u",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      int v25 = *(unsigned __int8 *)(a1 + 169);
      int v26 = *v6;
      int v45 = 67240960;
      *(_DWORD *)std::string v46 = v25;
      *(_WORD *)&v46[4] = 1026;
      *(_DWORD *)&void v46[6] = v9;
      LOWORD(v47) = 1026;
      *(_DWORD *)((char *)&v47 + 2) = v10;
      HIWORD(v47) = 1026;
      *(_DWORD *)int v48 = v26;
      __int16 v16 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Jump in fused packet sequence number last,%{public}u,this,%{public}u,rtc,%{public}u,byte,%{public}u",  &v45,  26);
      goto LABEL_28;
    }
  }

  *(_BYTE *)(a1 + 169) = v9;
  unsigned int v20 = BYTE2(v44);
  unsigned int v21 = BYTE1(v44);
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  unint64_t v22 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134222848;
    *(double *)&uint8_t buf[4] = v31;
    *(_WORD *)&_BYTE buf[12] = 2048;
    double v84 = v32;
    *(_WORD *)unsigned __int8 v85 = 2048;
    *(double *)&v85[2] = v33;
    __int16 v86 = 2048;
    double v87 = v30;
    __int16 v88 = 2048;
    double v89 = *(float *)&v34;
    __int16 v90 = 2048;
    double v91 = *((float *)&v34 + 1);
    __int16 v92 = 2048;
    double v93 = *(float *)&v35;
    __int16 v94 = 2048;
    double v95 = *((float *)&v35 + 1);
    __int16 v96 = 2048;
    double v97 = *(float *)&v36;
    __int16 v98 = 2048;
    double v99 = *((float *)&v36 + 1);
    __int16 v100 = 1024;
    int v101 = (v21 >> 4) & 1;
    __int16 v102 = 1024;
    int v103 = (v21 >> 3) & 1;
    __int16 v104 = 1024;
    int v105 = (v21 >> 2) & 1;
    __int16 v106 = 1024;
    int v107 = v20 & 1;
    __int16 v108 = 1024;
    int v109 = (v21 >> 1) & 1;
    __int16 v110 = 1024;
    int v111 = v21 & 1;
    __int16 v112 = 1024;
    int v113 = (v20 >> 2) & 1;
    __int16 v114 = 1024;
    int v115 = (v20 >> 1) & 1;
    __int16 v116 = 1024;
    int v117 = v9;
    __int16 v118 = 2048;
    uint64_t v119 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "[CLDeviceMotionLiteService] q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel. z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,biasEstimation,%d,yawCorrection,%d,gravityC orrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,seqNo,%d,timestamp,%llu",  buf,  0xA6u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    int v45 = 134222848;
    *(double *)std::string v46 = v31;
    *(_WORD *)&v46[8] = 2048;
    double v47 = v32;
    *(_WORD *)int v48 = 2048;
    *(double *)&v48[2] = v33;
    __int16 v49 = 2048;
    double v50 = v30;
    __int16 v51 = 2048;
    double v52 = *(float *)&v34;
    __int16 v53 = 2048;
    double v54 = *((float *)&v34 + 1);
    __int16 v55 = 2048;
    double v56 = *(float *)&v35;
    __int16 v57 = 2048;
    double v58 = *((float *)&v35 + 1);
    __int16 v59 = 2048;
    double v60 = *(float *)&v36;
    __int16 v61 = 2048;
    double v62 = *((float *)&v36 + 1);
    __int16 v63 = 1024;
    int v64 = (v21 >> 4) & 1;
    __int16 v65 = 1024;
    int v66 = (v21 >> 3) & 1;
    __int16 v67 = 1024;
    int v68 = (v21 >> 2) & 1;
    __int16 v69 = 1024;
    int v70 = v20 & 1;
    __int16 v71 = 1024;
    int v72 = (v21 >> 1) & 1;
    __int16 v73 = 1024;
    int v74 = v21 & 1;
    __int16 v75 = 1024;
    int v76 = (v20 >> 2) & 1;
    __int16 v77 = 1024;
    int v78 = (v20 >> 1) & 1;
    __int16 v79 = 1024;
    int v80 = v9;
    __int16 v81 = 2048;
    uint64_t v82 = a2;
    LODWORD(v28) = 166;
    int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "[CLDeviceMotionLiteService] q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%. 10f,userAccel.z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,biasEstimation, %d,yawCorrection,%d,gravityCorrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCa libration,%d,gyroCalibration,%d,seqNo,%d,timestamp,%llu",  COERCE_DOUBLE(&v45),  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStructWithStatus &)",  "%s\n",  v24);
    if (v24 != buf) {
      free(v24);
    }
  }

  *(double *)__int128 buf = (double)(unint64_t)a2;
  return sub_1006DD528(a1, 0LL, (uint64_t)&v30, 120LL);
}

uint64_t sub_1002F5598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  float v5 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134220544;
    *(double *)&uint8_t buf[4] = v11;
    __int16 v41 = 2048;
    double v42 = v12;
    __int16 v43 = 2048;
    double v44 = v13;
    __int16 v45 = 2048;
    double v46 = v10;
    __int16 v47 = 2048;
    double v48 = *(float *)&v14;
    __int16 v49 = 2048;
    double v50 = *((float *)&v14 + 1);
    __int16 v51 = 2048;
    double v52 = *(float *)&v15;
    __int16 v53 = 2048;
    double v54 = *((float *)&v15 + 1);
    __int16 v55 = 2048;
    double v56 = *(float *)&v16;
    __int16 v57 = 2048;
    double v58 = *((float *)&v16 + 1);
    __int16 v59 = 2048;
    uint64_t v60 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotationRate.x,%.10f ,rotationRate.y,%.10f,rotationRate.z,%.10f,timestamp,%llu",  buf,  0x70u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    int v18 = 134220544;
    double v19 = v11;
    __int16 v20 = 2048;
    double v21 = v12;
    __int16 v22 = 2048;
    double v23 = v13;
    __int16 v24 = 2048;
    double v25 = v10;
    __int16 v26 = 2048;
    double v27 = *(float *)&v14;
    __int16 v28 = 2048;
    double v29 = *((float *)&v14 + 1);
    __int16 v30 = 2048;
    double v31 = *(float *)&v15;
    __int16 v32 = 2048;
    double v33 = *((float *)&v15 + 1);
    __int16 v34 = 2048;
    double v35 = *(float *)&v16;
    __int16 v36 = 2048;
    double v37 = *((float *)&v16 + 1);
    __int16 v38 = 2048;
    uint64_t v39 = a2;
    LODWORD(v8) = 112;
    __int16 v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotatio nRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,timestamp,%llu",  COERCE_DOUBLE(&v18),  v8,  v9,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v17);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStruct &)",  "%s\n",  v7);
    if (v7 != buf) {
      free(v7);
    }
  }

  *(double *)__int128 buf = (double)(unint64_t)a2;
  return sub_1006DD528(a1, 0LL, (uint64_t)&v10, 120LL);
}

uint64_t sub_1002F5878(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  int v6 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sysdiagnose packet. Write out the data!",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    v9[0] = 0;
    double v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Sysdiagnose packet. Write out the data!",  v9,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleSysdiagnoseMsg(uint64_t, SysDiagnoseMsg &)",  "%s\n",  v8);
  }

  *(double *)__int128 buf = (double)a2;
  return sub_1006DD528(a1, 7LL, a3, 1LL);
}

uint64_t sub_1002F5A38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  int v6 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Session metrics packet. Push it to the right place",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    v9[0] = 0;
    double v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Session metrics packet. Push it to the right place",  v9,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleSessionMetricsMsg(uint64_t, SessionMetricsMsg &)",  "%s\n",  v8);
  }

  *(double *)__int128 buf = (double)a2;
  return sub_1006DD528(a1, 8LL, a3, 1LL);
}

void sub_1002F5BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
  int64_t v11 = 0LL;
  double v12 = 0LL;
  IOHIDEventGetVendorDefinedData(a4, &v12, &v11);
  if (v12) {
    BOOL v7 = v11 <= 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    double v8 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      v10[0] = 0;
      double v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "Empty payload, returning",  v10,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::onDeviceMotionLiteEvent(void *, void *, IOHIDEventRef)",  "%s\n",  v9);
    }
  }

  else
  {
    sub_1002F5DC0(a1, TimeStamp, v12, v11);
  }

void sub_1002F5DC0(uint64_t a1, unint64_t a2, float32x2_t *a3, unint64_t a4)
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  double v8 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134349056;
    *(void *)&uint8_t buf[4] = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "DeviceMotionLite,VendorData,size,%{public}ld",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    *(_DWORD *)double v93 = 134349056;
    *(void *)&v93[4] = a4;
    __int16 v77 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "DeviceMotionLite,VendorData,size,%{public}ld",  v93,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v77);
    if (v77 != buf) {
      free(v77);
    }
  }

  switch(a4)
  {
    case 0x30uLL:
      float v9 = a3[1].f32[0];
      int v10 = a3[2].i16[0];
      int v11 = a3[2].i16[1];
      int v12 = a3[2].i16[2];
      v13.i16[0] = a3[2].i16[3];
      int v14 = a3[3].i16[2];
      int v15 = a3[3].i16[3];
      int v16 = a3[4].i16[0];
      int v17 = a3[4].i16[2];
      v13.i16[1] = a3[3].i16[0];
      int v18 = a3[4].i16[3];
      v13.i16[2] = a3[3].i16[1];
      v13.i16[3] = a3[4].i16[1];
      *(double *)__int128 buf = a3[1].f32[1];
      *(float64x2_t *)&uint8_t buf[8] = vcvtq_f64_f32(*a3);
      *(double *)double v97 = v9;
      *(float32x4_t *)&v97[8] = vdivq_f32(vcvtq_f32_s32(vmovl_s16(v13)), (float32x4_t)vdupq_n_s32(0x447A0000u));
      float v98 = (float)v17 / 1000.0;
      float v99 = (float)v18 / 1000.0;
      float v100 = (float)v10;
      float v101 = (float)v11;
      float v102 = (float)v12;
      float v103 = (float)v14;
      float v104 = (float)v15;
      float v105 = (float)v16;
      unint64_t v106 = a2;
      char v107 = 0;
      v109[0] = 0LL;
      uint64_t v108 = 0LL;
      *(void *)((char *)v109 + 7) = 0LL;
      *(double *)double v93 = (double)a2;
      sub_1006DD528(a1, 1LL, (uint64_t)buf, 120LL);
      return;
    case 0x1BuLL:
      sub_1002F4348(a1, a2, (uint64_t)a3);
      return;
    case 0x18uLL:
      sub_1002F5598(a1, a2, (uint64_t)a3);
      return;
  }

  if (a4 < 0x3D)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    double v31 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134349056;
      *(void *)&uint8_t buf[4] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "DeviceMotionLite: unhandled size %{public}ld",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    *(_DWORD *)double v93 = 134349056;
    *(void *)&v93[4] = a4;
    LODWORD(v88) = 12;
    __int16 v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  17LL,  "DeviceMotionLite: unhandled size %{public}ld",  v93,  v88);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v32);
LABEL_158:
    if (v32 != buf) {
      free(v32);
    }
    return;
  }

  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  double v19 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    int v20 = a3->u8[0];
    int v21 = a3->u8[1];
    uint64_t v22 = *(void *)(a1 + 96);
    *(_DWORD *)__int128 buf = 134218752;
    *(void *)&uint8_t buf[4] = a4;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v20;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&_BYTE buf[20] = v21;
    *(_WORD *)double v97 = 2048;
    *(void *)&v97[2] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "DeviceMotionLite debug fragment, paylaodSize=%lu, fLength=%d, fSequence=%d, fragBufferLen=%lu",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    int v78 = a3->u8[0];
    int v79 = a3->u8[1];
    uint64_t v80 = *(void *)(a1 + 96);
    *(_DWORD *)double v93 = 134218752;
    *(void *)&v93[4] = a4;
    *(_WORD *)&v93[12] = 1024;
    *(_DWORD *)&v93[14] = v78;
    *(_WORD *)&v93[18] = 1024;
    *(_DWORD *)&v93[20] = v79;
    __int16 v94 = 2048;
    uint64_t v95 = v80;
    __int16 v81 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "DeviceMotionLite debug fragment, paylaodSize=%lu, fLength=%d, fSequence=%d, fragBufferLen=%lu",  v93,  34,  v89,  v90);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v81);
    if (v81 != buf) {
      free(v81);
    }
  }

  uint64_t v23 = a3->u8[0];
  if (a4 - 29 == v23)
  {
    if (*(void *)(a1 + 96))
    {
      if ((_DWORD)v23 != 64 && (_DWORD)v23 != 32)
      {
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018314C0);
        }
        double v35 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v36 = *(void *)(a1 + 96);
          *(_DWORD *)__int128 buf = 134217984;
          *(void *)&uint8_t buf[4] = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "Not dropping %lu bytes in fragment buffer",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018314C0);
          }
          uint64_t v37 = *(void *)(a1 + 96);
          *(_DWORD *)double v93 = 134217984;
          *(void *)&v93[4] = v37;
          __int16 v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Not dropping %lu bytes in fragment buffer",  v93);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v38);
          if (v38 != buf) {
            free(v38);
          }
        }

        goto LABEL_57;
      }

      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      __int16 v24 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void *)(a1 + 96);
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Dropping remaining %lu bytes in fragment buffer",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018314C0);
        }
        uint64_t v86 = *(void *)(a1 + 96);
        *(_DWORD *)double v93 = 134217984;
        *(void *)&v93[4] = v86;
        double v87 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Dropping remaining %lu bytes in fragment buffer",  v93);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v87);
        if (v87 != buf) {
          free(v87);
        }
      }

      __int16 v26 = *(void ***)(a1 + 64);
      uint64_t v27 = *(void *)(a1 + 72);
      *(void *)(a1 + 96) = 0LL;
      unint64_t v28 = v27 - (void)v26;
      if (v28 >= 0x11)
      {
        do
        {
          operator delete(*v26);
          uint64_t v29 = *(void *)(a1 + 72);
          __int16 v26 = (void **)(*(void *)(a1 + 64) + 8LL);
          *(void *)(a1 + 64) = v26;
          unint64_t v28 = v29 - (void)v26;
        }

        while (v28 > 0x10);
      }

      if (v28 >> 3 == 1)
      {
        uint64_t v30 = 2048LL;
        goto LABEL_56;
      }

      if (v28 >> 3 == 2)
      {
        uint64_t v30 = 4096LL;
LABEL_56:
        *(void *)(a1 + 88) = v30;
      }
    }

LABEL_105:
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018314C0);
          }
          __int16 v61 = (os_log_s *)qword_101934568;
          if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v62 = *(void *)(a1 + 96);
            *(_DWORD *)__int128 buf = 134217984;
            *(void *)&uint8_t buf[4] = v62;
            _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "called event handler function, remaining bytes: %lu",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934560 != -1) {
              dispatch_once(&qword_101934560, &stru_1018314C0);
            }
            uint64_t v74 = *(void *)(a1 + 96);
            int v91 = 134217984;
            uint64_t v92 = v74;
            __int16 v75 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "called event handler function, remaining bytes: %lu",  &v91);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v75);
            if (v75 != buf) {
              free(v75);
            }
          }

          sub_1002F3DC8(a1, a2, (uint64_t)v93);
          break;
        default:
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018314C0);
          }
          double v56 = (os_log_s *)qword_101934568;
          if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v48;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "Unknown msgType: %d", buf, 8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934560 != -1) {
              dispatch_once(&qword_101934560, &stru_1018314C0);
            }
            *(_DWORD *)double v93 = 67109120;
            *(_DWORD *)&v93[4] = v48;
            __int16 v71 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Unknown msgType: %d",  v93);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v71);
            if (v71 != buf) {
              free(v71);
            }
          }

          *(int64x2_t *)(a1 + 88) = vaddq_s64(*(int64x2_t *)(a1 + 88), (int64x2_t)xmmword_1012CE4D0);
          sub_1002F8718(a1 + 56, 1);
          break;
      }

      char v51 = 1;
LABEL_112:
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      __int16 v63 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v64 = *(void *)(a1 + 96);
        *(_DWORD *)__int128 buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v48;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v64;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "msgType=%d, fragBufferLength=%lu\n",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018314C0);
        }
        uint64_t v65 = *(void *)(a1 + 96);
        *(_DWORD *)double v93 = 67109376;
        *(_DWORD *)&v93[4] = v48;
        *(_WORD *)&v93[8] = 2048;
        *(void *)&v93[10] = v65;
        LODWORD(v88) = 18;
        int v66 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "msgType=%d, fragBufferLength=%lu\n",  v93,  v88);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v66);
        if (v66 != buf) {
          free(v66);
        }
      }

      if ((v51 & 1) == 0) {
        return;
      }
    }
  }

  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  double v33 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = a3->u8[0];
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Received invalid payload length %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    int v82 = a3->u8[0];
    *(_DWORD *)double v93 = 67109120;
    *(_DWORD *)&v93[4] = v82;
    __int16 v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Received invalid payload length %d",  v93);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v32);
    goto LABEL_158;
  }

      goto LABEL_122;
    }

    if (v18 != v19)
    {
      __int16 v24 = *(double *)(a2 + 8);
      if (v24 - *(double *)(v19 - 56) > 240.0)
      {
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        uint64_t v25 = (os_log_s *)qword_1019346C8;
        if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "Walking bout ended due to exceeding max duration without steps",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_64;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        *(_WORD *)int v83 = 0;
        LODWORD(v77) = 2;
        __int16 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  1LL,  "Walking bout ended due to exceeding max duration without steps",  v83,  *(void *)&v77);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v26);
LABEL_143:
LABEL_64:
        sub_10036E97C(a1);
        goto LABEL_65;
      }

      if (v24 - *(double *)(v18 + 8) > 36000.0)
      {
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        __int16 v32 = (os_log_s *)qword_1019346C8;
        if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "Walking bout has ended due to exceeding the max duration",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_64;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        *(_WORD *)int v83 = 0;
        LODWORD(v77) = 2;
        __int16 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  1LL,  "Walking bout has ended due to exceeding the max duration",  v83,  *(void *)&v77);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v26);
        goto LABEL_143;
      }
    }

    if (v33 != buf) {
      free(v33);
    }
    goto LABEL_72;
  }

  int16x4_t v13 = *(void *)(a1 + 2040);
  if (v13) {
    ++*(_DWORD *)(v13 + 64);
  }
  if ([*(id *)(a1 + 1904) state] != (id)1)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v39 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = [a2 ID];
      int v41 = [a2 type];
      unint64_t v42 = [*(id *)(a1 + 1904) ID];
      uint64_t v43 = [*(id *)(a1 + 1904) state];
      *(_DWORD *)__int128 buf = 138544130;
      float v103 = v40;
      float v104 = 2048;
      float v105 = v41;
      unint64_t v106 = 2114;
      char v107 = v42;
      uint64_t v108 = 2050;
      int v109 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current streaming request with Reques tID:%{public}@ which is in state:%{public}ld",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v74 = qword_101934898;
      __int16 v75 = [a2 ID];
      int v76 = [a2 type];
      __int16 v77 = [*(id *)(a1 + 1904) ID];
      int v78 = [*(id *)(a1 + 1904) state];
      __int16 v94 = 138544130;
      uint64_t v95 = v75;
      __int16 v96 = 2048;
      double v97 = v76;
      float v98 = 2114;
      float v99 = v77;
      float v100 = 2050;
      float v101 = v78;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v74,  0LL,  "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current streaming request with Reques tID:%{public}@ which is in state:%{public}ld",  &v94,  42);
      uint64_t v80 = (uint8_t *)v79;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v79);
      if (v80 != buf) {
        free(v80);
      }
    }

    [*(id *)(a1 + 1904) setState:16];
    [*(id *)(a1 + 1896) addObject:*(void *)(a1 + 1904)];
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    double v44 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = [*(id *)(a1 + 1904) ID];
      *(_DWORD *)__int128 buf = 138543362;
      float v103 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue and marked as duplicate",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      __int16 v81 = qword_101934898;
      int v82 = [*(id *)(a1 + 1904) ID];
      __int16 v94 = 138543362;
      uint64_t v95 = v82;
      LODWORD(v88) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v81,  0LL,  "#EED2,isDuplicateRequest,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue and marked as duplicate",  &v94,  v88);
      int v84 = (uint8_t *)v83;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v83);
      if (v84 != buf) {
        free(v84);
      }
    }

    *(void *)(a1 + 1904) = 0LL;
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    unint64_t v46 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v47 = [a2 ID];
      *(_DWORD *)__int128 buf = 138543362;
      float v103 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest, Allow the new streaming request:%{public}@ to be added to pending queue",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_72;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    unsigned __int8 v85 = qword_101934898;
    uint64_t v86 = [a2 ID];
    __int16 v94 = 138543362;
    uint64_t v95 = v86;
    LODWORD(v88) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v85,  0LL,  "#EED2,isDuplicateRequest, Allow the new streaming request:%{public}@ to be added to pending queue",  &v94,  v88);
    double v33 = (uint8_t *)v87;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v87);
    goto LABEL_105;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  int v14 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = [a2 ID];
    int v16 = [a2 type];
    int v17 = [*(id *)(a1 + 1904) ID];
    *(_DWORD *)__int128 buf = 138543874;
    float v103 = v15;
    float v104 = 2048;
    float v105 = v16;
    unint64_t v106 = 2114;
    char v107 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current ACCEPTED streaming request with RequestID:%{public}@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    int v68 = qword_101934898;
    uint64_t v69 = [a2 ID];
    int v70 = [a2 type];
    __int16 v71 = [*(id *)(a1 + 1904) ID];
    __int16 v94 = 138543874;
    uint64_t v95 = v69;
    __int16 v96 = 2048;
    double v97 = v70;
    float v98 = 2114;
    float v99 = v71;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v68,  0LL,  "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current ACCEPTED streaming request with RequestID:%{public}@",  &v94,  32);
    __int16 v73 = (uint8_t *)v72;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v72);
    if (v73 != buf) {
      free(v73);
    }
  }

  int v10 = 1LL;
LABEL_73:
  _Block_object_dispose(&v90, 8);
  return v10;
}

            if (v65)
            {
              int v68 = sub_1005486B8( *(void *)(a1 + 16),  (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:",  v24,  112LL));
              if (v148)
              {
                uint64_t v69 = sub_1005486B8( *(void *)(a1 + 16),  (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:",  v148,  105LL));
                if (([v69 isValidCKP] & 1) == 0)
                {
                  if (qword_101934970 != -1) {
                    dispatch_once(&qword_101934970, &stru_10185AF60);
                  }
                  char v130 = (os_log_s *)qword_101934978;
                  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 68289794;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(void *)&_BYTE buf[20] = v150;
                    *(_WORD *)&_BYTE buf[28] = 2114;
                    *(void *)&buf[30] = v24;
                    *(_WORD *)&buf[38] = 2114;
                    *(void *)&buf[40] = v148;
                    _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Failed auth-limited masquerading attempt; effectiveBundleIdentifier failed "
                      "to register, but didn't we just check that it's installed??, NaturalKeyPath:%{public, locati"
                      "on:escape_only}@, effectiveBundlePath:%{public, location:escape_only}@, effectiveBundleIdent"
                      "ifier:%{public, location:escape_only}@}",
                      buf,
                      0x30u);
                    if (qword_101934970 != -1) {
                      dispatch_once(&qword_101934970, &stru_10185AF60);
                    }
                  }

                  char v131 = (os_log_s *)qword_101934978;
                  if (os_signpost_enabled((os_log_t)qword_101934978))
                  {
                    *(_DWORD *)__int128 buf = 68289794;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(void *)&_BYTE buf[20] = v150;
                    *(_WORD *)&_BYTE buf[28] = 2114;
                    *(void *)&buf[30] = v24;
                    *(_WORD *)&buf[38] = 2114;
                    *(void *)&buf[40] = v148;
                    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v131,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Failed auth-limited masquerading attempt; effectiveBundleIdentifier failed to register, but didn't"
                      " we just check that it's installed??",
                      "{msg%{public}.0s:Failed auth-limited masquerading attempt; effectiveBundleIdentifier failed "
                      "to register, but didn't we just check that it's installed??, NaturalKeyPath:%{public, locati"
                      "on:escape_only}@, effectiveBundlePath:%{public, location:escape_only}@, effectiveBundleIdent"
                      "ifier:%{public, location:escape_only}@}",
                      buf,
                      0x30u);
                  }

                  unsigned __int16 v153 = 0;
                  uint64_t v29 = 0;
                  goto LABEL_261;
                }

                int v68 = sub_1005486B8( *(void *)(a1 + 16),  (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:]( CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:",  [v69 bundleId],  108,  v24,  112));
              }

              int v70 = (uint64_t)v68;
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10185AF60);
              }
              __int16 v71 = (os_log_s *)qword_101934978;
              unsigned __int16 v153 = v148 == 0LL;
              if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v72 = sub_100546D94(*(void *)(a1 + 16), v70);
                *(_DWORD *)__int128 buf = 68289794;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(void *)&_BYTE buf[20] = v150;
                *(_WORD *)&_BYTE buf[28] = 2114;
                *(void *)&buf[30] = v70;
                *(_WORD *)&buf[38] = 1026;
                *(_DWORD *)&buf[40] = v72;
                _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Client is setting effective bundle path, NaturalKeyPath:%{public, locatio n:escape_only}@, MasqueradingKeyPath:%{public, location:escape_only}@, SystemService:%{public}hhd}",  buf,  0x2Cu);
              }

              uint64_t v29 = 1;
              unsigned __int16 v150 = v70;
LABEL_261:
              uint64_t v30 = CFBundleCreate(kCFAllocatorDefault, v47);
              unint64_t v28 = 0;
              *(_BYTE *)(a1 + 104) = 1;
              goto LABEL_38;
            }

      free(v48);
      goto LABEL_56;
    }

    if (v23 > 2400.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      uint64_t v29 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "#Warning,DEM,Height filter timed out,DEM height filter internal_reset",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v50[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "#Warning,DEM,Height filter timed out,DEM height filter internal_reset",  v50,  2,  v50[0]);
      goto LABEL_104;
    }

    uint64_t v30 = *(double *)(a1 + 128);
    double v31 = sub_100D2DBDC((double *)(a1 + 8), a6, a7, *(double *)(a1 + 112), *(double *)(a1 + 120), a4);
    *(double *)(a1 + 216) = v31;
    if (v31 > 3500.0)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      __int16 v32 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "DEM,Height filter exceeded maximum change in horizontal position,DEM height filter internal_reset",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10187F990);
      }
      LOWORD(v50[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "DEM,Height filter exceeded maximum change in horizontal position,DEM height filter internal_reset",  v50,  2);
      int v48 = (uint8_t *)v49;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, cons t double, double &, double &)",  "%s\n",  v49);
      if (v48 == buf) {
        goto LABEL_56;
      }
      goto LABEL_105;
    }

    double v33 = (a4 - v30) / v31;
    int v34 = v31 < 5.0;
    double v35 = 0.0;
    if (v34) {
      uint64_t v36 = 0.0;
    }
    else {
      uint64_t v36 = v33;
    }
    uint64_t v37 = *(double *)(a1 + 208);
    *(double *)(a1 + 200) = v37;
    *(double *)(a1 + 64) = v23 * 1.3;
    *(double *)(a1 + 48) = v23 * 1.3 + *(double *)(a1 + 48);
    *(void *)(a1 + 56) = 0x40C3880000000000LL;
    if ((*(_BYTE *)(a1 + 232) || *(_BYTE *)(a1 + 233))
      && (double v35 = sub_100D2DBDC( (double *)(a1 + 8),  *(double *)(a1 + 152),  *(double *)(a1 + 160),  *(double *)(a1 + 80),  *(double *)(a1 + 88),  *(double *)(a1 + 168)),  *(_BYTE *)(a1 + 232)))
    {
    }

    else
    {
      if (!*(_BYTE *)(a1 + 233))
      {
        unint64_t v42 = fabs(v36);
        if (v42 <= 0.4)
        {
          if (v42 <= 0.32)
          {
            __int16 v38 = *(double *)(a1 + 176);
            uint64_t v43 = 0.0;
            if (v42 > 0.18)
            {
              __int16 v38 = v38 * 5.0;
              uint64_t v43 = 0.5;
            }
          }

          else
          {
            __int16 v38 = *(double *)(a1 + 176) * 20.0;
            uint64_t v43 = 1.0;
          }
        }

        else
        {
          __int16 v38 = *(double *)(a1 + 176) * 25.0;
          uint64_t v43 = 2.0;
        }

        double v44 = 248LL;
        if (v36 < 0.0) {
          double v44 = 240LL;
        }
        uint64_t v45 = *(double *)(a1 + v44);
        *(double *)(a1 + 56) = v38;
        *(double *)(a1 + v44) = v43 + v45;
        if (v36 <= 0.32 || *(double *)(a1 + 248) <= 4.1 || *(double *)(a1 + 184) - *(double *)(a1 + 104) <= 30.0)
        {
          unint64_t v46 = (double *)(a1 + 240);
          if (v36 >= -0.32 || *v46 <= 4.1 || *(double *)(a1 + 184) - *(double *)(a1 + 104) <= 30.0)
          {
            if (v42 < 0.18)
            {
              *unint64_t v46 = 0.0;
              *(void *)(a1 + 248) = 0LL;
            }

            goto LABEL_81;
          }

          *(_BYTE *)(a1 + 232) = 1;
        }

        else
        {
          *(_BYTE *)(a1 + 233) = 1;
        }

        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 152);
        unint64_t v47 = *(void *)(a1 + 184);
        *(void *)(a1 + 96) = *(void *)(a1 + 200);
        *(void *)(a1 + 104) = v47;
        *(void *)(a1 + 56) = 0x40C3880000000000LL;
        __int16 v38 = 10000.0;
LABEL_81:
        uint64_t v39 = *(double *)(a1 + 48);
        int v40 = v39 / (v39 + v38);
        *(double *)(a1 + 48) = v39 * (1.0 - v40);
        int v41 = *(double *)(a1 + 200) + (a4 - v37) * v40;
        *(double *)(a1 + 192) = v41;
        *a2 = v41;
        goto LABEL_57;
      }

      if (*(double *)(a1 + 168) > *(double *)(a1 + 96) + v35 * 0.1)
      {
LABEL_73:
        __int16 v38 = *(double *)(a1 + 56);
        goto LABEL_81;
      }
    }

    *(_WORD *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0LL;
    *(void *)(a1 + 248) = 0LL;
    __int16 v38 = *(double *)(a1 + 176);
    *(void *)(a1 + 104) = *(void *)(a1 + 184);
    if (fabs(v36) > 0.18) {
      __int16 v38 = v38 * 10.0;
    }
    *(double *)(a1 + 56) = v38;
    goto LABEL_81;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10187F990);
  }
  int16x4_t v13 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#Error,DEM,latitude_degs<-90.0", buf, 2u);
  }

  int v14 = sub_1002921D0(115, 0);
  float result = 0LL;
  if (v14)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10187F990);
    }
    LOWORD(v50[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,DEM,latitude_degs<-90.0",  v50,  2,  v50[0]);
    goto LABEL_47;
  }

  return result;
}

                    sub_100DBA374(a1, 22LL);
                    uint64_t v43 = sub_100DAFBF8(a1);
                    [*(id *)(*(void *)v43 + 16) unregister:*(void *)(*(void *)v43 + 8) forNotification:12];
                    if ((_DWORD)v32 == 39) {
                      goto LABEL_107;
                    }
                    goto LABEL_106;
                  }

  sub_100EAD768((uint64_t *)&v189, v2);
  sub_100EAD378((uint64_t *)&v189, (uint64_t)&v181);
  if ((v37 & 1) == 0)
  {
    if (v181)
    {
      if (*(_BYTE *)(a2 + 504))
      {
        if (*(void *)(a2 + 120))
        {
          sub_100D5DAC4((uint64_t *)(a2 + 120), (uint64_t)buf);
          sub_100D5DAC4((uint64_t *)&v181, (uint64_t)v200);
          if (sub_100BDA328((uint64_t)buf, (uint64_t)v200))
          {
            int v70 = v185;
            __int16 v71 = *(double *)(a2 + 168);
            uint64_t v72 = v181;
            sub_1001AC068(v181);
            __int16 v73 = v72[5];
            uint64_t v74 = *(double *)(a1 + 856);
            sub_100EB29F8((uint64_t)v213, (uint64_t)&v189);
            __int16 v75 = (v70 - v71) * v73;
            int v76 = v74 * 5.0;
            if (v75 <= v76)
            {
LABEL_235:
              sub_100EB2B00((uint64_t)v213);
              goto LABEL_106;
            }

            memset(v200, 0, sizeof(v200));
            *(_OWORD *)v201 = xmmword_1012E0070;
            v201[16] = 0;
            v202 = 0u;
            v203 = 0u;
            __asm { FMOV            V0.2D, #-1.0 }

            v204 = _Q0;
            v205 = _Q0;
            v206 = _Q0;
            v207 = _Q0;
            v208 = 0xBFF0000000000000LL;
            v209 = 0;
            v210 = _Q0;
            v211 = _Q0;
            v212 = _Q0;
            sub_100EB27E0((uint64_t)v200, (uint64_t)v216, 0, 1.0);
            *((void *)&v205 + 1) = 0xBFF0000000000000LL;
            *((void *)&v206 + 1) = 0xBFF0000000000000LL;
            int v78 = *(double **)v213;
            for (unint64_t j = *(double **)&v213[8]; v78 != j; v78 += 14)
            {
              memset(buf, 0, 24);
              *(void *)&_BYTE buf[24] = 0x3FF0000000000000LL;
              *(_OWORD *)&_BYTE buf[32] = 0u;
              memset(v227, 0, 20);
              sub_100EAE708((double *)a1, (uint64_t)v200, v78, (uint64_t)buf);
              LODWORD(v227[1]) = 1;
              *(void *)&_BYTE buf[24] = 0x3FF0000000000000LL;
              sub_100EB2834(v78, (uint64_t)buf);
              sub_100D72794(v78);
            }

            sub_100EAD378((uint64_t *)v213, (uint64_t)&v174);
            uint64_t v80 = v174;
            if (v174)
            {
              __int16 v81 = *(double *)&v179;
              int v82 = *(double *)(a2 + 168);
              sub_1001AC068(v174);
              int v83 = (v81 - v82) * *((double *)v80 + 5);
              if (v83 >= v76) {
                goto LABEL_234;
              }
              sub_100EB2A90((uint64_t)&v189, (uint64_t)v213);
              sub_100D5DB64((uint64_t)&v181, (uint64_t)&v174);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_10188A8E0);
              }
              int v84 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 134349568;
                *(double *)&uint8_t buf[4] = v2;
                *(_WORD *)&_BYTE buf[12] = 2050;
                *(double *)&_BYTE buf[14] = v75;
                *(_WORD *)&buf[22] = 2050;
                *(double *)&_BYTE buf[24] = v83;
                _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,invalidated course and recomputed solution,changeInDistance,%{public}.2lf,newCha ngeInDistance,%{public}.2lf",  buf,  0x20u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_234;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_10188A8E0);
              }
              v194 = 134349568;
              v195 = v2;
              v196 = 2050;
              v197 = v75;
              v198 = 2050;
              v199 = v83;
              LODWORD(v169) = 32;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,invalidated course and recomputed solution,changeInDistance,%{public}.2lf,newChang eInDistance,%{public}.2lf",  &v194,  v169);
              uint64_t v86 = (uint8_t *)v85;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v85);
            }

            else
            {
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_10188A8E0);
              }
              uint64_t v119 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 134349056;
                *(double *)&uint8_t buf[4] = v2;
                _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_ERROR,  "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,1",  buf,  0xCu);
              }

              if (!sub_1002921D0(115, 0)) {
                goto LABEL_234;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_10188A8E0);
              }
              v194 = 134349056;
              v195 = v2;
              LODWORD(v169) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,1",  &v194,  v169);
              uint64_t v86 = (uint8_t *)v161;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v161);
            }

            if (v86 != buf) {
              free(v86);
            }
LABEL_234:
            sub_100BDC958((uint64_t)&v174);
            goto LABEL_235;
          }
        }
      }
    }
  }

  float result = *(float *)(a2 + 272);
  v5 |= 0x200000000000000uLL;
  os_log_s *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 272) = result;
  BOOL v7 = *v3;
  if ((*v3 & 0x4000000000000LL) == 0)
  {
LABEL_40:
    if ((v7 & 0x100000000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_107;
  }

  PB::TextFormatter::format(this, "hgDeltaVXYZBiggestImpact", *(float *)(a1 + 192));
  int v6 = *v5;
  BOOL v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000000LL) == 0)
  {
LABEL_39:
    if ((v6 & 0x8000000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_107;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 272), 0x23u);
  int v6 = *v4;
  if ((*v4 & 0x4000000000000LL) == 0)
  {
LABEL_40:
    if ((v6 & 0x100000000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_107;
  }

  float result = *(float *)(a2 + 96);
  v5 |= 0x200000uLL;
  os_log_s *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 96) = result;
  float v4 = *v3;
  BOOL v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x100000000000000LL) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_107;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *(float *)(a1 + 116));
  int v6 = *v5;
  BOOL v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_107;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 232), 0x1Au);
  float v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000000LL) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0) {
      goto LABEL_32;
    }
    goto LABEL_107;
  }

  uint64_t v22 = *(_BYTE *)(a2 + 308);
  uint64_t v23 = v6 >> 16;
  v6 |= 0x2000uLL;
  os_log_s *v2 = v5;
  *(_BYTE *)(a1 + 326) = v23;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 308) = v22;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  float v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x1000) == 0)
  {
LABEL_25:
    if ((v8 & 2) == 0) {
      goto LABEL_26;
    }
    goto LABEL_107;
  }

  PB::TextFormatter::format(this, "kAudioDvEnergyThresholdRO", *(float *)(a1 + 72));
  BOOL v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_24:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_107;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 308), 0x75u);
  BOOL v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  float v5 = *v4;
  if ((v4[1] & 0x1000) == 0)
  {
LABEL_25:
    if ((v7 & 2) == 0) {
      goto LABEL_26;
    }
    goto LABEL_107;
  }

  int v10 = *v3;
  if ((*v3 & 2) != 0)
  {
    uint64_t v88 = *(void *)(a2 + 16);
    *v2 |= 2uLL;
    *(void *)(a1 + 16) = v88;
    int v10 = *v3;
    if ((*v3 & 0x20) == 0)
    {
LABEL_107:
      if ((v10 & 4) == 0) {
        goto LABEL_108;
      }
      goto LABEL_213;
    }
  }

  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_107;
  }

  int v89 = *(void *)(a2 + 48);
  *v2 |= 0x20uLL;
  *(void *)(a1 + 48) = v89;
  int v10 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_108:
    if ((v10 & 8) == 0) {
      goto LABEL_109;
    }
    goto LABEL_214;
  }

  uint64_t v30 = *(_BYTE *)(a2 + 193);
  double v31 = v4 >> 16;
  v4 |= 0x40uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v31;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 193) = v30;
  float v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x40000000000000LL) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_107;
  }

  PB::TextFormatter::format(this, "kChaosMetRO2", *(_BYTE *)(a1 + 175));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  float v5 = *(void *)(a1 + 204);
  if ((v5 & 0x20000000000000LL) == 0)
  {
LABEL_26:
    if ((v5 & 0x40000000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_107;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x3EBu);
  float v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  float v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_107;
  }

              *(_DWORD *)(a1 + 52) = v24;
              goto LABEL_121;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v51 = 0;
                double v52 = 0;
                double v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }

                  uint64_t v53 = v27++;
                  double v54 = *(_BYTE *)(v28 + v53);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  int v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_109;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              double v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                __int16 v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_121;
            case 3u:
              *(_WORD *)(a1 + 68) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 4u:
              *(_WORD *)(a1 + 68) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                double v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 64) = v34;
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 68) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_100:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_54:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_121;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              double v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                uint64_t v55 = 0;
                double v56 = 0;
                uint64_t v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }

                  uint64_t v57 = v35++;
                  uint64_t v58 = *(_BYTE *)(v36 + v57);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  int v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_114;
              }

              uint64_t v37 = 0;
              __int16 v38 = 0;
              uint64_t v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                int v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v37 += 7;
                double v35 = v2;
                int v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_121;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              int v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_120;
                  }

                  __int16 v61 = v41++;
                  uint64_t v62 = *(_BYTE *)(v42 + v61);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  int v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_119;
              }

              uint64_t v43 = 0;
              double v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                unint64_t v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_120;
                }
                v43 += 7;
                int v41 = v2;
                int v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 48) = v45;
LABEL_121:
              uint64_t v3 = *((void *)this + 2);
              float v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              float result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_121;
          }
        }

        float v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

void sub_1002F73C4(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_1002F73F0(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    BOOL v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

void *sub_1002F7484(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v10 = a1[2].u64[0];
  unint64_t v11 = v10 >> 12;
  uint64_t v12 = a1->i64[1];
  uint64_t v13 = a1[1].i64[0];
  int v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12) {
    uint64_t v15 = 0LL;
  }
  else {
    uint64_t v15 = *(void *)v14 + (a1[2].i64[0] & 0xFFF);
  }
  if (a3 == v15) {
    unint64_t v16 = 0LL;
  }
  else {
    unint64_t v16 = a3 + ((a2 - v14) << 9) - (v15 + *(void *)a2) + *(void *)v14;
  }
  uint64_t v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    uint64_t v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12) {
      uint64_t v20 = 0LL;
    }
    unint64_t v21 = v10 + v17;
    unint64_t v22 = v20 - v21;
    if (a6 > v22)
    {
      sub_1002F7E14(a1, a6 - v22);
      uint64_t v17 = a1[2].i64[1];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v21 = a1[2].i64[0] + v17;
    }

    uint64_t v23 = (void *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12) {
      __int16 v24 = 0LL;
    }
    else {
      __int16 v24 = (char *)(*v23 + (v21 & 0xFFF));
    }
    *(void *)&__int128 v68 = v12 + 8 * (v21 >> 12);
    *((void *)&v68 + 1) = v24;
    unint64_t v45 = v17 - v16;
    if (v17 - v16 < v6)
    {
      unint64_t v46 = &a5[v17 - v16 - v6];
      if (v45 < v6 >> 1) {
        unint64_t v46 = &a4[v45];
      }
      if (v46 != a5)
      {
        unint64_t v47 = v46;
        do
        {
          *v24++ = *v47;
          if (&v24[-*v23] == (char *)4096)
          {
            int v48 = (char *)v23[1];
            ++v23;
            __int16 v24 = v48;
          }

          ++v47;
          ++a1[2].i64[1];
        }

        while (v47 != a5);
        a5 = v46;
      }

      unint64_t v6 = v17 - v16;
    }

    if (v6)
    {
      __int16 v49 = (const void **)sub_1002F839C((uint64_t)&v68, v6);
      char v51 = v49;
      double v52 = v50;
      uint64_t v53 = *((void *)&v68 + 1);
      if (*((char **)&v68 + 1) != v50)
      {
        double v54 = v49;
        uint64_t v55 = v50;
        do
        {
          *v24++ = *v55;
          if (&v24[-*v23] == (char *)4096)
          {
            double v56 = (char *)v23[1];
            ++v23;
            __int16 v24 = v56;
          }

          if (&(++v55)[-*v54] == (char *)4096)
          {
            uint64_t v57 = (char *)v54[1];
            ++v54;
            uint64_t v55 = v57;
          }

          ++a1[2].i64[1];
          uint64_t v53 = *((void *)&v68 + 1);
        }

        while (v55 != *((char **)&v68 + 1));
      }

      if (v6 < v45)
      {
        uint64_t v58 = (const void **)sub_1002F839C((uint64_t)&v68, v45);
        sub_1002F8528(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
        uint64_t v53 = *((void *)&v70 + 1);
        __int128 v68 = v70;
      }

      if (a5 != a4)
      {
        __int16 v61 = (uint64_t *)(v68 - 8);
        uint64_t v60 = *(void *)v68;
        while (1)
        {
          int64_t v62 = v53 - v60;
          if (a5 - a4 >= v62) {
            size_t v63 = v62;
          }
          else {
            size_t v63 = a5 - a4;
          }
          a5 -= v63;
          if (v63) {
            memmove((void *)(v53 - v63), a5, v63);
          }
          if (a5 == a4) {
            break;
          }
          uint64_t v64 = *v61--;
          uint64_t v60 = v64;
          uint64_t v53 = v64 + 4096;
        }
      }
    }
  }

  else
  {
    if (a6 > v10)
    {
      sub_1002F78E8((void **)a1, a6 - v10);
      unint64_t v10 = a1[2].u64[0];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v11 = v10 >> 12;
    }

    int v18 = (void *)(v12 + 8 * v11);
    if (v13 == v12) {
      unint64_t v19 = 0LL;
    }
    else {
      unint64_t v19 = *v18 + (v10 & 0xFFF);
    }
    *(void *)&__int128 v68 = v12 + 8 * v11;
    *((void *)&v68 + 1) = v19;
    if (v6 > v16)
    {
      uint64_t v25 = &a4[v6 - v16];
      if (v16 < v6 >> 1) {
        uint64_t v25 = &a5[-v16];
      }
      if (v25 != a4)
      {
        __int16 v26 = v25;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v27 = *--v18;
            unint64_t v19 = v27 + 4096;
          }

          char v28 = *--v26;
          *(_BYTE *)--unint64_t v19 = v28;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012E2F20);
        }

        while (v26 != a4);
        a4 = v25;
      }

      unint64_t v6 = v16;
    }

    if (v6)
    {
      uint64_t v30 = sub_1002F7DB0((uint64_t)&v68, v6);
      double v31 = v29;
      __int16 v32 = (_BYTE *)*((void *)&v68 + 1);
      if (*((_BYTE **)&v68 + 1) != v29)
      {
        double v33 = v30;
        int v34 = v29;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v35 = *--v18;
            unint64_t v19 = v35 + 4096;
          }

          if (v34 == (_BYTE *)*v33)
          {
            uint64_t v36 = *--v33;
            int v34 = (_BYTE *)(v36 + 4096);
          }

          char v37 = *--v34;
          *(_BYTE *)--unint64_t v19 = v37;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012E2F20);
          __int16 v32 = (_BYTE *)*((void *)&v68 + 1);
        }

        while (v34 != *((_BYTE **)&v68 + 1));
      }

      if (v6 < v16)
      {
        __int16 v38 = sub_1002F7DB0((uint64_t)&v68, v16);
        __int128 v69 = v68;
        sub_1002F8400(v30, v31, (_BYTE **)v38, v39, (void ***)&v69);
        __int16 v32 = (_BYTE *)*((void *)&v69 + 1);
        __int128 v68 = v69;
      }

      if (a4 != a5)
      {
        int v41 = (void **)(v68 + 8);
        int v40 = *(_BYTE **)v68;
        while (1)
        {
          uint64_t v42 = v40 - v32 + 4096;
          if (a5 - a4 >= v42) {
            size_t v43 = v42;
          }
          else {
            size_t v43 = a5 - a4;
          }
          if (v43) {
            memmove(v32, a4, v43);
          }
          a4 += v43;
          if (a4 == a5) {
            break;
          }
          double v44 = *v41++;
          int v40 = v44;
          __int16 v32 = v44;
        }
      }
    }
  }

  uint64_t v65 = a1->i64[1];
  if (a1[1].i64[0] == v65) {
    uint64_t v66 = 0LL;
  }
  else {
    uint64_t v66 = *(void *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  }
  *(void *)&__int128 v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((void *)&v69 + 1) = v66;
  return sub_1002F7DB0((uint64_t)&v69, v16);
}

void sub_1002F78E8(void **a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 9) - 1;
  }
  if ((v6 & 0xFFF) != 0) {
    unint64_t v8 = (v6 >> 12) + 1;
  }
  else {
    unint64_t v8 = v6 >> 12;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 12) {
    unint64_t v11 = v10 >> 12;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      unint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      sub_1000ECA74((uint64_t)a1, __p);
    }
  }

  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000EC960(a1, __p);
            --v22;
          }

          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }

        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000ECA74((uint64_t)a1, __p);
            uint64_t v20 = a1[1];
            uint64_t v21 = (_BYTE *)a1[2] - v20 == 8 ? 4095LL : 4096LL;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }

      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        sub_1000ECA74((uint64_t)a1, __p);
      }
    }

    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      __int128 v70 = a1 + 3;
      if (v17) {
        int v18 = (char *)sub_1000071BC(v12, v17);
      }
      else {
        int v18 = 0LL;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      __int128 v68 = v18;
      __int128 v69 = &v18[8 * v17];
      do
      {
        uint64_t v66 = operator new(0x1000uLL);
        sub_1000ECB90(__p, &v66);
        --v13;
      }

      while (v13);
      uint64_t v25 = (char *)a1[2];
      for (uint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1LL;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            uint64_t v36 = (char *)sub_1000071BC((uint64_t)v70, v35);
            __int16 v38 = (uint64_t *)__p[1];
            uint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              uint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8LL)];
              uint64_t v40 = 8 * (v39 >> 3);
              int v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)int v41 = v42;
                v41 += 8;
                v40 -= 8LL;
              }

              while (v40);
            }

            size_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            __int128 v68 = i;
            __int128 v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              uint64_t i = v68;
            }
          }

          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            __int16 v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }

            int v34 = &i[-8 * (v31 >> 1)];
            uint64_t i = &v32[v33];
            __p[1] = v34;
            __int128 v68 = &v32[v33];
          }
        }

        *(void *)uint64_t i = *((void *)v25 - 1);
        uint64_t i = v68 + 8;
        v68 += 8;
        uint64_t v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }

      double v44 = (char *)a1[1];
      if (v44 == v25)
      {
        double v44 = v25;
      }

      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1LL;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              uint64_t v53 = (char *)sub_1000071BC((uint64_t)v70, v52);
              uint64_t v55 = (uint64_t *)__p[1];
              uint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                uint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8LL;
                }

                while (v57);
              }

              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              __int128 v68 = i;
              __int128 v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                uint64_t i = v68;
              }
            }

            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              __int16 v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }

              char v51 = &i[-8 * (v48 >> 1)];
              uint64_t i = &v49[v50];
              __p[1] = v51;
              __int128 v68 = &v49[v50];
            }
          }

          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)uint64_t i = v61;
          uint64_t i = v68 + 8;
          v68 += 8;
        }

        while (v44 != a1[2]);
        uint64_t v25 = (char *)a1[1];
      }

      int64_t v62 = v69;
      size_t v63 = (char *)a1[3];
      uint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      uint64_t v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      __int128 v68 = v44;
      __int128 v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        __int128 v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }

void sub_1002F7D3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002F7DB0(uint64_t a1, uint64_t a2)
{
  float result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - *result + a2;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }

  return result;
}

void sub_1002F7E14(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0xFFF) != 0) {
    unint64_t v6 = (v5 >> 12) + 1;
  }
  else {
    unint64_t v6 = v5 >> 12;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 12) {
    unint64_t v8 = v7 >> 12;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          __int16 v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }

          int64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000EC960(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000ECA74((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 4095LL;
          }
          else {
            uint64_t v64 = 4096LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          __int128 v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v78);
              __int16 v81 = &v79[8 * (v78 >> 2)];
              int v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                unsigned __int8 v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)unsigned __int8 v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              double v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int16 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }

              __int16 v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0LL;
      }
      uint64_t v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_1000ECB90(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              __int16 v49 = (char *)sub_1000071BC((uint64_t)v91, v48);
              char v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000ECCA4((uint64_t)__p, v57);
      }

      uint64_t v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_1002F8328( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002F839C(uint64_t a1, uint64_t a2)
{
  float result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - a2 - *result;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }

  return result;
}

void ****sub_1002F8400(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, void ***a5)
{
  uint64_t v11 = a5;
  if (a1 != a3)
  {
    unint64_t v7 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 4096LL); ; uint64_t i = v9 + 4096)
    {
      sub_1002F8474(&v11, a2, i);
      if (v7 == a3) {
        break;
      }
      unint64_t v9 = (_BYTE *)*v7++;
      a2 = v9;
    }

    a2 = *a3;
  }

  return sub_1002F8474(&v11, a2, a4);
}

void ****sub_1002F8474(void ****result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v3 = *result;
  unint64_t v5 = **result;
  uint64_t v4 = (*result)[1];
  if (__src != a3)
  {
    unint64_t v7 = __src;
    unint64_t v8 = result;
    uint64_t v10 = (char *)*v5++;
    unint64_t v9 = (void **)v10;
    while (1)
    {
      uint64_t v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11) {
        size_t v12 = v11;
      }
      else {
        size_t v12 = a3 - v7;
      }
      if (v12) {
        float result = (void ****)memmove(v4, v7, v12);
      }
      v7 += v12;
      if (v7 == a3) {
        break;
      }
      unint64_t v13 = (void **)*v5++;
      unint64_t v9 = v13;
      uint64_t v4 = v13;
    }

    uint64_t v4 = (void **)((char *)v4 + v12);
    else {
      --v5;
    }
    uint64_t v3 = *v8;
  }

  char *v3 = v5;
  v3[1] = v4;
  return result;
}

void *sub_1002F8528@<X0>( const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  unint64_t v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4) {
      goto LABEL_46;
    }
    uint64_t v35 = (uint64_t)*a5;
    uint64_t v36 = a4;
    while (1)
    {
      uint64_t v37 = &a6[-v35];
      else {
        size_t v38 = v36 - a2;
      }
      v36 -= v38;
      a6 -= v38;
      if (v38) {
        float result = memmove(a6, v36, v38);
      }
      if (v36 == a2) {
        break;
      }
      uint64_t v39 = (uint64_t)*--v8;
      uint64_t v35 = v39;
      a6 = (char *)(v39 + 4096);
    }

    goto LABEL_44;
  }

  unint64_t v14 = *a3;
  if (*a3 != a4)
  {
    uint64_t v15 = (uint64_t)*a5;
    unint64_t v16 = a4;
    while (1)
    {
      unint64_t v17 = &a6[-v15];
      else {
        size_t v18 = v16 - v14;
      }
      v16 -= v18;
      a6 -= v18;
      if (v18) {
        float result = memmove(a6, v16, v18);
      }
      if (v16 == v14) {
        break;
      }
      uint64_t v20 = (uint64_t)*--v8;
      uint64_t v15 = v20;
      a6 = (char *)(v20 + 4096);
    }

    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }

  BOOL v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    uint64_t v23 = (char *)*v8;
    do
    {
      uint64_t v24 = *v22;
      uint64_t v25 = (char *)*v22 + 4096;
      while (1)
      {
        int64_t v26 = (char *)(a6 - v23);
        else {
          size_t v27 = v25 - v24;
        }
        v25 -= v27;
        a6 -= v27;
        if (v27) {
          float result = memmove(a6, v25, v27);
        }
        if (v25 == v24) {
          break;
        }
        unint64_t v28 = (char *)*--v8;
        uint64_t v23 = v28;
        a6 = v28 + 4096;
      }

      uint64_t v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        BOOL v29 = (char *)v8[1];
        ++v8;
        uint64_t v23 = v29;
        a6 = v29;
      }

      --v22;
    }

    while (v22 != a1);
  }

  uint64_t v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    uint64_t v31 = (uint64_t)*v8;
    while (1)
    {
      __int16 v32 = &a6[-v31];
      else {
        size_t v33 = v30 - a2;
      }
      v30 -= v33;
      a6 -= v33;
      if (v33) {
        float result = memmove(a6, v30, v33);
      }
      if (v30 == a2) {
        break;
      }
      uint64_t v34 = (uint64_t)*--v8;
      uint64_t v31 = v34;
      a6 = (char *)(v34 + 4096);
    }

uint64_t sub_1002F8718(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1000) {
    a2 = 1;
  }
  if (v2 < 0x2000) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 4096LL;
  }

  return v4 ^ 1u;
}

id sub_1002F8774(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  __int128 v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  __int128 v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  __int128 v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  __int128 v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  __int128 v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  __int128 v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return [a4 onCompanionNotification:v4 data:v12];
}

void sub_1002F8CBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1002F8D30(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_1002F8D5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101831510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002F8D70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101831510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1002F8D9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101831560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002F8DB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101831560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1002F8DDC()
{
  if (qword_1019941E0 != -1) {
    dispatch_once(&qword_1019941E0, &stru_1018315A0);
  }
  return qword_1019A0E48;
}

void sub_1002F8E1C(id a1)
{
  uint64_t v1 = operator new(0x90uLL);
  sub_1002F9054( (uint64_t)v1,  (uint64_t)+[CLIntersiloUniverse newSharedVendorUniverseWithSilo:]( &OBJC_CLASS___CLIntersiloUniverse,  "newSharedVendorUniverseWithSilo:",  +[CLSilo main](&OBJC_CLASS___CLSilo, "main")));
  qword_1019A0E48 = (uint64_t)v1;
  (*(void (**)(void *, void *))(*(void *)v1 + 968LL))(v1, &unk_1012E5F10);
}

void sub_1002F8E88(_Unwind_Exception *a1)
{
}

void sub_1002F8E9C()
{
  if (qword_1019A0E48)
  {
    *(void *)__int128 buf = 0LL;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)qword_1019A0E48 + 968LL))(qword_1019A0E48, buf);
    if (((*(uint64_t (**)(uint64_t))(*(void *)qword_1019A0E48 + 944LL))(qword_1019A0E48) & 1) == 0)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018319B8);
      }
      unsigned __int8 v0 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "could not store cached data ", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018319B8);
        }
        v3[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not store cached data ",  v3,  2);
        unint64_t v2 = (uint8_t *)v1;
        sub_10029211C("Generic", 1LL, 0, 0LL, "static void CLDaemonCache::shutdownInstance()", "%s\n", v1);
        if (v2 != buf) {
          free(v2);
        }
      }
    }
  }

uint64_t sub_1002F9054(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)sub_10030A44C(a1, a2, "cache", 1, 0, 2);
  void *v3 = off_1018315D0;
  sub_1002E4C3C(v3 + 16, "CLDaemonCache", 1LL, 1LL);
  sub_1002F0B04(buf);
  int v4 = sub_1002A6F64(*(uint64_t *)buf, "ClearLocationCache", &v13);
  if (v13) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  __int128 v6 = v15;
  if (!v15) {
    goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    unint64_t v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return a1;
    }
  }

  else
  {
LABEL_8:
    if (!v5) {
      return a1;
    }
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018319B8);
  }
  __int128 v9 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning clearing location cache", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018319B8);
    }
    v12[0] = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning clearing location cache",  v12,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLDaemonCache::CLDaemonCache(id<CLIntersiloUniverse>)", "%s\n", v11);
  }

  sub_1002A5EAC(a1);
  return a1;
}

void sub_1002F92A0(_Unwind_Exception *a1)
{
}

void *sub_1002F92DC(void *a1)
{
  *a1 = off_1018315D0;
  sub_1002E4CB0(a1 + 16);
  return sub_10030ABEC((uint64_t)a1);
}

void sub_1002F930C(void *a1)
{
  *a1 = off_1018315D0;
  sub_1002E4CB0(a1 + 16);
  uint64_t v2 = sub_10030ABEC((uint64_t)a1);
  operator delete(v2);
}

uint64_t sub_1002F9340()
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018319D8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "*** CLDaemonCache::refresh not supported ***",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018319D8);
    }
    v3[0] = 0;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  1LL,  "*** CLDaemonCache::refresh not supported ***",  v3,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLDaemonCache::refresh()", "%s\n", v2);
  }

  return 0LL;
}

uint64_t sub_1002F94C8(uint64_t a1)
{
  uint64_t v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16LL))(a1 + 128);
  uint64_t v3 = sub_10030B08C(a1);
  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v3;
}

void sub_1002F9530(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002F9544(uint64_t a1, const void *a2)
{
  uint64_t v4 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16LL))(a1 + 128);
  sub_1002A6CBC((CFMutableDictionaryRef *)a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_1002F95B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002F95C8(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16LL))(a1 + 128);
  sub_1002AD1FC((CFMutableDictionaryRef *)a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

void sub_1002F9640(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002F9654(uint64_t a1, const __CFString *a2, void *a3, int a4)
{
  uint64_t v9 = a1 + 128;
  uint64_t v8 = *(void *)(a1 + 128);
  cf[1] = (CFTypeRef)(a1 + 128);
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 128);
  __int16 v15 = 256;
  cf[0] = 0LL;
  uint64_t v10 = sub_1002AAE08(a1, a2, (uint64_t *)cf, a4);
  if ((_DWORD)v10)
  {
    CFTypeID v11 = CFGetTypeID(cf[0]);
    if (v11 == CFArrayGetTypeID() || v11 == CFDictionaryGetTypeID())
    {
      *a3 = objc_msgSend((id)cf[0], "cl_deepCopy");
    }

    else
    {
      CFTypeRef v12 = cf[0];
      *a3 = cf[0];
      CFRetain(v12);
    }

    CFRelease(cf[0]);
  }

  (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  return v10;
}

void sub_1002F9734(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1002F974C(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v7 = a1 + 128;
  uint64_t v6 = *(void *)(a1 + 128);
  cf[1] = (CFTypeRef)(a1 + 128);
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 128);
  __int16 v13 = 256;
  cf[0] = 0LL;
  BOOL v8 = sub_1002AB310(a1, a2, cf);
  if (v8)
  {
    CFTypeID v9 = CFGetTypeID(cf[0]);
    if (v9 == CFArrayGetTypeID() || v9 == CFDictionaryGetTypeID())
    {
      *a3 = objc_msgSend((id)cf[0], "cl_deepCopy");
    }

    else
    {
      CFTypeRef v10 = cf[0];
      *a3 = cf[0];
      CFRetain(v10);
    }

    CFRelease(cf[0]);
  }

  (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  return v8;
}

void sub_1002F981C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1002F9834(uint64_t a1, const void *a2)
{
  uint64_t v4 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16LL))(a1 + 128);
  BOOL v5 = sub_1002AB350(a1, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v5;
}

void sub_1002F98AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002F98C0(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16LL))(a1 + 128);
  sub_1002AEFF4(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

void sub_1002F9938(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002F994C(uint64_t a1, double *a2)
{
  uint64_t v5 = a1 + 128;
  uint64_t v4 = *(void *)(a1 + 128);
  v7[5] = a1 + 128;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 128);
  __int16 v8 = 256;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1002F9A04;
  v7[3] = &unk_10181D3D0;
  _DWORD v7[4] = a1;
  sub_10030B614(a1, a2, (uint64_t)v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
}

void sub_1002F99F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1002F9A04(uint64_t a1)
{
  return sub_1002F9A0C(*(void *)(a1 + 32));
}

uint64_t sub_1002F9A0C(uint64_t a1)
{
  uint64_t v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16LL))(a1 + 128);
  sub_10030B9C8(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_1002F9A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1002F9A80(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1002F9AAC(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1002F9AD8(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  if (*(_BYTE *)(a2 + 352))
  {
    BOOL v8 = sub_1002F9FF8((_BYTE *)a1, a2);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101831A48);
    }
    CFTypeID v9 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(float *)a3;
      double v11 = *(float *)(a3 + 4);
      double v12 = *(float *)(a3 + 12);
      double v13 = *(float *)(a3 + 20);
      int v14 = *(_DWORD *)(a3 + 24);
      double v15 = *(float *)(a3 + 28);
      int v16 = *(_DWORD *)(a3 + 32);
      int v17 = *(_DWORD *)(a3 + 36);
      uint64_t v18 = *(void *)(a2 + 344);
      int v19 = *(_DWORD *)(a2 + 288);
      BOOL v20 = *(double *)(a2 + 616) > 0.0;
      uint64_t v21 = *(void *)(a2 + 656);
      double v22 = *(float *)(a2 + 296);
      float v23 = *(double *)(a2 + 560);
      int v24 = *(_DWORD *)(a2 + 400);
      uint64_t v25 = *(void *)(a2 + 408);
      int v26 = *(unsigned __int8 *)(a1 + 88);
      int v27 = *(unsigned __int8 *)(a1 + 89);
      int v28 = *(unsigned __int8 *)(a1 + 90);
      double v29 = *(float *)(a1 + 92);
      *(_DWORD *)__int128 buf = 134223360;
      double v44 = v10;
      __int16 v45 = 2048;
      double v46 = v11;
      __int16 v47 = 2048;
      double v48 = v12;
      __int16 v49 = 2048;
      double v50 = v13;
      __int16 v51 = 1024;
      int v52 = v14;
      __int16 v53 = 2048;
      double v54 = v15;
      __int16 v55 = 1024;
      int v56 = v16;
      __int16 v57 = 1024;
      int v58 = v17;
      __int16 v59 = 2048;
      uint64_t v60 = v18;
      __int16 v61 = 1024;
      int v62 = v19;
      __int16 v63 = 1024;
      BOOL v64 = v20;
      __int16 v65 = 2048;
      uint64_t v66 = v21;
      __int16 v67 = 2048;
      double v68 = v22;
      __int16 v69 = 2048;
      double v70 = v23;
      __int16 v71 = 2048;
      double v72 = a4;
      __int16 v73 = 1024;
      int v74 = v24;
      __int16 v75 = 2048;
      uint64_t v76 = v25;
      __int16 v77 = 1024;
      BOOL v78 = v8;
      __int16 v79 = 1024;
      int v80 = v26;
      __int16 v81 = 1024;
      int v82 = v27;
      __int16 v83 = 1024;
      int v84 = v28;
      __int16 v85 = 2048;
      double v86 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "GenericWorkoutCalorieModel,metHR,%f,metsWR,%f,metsPE,%f,userMets,%f,userMetsSource,%d,truthMets,%f,truthMetsSour ce,%d,PEType,%d,workout,%lu,actNoOverride,%d,gpsAvail,%d,rawGpsSpeed,%f,vm,%f,hr,%f,fhr,%f,steps,%d,pedDistance, %f,useFloor,%d,usePed,%d,gpsFloor,%d,motionFloor,%d,floor,%f",  buf,  0xB6u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101831A48);
      }
      double v30 = *(float *)a3;
      double v31 = *(float *)(a3 + 4);
      double v32 = *(float *)(a3 + 12);
      double v33 = *(float *)(a3 + 20);
      int v34 = *(_DWORD *)(a3 + 24);
      double v35 = *(float *)(a3 + 28);
      int v36 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)uint64_t v40 = 134223360;
      *(double *)&v40[4] = v30;
      *(_WORD *)&v40[12] = 2048;
      *(double *)&v40[14] = v31;
      *(_WORD *)&v40[22] = 2048;
      LOWORD(v41) = 2048;
      *(double *)((char *)&v41 + 2) = v33;
      WORD5(v41) = 1024;
      HIDWORD(v41) = v34;
      LOWORD(v42) = 2048;
      *(double *)((char *)&v42 + 2) = v35;
      WORD5(v42) = 1024;
      HIDWORD(v42) = v36;
      uint64_t v37 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "GenericWorkoutCalorieModel,metHR,%f,metsWR,%f,metsPE,%f,userMets,%f,userMetsSource,%d,truthM ets,%f,truthMetsSource,%d,PEType,%d,workout,%lu,actNoOverride,%d,gpsAvail,%d,rawGpsSpeed,%f, vm,%f,hr,%f,fhr,%f,steps,%d,pedDistance,%f,useFloor,%d,usePed,%d,gpsFloor,%d,motionFloor,%d,floor,%f",  v40,  182,  *(_OWORD *)v40,  *(void *)&v40[16],  *(void *)&v32,  v41,  v42);
LABEL_19:
      uint64_t v39 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCalorieGenericWorkoutModel::logResults(const CLNatalieModelInput &, const CLMetsInfo &, float) const",  "%s\n",  v37);
      if (v39 != buf) {
        free(v39);
      }
    }
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101831A48);
    }
    size_t v38 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "Generic Calorie Workout Model is running out of session?",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101831A48);
      }
      uint64_t v37 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "Generic Calorie Workout Model is running out of session?");
      goto LABEL_19;
    }
  }

BOOL sub_1002F9FF8(_BYTE *a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 232);
  __int128 v5 = *(_OWORD *)(a2 + 248);
  uint64_t v15 = *(void *)(a2 + 280);
  __int128 v6 = *(_OWORD *)(a2 + 168);
  __int128 v7 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)&v11.isStanding = *(_OWORD *)(a2 + 184);
  *(_OWORD *)&v11.isVehicleConnected = v7;
  *(_OWORD *)&v11.vehicleType = *(_OWORD *)(a2 + 216);
  __int128 v12 = v4;
  *(_OWORD *)&v11.type = *(_OWORD *)(a2 + 152);
  *(_OWORD *)&v11.mountedConfidence = v6;
  __int128 v8 = *(_OWORD *)(a2 + 264);
  __int128 v13 = v5;
  __int128 v14 = v8;
  if ((CLMotionActivity::isInVehicle(&v11) & 1) != 0) {
    return 0LL;
  }
  if (!a1[89]) {
    return *(double *)(a2 + 408) > 0.0 && a1[91] != 0;
  }
  BOOL result = 1LL;
  return result;
}

void sub_1002FA0D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)(a2 + 1368);
  float v7 = *(float *)(a2 + 1372);
  float v8 = *(double *)(a2 + 560);
  float v9 = (*(float *)(a2 + 1380) - v8) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
  if (sub_1003DBFB4(a2) && (sub_1003DBFB4(a2) & 1) != 0)
  {
    double v10 = *(double *)(a2 + 600);
    double v11 = *(double *)a2;
    BOOL v12 = sub_1002F9FF8((_BYTE *)a1, a2);
    if (v10 < v11)
    {
      float v13 = v6 * sub_100D086F8(v9, v7);
      char v14 = 1;
      goto LABEL_7;
    }
  }

  else
  {
    BOOL v12 = sub_1002F9FF8((_BYTE *)a1, a2);
  }

  char v14 = 0;
  float v13 = 0.0;
LABEL_7:
  if ((float)(1.0 - v9) <= 0.3 || v13 <= *(float *)(a3 + 4))
  {
    float v17 = *(float *)(a3 + 20);
    int v16 = *(_DWORD *)(a3 + 24);
    float v18 = *(float *)(a3 + 28);
    int v19 = *(_DWORD *)(a3 + 32);
  }

  else
  {
    int v16 = 1;
    float v17 = v13;
    float v18 = v13;
    int v19 = 1;
  }

  *(float *)a3 = v13;
  *(_DWORD *)(a3 + 24) = v16;
  *(_DWORD *)(a3 + 32) = v19;
  if (v12)
  {
    float v20 = *(float *)(a1 + 92);
    if (v20 > v17)
    {
      *(_DWORD *)(a3 + 24) = 3;
      float v17 = v20;
    }
  }

  *(float *)&int v21 = 2.1;
  if (v17 <= 2.1)
  {
    if ((v14 & 1) == 0) {
      int v21 = *(int *)(a1 + 92);
    }
    *(_DWORD *)(a3 + 24) = 3;
    float v17 = *(float *)&v21;
  }

  if (v17 < 2.1) {
    float v17 = 2.1;
  }
  *(float *)(a3 + 20) = v17;
  if (v18 < 2.1) {
    float v18 = 2.1;
  }
  *(float *)(a3 + 28) = v18;
  float v22 = *(float *)(a3 + 12);
  if (v22 < 2.1) {
    float v22 = 2.1;
  }
  *(float *)(a3 + 12) = v22;
  sub_1002F9AD8(a1, a2, a3, 1.0 - v9);
}

double sub_1002FA27C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 3LL;
  *(void *)(a3 + 32) = 3LL;
  if (*(_BYTE *)(a1 + 88))
  {
    sub_1002FA488(a1, a2, (uint64_t)v7);
    double result = *(double *)v7;
    __int128 v5 = v7[1];
    *(_OWORD *)a3 = v7[0];
    *(_OWORD *)(a3 + 16) = v5;
    *(void *)(a3 + 32) = v8;
  }

  else
  {
    sub_1004493F4();
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 12) = v6;
    *(_DWORD *)(a3 + 20) = v6;
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 24) = 0;
    double result = COERCE_DOUBLE(&_mh_execute_header);
    *(void *)(a3 + 32) = &_mh_execute_header;
  }

  return result;
}

uint64_t sub_1002FA308(uint64_t a1, uint64_t a2, double a3)
{
  else {
    int v6 = 0;
  }
  if (*(_BYTE *)(a1 + 89)) {
    int v7 = (*(uint64_t (**)(void, double))(**(void **)(a2 + 16) + 48LL))(*(void *)(a2 + 16), a3);
  }
  else {
    int v7 = 1;
  }
  unsigned int v8 = (*(uint64_t (**)(void, double))(**(void **)(a2 + 8) + 48LL))(*(void *)(a2 + 8), a3);
  if (v6) {
    return v7 & v8;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1002FA3B0(uint64_t a1, uint64_t a2, double a3)
{
  if (!(*(unsigned int (**)(void, double))(**(void **)(a2 + 48) + 48LL))(*(void *)(a2 + 48), a3)
    || ((uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a2 + 48) + 24LL))( *(void *)(a2 + 48),  v8,  a3),  (_DWORD)result)
      ? (BOOL v7 = v8[208] == 0)
      : (BOOL v7 = 0),
        !v7))
  {
    uint64_t result = sub_100253308(*(void *)(a2 + 8));
    if (*(_BYTE *)(a1 + 89)) {
      return sub_100253308(*(void *)(a2 + 16));
    }
  }

  return result;
}

float sub_1002FA488@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 3LL;
  *(void *)(a3 + 32) = 3LL;
  else {
    int v6 = v9;
  }
  __int128 v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v6;
  *(_OWORD *)(a3 + 16) = v7;
  *(void *)(a3 + 32) = *((void *)v6 + 4);
  float result = *(float *)(a3 + 4);
  *(float *)(a3 + 20) = result;
  *(float *)(a3 + 28) = result;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

void *sub_1002FA53C(void *a1)
{
  *a1 = off_101831A08;
  a1[6] = off_10186F460;
  sub_10000AE14((uint64_t)(a1 + 9));
  sub_10000AE14((uint64_t)(a1 + 7));
  return a1;
}

void sub_1002FA588(void *a1)
{
  *a1 = off_101831A08;
  a1[6] = off_10186F460;
  sub_10000AE14((uint64_t)(a1 + 9));
  sub_10000AE14((uint64_t)(a1 + 7));
  operator delete(a1);
}

void sub_1002FA5D4(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1002FA600(uint64_t a1)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_1002FA64C((uint64_t **)a1);
  return a1;
}

void sub_1002FA634(_Unwind_Exception *a1)
{
}

void sub_1002FA64C(uint64_t **a1)
{
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  int v2 = 1;
  do
  {
    std::to_string(&v8, v2);
    uint64_t v3 = std::string::insert(&v8, 0LL, "WifiCentroidOverrides");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    std::string::size_type cap = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v5 = sub_1002FAAF4(a1, (std::string::size_type)__p);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  while (v2++ != 100 && v5);
}

void sub_1002FA724( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FA75C(uint64_t **a1, std::string::size_type a2, uint64_t a3)
{
  if (sub_1002A8560(a3, "mac", &v25)
    && sub_1002A82BC(a3, "lat", &v24)
    && sub_1002A82BC(a3, "lon", &v23)
    && sub_1002A82BC(a3, "acc", &v22))
  {
    uint64_t v21 = sub_1007EBE44((uint64_t *)&v25);
    sub_100C3A480(v21, (uint64_t)&v18);
    *((void *)&v18 + 1) = v24;
    uint64_t v19 = v23;
    uint64_t v20 = v22;
    sub_1002FAF5C(a1, &v21, &v21, &v18);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101831A68);
    }
    int v6 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(char *)(a2 + 23);
      std::string::size_type v8 = *(void *)a2;
      sub_1007EC360(&__p);
      std::string::size_type v9 = v7 >= 0 ? a2 : v8;
      char v10 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)__int128 buf = 136381699;
      std::string::size_type v33 = v9;
      __int16 v34 = 2081;
      double v35 = v10;
      __int16 v36 = 2049;
      uint64_t v37 = v24;
      __int16 v38 = 2049;
      uint64_t v39 = v23;
      __int16 v40 = 2049;
      uint64_t v41 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning, WifiCentroidOverrides, found defaults write %{private}s: %{private}s, latlon %{private}.7f, %{private} .7f, acc %{private}.1f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101831A68);
      }
      uint64_t v11 = qword_101934858;
      int v12 = *(char *)(a2 + 23);
      std::string::size_type v13 = *(void *)a2;
      sub_1007EC360(&v17);
      if (v12 >= 0) {
        std::string::size_type v14 = a2;
      }
      else {
        std::string::size_type v14 = v13;
      }
      if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v15 = &v17;
      }
      else {
        uint64_t v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381699;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v14;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
      uint64_t v27 = v24;
      __int16 v28 = 2049;
      uint64_t v29 = v23;
      __int16 v30 = 2049;
      uint64_t v31 = v22;
      int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  0LL,  "#Warning, WifiCentroidOverrides, found defaults write %{private}s: %{private}s, latlon %{private}. 7f, %{private}.7f, acc %{private}.1f",  &__p,  52);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiCentroidDefaultsWriteOverrides::processWifiCentroidOverrideNameValuePair(const std::string &, const C LNameValuePair &)",  "%s\n",  v16);
    }
  }

void sub_1002FAAC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002FAAF4(uint64_t **a1, std::string::size_type a2)
{
  else {
    __int128 v4 = *(const char **)a2;
  }
  BOOL v5 = sub_1002A8F8C(v11, v4, v13);
  BOOL v6 = v5;
  int v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v6) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  if (v5) {
LABEL_9:
  }
    sub_1002FA75C(a1, a2, (uint64_t)v13);
LABEL_10:
  sub_1002A5590(v13);
  return v6;
}

void sub_1002FABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1002FABE0(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16))
  {
    int v2 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      BOOL v5 = (void *)(a1 + 8);
      do
      {
        if (v5 != sub_1002FB09C(a1, v3 + 4))
        {
          BOOL v6 = (void *)sub_1002FAEF4(a1, v3 + 4);
          uint64_t v8 = v6[1];
          uint64_t v7 = v6[2];
          uint64_t v9 = v6[4];
          v3[6] = v8;
          v3[7] = v7;
          v3[9] = v9;
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101831A68);
          }
          char v10 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(a1 + 16);
            sub_1007EC360(&__p);
            p_p = &__p;
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)__int128 buf = 134219011;
            uint64_t v30 = v11;
            __int16 v31 = 2081;
            double v32 = p_p;
            __int16 v33 = 2049;
            uint64_t v34 = v8;
            __int16 v35 = 2049;
            uint64_t v36 = v7;
            __int16 v37 = 2049;
            uint64_t v38 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Warning, WifiCentroidOverrides (size %lu), overrode %{private}s centroid with latlon %{private}.7f, %{pri vate}.7f, acc %{private}.1f",  buf,  0x34u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101831A68);
            }
            uint64_t v16 = qword_101934858;
            std::string::size_type v17 = *(void *)(a1 + 16);
            sub_1007EC360(&v22);
            __int128 v18 = &v22;
            if ((v22.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int128 v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = 134219011;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v17;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
            uint64_t v24 = v8;
            __int16 v25 = 2049;
            uint64_t v26 = v7;
            __int16 v27 = 2049;
            uint64_t v28 = v9;
            LODWORD(v21) = 52;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  0LL,  "#Warning, WifiCentroidOverrides (size %lu), overrode %{private}s centroid with latlon %{private}.7f, %{pri vate}.7f, acc %{private}.1f",  &__p,  v21);
            uint64_t v20 = v19;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiCentroidDefaultsWriteOverrides::overrideMacCentroidsIfPossible(std::map<CLMacAddress, CLWifiAPLocation> &)",  "%s\n",  v20);
          }
        }

        std::string::size_type v13 = (void *)v3[1];
        if (v13)
        {
          do
          {
            std::string::size_type v14 = v13;
            std::string::size_type v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            std::string::size_type v14 = (void *)v3[2];
            BOOL v15 = *v14 == (void)v3;
            uint64_t v3 = v14;
          }

          while (!v15);
        }

        uint64_t v3 = v14;
      }

      while (v14 != v2);
    }
  }

uint64_t sub_1002FAEF4(uint64_t a1, void *a2)
{
  uint64_t v2 = *sub_1002FB00C(a1, &v4, a2);
  if (!v2) {
    sub_10000C918("map::at:  key not found");
  }
  return v2 + 40;
}

void sub_1002FAF30(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

char *sub_1002FAF5C(uint64_t **a1, void *a2, void *a3, _OWORD *a4)
{
  uint64_t v7 = (void **)sub_1002FB00C((uint64_t)a1, &v14, a2);
  uint64_t v8 = (char *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (uint64_t **)v7;
    uint64_t v8 = (char *)operator new(0x88uLL);
    __int128 v10 = a4[3];
    *(_OWORD *)(v8 + 72) = a4[2];
    *(_OWORD *)(v8 + 88) = v10;
    __int128 v11 = a4[5];
    *(_OWORD *)(v8 + 104) = a4[4];
    *(_OWORD *)(v8 + 120) = v11;
    __int128 v12 = a4[1];
    *(_OWORD *)(v8 + 40) = *a4;
    *((void *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 56) = v12;
    sub_1000085FC(a1, v14, v9, (uint64_t *)v8);
  }

  return v8;
}

void *sub_1002FB00C(uint64_t a1, void *a2, void *a3)
{
  BOOL v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_1007EC0D8(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        BOOL v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (!sub_1007EC0D8(v8, a3)) {
        break;
      }
      BOOL v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

void *sub_1002FB09C(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  BOOL v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_1007EC0D8(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      BOOL v5 = v3;
    }

    uint64_t v3 = (void *)*v7;
  }

  while (*v7);
  if (v5 == v2 || sub_1007EC0D8(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t sub_1002FB114(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_1002FB168((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1002FB150(_Unwind_Exception *a1)
{
}

_OWORD *sub_1002FB168(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    BOOL v5 = (uint64_t **)result;
    BOOL v6 = (void *)result + 1;
    do
    {
      float result = sub_1002FB1EC(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

_OWORD *sub_1002FB1EC(uint64_t **a1, void *a2, void *a3, uint64_t a4)
{
  BOOL v6 = sub_1002FB288(a1, a2, &v14, &v13, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x88uLL);
    __int128 v9 = *(_OWORD *)(a4 + 80);
    v7[6] = *(_OWORD *)(a4 + 64);
    void v7[7] = v9;
    *((void *)v7 + 16) = *(void *)(a4 + 96);
    __int128 v10 = *(_OWORD *)(a4 + 16);
    _OWORD v7[2] = *(_OWORD *)a4;
    v7[3] = v10;
    __int128 v11 = *(_OWORD *)(a4 + 48);
    _DWORD v7[4] = *(_OWORD *)(a4 + 32);
    v7[5] = v11;
    sub_1000085FC(a1, v14, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_1002FB288(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  __int128 v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_1007EC0D8(a5, a2 + 4))
  {
    if ((void *)*a1 == a2)
    {
      __int128 v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    __int128 v11 = (void *)*a2;
    if (*a2)
    {
      do
      {
        __int128 v12 = v11;
        __int128 v11 = (void *)v11[1];
      }

      while (v11);
    }

    else
    {
      uint64_t v16 = a2;
      do
      {
        __int128 v12 = (void *)v16[2];
        BOOL v17 = *v12 == (void)v16;
        uint64_t v16 = v12;
      }

      while (v17);
    }

    if (sub_1007EC0D8(v12 + 4, a5)) {
      goto LABEL_16;
    }
    return sub_1002FB00C((uint64_t)a1, a3, a5);
  }

  if (sub_1007EC0D8(a2 + 4, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        BOOL v15 = v14;
        uint64_t v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      __int128 v18 = a2;
      do
      {
        BOOL v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        __int128 v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      if (!sub_1007EC0D8(a5, v15 + 4)) {
        return sub_1002FB00C((uint64_t)a1, a3, a5);
      }
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = a2;
    }

    return a4;
  }

  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_1002FB4B0(id a1)
{
  qword_101994200 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLVO2MaxServiceSilo");
}

void sub_1002FBA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1002FBCA4(id a1)
{
}

void sub_1002FC520( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

id sub_1002FC568(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onUserInfoUpdate:a2 data:a3];
}

id sub_1002FC578(uint64_t a1, void *a2)
{
  return _[a2 forceClearHistoryDatabase];
}

id sub_1002FC580(uint64_t a1, void *a2)
{
  return [a2 updateBypassParameters];
}

void sub_1002FC880( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

void sub_1002FCCEC(_Unwind_Exception *a1)
{
}

NSDictionary *sub_1002FCD0C(uint64_t a1)
{
  v10[0] = @"age_bin";
  float v2 = *(float *)(*(void *)(a1 + 32) + 164LL);
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  sub_10001B72C(&__p, (const void *)qword_101994220, unk_101994228, (unk_101994228 - qword_101994220) >> 2);
  if (v8 == __p)
  {
    unint64_t v3 = 0LL;
  }

  else
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = (v8 - (_BYTE *)__p) >> 2;
    if (v4 <= 1) {
      unint64_t v4 = 1LL;
    }
    while (*((float *)__p + v3) < v2)
    {
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
  }

  v11[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v3);
  v10[1] = @"biologicalSex";
  v11[1] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 148LL));
  _DWORD v11[2] = &off_1018D3170;
  v10[2] = @"currentAlgVersion";
  v10[3] = @"reasonIneligible";
  v11[3] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 176));
  v10[4] = @"status";
  v11[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  uint64_t v10[5] = @"estimateAverageDelta";
  v11[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 120));
  v10[6] = @"estimateVariabilityDelta";
  void v11[6] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 168));
  v10[7] = @"highPercentileEstimateDelta";
  v11[7] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 160));
  _WORD v10[8] = @"meanPercentileDelta";
  v11[8] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 128));
  v10[9] = @"newEstimateN";
  v11[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 140));
  v10[10] = @"numUpdatedEstimatesTotal";
  _OWORD v11[10] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 136));
  v10[11] = @"removeEstimateN";
  v11[11] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 144));
  BOOL v5 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  12LL);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }

  return v5;
}

void sub_1002FCF6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void sub_1002FD414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002FD440(uint64_t a1, xpc_activity_t activity)
{
  if (xpc_activity_get_state(activity))
  {
    [*(id *)(a1 + 32) onRetrocomputePreprocessingActivity:activity];
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4LL))
    {
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101831B18);
      }
      unint64_t v4 = (os_log_s *)qword_1019346E8;
      if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 134349056;
        os_activity_scope_state_s state = (const char *)xpc_activity_get_state(activity);
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Failed to mark VO2MaxRetrocomputePreProcessing activity as Continue. Current state is %{public}ld",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101831B18);
        }
        uint64_t v5 = qword_1019346E8;
        int v18 = 134349056;
        uint64_t v19 = (const char *)xpc_activity_get_state(activity);
        BOOL v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v5,  17LL,  "Failed to mark VO2MaxRetrocomputePreProcessing activity as Continue. Current state is %{public}ld",  &v18,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke",  "%s\n",  v6);
      }
    }
  }

  else
  {
    xpc_object_t v7 = xpc_activity_copy_criteria(activity);
    if (!v7) {
      xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    }
    int64_t int64 = xpc_dictionary_get_int64(v7, XPC_ACTIVITY_DELAY);
    if (int64 == *(void *)(a1 + 40))
    {
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101831B18);
      }
      uint64_t v9 = (os_log_s *)qword_1019346E8;
      if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v10 = *(const char **)(a1 + 40);
        *(_DWORD *)__int128 buf = 134349056;
        os_activity_scope_state_s state = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "XPC_CHECK_IN: VO2MaxRetrocomputePreProcessing already scheduled with a delay of %{public}lld seconds",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101831B18);
        }
        __int128 v11 = *(const char **)(a1 + 40);
        int v18 = 134349056;
        uint64_t v19 = v11;
        __int128 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "XPC_CHECK_IN: VO2MaxRetrocomputePreProcessing already scheduled with a delay of %{public}lld seconds",  &v18,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke",  "%s\n",  v12);
      }
    }

    else
    {
      int64_t v13 = int64;
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101831B18);
      }
      uint64_t v14 = (os_log_s *)qword_1019346E8;
      if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 136446722;
        os_activity_scope_state_s state = "com.apple.locationd.VO2Max.RetrocomputePreprocessing";
        __int16 v26 = 2050;
        int64_t v27 = v13;
        __int16 v28 = 2050;
        uint64_t v29 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101831B18);
        }
        uint64_t v16 = *(void *)(a1 + 40);
        int v18 = 136446722;
        uint64_t v19 = "com.apple.locationd.VO2Max.RetrocomputePreprocessing";
        __int16 v20 = 2050;
        int64_t v21 = v13;
        __int16 v22 = 2050;
        uint64_t v23 = v16;
        BOOL v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds",  &v18,  32);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke",  "%s\n",  v17);
      }

      xpc_dictionary_set_int64(v7, XPC_ACTIVITY_DELAY, *(void *)(a1 + 40));
      xpc_dictionary_set_int64(v7, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v7);
    }

    xpc_release(v7);
  }

void sub_1002FDC50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002FEE40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100300538( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27)
{
  __int16 v28 = (void *)a17;
  a17 = 0LL;
  if (v28) {
    sub_100306F68((uint64_t)&a17, v28);
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }

  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }

  sub_10030089C((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_100300684(unsigned int *a1@<X1>, unsigned int *a2@<X3>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x6A0uLL);
  uint64_t v16 = 0LL;
  BOOL v17 = 0LL;
  uint64_t v7 = *a1;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  sub_100C7FDDC(v6, &v16, v7, &v14, *a2);
  *a3 = v6;
  uint64_t v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  __int128 v11 = v17;
  if (v17)
  {
    __int128 v12 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_100300754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100300778(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  sub_1002E2234( (void *)(a1 + 32),  *((const void **)a2 + 4),  *((void *)a2 + 5),  0xD37A6F4DE9BD37A7LL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  __int128 v5 = *(__int128 *)((char *)a2 + 72);
  __int128 v6 = *(__int128 *)((char *)a2 + 88);
  __int128 v7 = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  __int128 v8 = *(__int128 *)((char *)a2 + 136);
  __int128 v9 = *(__int128 *)((char *)a2 + 152);
  __int128 v10 = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 184) = *(__int128 *)((char *)a2 + 184);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  __int128 v11 = *(__int128 *)((char *)a2 + 200);
  __int128 v12 = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 228) = *(__int128 *)((char *)a2 + 228);
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  unint64_t v13 = (_BYTE *)(a1 + 248);
  if (*((char *)a2 + 271) < 0)
  {
    sub_1010DD48C(v13, *((void **)a2 + 31), *((void *)a2 + 32));
  }

  else
  {
    __int128 v14 = *(__int128 *)((char *)a2 + 248);
    *(void *)(a1 + 264) = *((void *)a2 + 33);
    *(_OWORD *)unint64_t v13 = v14;
  }

  *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 68);
  return a1;
}

void sub_100300880(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10030089C(uint64_t a1)
{
  float v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100300B30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100301A8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  a39 = (uint64_t)&a21;
  sub_100306FF0((void ***)&a39);
  a39 = (uint64_t)&a24;
  sub_100306FF0((void ***)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_100301B2C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  uint64_t v10 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = a1 + 160;
  if (*(char *)(a2 + 183) < 0)
  {
    sub_1010DD48C((_BYTE *)v11, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }

  else
  {
    __int128 v12 = *(_OWORD *)(a2 + 160);
    *(void *)(v11 + 16) = *(void *)(a2 + 176);
    *(_OWORD *)uint64_t v11 = v12;
  }

  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

void sub_10030215C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

void sub_100302658( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100302BC8(uint64_t a1, _xpc_activity_s *a2)
{
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4LL))
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101831B18);
    }
    unint64_t v3 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v11 = "com.apple.locationd.VO2Max.RetrocomputeRetryTrigger";
      __int16 v12 = 2050;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Failed to mark %{public}s activity as Continue. Current state is %{public}ld",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101831B18);
      }
      uint64_t v4 = qword_1019346E8;
      int v6 = 136446466;
      __int128 v7 = "com.apple.locationd.VO2Max.RetrocomputeRetryTrigger";
      __int16 v8 = 2050;
      xpc_activity_state_t v9 = xpc_activity_get_state(a2);
      __int128 v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  17LL,  "Failed to mark %{public}s activity as Continue. Current state is %{public}ld",  &v6,  22);
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLVO2MaxService retryTriggerRetrocompute]_block_invoke", "%s\n", v5);
    }
  }

void sub_100303A5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

void sub_100303F24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003041EC(uint64_t a1, _xpc_activity_s *a2)
{
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4LL))
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101831B18);
    }
    unint64_t v3 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 134349056;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as Continue. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101831B18);
      }
      uint64_t v4 = qword_1019346E8;
      int v6 = 134349056;
      xpc_activity_state_t v7 = xpc_activity_get_state(a2);
      __int128 v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  17LL,  "Failed to mark activity as Continue. Current state is %{public}ld",  &v6,  12);
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLVO2MaxService retryHealthKitDeleteSamples]_block_invoke", "%s\n", v5);
    }
  }

void sub_1003046EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100305644(id a1)
{
  qword_1019346E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void *sub_100305670@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1C0uLL);
  float result = sub_1003056C8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1003056B4(_Unwind_Exception *a1)
{
}

void *sub_1003056C8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101831B48;
  sub_100FCCC3C(a1 + 3, *a2);
  return a1;
}

void sub_100305704(_Unwind_Exception *a1)
{
}

void sub_100305718(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101831B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10030572C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101831B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100305750(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void *sub_100305760@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1E0uLL);
  float result = sub_1003057B8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1003057A4(_Unwind_Exception *a1)
{
}

void *sub_1003057B8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101831B98;
  sub_100404DBC(a1 + 3, *a2);
  return a1;
}

void sub_1003057F4(_Unwind_Exception *a1)
{
}

void sub_100305808(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101831B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10030581C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101831B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100305840(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void *sub_100305850@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x208uLL);
  float result = sub_1003058A8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100305894(_Unwind_Exception *a1)
{
}

void *sub_1003058A8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101831BE8;
  sub_100E323E8(a1 + 3, *a2);
  return a1;
}

void sub_1003058E4(_Unwind_Exception *a1)
{
}

void sub_1003058F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101831BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10030590C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101831BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100305930(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

void sub_100305940(uint64_t a1, double *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (uint64_t)a2 - v8;
    uint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*(a2 - 9) < *(double *)(v8 + 8))
        {
          __int128 v148 = *(_OWORD *)v8;
          __int128 v184 = *(_OWORD *)(v8 + 48);
          __int128 v196 = *(_OWORD *)(v8 + 64);
          __int128 v160 = *(_OWORD *)(v8 + 16);
          __int128 v172 = *(_OWORD *)(v8 + 32);
          __int128 v55 = *((_OWORD *)a2 - 1);
          __int128 v57 = *((_OWORD *)a2 - 4);
          __int128 v56 = *((_OWORD *)a2 - 3);
          *(_OWORD *)(v8 + 48) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 64) = v55;
          *(_OWORD *)(v8 + 16) = v57;
          *(_OWORD *)(v8 + 32) = v56;
          *(_OWORD *)unint64_t v8 = *((_OWORD *)a2 - 5);
          *((_OWORD *)a2 - 2) = v184;
          *((_OWORD *)a2 - 1) = v196;
          *((_OWORD *)a2 - 4) = v160;
          *((_OWORD *)a2 - 3) = v172;
          *((_OWORD *)a2 - 5) = v148;
        }

        return;
      case 3LL:
        sub_100306428(v8, v8 + 80, (uint64_t)(a2 - 10));
        return;
      case 4LL:
        sub_10030699C(v8, v8 + 80, v8 + 160, (uint64_t)(a2 - 10));
        return;
      case 5LL:
        int v58 = (__int128 *)(v8 + 80);
        __int16 v59 = (__int128 *)(v8 + 160);
        uint64_t v60 = (__int128 *)(v8 + 240);
        sub_10030699C(v8, v8 + 80, v8 + 160, v8 + 240);
        if (*(a2 - 9) < *(double *)(v8 + 248))
        {
          __int128 v173 = *(_OWORD *)(v8 + 272);
          __int128 v185 = *(_OWORD *)(v8 + 288);
          __int128 v197 = *(_OWORD *)(v8 + 304);
          __int128 v149 = *v60;
          __int128 v161 = *(_OWORD *)(v8 + 256);
          __int128 v62 = *((_OWORD *)a2 - 4);
          __int128 v61 = *((_OWORD *)a2 - 3);
          __int128 v63 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v8 + 288) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 304) = v63;
          *(_OWORD *)(v8 + 256) = v62;
          *(_OWORD *)(v8 + 272) = v61;
          __int128 *v60 = *((_OWORD *)a2 - 5);
          *((_OWORD *)a2 - 5) = v149;
          *((_OWORD *)a2 - 2) = v185;
          *((_OWORD *)a2 - 1) = v197;
          *((_OWORD *)a2 - 4) = v161;
          *((_OWORD *)a2 - 3) = v173;
          if (*(double *)(v8 + 248) < *(double *)(v8 + 168))
          {
            __int128 v174 = *(_OWORD *)(v8 + 192);
            __int128 v186 = *(_OWORD *)(v8 + 208);
            __int128 v198 = *(_OWORD *)(v8 + 224);
            __int128 v150 = *v59;
            __int128 v162 = *(_OWORD *)(v8 + 176);
            __int128 v64 = *(_OWORD *)(v8 + 288);
            *(_OWORD *)(v8 + 192) = *(_OWORD *)(v8 + 272);
            *(_OWORD *)(v8 + 208) = v64;
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 304);
            __int128 v65 = *(_OWORD *)(v8 + 256);
            __int128 *v59 = *v60;
            *(_OWORD *)(v8 + 176) = v65;
            *(_OWORD *)(v8 + 288) = v186;
            *(_OWORD *)(v8 + 304) = v198;
            *(_OWORD *)(v8 + 256) = v162;
            *(_OWORD *)(v8 + 272) = v174;
            double v66 = *(double *)(v8 + 168);
            double v67 = *(double *)(v8 + 88);
            __int128 *v60 = v150;
            if (v66 < v67)
            {
              __int128 v175 = *(_OWORD *)(v8 + 112);
              __int128 v187 = *(_OWORD *)(v8 + 128);
              __int128 v199 = *(_OWORD *)(v8 + 144);
              __int128 v151 = *v58;
              __int128 v163 = *(_OWORD *)(v8 + 96);
              __int128 v68 = *(_OWORD *)(v8 + 208);
              *(_OWORD *)(v8 + 112) = *(_OWORD *)(v8 + 192);
              *(_OWORD *)(v8 + 128) = v68;
              *(_OWORD *)(v8 + 144) = *(_OWORD *)(v8 + 224);
              __int128 v69 = *(_OWORD *)(v8 + 176);
              *int v58 = *v59;
              *(_OWORD *)(v8 + 96) = v69;
              *(_OWORD *)(v8 + 208) = v187;
              *(_OWORD *)(v8 + 224) = v199;
              *(_OWORD *)(v8 + 176) = v163;
              *(_OWORD *)(v8 + 192) = v175;
              double v70 = *(double *)(v8 + 88);
              double v71 = *(double *)(v8 + 8);
              __int128 *v59 = v151;
              if (v70 < v71)
              {
                __int128 v152 = *(_OWORD *)v8;
                __int128 v188 = *(_OWORD *)(v8 + 48);
                __int128 v200 = *(_OWORD *)(v8 + 64);
                __int128 v164 = *(_OWORD *)(v8 + 16);
                __int128 v176 = *(_OWORD *)(v8 + 32);
                __int128 v72 = *(_OWORD *)(v8 + 144);
                __int128 v73 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)(v8 + 48) = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 64) = v72;
                __int128 v74 = *v58;
                *(_OWORD *)(v8 + 16) = *(_OWORD *)(v8 + 96);
                *(_OWORD *)(v8 + 32) = v73;
                *(_OWORD *)unint64_t v8 = v74;
                *(_OWORD *)(v8 + 128) = v188;
                *(_OWORD *)(v8 + 144) = v200;
                *(_OWORD *)(v8 + 96) = v164;
                *(_OWORD *)(v8 + 112) = v176;
                *int v58 = v152;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 1919)
        {
          __int16 v75 = (double *)(v8 + 80);
          BOOL v77 = (double *)v8 == a2 || v75 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v77)
            {
              uint64_t v78 = 0LL;
              unint64_t v79 = v8;
              do
              {
                int v80 = v75;
                double v81 = *(double *)(v79 + 88);
                if (v81 < *(double *)(v79 + 8))
                {
                  uint64_t v82 = *(void *)v75;
                  __int128 v153 = *(_OWORD *)(v79 + 96);
                  __int128 v165 = *(_OWORD *)(v79 + 112);
                  __int128 v177 = *(_OWORD *)(v79 + 128);
                  __int128 v189 = *(_OWORD *)(v79 + 144);
                  uint64_t v83 = v78;
                  while (1)
                  {
                    int v84 = (double *)(v8 + v83);
                    __int128 v85 = *(_OWORD *)(v8 + v83 + 48);
                    *((_OWORD *)v84 + 7) = *(_OWORD *)(v8 + v83 + 32);
                    *((_OWORD *)v84 + 8) = v85;
                    *((_OWORD *)v84 + 9) = *(_OWORD *)(v8 + v83 + 64);
                    __int128 v86 = *(_OWORD *)(v8 + v83 + 16);
                    *((_OWORD *)v84 + 5) = *(_OWORD *)(v8 + v83);
                    *((_OWORD *)v84 + 6) = v86;
                    if (!v83) {
                      break;
                    }
                    v83 -= 80LL;
                    if (v81 >= *(v84 - 9))
                    {
                      uint64_t v87 = v8 + v83 + 80;
                      goto LABEL_78;
                    }
                  }

                  uint64_t v87 = v8;
LABEL_78:
                  *(void *)uint64_t v87 = v82;
                  *(double *)(v87 + 8) = v81;
                  *(_OWORD *)(v87 + 16) = v153;
                  *(_OWORD *)(v87 + 32) = v165;
                  *(_OWORD *)(v87 + 48) = v177;
                  *(_OWORD *)(v87 + 64) = v189;
                }

                __int16 v75 = v80 + 10;
                v78 += 80LL;
                unint64_t v79 = (unint64_t)v80;
              }

              while (v80 + 10 != a2);
            }
          }

          else if (!v77)
          {
            do
            {
              uint64_t v128 = (uint64_t)v75;
              double v129 = *(double *)(a1 + 88);
              if (v129 < *(double *)(a1 + 8))
              {
                uint64_t v130 = *(void *)v75;
                __int128 v156 = *(_OWORD *)(a1 + 96);
                __int128 v168 = *(_OWORD *)(a1 + 112);
                __int128 v180 = *(_OWORD *)(a1 + 128);
                __int128 v192 = *(_OWORD *)(a1 + 144);
                do
                {
                  __int128 v131 = *((_OWORD *)v75 - 2);
                  *((_OWORD *)v75 + 2) = *((_OWORD *)v75 - 3);
                  *((_OWORD *)v75 + 3) = v131;
                  *((_OWORD *)v75 + 4) = *((_OWORD *)v75 - 1);
                  __int128 v132 = *((_OWORD *)v75 - 4);
                  *(_OWORD *)__int16 v75 = *((_OWORD *)v75 - 5);
                  *((_OWORD *)v75 + 1) = v132;
                  *(double *)&__int128 v132 = *(v75 - 19);
                  v75 -= 10;
                }

                while (v129 < *(double *)&v132);
                *(void *)__int16 v75 = v130;
                v75[1] = v129;
                *((_OWORD *)v75 + 3) = v180;
                *((_OWORD *)v75 + 4) = v192;
                *((_OWORD *)v75 + 1) = v156;
                *((_OWORD *)v75 + 2) = v168;
              }

              __int16 v75 = (double *)(v128 + 80);
              a1 = v128;
            }

            while ((double *)(v128 + 80) != a2);
          }

          return;
        }

        if (!a3)
        {
          int64_t v88 = (unint64_t)(v10 - 2) >> 1;
          int64_t v89 = v88;
          do
          {
            int64_t v90 = v89;
            if (v88 >= v89)
            {
              uint64_t v91 = (2 * v89) | 1;
              unint64_t v92 = v8 + 80 * v91;
              if (2 * v90 + 2 < v10 && *(double *)(v8 + 80 * v91 + 8) < *(double *)(v92 + 88))
              {
                v92 += 80LL;
                uint64_t v91 = 2 * v90 + 2;
              }

              double v93 = *(double *)(v8 + 80 * v90 + 8);
              if (*(double *)(v92 + 8) >= v93)
              {
                unint64_t v94 = v8 + 80 * v90;
                uint64_t v95 = *(void *)v94;
                __int128 v178 = *(_OWORD *)(v94 + 48);
                __int128 v190 = *(_OWORD *)(v94 + 64);
                __int128 v154 = *(_OWORD *)(v94 + 16);
                __int128 v166 = *(_OWORD *)(v94 + 32);
                do
                {
                  __int16 v96 = (_OWORD *)v94;
                  unint64_t v94 = v92;
                  *__int16 v96 = *(_OWORD *)v92;
                  __int128 v97 = *(_OWORD *)(v92 + 16);
                  __int128 v98 = *(_OWORD *)(v92 + 32);
                  __int128 v99 = *(_OWORD *)(v92 + 64);
                  v96[3] = *(_OWORD *)(v92 + 48);
                  v96[4] = v99;
                  v96[1] = v97;
                  v96[2] = v98;
                  if (v88 < v91) {
                    break;
                  }
                  uint64_t v100 = (2 * v91) | 1;
                  unint64_t v92 = v8 + 80 * v100;
                  uint64_t v101 = 2 * v91 + 2;
                  if (v101 < v10 && *(double *)(v8 + 80 * v100 + 8) < *(double *)(v92 + 88))
                  {
                    v92 += 80LL;
                    uint64_t v100 = v101;
                  }

                  uint64_t v91 = v100;
                }

                while (*(double *)(v92 + 8) >= v93);
                *(void *)unint64_t v94 = v95;
                *(double *)(v94 + 8) = v93;
                *(_OWORD *)(v94 + 16) = v154;
                *(_OWORD *)(v94 + 32) = v166;
                *(_OWORD *)(v94 + 48) = v178;
                *(_OWORD *)(v94 + 64) = v190;
              }
            }

            int64_t v89 = v90 - 1;
          }

          while (v90);
          int64_t v102 = v9 / 0x50uLL;
          while (2)
          {
            uint64_t v103 = 0LL;
            __int128 v155 = *(_OWORD *)v8;
            __int128 v191 = *(_OWORD *)(v8 + 48);
            __int128 v201 = *(_OWORD *)(v8 + 64);
            __int128 v167 = *(_OWORD *)(v8 + 16);
            __int128 v179 = *(_OWORD *)(v8 + 32);
            unint64_t v104 = v8;
            do
            {
              float v105 = (_OWORD *)v104;
              uint64_t v106 = v103 + 1;
              v104 += 80 * (v103 + 1);
              uint64_t v107 = 2 * v103;
              uint64_t v103 = (2 * v103) | 1;
              int64_t v108 = v107 + 2;
              if (v108 < v102 && *((double *)&v105[5 * v106] + 1) < *(double *)(v104 + 88))
              {
                v104 += 80LL;
                uint64_t v103 = v108;
              }

              *float v105 = *(_OWORD *)v104;
              __int128 v109 = *(_OWORD *)(v104 + 16);
              __int128 v110 = *(_OWORD *)(v104 + 32);
              __int128 v111 = *(_OWORD *)(v104 + 64);
              v105[3] = *(_OWORD *)(v104 + 48);
              v105[4] = v111;
              v105[1] = v109;
              v105[2] = v110;
            }

            while (v103 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
            a2 -= 10;
            if ((double *)v104 != a2)
            {
              *(_OWORD *)unint64_t v104 = *(_OWORD *)a2;
              __int128 v112 = *((_OWORD *)a2 + 1);
              __int128 v113 = *((_OWORD *)a2 + 2);
              __int128 v114 = *((_OWORD *)a2 + 4);
              *(_OWORD *)(v104 + 48) = *((_OWORD *)a2 + 3);
              *(_OWORD *)(v104 + 64) = v114;
              *(_OWORD *)(v104 + 16) = v112;
              *(_OWORD *)(v104 + 32) = v113;
              *((_OWORD *)a2 + 3) = v191;
              *((_OWORD *)a2 + 4) = v201;
              *((_OWORD *)a2 + 1) = v167;
              *((_OWORD *)a2 + 2) = v179;
              *(_OWORD *)a2 = v155;
              uint64_t v115 = v104 - v8 + 80;
              if (v115 >= 81)
              {
                unint64_t v116 = (v115 / 0x50uLL - 2) >> 1;
                double v117 = *(double *)(v104 + 8);
                if (*(double *)(v8 + 80 * v116 + 8) < v117)
                {
                  uint64_t v118 = *(void *)v104;
                  __int128 v141 = *(_OWORD *)(v104 + 48);
                  __int128 v144 = *(_OWORD *)(v104 + 64);
                  __int128 v135 = *(_OWORD *)(v104 + 16);
                  __int128 v138 = *(_OWORD *)(v104 + 32);
                  do
                  {
                    uint64_t v119 = (_OWORD *)v104;
                    unint64_t v104 = v8 + 80 * v116;
                    *uint64_t v119 = *(_OWORD *)v104;
                    __int128 v120 = *(_OWORD *)(v104 + 16);
                    __int128 v121 = *(_OWORD *)(v104 + 32);
                    __int128 v122 = *(_OWORD *)(v104 + 64);
                    v119[3] = *(_OWORD *)(v104 + 48);
                    v119[4] = v122;
                    v119[1] = v120;
                    v119[2] = v121;
                    if (!v116) {
                      break;
                    }
                    unint64_t v116 = (v116 - 1) >> 1;
                  }

                  while (*(double *)(v8 + 80 * v116 + 8) < v117);
                  *(void *)unint64_t v104 = v118;
                  *(double *)(v104 + 8) = v117;
                  __int128 v123 = v135;
                  __int128 v124 = v138;
                  __int128 v125 = v141;
                  __int128 v126 = v144;
LABEL_110:
                  *(_OWORD *)(v104 + 48) = v125;
                  *(_OWORD *)(v104 + 64) = v126;
                  *(_OWORD *)(v104 + 16) = v123;
                  *(_OWORD *)(v104 + 32) = v124;
                }
              }

              if (v102-- <= 2) {
                return;
              }
              continue;
            }

            break;
          }

          *(_OWORD *)unint64_t v104 = v155;
          __int128 v123 = v167;
          __int128 v124 = v179;
          __int128 v125 = v191;
          __int128 v126 = v201;
          goto LABEL_110;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        __int16 v12 = (_OWORD *)(v8 + 80 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x2801)
        {
          sub_100306428((uint64_t)v12, a1, (uint64_t)(a2 - 10));
        }

        else
        {
          sub_100306428(a1, (uint64_t)v12, (uint64_t)(a2 - 10));
          uint64_t v13 = 5 * v11;
          uint64_t v14 = a1 + 80 * v11 - 80;
          sub_100306428(a1 + 80, v14, (uint64_t)(a2 - 20));
          uint64_t v15 = a1 + 80 + 16 * v13;
          sub_100306428(a1 + 160, v15, (uint64_t)(a2 - 30));
          sub_100306428(v14, (uint64_t)v12, v15);
          __int128 v145 = *(_OWORD *)a1;
          __int128 v181 = *(_OWORD *)(a1 + 48);
          __int128 v193 = *(_OWORD *)(a1 + 64);
          __int128 v157 = *(_OWORD *)(a1 + 16);
          __int128 v169 = *(_OWORD *)(a1 + 32);
          __int128 v16 = v12[4];
          __int128 v18 = v12[1];
          __int128 v17 = v12[2];
          *(_OWORD *)(a1 + 48) = v12[3];
          *(_OWORD *)(a1 + 64) = v16;
          *(_OWORD *)(a1 + 16) = v18;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)a1 = *v12;
          v12[3] = v181;
          v12[4] = v193;
          v12[1] = v157;
          v12[2] = v169;
          *__int16 v12 = v145;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v19 = *(double *)(a1 + 8);
          uint64_t v39 = *(void *)a1;
          __int128 v140 = *(_OWORD *)(a1 + 48);
          __int128 v143 = *(_OWORD *)(a1 + 64);
          __int128 v134 = *(_OWORD *)(a1 + 16);
          __int128 v137 = *(_OWORD *)(a1 + 32);
          if (v19 >= *(a2 - 9))
          {
            unint64_t v42 = a1 + 80;
            do
            {
              unint64_t v8 = v42;
              double v43 = *(double *)(v42 + 8);
              v42 += 80LL;
            }

            while (v19 >= v43);
          }

          else
          {
            uint64_t v40 = a1;
            do
            {
              unint64_t v8 = v40 + 80;
              double v41 = *(double *)(v40 + 88);
              v40 += 80LL;
            }

            while (v19 >= v41);
          }

          double v44 = a2;
          if (v8 < (unint64_t)a2)
          {
            __int16 v45 = a2;
            do
            {
              double v44 = v45 - 10;
              double v46 = *(v45 - 9);
              v45 -= 10;
            }

            while (v19 < v46);
          }

          while (v8 < (unint64_t)v44)
          {
            __int128 v147 = *(_OWORD *)v8;
            __int128 v183 = *(_OWORD *)(v8 + 48);
            __int128 v195 = *(_OWORD *)(v8 + 64);
            __int128 v159 = *(_OWORD *)(v8 + 16);
            __int128 v171 = *(_OWORD *)(v8 + 32);
            __int128 v47 = *((_OWORD *)v44 + 4);
            __int128 v49 = *((_OWORD *)v44 + 1);
            __int128 v48 = *((_OWORD *)v44 + 2);
            *(_OWORD *)(v8 + 48) = *((_OWORD *)v44 + 3);
            *(_OWORD *)(v8 + 64) = v47;
            *(_OWORD *)(v8 + 16) = v49;
            *(_OWORD *)(v8 + 32) = v48;
            *(_OWORD *)unint64_t v8 = *(_OWORD *)v44;
            *((_OWORD *)v44 + 3) = v183;
            *((_OWORD *)v44 + 4) = v195;
            *((_OWORD *)v44 + 1) = v159;
            *((_OWORD *)v44 + 2) = v171;
            *(_OWORD *)double v44 = v147;
            do
            {
              double v50 = *(double *)(v8 + 88);
              v8 += 80LL;
            }

            while (v19 >= v50);
            do
            {
              double v51 = *(v44 - 9);
              v44 -= 10;
            }

            while (v19 < v51);
          }

          if (v8 - 80 != a1)
          {
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 80);
            __int128 v52 = *(_OWORD *)(v8 - 64);
            __int128 v53 = *(_OWORD *)(v8 - 48);
            __int128 v54 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 64) = v54;
            *(_OWORD *)(a1 + 16) = v52;
            *(_OWORD *)(a1 + 32) = v53;
          }

          a4 = 0;
          *(void *)(v8 - 80) = v39;
          *(double *)(v8 - 72) = v19;
          *(_OWORD *)(v8 - 32) = v140;
          *(_OWORD *)(v8 - 16) = v143;
          *(_OWORD *)(v8 - 64) = v134;
          *(_OWORD *)(v8 - 48) = v137;
          continue;
        }

        double v19 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v20 = 0LL;
        uint64_t v21 = *(void *)a1;
        __int128 v139 = *(_OWORD *)(a1 + 48);
        __int128 v142 = *(_OWORD *)(a1 + 64);
        __int128 v133 = *(_OWORD *)(a1 + 16);
        __int128 v136 = *(_OWORD *)(a1 + 32);
        do
        {
          double v22 = *(double *)(a1 + v20 + 88);
          v20 += 80LL;
        }

        while (v22 < v19);
        unint64_t v23 = a1 + v20;
        uint64_t v24 = a2;
        if (v20 == 80)
        {
          int64_t v27 = a2;
          while (v23 < (unint64_t)v27)
          {
            __int16 v25 = v27 - 10;
            double v28 = *(v27 - 9);
            v27 -= 10;
            if (v28 < v19) {
              goto LABEL_21;
            }
          }

          __int16 v25 = v27;
        }

        else
        {
          do
          {
            __int16 v25 = v24 - 10;
            double v26 = *(v24 - 9);
            v24 -= 10;
          }

          while (v26 >= v19);
        }

__n128 sub_100306428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  result.n128_u64[0] = *(void *)(a2 + 8);
  double v4 = *(double *)(a3 + 8);
  if (result.n128_f64[0] >= *(double *)(a1 + 8))
  {
    if (v4 < result.n128_f64[0])
    {
      __int128 v29 = *(_OWORD *)(a2 + 32);
      __int128 v33 = *(_OWORD *)(a2 + 48);
      __int128 v37 = *(_OWORD *)(a2 + 64);
      __n128 v21 = *(__n128 *)a2;
      __int128 v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      __int128 v8 = *(_OWORD *)(a3 + 64);
      __int128 v10 = *(_OWORD *)(a3 + 16);
      __int128 v9 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(_OWORD *)(a2 + 16) = v10;
      *(_OWORD *)(a2 + 32) = v9;
      *(_OWORD *)(a3 + 48) = v33;
      *(_OWORD *)(a3 + 64) = v37;
      result.n128_u64[1] = v21.n128_u64[1];
      *(__n128 *)a3 = v21;
      *(_OWORD *)(a3 + 16) = v25;
      *(_OWORD *)(a3 + 32) = v29;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        __int128 v30 = *(_OWORD *)(a1 + 32);
        __int128 v34 = *(_OWORD *)(a1 + 48);
        __int128 v38 = *(_OWORD *)(a1 + 64);
        __n128 v22 = *(__n128 *)a1;
        __int128 v26 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        __int128 v11 = *(_OWORD *)(a2 + 64);
        __int128 v13 = *(_OWORD *)(a2 + 16);
        __int128 v12 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v11;
        *(_OWORD *)(a1 + 16) = v13;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)(a2 + 48) = v34;
        *(_OWORD *)(a2 + 64) = v38;
        __n128 result = v22;
        *(__n128 *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v26;
        *(_OWORD *)(a2 + 32) = v30;
      }
    }
  }

  else
  {
    if (v4 >= result.n128_f64[0])
    {
      __int128 v31 = *(_OWORD *)(a1 + 32);
      __int128 v35 = *(_OWORD *)(a1 + 48);
      __int128 v39 = *(_OWORD *)(a1 + 64);
      __n128 v23 = *(__n128 *)a1;
      __int128 v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      __int128 v14 = *(_OWORD *)(a2 + 64);
      __int128 v16 = *(_OWORD *)(a2 + 16);
      __int128 v15 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v14;
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v15;
      *(_OWORD *)(a2 + 48) = v35;
      *(_OWORD *)(a2 + 64) = v39;
      result.n128_u64[1] = v23.n128_u64[1];
      *(__n128 *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v27;
      *(_OWORD *)(a2 + 32) = v31;
      result.n128_u64[0] = *(void *)(a3 + 8);
      __int128 v28 = *(_OWORD *)(a2 + 32);
      __int128 v32 = *(_OWORD *)(a2 + 48);
      __int128 v36 = *(_OWORD *)(a2 + 64);
      __n128 v20 = *(__n128 *)a2;
      __int128 v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      __int128 v17 = *(_OWORD *)(a3 + 64);
      __int128 v19 = *(_OWORD *)(a3 + 16);
      __int128 v18 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v17;
      *(_OWORD *)(a2 + 16) = v19;
      *(_OWORD *)(a2 + 32) = v18;
    }

    else
    {
      __int128 v28 = *(_OWORD *)(a1 + 32);
      __int128 v32 = *(_OWORD *)(a1 + 48);
      __int128 v36 = *(_OWORD *)(a1 + 64);
      __n128 v20 = *(__n128 *)a1;
      __int128 v24 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      __int128 v5 = *(_OWORD *)(a3 + 64);
      __int128 v7 = *(_OWORD *)(a3 + 16);
      __int128 v6 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = v5;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v6;
    }

    *(_OWORD *)(a3 + 48) = v32;
    *(_OWORD *)(a3 + 64) = v36;
    __n128 result = v20;
    *(__n128 *)a3 = v20;
    *(_OWORD *)(a3 + 16) = v24;
    *(_OWORD *)(a3 + 32) = v28;
  }

  return result;
}

BOOL sub_100306608(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 72) < *(double *)(a1 + 8))
      {
        __int128 v48 = *(_OWORD *)(a1 + 32);
        __int128 v54 = *(_OWORD *)(a1 + 48);
        __int128 v60 = *(_OWORD *)(a1 + 64);
        __int128 v36 = *(_OWORD *)a1;
        __int128 v42 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        __int128 v6 = *(_OWORD *)(a2 - 16);
        __int128 v8 = *(_OWORD *)(a2 - 64);
        __int128 v7 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a2 - 32) = v54;
        *(_OWORD *)(a2 - 16) = v60;
        *(_OWORD *)(a2 - 80) = v36;
        *(_OWORD *)(a2 - 64) = v42;
        *(_OWORD *)(a2 - 48) = v48;
      }

      return result;
    case 3uLL:
      sub_100306428(a1, a1 + 80, a2 - 80);
      return 1LL;
    case 4uLL:
      sub_10030699C(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1LL;
    case 5uLL:
      __n128 v20 = (__int128 *)(a1 + 80);
      __n128 v21 = (__int128 *)(a1 + 160);
      __n128 v22 = (__int128 *)(a1 + 240);
      sub_10030699C(a1, a1 + 80, a1 + 160, a1 + 240);
      __int128 v50 = *(_OWORD *)(a1 + 272);
      __int128 v56 = *(_OWORD *)(a1 + 288);
      __int128 v61 = *(_OWORD *)(a1 + 304);
      __int128 v38 = *v22;
      __int128 v44 = *(_OWORD *)(a1 + 256);
      *__n128 v22 = *(_OWORD *)(a2 - 80);
      __int128 v23 = *(_OWORD *)(a2 - 16);
      __int128 v25 = *(_OWORD *)(a2 - 64);
      __int128 v24 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 304) = v23;
      *(_OWORD *)(a1 + 256) = v25;
      *(_OWORD *)(a1 + 272) = v24;
      *(_OWORD *)(a2 - 32) = v56;
      *(_OWORD *)(a2 - 16) = v61;
      *(_OWORD *)(a2 - 80) = v38;
      *(_OWORD *)(a2 - 64) = v44;
      *(_OWORD *)(a2 - 48) = v50;
      __int128 v51 = *(_OWORD *)(a1 + 192);
      __int128 v57 = *(_OWORD *)(a1 + 208);
      __int128 v62 = *(_OWORD *)(a1 + 224);
      __int128 v39 = *v21;
      __int128 v45 = *(_OWORD *)(a1 + 176);
      __int128 v26 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v26;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 304);
      __int128 v27 = *(_OWORD *)(a1 + 256);
      *__n128 v21 = *v22;
      *(_OWORD *)(a1 + 176) = v27;
      *(_OWORD *)(a1 + 288) = v57;
      *(_OWORD *)(a1 + 304) = v62;
      *(_OWORD *)(a1 + 256) = v45;
      *(_OWORD *)(a1 + 272) = v51;
      double v28 = *(double *)(a1 + 168);
      double v29 = *(double *)(a1 + 88);
      *__n128 v22 = v39;
      if (v28 >= v29) {
        return 1LL;
      }
      __int128 v52 = *(_OWORD *)(a1 + 112);
      __int128 v58 = *(_OWORD *)(a1 + 128);
      __int128 v63 = *(_OWORD *)(a1 + 144);
      __int128 v40 = *v20;
      __int128 v46 = *(_OWORD *)(a1 + 96);
      __int128 v30 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v30;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 224);
      __int128 v31 = *(_OWORD *)(a1 + 176);
      *__n128 v20 = *v21;
      *(_OWORD *)(a1 + 96) = v31;
      *(_OWORD *)(a1 + 208) = v58;
      *(_OWORD *)(a1 + 224) = v63;
      *(_OWORD *)(a1 + 176) = v46;
      *(_OWORD *)(a1 + 192) = v52;
      double v32 = *(double *)(a1 + 88);
      double v33 = *(double *)(a1 + 8);
      *__n128 v21 = v40;
      if (v32 >= v33) {
        return 1LL;
      }
      __int128 v53 = *(_OWORD *)(a1 + 32);
      __int128 v59 = *(_OWORD *)(a1 + 48);
      __int128 v64 = *(_OWORD *)(a1 + 64);
      __int128 v41 = *(_OWORD *)a1;
      __int128 v47 = *(_OWORD *)(a1 + 16);
      __int128 v34 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v34;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 144);
      __int128 v35 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v20;
      *(_OWORD *)(a1 + 16) = v35;
      *(_OWORD *)(a1 + 128) = v59;
      *(_OWORD *)(a1 + 144) = v64;
      *(_OWORD *)(a1 + 96) = v47;
      *(_OWORD *)(a1 + 112) = v53;
      BOOL result = 1LL;
      *__n128 v20 = v41;
      return result;
    default:
      uint64_t v9 = a1 + 160;
      sub_100306428(a1, a1 + 80, a1 + 160);
      uint64_t v10 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      __int128 v37 = *(_OWORD *)(v10 + 16);
      __int128 v43 = *(_OWORD *)(v10 + 32);
      __int128 v49 = *(_OWORD *)(v10 + 48);
      __int128 v55 = *(_OWORD *)(v10 + 64);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        __int128 v17 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 272) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 288) = v17;
        *(_OWORD *)(v16 + 304) = *(_OWORD *)(a1 + v15 + 224);
        __int128 v18 = *(_OWORD *)(a1 + v15 + 176);
        *(_OWORD *)(v16 + 240) = *(_OWORD *)(a1 + v15 + 160);
        *(_OWORD *)(v16 + 256) = v18;
        if (v15 == -160) {
          break;
        }
        v15 -= 80LL;
        if (v13 >= *(double *)(v16 + 88))
        {
          uint64_t v19 = a1 + v15 + 240;
          goto LABEL_12;
        }
      }

      uint64_t v19 = a1;
LABEL_12:
      *(void *)uint64_t v19 = v14;
      *(double *)(v19 + 8) = v13;
      *(_OWORD *)(v19 + 16) = v37;
      *(_OWORD *)(v19 + 32) = v43;
      *(_OWORD *)(v19 + 48) = v49;
      *(_OWORD *)(v19 + 64) = v55;
      if (++v12 == 8) {
        return v10 + 80 == a2;
      }
    }

    uint64_t v9 = v10;
    v11 += 80LL;
    v10 += 80LL;
    if (v10 == a2) {
      return 1LL;
    }
  }

__n128 sub_10030699C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    __int128 v24 = *(_OWORD *)(a3 + 32);
    __int128 v27 = *(_OWORD *)(a3 + 48);
    __int128 v30 = *(_OWORD *)(a3 + 64);
    __int128 v18 = *(_OWORD *)a3;
    __int128 v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    __int128 v9 = *(_OWORD *)(a4 + 64);
    __int128 v11 = *(_OWORD *)(a4 + 16);
    __int128 v10 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a4 + 48) = v27;
    *(_OWORD *)(a4 + 64) = v30;
    result.n128_u64[1] = *((void *)&v18 + 1);
    *(_OWORD *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v24;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      __int128 v25 = *(_OWORD *)(a2 + 32);
      __int128 v28 = *(_OWORD *)(a2 + 48);
      __int128 v31 = *(_OWORD *)(a2 + 64);
      __int128 v19 = *(_OWORD *)a2;
      __int128 v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      __int128 v12 = *(_OWORD *)(a3 + 64);
      __int128 v14 = *(_OWORD *)(a3 + 16);
      __int128 v13 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v12;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a3 + 48) = v28;
      *(_OWORD *)(a3 + 64) = v31;
      result.n128_u64[1] = *((void *)&v19 + 1);
      *(_OWORD *)a3 = v19;
      *(_OWORD *)(a3 + 16) = v22;
      *(_OWORD *)(a3 + 32) = v25;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        __int128 v26 = *(_OWORD *)(a1 + 32);
        __int128 v29 = *(_OWORD *)(a1 + 48);
        __int128 v32 = *(_OWORD *)(a1 + 64);
        __n128 v20 = *(__n128 *)a1;
        __int128 v23 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        __int128 v15 = *(_OWORD *)(a2 + 64);
        __int128 v17 = *(_OWORD *)(a2 + 16);
        __int128 v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v15;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 48) = v29;
        *(_OWORD *)(a2 + 64) = v32;
        __n128 result = v20;
        *(__n128 *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v26;
      }
    }
  }

  return result;
}

char *sub_100306B0C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  __int128 v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  __int128 v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xD37A6F4DE9BD37A7LL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    __int128 v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x2C8590B21642C859LL * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0x1642C8590B21642LL) {
      sub_100007008();
    }
    unint64_t v15 = 0xD37A6F4DE9BD37A7LL * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0xD37A6F4DE9BD37A7LL * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0xB21642C8590B21LL) {
      unint64_t v18 = 0x1642C8590B21642LL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v53 = v9;
    if (v18) {
      __int128 v19 = (char *)sub_1002DF6FC(v9, v18);
    }
    else {
      __int128 v19 = 0LL;
    }
    __int128 v36 = &v19[184 * v15];
    std::string __p = v19;
    __int128 v50 = v36;
    __int128 v52 = &v19[184 * v18];
    uint64_t v37 = 184 * a5;
    __int128 v38 = &v36[184 * a5];
    do
    {
      __int128 v39 = *(_OWORD *)v7;
      __int128 v40 = *((_OWORD *)v7 + 1);
      __int128 v41 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v36 + 2) = *((_OWORD *)v7 + 2);
      *((_OWORD *)v36 + 3) = v41;
      *(_OWORD *)__int128 v36 = v39;
      *((_OWORD *)v36 + 1) = v40;
      __int128 v42 = *((_OWORD *)v7 + 4);
      __int128 v43 = *((_OWORD *)v7 + 5);
      __int128 v44 = *((_OWORD *)v7 + 7);
      *((_OWORD *)v36 + 6) = *((_OWORD *)v7 + 6);
      *((_OWORD *)v36 + 7) = v44;
      *((_OWORD *)v36 + 4) = v42;
      *((_OWORD *)v36 + 5) = v43;
      __int128 v45 = *((_OWORD *)v7 + 8);
      __int128 v46 = *((_OWORD *)v7 + 9);
      __int128 v47 = *((_OWORD *)v7 + 10);
      *((void *)v36 + 22) = *((void *)v7 + 22);
      *((_OWORD *)v36 + 9) = v46;
      *((_OWORD *)v36 + 10) = v47;
      *((_OWORD *)v36 + 8) = v45;
      v36 += 184;
      v7 += 184;
      v37 -= 184LL;
    }

    while (v37);
    __int128 v51 = v38;
    __int128 v5 = (char *)sub_100306E3C((void **)a1, (uint64_t)&__p, v5);
    if (v51 != v50) {
      __int128 v51 = &v50[(v51 - v50 - 184) % 0xB8uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }

  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xD37A6F4DE9BD37A7LL * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    __int128 v21 = &__src[184 * a5];
    __int128 v23 = *(char **)(v9 - 8);
LABEL_17:
    __int128 v24 = &v5[184 * a5];
    __int128 v25 = &v23[-184 * a5];
    __int128 v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      __int128 v26 = v23;
      do
      {
        __int128 v27 = *(_OWORD *)v25;
        __int128 v28 = *((_OWORD *)v25 + 1);
        __int128 v29 = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 3) = v29;
        *(_OWORD *)__int128 v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        __int128 v30 = *((_OWORD *)v25 + 4);
        __int128 v31 = *((_OWORD *)v25 + 5);
        __int128 v32 = *((_OWORD *)v25 + 7);
        *((_OWORD *)v26 + 6) = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 7) = v32;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 5) = v31;
        __int128 v33 = *((_OWORD *)v25 + 8);
        __int128 v34 = *((_OWORD *)v25 + 9);
        __int128 v35 = *((_OWORD *)v25 + 10);
        *((void *)v26 + 22) = *((void *)v25 + 22);
        *((_OWORD *)v26 + 9) = v34;
        *((_OWORD *)v26 + 10) = v35;
        *((_OWORD *)v26 + 8) = v33;
        v25 += 184;
        v26 += 184;
      }

      while ((unint64_t)v25 < v12);
    }

    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v5[184 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }

  __int128 v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  __int128 v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100306DE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100306E3C(void **a1, uint64_t a2, char *__src)
{
  __int128 v5 = *(void **)(a2 + 8);
  __int128 v6 = (char *)*a1;
  __int128 v7 = v5;
  if (*a1 != __src)
  {
    __int128 v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      __int128 v10 = *(_OWORD *)(v8 - 184);
      __int128 v11 = *(_OWORD *)(v8 - 168);
      __int128 v12 = *(_OWORD *)(v8 - 152);
      *(_OWORD *)(v9 - 136) = *(_OWORD *)(v8 - 136);
      *(_OWORD *)(v9 - 152) = v12;
      *(_OWORD *)(v9 - 168) = v11;
      *(_OWORD *)(v9 - 184) = v10;
      __int128 v13 = *(_OWORD *)(v8 - 120);
      __int128 v14 = *(_OWORD *)(v8 - 104);
      __int128 v15 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v15;
      *(_OWORD *)(v9 - 104) = v14;
      *(_OWORD *)(v9 - 120) = v13;
      __int128 v16 = *(_OWORD *)(v8 - 56);
      __int128 v17 = *(_OWORD *)(v8 - 40);
      __int128 v18 = *(_OWORD *)(v8 - 24);
      __int128 v7 = (void *)(v9 - 184);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v18;
      *(_OWORD *)(v9 - 40) = v17;
      *(_OWORD *)(v9 - 56) = v16;
      v8 -= 184;
      v9 -= 184LL;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + 8) = v7;
  __int128 v19 = a1[1];
  uint64_t v20 = *(void *)(a2 + 16);
  int64_t v21 = v19 - __src;
  if (v19 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v19 - __src);
    __int128 v7 = *(void **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v20 + v21;
  int64_t v22 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v22;
  __int128 v23 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v23;
  __int128 v24 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v24;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_100306F68(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v3 = (void *)a2[156];
    if (v3)
    {
      a2[157] = v3;
      operator delete(v3);
    }

    sub_10000AE14((uint64_t)(a2 + 154));
    sub_10028EB1C(a2 + 148);
    sub_10000AE14((uint64_t)(a2 + 143));
    unint64_t v4 = (void *)a2[133];
    if (v4)
    {
      a2[134] = v4;
      operator delete(v4);
    }

    __int128 v5 = (void *)a2[130];
    if (v5)
    {
      a2[131] = v5;
      operator delete(v5);
    }

    sub_101024EBC(a2 + 17);
    sub_1000EAA04(a2 + 9);
    operator delete(a2);
  }

void sub_100306FF0(void ***a1)
{
  float v2 = *a1;
  if (*v2)
  {
    sub_100307030((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100307030(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 192LL)
  {
  }

  a1[1] = v2;
}

uint64_t sub_10030707C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019941E8, (void *)&_mh_execute_header);
}

uint64_t sub_1003070C0(uint64_t a1, int a2)
{
  *(void *)a1 = off_101831C38;
  *(_BYTE *)(a1 + 8) = 0;
  unint64_t v3 = (BOOL *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_1012E61F0;
  unint64_t v4 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = xmmword_1012E61F0;
  __int128 v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(void *)(a1 + 96) = 0xBFF0000000000000LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  sub_100833700((float32x4_t *)(a1 + 104), (float32x4_t)0);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 156) = xmmword_1012E2F40;
  *(void *)(a1 + 172) = 0x1FF00000000LL;
  *(_DWORD *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0LL;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101831CB0);
  }
  __int128 v6 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)__int128 buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Starting device motion service %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101831CB0);
    }
    int v51 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)__int128 v63 = 67240192;
    *(_DWORD *)&void v63[4] = v51;
    __int128 v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Starting device motion service %{public}d",  v63,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLSensorFusionService::CLSensorFusionService(int)", "%s\n", v52);
    if (v52 != buf) {
      free(v52);
    }
  }

  uint64_t v8 = sub_1006E27E8();
  sub_100413284(v8, buf);
  char v9 = sub_1002A6F64(*(uint64_t *)buf, "LogDeviceMotion", v3);
  char v10 = v9;
  __int128 v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int128 v12 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v10 & 1) != 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }

  if ((v9 & 1) == 0) {
LABEL_11:
  }
    BOOL *v3 = 0;
LABEL_12:
  sub_1006E27E8();
  BOOL v58 = sub_1006E2AC4();
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  sub_1002A6F64(*(uint64_t *)buf, "DeviceMotionUseThrottledInterval", &v58);
  __int128 v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int128 v16 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  uint64_t v18 = sub_1006E27E8();
  sub_100413284(v18, buf);
  char v19 = sub_1002A82BC(*(uint64_t *)buf, "DeviceMotionAccelerometerUpdateInterval", v4);
  char v20 = v19;
  int64_t v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int64_t v22 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if ((v20 & 1) != 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }

  if ((v19 & 1) == 0) {
LABEL_22:
  }
    uint64_t *v4 = qword_1012E6200[!v58];
LABEL_23:
  uint64_t v24 = sub_1006E27E8();
  sub_100413284(v24, buf);
  char v25 = sub_1002A82BC(*(uint64_t *)buf, "DeviceMotionGyroUpdateInterval", (void *)(a1 + 24));
  char v26 = v25;
  __int128 v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int128 v28 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((v26 & 1) != 0) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }

  if ((v25 & 1) == 0) {
LABEL_28:
  }
    *(void *)(a1 + 24) = qword_1012E6210[!v58];
LABEL_29:
  uint64_t v30 = sub_1006E27E8();
  sub_100413284(v30, buf);
  char v31 = sub_1002A82BC(*(uint64_t *)buf, "DeviceMotionCompassUpdateInterval", v5);
  char v32 = v31;
  __int128 v33 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_33;
  }
  __int128 v34 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unint64_t v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_33:
    if ((v31 & 1) != 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if ((v32 & 1) == 0) {
LABEL_34:
  }
    *__int128 v5 = 0x3F847AE147AE147BLL;
LABEL_35:
  uint64_t v36 = sub_1006FE6A0();
  double v37 = sub_1006FE6E4(v36, a1 + 24);
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101831CB0);
  }
  __int128 v38 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v39 = *v4;
    *(_DWORD *)__int128 buf = 134349312;
    *(double *)&uint8_t buf[4] = v37;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&_BYTE buf[14] = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "GyroUpdateInterval,%{public}.4f,AccelerometerUpdateInterval,%{public}.4f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101831CB0);
    }
    uint64_t v53 = *v4;
    *(_DWORD *)__int128 v63 = 134349312;
    *(double *)&void v63[4] = v37;
    *(_WORD *)&v63[12] = 2050;
    *(void *)&v63[14] = v53;
    LODWORD(v55) = 22;
    __int128 v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "GyroUpdateInterval,%{public}.4f,AccelerometerUpdateInterval,%{public}.4f",  v63,  v55);
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLSensorFusionService::CLSensorFusionService(int)", "%s\n", v54);
    if (v54 != buf) {
      free(v54);
    }
  }

  if (*v3)
  {
    *(void *)__int128 v63 = &off_1018579B0;
    *(void *)&v63[8] = CFAbsoluteTimeGetCurrent();
    float v40 = v37;
    *(float *)&v63[20] = v40;
    uint64_t v41 = sub_100E00E14();
    sub_100E022E0(v41, (uint64_t)v63);
    sub_101125260(buf);
    sub_10113A734(buf);
    v62 |= 1u;
    uint64_t v60 = *(void *)&v63[8];
    uint64_t v42 = v61;
    *(_BYTE *)(v61 + 12) |= 1u;
    *(float *)(v42 + 8) = v40;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_101831CD0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

  sub_1006E27E8();
  if (sub_1006E2AC4())
  {
    uint64_t v43 = sub_1006E27E8();
    sub_100413284(v43, buf);
    int v44 = sub_1002A6F64(*(uint64_t *)buf, "DumpGyroCalibrationDatabaseOnDeviceMotionStart", v63);
    if (v63[0]) {
      int v45 = v44;
    }
    else {
      int v45 = 0;
    }
    __int128 v46 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int128 v47 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        if (!v45) {
          return a1;
        }
        goto LABEL_55;
      }
    }

    if (v45)
    {
LABEL_55:
      -[NSDate timeIntervalSinceReferenceDate]( +[NSDate date](&OBJC_CLASS___NSDate, "date"),  "timeIntervalSinceReferenceDate");
      v56[0] = _NSConcreteStackBlock;
      v56[1] = 3221225472LL;
      v56[2] = sub_1003078EC;
      v56[3] = &unk_101831C80;
      __int128 v57 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%.0f", v49);
      objc_msgSend( objc_msgSend( objc_msgSend((id)sub_1006E2838(), "vendor"),  "proxyForService:",  @"CLGyroCalibrationDatabase"),  "dumpDatabase:onCompletion:",  v57,  v56);
    }
  }

  return a1;
}

void sub_1003078A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003078EC(uint64_t a1)
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101831CB0);
  }
  uint64_t v2 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Dumped gyro cal database with id %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101831CB0);
    }
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    __int128 v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Dumped gyro cal database with id %@",  &v6,  12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLSensorFusionService::CLSensorFusionService(int)_block_invoke", "%s\n", v5);
  }

uint64_t sub_100307A9C(uint64_t a1)
{
  *(void *)a1 = off_101831C38;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101831CB0);
  }
  uint64_t v2 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)__int128 buf = 67240192;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Stopping device motion service %{public}#x",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101831CB0);
    }
    int v5 = *(_DWORD *)(a1 + 12);
    v7[0] = 67240192;
    v7[1] = v5;
    int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Stopping device motion service %{public}#x",  v7,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual CLSensorFusionService::~CLSensorFusionService()", "%s\n", v6);
  }

  return a1;
}

void sub_100307C5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

double sub_100307C70(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

void sub_100307C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 88);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(void *)a2 = *(void *)(a1 + 96);
  if (a1 + 96 != a2) {
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 104);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 152);
  *(void *)(a2 + 60) = *(void *)(a1 + 156);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 176);
  __int128 v5 = *(_OWORD *)(a1 + 180);
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 196);
  *(_OWORD *)(a2 + 84) = v5;
  os_unfair_lock_unlock(v4);
}

void sub_100307D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t, void, void))(a1 + 56);
  if (v4) {
    v4(a2, *(unsigned int *)(a1 + 12), *(void *)(a1 + 64));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(void *)(a1 + 96) = *(void *)a2;
  if (a1 + 96 != a2) {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 8);
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 156) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 80);
  __int128 v5 = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 180) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
}

void sub_100307E40(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 96) <= 0.0)
  {
    uint64_t v4 = 0LL;
  }

  else if ((((*(unsigned __int16 *)(a1 + 178) ^ *(unsigned __int16 *)(a2 + 82)) >> 8) & 1) != 0)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 2LL;
  }

  double v5 = sub_101171D38();
  double v6 = *(double *)a2;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101831CB0);
  }
  double v7 = v5 - v6;
  uint64_t v8 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, (os_log_type_t)v4))
  {
    double v9 = *(float *)(a2 + 8);
    double v10 = *(float *)(a2 + 12);
    double v11 = *(float *)(a2 + 16);
    double v12 = *(float *)(a2 + 20);
    double v13 = *(float *)(a2 + 24);
    double v14 = *(float *)(a2 + 28);
    double v15 = *(float *)(a2 + 32);
    double v16 = (float)(*(float *)(a2 + 36) * 57.296);
    double v17 = (float)(*(float *)(a2 + 40) * 57.296);
    double v18 = (float)(*(float *)(a2 + 44) * 57.296);
    double v19 = *(float *)(a2 + 48);
    double v20 = *(float *)(a2 + 52);
    double v21 = *(float *)(a2 + 56);
    double v22 = *(float *)(a2 + 68);
    double v23 = *(float *)(a2 + 72);
    double v24 = *(float *)(a2 + 76);
    double v25 = *(float *)(a2 + 60);
    double v26 = *(float *)(a2 + 64);
    int v27 = *(char *)(a2 + 80);
    int v28 = *(_DWORD *)(a2 + 84);
    int v29 = *(unsigned __int8 *)(a2 + 81);
    int v30 = *(unsigned __int16 *)(a2 + 82);
    uint64_t v31 = *(void *)(a2 + 96);
    double v32 = *(double *)a2;
    *(_DWORD *)__int128 buf = 134224384;
    double v92 = v9;
    __int16 v93 = 2048;
    double v94 = v10;
    __int16 v95 = 2048;
    double v96 = v11;
    __int16 v97 = 2048;
    double v98 = v12;
    __int16 v99 = 2048;
    double v100 = v13;
    __int16 v101 = 2048;
    double v102 = v14;
    __int16 v103 = 2048;
    double v104 = v15;
    __int16 v105 = 2048;
    double v106 = v16;
    __int16 v107 = 2048;
    double v108 = v17;
    __int16 v109 = 2048;
    double v110 = v18;
    __int16 v111 = 2048;
    double v112 = v19;
    __int16 v113 = 2048;
    double v114 = v20;
    __int16 v115 = 2048;
    double v116 = v21;
    __int16 v117 = 2048;
    double v118 = v22;
    __int16 v119 = 2048;
    double v120 = v23;
    __int16 v121 = 2048;
    double v122 = v24;
    __int16 v123 = 2048;
    double v124 = v25;
    __int16 v125 = 2048;
    double v126 = v26;
    __int16 v127 = 1026;
    int v128 = v27;
    __int16 v129 = 1026;
    int v130 = v28;
    __int16 v131 = 1026;
    int v132 = v29;
    __int16 v133 = 1026;
    int v134 = v30;
    __int16 v135 = 2050;
    uint64_t v136 = v31;
    __int16 v137 = 2050;
    double v138 = v32;
    __int16 v139 = 2050;
    double v140 = v5;
    __int16 v141 = 2050;
    double v142 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  (os_log_type_t)v4,  "[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,us erAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,mag neticField.y,%10.10f,magneticField.z,%10.10f,magBiasEstVar.x,%10.10f,magBiasEstVar.y,%10.10f,magBiasEstVar.z,%10.1 0f,heading,%.3f,accuracy,%.3f,level,%{public}d,variant,%{public}d,mode,%{public}d,status,%{public}#02x,clientID,%{ public}llu,timestamp,%{public}lf,now,%{public}lf,latency,%{public}lf",  buf,  0xF6u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101831CB0);
    }
    double v66 = *(float *)(a2 + 8);
    double v67 = *(float *)(a2 + 12);
    double v68 = *(float *)(a2 + 16);
    double v69 = *(float *)(a2 + 20);
    double v70 = *(float *)(a2 + 24);
    double v71 = *(float *)(a2 + 28);
    double v72 = *(float *)(a2 + 32);
    double v73 = (float)(*(float *)(a2 + 36) * 57.296);
    double v74 = (float)(*(float *)(a2 + 40) * 57.296);
    double v75 = (float)(*(float *)(a2 + 44) * 57.296);
    double v76 = *(float *)(a2 + 48);
    double v77 = *(float *)(a2 + 52);
    double v78 = *(float *)(a2 + 56);
    double v79 = *(float *)(a2 + 68);
    double v80 = *(float *)(a2 + 72);
    double v81 = *(float *)(a2 + 76);
    double v82 = *(float *)(a2 + 60);
    double v83 = *(float *)(a2 + 64);
    int v84 = *(char *)(a2 + 80);
    int v85 = *(_DWORD *)(a2 + 84);
    int v86 = *(unsigned __int8 *)(a2 + 81);
    int v87 = *(unsigned __int16 *)(a2 + 82);
    uint64_t v88 = *(void *)(a2 + 96);
    double v89 = *(double *)a2;
    *(_DWORD *)__int128 v146 = 134224384;
    *(double *)&v146[4] = v66;
    *(_WORD *)&v146[12] = 2048;
    *(double *)&v146[14] = v67;
    __int16 v147 = 2048;
    double v148 = v68;
    *(_WORD *)__int128 v149 = 2048;
    *(double *)&v149[2] = v69;
    *(_WORD *)&v149[10] = 2048;
    *(double *)&v149[12] = v70;
    *(_WORD *)&v149[20] = 2048;
    *(double *)&v149[22] = v71;
    *(_WORD *)&v149[30] = 2048;
    *(double *)&v149[32] = v72;
    *(_WORD *)__int128 v150 = 2048;
    *(double *)&v150[2] = v73;
    *(_WORD *)&v150[10] = 2048;
    double v151 = v74;
    __int16 v152 = 2048;
    *(double *)__int128 v153 = v75;
    *(_WORD *)&v153[8] = 2048;
    double v154 = v76;
    __int16 v155 = 2048;
    double v156 = v77;
    __int16 v157 = 2048;
    double v158 = v78;
    __int16 v159 = 2048;
    double v160 = v79;
    __int16 v161 = 2048;
    double v162 = v80;
    __int16 v163 = 2048;
    double v164 = v81;
    __int16 v165 = 2048;
    double v166 = v82;
    __int16 v167 = 2048;
    double v168 = v83;
    __int16 v169 = 1026;
    int v170 = v84;
    __int16 v171 = 1026;
    int v172 = v85;
    __int16 v173 = 1026;
    int v174 = v86;
    __int16 v175 = 1026;
    int v176 = v87;
    __int16 v177 = 2050;
    uint64_t v178 = v88;
    __int16 v179 = 2050;
    double v180 = v89;
    __int16 v181 = 2050;
    double v182 = v5;
    __int16 v183 = 2050;
    double v184 = v7;
    int64_t v90 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  v4,  "[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAcce l.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f ,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magBiasEstVar.x,%10.10f,mag BiasEstVar.y,%10.10f,magBiasEstVar.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%{public}d,variant,%{p ublic}d,mode,%{public}d,status,%{public}#02x,clientID,%{public}llu,timestamp,%{public}lf,now,%{publi c}lf,latency,%{public}lf",  v146,  246);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorFusionService::logSample(const CLSensorFusionService::Sample *)",  "%s\n",  v90);
  }

  if (*(_BYTE *)(a1 + 8))
  {
    *(void *)__int128 v146 = &off_101857C70;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v34 = *(double *)a2;
    *(CFAbsoluteTime *)&v146[8] = Current;
    double v148 = v34;
    *(_OWORD *)__int128 v149 = *(_OWORD *)(a2 + 8);
    *(void *)&v149[16] = *(void *)(a2 + 24);
    LODWORD(Current) = *(_DWORD *)(a2 + 32);
    *(float32x2_t *)&v149[28] = vmul_f32(*(float32x2_t *)(a2 + 36), (float32x2_t)vdup_n_s32(0x42652EE1u));
    *(float *)&double v34 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)&v149[24] = LODWORD(Current);
    *(_DWORD *)&v149[36] = LODWORD(v34);
    *(void *)__int128 v150 = *(void *)(a2 + 48);
    LODWORD(v34) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)&v150[8] = *(_DWORD *)(a2 + 56);
    LOBYTE(v151) = *(_BYTE *)(a2 + 80);
    LODWORD(Current) = *(_DWORD *)(a2 + 64);
    HIDWORD(v151) = LODWORD(v34);
    *(_DWORD *)&v153[2] = LODWORD(Current);
    int v35 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)&v153[6] = *(_DWORD *)(a2 + 84);
    LODWORD(v154) = v35;
    HIDWORD(v154) = *(void *)(a2 + 96);
    __int16 v155 = *(_WORD *)(a2 + 82);
    uint64_t v36 = sub_100E00E14();
    sub_100E022E0(v36, (uint64_t)v146);
    sub_101125260(buf);
    sub_10113A980(buf);
    v145 |= 1u;
    uint64_t v143 = *(void *)&v146[8];
    uint64_t v37 = v144;
    double v38 = *(double *)a2;
    *(_DWORD *)(v144 + 124) |= 0x10u;
    *(double *)(v37 + 40) = v38;
    uint64_t v39 = v144;
    double v40 = *(float *)(a2 + 8);
    *(_DWORD *)(v144 + 124) |= 2u;
    *(double *)(v39 + 16) = v40;
    uint64_t v41 = v144;
    double v42 = *(float *)(a2 + 12);
    *(_DWORD *)(v144 + 124) |= 4u;
    *(double *)(v41 + 24) = v42;
    uint64_t v43 = v144;
    double v44 = *(float *)(a2 + 16);
    *(_DWORD *)(v144 + 124) |= 8u;
    *(double *)(v43 + 32) = v44;
    uint64_t v45 = v144;
    double v46 = *(float *)(a2 + 20);
    *(_DWORD *)(v144 + 124) |= 1u;
    *(double *)(v45 + 8) = v46;
    uint64_t v47 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v144 + 124) |= 0x40000u;
    *(_DWORD *)(v47 + 100) = LODWORD(v46);
    uint64_t v48 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(v144 + 124) |= 0x80000u;
    *(_DWORD *)(v48 + 104) = LODWORD(v46);
    uint64_t v49 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v144 + 124) |= 0x100000u;
    *(_DWORD *)(v49 + 108) = LODWORD(v46);
    uint64_t v50 = v144;
    *(float *)&double v46 = *(float *)(a2 + 36) * 57.296;
    *(_DWORD *)(v144 + 124) |= 0x2000u;
    *(_DWORD *)(v50 + 80) = LODWORD(v46);
    uint64_t v51 = v144;
    *(float *)&double v46 = *(float *)(a2 + 40) * 57.296;
    *(_DWORD *)(v144 + 124) |= 0x4000u;
    *(_DWORD *)(v51 + 84) = LODWORD(v46);
    uint64_t v52 = v144;
    *(float *)&double v46 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)(v144 + 124) |= 0x8000u;
    *(_DWORD *)(v52 + 88) = LODWORD(v46);
    uint64_t v53 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v144 + 124) |= 0x100u;
    *(_DWORD *)(v53 + 60) = LODWORD(v46);
    uint64_t v54 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(v144 + 124) |= 0x200u;
    *(_DWORD *)(v54 + 64) = LODWORD(v46);
    uint64_t v55 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v144 + 124) |= 0x400u;
    *(_DWORD *)(v55 + 68) = LODWORD(v46);
    uint64_t v56 = v144;
    int v57 = *(char *)(a2 + 80);
    *(_DWORD *)(v144 + 124) |= 0x80u;
    *(_DWORD *)(v56 + 56) = v57;
    uint64_t v58 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v144 + 124) |= 0x800u;
    *(_DWORD *)(v58 + 72) = LODWORD(v46);
    uint64_t v59 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v144 + 124) |= 0x20u;
    *(_DWORD *)(v59 + 48) = LODWORD(v46);
    uint64_t v60 = v144;
    int v61 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)(v144 + 124) |= 0x1000u;
    *(_DWORD *)(v60 + 76) = v61;
    uint64_t v62 = v144;
    uint64_t v63 = *(void *)(a2 + 96);
    *(_DWORD *)(v144 + 124) |= 0x40u;
    *(_DWORD *)(v62 + 52) = v63;
    uint64_t v64 = v144;
    LODWORD(v63) = *(unsigned __int16 *)(a2 + 82);
    *(_DWORD *)(v144 + 124) |= 0x10000u;
    *(_DWORD *)(v64 + 92) = v63;
    uint64_t v65 = v144;
    LODWORD(v63) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v144 + 124) |= 0x200000u;
    *(_DWORD *)(v65 + 112) = v63;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_101831CD0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

void sub_10030865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10030867C(uint64_t result, void *a2)
{
  *(void *)(result + 48) = *a2;
  uint64_t v2 = (uint64_t *)(result + 48);
  if (*(void *)(result + 72))
  {
    uint64_t v3 = result;
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101831CB0);
    }
    uint64_t v4 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *v2;
      *(_DWORD *)__int128 buf = 134349056;
      uint64_t v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Set device motion sensor status %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101831CB0);
      }
      uint64_t v6 = *v2;
      int v8 = 134349056;
      uint64_t v9 = v6;
      double v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "Set device motion sensor status %{public}ld",  &v8,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorFusionService::updateSensorStatus(const SensorStatus &)",  "%s\n",  v7);
    }

    return (*(uint64_t (**)(uint64_t *, void))(v3 + 72))(v2, *(void *)(v3 + 80));
  }

  return result;
}

void sub_10030884C(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_10030887C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a2;
  if (!*(_BYTE *)(a3 + 352)) {
    return a2;
  }
  uint64_t v5 = sub_1005186D4(a2, 2u);
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101831D48);
  }
  uint64_t v6 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a3 + 120);
    *(_DWORD *)__int128 buf = 134218496;
    uint64_t v18 = v7;
    __int16 v19 = 1026;
    int v20 = v3;
    __int16 v21 = 1026;
    int v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Overriding youth type for generic workout, beginTime, %f, before, %{public}d, after, %{public}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101831D48);
    }
    uint64_t v8 = *(void *)(a3 + 120);
    int v11 = 134218496;
    uint64_t v12 = v8;
    __int16 v13 = 1026;
    int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v5;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "Overriding youth type for generic workout, beginTime, %f, before, %{public}d, after, %{public}d",  &v11,  24);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMotionActivity::TypeYouth CLFitnessYouthGenericWorkoutOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)",  "%s\n",  v9);
  }

  return v5;
}

void sub_100308A80(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100308AAC(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v29 = 0;
  sub_100F1F5D0(a2, (BOOL *)&v29 + 1, &v29);
  double v28 = -1.0;
  double v6 = -1.0;
  if (HIBYTE(v29)) {
    _ZF = v29 == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF)
  {
    double v6 = *(double *)(a2 + 192) + 1.414;
    double v28 = v6;
  }

  if (*(double *)(a2 + 200) > 0.0 && (v8 = *(double *)(a2 + 208), v8 > 0.0) && (double v9 = *(double *)(a2 + 216), v9 >= 0.0))
  {
    *(void *)int v30 = *(void *)(a2 + 200);
    double v26 = v9;
    double v27 = v8;
    sub_100308CC0(a1, (double *)v30, &v27, &v26, &v28);
    double v16 = *(double *)a1;
    double v12 = *(double *)(a1 + 8);
  }

  else
  {
    double v10 = *(double *)(a2 + 80);
    memset(&v30[7], 0, 32);
    __int128 v11 = *(_OWORD *)&v30[16];
    *(_OWORD *)(a1 + 41) = *(_OWORD *)v30;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 32) = 0LL;
    *(_BYTE *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 57) = v11;
    *(void *)(a1 + 72) = *(void *)&v30[31];
    double v12 = v10 * v10 * 0.5;
    *(double *)a1 = v12;
    *(double *)(a1 + 8) = v12;
    double v13 = v6 * v6;
    BOOL v14 = v6 <= 0.0;
    double v15 = -1.0;
    if (!v14) {
      double v15 = v13;
    }
    *(double *)(a1 + 24) = v15;
    double v16 = v12;
  }

  double v17 = *(double *)(a2 + 96);
  if (v17 > 19.4444444 && v16 + v12 < 25.0)
  {
    __asm { FMOV            V1.2D, #25.0 }

    *(_OWORD *)a1 = _Q1;
    *(void *)(a1 + 16) = 0LL;
    double v12 = 25.0;
    double v16 = 25.0;
  }

  if (v16 + v12 < 156.25)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0x4063880000000000uLL);
    *(void *)(a1 + 16) = 0LL;
  }

  double v22 = *(double *)(a1 + 24);
  if (a3 && v22 > 0.0)
  {
    double v23 = 3.0;
    if (*(_BYTE *)(a2 + 228)) {
      double v23 = 15.0;
    }
    if (v17 == 0.0) {
      double v24 = 15.0;
    }
    else {
      double v24 = v23;
    }
    double v25 = sqrt(v22) + v24;
    double v22 = v25 * v25;
    *(double *)(a1 + 24) = v25 * v25;
  }

  if (v22 > 0.0 && v22 < 42.25) {
    *(void *)(a1 + 24) = 0x4045200000000000LL;
  }
  sub_100308F54(a1);
}

void sub_100308CC0(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  *(_OWORD *)(a1 + 24) = xmmword_1012E0070;
  __int128 v5 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 41) = *(_OWORD *)buf;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 57) = v5;
  *(void *)(a1 + 72) = *(void *)&buf[31];
  if (*a2 > 0.0 && *a3 > 0.0 && (double v6 = *a4, *a4 >= 0.0))
  {
    double v10 = *a2 / 2.45;
    double v11 = *a3 / 2.45;
    if (v6 > 0.0)
    {
      double v12 = tan(v6 * -2.0 * 0.0174532925);
      double v13 = sqrt((v10 * v10 - v11 * v11) * (v10 * v10 - v11 * v11) * 0.25 * (v12 * v12) / (v12 * v12 + 1.0));
      *(double *)(a1 + 16) = v13;
      double v14 = v10 * v10 + v11 * v11;
      double v15 = (v13 + v13) / v12;
      double v11 = (v14 + v15) * 0.5;
      double v10 = (v14 - v15) * 0.5;
    }

    *(double *)a1 = v11;
    *(double *)(a1 + 8) = v10;
    double v16 = -1.0;
    if (*a5 > 0.0) {
      double v16 = *a5 * *a5;
    }
    *(double *)(a1 + 24) = v16;
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101831D88);
    }
    uint64_t v7 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "invalid inputs", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101831D88);
      }
      v19[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "invalid inputs",  v19,  2);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMapDataUtil::CovarInvDet::init(const double &, const double &, const double &, const double &)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

void sub_100308F54(uint64_t a1)
{
  double v1 = *(double *)a1;
  if (*(double *)a1 <= 0.0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101831D88);
    }
    double v6 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "fVarEast <= 0.0", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101831D88);
      }
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  17LL,  "fVarEast <= 0.0",  v19,  2,  v19[0]);
      goto LABEL_49;
    }

    return;
  }

  double v2 = *(double *)(a1 + 8);
  if (v2 <= 0.0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101831D88);
    }
    uint64_t v7 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "fVarNorth <= 0.0", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101831D88);
      }
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  17LL,  "fVarNorth <= 0.0",  v19,  2,  v19[0]);
      goto LABEL_49;
    }

    return;
  }

  double v3 = *(double *)(a1 + 16);
  if (v3 >= 0.0)
  {
    double v8 = *(double *)(a1 + 24);
    if (v8 <= 0.0 || v8 >= 32400.0)
    {
      *(void *)(a1 + 24) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + 40) = 0;
      double v15 = -v3;
      double v16 = v1 * v2 - v3 * v3;
      *(double *)(a1 + memset(&buf[7], 0, 32) = v16;
      *(double *)(a1 + 48) = v2;
      *(double *)(a1 + 56) = v15;
      *(double *)(a1 + 64) = v1;
      if (v16 != 0.0)
      {
        *(double *)(a1 + 48) = v2 / v16;
        *(double *)(a1 + 56) = v15 / v16;
        *(double *)(a1 + 64) = v1 / v16;
        return;
      }

      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101831D88);
      }
      double v17 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }

      if (!sub_1002921D0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 == -1)
      {
LABEL_35:
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  17LL,  "CLMM, Unexpected determinant of 0",  v19,  2,  v19[0]);
LABEL_49:
        uint64_t v18 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMapDataUtil::CovarInvDet::calcInvAndDet()", "%s\n", v5);
        if (v18 != buf) {
          free(v18);
        }
        return;
      }
    }

    else
    {
      *(_BYTE *)(a1 + 40) = 1;
      double v9 = v2 * v8;
      double v10 = -(v8 * v3);
      *(double *)(a1 + 48) = v2 * v8;
      *(double *)(a1 + 56) = v10;
      double v11 = v1 * v8;
      double v12 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 64) = v11;
      *(double *)(a1 + 72) = v12;
      double v13 = v12 * v8;
      *(double *)(a1 + memset(&buf[7], 0, 32) = v12 * v8;
      if (v12 * v8 != 0.0)
      {
        *(double *)(a1 + 48) = v9 / v13;
        *(double *)(a1 + 56) = v10 / v13;
        *(double *)(a1 + 64) = v11 / v13;
        *(double *)(a1 + 72) = v12 / v13;
        return;
      }

      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101831D88);
      }
      double v14 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }

      if (!sub_1002921D0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 == -1) {
        goto LABEL_35;
      }
    }

    dispatch_once(&qword_1019348B0, &stru_101831D88);
    goto LABEL_35;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101831D88);
  }
  uint64_t v4 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "fVarEastNorth < 0.0", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101831D88);
    }
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  17LL,  "fVarEastNorth < 0.0",  v19,  2,  v19[0]);
    goto LABEL_49;
  }

void sub_1003094FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 16) = 0LL;
  double v2 = *(double *)(a1 + 32);
  if (v2 <= 0.0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101831D88);
    }
    double v10 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "determinant <= 0.0", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101831D88);
      }
      v14[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  17LL,  "determinant <= 0.0",  v14,  2);
      double v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMapDataUtil::CovarInvDet::calculateScoreAndVarFactor(MapMatcherScore &) const",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  else
  {
    double v4 = *(double *)(a1 + 48);
    double v5 = *(double *)(a1 + 56);
    double v6 = *(double *)(a1 + 64);
    if (*(_BYTE *)(a1 + 40))
    {
      double v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6
         + *(double *)(a2 + 56) * *(double *)(a2 + 56) * *(double *)(a1 + 72);
      double v8 = v7 / 3.0;
      double v9 = 248.050213;
    }

    else
    {
      double v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6;
      double v8 = v7 * 0.5;
      double v9 = 39.4784176;
    }

    double v13 = exp(v7 * -0.5);
    *(double *)(a2 + 16) = v8;
    *(double *)a2 = v13 / sqrt(v2 * v9);
  }

void sub_10030974C(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100309778(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_7:
      CFStringRef v3 = (CFStringRef)CFCopyUserName();
      goto LABEL_8;
    }

    a1 = (uint64_t *)*a1;
  }

  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_7;
  }

  CFStringRef v3 = sub_1002A6F04((char *)a1);
LABEL_8:
  CFStringRef v4 = v3;
  sub_1004F2598();
  if (sub_1004F8A40() && (double v5 = getenv("_SET_CLPERSISTENTSTORE_TEST_PATH")) != 0LL)
  {
    v11[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5);
    v11[1] = v4;
    sub_1010DDBC0( &v10,  (char *)-[NSString UTF8String]( +[NSString pathWithComponents:]( &OBJC_CLASS___NSString,  "pathWithComponents:",  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL)),  "UTF8String"));
    *a2 = v10;
  }

  else if (v4)
  {
    double v6 = (const __CFURL *)CFCopyHomeDirectoryURLForUser(v4);
    double v7 = v6;
    if (v6)
    {
      double v8 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
      double v9 = v8;
      if (v8)
      {
        sub_1002A6C50(v8, &v10);
        *a2 = v10;
        CFRelease(v9);
      }

      CFRelease(v7);
    }

    CFRelease(v4);
  }

void sub_1003098D8(_Unwind_Exception *exception_object)
{
}

void sub_100309908(uint64_t a1@<X0>, void *a2@<X8>)
{
  CFStringRef v3 = a2;
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) != 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_3:
      goto LABEL_10;
    }
  }

  else if ((_BYTE)a2)
  {
    goto LABEL_3;
  }

  CFStringRef v4 = (const __CFString *)CFGetUserName();
  sub_1002A6C50(v4, &v15);
  *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  std::string::size_type cap = v15.__r_.__value_.__l.__cap_;
  *(void *)(a1 + 16) = v15.__r_.__value_.__l.__cap_;
  a2 = (void *)HIBYTE(cap);
  if ((a2 & 0x80) == 0)
  {
LABEL_4:
    if (!(_BYTE)a2) {
      return;
    }
    goto LABEL_11;
  }

void sub_100309A2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_100309A60@<D0>(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  if (qword_101994248 != -1) {
    dispatch_once(&qword_101994248, &stru_101831DA8);
  }
  if (qword_101994240)
  {
    sub_1002A6C50((const __CFString *)qword_101994240, &v3);
    double result = *(double *)&v3.__r_.__value_.__l.__data_;
    *a1 = v3;
  }

  return result;
}

void sub_100309AD8(int a1@<W0>, std::string *a2@<X8>)
{
  if (a1 == 2)
  {
    sub_1010DDBC0(v11, "mobile");
    sub_100309778(v11, &v18);
    __int128 v7 = std::string::append(&v18, "/Library/locationd/ColdStorage/");
    *a2 = *v7;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    if (v12 < 0)
    {
      double v6 = (void *)v11[0];
      goto LABEL_19;
    }
  }

  else if (a1 == 1)
  {
    sub_1010DDBC0(v13, "mobile");
    sub_100309778(v13, &v17);
    std::string v3 = std::string::append(&v17, "/Library/locationd/ColdStorage/");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__l.__cap_ = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    double v5 = std::string::append(&v18, "cold_encryptedB.db");
    *a2 = *v5;
    v5->__r_.__value_.__l.__size_ = 0LL;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    v5->__r_.__value_.__r.__words[0] = 0LL;
    if (v14 < 0)
    {
      double v6 = (void *)v13[0];
LABEL_19:
      operator delete(v6);
    }
  }

  else
  {
    sub_1010DDBC0(__p, "root");
    sub_100309778((uint64_t *)__p, &v17);
    int v8 = std::string::append(&v17, "/Library/Caches/locationd/");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v10 = std::string::append(&v18, "cold_encryptedB.db");
    *a2 = *v10;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    if (v16 < 0)
    {
      double v6 = __p[0];
      goto LABEL_19;
    }
  }

void sub_100309CA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_100309D64(int a1@<W0>, std::string *a2@<X8>)
{
  if (a1 == 3)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    int v8 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      v18.__r_.__value_.__r.__words[0] = 0x304020100LL;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "no mutable store path for type, %{public}d",  (uint8_t *)&v18,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_29;
    }
    bzero(&v18, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    uint64_t v19 = 0x304020100LL;
    __int128 v9 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v18,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "no mutable store path for type, %{public}d",  &v19,  8);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)",  "%s\n",  (const char *)v9);
    goto LABEL_47;
  }

  if (a1)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    std::string::size_type v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v18.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v18.__r_.__value_.__r.__words[0]) = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "could not get mutable store path for type, %{public}d",  (uint8_t *)&v18,  8u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_29;
    }
    bzero(&v18, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    LODWORD(v19) = 67240192;
    HIDWORD(v19) = a1;
    __int128 v9 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v18,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not get mutable store path for type, %{public}d",  &v19,  8);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)",  "%s\n",  (const char *)v9);
LABEL_47:
    if (v9 != &v18) {
      free(v9);
    }
LABEL_29:
    a2->__r_.__value_.__r.__words[0] = 0LL;
    a2->__r_.__value_.__l.__size_ = 0LL;
    a2->__r_.__value_.__l.__cap_ = 0LL;
    return;
  }

  if (sub_1004F9FF4())
  {
    sub_1010DDBC0(v16, "mobile");
    sub_100309778(v16, &v18);
    sub_1010DDBC0(&v19, "/Library/Caches/locationd/");
    if ((v21 & 0x80u) == 0) {
      __int128 v4 = (const std::string::value_type *)&v19;
    }
    else {
      __int128 v4 = (const std::string::value_type *)v19;
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v5 = v21;
    }
    else {
      std::string::size_type v5 = v20;
    }
    double v6 = std::string::append(&v18, v4, v5);
    *a2 = *v6;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    if (v17 < 0)
    {
      __int128 v7 = (void *)v16[0];
LABEL_43:
      operator delete(v7);
    }
  }

  else
  {
    sub_1010DDBC0(__p, "root");
    sub_100309778((uint64_t *)__p, &v18);
    sub_1010DDBC0(&v19, "/Library/Caches/locationd/");
    if ((v21 & 0x80u) == 0) {
      double v11 = (const std::string::value_type *)&v19;
    }
    else {
      double v11 = (const std::string::value_type *)v19;
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v12 = v21;
    }
    else {
      std::string::size_type v12 = v20;
    }
    int v13 = std::string::append(&v18, v11, v12);
    *a2 = *v13;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    if (v15 < 0)
    {
      __int128 v7 = __p[0];
      goto LABEL_43;
    }
  }

void sub_10030A1A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030A238(std::string *a1@<X8>)
{
  double v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework/Support/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10030A29C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030A2B8(std::string *a1@<X8>)
{
  double v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10030A31C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030A338(id a1)
{
  qword_101994240 = (uint64_t)@"/";
}

void sub_10030A34C(std::string *a1@<X8>)
{
  double v2 = std::string::append(&v5, "/Library/locationd/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10030A3D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10030A408@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0( a1,  (char *)-[NSString UTF8String]( -[NSString stringByAppendingString:]( -[NSFileManager currentDirectoryPath]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "currentDirectoryPath"),  "stringByAppendingString:",  @"/"),  "UTF8String"));
}

uint64_t sub_10030A44C(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  std::string::size_type v12 = sub_1002A51A4((void *)a1);
  *std::string::size_type v12 = off_101831DD8;
  v12[2] = a2;
  *((_BYTE *)v12 + 24) = 0;
  *((_DWORD *)v12 + 7) = a4;
  v12[4] = 0xBFF0000000000000LL;
  v12[5] = 0LL;
  uint64_t v41 = (const void **)(v12 + 6);
  sub_1010DDBC0(v12 + 6, a3);
  *(_OWORD *)(a1 + 72) = 0u;
  int v13 = (void **)(a1 + 72);
  char v14 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  [*(id *)(a1 + 16) silo];
  switch(a4)
  {
    case 0:
      sub_10030A238((std::string *)buf);
      goto LABEL_14;
    case 1:
      sub_100309D64(a5, (std::string *)buf);
      goto LABEL_14;
    case 2:
      sub_10030A34C((std::string *)buf);
      goto LABEL_14;
    case 3:
      sub_10030A408(buf);
      goto LABEL_14;
    case 4:
      sub_100309AD8(2, (std::string *)buf);
LABEL_14:
      *(_OWORD *)int v13 = *(_OWORD *)buf;
      *(void *)(a1 + 88) = *(void *)&buf[16];
      break;
    default:
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018321F8);
      }
      char v15 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&_BYTE buf[20] = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unknown persistent domain, domain:%{public}d}",  buf,  0x18u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018321F8);
        }
      }

      char v16 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        *(_DWORD *)__int128 buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&_BYTE buf[20] = a4;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unknown persistent domain",  "{msg%{public}.0s:Unknown persistent domain, domain:%{public}d}",  buf,  0x18u);
      }

      break;
  }

  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80)) {
      goto LABEL_70;
    }
    char v17 = *v13;
  }

  else
  {
    char v17 = (_BYTE *)(a1 + 72);
    if (!*(_BYTE *)(a1 + 95)) {
      goto LABEL_70;
    }
  }

  uid_t v18 = getuid();
  gid_t v19 = getgid();
  if (!sub_100292C04(v17, v18, v19))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018321F8);
    }
    std::string::size_type v20 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v21 = (void *)(a1 + 72);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&_BYTE buf[20] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:could not create path, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018321F8);
      }
    }

    double v22 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      double v23 = (void *)(a1 + 72);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&_BYTE buf[20] = v23;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "could not create path",  "{msg%{public}.0s:could not create path, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }
  }

  sub_10010B8E0((const void **)(a1 + 72), v41, (uint64_t)buf);
  sub_1010DDBC0(__p, ".plist");
  if ((v43 & 0x80u) == 0) {
    double v24 = __p;
  }
  else {
    double v24 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v25 = v43;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)__p[1];
  }
  double v26 = std::string::append((std::string *)buf, (const std::string::value_type *)v24, v25);
  std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
  v44[0] = v26->__r_.__value_.__l.__size_;
  *(void *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v26->__r_.__value_.__s.__size_;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = v44[0];
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v29;
  *(void *)(a1 + 111) = *(void *)((char *)v44 + 7);
  *(_BYTE *)(a1 + 119) = size;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018321F8);
  }
  int v30 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
  {
    uint64_t v31 = (void *)(a1 + 96);
    *(_DWORD *)__int128 buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&_BYTE buf[20] = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:accessing data, file:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  uint64_t v32 = (void *)(a1 + 96);
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 816LL))(a1, v32) & 1) == 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018321F8);
    }
    __int128 v33 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      double v34 = (void *)(a1 + 96);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&_BYTE buf[20] = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:file does not exist (or cannot be accessed), starting fresh, file:%{public, locatio n:escape_only}s}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018321F8);
      }
    }

    int v35 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      uint64_t v36 = (void *)(a1 + 96);
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&_BYTE buf[20] = v36;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v35,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "file does not exist (or cannot be accessed), starting fresh",  "{msg%{public}.0s:file does not exist (or cannot be accessed), starting fresh, file:%{public, locatio n:escape_only}s}",  buf,  0x1Cu);
    }
  }

  if (a4 == 2)
  {
    uint64_t v37 = (const char *)(a1 + 72);
    uid_t v38 = getuid();
    gid_t v39 = getgid();
    sub_100292CFC(v37, v38, v39, 0x1EDu);
  }

void sub_10030AB3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

void *sub_10030ABEC(uint64_t a1)
{
  double v2 = off_101831DD8;
  *(void *)a1 = off_101831DD8;
  if ((*(_DWORD *)(a1 + 28) - 1) <= 3)
  {
    sub_10030B08C(a1);
    double v2 = *(uint64_t (***)())a1;
  }

  ((void (*)(uint64_t))v2[120])(a1);
  return sub_1002A5554((void *)a1);
}

void sub_10030AC78(uint64_t a1)
{
  uint64_t v1 = sub_10030ABEC(a1);
  operator delete(v1);
}

char *sub_10030AC8C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[95] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 9), *((void *)result + 10));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 72);
  *(void *)(a2 + 16) = *((void *)result + 11);
  return result;
}

NSString *sub_10030ACB8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 72);
  return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v1);
}

uint64_t sub_10030ACDC(uint64_t result)
{
  if (!*(_BYTE *)(result + 24)) {
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t sub_10030AD08(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(void *)(a1 + 80)) {
      goto LABEL_3;
    }
  }

  else if (*(_BYTE *)(a1 + 95))
  {
LABEL_3:
    double v2 = (_BYTE *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
      std::string v3 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        char v4 = (void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 136315138;
        char v16 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning persistent store %s has been modified - refreshing will lose changes",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018321D8);
        }
        __int128 v9 = (void *)(a1 + 48);
        int v13 = 136315138;
        char v14 = v9;
        std::string::size_type v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning persistent store %s has been modified - refreshing will lose changes",  (const char *)&v13);
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLPersistentStore::refresh()", "%s\n", v10);
      }
    }

    std::string v5 = (void *)(a1 + 96);
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 816LL))(a1, v5);
    goto LABEL_23;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018321D8);
  }
  __int128 v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = (void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315138;
    char v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Store %s is configured for in-memory mode - not refreshing and marking the store as unmodified",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    double v11 = (void *)(a1 + 48);
    int v13 = 136315138;
    char v14 = v11;
    std::string::size_type v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "Store %s is configured for in-memory mode - not refreshing and marking the store as unmodified",  (const char *)&v13);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLPersistentStore::refresh()", "%s\n", v12);
  }

  double v2 = (_BYTE *)(a1 + 24);
  uint64_t result = 1LL;
LABEL_23:
  _BYTE *v2 = 0;
  return result;
}

uint64_t sub_10030B08C(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 28) - 1) >= 4)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    std::string v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = (void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 136315138;
      unsigned __int8 v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning data set %s is not changeable - not storing",  buf,  0xCu);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
      __int128 v7 = (void *)(a1 + 48);
      int v18 = 136315138;
      gid_t v19 = v7;
      int v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning data set %s is not changeable - not storing",  (const char *)&v18);
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLPersistentStore::store()", "%s\n", v8);
      return 0LL;
    }

    return result;
  }

  if (!*(_BYTE *)(a1 + 24)) {
    return 1LL;
  }
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 95)) {
      goto LABEL_5;
    }
LABEL_25:
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    __int128 v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v10 = (void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 136315138;
      unsigned __int8 v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Store %s is configured for in-memory mode - not storing and marking the store as unmodified",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_51;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    double v11 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "Store %s is configured for in-memory mode - not storing and marking the store as unmodified",  &v18);
    goto LABEL_57;
  }

  if (!*(void *)(a1 + 80)) {
    goto LABEL_25;
  }
LABEL_5:
  int v2 = *(_DWORD *)(a1 + 120);
  if (v2)
  {
    std::string v3 = (void *)(a1 + 96);
    if (v2 == 1)
    {
      goto LABEL_42;
    }

    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 832LL))(a1, v3, 2LL);
    if ((_DWORD)result)
    {
LABEL_42:
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
      char v14 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        char v15 = (void *)(a1 + 48);
        char v16 = (void *)(a1 + 96);
        *(_DWORD *)__int128 buf = 136315394;
        unsigned __int8 v21 = v15;
        __int16 v22 = 2080;
        uint64_t v23 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s stored to disk %s", buf, 0x16u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
      double v11 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "%s stored to disk %s",  &v18,  22);
LABEL_57:
      char v17 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLPersistentStore::store()", "%s\n", v11);
      if (v17 != buf) {
        free(v17);
      }
LABEL_51:
      *(_BYTE *)(a1 + 24) = 0;
      return 1LL;
    }
  }

  else
  {
    std::string::size_type v12 = (void *)(a1 + 96);
    char v13 = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)a1 + 832LL))(a1, v12, 0LL);
    uint64_t result = 0LL;
    if ((v13 & 1) != 0) {
      goto LABEL_42;
    }
  }

  return result;
}

void sub_10030B5E8(uint64_t a1)
{
  uint64_t v1 = 0LL;
  sub_10030B614(a1, (double *)&v1, (uint64_t)&stru_1018321A0);
}

void sub_10030B614(uint64_t a1, double *a2, uint64_t a3)
{
  double v4 = *a2;
  *(double *)(a1 + memset(&buf[7], 0, 32) = *a2;
  if (v4 <= 0.0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    std::string::size_type v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      double v11 = (void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "disabling auto-store for %s", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
      std::string::size_type v12 = (void *)(a1 + 48);
      int v18 = 136315138;
      gid_t v19 = v12;
      char v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "disabling auto-store for %s",  (const char *)&v18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CLSiloBlock)",  "%s\n",  v13);
    }

    [*(id *)(a1 + 40) invalidate];

    *(void *)(a1 + 40) = 0LL;
  }

  else
  {
    if (!a3) {
      sub_101234AA0();
    }
    if (!*(void *)(a1 + 40))
    {
      id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "silo"), "newTimer");
      *(void *)(a1 + 40) = v6;
      [v6 setHandler:a3];
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018321D8);
    }
    __int128 v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v23 = v8;
      __int16 v24 = 2048;
      uint64_t v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "scheduling to auto-store %s every %.3fs",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
      char v14 = (void *)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 32);
      int v18 = 136315394;
      gid_t v19 = v14;
      __int16 v20 = 2048;
      uint64_t v21 = v15;
      LODWORD(v17) = 22;
      char v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "scheduling to auto-store %s every %.3fs",  (const char *)&v18,  v17);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CLSiloBlock)",  "%s\n",  v16);
    }

    [*(id *)(a1 + 40) setNextFireDelay:*(double *)(a1 + 32)];
  }

id sub_10030B9C8(uint64_t a1)
{
  return [*(id *)(a1 + 40) setNextFireDelay:*(double *)(a1 + 32)];
}

void sub_10030B9F8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10030BA24(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10030BAF4(id a1)
{
  qword_101994250 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLHomeKitProviderSilo");
}

uint64_t sub_10030BBA8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10030D254;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_101994268 != -1) {
    dispatch_once(&qword_101994268, block);
  }
  return qword_101994270;
}

void sub_10030BDB8(uint64_t a1, char a2)
{
  _WORD v3[8] = 0;
  v3[64] = 0;
  std::string v5 = 0LL;
  uint64_t v6 = 0LL;
  std::string __p = 0LL;
  v3[0] = a2;
  int v2 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v2,  v3,  1LL,  0xFFFFFFFFLL,  0LL);
  if (__p)
  {
    std::string v5 = __p;
    operator delete(__p);
  }

void sub_10030BE20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030BED0(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  if (a1 == 1) {
    return 2LL;
  }
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101832368);
  }
  std::string v3 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unknown WPHomeKitType %ld", buf, 0xCu);
  }

  BOOL v4 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101832368);
    }
    int v6 = 134217984;
    uint64_t v7 = a1;
    std::string v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "Unknown WPHomeKitType %ld",  &v6);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLHomeKitProvider_Type::HomeKitType (anonymous namespace)::getHomeKitType(WPHomeKitType)",  "%s\n",  v5);
    return 0LL;
  }

  return result;
}

void sub_10030C0A0(uint64_t a1, void *a2, int a3, void *a4, int a5, int a6, double a7)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101832368);
  }
  char v14 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)[a2 UUIDString];
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)[a4 description];
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
    LODWORD(v67) = a5;
    WORD2(v67) = 1025;
    *(_DWORD *)((char *)&v67 + 6) = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "found device %{private}@, data: %{private}@, rssi: %{private}d, type: %{private}d",  (uint8_t *)&buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101832368);
    }
    uint64_t v52 = qword_101934A48;
    LODWORD(v60.__r_.__value_.__l.__data_) = 138478595;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)[a2 UUIDString];
    WORD2(v60.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)[a4 description];
    HIWORD(v60.__r_.__value_.__r.__words[2]) = 1025;
    int v61 = a5;
    __int16 v62 = 1025;
    int v63 = a6;
    uint64_t v53 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v52,  2LL,  "found device %{private}@, data: %{private}@, rssi: %{private}d, type: %{private}d",  &v60,  34);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chro no::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType)",  "%s\n",  (const char *)v53);
    if (v53 != &buf) {
      free(v53);
    }
  }

  if (!a4)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101832368);
    }
    double v17 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#Warning Got a device notification but not device data",  (uint8_t *)&buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101832368);
    }
    LOWORD(v60.__r_.__value_.__l.__data_) = 0;
    LODWORD(v54) = 2;
    char v16 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#Warning Got a device notification but not device data",  &v60,  v54);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chro no::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType)",  "%s\n",  (const char *)v16);
    goto LABEL_35;
  }

  if (a3 == 2)
  {
    if ((unint64_t)[a4 length] <= 0x10)
    {
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101832368);
      }
      int v18 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning Found invalid HomeKit device. Data length was invalid",  (uint8_t *)&buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101832368);
      }
      LOWORD(v60.__r_.__value_.__l.__data_) = 0;
      LODWORD(v54) = 2;
      char v16 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#Warning Found invalid HomeKit device. Data length was invalid",  &v60,  v54);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSDat a *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anon ymous namespace)::HomeKitManufacturerData]",  "%s\n",  (const char *)v16);
      goto LABEL_35;
    }

    double v26 = (char *)[a4 bytes];
    int v27 = sub_10030D678((uint64_t)v26);
    if (v27 != 9)
    {
      int v42 = v27;
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101832368);
      }
      unsigned __int8 v43 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        sub_10030D738((unsigned __int16 *)v26, v42, 1, &buf);
        double v44 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v60.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "#Warning Found invalid HomeKit device: %{private}s",  (uint8_t *)&v60,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101832368);
      }
      uint64_t v45 = qword_101934A48;
      sub_10030D738((unsigned __int16 *)v26, v42, 1, &v60);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v46 = &v60;
      }
      else {
        double v46 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      int v64 = 136380675;
      uint64_t v65 = v46;
      LODWORD(v54) = 12;
      char v16 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v45,  0LL,  "#Warning Found invalid HomeKit device: %{private}s",  &v64,  v54);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSDat a *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anon ymous namespace)::HomeKitManufacturerData]",  "%s\n",  (const char *)v16);
      goto LABEL_81;
    }

    int v28 = 0;
    *(double *)&buf.__r_.__value_.__l.__data_ = a7;
    int v64 = a5;
    int v59 = a6;
    __int16 v58 = 0;
    uint64_t v29 = v26 + 2;
    int v57 = v28;
    char v30 = v26[4] & 1;
    char v56 = v30;
    uint64_t v31 = *(unsigned __int16 *)(v26 + 9);
    uint64_t v32 = *(unsigned int *)(v26 + 5);
    LODWORD(v60.__r_.__value_.__l.__data_) = *(_DWORD *)(v26 + 5);
    WORD2(v60.__r_.__value_.__r.__words[0]) = v31;
    else {
      __int16 v33 = *(_WORD *)(v26 + 11);
    }
    __int16 v55 = v33;
    double v34 = (__int16 *)(v26 + 13);
    unint64_t v35 = *(void *)(a1 + 136);
    if (v35 >= *(void *)(a1 + 144))
    {
      uint64_t v41 = sub_1003110AC( (void **)(a1 + 128),  &v58,  v29,  &v57,  &v56,  (int *)&v60,  &v55,  v34,  v26 + 15,  v26 + 16,  (uint64_t *)&buf,  &v64,  &v59);
    }

    else
    {
      char v36 = *v29;
      __int16 v37 = *v34;
      uint64_t v38 = v32 | (v31 << 32);
      char v39 = v26[15];
      char v40 = v26[16];
      *(_BYTE *)unint64_t v35 = 2;
      *(_DWORD *)(v35 + 1) = v38;
      *(_WORD *)(v35 + 5) = WORD2(v38);
      *(_WORD *)(v35 + 8) = v33;
      *(double *)(v35 + 16) = a7;
      *(_DWORD *)(v35 + 24) = a5;
      *(_WORD *)(v35 + 28) = 0;
      *(_BYTE *)(v35 + 30) = v36;
      *(_DWORD *)(v35 + memset(&buf[7], 0, 32) = v28;
      *(_BYTE *)(v35 + 36) = v30;
      *(_WORD *)(v35 + 38) = v37;
      *(_BYTE *)(v35 + 40) = v39;
      *(_BYTE *)(v35 + 41) = v40;
      *(_BYTE *)(v35 + 44) = 1;
      *(_DWORD *)(v35 + 48) = a6;
      uint64_t v41 = (char *)(v35 + 56);
      *(_BYTE *)(v35 + 52) = 1;
    }

    *(void *)(a1 + 136) = v41;
    goto LABEL_89;
  }

  if (a3 != 1) {
    return;
  }
  if ((unint64_t)[a4 length] > 8)
  {
    gid_t v19 = [a4 bytes];
    uint64_t v20 = (uint64_t)v19;
    if (v19[8])
    {
      int v21 = 0;
LABEL_39:
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101832368);
      }
      __int16 v22 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        sub_100310A54(v20, v21, &buf);
        uint64_t v23 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v60.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#Warning Found invalid HomeKit device: %{private}s",  (uint8_t *)&v60,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101832368);
      }
      uint64_t v24 = qword_101934A48;
      sub_100310A54(v20, v21, &v60);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v25 = &v60;
      }
      else {
        uint64_t v25 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      int v64 = 136380675;
      uint64_t v65 = v25;
      LODWORD(v54) = 12;
      char v16 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "#Warning Found invalid HomeKit device: %{private}s",  &v64,  v54);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSDat a *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anon ymous namespace)::HomeKitServiceData]",  "%s\n",  (const char *)v16);
LABEL_81:
      if (v16 != &buf) {
        goto LABEL_36;
      }
      return;
    }

    unsigned int v47 = *((unsigned __int16 *)v19 + 3);
    if (!*((_WORD *)v19 + 3))
    {
      int v21 = 1;
      goto LABEL_39;
    }

    *(double *)&buf.__r_.__value_.__l.__data_ = a7;
    int v64 = a5;
    int v48 = *(_DWORD *)v19;
    WORD2(v60.__r_.__value_.__r.__words[0]) = *((_WORD *)v19 + 2);
    LODWORD(v60.__r_.__value_.__l.__data_) = v48;
    if (v47 >= 0x10) {
      LOWORD(v47) = 16;
    }
    LOWORD(v59) = v47;
    sub_100310EF4((void **)(a1 + 128), (int *)&v60, (__int16 *)&v59, (uint64_t *)&buf, &v64);
    uint64_t v41 = *(char **)(a1 + 136);
LABEL_89:
    buf.__r_.__value_.__s.__data_[8] = 0;
    char v70 = 0;
    double v72 = 0LL;
    uint64_t v73 = 0LL;
    std::string __p = 0LL;
    __int128 v49 = *(_OWORD *)(v41 - 56);
    __int128 v50 = *(_OWORD *)(v41 - 40);
    __int128 v51 = *(_OWORD *)(v41 - 24);
    uint64_t v69 = *((void *)v41 - 1);
    __int128 v68 = v51;
    __int128 v67 = v50;
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v49;
    char v70 = 1;
    LODWORD(v60.__r_.__value_.__l.__data_) = 1;
    (*(void (**)(uint64_t, std::string *, std::string *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v60,  &buf,  1LL,  0xFFFFFFFFLL,  0LL);
    if (__p)
    {
      double v72 = __p;
      operator delete(__p);
    }

    return;
  }

  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101832368);
  }
  uint64_t v15 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning Found invalid HomeKit device. Data length was invalid",  (uint8_t *)&buf,  2u);
  }

  if (!sub_1002921D0(115, 2)) {
    return;
  }
  bzero(&buf, 0x65CuLL);
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101832368);
  }
  LOWORD(v60.__r_.__value_.__l.__data_) = 0;
  LODWORD(v54) = 2;
  char v16 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#Warning Found invalid HomeKit device. Data length was invalid",  &v60,  v54);
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous na mespace)::HomeKitServiceData]",  "%s\n",  (const char *)v16);
LABEL_35:
  if (v16 != &buf) {
LABEL_36:
  }
    free(v16);
}

void sub_10030CBE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030CF80(uint64_t a1, void *a2, int a3)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101832368);
  }
  std::string v5 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 138543618;
    id v13 = [a2 description];
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "HomeKit error: %{public}@ for type: %d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101832368);
    }
    uint64_t v6 = qword_101934A48;
    int v8 = 138543618;
    id v9 = [a2 description];
    __int16 v10 = 1024;
    int v11 = a3;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  17LL,  "HomeKit error: %{public}@ for type: %d",  &v8,  18);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLHomeKitProvider::onHomeKitScanningError(NSError *, CLHomeKitProvider_Type::HomeKitType)",  "%s\n",  v7);
  }

uint64_t sub_10030D254(uint64_t a1)
{
  int v2 = operator new(0xA8uLL);
  uint64_t result = sub_10030D2A0((uint64_t)v2, *(void **)(a1 + 32));
  qword_101994270 = (uint64_t)v2;
  return result;
}

void sub_10030D28C(_Unwind_Exception *a1)
{
}

uint64_t sub_10030D2A0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10030D3EC(a1, "CLHomeKitProvider", a2);
  *(void *)uint64_t v3 = off_101832248;
  *(void *)(v3 + 128) = 0LL;
  *(void *)(v3 + 136) = 0LL;
  *(void *)(v3 + 144) = 0LL;
  *(void *)(a1 + 160) = [*(id *)(v3 + 40) newTimer];
  BOOL v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 112) = -[CLHomeKitDelegate initWithProvider:]( objc_alloc(&OBJC_CLASS___CLHomeKitDelegate),  "initWithProvider:",  a1);
  *(void *)(a1 + 120) = objc_msgSend( [WPHomeKit alloc],  "initWithDelegate:queue:",  *(void *)(a1 + 112),  objc_msgSend(v4, "queue"));
  *(void *)(a1 + 152) = -[CBCentralManager initWithDelegate:queue:]( [CBCentralManager alloc],  "initWithDelegate:queue:",  *(void *)(a1 + 112),  [v4 queue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10030D488;
  __int128 v6[3] = &unk_10181D3D0;
  _DWORD v6[4] = a1;
  [*(id *)(a1 + 160) setHandler:v6];
  return a1;
}

void sub_10030D3C4(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 136) = v4;
    operator delete(v4);
  }

  sub_10030D56C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030D3EC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101832398;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + memset(&buf[7], 0, 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_10030D46C(_Unwind_Exception *exception_object)
{
}

id sub_10030D488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10030D4D0((void *)v1);
  return [*(id *)(v1 + 160) setNextFireTime:(*(double *)&qword_101994260 + j__CFAbsoluteTimeGetCurrent_1() * 1000.0) / 1000.0];
}

void sub_10030D4D0(void *a1)
{
  uint64_t v1 = (void *)a1[16];
  int v2 = (void *)a1[17];
  if (v1 != v2)
  {
    _WORD v4[8] = 0;
    v4[64] = 0;
    std::string __p = v1;
    uint64_t v6 = v2;
    a1[16] = 0LL;
    a1[17] = 0LL;
    uint64_t v7 = a1[18];
    a1[18] = 0LL;
    int v3 = 2;
    (*(void (**)(void *, int *, _BYTE *, uint64_t, uint64_t, void))(*a1 + 152LL))( a1,  &v3,  v4,  1LL,  0xFFFFFFFFLL,  0LL);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }

void sub_10030D550( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030D56C(uint64_t a1)
{
  *(void *)a1 = off_101832398;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_10030D5E0(void *a1)
{
  *a1 = off_101832248;
  int v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }

  return sub_10030D56C((uint64_t)a1);
}

void sub_10030D61C(id *a1)
{
  a1[20] = 0LL;
  [a1[15] invalidate];

  a1[15] = 0LL;
  a1[14] = 0LL;

  a1[19] = 0LL;
}

uint64_t sub_10030D678(uint64_t a1)
{
  if (*(_WORD *)a1 == 76)
  {
    if (*(_BYTE *)(a1 + 2) == 6)
    {
      char v1 = *(_BYTE *)(a1 + 3);
      if ((v1 & 0x1F) == 0xD)
      {
        unsigned int v2 = (((v1 + 115) >> 5) | (8 * (v1 + 115)));
        if (v2 > 7 || v2 == 4)
        {
          return 3;
        }

        else if (*(unsigned __int8 *)(a1 + 4) > 1u)
        {
          return 4;
        }

        else if (*(_WORD *)(a1 + 11))
        {
          if (*(_WORD *)(a1 + 13))
          {
            if (*(_BYTE *)(a1 + 15))
            {
              if (*(_BYTE *)(a1 + 16) == 2) {
                return 9;
              }
              else {
                return 8;
              }
            }

            else
            {
              return 7;
            }
          }

          else
          {
            return 6;
          }
        }

        else
        {
          return 5;
        }
      }

      else
      {
        return 2;
      }
    }

    else
    {
      return 1;
    }
  }

  else
  {
    return 0;
  }

double sub_10030D738@<D0>(unsigned __int16 *a1@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  switch(a2)
  {
    case 0:
      std::string::assign(&v108, "Invalid Company Identifier");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v103, *a1);
      uint64_t v7 = std::string::insert(&v103, 0LL, " got: ");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      id v9 = std::string::append(&v104, " expected: ");
      __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v102, 76);
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v11 = &v102;
      }
      else {
        int v11 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v102.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v102.__r_.__value_.__l.__size_;
      }
      id v13 = std::string::append(&v105, (const std::string::value_type *)v11, size);
      __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t cap = v13->__r_.__value_.__l.__cap_;
      __int128 v106 = v14;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v15 = (const std::string::value_type *)&v106;
      }
      else {
        int v15 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v16 = HIBYTE(cap);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_153;
    case 1:
      std::string::assign(&v108, "Invalid Type");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v103, *((unsigned __int8 *)a1 + 2));
      char v39 = std::string::insert(&v103, 0LL, " got: ");
      __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0LL;
      v39->__r_.__value_.__l.__cap_ = 0LL;
      v39->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v41 = std::string::append(&v104, " exptected: ");
      __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v41->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0LL;
      v41->__r_.__value_.__l.__cap_ = 0LL;
      v41->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v102, 6);
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned __int8 v43 = &v102;
      }
      else {
        unsigned __int8 v43 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v44 = v102.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v44 = v102.__r_.__value_.__l.__size_;
      }
      uint64_t v45 = std::string::append(&v105, (const std::string::value_type *)v43, v44);
      __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      int64_t cap = v45->__r_.__value_.__l.__cap_;
      __int128 v106 = v46;
      v45->__r_.__value_.__l.__size_ = 0LL;
      v45->__r_.__value_.__l.__cap_ = 0LL;
      v45->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v15 = (const std::string::value_type *)&v106;
      }
      else {
        int v15 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v16 = HIBYTE(cap);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_153;
    case 2:
      std::string::assign(&v108, "Invalid Remaining Length");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v103, *((_BYTE *)a1 + 3) & 0x1F);
      double v17 = std::string::insert(&v103, 0LL, " got: ");
      __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0LL;
      v17->__r_.__value_.__l.__cap_ = 0LL;
      v17->__r_.__value_.__r.__words[0] = 0LL;
      gid_t v19 = std::string::append(&v104, " expected: ");
      __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0LL;
      v19->__r_.__value_.__l.__cap_ = 0LL;
      v19->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v102, 13);
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v21 = &v102;
      }
      else {
        int v21 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v22 = v102.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v22 = v102.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v105, (const std::string::value_type *)v21, v22);
      __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      int64_t cap = v23->__r_.__value_.__l.__cap_;
      __int128 v106 = v24;
      v23->__r_.__value_.__l.__size_ = 0LL;
      v23->__r_.__value_.__l.__cap_ = 0LL;
      v23->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v15 = (const std::string::value_type *)&v106;
      }
      else {
        int v15 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v16 = HIBYTE(cap);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_153;
    case 3:
      std::string::assign(&v108, "Invalid Advertising Interval and Length");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v105, *((unsigned __int8 *)a1 + 3));
      uint64_t v25 = std::string::insert(&v105, 0LL, ": ");
      __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      int64_t cap = v25->__r_.__value_.__l.__cap_;
      __int128 v106 = v26;
      v25->__r_.__value_.__l.__size_ = 0LL;
      v25->__r_.__value_.__l.__cap_ = 0LL;
      v25->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v27 = (const std::string::value_type *)&v106;
      }
      else {
        int v27 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v28 = HIBYTE(cap);
      }
      else {
        std::string::size_type v28 = *((void *)&v106 + 1);
      }
      std::string::append(&v108, v27, v28);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)v106);
      }
      uint64_t v29 = (void *)v105.__r_.__value_.__r.__words[0];
      break;
    case 4:
      std::string::assign(&v108, "Invalid Status Flags");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v103, *((unsigned __int8 *)a1 + 4) >> 1);
      char v30 = std::string::insert(&v103, 0LL, " got: ");
      __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0LL;
      v30->__r_.__value_.__l.__cap_ = 0LL;
      v30->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v32 = std::string::append(&v104, " expected: ");
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v102, 0);
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v34 = &v102;
      }
      else {
        double v34 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v35 = v102.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v35 = v102.__r_.__value_.__l.__size_;
      }
      char v36 = std::string::append(&v105, (const std::string::value_type *)v34, v35);
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      int64_t cap = v36->__r_.__value_.__l.__cap_;
      __int128 v106 = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v15 = (const std::string::value_type *)&v106;
      }
      else {
        int v15 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v16 = HIBYTE(cap);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_153;
    case 5:
      std::string::assign(&v108, "Invalid Accessory Category Identifier");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v101, 1);
      unsigned int v47 = std::string::insert(&v101, 0LL, " (out of range [");
      __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__l.__cap_ = v47->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0LL;
      v47->__r_.__value_.__l.__cap_ = 0LL;
      v47->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v49 = std::string::append(&v102, " - ");
      __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0LL;
      v49->__r_.__value_.__l.__cap_ = 0LL;
      v49->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v100, 0xFFFF);
      if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v51 = &v100;
      }
      else {
        __int128 v51 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v52 = v100.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v52 = v100.__r_.__value_.__l.__size_;
      }
      uint64_t v53 = std::string::append(&v103, (const std::string::value_type *)v51, v52);
      __int128 v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v53->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0LL;
      v53->__r_.__value_.__l.__cap_ = 0LL;
      v53->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v55 = std::string::append(&v104, "]): ");
      __int128 v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v55->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0LL;
      v55->__r_.__value_.__l.__cap_ = 0LL;
      v55->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v99, *(unsigned __int16 *)((char *)a1 + 11));
      if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v57 = &v99;
      }
      else {
        int v57 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v58 = v99.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v58 = v99.__r_.__value_.__l.__size_;
      }
      int v59 = std::string::append(&v105, (const std::string::value_type *)v57, v58);
      __int128 v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      int64_t cap = v59->__r_.__value_.__l.__cap_;
      __int128 v106 = v60;
      v59->__r_.__value_.__l.__size_ = 0LL;
      v59->__r_.__value_.__l.__cap_ = 0LL;
      v59->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v61 = (const std::string::value_type *)&v106;
      }
      else {
        int v61 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v62 = HIBYTE(cap);
      }
      else {
        std::string::size_type v62 = *((void *)&v106 + 1);
      }
      goto LABEL_124;
    case 6:
      std::string::assign(&v108, "Invalid Global State Number");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v101, 1);
      int v63 = std::string::insert(&v101, 0LL, " (out of range [");
      __int128 v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__l.__cap_ = v63->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0LL;
      v63->__r_.__value_.__l.__cap_ = 0LL;
      v63->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v65 = std::string::append(&v102, " - ");
      __int128 v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__l.__cap_ = v65->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0LL;
      v65->__r_.__value_.__l.__cap_ = 0LL;
      v65->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v100, 0xFFFF);
      if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v67 = &v100;
      }
      else {
        __int128 v67 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v68 = v100.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v68 = v100.__r_.__value_.__l.__size_;
      }
      uint64_t v69 = std::string::append(&v103, (const std::string::value_type *)v67, v68);
      __int128 v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v69->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0LL;
      v69->__r_.__value_.__l.__cap_ = 0LL;
      v69->__r_.__value_.__r.__words[0] = 0LL;
      double v71 = std::string::append(&v104, "]): ");
      __int128 v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v71->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0LL;
      v71->__r_.__value_.__l.__cap_ = 0LL;
      v71->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v99, *(unsigned __int16 *)((char *)a1 + 13));
      if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v73 = &v99;
      }
      else {
        uint64_t v73 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v74 = v99.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v74 = v99.__r_.__value_.__l.__size_;
      }
      double v75 = std::string::append(&v105, (const std::string::value_type *)v73, v74);
      __int128 v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      int64_t cap = v75->__r_.__value_.__l.__cap_;
      __int128 v106 = v76;
      v75->__r_.__value_.__l.__size_ = 0LL;
      v75->__r_.__value_.__l.__cap_ = 0LL;
      v75->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v61 = (const std::string::value_type *)&v106;
      }
      else {
        int v61 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v62 = HIBYTE(cap);
      }
      else {
        std::string::size_type v62 = *((void *)&v106 + 1);
      }
      goto LABEL_124;
    case 7:
      std::string::assign(&v108, "Invalid Configuration Number");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v101, 1);
      double v77 = std::string::insert(&v101, 0LL, " (out of range [");
      __int128 v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__l.__cap_ = v77->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0LL;
      v77->__r_.__value_.__l.__cap_ = 0LL;
      v77->__r_.__value_.__r.__words[0] = 0LL;
      double v79 = std::string::append(&v102, " - ");
      __int128 v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__l.__cap_ = v79->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0LL;
      v79->__r_.__value_.__l.__cap_ = 0LL;
      v79->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v100, 255);
      if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v81 = &v100;
      }
      else {
        double v81 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v82 = v100.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v82 = v100.__r_.__value_.__l.__size_;
      }
      double v83 = std::string::append(&v103, (const std::string::value_type *)v81, v82);
      __int128 v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v83->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0LL;
      v83->__r_.__value_.__l.__cap_ = 0LL;
      v83->__r_.__value_.__r.__words[0] = 0LL;
      int v85 = std::string::append(&v104, "]): ");
      __int128 v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v85->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0LL;
      v85->__r_.__value_.__l.__cap_ = 0LL;
      v85->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v99, *((unsigned __int8 *)a1 + 15));
      if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v87 = &v99;
      }
      else {
        int v87 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v88 = v99.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v88 = v99.__r_.__value_.__l.__size_;
      }
      double v89 = std::string::append(&v105, (const std::string::value_type *)v87, v88);
      __int128 v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      int64_t cap = v89->__r_.__value_.__l.__cap_;
      __int128 v106 = v90;
      v89->__r_.__value_.__l.__size_ = 0LL;
      v89->__r_.__value_.__l.__cap_ = 0LL;
      v89->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v61 = (const std::string::value_type *)&v106;
      }
      else {
        int v61 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v62 = HIBYTE(cap);
      }
      else {
        std::string::size_type v62 = *((void *)&v106 + 1);
      }
LABEL_124:
      std::string::append(&v108, v61, v62);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)v106);
      }
      uint64_t v29 = (void *)v101.__r_.__value_.__r.__words[0];
      break;
    case 8:
      std::string::assign(&v108, "Invalid Compatible Version");
      if (!a3) {
        goto LABEL_164;
      }
      std::to_string(&v103, *((unsigned __int8 *)a1 + 16));
      uint64_t v91 = std::string::insert(&v103, 0LL, " got ");
      __int128 v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__l.__cap_ = v91->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0LL;
      v91->__r_.__value_.__l.__cap_ = 0LL;
      v91->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v93 = std::string::append(&v104, " expected ");
      __int128 v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__l.__cap_ = v93->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0LL;
      v93->__r_.__value_.__l.__cap_ = 0LL;
      v93->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v102, 2);
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v95 = &v102;
      }
      else {
        __int16 v95 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v96 = v102.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v96 = v102.__r_.__value_.__l.__size_;
      }
      __int16 v97 = std::string::append(&v105, (const std::string::value_type *)v95, v96);
      __int128 v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      int64_t cap = v97->__r_.__value_.__l.__cap_;
      __int128 v106 = v98;
      v97->__r_.__value_.__l.__size_ = 0LL;
      v97->__r_.__value_.__l.__cap_ = 0LL;
      v97->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        int v15 = (const std::string::value_type *)&v106;
      }
      else {
        int v15 = (const std::string::value_type *)v106;
      }
      if (cap >= 0) {
        std::string::size_type v16 = HIBYTE(cap);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
LABEL_153:
      std::string::append(&v108, v15, v16);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)v106);
      }
      uint64_t v29 = (void *)v103.__r_.__value_.__r.__words[0];
      break;
    case 9:
      sub_1010DDBC0(a4, "Valid");
      return result;
    default:
      goto LABEL_164;
  }

  operator delete(v29);
LABEL_164:
  double result = *(double *)&v108.__r_.__value_.__l.__data_;
  *a4 = v108;
  return result;
}

void sub_10030E1B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10030E3E8@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, (&off_1018324D8)[*a1]);
}

uint64_t sub_10030E400()
{
  return 1LL;
}

uint64_t sub_10030E408(id *a1)
{
  uint64_t v3 = 0x100000002LL;
  if ((int)sub_100247620((uint64_t)a1, (int *)&v3, 2LL) <= 0)
  {
    [a1[15] stopScanningForType:1];
    [a1[15] stopScanningForType:0];
    [a1[19] stopScan];
    [a1[20] setNextFireDelay:1.79769313e308];
  }

  return 1LL;
}

void sub_10030E4AC(void *a1)
{
  *a1 = off_101832248;
  unsigned int v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)sub_10030D56C((uint64_t)a1);
  operator delete(v3);
}

void sub_10030E4EC(uint64_t a1, uint64_t a2)
{
  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        id v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v14 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832348);
      }
      __int128 v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        __int128 v20 = v11;
        __int16 v21 = 1026;
        int v22 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101832348);
        }
        std::string::size_type v12 = (void *)(a1 + 8);
        int v15 = 136446466;
        std::string::size_type v16 = v12;
        __int16 v17 = 1026;
        int v18 = a2;
        LODWORD(v14) = 18;
        id v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKi tProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
      }
    }
  }

uint64_t sub_10030E760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101937588);
}

BOOL sub_10030E774(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }

      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          std::string::size_type v28 = (uint64_t *)v24;
        }
        else {
          std::string::size_type v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }

      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)uint64_t v41 = v25;
        uint64_t v33 = *(void *)(v25 + 56);
        char v34 = *a4;
        *(void *)std::string buf = &v40;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + memset(&buf[7], 0, 32) = v34;
        buf[0] = 0;
        uint8_t buf[8] = 0;
        char v47 = 0;
        std::string __p = 0LL;
        __int128 v49 = 0LL;
        uint64_t v50 = 0LL;
        if (v20 == v18)
        {
          if ((*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
          {
            std::string::size_type v35 = sub_100311284((uint64_t)buf);
            sub_10031052C((_BYTE *)a1, (uint64_t)&v39, (uint64_t)v41, v35);
          }

          if (__p)
          {
            __int128 v49 = __p;
            operator delete(__p);
          }
        }

        if (v33) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        *(void *)uint64_t v41 = a1 + 64;
        char v29 = byte_101937589;
        HIDWORD(v38) = v16;
        *(void *)std::string buf = (char *)&v38 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(void *)std::string buf = (char *)&v38 + 4;
        char v30 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v30 + 8);
        char v31 = *a4;
        HIDWORD(v38) = *a3;
        *(void *)std::string buf = (char *)&v38 + 4;
        uint64_t v32 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::string buf = &v40;
        *((_BYTE *)sub_1004EF3D4(v32 + 5, &v40, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + memset(&buf[7], 0, 32) = v31;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_10004A8FC((uint64_t **)(v39 + 40), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101832348);
  }
  uint64_t v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v45 = 1026;
    int v46 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832348);
    }
    char v36 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    LODWORD(v38) = 18;
    __int128 v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLHomeKitPro vider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char , RegistrationInfo_T = char]",  "%s\n",  v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0LL;
  }

  return result;
}

void sub_10030EBFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p)
{
  if (__p)
  {
    *(void *)(v26 + 80) = __p;
    operator delete(__p);
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10030EC24(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      id v9 = (uint64_t *)v5;
    }
    else {
      id v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832348);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      char v29 = v11;
      __int16 v30 = 1026;
      int v31 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832348);
      }
      BOOL v22 = (void *)(a1 + 8);
      int v24 = 136446466;
      uint64_t v25 = v22;
      __int16 v26 = 1026;
      int v27 = a2;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                      &v24,
                      18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, ch ar>::clientRegistered(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, Notif icationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10030EEA4(char *a1, int a2, int *a3)
{
  HIDWORD(v33) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                uint64_t v25 = (uint64_t *)v20;
              }
              else {
                uint64_t v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101832348);
              }
              __int16 v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v43 >= 0) {
                  std::string::size_type v28 = __p;
                }
                else {
                  std::string::size_type v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v35 = 2082;
                char v36 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101832348);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v37 >= 0) {
                  int v31 = buf;
                }
                else {
                  int v31 = *(_BYTE **)buf;
                }
                int v38 = 136446466;
                uint64_t v39 = v29;
                __int16 v40 = 2082;
                uint64_t v41 = v31;
                LODWORD(v33) = 22;
                uint64_t v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData , char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLHomeKitProvi der_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInf o_T = char, RegistrationInfo_T = char]",  "%s\n",  v32);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_10030F22C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  *(_OWORD *)a3 = *(_OWORD *)v11;
  __int128 v12 = *(_OWORD *)(v11 + 16);
  __int128 v13 = *(_OWORD *)(v11 + 32);
  __int128 v14 = *(_OWORD *)(v11 + 48);
  *(_BYTE *)(a3 + 64) = *(_BYTE *)(v11 + 64);
  *(_OWORD *)(a3 + memset(&buf[7], 0, 32) = v13;
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)(a3 + 16) = v12;
  if (v11 != a3) {
    sub_100311398( (char *)(a3 + 72),  *(char **)(v11 + 72),  *(void *)(v11 + 80),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(v11 + 80) - *(void *)(v11 + 72)) >> 3));
  }
  return 1LL;
}

uint64_t sub_10030F2E0(uint64_t a1, int *a2, __int128 *a3)
{
  int v10 = *a2;
  __int128 v12 = &v10;
  uint64_t v5 = sub_10023347C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_1012CF090, &v12);
  sub_10005F550((uint64_t)(v5 + 8), &v11);
  int v6 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    uint64_t v7 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 1LL;
}

void sub_10030F38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10030F3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  _WORD v4[8] = 0;
  v4[64] = 0;
  int v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v4,  a3,  a4,  0LL);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }

void sub_10030F400( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030F41C(uint64_t a1, unsigned int *a2, __int128 *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832348);
    }
    __int128 v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)uint64_t v65 = 0;
      *(_WORD *)&v65[4] = 2082;
      *(void *)&v65[6] = "";
      *(_WORD *)&v65[14] = 2082;
      *(void *)&v65[16] = "activity";
      __int16 v66 = 2082;
      __int128 v67 = v12;
      __int16 v68 = 2050;
      uint64_t v69 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)__int128 v70 = &v70[8];
      memset(&v70[8], 0, 24);
      double v71 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v70);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v69;
      if (v69)
      {
        p_shared_owners = (unint64_t *)&v69->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&v65[4], *(void **)&v65[12]);
      BOOL v24 = v71;
      if (v71)
      {
        uint64_t v25 = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v70, *(void **)&v70[8]);
    }

    if (a4)
    {
      sub_100310608(a3, buf);
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v27 = *(std::__shared_weak_count **)&v65[4];
      if (*(void *)&v65[4])
      {
        std::string::size_type v28 = (unint64_t *)(*(void *)&v65[4] + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    uint64_t v30 = sub_100310084((uint64_t)a3);
    if (a5 == -1)
    {
      sub_100310158((void *)a1, (int *)a2, v30);
    }

    else
    {
      uint64_t v31 = a1 + 88;
      uint64_t v32 = *(void *)(a1 + 88);
      if (!v32) {
        goto LABEL_48;
      }
      uint64_t v33 = a1 + 88;
      do
      {
        int v34 = *(_DWORD *)(v32 + 32);
        BOOL v35 = v34 < a5;
        if (v34 >= a5) {
          char v36 = (uint64_t *)v32;
        }
        else {
          char v36 = (uint64_t *)(v32 + 8);
        }
        if (!v35) {
          uint64_t v33 = v32;
        }
        uint64_t v32 = *v36;
      }

      while (*v36);
      if (v33 == v31 || *(_DWORD *)(v33 + 32) > a5) {
LABEL_48:
      }
        uint64_t v33 = a1 + 88;
      uint64_t v62 = v33;
      unint64_t v37 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v38 = *a2;
      uint64_t v39 = (__n128 *)(a1 + 64);
      do
      {
        int v40 = *(_DWORD *)(v37 + 32);
        BOOL v41 = v40 < v38;
        if (v40 >= v38) {
          __int16 v42 = (unint64_t *)v37;
        }
        else {
          __int16 v42 = (unint64_t *)(v37 + 8);
        }
        if (!v41) {
          uint64_t v39 = (__n128 *)v37;
        }
        unint64_t v37 = *v42;
      }

      while (*v42);
      if (v39 == v15 || v38 < (signed __int32)v39[2].n128_u32[0])
      {
LABEL_59:
        int v61 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101832348);
        }
        char v43 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v44 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v70, a1, a2);
          if (v70[23] >= 0) {
            __int16 v45 = v70;
          }
          else {
            __int16 v45 = *(_BYTE **)v70;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)uint64_t v65 = v44;
          *(_WORD *)&v65[8] = 1024;
          *(_DWORD *)&v65[10] = a5;
          *(_WORD *)&v65[14] = 2080;
          *(void *)&v65[16] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v70[23] & 0x80000000) != 0) {
            operator delete(*(void **)v70);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101832348);
          }
          int v46 = (void *)(a1 + 8);
          uint64_t v47 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v60 >= 0) {
            __int128 v48 = __p;
          }
          else {
            __int128 v48 = (void **)__p[0];
          }
          *(_DWORD *)__int128 v70 = 136315650;
          *(void *)&v70[4] = v46;
          *(_WORD *)&v70[12] = 1024;
          *(_DWORD *)&v70[14] = a5;
          *(_WORD *)&v70[18] = 2080;
          *(void *)&v70[20] = v48;
          __int128 v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "%s; client %d has deregistered, not notifying %s",
                          v70,
                          28,
                          v58);
          if (v60 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char , char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notific ation_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationDat a, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v49);
        }

        goto LABEL_83;
      }

      int v61 = v39;
      if (v33 == v31) {
        goto LABEL_60;
      }
      uint64_t v52 = v39[3].n128_i64[0];
      uint64_t v50 = v39 + 3;
      __int128 v51 = (__n128 *)v52;
      if (!v52) {
        goto LABEL_60;
      }
      int v53 = *(_DWORD *)(v33 + 32);
      __int128 v54 = v50;
      do
      {
        int v55 = v51[1].n128_i32[3];
        BOOL v56 = v55 < v53;
        if (v55 >= v53) {
          int v57 = v51;
        }
        else {
          int v57 = (__n128 *)&v51->n128_i8[8];
        }
        if (!v56) {
          __int128 v54 = v51;
        }
        __int128 v51 = (__n128 *)v57->n128_u64[0];
      }

      while (v57->n128_u64[0]);
      sub_10031052C((_BYTE *)a1, (uint64_t)&v62, (uint64_t)&v61, v30);
    }

void sub_10030FA38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10030FA84(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832348);
    }
    unsigned int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      int v34 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832348);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v29 = 136315138;
      uint64_t v30 = v4;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
                     (const char *)&v29);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, ch ar>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvide r_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832348);
    }
    int v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = (void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v34 = v7;
      __int16 v35 = 2048;
      v36[0] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832348);
      }
      uint64_t v25 = (void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 96);
      int v29 = 136315394;
      uint64_t v30 = v25;
      __int16 v31 = 2048;
      v32[0] = v26;
      int v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
                      (const char *)&v29,
                      22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, ch ar>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvide r_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v27);
    }

    BOOL v9 = *(void **)(a1 + 80);
    if (v9 != (void *)(a1 + 88))
    {
      int v10 = (void *)(a1 + 8);
      do
      {
        __int128 v11 = (void *)v9[5];
        if (v11 != v9 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101832348);
            }
            __int128 v12 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v13 = (void *)(a1 + 8);
              int v14 = *((_DWORD *)v9 + 8);
              int v15 = *((_DWORD *)v11 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v34 = v13;
              __int16 v35 = 1024;
              LODWORD(v36[0]) = v14;
              WORD2(v36[0]) = 1024;
              *(_DWORD *)((char *)v36 + 6) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101832348);
              }
              BOOL v19 = (void *)(a1 + 8);
              int v20 = *((_DWORD *)v9 + 8);
              int v21 = *((_DWORD *)v11 + 7);
              int v29 = 136315650;
              uint64_t v30 = v19;
              __int16 v31 = 1024;
              LODWORD(v32[0]) = v20;
              WORD2(v32[0]) = 1024;
              *(_DWORD *)((char *)v32 + 6) = v21;
              BOOL v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                              (const char *)&v29,
                              24,
                              v28);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v22);
            }

            signed __int32 v16 = (void *)v11[1];
            if (v16)
            {
              do
              {
                int v17 = v16;
                signed __int32 v16 = (void *)*v16;
              }

              while (v16);
            }

            else
            {
              do
              {
                int v17 = (void *)v11[2];
                BOOL v18 = *v17 == (void)v11;
                __int128 v11 = v17;
              }

              while (!v18);
            }

            __int128 v11 = v17;
          }

          while (v17 != v9 + 6);
        }

        unint64_t v23 = (void *)v9[1];
        if (v23)
        {
          do
          {
            BOOL v24 = v23;
            unint64_t v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            BOOL v24 = (void *)v9[2];
            BOOL v18 = *v24 == (void)v9;
            BOOL v9 = v24;
          }

          while (!v18);
        }

        BOOL v9 = v24;
      }

      while (v24 != (void *)(a1 + 88));
    }
  }

void sub_10031002C(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100310058(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

CLCppContainer *sub_100310084(uint64_t a1)
{
  unsigned int v2 = operator new(0x60uLL);
  __int128 v3 = *(_OWORD *)(a1 + 48);
  v2[2] = *(_OWORD *)(a1 + 32);
  v2[3] = v3;
  *((_BYTE *)v2 + 64) = *(_BYTE *)(a1 + 64);
  __int128 v4 = *(_OWORD *)(a1 + 16);
  _OWORD *v2 = *(_OWORD *)a1;
  v2[1] = v4;
  *((void *)v2 + 10) = 0LL;
  *((void *)v2 + 11) = 0LL;
  uint64_t v5 = *(const void **)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  *((void *)v2 + 9) = 0LL;
  sub_100310750((void *)v2 + 9, v5, v6, 0x6DB6DB6DB6DB6DB7LL * ((v6 - (uint64_t)v5) >> 3));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1003107C8;
  void v8[3] = &unk_10181D3D0;
  v8[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v8,  0LL,  96LL);
}

void sub_100310144(_Unwind_Exception *a1)
{
}

void sub_100310158(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          __int128 v12 = (uint64_t *)v4;
        }
        else {
          __int128 v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v50 = v9;
        id v13 = sub_100310808(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          signed __int32 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int128 v49 = v19;
              sub_10031052C(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  uint64_t v32 = (uint64_t *)v27;
                }
                else {
                  uint64_t v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v50 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                __int16 v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    uint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    uint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    __int16 v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      __int16 v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      __int16 v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  char v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      char v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      __int16 v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int128 v49 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101832348);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                uint64_t v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                BOOL v56 = v25;
                __int16 v57 = 1026;
                int v58 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101832348);
                }
                __int16 v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v51 = 136446466;
                uint64_t v52 = v45;
                __int16 v53 = 1026;
                int v54 = v46;
                LODWORD(v48) = 18;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLHomeKitProv ider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationIn fo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
              }
            }
          }

          while (v14 != v50 + 6);
        }
      }
    }
  }

_BYTE *sub_10031052C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100310808(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    int v14 = (int *)(*(void *)a2 + 32LL);
    __int128 v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

uint64_t sub_100310608@<X0>(__int128 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x78uLL);
  uint64_t result = sub_100310660((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10031064C(_Unwind_Exception *a1)
{
}

uint64_t sub_100310660(uint64_t a1, __int128 *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_101832478;
  __int128 v3 = a2[2];
  __int128 v4 = a2[3];
  char v5 = *((_BYTE *)a2 + 64);
  __int128 v7 = *a2;
  __int128 v6 = a2[1];
  *(void *)(a1 + 96) = 0LL;
  uint64_t v8 = a1 + 96;
  *(_OWORD *)(v8 - 72) = v7;
  *(_BYTE *)(v8 - 8) = v5;
  *(_OWORD *)(v8 - 24) = v4;
  *(_OWORD *)(v8 - 40) = v3;
  *(_OWORD *)(v8 - 56) = v6;
  *(_OWORD *)(v8 + 8) = 0u;
  sub_100310750( (void *)v8,  *((const void **)a2 + 9),  *((void *)a2 + 10),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3));
  return a1;
}

void sub_1003106E8(_Unwind_Exception *a1)
{
}

void sub_1003106FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101832478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100310710(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101832478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100310734(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }

void *sub_100310750(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    uint64_t result = sub_10010EEB0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1003107AC(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1003107C8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    unsigned int v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = v2;
      operator delete(v2);
    }

    operator delete(v1);
  }

id sub_100310808(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100310854(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100310854(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018324B8);
    }
    uint64_t v3 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001012E63CCLL & 0x7FFFFFFFFFFFFFFFLL;
    __int128 v4 = (os_log_s *)v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018324B8);
    }
    uint64_t v7 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001012E63CCLL & 0x7FFFFFFFFFFFFFFFLL;
    __int128 v4 = (os_log_s *)v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }

  _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has cha nged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  (uint8_t *)&v8,  0x20u);
  return 0LL;
}

void sub_100310A28(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100310A54(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0LL;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  if (a2)
  {
    if (a2 == 1)
    {
      std::string::assign(a3, "Invalid Accessory Category Identifier");
      std::to_string(&v34, 1);
      os_log_type_t v5 = std::string::insert(&v34, 0LL, " (out of range [");
      __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0LL;
      v5->__r_.__value_.__l.__cap_ = 0LL;
      v5->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v7 = std::string::append(&v35, " - ");
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v33, 0xFFFF);
      if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        id v9 = &v33;
      }
      else {
        id v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v33.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = std::string::append(&v36, (const std::string::value_type *)v9, size);
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      unint64_t v13 = std::string::append(&v37, "]): ");
      __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v32, *(unsigned __int16 *)(a1 + 6));
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v15 = &v32;
      }
      else {
        int v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v16 = v32.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v16 = v32.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = std::string::append(&v38, (const std::string::value_type *)v15, v16);
      __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      int64_t cap = v17->__r_.__value_.__l.__cap_;
      __int128 v39 = v18;
      v17->__r_.__value_.__l.__size_ = 0LL;
      v17->__r_.__value_.__l.__cap_ = 0LL;
      v17->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        BOOL v19 = (const std::string::value_type *)&v39;
      }
      else {
        BOOL v19 = (const std::string::value_type *)v39;
      }
      if (cap >= 0) {
        std::string::size_type v20 = HIBYTE(cap);
      }
      else {
        std::string::size_type v20 = *((void *)&v39 + 1);
      }
      std::string::append(a3, v19, v20);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)v39);
      }
      if ((char)v34.__r_.__value_.__s.__size_ < 0)
      {
        BOOL v21 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_59:
        operator delete(v21);
      }
    }
  }

  else
  {
    std::string::assign(a3, "Invalid Status Flags");
    std::to_string(&v36, *(unsigned __int8 *)(a1 + 8));
    BOOL v22 = std::string::insert(&v36, 0LL, " got: ");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v24 = std::string::append(&v37, " expected: ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v35, 0);
    if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v26 = &v35;
    }
    else {
      int v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v27 = v35.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v27 = v35.__r_.__value_.__l.__size_;
    }
    int v28 = std::string::append(&v38, (const std::string::value_type *)v26, v27);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    int64_t cap = v28->__r_.__value_.__l.__cap_;
    __int128 v39 = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      int v30 = (const std::string::value_type *)&v39;
    }
    else {
      int v30 = (const std::string::value_type *)v39;
    }
    if (cap >= 0) {
      std::string::size_type v31 = HIBYTE(cap);
    }
    else {
      std::string::size_type v31 = *((void *)&v39 + 1);
    }
    std::string::append(a3, v30, v31);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v39);
    }
    if ((char)v36.__r_.__value_.__s.__size_ < 0)
    {
      BOOL v21 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_59;
    }
  }

void sub_100310D9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100310EF4(void **a1, int *a2, __int16 *a3, uint64_t *a4, int *a5)
{
  __int128 v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  uint64_t v11 = v12;
  unint64_t v13 = *(void *)(v10 - 8);
  if (v13 >= (unint64_t)v12)
  {
    uint64_t v20 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v13 - (void)*a1) >> 3);
    unint64_t v21 = v20 + 1;
    unint64_t v22 = 0x6DB6DB6DB6DB6DB7LL * ((v11 - (_BYTE *)*a1) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x249249249249249LL) {
      unint64_t v23 = 0x492492492492492LL;
    }
    else {
      unint64_t v23 = v21;
    }
    BOOL v24 = (char *)sub_1000AC8F0(v10, v23);
    __int128 v25 = &v24[56 * v20];
    uint64_t v26 = *a4;
    __int16 v27 = *((_WORD *)a2 + 2);
    int v28 = *a2;
    __int16 v29 = *a3;
    std::string::size_type v31 = &v24[56 * v30];
    int v32 = *a5;
    *__int128 v25 = 1;
    *(_DWORD *)(v25 + 1) = v28;
    *(_WORD *)(v25 + 5) = v27;
    *((_WORD *)v25 + 4) = v29;
    *((void *)v25 + 2) = v26;
    *((_DWORD *)v25 + 6) = v32;
    v25[28] = 0;
    v25[44] = 0;
    v25[48] = 0;
    v25[52] = 0;
    BOOL v19 = v25 + 56;
    std::string v34 = (char *)*a1;
    std::string v33 = (char *)a1[1];
    if (v33 != *a1)
    {
      do
      {
        __int128 v35 = *(_OWORD *)(v33 - 56);
        __int128 v36 = *(_OWORD *)(v33 - 40);
        __int128 v37 = *(_OWORD *)(v33 - 24);
        *((void *)v25 - 1) = *((void *)v33 - 1);
        *(_OWORD *)(v25 - 24) = v37;
        *(_OWORD *)(v25 - 40) = v36;
        *(_OWORD *)(v25 - 56) = v35;
        v25 -= 56;
        v33 -= 56;
      }

      while (v33 != v34);
      std::string v33 = (char *)*a1;
    }

    *a1 = v25;
    a1[1] = v19;
    a1[2] = v31;
    if (v33) {
      operator delete(v33);
    }
  }

  else
  {
    __int16 v14 = *((_WORD *)a2 + 2);
    int v15 = *a2;
    __int16 v16 = *a3;
    uint64_t v17 = *a4;
    int v18 = *a5;
    *(_BYTE *)unint64_t v13 = 1;
    *(_DWORD *)(v13 + 1) = v15;
    *(_WORD *)(v13 + 5) = v14;
    *(_WORD *)(v13 + 8) = v16;
    *(void *)(v13 + 16) = v17;
    *(_DWORD *)(v13 + 24) = v18;
    *(_BYTE *)(v13 + 28) = 0;
    *(_BYTE *)(v13 + 44) = 0;
    *(_BYTE *)(v13 + 48) = 0;
    BOOL v19 = (char *)(v13 + 56);
    *(_BYTE *)(v13 + 52) = 0;
  }

  a1[1] = v19;
  return v19 - 56;
}

char *sub_1003110AC( void **a1, __int16 *a2, char *a3, int *a4, _BYTE *a5, int *a6, __int16 *a7, __int16 *a8, _BYTE *a9, _BYTE *a10, uint64_t *a11, int *a12, int *a13)
{
  __int16 v14 = (char *)*a1;
  uint64_t v15 = 0x6DB6DB6DB6DB6DB7LL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  unint64_t v16 = v15 + 1;
  uint64_t v20 = (uint64_t)(a1 + 2);
  unint64_t v21 = 0x6DB6DB6DB6DB6DB7LL * (((_BYTE *)a1[2] - v14) >> 3);
  if (2 * v21 > v16) {
    unint64_t v16 = 2 * v21;
  }
  if (v21 >= 0x249249249249249LL) {
    unint64_t v22 = 0x492492492492492LL;
  }
  else {
    unint64_t v22 = v16;
  }
  unint64_t v23 = (char *)sub_1000AC8F0(v20, v22);
  __int16 v24 = *a2;
  char v25 = *a3;
  uint64_t v26 = &v23[56 * v15];
  int v27 = *a4;
  __int16 v29 = &v23[56 * v28];
  BOOL v30 = *a5 != 0;
  __int16 v31 = *((_WORD *)a6 + 2);
  int v32 = *a6;
  __int16 v33 = *a7;
  __int16 v34 = *a8;
  LOBYTE(v23) = *a9;
  LOBYTE(v28) = *a10;
  uint64_t v35 = *a11;
  int v36 = *a12;
  int v37 = *a13;
  *uint64_t v26 = 2;
  *(_DWORD *)(v26 + 1) = v32;
  *(_WORD *)(v26 + 5) = v31;
  *((_WORD *)v26 + 4) = v33;
  *((void *)v26 + 2) = v35;
  *((_DWORD *)v26 + 6) = v36;
  *((_WORD *)v26 + 14) = v24;
  v26[30] = v25;
  *((_DWORD *)v26 + 8) = v27;
  v26[36] = v30;
  *((_WORD *)v26 + 19) = v34;
  v26[40] = (char)v23;
  v26[41] = v28;
  v26[44] = 1;
  *((_DWORD *)v26 + 12) = v37;
  v26[52] = 1;
  std::string v38 = v26 + 56;
  int v40 = (char *)*a1;
  __int128 v39 = (char *)a1[1];
  if (v39 != *a1)
  {
    do
    {
      __int128 v41 = *(_OWORD *)(v39 - 56);
      __int128 v42 = *(_OWORD *)(v39 - 40);
      __int128 v43 = *(_OWORD *)(v39 - 24);
      *((void *)v26 - 1) = *((void *)v39 - 1);
      *(_OWORD *)(v26 - 24) = v43;
      *(_OWORD *)(v26 - 40) = v42;
      *(_OWORD *)(v26 - 56) = v41;
      v26 -= 56;
      v39 -= 56;
    }

    while (v39 != v40);
    __int128 v39 = (char *)*a1;
  }

  *a1 = v26;
  a1[1] = v38;
  a1[2] = v29;
  if (v39) {
    operator delete(v39);
  }
  return v38;
}

CLCppContainer *sub_100311284(uint64_t a1)
{
  id v2 = operator new(0x60uLL);
  __int128 v3 = *(_OWORD *)(a1 + 48);
  v2[2] = *(_OWORD *)(a1 + 32);
  v2[3] = v3;
  *((_BYTE *)v2 + 64) = *(_BYTE *)(a1 + 64);
  __int128 v4 = *(_OWORD *)(a1 + 16);
  _OWORD *v2 = *(_OWORD *)a1;
  v2[1] = v4;
  *((void *)v2 + 10) = 0LL;
  *((void *)v2 + 11) = 0LL;
  os_log_type_t v5 = *(const void **)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  *((void *)v2 + 9) = 0LL;
  sub_100310750((void *)v2 + 9, v5, v6, 0x6DB6DB6DB6DB6DB7LL * ((v6 - (uint64_t)v5) >> 3));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_100311358;
  void v8[3] = &unk_10181D3D0;
  v8[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v8,  0LL,  96LL);
}

void sub_100311344(_Unwind_Exception *a1)
{
}

void sub_100311358(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = v2;
      operator delete(v2);
    }

    operator delete(v1);
  }

char *sub_100311398(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  id v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7LL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      _OWORD v7[2] = 0LL;
    }

    if (a4 > 0x492492492492492LL) {
      sub_100007008();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7LL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x249249249249249LL) {
      unint64_t v12 = 0x492492492492492LL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_10010EEB0(v7, v12);
    __int16 v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    id v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  unint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (_BYTE *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7LL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    id v9 = (char *)*v13;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

double sub_1003114F0()
{
  double v0 = (double)(int)[&off_1018D3188 intValue] * 0.625;
  double result = v0 + (double)(int)[&off_1018D31A0 intValue] * 0.625;
  *(double *)&qword_101994260 = result;
  return result;
}

double sub_100311540(uint64_t a1)
{
  double v2 = sub_101171D4C();
  return sub_100311564(a1, v2);
}

double sub_100311564(uint64_t a1, double a2)
{
  __int128 v3 = (_OWORD *)(a1 + 160);
  if (*(_BYTE *)(a1 + 160))
  {
    int v5 = *(_DWORD *)(a1 + 240);
    __int128 v6 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 888) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 904) = v6;
    *(_OWORD *)(a1 + 916) = *(_OWORD *)(a1 + 220);
    __int128 v7 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 856) = *v3;
    *(_OWORD *)(a1 + 872) = v7;
    *(_DWORD *)(a1 + 936) = v5;
    sub_10004C5F8( (char *)(a1 + 944),  *(char **)(a1 + 248),  *(void *)(a1 + 256),  (uint64_t)(*(void *)(a1 + 256) - *(void *)(a1 + 248)) >> 2);
    __int128 v8 = *(_OWORD *)(a1 + 448);
    *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a1 + 432);
    *(_OWORD *)(a1 + 1144) = v8;
    *(_OWORD *)(a1 + 1156) = *(_OWORD *)(a1 + 460);
    __int128 v9 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)(a1 + 1064) = *(_OWORD *)(a1 + 368);
    *(_OWORD *)(a1 + 1080) = v9;
    __int128 v10 = *(_OWORD *)(a1 + 416);
    *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a1 + 400);
    *(_OWORD *)(a1 + 1112) = v10;
    __int128 v11 = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a1 + 1000) = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a1 + 1016) = v11;
    __int128 v12 = *(_OWORD *)(a1 + 352);
    *(_OWORD *)(a1 + 10memset(&buf[7], 0, 32) = *(_OWORD *)(a1 + 336);
    *(_OWORD *)(a1 + 1048) = v12;
    __int128 v13 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)(a1 + 968) = *(_OWORD *)(a1 + 272);
    *(_OWORD *)(a1 + 984) = v13;
    std::string::operator=((std::string *)(a1 + 1176), (const std::string *)(a1 + 480));
    __int128 v14 = *(_OWORD *)(a1 + 600);
    *(_OWORD *)(a1 + 1312) = *(_OWORD *)(a1 + 616);
    __int128 v15 = *(_OWORD *)(a1 + 648);
    *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a1 + 632);
    *(_OWORD *)(a1 + 1344) = v15;
    __int128 v17 = *(_OWORD *)(a1 + 568);
    __int128 v16 = *(_OWORD *)(a1 + 584);
    *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a1 + 664);
    *(_OWORD *)(a1 + 1280) = v16;
    *(_OWORD *)(a1 + 1sub_10000AE14(v1 + 296) = v14;
    __int128 v18 = *(_OWORD *)(a1 + 520);
    *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a1 + 504);
    *(_OWORD *)(a1 + 1216) = v18;
    __int128 v19 = *(_OWORD *)(a1 + 536);
    *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a1 + 552);
    *(_OWORD *)(a1 + 1264) = v17;
    *(_OWORD *)(a1 + 12memset(&buf[7], 0, 32) = v19;
    __int128 v20 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a1 + 1496) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 1512) = v20;
    *(_OWORD *)(a1 + 1528) = *(_OWORD *)(a1 + 832);
    *(_DWORD *)(a1 + 1544) = *(_DWORD *)(a1 + 848);
    __int128 v21 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a1 + 14memset(&buf[7], 0, 32) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a1 + 1448) = v21;
    __int128 v22 = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a1 + 1480) = v22;
    __int128 v23 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)(a1 + 1368) = *(_OWORD *)(a1 + 672);
    *(_OWORD *)(a1 + 1384) = v23;
    __int128 v24 = *(_OWORD *)(a1 + 720);
    *(_OWORD *)(a1 + 1400) = *(_OWORD *)(a1 + 704);
    *(_OWORD *)(a1 + 1416) = v24;
    *(double *)(a1 + 2248) = a2;
  }

  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 88) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  return sub_100311704((uint64_t)v3);
}

double sub_100311704(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  sub_100313598((uint64_t)__p);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)__p;
  double v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

  __int128 v3 = 0LL;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&__p[8];
  *(void *)(a1 + 104) = v19;
  *(void *)&__p[16] = 0LL;
  uint64_t v19 = 0LL;
  *(void *)&__p[8] = 0LL;
  __int128 v4 = v31[0];
  *(_OWORD *)(a1 + 272) = v30;
  *(_OWORD *)(a1 + 288) = v4;
  __int128 v5 = v27;
  *(_OWORD *)(a1 + 208) = v26;
  *(_OWORD *)(a1 + 224) = v5;
  __int128 v6 = v29;
  *(_OWORD *)(a1 + 240) = v28;
  *(_OWORD *)(a1 + 256) = v6;
  __int128 v7 = v23;
  *(_OWORD *)(a1 + 144) = v22;
  *(_OWORD *)(a1 + 160) = v7;
  __int128 v8 = v25;
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = v8;
  __int128 v9 = v21;
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 300) = *(_OWORD *)((char *)v31 + 12);
  __int128 v10 = (void **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
  {
    operator delete(*v10);
    __int128 v3 = *(void **)&__p[8];
  }

  *(_OWORD *)__int128 v10 = v32;
  *(void *)(a1 + 336) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(vmemset(&buf[7], 0, 32) = 0;
  *(_DWORD *)(a1 + 504) = v44;
  __int128 v11 = v43;
  *(_OWORD *)(a1 + 472) = v42;
  *(_OWORD *)(a1 + 488) = v11;
  __int128 v12 = v39;
  *(_OWORD *)(a1 + 408) = v38;
  *(_OWORD *)(a1 + 424) = v12;
  __int128 v13 = v41;
  *(_OWORD *)(a1 + 440) = v40;
  *(_OWORD *)(a1 + 456) = v13;
  __int128 v14 = v35;
  *(_OWORD *)(a1 + 344) = v34;
  *(_OWORD *)(a1 + 360) = v14;
  __int128 v15 = v37;
  *(_OWORD *)(a1 + 376) = v36;
  *(_OWORD *)(a1 + 392) = v15;
  if (v3)
  {
    *(void *)&__p[16] = v3;
    operator delete(v3);
  }

  *(void *)&__int128 v16 = -1LL;
  *((void *)&v16 + 1) = -1LL;
  *(_OWORD *)(a1 + 28) = v16;
  *(_OWORD *)(a1 + 12) = v16;
  *(_OWORD *)&__p[4] = 0uLL;
  *(void *)(a1 + 512) = -1LL;
  *(void *)(a1 + 520) = -1LL;
  *(void *)(a1 + 528) = -1LL;
  *(_DWORD *)(a1 + 536) = -1;
  *(_OWORD *)(a1 + 540) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 556) = *(_DWORD *)&__p[16];
  *(void *)(a1 + 560) = -1LL;
  *(void *)(a1 + 568) = -1LL;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_1012E6420;
  *(_OWORD *)(a1 + 60) = v16;
  *(_OWORD *)(a1 + 44) = v16;
  *(void *)&__p[12] = 0LL;
  *(void *)&__p[4] = 0LL;
  *(void *)(a1 + 600) = -1LL;
  *(_DWORD *)(a1 + 608) = -1;
  *(void *)(a1 + 616) = -1LL;
  *(void *)(a1 + 624) = -1LL;
  *(_DWORD *)(a1 + 6memset(&buf[7], 0, 32) = -1;
  *(_OWORD *)(a1 + 636) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 652) = *(_DWORD *)&__p[16];
  *(void *)(a1 + 656) = -1LL;
  *(void *)(a1 + 664) = -1LL;
  *(void *)(a1 + 672) = -1LL;
  double result = NAN;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(a1 + 688) = -1;
  return result;
}

uint64_t sub_1003118D4(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_1003118DC(uint64_t result)
{
  *(_BYTE *)(result + 2281) = 0;
  return result;
}

void sub_1003118E4(uint64_t a1, int a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018324F0);
  }
  __int128 v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLCellLocationRefresh::setAirplaneMode(%{public}d)",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CLCellLocationRefresh::setAirplaneMode(%{public}d)",  v8,  8);
    __int128 v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLCellLocationRefresh::setAirplaneMode(BOOL)", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  double v5 = sub_101171D4C();
  sub_100311AA0(a1, v5, a2);
}

void sub_100311AA0(uint64_t a1, double a2, int a3)
{
  if (*(unsigned __int8 *)(a1 + 2256) != a3)
  {
    *(_BYTE *)(a1 + 2256) = a3;
    if (a3) {
      sub_100311AC0(a1, a2);
    }
    else {
      sub_100311F30(a1, a2);
    }
  }

void sub_100311AC0(uint64_t a1, double a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018324F0);
  }
  __int128 v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLCellLocationRefresh::enableAirplaneMode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    v32[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CLCellLocationRefresh::enableAirplaneMode",  v32,  2);
    __int128 v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellLocationRefresh::enableAirplaneModeContext(CFTimeInterval)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  *(void *)(a1 + 2272) = 0LL;
  sub_100313294(a1, (uint64_t)buf, a2);
  __int128 v5 = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1568) = v34;
  __int128 v6 = v36[0];
  *(_OWORD *)(a1 + 1584) = v35;
  *(_OWORD *)(a1 + 1600) = v6;
  *(_OWORD *)(a1 + 1552) = v5;
  *(_OWORD *)(a1 + 1612) = *(_OWORD *)((char *)v36 + 12);
  *(_DWORD *)(a1 + 16memset(&buf[7], 0, 32) = v37;
  __int128 v7 = *(void **)(a1 + 1640);
  if (v7)
  {
    *(void *)(a1 + 1648) = v7;
    operator delete(v7);
  }

  __int128 v8 = 0LL;
  *(_OWORD *)(a1 + 1640) = *(_OWORD *)__p;
  __int128 v9 = v48;
  *(_OWORD *)(a1 + 1808) = v49;
  __int128 v10 = v51[0];
  *(_OWORD *)(a1 + 1824) = v50;
  *(_OWORD *)(a1 + 1840) = v10;
  __int128 v11 = v44;
  *(_OWORD *)(a1 + 1744) = v45;
  __int128 v12 = v47;
  *(_OWORD *)(a1 + 1760) = v46;
  *(_OWORD *)(a1 + 1776) = v12;
  *(_OWORD *)(a1 + sub_10000AE14(v1 + 1792) = v9;
  __int128 v13 = v40;
  *(_OWORD *)(a1 + 1680) = v41;
  __int128 v14 = v43;
  *(_OWORD *)(a1 + 1696) = v42;
  *(_OWORD *)(a1 + 1712) = v14;
  *(_OWORD *)(a1 + 1728) = v11;
  *(void *)(a1 + 1656) = v39;
  __p[1] = 0LL;
  uint64_t v39 = 0LL;
  __p[0] = 0LL;
  *(_OWORD *)(a1 + 1664) = v13;
  *(_OWORD *)(a1 + 1852) = *(_OWORD *)((char *)v51 + 12);
  __int128 v15 = (void **)(a1 + 1872);
  if (*(char *)(a1 + 1895) < 0)
  {
    operator delete(*v15);
    __int128 v8 = __p[0];
  }

  *(_OWORD *)__int128 v15 = v52;
  __int128 v16 = v63;
  *(_OWORD *)(a1 + 2024) = v62;
  *(_OWORD *)(a1 + 2040) = v16;
  __int128 v17 = v59;
  *(_OWORD *)(a1 + 1960) = v58;
  *(_OWORD *)(a1 + 1976) = v17;
  __int128 v18 = v61;
  *(_OWORD *)(a1 + 1sub_10000AE14(v1 + 992) = v60;
  *(_OWORD *)(a1 + 2008) = v18;
  __int128 v19 = v55;
  *(_OWORD *)(a1 + 1896) = v54;
  *(_OWORD *)(a1 + sub_10000AE14(v1 + 1912) = v19;
  __int128 v20 = v57;
  *(_OWORD *)(a1 + 1928) = v56;
  *(_OWORD *)(a1 + 1944) = v20;
  __int128 v21 = v74;
  *(_OWORD *)(a1 + 2192) = v73;
  *(_OWORD *)(a1 + 2208) = v21;
  *(_OWORD *)(a1 + 2224) = v75;
  __int128 v22 = v70;
  *(_OWORD *)(a1 + 2128) = v69;
  *(_OWORD *)(a1 + 2144) = v22;
  __int128 v23 = v72;
  *(_OWORD *)(a1 + 2160) = v71;
  *(_OWORD *)(a1 + 2176) = v23;
  __int128 v24 = v66;
  *(_OWORD *)(a1 + 2064) = v65;
  *(_OWORD *)(a1 + 2080) = v24;
  __int128 v25 = v68;
  *(_OWORD *)(a1 + 2096) = v67;
  *(void *)(a1 + 1888) = v53;
  HIBYTE(v53) = 0;
  LOBYTE(v52) = 0;
  *(_DWORD *)(a1 + 2056) = v64;
  *(_DWORD *)(a1 + 2240) = v76;
  *(_OWORD *)(a1 + 2112) = v25;
  if (v8)
  {
    __p[1] = v8;
    operator delete(v8);
  }

  if (*(_BYTE *)(a1 + 1552))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    __int128 v26 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "CLCellLocationRefresh::enableAirplaneMode: marking the mach continuous time.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018324F0);
      }
      v32[0] = 0;
      LODWORD(v31) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CLCellLocationRefresh::enableAirplaneMode: marking the mach continuous time.",  v32,  v31);
      __int128 v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellLocationRefresh::enableAirplaneModeContext(CFTimeInterval)",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    *(double *)(a1 + 2272) = a2;
  }

void sub_100311F30(uint64_t a1, double a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018324F0);
  }
  __int128 v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLCellLocationRefresh::disableAirplaneMode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CLCellLocationRefresh::disableAirplaneMode",  &v17,  2);
    __int128 v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellLocationRefresh::disableAirplaneModeContext(CFTimeInterval)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  if (*(_BYTE *)(a1 + 1552))
  {
    double v5 = *(double *)(a1 + 2272);
    if (v5 > 0.0 && v5 < a2)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018324F0);
      }
      double v7 = a2 - v5;
      __int128 v8 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134349056;
        double v20 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "CLCellLocationRefresh::disableAirplaneMode: airplane mode duration %{public}f secs",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_1018324F0);
        }
        int v17 = 134349056;
        double v18 = v7;
        LODWORD(v16) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CLCellLocationRefresh::disableAirplaneMode: airplane mode duration %{public}f secs",  &v17,  v16);
        __int128 v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellLocationRefresh::disableAirplaneModeContext(CFTimeInterval)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      if (v7 >= 1200.0)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_1018324F0);
        }
        __int128 v9 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CLCellLocationRefresh::disableAirplaneMode: ignoring previous cell location before airplane mode.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_1018324F0);
          }
          LOWORD(v17) = 0;
          LODWORD(v16) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CLCellLocationRefresh::disableAirplaneMode: ignoring previous cell location before airplane mode.",  &v17,  v16);
          __int128 v15 = (uint8_t *)v14;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellLocationRefresh::disableAirplaneModeContext(CFTimeInterval)",  "%s\n",  v14);
          if (v15 != buf) {
            free(v15);
          }
        }

        *(_BYTE *)(a1 + 2280) = 1;
        *(double *)(a1 + 2264) = a2;
      }
    }
  }

void sub_10031236C(uint64_t a1)
{
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v11)
  {
    __int128 v12 = v11;
    operator delete(v11);
  }

  if (v10 < 0) {
    operator delete(v9);
  }
  if (v7)
  {
    __int128 v8 = v7;
    operator delete(v7);
  }

  if (v6 < 0) {
    operator delete(v5);
  }
  if (v3)
  {
    __int128 v4 = v3;
    operator delete(v3);
  }

uint64_t sub_100312410(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0LL;
  *(void *)(a1 + 4) = 0LL;
  *(_OWORD *)(a1 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 88) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  sub_100F585F8(a1 + 160);
  sub_100F585F8(a1 + 856);
  sub_100F585F8(a1 + 1552);
  *(void *)(a1 + 2248) = 0LL;
  *(_BYTE *)(a1 + 2256) = 0;
  *(_WORD *)(a1 + 2280) = 0;
  *(_OWORD *)(a1 + 2264) = 0u;
  return a1;
}

void sub_1003124B8(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)(v1 + 944);
  if (v3)
  {
    *(void *)(v1 + 952) = v3;
    operator delete(v3);
  }

  __int128 v4 = *(void **)(v1 + 248);
  if (v4)
  {
    *(void *)(v1 + 256) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10031250C(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + memset(&buf[7], 0, 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  __int128 v8 = *(_OWORD *)(a2 + 96);
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  __int128 v11 = *(_OWORD *)(a2 + 176);
  __int128 v12 = *(_OWORD *)(a2 + 192);
  __int128 v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 176) = v11;
  char v14 = (_OWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  uint64_t v15 = a1 + 240;
  sub_100007664(a1 + 248, (__n128 *)(a2 + 248));
  *(_OWORD *)(v15 + memset(&buf[7], 0, 32) = v14[2];
  __int128 v16 = v14[3];
  __int128 v17 = v14[4];
  __int128 v18 = v14[6];
  *(_OWORD *)(v15 + 80) = v14[5];
  *(_OWORD *)(v15 + 96) = v18;
  *(_OWORD *)(v15 + 48) = v16;
  *(_OWORD *)(v15 + 64) = v17;
  __int128 v19 = v14[7];
  __int128 v20 = v14[8];
  __int128 v21 = v14[10];
  *(_OWORD *)(v15 + 144) = v14[9];
  *(_OWORD *)(v15 + 160) = v21;
  *(_OWORD *)(v15 + 112) = v19;
  *(_OWORD *)(v15 + 128) = v20;
  __int128 v22 = v14[11];
  __int128 v23 = v14[12];
  __int128 v24 = v14[13];
  *(_OWORD *)(v15 + 220) = *(_OWORD *)((char *)v14 + 220);
  *(_OWORD *)(v15 + 192) = v23;
  *(_OWORD *)(v15 + 208) = v24;
  *(_OWORD *)(v15 + 176) = v22;
  __int128 v25 = (void **)(v15 + 240);
  __int128 v26 = *(_OWORD *)(a2 + 480);
  *(void *)(v15 + 256) = *(void *)(a2 + 496);
  *(_OWORD *)__int128 v25 = v26;
  *(_BYTE *)(a2 + 503) = 0;
  *(_BYTE *)(a2 + 480) = 0;
  __int128 v28 = *(_OWORD *)(a2 + 584);
  __int128 v27 = *(_OWORD *)(a2 + 600);
  __int128 v29 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = v29;
  *(_OWORD *)(a1 + 584) = v28;
  *(_OWORD *)(a1 + 600) = v27;
  __int128 v31 = *(_OWORD *)(a2 + 520);
  __int128 v30 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = v31;
  *(_OWORD *)(a1 + 536) = v30;
  __int128 v32 = *(_OWORD *)(a2 + 616);
  __int128 v33 = *(_OWORD *)(a2 + 632);
  __int128 v34 = *(_OWORD *)(a2 + 648);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 6memset(&buf[7], 0, 32) = v33;
  *(_OWORD *)(a1 + 648) = v34;
  *(_OWORD *)(a1 + 616) = v32;
  __int128 v35 = *(_OWORD *)(a2 + 672);
  __int128 v36 = *(_OWORD *)(a2 + 688);
  __int128 v37 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v37;
  *(_OWORD *)(a1 + 672) = v35;
  *(_OWORD *)(a1 + 688) = v36;
  __int128 v38 = *(_OWORD *)(a2 + 736);
  __int128 v39 = *(_OWORD *)(a2 + 752);
  __int128 v40 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v40;
  *(_OWORD *)(a1 + 736) = v38;
  *(_OWORD *)(a1 + 752) = v39;
  __int128 v41 = *(_OWORD *)(a2 + 800);
  __int128 v42 = *(_OWORD *)(a2 + 816);
  __int128 v43 = *(_OWORD *)(a2 + 832);
  *(_DWORD *)(a1 + 848) = *(_DWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 816) = v42;
  *(_OWORD *)(a1 + 8memset(&buf[7], 0, 32) = v43;
  *(_OWORD *)(a1 + 800) = v41;
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  __int128 v44 = *(_OWORD *)(a2 + 872);
  __int128 v45 = *(_OWORD *)(a2 + 888);
  __int128 v46 = *(_OWORD *)(a2 + 904);
  *(_OWORD *)(a1 + 916) = *(_OWORD *)(a2 + 916);
  *(_OWORD *)(a1 + 888) = v45;
  *(_OWORD *)(a1 + 904) = v46;
  *(_OWORD *)(a1 + 872) = v44;
  *(_DWORD *)(a1 + 936) = *(_DWORD *)(a2 + 936);
  sub_100007664(a1 + 944, (__n128 *)(a2 + 944));
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 968);
  __int128 v47 = *(_OWORD *)(a2 + 984);
  __int128 v48 = *(_OWORD *)(a2 + 1000);
  __int128 v49 = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
  *(_OWORD *)(a1 + 10memset(&buf[7], 0, 32) = v49;
  *(_OWORD *)(a1 + 984) = v47;
  *(_OWORD *)(a1 + 1000) = v48;
  __int128 v50 = *(_OWORD *)(a2 + 1048);
  __int128 v51 = *(_OWORD *)(a2 + 1064);
  __int128 v52 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1096) = v52;
  *(_OWORD *)(a1 + 1048) = v50;
  *(_OWORD *)(a1 + 1064) = v51;
  __int128 v53 = *(_OWORD *)(a2 + 1112);
  __int128 v54 = *(_OWORD *)(a2 + 1128);
  __int128 v55 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1156) = *(_OWORD *)(a2 + 1156);
  *(_OWORD *)(a1 + 1128) = v54;
  *(_OWORD *)(a1 + 1144) = v55;
  *(_OWORD *)(a1 + 1112) = v53;
  __int128 v56 = (void **)(a1 + 1176);
  __int128 v57 = *(_OWORD *)(a2 + 1176);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(_OWORD *)__int128 v56 = v57;
  *(_BYTE *)(a2 + 1199) = 0;
  *(_BYTE *)(a2 + 1176) = 0;
  __int128 v58 = *(_OWORD *)(a2 + 1296);
  __int128 v59 = *(_OWORD *)(a2 + 1280);
  __int128 v60 = *(_OWORD *)(a2 + 1264);
  *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
  *(_OWORD *)(a1 + 1264) = v60;
  *(_OWORD *)(a1 + 1280) = v59;
  *(_OWORD *)(a1 + 1sub_10000AE14(v1 + 296) = v58;
  __int128 v61 = *(_OWORD *)(a2 + 1232);
  __int128 v62 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1216) = v62;
  *(_OWORD *)(a1 + 12memset(&buf[7], 0, 32) = v61;
  __int128 v63 = *(_OWORD *)(a2 + 1312);
  __int128 v64 = *(_OWORD *)(a2 + 1328);
  __int128 v65 = *(_OWORD *)(a2 + 1344);
  *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a2 + 1360);
  *(_OWORD *)(a1 + 1344) = v65;
  *(_OWORD *)(a1 + 1328) = v64;
  *(_OWORD *)(a1 + 1312) = v63;
  __int128 v66 = *(_OWORD *)(a2 + 1368);
  __int128 v67 = *(_OWORD *)(a2 + 1384);
  __int128 v68 = *(_OWORD *)(a2 + 1416);
  *(_OWORD *)(a1 + 1400) = *(_OWORD *)(a2 + 1400);
  *(_OWORD *)(a1 + 1416) = v68;
  *(_OWORD *)(a1 + 1368) = v66;
  *(_OWORD *)(a1 + 1384) = v67;
  __int128 v69 = *(_OWORD *)(a2 + 1432);
  __int128 v70 = *(_OWORD *)(a2 + 1448);
  __int128 v71 = *(_OWORD *)(a2 + 1480);
  *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 1480) = v71;
  *(_OWORD *)(a1 + 14memset(&buf[7], 0, 32) = v69;
  *(_OWORD *)(a1 + 1448) = v70;
  __int128 v72 = *(_OWORD *)(a2 + 1496);
  __int128 v73 = *(_OWORD *)(a2 + 1512);
  __int128 v74 = *(_OWORD *)(a2 + 1528);
  *(_DWORD *)(a1 + 1544) = *(_DWORD *)(a2 + 1544);
  *(_OWORD *)(a1 + 1512) = v73;
  *(_OWORD *)(a1 + 1528) = v74;
  *(_OWORD *)(a1 + 1496) = v72;
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
  __int128 v75 = *(_OWORD *)(a2 + 1568);
  __int128 v76 = *(_OWORD *)(a2 + 1584);
  __int128 v77 = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1612) = *(_OWORD *)(a2 + 1612);
  *(_OWORD *)(a1 + 1600) = v77;
  *(_OWORD *)(a1 + 1584) = v76;
  *(_OWORD *)(a1 + 1568) = v75;
  *(_DWORD *)(a1 + 16memset(&buf[7], 0, 32) = *(_DWORD *)(a2 + 1632);
  sub_100007664(a1 + 1640, (__n128 *)(a2 + 1640));
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 1664);
  __int128 v78 = *(_OWORD *)(a2 + 1680);
  __int128 v79 = *(_OWORD *)(a2 + 1696);
  __int128 v80 = *(_OWORD *)(a2 + 1712);
  *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
  *(_OWORD *)(a1 + 1712) = v80;
  *(_OWORD *)(a1 + 1696) = v79;
  *(_OWORD *)(a1 + 1680) = v78;
  __int128 v81 = *(_OWORD *)(a2 + 1744);
  __int128 v82 = *(_OWORD *)(a2 + 1760);
  __int128 v83 = *(_OWORD *)(a2 + 1776);
  *(_OWORD *)(a1 + sub_10000AE14(v1 + 1792) = *(_OWORD *)(a2 + 1792);
  *(_OWORD *)(a1 + 1776) = v83;
  *(_OWORD *)(a1 + 1760) = v82;
  *(_OWORD *)(a1 + 1744) = v81;
  __int128 v84 = *(_OWORD *)(a2 + 1808);
  __int128 v85 = *(_OWORD *)(a2 + 1824);
  __int128 v86 = *(_OWORD *)(a2 + 1840);
  *(_OWORD *)(a1 + 1852) = *(_OWORD *)(a2 + 1852);
  *(_OWORD *)(a1 + 1840) = v86;
  *(_OWORD *)(a1 + 1824) = v85;
  *(_OWORD *)(a1 + 1808) = v84;
  int v87 = (void **)(a1 + 1872);
  __int128 v88 = *(_OWORD *)(a2 + 1872);
  *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
  *(_OWORD *)int v87 = v88;
  *(_BYTE *)(a2 + 1895) = 0;
  *(_BYTE *)(a2 + 1872) = 0;
  __int128 v90 = *(_OWORD *)(a2 + 1976);
  __int128 v89 = *(_OWORD *)(a2 + 1992);
  __int128 v91 = *(_OWORD *)(a2 + 1960);
  *(_OWORD *)(a1 + 1944) = *(_OWORD *)(a2 + 1944);
  *(_OWORD *)(a1 + 1960) = v91;
  *(_OWORD *)(a1 + 1976) = v90;
  *(_OWORD *)(a1 + 1sub_10000AE14(v1 + 992) = v89;
  __int128 v93 = *(_OWORD *)(a2 + 1912);
  __int128 v92 = *(_OWORD *)(a2 + 1928);
  *(_OWORD *)(a1 + 1896) = *(_OWORD *)(a2 + 1896);
  *(_OWORD *)(a1 + sub_10000AE14(v1 + 1912) = v93;
  *(_OWORD *)(a1 + 1928) = v92;
  __int128 v94 = *(_OWORD *)(a2 + 2008);
  __int128 v95 = *(_OWORD *)(a2 + 2024);
  __int128 v96 = *(_OWORD *)(a2 + 2040);
  *(_DWORD *)(a1 + 2056) = *(_DWORD *)(a2 + 2056);
  *(_OWORD *)(a1 + 2024) = v95;
  *(_OWORD *)(a1 + 2040) = v96;
  *(_OWORD *)(a1 + 2008) = v94;
  __int128 v97 = *(_OWORD *)(a2 + 2064);
  __int128 v98 = *(_OWORD *)(a2 + 2080);
  __int128 v99 = *(_OWORD *)(a2 + 2096);
  *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a2 + 2112);
  *(_OWORD *)(a1 + 2096) = v99;
  *(_OWORD *)(a1 + 2080) = v98;
  *(_OWORD *)(a1 + 2064) = v97;
  __int128 v100 = *(_OWORD *)(a2 + 2128);
  __int128 v101 = *(_OWORD *)(a2 + 2144);
  __int128 v102 = *(_OWORD *)(a2 + 2160);
  *(_OWORD *)(a1 + 2176) = *(_OWORD *)(a2 + 2176);
  *(_OWORD *)(a1 + 2160) = v102;
  *(_OWORD *)(a1 + 2144) = v101;
  *(_OWORD *)(a1 + 2128) = v100;
  __int128 v103 = *(_OWORD *)(a2 + 2192);
  __int128 v104 = *(_OWORD *)(a2 + 2208);
  __int128 v105 = *(_OWORD *)(a2 + 2224);
  *(_DWORD *)(a1 + 2240) = *(_DWORD *)(a2 + 2240);
  *(_OWORD *)(a1 + 2224) = v105;
  *(_OWORD *)(a1 + 2208) = v104;
  *(_OWORD *)(a1 + 2192) = v103;
  __int128 v106 = *(_OWORD *)(a2 + 2248);
  __int128 v107 = *(_OWORD *)(a2 + 2264);
  *(_WORD *)(a1 + 2280) = *(_WORD *)(a2 + 2280);
  *(_OWORD *)(a1 + 2248) = v106;
  *(_OWORD *)(a1 + 2264) = v107;
  return a1;
}

uint64_t sub_100312968(uint64_t a1, uint64_t a2, _OWORD *a3, double a4)
{
  double v7 = a4 - *(double *)(a1 + 2264);
  if (!*(_BYTE *)(a1 + 2280) || (v7 > 0.0 ? (BOOL v8 = v7 < 2.0) : (BOOL v8 = 0), !v8))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018324F0);
    }
    __int128 v10 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(unsigned __int8 *)(a1 + 2280);
      *(_DWORD *)std::string buf = 67240448;
      LODWORD(v76) = v11;
      WORD2(v76) = 2050;
      *(double *)((char *)&v76 + 6) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CellFlow, updateCellRefreshResults, fWaitForNewCellAfterAirplaneMode, %{public}d, airplaneModeDisableAgeSecs, %{public}f",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018324F0);
      }
      int v62 = *(unsigned __int8 *)(a1 + 2280);
      int v71 = 67240448;
      LODWORD(v72) = v62;
      WORD2(v72) = 2050;
      *(double *)((char *)&v72 + 6) = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "CellFlow, updateCellRefreshResults, fWaitForNewCellAfterAirplaneMode, %{public}d, airplaneModeDisableAgeSecs, %{public}f",  &v71,  18);
      __int128 v64 = (uint8_t *)v63;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)",  "%s\n",  v63);
      if (v64 != buf) {
        free(v64);
      }
    }

NSDictionary *sub_100313184(uint64_t a1)
{
  double v2 = @"skipPreviousCellAfterAirplaneModeDisableAgeSecs";
  __int128 v3 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v3,  &v2,  1LL);
}

BOOL sub_100313204(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 4) == *(double *)(a2 + 4)
      && *(double *)(a1 + 28) == *(double *)(a2 + 28)
}

uint64_t sub_100313258(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double v6 = sub_101171D4C();
  return sub_100312968(a1, a2, a3, v6);
}

_BYTE *sub_100313294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (*(_BYTE *)(a1 + 160))
  {
    __int128 v5 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a2 + memset(&buf[7], 0, 32) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 220);
    __int128 v6 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 240);
    *(void *)(a2 + 88) = 0LL;
    double v7 = *(const void **)(a1 + 248);
    uint64_t v8 = *(void *)(a1 + 256);
    *(void *)(a2 + 96) = 0LL;
    *(void *)(a2 + 104) = 0LL;
    sub_10001B72C((void *)(a2 + 88), v7, v8, (v8 - (uint64_t)v7) >> 2);
    __int128 v9 = *(_OWORD *)(a1 + 448);
    *(_OWORD *)(a2 + 272) = *(_OWORD *)(a1 + 432);
    *(_OWORD *)(a2 + 288) = v9;
    *(_OWORD *)(a2 + 300) = *(_OWORD *)(a1 + 460);
    __int128 v10 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 368);
    *(_OWORD *)(a2 + 224) = v10;
    __int128 v11 = *(_OWORD *)(a1 + 416);
    *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 400);
    *(_OWORD *)(a2 + 256) = v11;
    __int128 v12 = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a2 + 160) = v12;
    __int128 v13 = *(_OWORD *)(a1 + 352);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 336);
    *(_OWORD *)(a2 + 192) = v13;
    __int128 v14 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 272);
    *(_OWORD *)(a2 + 128) = v14;
    double result = (_BYTE *)(a2 + 320);
    if (*(char *)(a1 + 503) < 0)
    {
      double result = sub_1010DD48C(result, *(void **)(a1 + 480), *(void *)(a1 + 488));
    }

    else
    {
      *(_OWORD *)double result = *(_OWORD *)(a1 + 480);
      *(void *)(a2 + 336) = *(void *)(a1 + 496);
    }

    *(_DWORD *)(a2 + 504) = *(_DWORD *)(a1 + 664);
    __int128 v19 = *(_OWORD *)(a1 + 648);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a1 + 632);
    *(_OWORD *)(a2 + 488) = v19;
    __int128 v20 = *(_OWORD *)(a1 + 584);
    *(_OWORD *)(a2 + 408) = *(_OWORD *)(a1 + 568);
    *(_OWORD *)(a2 + 424) = v20;
    __int128 v21 = *(_OWORD *)(a1 + 616);
    *(_OWORD *)(a2 + 440) = *(_OWORD *)(a1 + 600);
    *(_OWORD *)(a2 + 456) = v21;
    __int128 v22 = *(_OWORD *)(a1 + 520);
    *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 504);
    *(_OWORD *)(a2 + 360) = v22;
    __int128 v23 = *(_OWORD *)(a1 + 552);
    *(_OWORD *)(a2 + 376) = *(_OWORD *)(a1 + 536);
    *(_OWORD *)(a2 + 392) = v23;
    __int128 v24 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a2 + 640) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a2 + 656) = v24;
    *(_OWORD *)(a2 + 672) = *(_OWORD *)(a1 + 832);
    *(_DWORD *)(a2 + 688) = *(_DWORD *)(a1 + 848);
    __int128 v25 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a2 + 576) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a2 + 592) = v25;
    __int128 v26 = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a2 + 608) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a2 + 624) = v26;
    __int128 v27 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)(a2 + 512) = *(_OWORD *)(a1 + 672);
    *(_OWORD *)(a2 + 528) = v27;
    __int128 v28 = *(_OWORD *)(a1 + 704);
    __int128 v29 = *(_OWORD *)(a1 + 720);
  }

  else
  {
    if (!*(_BYTE *)(a1 + 856)) {
      return (_BYTE *)sub_100F585F8(a2);
    }
    if (a3 < 0.0) {
      return (_BYTE *)sub_100F585F8(a2);
    }
    double v16 = *(double *)(a1 + 2248);
    if (v16 < 0.0) {
      return (_BYTE *)sub_100F585F8(a2);
    }
    double v17 = a3 - v16;
    if (v17 < 0.0 || v17 > 60.0) {
      return (_BYTE *)sub_100F585F8(a2);
    }
    __int128 v30 = *(_OWORD *)(a1 + 904);
    *(_OWORD *)(a2 + memset(&buf[7], 0, 32) = *(_OWORD *)(a1 + 888);
    *(_OWORD *)(a2 + 48) = v30;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 916);
    __int128 v31 = *(_OWORD *)(a1 + 872);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 856);
    *(_OWORD *)(a2 + 16) = v31;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 936);
    *(void *)(a2 + 88) = 0LL;
    __int128 v32 = *(const void **)(a1 + 944);
    uint64_t v33 = *(void *)(a1 + 952);
    *(void *)(a2 + 96) = 0LL;
    *(void *)(a2 + 104) = 0LL;
    sub_10001B72C((void *)(a2 + 88), v32, v33, (v33 - (uint64_t)v32) >> 2);
    __int128 v34 = *(_OWORD *)(a1 + 1144);
    *(_OWORD *)(a2 + 272) = *(_OWORD *)(a1 + 1128);
    *(_OWORD *)(a2 + 288) = v34;
    *(_OWORD *)(a2 + 300) = *(_OWORD *)(a1 + 1156);
    __int128 v35 = *(_OWORD *)(a1 + 1080);
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 1064);
    *(_OWORD *)(a2 + 224) = v35;
    __int128 v36 = *(_OWORD *)(a1 + 1112);
    *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 1096);
    *(_OWORD *)(a2 + 256) = v36;
    __int128 v37 = *(_OWORD *)(a1 + 1016);
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 1000);
    *(_OWORD *)(a2 + 160) = v37;
    __int128 v38 = *(_OWORD *)(a1 + 1048);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 1032);
    *(_OWORD *)(a2 + 192) = v38;
    __int128 v39 = *(_OWORD *)(a1 + 984);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 968);
    *(_OWORD *)(a2 + 128) = v39;
    double result = (_BYTE *)(a2 + 320);
    if (*(char *)(a1 + 1199) < 0)
    {
      double result = sub_1010DD48C(result, *(void **)(a1 + 1176), *(void *)(a1 + 1184));
    }

    else
    {
      *(_OWORD *)double result = *(_OWORD *)(a1 + 1176);
      *(void *)(a2 + 336) = *(void *)(a1 + 1192);
    }

    __int128 v40 = *(_OWORD *)(a1 + 1312);
    __int128 v41 = *(_OWORD *)(a1 + 1344);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a1 + 1328);
    *(_OWORD *)(a2 + 488) = v41;
    *(_DWORD *)(a2 + 504) = *(_DWORD *)(a1 + 1360);
    __int128 v42 = *(_OWORD *)(a1 + 1248);
    __int128 v43 = *(_OWORD *)(a1 + 1280);
    *(_OWORD *)(a2 + 408) = *(_OWORD *)(a1 + 1264);
    *(_OWORD *)(a2 + 424) = v43;
    *(_OWORD *)(a2 + 440) = *(_OWORD *)(a1 + 1296);
    *(_OWORD *)(a2 + 456) = v40;
    __int128 v44 = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 1200);
    *(_OWORD *)(a2 + 360) = v44;
    *(_OWORD *)(a2 + 376) = *(_OWORD *)(a1 + 1232);
    *(_OWORD *)(a2 + 392) = v42;
    __int128 v45 = *(_OWORD *)(a1 + 1512);
    *(_OWORD *)(a2 + 640) = *(_OWORD *)(a1 + 1496);
    *(_OWORD *)(a2 + 656) = v45;
    *(_OWORD *)(a2 + 672) = *(_OWORD *)(a1 + 1528);
    *(_DWORD *)(a2 + 688) = *(_DWORD *)(a1 + 1544);
    __int128 v46 = *(_OWORD *)(a1 + 1448);
    *(_OWORD *)(a2 + 576) = *(_OWORD *)(a1 + 1432);
    *(_OWORD *)(a2 + 592) = v46;
    __int128 v47 = *(_OWORD *)(a1 + 1480);
    *(_OWORD *)(a2 + 608) = *(_OWORD *)(a1 + 1464);
    *(_OWORD *)(a2 + 624) = v47;
    __int128 v48 = *(_OWORD *)(a1 + 1384);
    *(_OWORD *)(a2 + 512) = *(_OWORD *)(a1 + 1368);
    *(_OWORD *)(a2 + 528) = v48;
    __int128 v28 = *(_OWORD *)(a1 + 1400);
    __int128 v29 = *(_OWORD *)(a1 + 1416);
  }

  *(_OWORD *)(a2 + 544) = v28;
  *(_OWORD *)(a2 + 560) = v29;
  return result;
}

void sub_100313578(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100313598(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + memset(&buf[7], 0, 32) = -1LL;
  *(void *)(a1 + 40) = -1LL;
  *(void *)(a1 + 48) = -1LL;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0xFFFF;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(_OWORD *)(a1 + 88) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 104) = _Q0;
  *(_OWORD *)(a1 + 120) = _Q0;
  __int128 v8 = _Q0;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 156) = 0xBFF0000000000000LL;
  *(void *)(a1 + 172) = 0LL;
  *(void *)(a1 + 164) = 0LL;
  *(_DWORD *)(a1 + 180) = 0;
  *(void *)(a1 + 184) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  *(void *)(a1 + 212) = 0LL;
  *(void *)(a1 + 196) = 0LL;
  *(void *)(a1 + 204) = 0LL;
  *(_BYTE *)(a1 + 220) = 0;
  *(void *)(a1 + 224) = 0x30000000BLL;
  *(_DWORD *)(a1 + 2memset(&buf[7], 0, 32) = -1;
  sub_1010DDBC0((void *)(a1 + 240), "");
  *(_DWORD *)(a1 + 264) = 0xFFFF;
  *(void *)(a1 + 276) = 0LL;
  *(void *)(a1 + 268) = 0LL;
  *(_OWORD *)(a1 + 284) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 300) = v8;
  *(_OWORD *)(a1 + 316) = v8;
  *(_OWORD *)(a1 + 3memset(&buf[7], 0, 32) = v8;
  *(_DWORD *)(a1 + 348) = 0;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 368) = 0LL;
  *(void *)(a1 + 352) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 380) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 388) = 0x7FFFFFFF;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 408) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  *(_BYTE *)(a1 + 416) = 0;
  *(void *)(a1 + 420) = -1LL;
  return a1;
}

void sub_1003136C8(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_1003136E4(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_BYTE *sub_100313710(_BYTE *__dst, _BYTE *a2, size_t a3)
{
  else {
    *std::string __dst = -1;
  }
  return __dst;
}

_BYTE *sub_10031377C(_BYTE *result, void *a2)
{
  if ((*result - 1) <= 3u) {
    return (_BYTE *)(*(uint64_t (**)(void *, _BYTE *))(*a2 + 8LL * (*result - 1) + 16))( a2,  result);
  }
  return result;
}

unsigned __int8 *sub_1003137B0(unsigned __int8 *a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_101832520;
  *((void *)a1 + 1) = off_1018326B8;
  *((void *)a1 + 2) = off_1018326F8;
  *((void *)a1 + 3) = off_101832728;
  *((void *)a1 + 4) = off_101832760;
  *((void *)a1 + 5) = a2;
  *((void *)a1 + 6) = *a3;
  uint64_t v4 = a1 + 48;
  uint64_t v5 = a3[1];
  *((void *)a1 + 7) = v5;
  if (v5)
  {
    __int128 v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *((void *)a1 + 9) = 0LL;
  *((void *)a1 + 8) = a1 + 72;
  __int128 v52 = a1 + 64;
  *((void *)a1 + 10) = 0LL;
  *((void *)a1 + 11) = 0LL;
  *((void *)a1 + 15) = 0LL;
  *((void *)a1 + 14) = a1 + 120;
  *((void *)a1 + 12) = 0LL;
  *((void *)a1 + 13) = 0LL;
  *((void *)a1 + 16) = 0LL;
  *(_OWORD *)(a1 + 136) = 0u;
  __int128 v49 = a1 + 136;
  __int128 v50 = a1 + 112;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *((_DWORD *)a1 + 46) = 0;
  *((_WORD *)a1 + 94) = 257;
  *((void *)a1 + 24) = 0x4FFFFFFFFLL;
  *((_DWORD *)a1 + 50) = 2;
  __int128 v8 = (int *)(a1 + 200);
  *((void *)a1 + 26) = 0xBFF0000000000000LL;
  *((_WORD *)a1 + 108) = 0;
  *((_DWORD *)a1 + 55) = 0;
  a1[224] = 0;
  *((_DWORD *)a1 + 57) = 0;
  *((_DWORD *)a1 + 58) = 0;
  *((_DWORD *)a1 + 59) = 25;
  __int128 v9 = (int *)(a1 + 236);
  *((void *)a1 + 31) = 0x40EFA40000000000LL;
  __int128 v10 = (double *)(a1 + 248);
  *((_WORD *)a1 + 128) = 0;
  *((void *)a1 + 33) = 0LL;
  __int128 v51 = a1 + 88;
  sub_10031415C((uint64_t)a1, (uint64_t)(a1 + 272));
  Init = (CLMotionActivity *)CLMotionActivity::getInit(v11);
  __int128 v13 = (CLMotionActivity *)CLMotionActivity::getInit(Init);
  CLMotionActivity::getInit(v13);
  *((_WORD *)a1 + 400) = 257;
  a1[802] = 0;
  *((void *)a1 + 101) = 0xBFF0000000000000LL;
  *((_DWORD *)a1 + 204) = 0xFFFF;
  *(void *)(a1 + 828) = 0LL;
  *(void *)(a1 + 820) = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 836) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 852) = _Q1;
  *(_OWORD *)(a1 + 868) = _Q1;
  *(_OWORD *)(a1 + 884) = _Q1;
  *((_DWORD *)a1 + 225) = 0;
  *((void *)a1 + 113) = 0xBFF0000000000000LL;
  *((void *)a1 + 115) = 0LL;
  *((void *)a1 + 114) = 0LL;
  *((_DWORD *)a1 + 2memset(&buf[7], 0, 32) = 0;
  *(void *)(a1 + 9memset(&buf[7], 0, 32) = 0xBFF0000000000000LL;
  *((_DWORD *)a1 + 235) = 0x7FFFFFFF;
  *((void *)a1 + 119) = 0LL;
  *((void *)a1 + 118) = 0LL;
  a1[968] = 0;
  *((void *)a1 + 120) = 0LL;
  *((_WORD *)a1 + 486) = 0;
  a1[974] = 0;
  *((int64x2_t *)a1 + 61) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((void *)a1 + 124) = 0LL;
  *((double *)a1 + 126) = (*(double (**)(unsigned __int8 *))(*(void *)a1 + 64LL))(a1);
  *((void *)a1 + 129) = 0LL;
  *((void *)a1 + 128) = 0LL;
  *((void *)a1 + 127) = a1 + 1024;
  *((_OWORD *)a1 + 65) = 0u;
  *((_OWORD *)a1 + 66) = 0u;
  a1[1072] = 0;
  sub_1002A3E28((uint64_t)(a1 + 1080), (uint64_t)a1);
  *((_WORD *)a1 + 604) = 0;
  a1[1210] = 0;
  memset(buf, 0, sizeof(buf));
  int v59 = 1065353216;
  sub_10031C1C8(out_token, 0xAuLL, (uint64_t)buf);
  __int128 v19 = (int *)(a1 + 196);
  sub_10031C334((void **)a1 + 11);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)out_token;
  *((void *)a1 + 13) = v56;
  uint64_t v56 = 0LL;
  memset(out_token, 0, sizeof(out_token));
  int v57 = (void **)out_token;
  sub_10031C158(&v57);
  sub_100019CEC((uint64_t)buf);
  if (((*(uint64_t (**)(void, unsigned __int8 *))(**((void **)a1 + 6) + 120LL))( *((void *)a1 + 6),  a1 + 196) & 1) == 0) {
    *__int128 v19 = 4;
  }
  __int128 v20 = a1 + 1072;
  if (((*(uint64_t (**)(void, unsigned __int8 *))(**((void **)a1 + 6) + 160LL))( *((void *)a1 + 6),  a1 + 240) & 1) == 0) {
    *((_DWORD *)a1 + 60) = 300;
  }
  if (((*(uint64_t (**)(void, unsigned __int8 *))(**((void **)a1 + 6) + 168LL))( *((void *)a1 + 6),  a1 + 1000) & 1) == 0) {
    *((void *)a1 + 125) = 0x40D5180000000000LL;
  }
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  __int128 v21 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *v20;
    int v23 = *v19;
    int v24 = *v8;
    double v25 = *v10;
    int v26 = *v9;
    *(_DWORD *)std::string buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&_BYTE buf[20] = v22;
    *(_WORD *)&_BYTE buf[24] = 1025;
    *(_DWORD *)&buf[26] = v23;
    *(_WORD *)&buf[30] = 1025;
    int v59 = v24;
    __int16 v60 = 2049;
    double v61 = v25;
    __int16 v62 = 1025;
    int v63 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:HarvestController-Contruct, isHarvestAllLocations:%{private}hhd, highThermalThresho ld:%{private}d, lowThermalThreshold:%{private}d, maxHarvestAge_s:%{private}.09f, maxHarvestPointsP er:%{private}d}",  buf,  0x34u);
  }

  (*(void (**)(void, unsigned __int8 *))(**((void **)a1 + 6) + 40LL))(*((void *)a1 + 6), a1);
  (*(void (**)(void, void))(*(void *)*v4 + 200LL))(*v4, 0LL);
  (*(void (**)(void, uint64_t))(*(void *)*v4 + 184LL))(*v4, 13LL);
  (*(void (**)(void, uint64_t))(*(void *)*v4 + 184LL))(*v4, 15LL);
  uint64_t v27 = sub_1002F8DDC();
  sub_1002A6FD4(v27, (uint64_t)@"PrivateMode", (BOOL *)a1 + 185);
  double v28 = (*(double (**)(unsigned __int8 *))(*(void *)a1 + 64LL))(a1);
  uint64_t v29 = sub_1002F8DDC();
  __int128 v30 = (double *)(a1 + 992);
  if (!sub_1002A832C(v29, (uint64_t)@"LastPrune", a1 + 992) || (double v31 = *v30, *v30 < 1.0))
  {
    *__int128 v30 = v28;
    double v31 = v28;
  }

  double v32 = *v10 - vabdd_f64(v28, v31);
  if (v32 >= 3.0) {
    double v33 = v32;
  }
  else {
    double v33 = 3.0;
  }
  uint64_t v34 = *v4;
  sub_1010DDBC0(buf, "HarvestPruneTimer");
  (*(void (**)(int *__return_ptr, uint64_t, uint8_t *, void (*)(uint64_t, uint64_t), unsigned __int8 *, id, double, double))(*(void *)v34 + 264))( out_token,  v34,  buf,  sub_1003141D8,  a1,  objc_msgSend(*((id *)a1 + 5), "silo", a1 + 1024, a1 + 272, v49, v50, v51, v52),  v28 + v33,  *((double *)a1 + 31));
  sub_10005F550((uint64_t)(a1 + 1040), (__int128 *)out_token);
  __int128 v35 = *(std::__shared_weak_count **)&out_token[2];
  if (*(void *)&out_token[2])
  {
    __int128 v36 = (unint64_t *)(*(void *)&out_token[2] + 8LL);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  uint64_t v38 = *v4;
  sub_1010DDBC0(buf, "HarvestUnlockTimer");
  (*(void (**)(int *__return_ptr, uint64_t, uint8_t *, void (*)(uint64_t, uint64_t), unsigned __int8 *, id, double))(*(void *)v38 + 264))( out_token,  v38,  buf,  sub_100314398,  a1,  [*((id *)a1 + 5) silo],  v28 + *((double *)a1 + 125));
  sub_10005F550((uint64_t)(a1 + 1056), (__int128 *)out_token);
  __int128 v39 = *(std::__shared_weak_count **)&out_token[2];
  if (*(void *)&out_token[2])
  {
    __int128 v40 = (unint64_t *)(*(void *)&out_token[2] + 8LL);
    do
      unint64_t v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  __int128 v42 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    *(double *)&_BYTE buf[20] = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#pruneTimer, nextPruneTime_s:%{private}.09f}",  buf,  0x1Cu);
  }

  *((void *)a1 + 26) = 0LL;
  *((_WORD *)a1 + 108) = 0;
  sub_1004F2598();
  if (sub_1004F8A40())
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v43 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:registering for internal notifications}",  buf,  0x12u);
    }

    __int128 v44 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*((id *)a1 + 5), "silo"), "queue");
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100314558;
    handler[3] = &unk_101832780;
    handler[4] = a1;
    notify_register_dispatch("CLHarvestController-upload", (int *)buf, v44, handler);
    __int128 v45 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*((id *)a1 + 5), "silo"), "queue");
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_100314720;
    void v53[3] = &unk_101832780;
    v53[4] = a1;
    notify_register_dispatch("CLHarvestController-prune", out_token, v45, v53);
  }

  *((double *)a1 + 48) = v28;
  sub_100314850(a1);
  uint64_t v46 = qword_101994278;
  uint64_t v47 = qword_101994280;
  while (v46 != v47)
  {
    (*(void (**)(void, uint64_t))(*(void *)*v4 + 56LL))(*v4, v46);
    v46 += 24LL;
  }

  return a1;
}

void sub_100314068( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  __int128 v39 = *(void **)(v36 + 1184);
  if (v39)
  {
    *(void *)(v36 + 1192) = v39;
    operator delete(v39);
  }

  sub_10000AE14(a15);
  sub_10000AE14(a16);
  sub_1000229D4(v36 + 1016, *a9);
  sub_1003148EC(a10);
  sub_10000AE14(v36 + 168);
  sub_10000AE14(v36 + 152);
  sub_10000AE14(a11);
  sub_100008390(a12, *(void **)(v36 + 120));
  std::string __p = a13;
  sub_10031C158((void ***)&__p);
  sub_10031C110(a14, *(void **)(v36 + 72));
  sub_10000AE14(v37);
  _Unwind_Resume(a1);
}

double sub_10031415C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + memset(&buf[7], 0, 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *(_BYTE *)a2 = 1;
  (*(void (**)(__int128 *__return_ptr))(*(void *)a1 + 16LL))(&v4);
  double result = *(double *)&v4;
  *(_OWORD *)(a2 + 40) = v4;
  *(void *)(a2 + 56) = v5;
  return result;
}

void sub_1003141C4(_Unwind_Exception *a1)
{
}

void sub_1003141D8(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101832950);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    __int128 v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLHarvestController::onPruneTimer",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832950);
    }
    __int128 v4 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      __int128 v10 = "";
      __int16 v11 = 2082;
      __int128 v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLHarvestController::onPruneTimer, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v6 = 0;
  }

  sub_10031A304((double *)a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100314378( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100314398(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101832950);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    __int128 v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLHarvestController::onUploadTimer",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832950);
    }
    __int128 v4 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      __int128 v10 = "";
      __int16 v11 = 2082;
      __int128 v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLHarvestController::onUploadTimer, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v6 = 0;
  }

  sub_10031A45C(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100314538( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100314558(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  double v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLHarvestController-upload}",  (uint8_t *)v3,  0x12u);
  }

  sub_100314638(v1);
}

void sub_100314638(uint64_t a1)
{
  *(double *)(a1 + 1008) = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  double v2 = *(void **)(a1 + 64);
  __int128 v3 = (void *)(a1 + 72);
  if (v2 != (void *)(a1 + 72))
  {
    do
    {
      __int16 v4 = objc_autoreleasePoolPush();
      sub_1009B021C(v2[5]);
      objc_autoreleasePoolPop(v4);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          char v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          double v2 = v6;
        }

        while (!v7);
      }

      double v2 = v6;
    }

    while (v6 != v3);
  }

  sub_100319EF4(a1);
  int v8 = *(void **)(a1 + 64);
  if (v8 != v3)
  {
    do
    {
      sub_1009B0DD4(v8[5]);
      __int16 v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          __int128 v10 = v9;
          __int16 v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          __int128 v10 = (void *)v8[2];
          BOOL v7 = *v10 == (void)v8;
          int v8 = v10;
        }

        while (!v7);
      }

      int v8 = v10;
    }

    while (v10 != v3);
  }

void sub_100314720(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  double v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLHarvestController-prune}",  (uint8_t *)v7,  0x12u);
  }

  __int128 v3 = *(void **)(v1 + 64);
  if (v3 != (void *)(v1 + 72))
  {
    do
    {
      sub_1009B0B64((unsigned int *)v3[5]);
      __int16 v4 = (void *)v3[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          __int16 v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          uint64_t v5 = (void *)v3[2];
          BOOL v6 = *v5 == (void)v3;
          __int128 v3 = v5;
        }

        while (!v6);
      }

      __int128 v3 = v5;
    }

    while (v5 != (void *)(v1 + 72));
  }

void sub_100314850(unsigned __int8 *a1)
{
  int v2 = a1[257];
  int v3 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 104LL))(a1);
  a1[257] = v3;
  if (v2 != v3)
  {
    (*(void (**)(unsigned __int8 *))(*(void *)a1 + 64LL))(a1);
    uint64_t v5 = 368LL;
    if (!v2) {
      uint64_t v5 = 376LL;
    }
    *(double *)&a1[v5] = v4 - *((double *)a1 + 48) + *(double *)&a1[v5];
    *((double *)a1 + 48) = v4;
    if (a1[257]) {
      double v6 = sub_100319CE4((uint64_t)a1);
    }
    else {
      double v6 = 1.79769313e308;
    }
    sub_1003198CC((uint64_t)a1, v6);
  }

uint64_t sub_1003148EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100314930(uint64_t a1)
{
  *(void *)a1 = off_101832520;
  *(void *)(a1 + 8) = off_1018326B8;
  *(void *)(a1 + 16) = off_1018326F8;
  *(void *)(a1 + 24) = off_101832728;
  *(void *)(a1 + memset(&buf[7], 0, 32) = off_101832760;
  sub_100314A18(a1);
  int v2 = *(void **)(a1 + 1184);
  if (v2)
  {
    *(void *)(a1 + 1192) = v2;
    operator delete(v2);
  }

  sub_10000AE14(a1 + 1056);
  sub_10000AE14(a1 + 1040);
  sub_1000229D4(a1 + 1016, *(char **)(a1 + 1024));
  sub_10000AE14(a1 + 168);
  sub_10000AE14(a1 + 152);
  sub_10000AE14(a1 + 136);
  sub_100008390(a1 + 112, *(void **)(a1 + 120));
  double v4 = (void **)(a1 + 88);
  sub_10031C158(&v4);
  sub_10031C110(a1 + 64, *(void **)(a1 + 72));
  sub_10000AE14(a1 + 48);
  return a1;
}

void sub_100314A18(uint64_t a1)
{
  int v2 = *(void **)(a1 + 64);
  if (v2 != (void *)(a1 + 72))
  {
    do
    {
      (*(void (**)(void))(*(void *)v2[5] + 80LL))(v2[5]);
      int v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          double v4 = v3;
          int v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          double v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          int v2 = v4;
        }

        while (!v5);
      }

      int v2 = v4;
    }

    while (v4 != (void *)(a1 + 72));
  }

  (*(void (**)(void))(**(void **)(a1 + 168) + 16LL))(*(void *)(a1 + 168));
  (*(void (**)(void))(**(void **)(a1 + 136) + 16LL))(*(void *)(a1 + 136));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192LL))(*(void *)(a1 + 48), 13LL);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192LL))(*(void *)(a1 + 48), 15LL);
  *(_BYTE *)(a1 + 972) = 0;
  (*(void (**)(void, void))(**(void **)(a1 + 48) + 208LL))(*(void *)(a1 + 48), 0LL);
  (*(void (**)(void))(**(void **)(a1 + 48) + 48LL))(*(void *)(a1 + 48));
  (*(void (**)(void))(**(void **)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
  uint64_t v6 = sub_1002F8DDC();
  sub_1002AC820(v6, @"LastPrune", (const void *)(a1 + 992));

  *(void *)(a1 + 264) = 0LL;
}

uint64_t sub_100314B40(uint64_t a1)
{
  return sub_100314930(a1 - 8);
}

uint64_t sub_100314B48(uint64_t a1)
{
  return sub_100314930(a1 - 16);
}

uint64_t sub_100314B50(uint64_t a1)
{
  return sub_100314930(a1 - 24);
}

uint64_t sub_100314B58(uint64_t a1)
{
  return sub_100314930(a1 - 32);
}

void sub_100314B60(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100314930(a1);
  operator delete(v1);
}

void sub_100314B74(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100314930(a1 - 8);
  operator delete(v1);
}

void sub_100314B8C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100314930(a1 - 16);
  operator delete(v1);
}

void sub_100314BA4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100314930(a1 - 24);
  operator delete(v1);
}

void sub_100314BBC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100314930(a1 - 32);
  operator delete(v1);
}

void sub_100314BD4(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  __int16 v9 = a1 + 21;
  sub_1000F2F30(a1 + 21, a2);
  sub_1000F2F30(a1 + 17, a3);
  sub_1000F2F30(a1 + 19, a4);
  __int128 v10 = *a5;
  __int16 v11 = a5[1];
  while (v10 != v11)
  {
    uint64_t v12 = v10[1];
    uint64_t v19 = *v10;
    __int128 v20 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      __int16 v13 = (unint64_t *)(v12 + 8);
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    sub_100314DCC((uint64_t)a1, &v19);
    int v15 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    v10 += 2;
  }

  (*(void (**)(void *))(*a1 + 48LL))(a1);
  if (((*(uint64_t (**)(void))(*(void *)a1[21] + 40LL))(a1[21]) & 1) != 0)
  {
    (*(void (**)(void))(*(void *)*v9 + 72LL))(*v9);
    (*(void (**)(void))(*(void *)a1[17] + 72LL))(a1[17]);
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v18 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v22 = 0;
      __int16 v23 = 2082;
      int v24 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:gps harvesting is not supported}",  buf,  0x12u);
    }
  }

void sub_100314DB0(_Unwind_Exception *exception_object)
{
}

uint64_t **sub_100314DCC(uint64_t a1, uint64_t *a2)
{
  int v6 = sub_10008D01C(*a2);
  BOOL v7 = &v6;
  double v4 = sub_10031C390((uint64_t **)(a1 + 64), &v6, (uint64_t)&unk_1012CF090, &v7);
  sub_1000F2F30(v4 + 5, a2);
  BOOL v7 = &v6;
  double result = sub_10000C858((uint64_t **)(a1 + 112), &v6, (uint64_t)&unk_1012CF090, &v7);
  result[5] = (uint64_t *)0x7FEFFFFFFFFFFFFFLL;
  return result;
}

void sub_100314E60(uint64_t a1)
{
}

void sub_100314E90(uint64_t a1)
{
}

double sub_100314EC0(uint64_t a1)
{
  return sub_1002A4D3C((double *)(a1 + 1080));
}

double sub_100314EF0(uint64_t a1)
{
  return sub_1002A4D3C((double *)(a1 + 1064));
}

double sub_100314F20(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

double sub_100314F28(uint64_t a1)
{
  return *(double *)(a1 + 224);
}

uint64_t sub_100314F30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 236);
}

uint64_t sub_100314F38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_100314F40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

uint64_t sub_100314F48(uint64_t a1)
{
  return *(unsigned int *)(a1 + 216);
}

uint64_t sub_100314F50(uint64_t a1)
{
  return a1 + 208;
}

uint64_t sub_100314F58(uint64_t a1)
{
  return a1 + 200;
}

uint64_t sub_100314F60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_100314F68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_100314F70(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

uint64_t sub_100314F78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 180);
}

uint64_t sub_100314F80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 189);
}

uint64_t sub_100314F88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 181);
}

uint64_t sub_100314F90(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 187) != a2)
  {
    int v2 = (void **)result;
    *(_BYTE *)(result + 187) = a2;
    int v3 = *(void **)(result + 48);
    if (a2) {
      uint64_t v4 = 80LL;
    }
    else {
      uint64_t v4 = 88LL;
    }
    (*(void (**)(void))(*v3 + v4))();
    (*(void (**)(void))(*v2[6] + v4))();
    (*(void (**)(void))(*v2[6] + v4))();
    return ((uint64_t (*)(void **))(*v2)[5])(v2);
  }

  return result;
}

uint64_t sub_100315020(uint64_t result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 1:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v3 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester registering for location leech notifications}",  (uint8_t *)&v9,  0x12u);
      }

      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 232LL))(*(void *)(v2 + 48), 5LL);
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 232LL))(*(void *)(v2 + 48), 13LL);
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v2 + 48) + 232LL);
      goto LABEL_12;
    case 6:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      BOOL v5 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester registering for PassKit notifications}",  (uint8_t *)&v9,  0x12u);
      }

      (*(void (**)(void, void))(**(void **)(v2 + 48) + 368LL))(*(void *)(v2 + 48), 0LL);
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v2 + 48) + 368LL);
LABEL_12:
      double result = v4();
      break;
    case 7:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v6 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester registering for leech visit notifications}",  (uint8_t *)&v9,  0x12u);
      }

      double result = (*(uint64_t (**)(void))(**(void **)(v2 + 48) + 392LL))(*(void *)(v2 + 48));
      break;
    case 8:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      BOOL v7 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester registering for wifi notificatons}",  (uint8_t *)&v9,  0x12u);
      }

      uint64_t v8 = *(void *)(v2 + 48);
      int v9 = 3;
      double result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 328LL))(v8, &v9);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10031536C(uint64_t result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 1:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v3 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester unregistering for location notifications}",  (uint8_t *)&v9,  0x12u);
      }

      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 240LL))(*(void *)(v2 + 48), 5LL);
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 240LL))(*(void *)(v2 + 48), 13LL);
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v2 + 48) + 240LL);
      goto LABEL_12;
    case 6:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      BOOL v5 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester unregistering for PassKit notifications}",  (uint8_t *)&v9,  0x12u);
      }

      (*(void (**)(void, void))(**(void **)(v2 + 48) + 376LL))(*(void *)(v2 + 48), 0LL);
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v2 + 48) + 376LL);
LABEL_12:
      double result = v4();
      break;
    case 7:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v6 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester unregistering for leech visit notifications}",  (uint8_t *)&v9,  0x12u);
      }

      double result = (*(uint64_t (**)(void))(**(void **)(v2 + 48) + 400LL))(*(void *)(v2 + 48));
      break;
    case 8:
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      BOOL v7 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        uint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Harvester unregistering for wifi notificatons}",  (uint8_t *)&v9,  0x12u);
      }

      uint64_t v8 = *(void *)(v2 + 48);
      int v9 = 3;
      double result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 336LL))(v8, &v9);
      break;
    default:
      return result;
  }

  return result;
}

void sub_1003156B8(uint64_t a1, signed int a2, unsigned int a3)
{
  signed int v31 = a2;
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v7 = a1 + 72;
  do
  {
    signed int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      int v10 = (uint64_t *)v5;
    }
    else {
      int v10 = (uint64_t *)(v5 + 8);
    }
    if (!v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }

  while (*v10);
  if (v7 != a1 + 72 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (sub_10001A29C((void *)(*(void *)(a1 + 88) + 40LL * a3), (unsigned int *)&v31))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      __int128 v18 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v19 = v31;
        sub_100931FEC(a3, __p);
        if (v30 >= 0) {
          __int128 v20 = __p;
        }
        else {
          __int128 v20 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        __int128 v35 = "";
        __int16 v36 = 2050;
        uint64_t v37 = v19;
        __int16 v38 = 2081;
        __int128 v39 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:SubHarvester re-registered for notification, subHarvester:%{public, location:CLSu bHarvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}",  buf,  0x26u);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_101832930);
        }
      }

      uint64_t v21 = qword_1019349B8;
      if (os_signpost_enabled((os_log_t)qword_1019349B8))
      {
        uint64_t v22 = v31;
        sub_100931FEC(a3, __p);
        if (v30 >= 0) {
          __int16 v23 = __p;
        }
        else {
          __int16 v23 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        __int128 v35 = "";
        __int16 v36 = 2050;
        uint64_t v37 = v22;
        __int16 v38 = 2081;
        __int128 v39 = v23;
        int v15 = "SubHarvester re-registered for notification";
        double v16 = "{msg%{public}.0s:SubHarvester re-registered for notification, subHarvester:%{public, location:"
              "CLSubHarvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}";
        unint64_t v17 = (os_log_s *)v21;
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v24 = *(void *)(a1 + 88) + 40LL * a3;
      uint64_t v25 = *(void *)(v24 + 24);
      sub_10001B278(v24, (unsigned int *)&v31, &v31);
      if (!v25) {
        sub_100315020(a1, a3);
      }
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v26 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        uint64_t v27 = v31;
        sub_100931FEC(a3, __p);
        if (v30 >= 0) {
          double v28 = __p;
        }
        else {
          double v28 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        __int128 v35 = "";
        __int16 v36 = 2050;
        uint64_t v37 = v27;
        __int16 v38 = 2081;
        __int128 v39 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:subharvester registered for notification, subHarvester:%{public, location:CLSubHa rvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}",  buf,  0x26u);
        goto LABEL_27;
      }
    }
  }

  else
  {
LABEL_11:
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int16 v11 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
    {
      sub_100931FEC(a3, __p);
      if (v30 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v33 = 0;
      __int16 v34 = 2082;
      __int128 v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = a2;
      __int16 v38 = 2081;
      __int128 v39 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unknown SubHarvester registering for notification, subHarvester:%{public, location: CLSubHarvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}",  buf,  0x26u);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
    }

    uint64_t v13 = qword_1019349B8;
    if (os_signpost_enabled((os_log_t)qword_1019349B8))
    {
      sub_100931FEC(a3, __p);
      if (v30 >= 0) {
        unint64_t v14 = __p;
      }
      else {
        unint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v33 = 0;
      __int16 v34 = 2082;
      __int128 v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = a2;
      __int16 v38 = 2081;
      __int128 v39 = v14;
      int v15 = "Unknown SubHarvester registering for notification";
      double v16 = "{msg%{public}.0s:Unknown SubHarvester registering for notification, subHarvester:%{public, locat"
            "ion:CLSubHarvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}";
      unint64_t v17 = (os_log_s *)v13;
LABEL_26:
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v15,  v16,  buf,  0x26u);
LABEL_27:
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_100315BB8(uint64_t a1, signed int a2, unsigned int a3)
{
  signed int v20 = a2;
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v7 = a1 + 72;
  do
  {
    signed int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      int v10 = (uint64_t *)v5;
    }
    else {
      int v10 = (uint64_t *)(v5 + 8);
    }
    if (!v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }

  while (*v10);
  if (v7 != a1 + 72 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (sub_10001A29C((void *)(*(void *)(a1 + 88) + 40LL * a3), (unsigned int *)&v20))
    {
      sub_10031C4B8((void *)(*(void *)(a1 + 88) + 40LL * a3), (unsigned int *)&v20);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v15 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = v20;
        sub_100931FEC(a3, __p);
        unint64_t v17 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 68289539;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2050;
        uint64_t v26 = v16;
        __int16 v27 = 2081;
        double v28 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:subharvester unregistered for notification, subHarvester:%{public, location:CLSub HarvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}",  buf,  0x26u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      if (!*(void *)(*(void *)(a1 + 88) + 40LL * a3 + 24)) {
        sub_10031536C(a1, a3);
      }
    }
  }

  else
  {
LABEL_11:
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int16 v11 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
    {
      sub_100931FEC(a3, __p);
      if (v19 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = a2;
      __int16 v27 = 2081;
      double v28 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unknown SubHarvester unregistering for notification, subHarvester:%{public, locatio n:CLSubHarvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}",  buf,  0x26u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
    }

    uint64_t v13 = (os_log_s *)qword_1019349B8;
    if (os_signpost_enabled((os_log_t)qword_1019349B8))
    {
      sub_100931FEC(a3, __p);
      if (v19 >= 0) {
        unint64_t v14 = __p;
      }
      else {
        unint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = a2;
      __int16 v27 = 2081;
      double v28 = v14;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unknown SubHarvester unregistering for notification",  "{msg%{public}.0s:Unknown SubHarvester unregistering for notification, subHarvester:%{public, locatio n:CLSubHarvesterIdentifier}lld, harvestNotificationType:%{private, location:escape_only}s}",  buf,  0x26u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }

uint64_t sub_100315F40(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 64);
  int v3 = (void *)(result + 72);
  if (v2 != (void *)(result + 72))
  {
    do
    {
      double result = (*(uint64_t (**)(void, uint64_t))(*(void *)v2[5] + 88LL))(v2[5], a2);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          int v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }

        while (!v7);
      }

      uint64_t v2 = v6;
    }

    while (v6 != v3);
  }

  return result;
}

uint64_t sub_100315FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_1002AF124(a2, "Locations");
  int v7 = v6;
  BOOL v8 = *(double *)(a3 + 20) < 0.0 || v6 < 1;
  if (v8) {
    goto LABEL_37;
  }
  char v9 = 0;
  int v10 = 1;
  do
  {
    sub_1002A8F8C(a2, "Locations", v24);
    if (sub_1002A82BC((uint64_t)v24, "LatitudeMin", &v22)
      && sub_1002A82BC((uint64_t)v24, "LatitudeMax", &v21)
      && sub_1002A82BC((uint64_t)v24, "LongitudeMin", &v20)
      && sub_1002A82BC((uint64_t)v24, "LongitudeMax", &v19)
      && sub_1002A8F8C((uint64_t)v24, "Rules", v23))
    {
      double v11 = *(double *)(a3 + 4);
      if (v22 <= v11 && v21 >= v11)
      {
        double v12 = *(double *)(a3 + 12);
        if (v20 <= v12 && v19 >= v12)
        {
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_101832930);
          }
          uint64_t v13 = (os_log_s *)qword_1019349B8;
          if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v14 = *(void *)(a3 + 4);
            uint64_t v15 = *(void *)(a3 + 12);
            *(_DWORD *)std::string buf = 68290563;
            int v26 = 0;
            __int16 v27 = 2082;
            double v28 = "";
            __int16 v29 = 2049;
            uint64_t v30 = v14;
            __int16 v31 = 2049;
            uint64_t v32 = v15;
            __int16 v33 = 2049;
            double v34 = v22;
            __int16 v35 = 2049;
            double v36 = v20;
            __int16 v37 = 2049;
            double v38 = v21;
            __int16 v39 = 2049;
            double v40 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:applying bounding-box-specific overrides, lat:%{private}f, lon:%{pr ivate}f, latMin:%{private}f, lonMin:%{private}f, latMax:%{private}f, lonMax: %{private}f}",  buf,  0x4Eu);
          }

          char v9 = 1;
        }
      }
    }

    else
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      uint64_t v16 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289283;
        int v26 = 0;
        __int16 v27 = 2082;
        double v28 = "";
        __int16 v29 = 1025;
        LODWORD(v30) = v10 - 1;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:location-specific entry is incomplete, incompleteEntry:%{private}d}",  buf,  0x18u);
      }
    }

    if ((v9 & 1) != 0) {
      break;
    }
    BOOL v8 = v10++ < v7;
  }

  while (v8);
  if ((v9 & 1) == 0)
  {
LABEL_37:
    if (sub_1002A8F8C(a2, "Default", v23))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      unint64_t v17 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v26 = 0;
        __int16 v27 = 2082;
        double v28 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:applying overrides}",  buf,  0x12u);
      }
    }

    else
    {
      sub_1002A576C((uint64_t)v23, a2);
    }
  }

  sub_100315F40(a1, (uint64_t)v23);
  sub_1002A5590(v23);
  return sub_1002A5590(v24);
}

void sub_1003163C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1003163F8(uint64_t a1)
{
  if ((*(unsigned int (**)(void, void *))(**(void **)(a1 + 48) + 112LL))(*(void *)(a1 + 48), v6))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      int v3 = "{msg%{public}.0s:found default overrides - applying}";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 0x12u);
    }
  }

  else if ((*(unsigned int (**)(void, void *))(**(void **)(a1 + 48) + 360LL))( *(void *)(a1 + 48),  v6))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      int v3 = "{msg%{public}.0s:found network overrides - applying}";
      goto LABEL_15;
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      int v3 = "{msg%{public}.0s:no overrides found in daemon settings or network settings}";
      goto LABEL_15;
    }
  }

  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 56LL))(*(void *)(a1 + 168));
  sub_100315FC0(a1, (uint64_t)v6, v4);
  return sub_1002A5590(v6);
}

void sub_100316614(_Unwind_Exception *exception_object)
{
}

_BYTE *sub_100316630(_BYTE *result, int a2)
{
  if (result[185] != a2)
  {
    result[185] = a2;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(void *)result + 40LL))(result);
  }

  return result;
}

uint64_t sub_100316650(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 185);
}

void sub_100316658(uint64_t a1)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248LL))(a1);
    int v23 = *(unsigned __int8 *)(a1 + 186);
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 104LL))(*(void *)(a1 + 48));
    int v4 = *(unsigned __int8 *)(a1 + 188);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272LL))(a1);
    int v6 = *(unsigned __int8 *)(a1 + 256);
    int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 72LL))(*(void *)(a1 + 48));
    int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 216LL))(*(void *)(a1 + 48));
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL))(a1);
    int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 80LL))(*(void *)(a1 + 168));
    int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 224LL))(*(void *)(a1 + 48));
    *(_DWORD *)std::string buf = 68291842;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v26 = 2082;
    *(void *)&v26[2] = "";
    __int16 v27 = 1026;
    int v28 = v22;
    __int16 v29 = 1026;
    int v30 = v23;
    __int16 v31 = 1026;
    int v32 = v3;
    __int16 v33 = 1026;
    int v34 = v4;
    __int16 v35 = 1026;
    int v36 = v5;
    __int16 v37 = 1026;
    int v38 = v6;
    __int16 v39 = 1026;
    int v40 = v7;
    __int16 v41 = 1026;
    int v42 = v8;
    __int16 v43 = 1026;
    int v44 = v9;
    __int16 v45 = 1026;
    int v46 = v10;
    __int16 v47 = 1026;
    int v48 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:updateHarvestingAllowed, isHarvestingEnabled:%{public}hhd, fHarvestingAllowed:%{p ublic}hhd, isLocationServicesEnabled:%{public}hhd, fThermalLevelAcceptableLowCpu:%{public}hhd, isInPriva teMode:%{public}hhd, fBatterySaverModeEnabled:%{public}hhd, hasAuthorizedClients:%{public}hhd, isGpsCo ntrollerSimulationEnabled:%{public}hhd, isHarvestingAllowedForLocationSimulation:%{public}hhd, isGpsContro llerSimulationEnabled:%{public}hhd, isLocationControllerSimulationEnabled:%{public}hhd}",  buf,  0x54u);
  }

  sub_1002F0B04(buf);
  int v12 = sub_1002A6F64(*(uint64_t *)buf, "IsHarvestingForced", (BOOL *)v24);
  if (LOBYTE(v24[0])) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = *(std::__shared_weak_count **)v26;
  if (*(void *)v26)
  {
    uint64_t v15 = (unint64_t *)(*(void *)v26 + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  unint64_t v17 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Harvesting is forced to be allowed,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    v24[0] = 67240192;
    v24[1] = v13;
    double v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  2LL,  "Harvesting is forced to be allowed,%{public}d",  v24,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLHarvestController::updateHarvestingAllowed()", "%s\n", v21);
  }

  if (v13)
  {
    *(_BYTE *)(a1 + 186) = 1;
    return;
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 248LL))(a1) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 186)) {
      return;
    }
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v18 = (os_log_s *)qword_1019349B8;
    if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
      goto LABEL_69;
    }
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v26 = 2082;
    *(void *)&v26[2] = "";
    double v19 = "{msg%{public}.0s:Harvesting not allowed: disabled}";
    goto LABEL_68;
  }

  if (((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 104LL))(*(void *)(a1 + 48)) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 186)) {
      return;
    }
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v18 = (os_log_s *)qword_1019349B8;
    if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
      goto LABEL_69;
    }
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v26 = 2082;
    *(void *)&v26[2] = "";
    double v19 = "{msg%{public}.0s:Harvesting not allowed: location services disabled}";
    goto LABEL_68;
  }

  if (!*(_BYTE *)(a1 + 188))
  {
    if (!*(_BYTE *)(a1 + 186)) {
      return;
    }
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v18 = (os_log_s *)qword_1019349B8;
    if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
      goto LABEL_69;
    }
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v26 = 2082;
    *(void *)&v26[2] = "";
    double v19 = "{msg%{public}.0s:Harvesting not allowed: thermal level unacceptable}";
    goto LABEL_68;
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 272LL))(a1))
  {
    if (!*(_BYTE *)(a1 + 186)) {
      return;
    }
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v18 = (os_log_s *)qword_1019349B8;
    if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
      goto LABEL_69;
    }
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v26 = 2082;
    *(void *)&v26[2] = "";
    double v19 = "{msg%{public}.0s:Harvesting not allowed: in private mode}";
    goto LABEL_68;
  }

  if (*(_BYTE *)(a1 + 256))
  {
    if (!*(_BYTE *)(a1 + 186)) {
      return;
    }
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v18 = (os_log_s *)qword_1019349B8;
    if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
      goto LABEL_69;
    }
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v26 = 2082;
    *(void *)&v26[2] = "";
    double v19 = "{msg%{public}.0s:Harvesting not allowed: battery saver mode enabled}";
    goto LABEL_68;
  }

  if (((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 72LL))(*(void *)(a1 + 48)) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 186)) {
      return;
    }
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    __int128 v18 = (os_log_s *)qword_1019349B8;
    if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
      goto LABEL_69;
    }
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v26 = 2082;
    *(void *)&v26[2] = "";
    double v19 = "{msg%{public}.0s:Harvesting not allowed: no authorized clients}";
    goto LABEL_68;
  }

  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 216LL))(*(void *)(a1 + 48))
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL))(a1) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 186))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      __int128 v18 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_69;
      }
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v26 = 2082;
      *(void *)&v26[2] = "";
      double v19 = "{msg%{public}.0s:Harvesting not allowed: gps simulation enabled}";
      goto LABEL_68;
    }
  }

  else
  {
    if (!(*(unsigned int (**)(void))(**(void **)(a1 + 168) + 80LL))(*(void *)(a1 + 168))
      || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL))(a1) & 1) != 0)
    {
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 48) + 224LL))(*(void *)(a1 + 48))
        || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL))(a1) & 1) != 0)
      {
        if (!*(_BYTE *)(a1 + 186))
        {
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_101832930);
          }
          double v20 = (os_log_s *)qword_1019349B8;
          if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)int v26 = 2082;
            *(void *)&v26[2] = "";
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Harvesting now allowed}",  buf,  0x12u);
          }

          *(_BYTE *)(a1 + 186) = 1;
        }

        return;
      }

      if (!*(_BYTE *)(a1 + 186)) {
        return;
      }
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      __int128 v18 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_69;
      }
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v26 = 2082;
      *(void *)&v26[2] = "";
      double v19 = "{msg%{public}.0s:Harvesting not allowed: location simulation enabled}";
LABEL_68:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v19, buf, 0x12u);
LABEL_69:
      *(_BYTE *)(a1 + 186) = 0;
      return;
    }

    if (*(_BYTE *)(a1 + 186))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      __int128 v18 = (os_log_s *)qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO)) {
        goto LABEL_69;
      }
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v26 = 2082;
      *(void *)&v26[2] = "";
      double v19 = "{msg%{public}.0s:Harvesting not allowed: gps simulation enabled (gps monitor)}";
      goto LABEL_68;
    }
  }

void sub_100316FD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100316FF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 186);
}

uint64_t sub_100316FF8()
{
  BOOL v34 = 0;
  sub_1002F0B04(buf);
  sub_1002A6F64(*(uint64_t *)buf, "EnableHarvestingForLocationSimulation", &v34);
  double v0 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v1 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }

  if (v34)
  {
    sub_1010DDBC0(__p, "http://localhost:8008");
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v3 = [&off_1018D6C10 countByEnumeratingWithState:&v28 objects:v39 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v29;
      while (2)
      {
        for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v4) {
            objc_enumerationMutation(&off_1018D6C10);
          }
          int v6 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
          memset(&__s1, 0, sizeof(__s1));
          sub_1002F0B04(buf);
          sub_1002A85D0(*(uint64_t *)buf, (uint64_t)v6, &__s1);
          int v7 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            int v8 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              unint64_t v9 = __ldaxr(v8);
            while (__stlxr(v9 - 1, v8));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }

          uint64_t size = __s1.__r_.__value_.__s.__size_;
          if ((__s1.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v11 = __s1.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v11 = __s1.__r_.__value_.__l.__size_;
          }
          unint64_t v12 = v33;
          if ((v33 & 0x80u) != 0) {
            unint64_t v12 = (unint64_t)__p[1];
          }
          if (v11 != v12) {
            goto LABEL_37;
          }
          if ((v33 & 0x80u) == 0) {
            int v13 = __p;
          }
          else {
            int v13 = (void **)__p[0];
          }
          if ((__s1.__r_.__value_.__s.__size_ & 0x80) != 0)
          {
            uint64_t v15 = (void *)__s1.__r_.__value_.__r.__words[0];
            if (memcmp(__s1.__r_.__value_.__l.__data_, v13, __s1.__r_.__value_.__l.__size_)) {
              goto LABEL_37;
            }
            operator delete(v15);
          }

          else if (__s1.__r_.__value_.__s.__size_)
          {
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              int v13 = (void **)((char *)v13 + 1);
              if (!--size) {
                goto LABEL_34;
              }
            }

void sub_100317554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003175C8(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 224LL))(*(void *)(a1 + 48)) & 1) != 0
    || ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 216LL))(*(void *)(a1 + 48)) & 1) != 0)
  {
    return 1LL;
  }

  else
  {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 80LL))(*(void *)(a1 + 168));
  }

uint64_t sub_100317628(uint64_t a1, int a2)
{
  uint64_t result = sub_1004F97F4();
  if ((result & 0x400000) != 0 && *(unsigned __int8 *)(a1 + 1209) != a2)
  {
    if (a2)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v5 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        unint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:starting motion activity monitoring}",  buf,  0x12u);
      }

      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 248LL))(*(void *)(a1 + 48), 2LL);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 248LL))(*(void *)(a1 + 48), 3LL);
      uint64_t v6 = *(void *)(a1 + 48);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      _DWORD v8[2] = sub_100317860;
      void v8[3] = &unk_1018327A0;
      _DWORD v8[4] = a1;
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 352LL))(v6, v8);
    }

    else
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v7 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        unint64_t v12 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:stopping motion activity monitoring}",  buf,  0x12u);
      }

      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 256LL))(*(void *)(a1 + 48), 2LL);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 256LL))(*(void *)(a1 + 48), 3LL);
      CLMotionActivity::init((CLMotionActivity *)(a1 + 392));
      CLMotionActivity::init((CLMotionActivity *)(a1 + 528));
      uint64_t result = CLMotionActivity::init((CLMotionActivity *)(a1 + 664));
      *(_BYTE *)(a1 + 802) = 0;
      *(void *)(a1 + 808) = 0xBFF0000000000000LL;
    }

    *(_BYTE *)(a1 + 1209) = a2;
  }

  return result;
}

void sub_100317860(uint64_t a1, double *a2)
{
  int v3 = *a2 > 0.0 && a2[1] < 0.0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  int v5 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    double v6 = *a2;
    uint64_t v7 = *((void *)a2 + 1);
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    int v10 = "";
    __int16 v11 = 2049;
    double v12 = v6;
    __int16 v13 = 2049;
    uint64_t v14 = v7;
    __int16 v15 = 1025;
    int v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:fetched most recent connection, startTime:%{private}f, endTime:%{private}f , vehicleConnected:%{private}hhd}",  (uint8_t *)v8,  0x2Cu);
  }

  sub_100317994(v4, v3);
}

void sub_100317994(uint64_t a1, int a2)
{
  if (*(double *)(a1 + 808) >= 0.0)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    double v6 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int8 *)(a1 + 802);
      int v8 = 68289539;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 1025;
      int v13 = v7;
      __int16 v14 = 1025;
      int v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:vehicle connected state changed, oldVehicleConnectionState:%{private}d, newVehicl eConnectionState:%{private}d}",  (uint8_t *)&v8,  0x1Eu);
    }

    *(_BYTE *)(a1 + 802) = a2;
    double v5 = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v4 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v8 = 68289283;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 1025;
      int v13 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:vehicle connected state changed, was unknown, newVehicleConnectionState:%{private}d}",  (uint8_t *)&v8,  0x18u);
    }

    *(_BYTE *)(a1 + 802) = a2;
    double v5 = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1) + -60.0;
  }

  *(double *)(a1 + 808) = v5;
}

uint64_t sub_100317B78(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 1208) != a2)
  {
    char v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      uint64_t v4 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        int v7 = 68289026;
        int v8 = 0;
        __int16 v9 = 2082;
        __int16 v10 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:starting battery monitoring}",  (uint8_t *)&v7,  0x12u);
      }

      uint64_t v5 = 23LL;
    }

    else
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      double v6 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        int v7 = 68289026;
        int v8 = 0;
        __int16 v9 = 2082;
        __int16 v10 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:stopping battery monitoring}",  (uint8_t *)&v7,  0x12u);
      }

      uint64_t v5 = 24LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 + 48) + 8 * v5))();
    *(_BYTE *)(v3 + 1208) = v2;
  }

  return result;
}

BOOL sub_100317D0C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 1072))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    char v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning: faking harvest eligibility}",  buf,  0x12u);
    }

    return 1LL;
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1) & 1) != 0)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    int v8 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Pos harvesting not eligible as gps harvetsing is ineligible",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      v10[0] = 0;
      __int16 v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "Pos harvesting not eligible as gps harvetsing is ineligible",  v10,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLHarvestController::isPosHarvestingEligible(const CLDaemonLocation &) const",  "%s\n",  v9);
      return 0LL;
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    double v6 = (os_log_s *)qword_1019349B8;
    BOOL result = os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO);
    if (result)
    {
      double v7 = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1) - *(double *)(a2 + 76);
      *(_DWORD *)std::string buf = 68289283;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2049;
      double v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:not harvesting, harvesting now allowed, age_s:%{private}.09f}",  buf,  0x1Cu);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10031800C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 132) | 2) != 2) {
    return 1LL;
  }
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  uint64_t v3 = (os_log_s *)qword_1019349B8;
  BOOL result = os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO);
  if (result)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 132);
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2049;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:WARN: location dropped due to referenceFrame, referenceFrame:%{private, location:CLCl ientLocationReferenceFrame}lld}",  (uint8_t *)v6,  0x1Cu);
    return 0LL;
  }

  return result;
}

uint64_t sub_100318110(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 187);
}

void sub_100318118(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
  sub_100316658(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 136) + 32LL))(*(void *)(a1 + 136), v3);
  sub_100318344(a1);
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4 != (void *)(a1 + 72))
  {
    do
    {
      if ((_DWORD)v3 && (unsigned int v5 = sub_10008D01C(v4[5]), sub_1003184A0(a1, v5))) {
        sub_1009B07B0(v4[5]);
      }
      else {
        sub_1009B0A44(v4[5]);
      }
      double v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          __int16 v7 = v6;
          double v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          __int16 v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }

        while (!v8);
      }

      uint64_t v4 = v7;
    }

    while (v7 != (void *)(a1 + 72));
  }

  sub_100318710(a1);
  if (v2 != (_DWORD)v3)
  {
    sub_100318344(a1);
    if ((_DWORD)v3)
    {
      sub_100317B78(a1, 1);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 168) + 24LL))(*(void *)(a1 + 168), 1LL);
      sub_100317628(a1, 1);
      int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 176LL))(*(void *)(a1 + 48));
      sub_100318924(a1, &v10);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 184LL))(*(void *)(a1 + 48), 6LL);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 184LL))(*(void *)(a1 + 48), 8LL);
    }

    else
    {
      sub_100317B78(a1, 0);
      (*(void (**)(void, void))(**(void **)(a1 + 136) + 32LL))(*(void *)(a1 + 136), 0LL);
      (*(void (**)(void, void))(**(void **)(a1 + 168) + 24LL))(*(void *)(a1 + 168), 0LL);
      sub_100317628(a1, 0);
      int v9 = 0;
      sub_100318924(a1, &v9);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192LL))(*(void *)(a1 + 48), 6LL);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192LL))(*(void *)(a1 + 48), 8LL);
      sub_1002A4B24(a1 + 1080);
      sub_1002A47B8(a1 + 1080);
    }

    sub_100318710(a1);
  }

void sub_100318344(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 973))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v1 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = 68289026;
      int v4 = 0;
      __int16 v5 = 2082;
      double v6 = "";
      int v2 = "{msg%{public}.0s:#uploadTimer already locked}";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, v2, (uint8_t *)&v3, 0x12u);
    }
  }

  else
  {
    *(_BYTE *)(a1 + 973) = 1;
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v1 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = 68289026;
      int v4 = 0;
      __int16 v5 = 2082;
      double v6 = "";
      int v2 = "{msg%{public}.0s:#uploadTimer locked}";
      goto LABEL_10;
    }
  }

BOOL sub_1003184A0(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = v15;
  if ((v15 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4)
  {
    uint64_t v5 = sub_10008E8D0(a1 + 1016, (const void **)__p);
    if (a1 + 1024 == v5)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      __int16 v7 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_ERROR))
      {
        BOOL v8 = (v15 & 0x80u) == 0 ? __p : (void **)__p[0];
        id v9 = -[__CFString UTF8String]((id)sub_10083CBB4(a2), "UTF8String");
        *(_DWORD *)std::string buf = 68289538;
        int v17 = 0;
        __int16 v18 = 2082;
        double v19 = "";
        __int16 v20 = 2082;
        double v21 = v8;
        __int16 v22 = 2082;
        id v23 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as no t authorized, SystemService:%{public, location:escape_only}s, Harvester:%{public, location:escape_only}s}",  buf,  0x26u);
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_101832930);
        }
      }

      int v10 = (os_log_s *)qword_1019349B8;
      if (os_signpost_enabled((os_log_t)qword_1019349B8))
      {
        if ((v15 & 0x80u) == 0) {
          __int16 v11 = __p;
        }
        else {
          __int16 v11 = (void **)__p[0];
        }
        id v12 = -[__CFString UTF8String]((id)sub_10083CBB4(a2), "UTF8String");
        *(_DWORD *)std::string buf = 68289538;
        int v17 = 0;
        __int16 v18 = 2082;
        double v19 = "";
        __int16 v20 = 2082;
        double v21 = v11;
        __int16 v22 = 2082;
        id v23 = v12;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as not authorized",  "{msg%{public}.0s:SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as no t authorized, SystemService:%{public, location:escape_only}s, Harvester:%{public, location:escape_only}s}",  buf,  0x26u);
      }

      BOOL v6 = 0LL;
    }

    else
    {
      BOOL v6 = *(_BYTE *)(v5 + 56) != 0;
    }
  }

  else
  {
    BOOL v6 = 1LL;
  }

  return v6;
}

void sub_1003186E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100318710(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 973))
  {
    *(_BYTE *)(a1 + 973) = 0;
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    int v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#uploadTimer unlocked}",  (uint8_t *)&v6,  0x12u);
    }

    if (*(_BYTE *)(a1 + 974))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v3 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 68289026;
        int v7 = 0;
        __int16 v8 = 2082;
        id v9 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:cleaning dirty #uploadTimer times}",  (uint8_t *)&v6,  0x12u);
      }

      double v4 = sub_100319CE4(a1);
      sub_1003198CC(a1, v4);
      *(_BYTE *)(a1 + 974) = 0;
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v5 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#uploadTimer already unlocked}",  (uint8_t *)&v6,  0x12u);
    }
  }

void sub_100318924(uint64_t a1, _DWORD *a2)
{
  LODWORD(v3) = *(_DWORD *)(a1 + 232);
  if ((_DWORD)v3 != *a2)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v5 = (os_log_s *)qword_1019349B8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO);
    uint64_t v3 = *a2;
    if (v6)
    {
      uint64_t v7 = *(unsigned int *)(a1 + 232);
      v8[0] = 68289539;
      v8[1] = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2049;
      uint64_t v12 = v7;
      __int16 v13 = 2049;
      uint64_t v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Reachability changed state, oldReachability:%{private, location:CLDaemonStatus_Type ::Reachability}lld, newReachability:%{private, location:CLDaemonStatus_Type::Reachability}lld}",  (uint8_t *)v8,  0x26u);
      LODWORD(v3) = *a2;
    }
  }

  *(_DWORD *)(a1 + 2memset(&buf[7], 0, 32) = v3;
}

BOOL sub_100318A48(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  uint64_t v3 = sub_100C38504();
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 168) + 104LL))(*(void *)(a1 + 168)) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1) & 1) != 0
    || v3[1] && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1) & 1) != 0)
  {
    return 1LL;
  }

  LOBYTE(v4) = *(_BYTE *)(a1 + 800);
  LOBYTE(v5) = *(_BYTE *)(a1 + 801);
  return v2 - (double)v5 < 60.0;
}

uint64_t sub_100318B30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 972);
}

uint64_t sub_100318B38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 320LL))(*(void *)(a1 + 48));
}

uint64_t sub_100318B48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 344LL))(*(void *)(a1 + 48));
}

void sub_100318B58(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  double v2 = (void *)(a1 + 72);
  if (v1 != (void *)(a1 + 72))
  {
    do
    {
      sub_1009B0CA8((unsigned int *)v1[5]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          unint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          unint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }

        while (!v5);
      }

      uint64_t v1 = v4;
    }

    while (v4 != v2);
  }

void *sub_100318BC0@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, *((char **)&off_101832990 + a1));
}

uint64_t sub_100318BD4(uint64_t **a1, uint64_t a2, int a3)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  BOOL v6 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    else {
      uint64_t v7 = *(unsigned __int8 **)a2;
    }
    *(_DWORD *)std::string buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2082;
    __int16 v13 = v7;
    __int16 v14 = 1026;
    int v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:update authorization, clientKey:%{public, location:escape_only}s, isAuthorized:%{public}hhd}",  buf,  0x22u);
  }

  *(void *)std::string buf = a2;
  *((_BYTE *)sub_10031C4EC(a1 + 127, (const void **)a2, (uint64_t)&unk_1012CF090, (__int128 **)buf) + 56) = a3;
  return ((uint64_t (*)(uint64_t **))(*a1)[5])(a1);
}

uint64_t sub_100318D48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1210);
}

void sub_100318D50(uint64_t a1, int a2)
{
  unint64_t v3 = v8;
  unsigned __int8 v4 = v8;
  if ((v8 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)__p[1];
  }
  if (v3)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101832970);
    }
    BOOL v5 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      BOOL v6 = __p;
      if ((v8 & 0x80u) != 0) {
        BOOL v6 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:markReceivingLocationInformation, Client:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    (*(void (**)(void, void **))(**(void **)(a1 + 48) + 64LL))(*(void *)(a1 + 48), __p);
    unsigned __int8 v4 = v8;
  }

  if ((v4 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_100318E88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100318EAC(uint64_t a1, uint64_t a2)
{
  if (sub_1002A3E68(a1 + 1080))
  {
    double v4 = *(double *)(a2 + 76) - *(double *)(a1 + 892);
    if (v4 < 3.0) {
      sub_1002A4CE4(a1 + 1080, v4);
    }
    if ((sub_1002581D4(a1 + 1080) & 1) == 0
      && (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 96LL))(*(void *)(a1 + 48)))
    {
      sub_1002A4D8C(a1 + 1080);
    }
  }

  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 8memset(&buf[7], 0, 32) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  __int128 v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 896) = v8;
  *(_OWORD *)(a1 + 848) = v6;
  *(_OWORD *)(a1 + 864) = v7;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v10 = *(_OWORD *)(a2 + 112);
  __int128 v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 956) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 928) = v10;
  *(_OWORD *)(a1 + 944) = v11;
  *(__n128 *)(a1 + 912) = result;
  return result;
}

double sub_100318F80(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_100318EAC(a1 - 32, a2).n128_u64[0];
  return result;
}

void sub_100318F88(uint64_t a1, int a2, int a3, uint64_t a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10031916C;
  void v8[3] = &unk_1018327C0;
  int v9 = a2;
  int v10 = a3;
  _DWORD v8[4] = a1;
  void v8[5] = a4;
  sub_100319030(a1, 2u, (uint64_t)v8);
  sub_100318710(a1);
}

void sub_100319030(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v17 = 0LL;
  __int16 v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v4 = *(void *)(a1 + 88) + 40LL * a2 + 16;
  __int128 v5 = (uint64_t **)(a1 + 64);
  while (1)
  {
    uint64_t v4 = *(void *)v4;
    if (!v4) {
      break;
    }
    __int16 v20 = (_DWORD *)(v4 + 16);
    __int128 v6 = sub_10031C390(v5, (int *)(v4 + 16), (uint64_t)&unk_1012CF090, &v20);
    sub_1000E8F38(&v17, (__int128 *)(v6 + 5));
  }

  __int128 v7 = v17;
  __int128 v8 = v18;
  while (v7 != v8)
  {
    int v9 = (std::__shared_weak_count *)*((void *)v7 + 1);
    uint64_t v15 = *(void *)v7;
    double v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t, uint64_t *))(a3 + 16))(a3, &v15);
    __int16 v12 = v16;
    if (v16)
    {
      __int16 v13 = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    v7 += 16;
  }

  double v21 = &v17;
  sub_10004CC28((void ***)&v21);
}

void sub_100319140( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v11 - 40) = &a11;
  sub_10004CC28((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_10031916C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = sub_10008D01C(*a2);
  sub_100318D50(v4, v5);
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)*a2 + 16LL))( *a2,  *(unsigned int *)(a1 + 48),  *(unsigned int *)(a1 + 52),  *(void *)(a1 + 40));
}

void sub_1003191C0(uint64_t a1, int a2, int a3, uint64_t a4)
{
}

uint64_t sub_1003191C8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 217) != *(unsigned __int8 *)(a2 + 9))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v4 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v5 = "Connected";
      int v6 = *(unsigned __int8 *)(a1 + 217);
      if (*(_BYTE *)(a2 + 9)) {
        __int128 v7 = "Connected";
      }
      else {
        __int128 v7 = "Disconnected";
      }
      v11[0] = 68289539;
      if (!v6) {
        int v5 = "Disconnected";
      }
      v11[1] = 0;
      __int16 v12 = 2082;
      __int16 v13 = "";
      __int16 v14 = 2081;
      uint64_t v15 = v7;
      __int16 v16 = 2081;
      int v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Battery changed state, oldBatteryState:%{private, location:escape_only}s, newBatt eryState:%{private, location:escape_only}s}",  (uint8_t *)v11,  0x26u);
    }
  }

  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)a2;
  *(void *)(a1 + 224) = v8;
  float v9 = *(double *)(a1 + 208);
  sub_1002A4D98(a1 + 1080, *(unsigned __int8 *)(a1 + 217), v9);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 88LL))(*(void *)(a1 + 136), a1 + 208);
}

void sub_100319340(uint64_t a1, int a2)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  uint64_t v4 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 1026;
    int v18 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onThermalStatusNotification, thermalLevel:%{public}d}",  (uint8_t *)&v13,  0x18u);
  }

  int v5 = *(unsigned __int8 *)(a1 + 188);
  int v6 = *(unsigned __int8 *)(a1 + 189);
  *(_DWORD *)(a1 + 192) = a2;
  int v7 = *(_DWORD *)(a1 + 196);
  if (v7 <= a2)
  {
    int v8 = 0;
    *(_BYTE *)(a1 + 189) = 0;
    if (v7 >= a2) {
      goto LABEL_11;
    }
    int v8 = 0;
    *(_BYTE *)(a1 + 188) = 0;
  }

  else
  {
    if (*(_DWORD *)(a1 + 200) < a2) {
      return;
    }
    *(_WORD *)(a1 + 188) = 257;
    int v8 = 1;
  }

  if (v5 != v8)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    float v9 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v10 = *(unsigned __int8 *)(a1 + 188);
      int v13 = 68289283;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1025;
      int v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:thermal (low cpu tasks) transition, acceptable:%{private}hhd}",  (uint8_t *)&v13,  0x18u);
    }

    goto LABEL_18;
  }

uint64_t sub_1003195E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 184);
}

uint64_t sub_1003195E8(uint64_t a1)
{
  if (*(int *)(a1 + 192) >= 10)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v2 = qword_1019349B8;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      int v4 = *(_DWORD *)(a1 + 192);
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 1025;
      int v19 = v4;
      int v5 = "{msg%{public}.0s:thermal level is too high - no network request, thermalLevel:%{private}d}";
      int v6 = (os_log_s *)v2;
      os_log_type_t v7 = OS_LOG_TYPE_INFO;
      uint32_t v8 = 24;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v14, v8);
      return 0LL;
    }

    return result;
  }

  int v9 = *(_DWORD *)(a1 + 232);
  if (v9 == 1)
  {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
    if (v11)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v12 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        int v14 = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:currently have active or held calls - no network requests over cellular}",  (uint8_t *)&v14,  0x12u);
      }
    }

    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v13 = qword_1019349B8;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      int v14 = 68289026;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      int v5 = "{msg%{public}.0s:currently roaming - no network requests over cellular}";
      int v6 = (os_log_s *)v13;
      os_log_type_t v7 = OS_LOG_TYPE_INFO;
      goto LABEL_22;
    }
  }

  else
  {
    if (v9) {
      return 1LL;
    }
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v10 = qword_1019349B8;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      int v14 = 68289026;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      int v5 = "{msg%{public}.0s:no data available - no network requests}";
      int v6 = (os_log_s *)v10;
      os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
LABEL_22:
      uint32_t v8 = 18;
      goto LABEL_23;
    }
  }

  return result;
}

void sub_1003198CC(uint64_t a1, double a2)
{
  double v2 = a2;
  if (*(double *)(a1 + 976) == a2)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v3 = qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2049;
      double v19 = v2;
      int v4 = "{msg%{public}.0s:#uploadTimer already set to this time, uploadTimerFireTime_s:%{private}.09f}";
LABEL_11:
      int v6 = (os_log_s *)v3;
      os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
LABEL_12:
      uint32_t v8 = 28;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v4, (uint8_t *)&v14, v8);
    }
  }

  else if (*(_BYTE *)(a1 + 973))
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v3 = qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2049;
      double v19 = v2;
      int v4 = "{msg%{public}.0s:#uploadTimer locked, ignoring timer update request, uploadTimerFireTime_s:%{private}.09f}";
      goto LABEL_11;
    }
  }

  else if (*(_BYTE *)(a1 + 257))
  {
    double v9 = *(double *)(a1 + 984);
    if (v9 != 1.79769313e308 && v9 + 3.0 > v2)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v11 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 68289539;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        __int16 v18 = 2049;
        double v19 = v2;
        __int16 v20 = 2049;
        uint64_t v21 = 0x4008000000000000LL;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#uploadTimer fired twice quickly, adding delay, uploadTimerFireTime_s:%{private }.09f, uploadDelay_s:%{private}.09f}",  (uint8_t *)&v14,  0x26u);
      }

      double v2 = *(double *)(a1 + 984) + 3.0;
    }

    (*(void (**)(void, double))(**(void **)(a1 + 1056) + 24LL))(*(void *)(a1 + 1056), v2);
    *(double *)(a1 + 976) = v2;
    if (v2 == 1.79769313e308)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      uint64_t v12 = qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        int v4 = "{msg%{public}.0s:#uploadTimer disabled}";
        int v6 = (os_log_s *)v12;
        os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
        uint32_t v8 = 18;
        goto LABEL_13;
      }
    }

    else
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      uint64_t v13 = qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 68289283;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        __int16 v18 = 2049;
        double v19 = v2;
        int v4 = "{msg%{public}.0s:#uploadTimer fire date set, uploadTimerFireTime_s:%{private}.09f}";
        int v6 = (os_log_s *)v13;
        os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_12;
      }
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v3 = qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2049;
      double v19 = v2;
      int v4 = "{msg%{public}.0s:Upload requirements not met, ignoring #uploadTimer update request, uploadTimerFire"
           "Time_s:%{private}.09f}";
      goto LABEL_11;
    }
  }

double sub_100319CE4(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 112);
  if (v1 == (double *)(a1 + 120))
  {
    double v2 = 1.79769313e308;
  }

  else
  {
    double v2 = 1.79769313e308;
    do
    {
      if (v1[5] < v2) {
        double v2 = v1[5];
      }
      uint64_t v3 = (double *)*((void *)v1 + 1);
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = *(double **)v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          int v4 = (double *)*((void *)v1 + 2);
          BOOL v5 = *(void *)v4 == (void)v1;
          uint64_t v1 = v4;
        }

        while (!v5);
      }

      uint64_t v1 = v4;
    }

    while (v4 != (double *)(a1 + 120));
  }

  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  int v6 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v12 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "getNextUploadTime: min time: %f", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    int v9 = 134217984;
    double v10 = v2;
    uint32_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  1LL,  "getNextUploadTime: min time: %f",  COERCE_DOUBLE(&v9));
    sub_10029211C("Generic", 1LL, 0, 2LL, "CFAbsoluteTime CLHarvestController::getNextUploadTime()", "%s\n", v8);
  }

  return v2;
}

void sub_100319EF4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 257);
  (*(void (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  uint64_t v4 = 368LL;
  if (!v2) {
    uint64_t v4 = 376LL;
  }
  *(double *)(a1 + v4) = v3 - *(double *)(a1 + 384) + *(double *)(a1 + v4);
  *(double *)(a1 + 384) = v3;
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  BOOL v5 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 336);
    int v7 = *(_DWORD *)(a1 + 340);
    int v8 = *(_DWORD *)(a1 + 344);
    int v9 = *(_DWORD *)(a1 + 348);
    int v10 = *(_DWORD *)(a1 + 352);
    int v11 = *(_DWORD *)(a1 + 356);
    int v12 = *(_DWORD *)(a1 + 360);
    uint64_t v13 = *(void *)(a1 + 368);
    uint64_t v14 = *(void *)(a1 + 376);
    *(void *)__int16 v20 = 68291331LL;
    *(_WORD *)&v20[8] = 2082;
    *(void *)&v20[10] = "";
    *(_WORD *)&v20[18] = 1025;
    *(_DWORD *)&v20[20] = v6;
    *(_WORD *)&_BYTE v20[24] = 1025;
    *(_DWORD *)&v20[26] = v7;
    *(_WORD *)&v20[30] = 1025;
    *(_DWORD *)uint64_t v21 = v8;
    *(_WORD *)&v21[4] = 1025;
    *(_DWORD *)&v21[6] = v9;
    *(_WORD *)&v21[10] = 1025;
    *(_DWORD *)&v21[12] = v10;
    *(_WORD *)&v21[16] = 1025;
    *(_DWORD *)&v21[18] = v11;
    *(_WORD *)&v21[22] = 1025;
    *(_DWORD *)__int16 v22 = v12;
    *(_WORD *)&v22[4] = 2049;
    *(void *)&v22[6] = v13;
    *(_WORD *)&v22[14] = 2049;
    *(void *)&v22[16] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:MainHarvesterMetrics, reachabilityNotifications:%{private}d, batteryNotifications :%{private}d, thermalNotifications:%{private}d, locationNotifications:%{private}d, rawsGpsNotifications :%{private}d, validatedGpsNotifications:%{private}d, managerNotifications:%{private}d, durationMinimumUp loadRequirementsMet:%{private}f, durationMinimumUploadRequirementsNotMet:%{private}f}",  v20,  0x50u);
  }

  *(double *)(a1 + 280) = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  sub_10031415C(a1, (uint64_t)v20);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)v20;
  int v15 = (void **)(a1 + 288);
  *(_OWORD *)int v15 = *(_OWORD *)&v20[16];
  *(void *)(a1 + 304) = *(void *)v21;
  v21[7] = 0;
  v20[16] = 0;
  __int16 v16 = (_OWORD *)(a1 + 312);
  if (*(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    int v18 = v21[7];
    *__int16 v16 = *(_OWORD *)&v21[8];
    *(void *)(a1 + 328) = *(void *)v22;
    v22[7] = 0;
    v21[8] = 0;
    __int128 v19 = v23;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)&v22[8];
    *(_OWORD *)(a1 + 352) = v19;
    *(_OWORD *)(a1 + 368) = v24;
    if (v18 < 0) {
      operator delete(*(void **)&v20[16]);
    }
  }

  else
  {
    *__int16 v16 = *(_OWORD *)&v21[8];
    *(void *)(a1 + 328) = *(void *)v22;
    __int128 v17 = v23;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)&v22[8];
    *(_OWORD *)(a1 + 352) = v17;
    *(_OWORD *)(a1 + 368) = v24;
  }

double sub_10031A140(uint64_t a1)
{
  uint64_t v2 = a1 + 836;
  double v3 = *(void **)(a1 + 64);
  uint64_t v4 = (void *)(a1 + 72);
  if (v3 != (void *)(a1 + 72))
  {
    do
    {
      sub_1009B0CA8((unsigned int *)v3[5]);
      BOOL v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          BOOL v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          int v6 = (void *)v3[2];
          _ZF = *v6 == (void)v3;
          double v3 = v6;
        }

        while (!_ZF);
      }

      double v3 = v6;
    }

    while (v6 != v4);
  }

  (*(void (**)(void))(**(void **)(a1 + 152) + 64LL))(*(void *)(a1 + 152));
  *(_DWORD *)(a1 + 816) = 0xFFFF;
  *(void *)(a1 + 828) = 0LL;
  *(void *)(a1 + 820) = 0LL;
  double result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)uint64_t v2 = xmmword_1012E0070;
  *(_OWORD *)(v2 + 16) = _Q1;
  *(_OWORD *)(v2 + memset(&buf[7], 0, 32) = _Q1;
  *(_OWORD *)(v2 + 48) = _Q1;
  *(_DWORD *)(a1 + 900) = 0;
  *(void *)(a1 + 904) = 0xBFF0000000000000LL;
  *(void *)(a1 + 920) = 0LL;
  *(void *)(a1 + 912) = 0LL;
  *(_DWORD *)(a1 + 928) = 0;
  *(void *)(v2 + 96) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 940) = 0x7FFFFFFF;
  *(void *)(a1 + 944) = 0LL;
  *(void *)(a1 + 960) = 0LL;
  *(void *)(a1 + 952) = 0LL;
  *(_BYTE *)(a1 + 968) = 0;
  return result;
}

uint64_t sub_10031A224(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24LL))(*(void *)(a1 + 48));
}

uint64_t sub_10031A234(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 32LL))(*(void *)(a1 + 48));
}

BOOL sub_10031A244(uint64_t a1)
{
  return *(_DWORD *)(a1 + 664) == 6;
}

uint64_t sub_10031A254(uint64_t a1)
{
  return (*(unsigned int *)(a1 + 664) < 0x39uLL) & (0x110000000000C20uLL >> *(_DWORD *)(a1 + 664));
}

BOOL sub_10031A274(uint64_t a1)
{
  return *(_DWORD *)(a1 + 664) == 8;
}

BOOL sub_10031A284(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 664);
  return v1 == 4 || v1 == 41;
}

uint64_t sub_10031A29C(uint64_t a1)
{
  return a1 + 392;
}

uint64_t sub_10031A2A4(uint64_t a1)
{
  return a1 + 528;
}

uint64_t sub_10031A2AC(uint64_t a1)
{
  return a1 + 664;
}

BOOL sub_10031A2B4(double *a1)
{
  BOOL v1 = a1[101] > 0.0;
  return (*(double (**)(double *))(*(void *)a1 + 64LL))(a1) - a1[101] <= 30.0 && v1;
}

uint64_t sub_10031A2FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 802);
}

void sub_10031A304(double *a1)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)a1 + 124);
    uint64_t v4 = *((void *)a1 + 31);
    v10[0] = 68289539;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2049;
    uint64_t v14 = v3;
    __int16 v15 = 2049;
    uint64_t v16 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#pruneTimer fired, lastPruneTime_s:%{private}.09f, maxHarvestAge_s:%{private}.09f}",  (uint8_t *)v10,  0x26u);
  }

  a1[124] = (*(double (**)(double *))(*(void *)a1 + 64LL))(a1);
  BOOL v5 = (void *)*((void *)a1 + 8);
  int v6 = a1 + 9;
  if (v5 != v6)
  {
    do
    {
      sub_1009B0B64((unsigned int *)v5[5]);
      int v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          BOOL v5 = v8;
        }

        while (!v9);
      }

      BOOL v5 = v8;
    }

    while (v8 != v6);
  }

void sub_10031A45C(uint64_t a1)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  uint64_t v2 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 68289026;
    int v5 = 0;
    __int16 v6 = 2082;
    int v7 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#uploadTimer fired}",  (uint8_t *)&v4,  0x12u);
  }

  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1) & 1) != 0)
  {
    sub_100314638(a1);
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    uint64_t v3 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 68289026;
      int v5 = 0;
      __int16 v6 = 2082;
      int v7 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#uploadTimer upload requirements not met, skipping upload}",  (uint8_t *)&v4,  0x12u);
    }
  }

void sub_10031A5DC(uint64_t a1, signed int a2, double a3)
{
  unsigned int v21 = a2;
  uint64_t v3 = *(void *)(a1 + 72);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 72;
  do
  {
    signed int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v3;
    }
    else {
      BOOL v9 = (uint64_t *)(v3 + 8);
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }

  while (*v9);
  if (v6 == a1 + 72 || *(_DWORD *)(v6 + 32) > a2)
  {
LABEL_11:
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    int v10 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      __int128 v24 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unknown SubHarvester notifying of #uploadTimer fire date.}",  buf,  0x12u);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
    }

    __int16 v11 = (os_log_s *)qword_1019349B8;
    if (os_signpost_enabled((os_log_t)qword_1019349B8))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      __int128 v24 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unknown SubHarvester notifying of #uploadTimer fire date.",  "{msg%{public}.0s:Unknown SubHarvester notifying of #uploadTimer fire date.}",  buf,  0x12u);
    }

    return;
  }

  *(void *)std::string buf = &v21;
  if (*((double *)sub_10000C858((uint64_t **)(a1 + 112), (int *)&v21, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5) != a3)
  {
    *(void *)std::string buf = &v21;
    *((double *)sub_10000C858((uint64_t **)(a1 + 112), (int *)&v21, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5) = a3;
    if (a3 == 1.79769313e308)
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      uint64_t v13 = qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      __int128 v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = v21;
      uint64_t v14 = "{msg%{public}.0s:#uploadTimer invalid time reported, subHarvester:%{public, location:CLSubHarves"
            "terIdentifier}lld}";
      __int16 v15 = (os_log_s *)v13;
      uint32_t v16 = 28;
    }

    else
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      uint64_t v17 = qword_1019349B8;
      if (!os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      uint64_t v18 = v21;
      double v19 = (*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
      *(_DWORD *)std::string buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      __int128 v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = v18;
      __int16 v27 = 2049;
      double v28 = a3;
      __int16 v29 = 2049;
      double v30 = a3 - v19;
      uint64_t v14 = "{msg%{public}.0s:#uploadTimer upload time set, subHarvester:%{public, location:CLSubHarvesterIde"
            "ntifier}lld, notifiedAttemptTime_s:%{private}.09f, timeUntilAttempt_s:%{private}.09f}";
      __int16 v15 = (os_log_s *)v17;
      uint32_t v16 = 48;
    }

    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
LABEL_34:
    if (*(_BYTE *)(a1 + 973))
    {
      *(_BYTE *)(a1 + 974) = 1;
    }

    else
    {
      double v20 = sub_100319CE4(a1);
      sub_1003198CC(a1, v20);
    }

    return;
  }

  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  int v12 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v23 = 2082;
    __int128 v24 = "";
    __int16 v25 = 2050;
    uint64_t v26 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:next attempt time is equal to existing attempt time, subHarvester:%{public, location: CLSubHarvesterIdentifier}lld}",  buf,  0x1Cu);
  }

void *sub_10031AA14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 264))
  {
    int v4 = -[CLKeychainItemWrapper initWithIdentifier:keyType:]( objc_alloc(&OBJC_CLASS___CLKeychainItemWrapper),  "initWithIdentifier:keyType:",  @"HarvesterMetricsUUID",  kSecAttrAccount);
    int v5 = -[CLKeychainItemWrapper objectForKey:](v4, "objectForKey:", kSecValueData);
    if (!v5)
    {
      int v5 = -[NSUUID UUIDString](+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"), "UUIDString");
      -[CLKeychainItemWrapper setObject:forKey:](v4, "setObject:forKey:", &__kCFBooleanTrue, kSecAttrIsInvisible);
      -[CLKeychainItemWrapper setObject:forKey:]( v4,  "setObject:forKey:",  kSecAttrAccessibleAlwaysThisDeviceOnly,  kSecAttrAccessible);
      -[CLKeychainItemWrapper setObject:forKey:](v4, "setObject:forKey:", v5, kSecValueData);
    }

    *(void *)(a1 + 264) = v5;
  }

  uint64_t v6 = -[NSCalendar components:fromDate:]( +[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"),  "components:fromDate:",  12LL,  +[NSDate date](&OBJC_CLASS___NSDate, "date"));
  -[NSDateComponents setMonth:](v6, "setMonth:", -[NSDateComponents month](v6, "month") > 6);
  signed int v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@%ld%ld",  *(void *)(a1 + 264),  -[NSDateComponents year](v6, "year"),  -[NSDateComponents month](v6, "month"));
  BOOL v8 = -[NSString dataUsingEncoding:](v7, "dataUsingEncoding:", 4LL);

  CC_SHA1(-[NSData bytes](v8, "bytes"), (CC_LONG)-[NSData length](v8, "length"), md);
  id v9 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
  for (uint64_t i = 0LL; i != 20; ++i)
    objc_msgSend(v9, "appendFormat:", @"%02x", md[i]);
  return sub_1010DDBC0(a2, (char *)[v9 UTF8String]);
}

void sub_10031AC40(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  if (*a4) {
    return;
  }
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  BOOL v8 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:data protection is becoming re-enabled}",  buf,  0x12u);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10031AF4C;
  v12[3] = &unk_1018327E0;
  int v13 = a2;
  int v14 = a3;
  v12[4] = a4;
  sub_100319030(a1, 9u, (uint64_t)v12);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1) & 1) != 0)
  {
    (*(void (**)(void))(**(void **)(a1 + 1056) + 16LL))(*(void *)(a1 + 1056));
    if ((*(double (**)(uint64_t))(*(void *)a1 + 64LL))(a1) - *(double *)(a1 + 1008) >= *(double *)(a1 + 1000))
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      __int16 v11 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:starting DataProtection-initiated upload}",  buf,  0x12u);
      }

      sub_100314638(a1);
    }

    else
    {
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      id v9 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        int v10 = "{msg%{public}.0s:uploaded too recently, skipping DataProtection-initiated upload}";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v10, buf, 0x12u);
      }
    }
  }

  else
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    id v9 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      int v10 = "{msg%{public}.0s:upload requirements not met, skipping DataProtection-initiated upload}";
      goto LABEL_17;
    }
  }

uint64_t sub_10031AF4C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)*a2 + 48LL))( *a2,  *(unsigned int *)(a1 + 40),  a1 + 44,  *(void *)(a1 + 32));
}

void sub_10031AF6C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1))
  {
    switch(a3)
    {
      case 5:
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 192LL))(a1, a4))
        {
          sub_100318344(a1);
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472LL;
          _DWORD v14[2] = sub_10031B2AC;
          v14[3] = &unk_1018327C0;
          int v15 = a2;
          int v16 = 5;
          v14[4] = a1;
          v14[5] = a4;
          sub_100319030(a1, 1u, (uint64_t)v14);
          sub_100318710(a1);
        }

        break;
      case 46:
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_101832930);
        }
        BOOL v8 = (os_log_s *)qword_1019349B8;
        if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = *(_DWORD *)(a4 + 1512);
          uint64_t v10 = *(void *)(a4 + 1520);
          *(_DWORD *)std::string buf = 68289538;
          int v18 = 0;
          __int16 v19 = 2082;
          double v20 = "";
          __int16 v21 = 1026;
          LODWORD(v22[0]) = v9;
          WORD2(v22[0]) = 2050;
          *(void *)((char *)v22 + 6) = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLProactiveLoc ntfy, sessionState:%{public}d, sec_s:%{public}.09f}",  buf,  0x22u);
        }

        uint64_t v11 = *(void *)(a1 + 152);
        if (v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 112LL))(v11, a4 + 1512);
        }
        break;
      case 13:
        (*(void (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
        break;
      default:
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_101832930);
        }
        int v12 = (os_log_s *)qword_1019349B8;
        if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 68289283;
          int v18 = 0;
          __int16 v19 = 2082;
          double v20 = "";
          __int16 v21 = 2049;
          v22[0] = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Harvester received an un-registered location notification, notification:%{priva te, location:CLLocationProvider_Type::Notification}lld}",  buf,  0x1Cu);
          if (qword_1019349B0 != -1) {
            dispatch_once(&qword_1019349B0, &stru_101832930);
          }
        }

        int v13 = (os_log_s *)qword_1019349B8;
        if (os_signpost_enabled((os_log_t)qword_1019349B8))
        {
          *(_DWORD *)std::string buf = 68289283;
          int v18 = 0;
          __int16 v19 = 2082;
          double v20 = "";
          __int16 v21 = 2049;
          v22[0] = a3;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Harvester received an un-registered location notification",  "{msg%{public}.0s:Harvester received an un-registered location notification, notification:%{priva te, location:CLLocationProvider_Type::Notification}lld}",  buf,  0x1Cu);
        }

        break;
    }
  }

uint64_t sub_10031B2AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = sub_10008D01C(*a2);
  sub_100318D50(v4, v5);
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)*a2 + 24LL))( *a2,  *(unsigned int *)(a1 + 48),  *(unsigned int *)(a1 + 52),  *(void *)(a1 + 40));
}

void sub_10031B300(_BYTE *a1, int a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    sub_100317994((uint64_t)a1, *(unsigned __int8 *)(a4 + 48));
    uint64_t v20 = (uint64_t)(a1 + 1080);
    if (a1[802]) {
      sub_1002A4978(v20);
    }
    else {
      sub_1002A4B24(v20);
    }
    *(_OWORD *)(a1 + 392) = *(_OWORD *)a4;
    __int128 v21 = *(_OWORD *)(a4 + 16);
    __int128 v22 = *(_OWORD *)(a4 + 32);
    __int128 v23 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 456) = v23;
    *(_OWORD *)(a1 + 408) = v21;
    *(_OWORD *)(a1 + 424) = v22;
    __int128 v24 = *(_OWORD *)(a4 + 80);
    __int128 v25 = *(_OWORD *)(a4 + 96);
    __int128 v26 = *(_OWORD *)(a4 + 112);
    *((void *)a1 + 65) = *(void *)(a4 + 128);
    *(_OWORD *)(a1 + 488) = v25;
    *(_OWORD *)(a1 + 504) = v26;
    *(_OWORD *)(a1 + 472) = v24;
    *((void *)a1 + 49) = *((void *)a1 + 60);
    __int128 v27 = *(_OWORD *)(a4 + 80);
    __int128 v28 = *(_OWORD *)(a4 + 96);
    __int128 v29 = *(_OWORD *)(a4 + 112);
    *((void *)a1 + 82) = *(void *)(a4 + 128);
    *((_OWORD *)a1 + 39) = v28;
    *((_OWORD *)a1 + 40) = v29;
    *((_OWORD *)a1 + 38) = v27;
    __int128 v30 = *(_OWORD *)(a4 + 16);
    __int128 v31 = *(_OWORD *)(a4 + 32);
    __int128 v32 = *(_OWORD *)(a4 + 64);
    *((_OWORD *)a1 + 36) = *(_OWORD *)(a4 + 48);
    *((_OWORD *)a1 + 37) = v32;
    *((_OWORD *)a1 + 34) = v30;
    *((_OWORD *)a1 + 35) = v31;
    *((_OWORD *)a1 + 33) = *(_OWORD *)a4;
    goto LABEL_26;
  }

  if (a3 == 3)
  {
    if (*((_DWORD *)a1 + 166) == *(_DWORD *)a4) {
      return;
    }
    BOOL v8 = a1 + 664;
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    int v9 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68290051;
      int v40 = 0;
      __int16 v41 = 2082;
      int v42 = "";
      __int16 v43 = 1040;
      int v44 = 136;
      __int16 v45 = 2097;
      int v46 = a1 + 664;
      __int16 v47 = 1040;
      int v48 = 136;
      __int16 v49 = 2097;
      uint64_t v50 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:dominant motion activity changed, oldDominantActivity:%{private, location:CLMotionA ctivity}.*P, newDominantActivity:%{private, location:CLMotionActivity}.*P}",  buf,  0x32u);
    }

    int v10 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 136LL))(a1);
    int v11 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 144LL))(a1);
    _OWORD *v8 = *(_OWORD *)a4;
    __int128 v12 = *(_OWORD *)(a4 + 64);
    __int128 v14 = *(_OWORD *)(a4 + 16);
    __int128 v13 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 728) = v12;
    *(_OWORD *)(a1 + 680) = v14;
    *(_OWORD *)(a1 + 696) = v13;
    __int128 v16 = *(_OWORD *)(a4 + 96);
    __int128 v15 = *(_OWORD *)(a4 + 112);
    __int128 v17 = *(_OWORD *)(a4 + 80);
    *((void *)a1 + 99) = *(void *)(a4 + 128);
    *(_OWORD *)(a1 + 760) = v16;
    *(_OWORD *)(a1 + 776) = v15;
    *(_OWORD *)(a1 + 744) = v17;
    double v18 = (*(double (**)(_BYTE *))(*(void *)a1 + 64LL))(a1);
    if ((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 136LL))(a1))
    {
      BOOL v19 = 1;
    }

    else
    {
      if (!v10) {
        goto LABEL_17;
      }
      BOOL v19 = v18 != 0.0;
    }

    a1[800] = v19;
LABEL_17:
    if ((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 144LL))(a1))
    {
      BOOL v33 = 1;
    }

    else
    {
      if (!v11)
      {
LABEL_22:
        int v34 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 128LL))(a1);
        uint64_t v35 = (uint64_t)(a1 + 1080);
        if (v34) {
          sub_1002A460C(v35);
        }
        else {
          sub_1002A47B8(v35);
        }
        (*(void (**)(_BYTE *))(*(void *)a1 + 40LL))(a1);
        goto LABEL_26;
      }

      BOOL v33 = v18 != 0.0;
    }

    a1[801] = v33;
    goto LABEL_22;
  }

uint64_t sub_10031B628(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)*a2 + 32LL))( *a2,  *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44),  *(void *)(a1 + 32));
}

void sub_10031B644(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  switch(a3)
  {
    case 4:
      uint64_t v8 = qword_101994278;
      uint64_t v9 = qword_101994280;
      while (v8 != v9)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 56LL))(*(void *)(a1 + 48), v8);
        v8 += 24LL;
      }

      if (*(_DWORD *)(a4 + 188) != 1)
      {
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_101832930);
        }
        __int128 v15 = (os_log_s *)qword_1019349B8;
        if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
        {
          std::string __p = (void *)68289026;
          __int16 v21 = 2082;
          __int128 v22 = "";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:location services disabled, clearing all local cache}",  (uint8_t *)&__p,  0x12u);
        }

        sub_10031A140(a1);
      }

      break;
    case 2:
      if (!*(_BYTE *)(a4 + 97))
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
        return;
      }

      sub_100FE3FB4(a4, (uint64_t)v18);
      if (sub_1000AC7C8(qword_101994278, qword_101994280, (unsigned __int8 **)v18) == qword_101994280)
      {
        if (qword_1019349B0 != -1) {
          dispatch_once(&qword_1019349B0, &stru_101832930);
        }
        __int128 v16 = (os_log_s *)qword_1019349B8;
        if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
        {
          __int128 v17 = v18;
          if (v19 < 0) {
            __int128 v17 = (void **)v18[0];
          }
          std::string __p = (void *)68289282;
          __int16 v21 = 2082;
          __int128 v22 = "";
          __int16 v23 = 2082;
          __int128 v24 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onManagerNotification: auth changed received for SS not used in harvesting. skip auth caching., SystemService:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x1Cu);
        }
      }

      else
      {
        uint64_t v10 = *(void *)(a1 + 48);
        sub_100FE3FB4(a4, (uint64_t)&__p);
        (*(void (**)(uint64_t, void **))(*(void *)v10 + 56LL))(v10, &__p);
        if (SBYTE3(v24) < 0) {
          operator delete(__p);
        }
      }

      if (v19 < 0)
      {
        __int128 v14 = v18[0];
        goto LABEL_38;
      }

      break;
    case 0:
      uint64_t v6 = qword_101994278;
      uint64_t v7 = qword_101994280;
      while (v6 != v7)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 56LL))(*(void *)(a1 + 48), v6);
        v6 += 24LL;
      }

      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      int v11 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        std::string __p = (void *)68289026;
        __int16 v21 = 2082;
        __int128 v22 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:location services reset, clearing all local cache}",  (uint8_t *)&__p,  0x12u);
      }

      id v12 = objc_msgSend( objc_msgSend(*(id *)(a1 + 40), "vendor", sub_10031A140(a1)),  "proxyForService:",  @"CLClientManager");
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 48) + 416LL))(&__p);
      __int128 v13 = SBYTE3(v24) >= 0 ? &__p : (void **)__p;
      objc_msgSend( v12,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
      if (SBYTE3(v24) < 0)
      {
        __int128 v14 = __p;
LABEL_38:
        operator delete(v14);
      }

      break;
  }

void sub_10031BA18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10031BA68(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  switch(a3)
  {
    case 6:
      sub_100318924((uint64_t)a1, a4 + 1);
      break;
    case 7:
      sub_1003191C8((uint64_t)a1, (uint64_t)a4);
      break;
    case 8:
      a1[184] = *(_BYTE *)a4;
      break;
    case 13:
      sub_100319340((uint64_t)a1, *a4);
      break;
    case 15:
      a1[256] = *(_BYTE *)a4;
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
      uint64_t v8 = (os_log_s *)qword_1019349B8;
      if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
      {
        int v9 = a1[256];
        *(_DWORD *)std::string buf = 68289283;
        int v14 = 0;
        __int16 v15 = 2082;
        __int128 v16 = "";
        __int16 v17 = 1025;
        int v18 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:battery save mode state update, batterySaverEnabled:%{private}hhd}",  buf,  0x18u);
      }

      (*(void (**)(unsigned __int8 *))(*(void *)a1 + 40LL))(a1);
      break;
    default:
      break;
  }

  sub_100314850(a1);
  sub_100318344((uint64_t)a1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _DWORD v10[2] = sub_10031BC68;
  v10[3] = &unk_1018327E0;
  int v11 = a2;
  int v12 = a3;
  v10[4] = a4;
  sub_100319030((uint64_t)a1, 0, (uint64_t)v10);
  sub_100318710((uint64_t)a1);
}

uint64_t sub_10031BC68(uint64_t a1, uint64_t *a2)
{
  return sub_1009AFDD0(*a2, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(void *)(a1 + 32));
}

void sub_10031BC7C(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_1019349B0 != -1) {
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }
  uint64_t v6 = (os_log_s *)qword_1019349B8;
  if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
  {
    [a3 type];
    *(_DWORD *)std::string buf = 68289539;
    int v9 = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 1025;
    BOOL v13 = a3 != 0LL;
    __int16 v14 = 2049;
    id v15 = [a3 type];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onVisit, validLocationOfInterest:%{private}hhd, locationOfInterestType:%{private, location:RTLocationOfInterestType}lld}",  buf,  0x22u);
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10031BDE0;
  v7[3] = &unk_101832808;
  v7[5] = a3;
  v7[6] = a1;
  _DWORD v7[4] = a2;
  sub_100319030(a1, 7u, (uint64_t)v7);
}

uint64_t sub_10031BDE0(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[6];
  int v5 = sub_10008D01C(*a2);
  sub_100318D50(v4, v5);
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)*a2 + 64LL))(*a2, a1[4], a1[5]);
}

void sub_10031BE30(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_10031BE88;
  v4[3] = &unk_101832828;
  int v5 = a2;
  v4[4] = a3;
  v4[5] = a4;
  sub_100319030(a1, 8u, (uint64_t)v4);
}

uint64_t sub_10031BE88(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)*a2 + 72LL))( *a2,  *(unsigned int *)(a1 + 48),  **(unsigned int **)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_10031BEA8(uint64_t a1, int a2, void *a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768LL;
  v9[2] = sub_10031BF78;
  v9[3] = &unk_101832848;
  int v11 = a2;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  _DWORD v9[4] = *a3;
  __int16 v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  sub_100319030(a1, 6u, (uint64_t)v9);
  uint64_t v6 = v10;
  if (v10)
  {
    uint64_t v7 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_10031BF64(_Unwind_Exception *a1)
{
}

void sub_10031BF78(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v12 = v6;
  BOOL v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 56LL))(v3, v4, &v12);
  int v9 = v13;
  if (v13)
  {
    __int16 v10 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_10031C00C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10031C020(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + memset(&buf[7], 0, 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_10031C044(uint64_t a1)
{
  return sub_10000AE14(a1 + 32);
}

uint64_t sub_10031C04C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 408LL))(*(void *)(a1 + 48));
}

uint64_t sub_10031C05C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 104LL))(*(void *)(a1 + 48));
}

uint64_t sub_10031C06C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

uint64_t sub_10031C074(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_10031C07C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 72LL))(*(void *)(a1 + 48));
}

void sub_10031C08C(id a1)
{
  qword_1019349B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10031C0B8(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10031C0E4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10031C110(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10031C110(a1, *a2);
    sub_10031C110(a1, a2[1]);
    sub_10000AE14((uint64_t)(a2 + 5));
    operator delete(a2);
  }

void sub_10031C158(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100019CEC(v4 - 40);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_10031C1C8(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10031C270(a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = 5 * a2;
    unint64_t v8 = v6 + 40 * a2;
    uint64_t v9 = 8 * v7;
    do
    {
      sub_10031C2C0(v6, a3);
      v6 += 40LL;
      v9 -= 40LL;
    }

    while (v9);
    a1[1] = v8;
  }

  return a1;
}

void sub_10031C250( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_10031C270(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667LL) {
    sub_100007008();
  }
  double result = (char *)sub_100100EF8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t sub_10031C2C0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + memset(&buf[7], 0, 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_10031C31C(_Unwind_Exception *a1)
{
}

void sub_10031C334(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_100019CEC(v3 - 40);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

uint64_t **sub_10031C390(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((void *)v12 + 5) = 0LL;
    *((void *)v12 + 6) = 0LL;
    char v15 = 1;
    sub_1000085FC(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0LL;
    sub_10031C474((uint64_t)v14, 0LL);
    return (uint64_t **)v12;
  }

  return v9;
}

void sub_10031C474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10000AE14((uint64_t)v2 + 40);
    }
    operator delete(v2);
  }

uint64_t *sub_10031C4B8(void *a1, unsigned int *a2)
{
  double result = sub_10001A29C(a1, a2);
  if (result)
  {
    sub_10005BE78(a1, result);
    return (uint64_t *)1;
  }

  return result;
}

uint64_t *sub_10031C4EC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v9, a2);
  double result = *v6;
  if (!*v6)
  {
    sub_10031C580((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000085FC(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

_BYTE *sub_10031C580@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  double result = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    double result = sub_1010DD48C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)double result = v9;
  }

  v6[56] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10031C608(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100022988(v3, v2);
  _Unwind_Resume(a1);
}

  ;
}

void sub_10031C658()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1012E6488;
      v1[3] = unk_1012E6498;
      v1[4] = xmmword_1012E64A8;
      v1[0] = xmmword_1012E6468;
      v1[1] = unk_1012E6478;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_10031C72C(_Unwind_Exception *a1)
{
}

uint64_t sub_10031C744()
{
  qword_101994278 = 0LL;
  qword_101994280 = 0LL;
  qword_101994288 = 0LL;
  qword_101994278 = (uint64_t)operator new(0x78uLL);
  qword_101994280 = qword_101994278;
  qword_101994288 = qword_101994278 + 120;
  uint64_t v0 = 0LL;
  qword_101994280 = (uint64_t)sub_100036E0C((uint64_t)&qword_101994288, &v2, &v7, (char *)qword_101994278);
  do
  {
    if (SHIBYTE(v6[v0 + 2]) < 0) {
      operator delete((void *)v6[v0]);
    }
    v0 -= 3LL;
  }

  while (v0 != -15);
  return __cxa_atexit((void (*)(void *))sub_1002968E0, &qword_101994278, (void *)&_mh_execute_header);
}

void sub_10031C894( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  qword_101994280 = v11;
  sub_1000129D4(&a9);
  uint64_t v13 = 0LL;
  while (1)
  {
    if (*(&a11 + v13 + 119) < 0) {
      operator delete(*(void **)(&a11 + v13 + 96));
    }
    v13 -= 24LL;
    if (v13 == -120) {
      _Unwind_Resume(a1);
    }
  }

uint64_t sub_10031C910(float a1)
{
  if (a1 <= 0.5) {
    return 1LL;
  }
  else {
    return 2LL;
  }
}

BOOL sub_10031C924(uint64_t a1)
{
  return *(_BYTE *)(a1 + 113) && sub_100A225AC(a1);
}

uint64_t sub_10031C938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v9 = *(_OWORD *)a3;
  uint64_t v10 = *(void *)(a3 + 16);
  if ((_DWORD)a2 && !sub_100A225E0(a1))
  {
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_101832A90);
    }
    uint64_t v5 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Minimum distance not reached, overriding notification with kCMWorkoutLocationTypeIndoor",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_101832A90);
      }
      v8[0] = 0;
      __int128 v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "Minimum distance not reached, overriding notification with kCMWorkoutLocationTypeIndoor",  v8,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLIndoorOutdoorDetectorPhone::notifyIndoorOutdoorState(BOOL, const CLIndoorOutdoorProtocol::IndoorO utdoorResult &) const",  "%s\n",  v7);
    }

    *(void *)&__int128 v9 = 1LL;
  }

  return sub_100A233E8(a1, a2, &v9);
}

void sub_10031CB08(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10031CB50(a1);
  operator delete(v1);
}

float *sub_10031CB1C(uint64_t a1, float a2, float a3)
{
  return sub_10050D3A0(a1 + 440, a2, a3);
}

void sub_10031CB24(id a1)
{
  qword_101934758 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_10031CB50(uint64_t a1)
{
  *(void *)a1 = off_101867C68;
  sub_10031CBC8(a1 + 512);
  __int128 v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(void *)(a1 + 472) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_10031CBC8(uint64_t a1)
{
  __int128 v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }

  uint64_t v5 = (void **)(a1 + 24);
  sub_10031CC30(&v5);
  return a1;
}

void sub_10031CC30(void ***a1)
{
  uint64_t v1 = *a1;
  __int128 v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80LL;
        sub_10031CCB4((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10031CCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(void *)(a2 + 40) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }

void *sub_10031CCF8(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = a2;
  result[2] = a3;
  *double result = &off_101832AC0;
  return result;
}

void sub_10031CD10(void *a1)
{
  uint64_t v1 = sub_100213E60(a1);
  operator delete(v1);
}

void sub_10031CDCC(id a1)
{
  qword_101994290 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLTelephonyServiceSilo");
}

uint64_t sub_10031CE80(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100320944;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_1019942A0 != -1) {
    dispatch_once(&qword_1019942A0, block);
  }
  return qword_1019A0E50;
}

BOOL sub_10031D060(uint64_t a1, BOOL *a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 1026;
      int v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (v6)
  {
    HIBYTE(v14) = 0;
    int v7 = _CTServerConnectionIsAnyCallActiveOrHeld(v6, (char *)&v14 + 7);
    BOOL v8 = v7 == 0LL;
    if (v7)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      __int128 v9 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionIsAnyCallActiveOrHeld failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        v15[0] = 0;
        LODWORD(v14) = 2;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionIsAnyCallActiveOrHeld failed",  v15,  v14);
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTelephonyService::getActiveCall(BOOL &)", "%s\n", v10);
      }
    }

    else
    {
      *a2 = HIBYTE(v14) == 1;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v15[0] = 0;
      LODWORD(v14) = 2;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v15,  v14);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::getActiveCall(BOOL &)", "%s\n", v13);
    }

    return 0LL;
  }

  return v8;
}

uint64_t sub_10031D52C(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1019942B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1019942B0))
  {
    uint64_t v13 = sub_1004F2598();
    byte_1019942A8 = sub_1004F7D68(v13);
    __cxa_guard_release(&qword_1019942B0);
  }

  if (!byte_1019942A8) {
    return 0LL;
  }
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 1026;
      int v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  if (!*(void *)(a1 + 144))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    __int128 v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    LOWORD(v14[0]) = 0;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v14,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::getCampOnlyState()", "%s\n", v10);
    goto LABEL_32;
  }

  int v5 = (const __CFDictionary *)sub_10031DB54(a1);
  if (!v5)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Can't get camp only state", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    LOWORD(v14[0]) = 0;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Can't get camp only state",  v14,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTelephonyService::getCampOnlyState()", "%s\n", v10);
LABEL_32:
    return 0LL;
  }

  sub_1002A5550((int)buf, v5);
  v14[0] = 0;
  unsigned int v6 = sub_1002A7D20((uint64_t)buf, (uint64_t)@"kCTCampOnly", v14);
  int v7 = v14[0];
  CFRelease(v5);
  if (v7 == 1) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0LL;
  }
  sub_1002A5590(buf);
  return v8;
}

void sub_10031D928(_Unwind_Exception *a1)
{
}

void sub_10031D984(uint64_t a1, int a2, int a3)
{
  if (*(void *)(a1 + 152))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    int v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 1026;
      int v12 = a2;
      __int16 v13 = 1026;
      int v14 = a3;
      unsigned int v6 = "{msg%{public}.0s:CLTelephonyService assertCommCenter, client:%{public}d, level:%{public}d}";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v7, 0x1Eu);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    int v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 1026;
      int v12 = a2;
      __int16 v13 = 1026;
      int v14 = a3;
      unsigned int v6 = "{msg%{public}.0s:CLTelephonyService assert skipped, client:%{public}d, level:%{public}d}";
      goto LABEL_10;
    }
  }

uint64_t sub_10031DB54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result)
  {
    uint64_t v7 = 0LL;
    unint64_t v2 = _CTServerConnectionCopyRegistrationInfo(result, &v7);
    int v3 = v2;
    unint64_t v4 = HIDWORD(v2);
    if (v2)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      int v5 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 67240448;
        int v12 = v3;
        __int16 v13 = 1026;
        int v14 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Registration dictionary copy returned: %{public}d %{public}d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        v8[0] = 67240448;
        v8[1] = v3;
        __int16 v9 = 1026;
        int v10 = v4;
        unsigned int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Registration dictionary copy returned: %{public}d %{public}d",  v8,  14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFDictionaryRef CLTelephonyService::copyRegistrationInfoDictionary()",  "%s\n",  v6);
      }
    }

    return v7;
  }

  return result;
}

uint64_t sub_10031DD68(uint64_t a1, uint64_t *a2)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  unint64_t v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: getting detected cells",  (uint8_t *)&buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    LOWORD(v65.__r_.__value_.__l.__data_) = 0;
    __int16 v47 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: getting detected cells",  &v65,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v47);
    if (v47 != &buf) {
      free(v47);
    }
  }

  CFArrayRef theArray = 0LL;
  unsigned __int8 v60 = 0;
  int v57 = 0LL;
  BOOL v58 = 0LL;
  uint64_t v59 = 0LL;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      v5 -= 696LL;
      sub_10032B988((uint64_t)(a2 + 2), v5);
    }

    while (v5 != v6);
  }

  a2[1] = v6;
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 160);
      buf.__r_.__value_.__r.__words[0] = 68289282LL;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  (uint8_t *)&buf,  0x18u);
    }
  }

  uint64_t v9 = *(void *)(a1 + 144);
  if (v9)
  {
    uint64_t v10 = _CTServerConnectionCellMonitorCopyCellInfo(v9, &v60, &theArray);
    if ((_DWORD)v10) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = v60 == 0;
    }
    BOOL v12 = v11 || theArray == 0LL;
    int v13 = !v12;
    unsigned int v55 = v13;
    if (v12)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      id v36 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        buf.__r_.__value_.__r.__words[0] = __PAIR64__(v10, 67109888);
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = HIDWORD(v10);
        HIWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
        buf.__r_.__value_.__l.__cap_ = (std::string::size_type)theArray;
        __int16 v73 = 1024;
        int v74 = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)",  (uint8_t *)&buf,  0x1Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        v65.__r_.__value_.__r.__words[0] = __PAIR64__(v10, 67109888);
        LOWORD(v65.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[1] + 2) = HIDWORD(v10);
        HIWORD(v65.__r_.__value_.__r.__words[1]) = 2048;
        v65.__r_.__value_.__l.__cap_ = (std::string::size_type)theArray;
        __int16 v66 = 1024;
        int v67 = v60;
        int v37 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err( %d,%d) cellsArray(%p) valid(%d)",  &v65,  30,  v53,  v54);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v37);
        if (v37 != &buf) {
          free(v37);
        }
      }
    }

    else
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      char v15 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = Count;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: processing %d dictionaries (detected)",  (uint8_t *)&buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        LODWORD(v65.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v65.__r_.__value_.__r.__words[0]) = Count;
        __int128 v51 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: processing %d dictionaries (detected)",  &v65);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v51);
        if (v51 != &buf) {
          free(v51);
        }
      }

      if (Count >= 1)
      {
        CFIndex v16 = 0LL;
        __int16 v17 = (const void *)kCTCellMonitorDerivedMCC;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
          CFTypeID v19 = CFGetTypeID(ValueAtIndex);
          if (v19 == CFDictionaryGetTypeID())
          {
            CFDictionaryRef v56 = (CFDictionaryRef)ValueAtIndex;
            if (CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, v17))
            {
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101832DD8);
              }
              int v20 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: derivedMCC dictionary",  (uint8_t *)&buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_101832DD8);
                }
                LOWORD(v65.__r_.__value_.__l.__data_) = 0;
                LODWORD(v52) = 2;
                __int128 v30 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: derivedMCC dictionary",  &v65,  v52);
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v30);
                if (v30 != &buf) {
                  free(v30);
                }
              }

              sub_100328064(&v56, (uint64_t)&v57);
            }

            else
            {
              sub_100F58B64(&v65, &v56);
              if (HIDWORD(v65.__r_.__value_.__r.__words[0]) == 2)
              {
                unint64_t v23 = a2[1];
                if (v23 >= a2[2])
                {
                  uint64_t v24 = sub_10032BF64(a2, (uint64_t)&v65);
                }

                else
                {
                  sub_10032C088((uint64_t)(a2 + 2), a2[1], (uint64_t)&v65);
                  uint64_t v24 = v23 + 696;
                  a2[1] = v23 + 696;
                }

                a2[1] = v24;
              }

              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101832DD8);
              }
              __int128 v25 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                sub_100F57510((unsigned int *)&v65, &buf);
                p_std::stringbuf::string_type buf = &buf;
                if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                }
                LODWORD(v62.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
                _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: Adding cell, %s",  (uint8_t *)&v62,  0xCu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_101832DD8);
                }
                uint64_t v31 = qword_101934A78;
                sub_100F57510((unsigned int *)&v65, &v62);
                __int128 v32 = &v62;
                if ((v62.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  __int128 v32 = (std::stringbuf::string_type *)v62.__r_.__value_.__r.__words[0];
                }
                int v63 = 136315138;
                __int128 v64 = v32;
                BOOL v33 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v31,  2LL,  "CELL_LOC: Adding cell, %s",  (const char *)&v63);
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v33);
                if (v33 != &buf) {
                  free(v33);
                }
              }

              if (v71 < 0) {
                operator delete(__p);
              }
              if (v68)
              {
                uint64_t v69 = v68;
                operator delete(v68);
              }
            }
          }

          else
          {
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101832DD8);
            }
            int v21 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
            {
              CFTypeID TypeID = CFDictionaryGetTypeID();
              LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = TypeID;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_FAULT,  "CELL_LOC: Invalid dictionary %{public}ld",  (uint8_t *)&buf,  0xCu);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101832DD8);
              }
              uint64_t v27 = qword_101934A78;
              CFTypeID v28 = CFDictionaryGetTypeID();
              LODWORD(v65.__r_.__value_.__l.__data_) = 134349056;
              *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 4) = v28;
              LODWORD(v52) = 12;
              __int128 v29 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v27,  17LL,  "CELL_LOC: Invalid dictionary %{public}ld",  &v65,  v52);
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v29);
              if (v29 != &buf) {
                free(v29);
              }
            }
          }

          ++v16;
        }

        while (Count != v16);
      }

      if (v58 != v57)
      {
        for (uint64_t i = (unsigned int *)*a2; i != (unsigned int *)a2[1]; i += 174)
        {
          if (i[2] - 3 <= 2)
          {
            sub_100F59260((uint64_t)i, (uint64_t)&v57);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101832DD8);
            }
            __int16 v39 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
            {
              sub_100F57510(i, &buf);
              int v40 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &buf
                  : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v65.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: Updating Cell, %s",  (uint8_t *)&v65,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101832DD8);
              }
              uint64_t v41 = qword_101934A78;
              sub_100F57510(i, &v65);
              int v42 = &v65;
              if ((v65.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                int v42 = (std::stringbuf::string_type *)v65.__r_.__value_.__r.__words[0];
              }
              LODWORD(v62.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
              __int16 v43 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v41,  2LL,  "CELL_LOC: Updating Cell, %s",  (const char *)&v62);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v43);
              if (v43 != &buf) {
                free(v43);
              }
            }
          }
        }
      }
    }

    if (theArray) {
      CFRelease(theArray);
    }
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    int v44 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v45 = 0x66FD0EB66FD0EB67LL * ((a2[1] - *a2) >> 3);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: detected cells,%lu",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      uint64_t v48 = 0x66FD0EB66FD0EB67LL * ((a2[1] - *a2) >> 3);
      LODWORD(v65.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 4) = v48;
      __int16 v49 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: detected cells,%lu",  &v65);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v49);
      if (v49 != &buf) {
        free(v49);
      }
    }

    uint64_t v35 = v55;
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    int v34 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(v65.__r_.__value_.__l.__data_) = 0;
      LODWORD(v52) = 2;
      uint64_t v50 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  &v65,  v52);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)",  "%s\n",  (const char *)v50);
      if (v50 != &buf) {
        free(v50);
      }
    }

    uint64_t v35 = 0LL;
  }

  if (v57)
  {
    BOOL v58 = v57;
    operator delete(v57);
  }

  return v35;
}

void sub_10031ECC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031ED80(uint64_t a1)
{
  BOOL v1 = sub_100325F00(a1, (uint64_t)&cf1);
  if (v1) {
    return sub_100325B9C(v1, (const __CFString *)cf1);
  }
  else {
    return 11LL;
  }
}

uint64_t sub_10031EDE4(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t, const void **))(*(void *)a1 + 208LL))(a1, &v6))
  {
    LODWORD(v3) = 0;
LABEL_9:
    else {
      return v3;
    }
  }

  uint64_t v2 = sub_100325430(v6);
  uint64_t v3 = v2;
  return v3;
}

void sub_10031EF68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10031EF84(uint64_t a1, std::string *a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    unint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 1026;
      int v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(cf[0]) = 0;
      BOOL v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  cf,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::getServingOperator(std::string &)", "%s\n", v12);
    }

    return 0LL;
  }

  cf[0] = 0LL;
  if (_CTServerConnectionCopyOperatorName(v6, cf))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionCopyOperatorName failed",  buf,  2u);
    }

    BOOL v8 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v13[0] = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionCopyOperatorName failed",  v13,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTelephonyService::getServingOperator(std::string &)", "%s\n", v9);
      BOOL v8 = 0LL;
    }

    goto LABEL_26;
  }

  if (!cf[0]) {
    return 0LL;
  }
  BOOL v8 = sub_1002AA05C((const __CFString *)cf[0], a2);
LABEL_26:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v8;
}

void sub_10031F3BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10031F450( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10031F46C(uint64_t a1, std::string *a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    unint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 1026;
      int v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(cf[0]) = 0;
      BOOL v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  cf,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getServingProviderFromCarrierBundle(std::string &)",  "%s\n",  v12);
    }

    return 0LL;
  }

  cf[0] = 0LL;
  if (_CTServerConnectionCopyProviderNameUsingCarrierBundle(v6, cf))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionCopyProviderNameUsingCarrierBundle failed",  buf,  2u);
    }

    BOOL v8 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v13[0] = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionCopyProviderNameUsingCarrierBundle failed",  v13,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTelephonyService::getServingProviderFromCarrierBundle(std::string &)",  "%s\n",  v9);
      BOOL v8 = 0LL;
    }

    goto LABEL_26;
  }

  if (!cf[0]) {
    return 0LL;
  }
  BOOL v8 = sub_1002AA05C((const __CFString *)cf[0], a2);
LABEL_26:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v8;
}

BOOL sub_10031F850(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    unint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 1026;
      int v22 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (v6)
  {
    int SignalStrength = _CTServerConnectionGetSignalStrength(v6, a2, v16, v15);
    BOOL v8 = SignalStrength == 0LL;
    if (SignalStrength)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      uint64_t v9 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionGetSignalStrength failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        v14[0] = 0;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionGetSignalStrength failed",  v14,  2);
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTelephonyService::getSignalStrength(int &)", "%s\n", v10);
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    BOOL v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v16[0] = 0;
      int v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v16,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::getSignalStrength(int &)", "%s\n", v13);
    }

    return 0LL;
  }

  return v8;
}

BOOL sub_10031FDCC(uint64_t a1, char *cStr)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    unint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 1026;
      int v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  if (*(void *)(a1 + 144))
  {
    CFStringRef v6 = sub_1002A6F04(cStr);
    uint64_t v7 = _CTServerConnectionResetModemWithCrashLogs(*(void *)(a1 + 144), v6, 1LL);
    BOOL v8 = v7 == 0;
    if (v7)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      uint64_t v9 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionResetModemWithCrashLogs failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        v14[0] = 0;
        BOOL v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionResetModemWithCrashLogs failed",  v14,  2);
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTelephonyService::resetModem(const char *)", "%s\n", v12);
      }
    }

    if (v6) {
      CFRelease(v6);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v14[0] = 0;
      int v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v14,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::resetModem(const char *)", "%s\n", v13);
    }

    return 0LL;
  }

  return v8;
}

BOOL sub_1003201AC(uint64_t a1, char *cStr)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    unint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 1026;
      int v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  if (*(void *)(a1 + 144))
  {
    CFStringRef v6 = sub_1002A6F04(cStr);
    uint64_t v7 = _CTServerConnectionDumpBasebandState(*(void *)(a1 + 144), v6);
    BOOL v8 = v7 == 0;
    if (v7)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      uint64_t v9 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionDumpBasebandState failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        v14[0] = 0;
        BOOL v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionDumpBasebandState failed",  v14,  2);
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTelephonyService::dumpLog(const char *)", "%s\n", v12);
      }
    }

    if (v6) {
      CFRelease(v6);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v14[0] = 0;
      int v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v14,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::dumpLog(const char *)", "%s\n", v13);
    }

    return 0LL;
  }

  return v8;
}

BOOL sub_100320580(uint64_t a1, uint64_t *a2, int a3)
{
  if (!sub_100328524(a1, a2, a3) || a2[1] != *a2) {
    return 1LL;
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  int v5 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning CELL_LOC: can't figure out the serving cell",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    v7[0] = 0;
    CFStringRef v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning CELL_LOC: can't figure out the serving cell",  v7,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::getServingCells(std::vector<CLCell> &, BOOL)",  "%s\n",  v6);
    return 0LL;
  }

  return result;
}

uint64_t sub_100320748(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 224LL))(a1)
    && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 232LL))(a1, a2 + 4))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, a2 + 8, a2 + 12);
  }

  else
  {
    return 0LL;
  }

_DWORD *sub_1003207C0(_DWORD *a1, uint64_t a2)
{
  if (qword_1019942B8 != -1) {
    dispatch_once(&qword_1019942B8, &stru_101832D78);
  }
  unint64_t v4 = (os_unfair_lock_s *)qword_1019942C0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10032A3B4;
  v7[3] = &unk_101832D98;
  _DWORD v7[4] = qword_1019942C0;
  v7[5] = a2;
  os_unfair_lock_lock((os_unfair_lock_t)qword_1019942C0);
  int v5 = sub_10032A3B4((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return a1;
}

uint64_t sub_100320878(int *a1)
{
  if (qword_1019942B8 != -1) {
    dispatch_once(&qword_1019942B8, &stru_101832D78);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_1019942C0;
  int v3 = *a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10032A55C;
  void v6[3] = &unk_101832DB8;
  _DWORD v6[4] = qword_1019942C0;
  int v7 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)qword_1019942C0);
  uint64_t v4 = sub_10032A55C((uint64_t)v6);
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t sub_100320924(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((_DWORD)result == -1) {
    sub_10123516C();
  }
  return result;
}

uint64_t sub_100320944(uint64_t a1)
{
  uint64_t v2 = operator new(0xB0uLL);
  uint64_t result = sub_100320990((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A0E50 = (uint64_t)v2;
  return result;
}

void sub_10032097C(_Unwind_Exception *a1)
{
}

uint64_t sub_100320990(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100320C70(a1, "CLTelephonyService", a2);
  *(void *)(v3 + 112) = 0LL;
  uint64_t v4 = (id *)(v3 + 112);
  *(void *)uint64_t v3 = off_101832B60;
  *(void *)(v3 + 120) = 0LL;
  *(void *)(v3 + 128) = 0LL;
  *(_DWORD *)(v3 + 136) = -1;
  *(void *)(v3 + 144) = 0LL;
  int v5 = (void *)(v3 + 144);
  *(void *)(v3 + 152) = 0LL;
  *(_WORD *)(v3 + 160) = 0;
  __asm { FMOV            V0.2S, #-1.0 }

  *(void *)(v3 + 164) = _D0;
  sub_100320D0C((CFRunLoopSourceRef *)v3);
  id v11 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 112) = v11;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1003212E8;
  v20[3] = &unk_10181D3D0;
  v20[4] = a1;
  [v11 setHandler:v20];
  if (!*v5 && !sub_100321F04(a1)) {
    [*v4 setNextFireDelay:1.0];
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver( LocalCenter,  (const void *)a1,  (CFNotificationCallback)sub_10032132C,  @"com.apple.locationd.DumpDiagnostics",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  sub_1004F2598();
  *(_DWORD *)(a1 + 172) = sub_1004F2690();
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  int v13 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v23 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CELL_LOC: fHardwareType, %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    int v18 = *(_DWORD *)(a1 + 172);
    v21[0] = 67109120;
    v21[1] = v18;
    __int16 v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: fHardwareType, %d",  v21);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTelephonyService::CLTelephonyService(id<CLIntersiloUniverse>)",  "%s\n",  v19);
  }

  char v15 = operator new(1uLL);
  int v16 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v15;
  if (v16) {
    operator delete(v16);
  }
  return a1;
}

void sub_100320C44(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 152);
  *(void *)(v1 + 152) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  sub_10032154C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100320C70(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101832E68;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + memset(&buf[7], 0, 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100320CF0(_Unwind_Exception *exception_object)
{
}

void sub_100320D0C(CFRunLoopSourceRef *a1)
{
  kern_return_t v5;
  kern_return_t v6;
  os_log_s *v7;
  const char *v8;
  os_log_s *v9;
  IONotificationPort *v10;
  IONotificationPort *v11;
  kern_return_t v12;
  kern_return_t v13;
  os_log_s *v14;
  os_log_s *v15;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoop *v17;
  os_log_s *v18;
  uint8_t *v19;
  io_object_t notification;
  io_connect_t connect;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;
  uint64_t v2 = IOServiceMatching("AppleBaseband");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
  if (MatchingService)
  {
    io_service_t v4 = MatchingService;
    int v5 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
    if (v5)
    {
      CFStringRef v6 = v5;
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      int v7 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        LODWORD(v25) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Could not open service (%#x)", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        int v22 = 67109120;
        LODWORD(v23) = v6;
        BOOL v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Could not open service (%#x)",  &v22);
LABEL_48:
        __int16 v19 = (uint8_t *)v8;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTelephonyService::registerBasebandNotifications()", "%s\n", v8);
        if (v19 != buf) {
          free(v19);
        }
      }
    }

    else
    {
      uint64_t v10 = IONotificationPortCreate(kIOMainPortDefault);
      if (v10)
      {
        id v11 = v10;
        BOOL v12 = IOServiceAddInterestNotification( v10,  v4,  "IOGeneralInterest",  (IOServiceInterestCallback)sub_1003288C4,  a1,  &notification);
        if (v12)
        {
          int v13 = v12;
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101832DD8);
          }
          int v14 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 67109120;
            LODWORD(v25) = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Could not add interest notification on service: %#x",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101832DD8);
            }
            int v22 = 67109120;
            LODWORD(v23) = v13;
            BOOL v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Could not add interest notification on service: %#x",  &v22);
            goto LABEL_48;
          }
        }

        else
        {
          RunLoopSource = IONotificationPortGetRunLoopSource(v11);
          a1[15] = RunLoopSource;
          if (RunLoopSource)
          {
            __int16 v17 = (__CFRunLoop *)sub_10029228C();
            CFRunLoopAddSource(v17, a1[15], kCFRunLoopCommonModes);
            return;
          }

          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101832DD8);
          }
          int v18 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Could not create run loop source",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101832DD8);
            }
            LOWORD(v22) = 0;
            BOOL v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Could not create run loop source");
            goto LABEL_48;
          }
        }
      }

      else
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        char v15 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Could not create notification port",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101832DD8);
          }
          LOWORD(v22) = 0;
          BOOL v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Could not create notification port",  &v22,  2);
          goto LABEL_48;
        }
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      __int128 v25 = "AppleBaseband";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Could not find %s service", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      int v22 = 136315138;
      int v23 = "AppleBaseband";
      BOOL v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Could not find %s service",  &v22);
      goto LABEL_48;
    }
  }

id sub_1003212E8(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(void *)(v1 + 144))
  {
    uint64_t result = (id)sub_100321F04(*((void *)result + 4));
  }

  return result;
}

void sub_10032132C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101832D18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTelephonyService::onDumpDiagnostics",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    id v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTelephonyService::onDumpDiagnostics, event:%{public, location:escape_only}s, th is:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  uint64_t v13[2] = sub_10032AC54;
  v13[3] = &unk_10182D1B8;
  void v13[4] = a2;
  void v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  _WORD v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10032152C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032154C(uint64_t a1)
{
  *(void *)a1 = off_101832E68;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_1003215C0(void *a1)
{
  *a1 = off_101832B60;
  uint64_t v2 = (void *)a1[19];
  a1[19] = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return sub_10032154C((uint64_t)a1);
}

void sub_100321600(void *a1)
{
  uint64_t v1 = (void *)sub_1003215C0(a1);
  operator delete(v1);
}

uint64_t sub_100321614(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    uint64_t v2 = (__CFRunLoop *)sub_10029228C();
    CFRunLoopRemoveSource(v2, *(CFRunLoopSourceRef *)(a1 + 120), kCFRunLoopCommonModes);
    *(void *)(a1 + 120) = 0LL;
  }

  [*(id *)(a1 + 112) invalidate];

  *(void *)(a1 + 112) = 0LL;
  return sub_10032166C(a1);
}

uint64_t sub_10032166C(uint64_t a1)
{
  *(_DWORD *)(a1 + 136) = -1;
  uint64_t v2 = *(const void **)(a1 + 128);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 128) = 0LL;
  }

  uint64_t v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 144) = 0LL;
  }

  return 1LL;
}

const void **sub_1003216B4(uint64_t a1, uint64_t a2, const void *a3)
{
  CFStringRef v6 = a3;
  if (a3) {
    CFRetain(a3);
  }
  sub_10032172C(a1, &v7, &v6, 0, -1);
  return sub_10032AC64(&v6);
}

void sub_100321718( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_10032172C(uint64_t a1, unsigned int *a2, const void **a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    id v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      id v12 = (void *)(a1 + 8);
      int v13 = sub_100320924(a2);
      *(_DWORD *)std::stringbuf::string_type buf = 68289794;
      *(_DWORD *)std::stringbuf::string_type v65 = 0;
      *(_WORD *)&v65[4] = 2082;
      *(void *)&v65[6] = "";
      *(_WORD *)&v65[14] = 2082;
      *(void *)&v65[16] = "activity";
      __int16 v66 = 2082;
      int v67 = v12;
      __int16 v68 = 2050;
      uint64_t v69 = (std::__shared_weak_count *)v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v14 = sub_100320924(a2);
    int v16 = (uint64_t *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 64);
    if (!v15) {
      goto LABEL_18;
    }
    int v17 = (uint64_t *)(a1 + 64);
    do
    {
      int v18 = *(_DWORD *)(v15 + 32);
      BOOL v19 = v18 < v14;
      if (v18 >= v14) {
        __int16 v20 = (uint64_t *)v15;
      }
      else {
        __int16 v20 = (uint64_t *)(v15 + 8);
      }
      if (!v19) {
        int v17 = (uint64_t *)v15;
      }
      uint64_t v15 = *v20;
    }

    while (*v20);
    if (v17 == v16 || v14 < *((_DWORD *)v17 + 8))
    {
LABEL_18:
      *(void *)__int128 v70 = &v70[8];
      memset(&v70[8], 0, 24);
      char v71 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v70);
      int v17 = sub_10032B29C(a1 + 56, (uint64_t)buf);
      __int16 v21 = v69;
      if (v69)
      {
        p_shared_owners = (unint64_t *)&v69->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&v65[4], *(void **)&v65[12]);
      uint64_t v24 = v71;
      if (v71)
      {
        __int128 v25 = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v70, *(void **)&v70[8]);
    }

    if (a4)
    {
      sub_10032B44C(a3, buf);
      sub_10005F550((uint64_t)(v17 + 8), (__int128 *)buf);
      uint64_t v27 = *(std::__shared_weak_count **)&v65[4];
      if (*(void *)&v65[4])
      {
        CFTypeID v28 = (unint64_t *)(*(void *)&v65[4] + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }

    else
    {
      sub_1000F0D38(v17 + 8);
    }

    if (!v17[7]) {
      goto LABEL_83;
    }
    __int128 v30 = sub_10032AD30(a3);
    if (a5 == -1)
    {
      sub_10032ADD0((void *)a1, a2, v30);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v31 = *(void *)(a1 + 88);
      if (!v31) {
        goto LABEL_48;
      }
      uint64_t v33 = a1 + 88;
      do
      {
        int v34 = *(_DWORD *)(v31 + 32);
        BOOL v35 = v34 < a5;
        if (v34 >= a5) {
          id v36 = (uint64_t *)v31;
        }
        else {
          id v36 = (uint64_t *)(v31 + 8);
        }
        if (!v35) {
          uint64_t v33 = v31;
        }
        uint64_t v31 = *v36;
      }

      while (*v36);
      if (v33 == v32 || *(_DWORD *)(v33 + 32) > a5) {
LABEL_48:
      }
        uint64_t v33 = a1 + 88;
      uint64_t v62 = v33;
      int v37 = sub_100320924(a2);
      uint64_t v38 = *v16;
      if (!*v16) {
        goto LABEL_59;
      }
      uint64_t v39 = a1 + 64;
      do
      {
        int v40 = *(_DWORD *)(v38 + 32);
        BOOL v41 = v40 < v37;
        if (v40 >= v37) {
          int v42 = (uint64_t *)v38;
        }
        else {
          int v42 = (uint64_t *)(v38 + 8);
        }
        if (!v41) {
          uint64_t v39 = v38;
        }
        uint64_t v38 = *v42;
      }

      while (*v42);
      if ((uint64_t *)v39 == v16 || v37 < *(_DWORD *)(v39 + 32))
      {
LABEL_59:
        uint64_t v61 = a1 + 64;
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101832D18);
        }
        __int16 v43 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v44 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v70, a1, a2);
          if (v70[23] >= 0) {
            uint64_t v45 = v70;
          }
          else {
            uint64_t v45 = *(_BYTE **)v70;
          }
          *(_DWORD *)std::stringbuf::string_type buf = 136315650;
          *(void *)std::stringbuf::string_type v65 = v44;
          *(_WORD *)&v65[8] = 1024;
          *(_DWORD *)&v65[10] = a5;
          *(_WORD *)&v65[14] = 2080;
          *(void *)&v65[16] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v70[23] & 0x80000000) != 0) {
            operator delete(*(void **)v70);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101832D18);
          }
          int v46 = (void *)(a1 + 8);
          uint64_t v47 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v60 >= 0) {
            uint64_t v48 = __p;
          }
          else {
            uint64_t v48 = (void **)__p[0];
          }
          *(_DWORD *)__int128 v70 = 136315650;
          *(void *)&v70[4] = v46;
          *(_WORD *)&v70[12] = 1024;
          *(_DWORD *)&v70[14] = a5;
          *(_WORD *)&v70[18] = 2080;
          *(void *)&v70[20] = v48;
          __int16 v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "%s; client %d has deregistered, not notifying %s",
                          v70,
                          28,
                          v58);
          if (v60 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, ch ar, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notif ication_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::Notificatio nData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v49);
        }

        goto LABEL_83;
      }

      uint64_t v61 = v39;
      if (v33 == v32) {
        goto LABEL_60;
      }
      uint64_t v52 = *(void *)(v39 + 48);
      uint64_t v50 = v39 + 48;
      uint64_t v51 = v52;
      if (!v52) {
        goto LABEL_60;
      }
      int v53 = *(_DWORD *)(v33 + 32);
      uint64_t v54 = v50;
      do
      {
        int v55 = *(_DWORD *)(v51 + 28);
        BOOL v56 = v55 < v53;
        if (v55 >= v53) {
          int v57 = (uint64_t *)v51;
        }
        else {
          int v57 = (uint64_t *)(v51 + 8);
        }
        if (!v56) {
          uint64_t v54 = v51;
        }
        uint64_t v51 = *v57;
      }

      while (*v57);
      if (v54 == v50 || v53 < *(_DWORD *)(v54 + 28)) {
        goto LABEL_60;
      }
      sub_10032B1AC((_BYTE *)a1, (uint64_t)&v62, (uint64_t)&v61, v30);
    }

void sub_100321D5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

const void **sub_100321DB4(uint64_t a1, uint64_t a2, const void *a3)
{
  CFStringRef v6 = a3;
  if (a3) {
    CFRetain(a3);
  }
  sub_10032172C(a1, &v7, &v6, 1, -1);
  return sub_10032AC64(&v6);
}

void sub_100321E18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sub_100321E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = @"kCLTelephonyServiceResetNotification";
  v7[1] = @"kCLTelephonyServiceConnectedNotification";
  _DWORD v7[2] = @"kCLTelephonyServiceDisconnectedNotification";
  v7[3] = @"kCallStatusChangeNotification";
  _DWORD v7[4] = @"kAtLeastOneVoiceCallInProgress";
  v7[5] = @"kNoVoiceCallInProgress";
  if (!-[NSArray containsObject:]( +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v7, 6LL),  "containsObject:",  a2)) {
    sub_101235310();
  }
  if (a3) {
    sub_1012352E8();
  }
  return sub_1003216B4(a1, a2, 0LL);
}

BOOL sub_100321F04(uint64_t a1)
{
  v11[0] = 0LL;
  v11[1] = a1;
  memset(&v11[2], 0, 24);
  uint64_t v2 = _CTServerConnectionCreate(kCFAllocatorDefault, sub_1003222AC, v11);
  *(void *)(a1 + 144) = v2;
  if (v2)
  {
    uint64_t v3 = sub_10029228C();
    _CTServerConnectionAddToRunLoop(v2, v3, kCFRunLoopCommonModes);
    _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTDaemonReadyNotification);
    _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTConnectionInvalidatedNotification);
    _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTIndicatorRadioTransmitNotification);
    _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTCellMonitorUpdateNotification);
    _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTCallStatusChangeNotification);
    _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTRegistrationCellChangedNotification);
    _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTRadioModuleUplinkChangedNotification);
    if (sub_1004FCC90() || (sub_1004FD33C() & 1) != 0 || sub_1004FD2AC()) {
      _CTServerConnectionRegisterForNotification(*(void *)(a1 + 144), kCTCellularTransmitStateNotification);
    }
    sub_1003224C4(a1);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG) || sub_1002921D0(115, 2))
    {
      CFTypeRef cf = 0LL;
      sub_1010DDBC0(&__p, "unknown");
      _CTServerConnectionCopyFirmwareVersion(*(void *)(a1 + 144), &cf);
      if (cf)
      {
        sub_1002AA05C((const __CFString *)cf, &__p);
        CFRelease(cf);
        CFTypeRef cf = 0LL;
      }

      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      io_service_t v4 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::stringbuf::string_type buf = 136315138;
        uint64_t v15 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CT Version: %s", buf, 0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        unsigned int v7 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v12 = 136315138;
        int v13 = v7;
        BOOL v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CT Version: %s",  (const char *)&v12);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::setupTelephony()", "%s\n", v8);
      }
    }
  }

  return v2 != 0;
}

void sub_100322284( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003222AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101832D18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    BOOL v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTelephonyService::ctServerConnectionCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      BOOL v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTelephonyService::ctServerConnectionCallback, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v13 = 0;
  }

  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10032AC94;
  v11[3] = &unk_101832DF8;
  v11[4] = a4;
  void v11[5] = a1;
  void v11[6] = a2;
  v11[7] = a3;
  [v10 sync:v11];
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_1003224A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003224C4(uint64_t a1)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_1002A6C50(@"kCLTelephonyServiceConnectedNotification", __p);
    uint64_t v3 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "sending notification for %s",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v5 = qword_101934A78;
    sub_1002A6C50(@"kCLTelephonyServiceConnectedNotification", &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v9 = 136315138;
    id v10 = p_buf;
    unsigned int v7 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v5,  2LL,  "sending notification for %s",  (const char *)&v9);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::onTelephonyReady()", "%s\n", (const char *)v7);
    if (v7 != __p) {
      free(v7);
    }
  }

  (*(void (**)(uint64_t, const __CFString *, void))(*(void *)a1 + 264LL))( a1,  @"kCLTelephonyServiceConnectedNotification",  0LL);
  sub_100322704(a1);
  return 1LL;
}

void sub_100322704(uint64_t a1)
{
  *(_BYTE *)(a1 + 161) = 0;
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2)
  {
    HIBYTE(v9) = 0;
    uint64_t v3 = _CTServerConnectionIsInHomeCountry(v2, (char *)&v9 + 7);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101832D58);
    }
    io_service_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v15 = HIBYTE(v9);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "refreshInHomeCountry, inHC, %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101832D58);
      }
      int v10 = 67109120;
      int v11 = HIBYTE(v9);
      BOOL v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "refreshInHomeCountry, inHC, %d",  &v10);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTelephonyService::refreshInHomeCountry()", "%s\n", v8);
    }

    if (!(_DWORD)v3)
    {
      *(_BYTE *)(a1 + 161) = HIBYTE(v9) == 1;
      goto LABEL_27;
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101832D58);
    }
    uint64_t v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240448;
      int v15 = v3;
      __int16 v16 = 1026;
      int v17 = HIDWORD(v3);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "_CTServerConnectionIsInHomeCountry failed (%{public}d, %{public}d)",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101832D58);
      }
      int v10 = 67240448;
      int v11 = v3;
      __int16 v12 = 1026;
      int v13 = HIDWORD(v3);
      LODWORD(v9) = 14;
      CFStringRef v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "_CTServerConnectionIsInHomeCountry failed (%{public}d, %{public}d)",  &v10,  v9);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLTelephonyService::refreshInHomeCountry()", "%s\n");
LABEL_24:
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101832D58);
    }
    unsigned int v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "no server connection available", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101832D58);
      }
      LOWORD(v10) = 0;
      LODWORD(v9) = 2;
      CFStringRef v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "no server connection available",  &v10,  v9);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTelephonyService::refreshInHomeCountry()", "%s\n");
      goto LABEL_24;
    }
  }

uint64_t sub_100322B6C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 136) = -1;
  io_service_t v4 = *(const void **)(a1 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 128) = 0LL;
  }

  if (a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      sub_1002A6C50(@"kCLTelephonyServiceDisconnectedNotification", __p);
      CFStringRef v6 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "sending notification for %s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      uint64_t v8 = qword_101934A78;
      sub_1002A6C50(@"kCLTelephonyServiceDisconnectedNotification", &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v12 = 136315138;
      int v13 = p_buf;
      int v10 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v8,  2LL,  "sending notification for %s",  (const char *)&v12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::onTelephonyInvalid(BOOL)",  "%s\n",  (const char *)v10);
      if (v10 != __p) {
        free(v10);
      }
    }

    (*(void (**)(uint64_t, const __CFString *, void))(*(void *)a1 + 264LL))( a1,  @"kCLTelephonyServiceDisconnectedNotification",  0LL);
  }

  return 1LL;
}

void sub_100322DC4(uint64_t a1, float a2, float a3)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_101832E18);
  }
  CFStringRef v6 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#imd,handleUplinkFreqBwUpdate", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101832E18);
    }
    LOWORD(values[0]) = 0;
    LODWORD(v14) = 2;
    int v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "#imd,handleUplinkFreqBwUpdate",  values,  v14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::handleUplinkFreqBwUpdate(float, float)",  "%s\n",  v13);
  }

  HIBYTE(v14) = 1;
  *(double *)std::string buf = a2;
  CFNumberRef v7 = sub_1002AD1E4(buf);
  *(double *)std::string buf = a3;
  CFNumberRef v8 = sub_1002AD1E4(buf);
  CFTypeRef v9 = sub_1002AD138((_BYTE *)&v14 + 7);
  int v10 = v9;
  if (v7 && v8 && v9)
  {
    *(_OWORD *)std::string buf = *(_OWORD *)off_101832C78;
    int v17 = @"kUplinkBwKey";
    values[0] = (void *)v9;
    values[1] = v7;
    values[2] = v8;
    CFDictionaryRef v11 = CFDictionaryCreate( 0LL,  (const void **)buf,  (const void **)values,  3LL,  &kCFCopyStringDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    int v12 = v11;
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256LL))( a1,  @"kUplinkFreqBwNotification",  v11);
  }

  else if (!v7)
  {
    goto LABEL_12;
  }

  CFRelease(v7);
LABEL_12:
  if (v8) {
    CFRelease(v8);
  }
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t sub_10032303C(uint64_t a1, const __CFDictionary *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_101832E18);
  }
  io_service_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#cts,notification,%{public}@",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101832E18);
    }
    LODWORD(v30.__r_.__value_.__l.__data_) = 138543362;
    *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
    __int16 v18 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#cts,notification,%{public}@",  &v30,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)",  "%s\n",  (const char *)v18);
    if (v18 != buf) {
      free(v18);
    }
  }

  sub_1002A5550((int)v28, a2);
  CFTypeRef cf1 = 0LL;
  int v5 = sub_1002A8874((uint64_t)v28, kKeyCTCellularTransmitState, &cf1);
  if (cf1) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v6 == 1)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101832E18);
    }
    CFNumberRef v7 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002A6C50((const __CFString *)cf1, buf);
      CFNumberRef v8 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? buf : (std::string *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v30.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#cts,state,%{public}s", (uint8_t *)&v30, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_101832E18);
      }
      uint64_t v19 = qword_101934888;
      sub_1002A6C50((const __CFString *)cf1, &v30);
      if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v20 = &v30;
      }
      else {
        __int16 v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)values = 136446210;
      *(void *)&values[4] = v20;
      LODWORD(v26) = 12;
      uint64_t v21 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  0LL,  "#cts,state,%{public}s",  values,  v26);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)",  "%s\n",  (const char *)v21);
      if (v21 != buf) {
        free(v21);
      }
    }

    *(void *)values = 0LL;
    keys = @"kCLCellularTransmitStateNotification";
    if (CFEqual(cf1, kCTCellularTransmitStateConnected))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_101832E18);
      }
      CFTypeRef v9 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#cts,state,connected", (uint8_t *)buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_101832E18);
        }
        LOWORD(v30.__r_.__value_.__l.__data_) = 0;
        LODWORD(v26) = 2;
        __int16 v22 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "#cts,state,connected",  &v30,  v26);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)",  "%s\n",  (const char *)v22);
        if (v22 != buf) {
          free(v22);
        }
      }

      buf[0].__r_.__value_.__s.__data_[0] = 1;
      CFTypeRef v10 = sub_1002AD138(buf);
    }

    else
    {
      if (!CFEqual(cf1, kCTCellularTransmitStateIdle))
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_101832E18);
        }
        __int16 v16 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#cts,state,unknown", (uint8_t *)buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_101832E18);
          }
          LOWORD(v30.__r_.__value_.__l.__data_) = 0;
          LODWORD(v26) = 2;
          __int128 v25 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "#cts,state,unknown",  &v30,  v26);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)",  "%s\n",  (const char *)v25);
          if (v25 != buf) {
            free(v25);
          }
        }

        goto LABEL_54;
      }

      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_101832E18);
      }
      int v13 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#cts,state,idle", (uint8_t *)buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_101832E18);
        }
        LOWORD(v30.__r_.__value_.__l.__data_) = 0;
        LODWORD(v26) = 2;
        uint64_t v24 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "#cts,state,idle",  &v30,  v26);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)",  "%s\n",  (const char *)v24);
        if (v24 != buf) {
          free(v24);
        }
      }

      buf[0].__r_.__value_.__s.__data_[0] = 0;
      CFTypeRef v10 = sub_1002AD138(buf);
    }

    *(void *)values = v10;
    CFDictionaryRef v14 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)values,  1LL,  &kCFCopyStringDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (v14)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_101832E18);
      }
      int v15 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#cts,state,notify,%{public}@",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_101832E18);
        }
        LODWORD(v30.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
        LODWORD(v26) = 12;
        unint64_t v23 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#cts,state,notify,%{public}@",  &v30,  v26);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)",  "%s\n",  (const char *)v23);
        if (v23 != buf) {
          free(v23);
        }
      }

      (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256LL))( a1,  @"kCLCellularTransmitStateNotification",  v14);
      CFRelease(v14);
    }

void sub_100323A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100323ABC(uint64_t a1, uint64_t a2, const __CFString *a3, const __CFDictionary *a4)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  CFNumberRef v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_1002A6C50(a3, (std::string *)__p);
    CFNumberRef v8 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "CTService: received notification %s",  (uint8_t *)&buf,  0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v31 = qword_101934A78;
    sub_1002A6C50(a3, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)CFArrayRef theArray = 136315138;
    *(void *)&theArray[4] = p_buf;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v31,  2LL,  "CTService: received notification %s",  theArray);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v33);
    if (v33 != __p) {
      free(v33);
    }
  }

  if (CFEqual(kCTRegistrationCellChangedNotification, a3) || CFEqual(kCTRegistrationStatusChangedNotification, a3))
  {
    sub_1002A5550((int)theArray, a4);
    if ((sub_1002A6FD4((uint64_t)theArray, kCTRegistrationInHomeCountry, (BOOL *)(a1 + 161)) & 1) == 0)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101832D58);
      }
      CFTypeRef v9 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "couldn't get kCTRegistrationInHomeCountry, keeping current value",  __p,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101832D58);
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        id v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "couldn't get kCTRegistrationInHomeCountry, keeping current value",  &buf,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v36);
        if (v36 != __p) {
          free(v36);
        }
      }
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101832D58);
    }
    CFTypeRef v10 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      sub_1002A6C50(a3, &buf);
      CFDictionaryRef v11 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
      int v12 = *(unsigned __int8 *)(a1 + 161);
      *(void *)std::string __p = 68289538LL;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v11;
      __int16 v52 = 1026;
      int v53 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:updated kCTRegistrationInHomeCountry from, notification:%{public, location:escape_o nly}s, fInHomeCountry:%{public}hhd}",  __p,  0x22u);
    }

    sub_100324A80((_BYTE *)a1);
    sub_1002A5590(theArray);
  }

  if (CFEqual(kCTIndicatorRadioTransmitNotification, a3))
  {
    sub_1002A5550((int)&buf, a4);
    if ((sub_1002A6FD4((uint64_t)&buf, kCTRadioTransmitDCHStatus, (BOOL *)&v48) & 1) != 0)
    {
      if (!(_BYTE)v48)
      {
        *(_DWORD *)(a1 + 136) = 0;
        goto LABEL_40;
      }

      int v13 = 1;
    }

    else
    {
      int v13 = -1;
    }

    *(_DWORD *)(a1 + 136) = v13;
LABEL_40:
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    int v15 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)std::string __p = 67109120;
      *(_DWORD *)&__p[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "CTService: cell transmit status is %d",  __p,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      int v34 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)CFArrayRef theArray = 67109120;
      *(_DWORD *)&theArray[4] = v34;
      BOOL v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CTService: cell transmit status is %d",  theArray);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v35);
      if (v35 != __p) {
        free(v35);
      }
    }

    int v17 = &buf;
LABEL_46:
    sub_1002A5590(v17);
    return (*(uint64_t (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(void *)a1 + 256LL))( a1,  a3,  a4);
  }

  if (CFEqual(kCTConnectionInvalidatedNotification, a3))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    CFDictionaryRef v14 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CTService: CommCenter server connection invalidated",  __p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      LODWORD(v46) = 2;
      int v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CTService: CommCenter server connection invalidated",  &buf,  v46);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v37);
      if (v37 != __p) {
        free(v37);
      }
    }

    *(_BYTE *)(a1 + 160) = 0;
    sub_100322B6C(a1, 1);
  }

  else if (CFEqual(kCTDaemonReadyNotification, a3))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v19 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "CTService: CommCenter server connection ready",  __p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      LODWORD(v46) = 2;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CTService: CommCenter server connection ready",  &buf,  v46);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v38);
      if (v38 != __p) {
        free(v38);
      }
    }

    *(_BYTE *)(a1 + 160) = 1;
    sub_1003224C4(a1);
  }

  else if (CFEqual(kCTCellMonitorUpdateNotification, a3))
  {
    *(void *)CFArrayRef theArray = 0LL;
    if (sub_100324B44(a1, (uint64_t *)theArray))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101832E38);
      }
      __int16 v20 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)theArray);
        *(_DWORD *)std::string __p = 134217984;
        *(void *)&__p[4] = Count;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "@CellService, ctupdate, list, %lu",  __p,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101832E38);
        }
        uint64_t v39 = qword_101934858;
        CFIndex v40 = CFArrayGetCount(*(CFArrayRef *)theArray);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
        BOOL v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v39,  0LL,  "@CellService, ctupdate, list, %lu",  &buf);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v41);
        if (v41 != __p) {
          free(v41);
        }
      }

      *(void *)std::string __p = @"kCellRefreshNotification";
      buf.__r_.__value_.__r.__words[0] = *(void *)theArray;
      CFDictionaryRef v22 = CFDictionaryCreate( 0LL,  (const void **)__p,  (const void **)&buf.__r_.__value_.__l.__data_,  1LL,  &kCFCopyStringDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      unint64_t v23 = v22;
      CFRelease(*(CFTypeRef *)theArray);
      (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256LL))( a1,  @"kCellRefreshNotification",  v22);
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101832E38);
      }
      CFTypeID v28 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "CellService, outcome, emptylist, CTService",  __p,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101832E38);
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        LODWORD(v46) = 2;
        unint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "CellService, outcome, emptylist, CTService",  &buf,  v46);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v29);
        if (v29 != __p) {
          free(v29);
        }
      }
    }
  }

  else
  {
    if (CFEqual(kCTRadioModuleUplinkChangedNotification, a3))
    {
      sub_1002A5550((int)theArray, a4);
      uint64_t v48 = -1LL;
      unsigned int v47 = -1;
      if (sub_1002A7A7C((uint64_t)theArray, kCTRadioModuleUplinkFrequencyValue, &v48)
        && (sub_1002A77CC((uint64_t)theArray, kCTRadioModuleUplinkBandwidthValue, &v47) & 1) != 0)
      {
        float v24 = (float)v47;
        *(float *)(a1 + 164) = (float)v48;
        *(float *)(a1 + 168) = v24;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101832D58);
        }
        __int128 v25 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          double v26 = *(float *)(a1 + 164);
          double v27 = *(float *)(a1 + 168);
          *(_DWORD *)std::string __p = 134349312;
          *(double *)&__p[4] = v26;
          *(_WORD *)&__p[12] = 2050;
          *(double *)&__p[14] = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "#imd,kCTRadioModuleUplinkChangedNotification,freq(Hz),%{public}f,bw(Hz),%{public}f",  __p,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101832D58);
          }
          double v43 = *(float *)(a1 + 164);
          double v44 = *(float *)(a1 + 168);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v43;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v44;
          LODWORD(v46) = 22;
          uint64_t v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#imd,kCTRadioModuleUplinkChangedNotification,freq(Hz),%{public}f,bw(Hz),%{public}f",  &buf,  v46);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v45);
          if (v45 != __p) {
            free(v45);
          }
        }

        sub_100322DC4(a1, *(float *)(a1 + 164), *(float *)(a1 + 168));
      }

      else
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101832D58);
        }
        std::string v30 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string __p = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "#imd,#cterror,couldn't get kCTRadioModuleUplinkChangedNotification values",  __p,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101832D58);
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          LODWORD(v46) = 2;
          int v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#imd,#cterror,couldn't get kCTRadioModuleUplinkChangedNotification values",  &buf,  v46);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)",  "%s\n",  v42);
          if (v42 != __p) {
            free(v42);
          }
        }
      }

      int v17 = (std::string *)theArray;
      goto LABEL_46;
    }

    if (CFEqual(kCTCellularTransmitStateNotification, a3)) {
      sub_10032303C(a1, a4);
    }
  }

  return (*(uint64_t (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(void *)a1 + 256LL))( a1,  a3,  a4);
}

void sub_100324A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100324A80(_BYTE *a1)
{
  uint64_t v2 = (void *)sub_1002AD138(a1 + 161);
  values = v2;
  keys = @"kInHomeCountryKey";
  CFDictionaryRef v3 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  io_service_t v4 = v3;
  (*(void (**)(_BYTE *, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256LL))( a1,  @"kInHomeCountryLegacyNotification",  v3);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t sub_100324B44(uint64_t a1, uint64_t *a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    io_service_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      unsigned int v25 = 0;
      __int16 v26 = 2082;
      *(void *)double v27 = "";
      *(_WORD *)&v27[8] = 1026;
      *(_DWORD *)&v27[10] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (v6)
  {
    HIBYTE(v18) = 0;
    unint64_t v7 = _CTServerConnectionCellMonitorCopyCellInfo(v6, (char *)&v18 + 7, a2);
    unsigned int v8 = v7;
    if ((_DWORD)v7) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = HIBYTE(v18) == 0;
    }
    if (v9 || !*a2)
    {
      unint64_t v11 = HIDWORD(v7);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      int v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *a2;
        *(_DWORD *)std::string buf = 67109888;
        unsigned int v25 = v8;
        __int16 v26 = 1024;
        *(_DWORD *)double v27 = v11;
        *(_WORD *)&v27[4] = 2048;
        *(void *)&v27[6] = v13;
        __int16 v28 = 1024;
        int v29 = HIBYTE(v18);
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)",  buf,  0x1Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        uint64_t v15 = *a2;
        LOWORD(v20) = 1024;
        HIWORD(v20) = v11;
        uint64_t v21 = v15;
        __int16 v22 = 1024;
        int v23 = HIBYTE(v18);
        int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)",  &v19,  30,  (const void *)__PAIR64__(v8, 67109888),  v20);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::createCTCellArray(CFArrayRef *)", "%s\n", v16);
      }

      uint64_t result = *a2;
      if (*a2)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0LL;
        *a2 = 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    CFDictionaryRef v14 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(v19) = 0;
      LODWORD(v18) = 2;
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  &v19,  v18);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::createCTCellArray(CFArrayRef *)", "%s\n", v17);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100324F6C(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2)
  {
    uint64_t v5 = sub_100320878(a2);
    _CTServerConnectionRegisterForNotification(v2, v5);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101832D58);
    }
    uint64_t v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v7 = (const __CFString *)sub_100320878(a2);
      sub_1002A6C50(v7, __p);
      unsigned int v8 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CLTelephonyService,registerForNotificationInternal,%s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101832D58);
      }
      uint64_t v11 = qword_101934838;
      int v12 = (const __CFString *)sub_100320878(a2);
      sub_1002A6C50(v12, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v16 = 136315138;
      int v17 = p_buf;
      CFDictionaryRef v14 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v11,  2LL,  "CLTelephonyService,registerForNotificationInternal,%s",  (const char *)&v16);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLTelephonyService::registerForNotificationInternal(const CLTelephonyService_Type::Notification &)",  "%s\n",  (const char *)v14);
      if (v14 != __p) {
        free(v14);
      }
    }

    BOOL v9 = (const void *)sub_100320878(a2);
    if (CFEqual(v9, @"kInHomeCountryLegacyNotification")) {
      sub_100322704(a1);
    }
  }

  return 1LL;
}

uint64_t sub_1003251D0(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2)
  {
    uint64_t v4 = sub_100320878(a2);
    _CTServerConnectionUnregisterForNotification(v2, v4);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101832D58);
    }
    uint64_t v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (const __CFString *)sub_100320878(a2);
      sub_1002A6C50(v6, __p);
      unint64_t v7 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "CLTelephonyService,unregisterForNotificationInternal,%s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101832D58);
      }
      uint64_t v9 = qword_101934838;
      CFTypeRef v10 = (const __CFString *)sub_100320878(a2);
      sub_1002A6C50(v10, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v14 = 136315138;
      uint64_t v15 = p_buf;
      int v12 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  2LL,  "CLTelephonyService,unregisterForNotificationInternal,%s",  (const char *)&v14);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLTelephonyService::unregisterForNotificationInternal(const CLTelephonyService_Type::Notification &)",  "%s\n",  (const char *)v12);
      if (v12 != __p) {
        free(v12);
      }
    }
  }

  return 1LL;
}

BOOL sub_100325408@<W0>(int *a1@<X1>, std::string *a2@<X8>)
{
  CFDictionaryRef v3 = (const __CFString *)sub_100320878(a1);
  return sub_1002A6C50(v3, a2);
}

uint64_t sub_100325430(const void *a1)
{
  if (a1)
  {
    if (CFEqual(a1, kCTRegistrationStatusNotRegistered))
    {
      return 1LL;
    }

    else if (CFEqual(a1, kCTRegistrationStatusSearching))
    {
      return 2LL;
    }

    else if (CFEqual(a1, kCTRegistrationStatusDenied))
    {
      return 3LL;
    }

    else if (CFEqual(a1, kCTRegistrationStatusRegisteredHome))
    {
      return 4LL;
    }

    else if (CFEqual(a1, kCTRegistrationStatusRegisteredRoaming))
    {
      return 5LL;
    }

    else if (CFEqual(a1, kCTRegistrationStatusEmergencyOnly))
    {
      return 6LL;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    CFDictionaryRef v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning CELL_LOC: fromRegistrationStatus(statusStr): statusStr == NULL",  buf,  2u);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v5[0] = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning CELL_LOC: fromRegistrationStatus(statusStr): statusStr == NULL",  v5,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTelephonyService_Type::RegistrationStatus fromRegistrationStatus(CFStringRef)",  "%s\n",  v4);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10032567C(uint64_t a1)
{
  unsigned int v1 = sub_10031EDE4(a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    unsigned int v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Registration status: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    v5[0] = 67109120;
    v5[1] = v1;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Registration status: %d",  v5);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLTelephonyService::getIsRegisteredOnCell()", "%s\n", v4);
  }

  return v1 > 3;
}

BOOL sub_100325830(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (v6)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    unsigned int v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "_CTServerConnectionGetRegistrationStatus failed",  buf,  2u);
    }

    BOOL v8 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v12[0] = 0;
      CFTypeRef v10 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  16LL,  "_CTServerConnectionGetRegistrationStatus failed",  v12,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLTelephonyService::getRegistrationStatus(CFStringRef &)",  "%s\n");
LABEL_24:
      if (v10 != buf) {
        free(v10);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v12[0] = 0;
      CFTypeRef v10 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v12,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLTelephonyService::getRegistrationStatus(CFStringRef &)",  "%s\n");
      goto LABEL_24;
    }
  }

  return result;
}

uint64_t sub_100325B9C(int a1, const __CFString *cf1)
{
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSM)) {
    return 0LL;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN2)) {
    return 9LL;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSMCompact)) {
    return 1LL;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN)) {
    return 2LL;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMA1x)) {
    return 3LL;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAEVDO)) {
    return 4LL;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAHybrid)
    || CFEqual(cf1, kCTRegistrationRadioAccessTechnologyeHRPD))
  {
    return 5LL;
  }

  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyLTE)) {
    return 6LL;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyNR)) {
    return 10LL;
  }
  if (!CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUnknown))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_1002A6C50(cf1, __p);
      int v5 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "CELL_LOC: unknown registration technology, %{public}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      uint64_t v6 = qword_101934A78;
      sub_1002A6C50(cf1, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v10 = 136446210;
      uint64_t v11 = p_buf;
      BOOL v8 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v6,  17LL,  "CELL_LOC: unknown registration technology, %{public}s",  &v10,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "RadioAccessTechnology CLTelephonyService::fromRadioAccessTechnology(CFStringRef)",  "%s\n",  (const char *)v8);
      if (v8 != __p) {
        free(v8);
      }
    }
  }

  return 11LL;
}

BOOL sub_100325F00(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (v6)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    unsigned int v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionGetRadioAccessTechnology failed",  buf,  2u);
    }

    BOOL v8 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v12[0] = 0;
      int v10 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionGetRadioAccessTechnology failed",  v12,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLTelephonyService::getRadioAccessTechnology(CFStringRef &)", "%s\n");
LABEL_24:
      if (v10 != buf) {
        free(v10);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v12[0] = 0;
      int v10 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v12,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLTelephonyService::getRadioAccessTechnology(CFStringRef &)", "%s\n");
      goto LABEL_24;
    }
  }

  return result;
}

BOOL sub_10032626C(uint64_t a1, SInt32 *a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 1026;
      int v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(str[0]) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  str,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLTelephonyService::getServingMcc(int &)", "%s\n", v13);
    }

    return 0LL;
  }

  str[0] = 0LL;
  uint64_t v7 = _CTServerConnectionCopyCountryCode(v6, str);
  BOOL v8 = v7 == 0;
  if (v7)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionCopyCountryCode failed",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v14[0] = 0;
      int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionCopyCountryCode failed",  v14,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLTelephonyService::getServingMcc(int &)", "%s\n", v10);
    }

    goto LABEL_25;
  }

  if (!str[0]) {
    return 0LL;
  }
  *a2 = CFStringGetIntValue(str[0]);
LABEL_25:
  if (str[0]) {
    CFRelease(str[0]);
  }
  return v8;
}

BOOL sub_100326618(uint64_t a1, SInt32 *a2)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 1026;
      int v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(str[0]) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  str,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLTelephonyService::getServingMnc(int &)", "%s\n", v13);
    }

    return 0LL;
  }

  str[0] = 0LL;
  uint64_t v7 = _CTServerConnectionCopyNetworkCode(v6, str);
  BOOL v8 = v7 == 0;
  if (v7)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionCopyNetworkCode failed",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      v14[0] = 0;
      int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionCopyNetworkCode failed",  v14,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLTelephonyService::getServingMnc(int &)", "%s\n", v10);
    }

    goto LABEL_25;
  }

  if (!str[0]) {
    return 0LL;
  }
  *a2 = CFStringGetIntValue(str[0]);
LABEL_25:
  if (str[0]) {
    CFRelease(str[0]);
  }
  return v8;
}

BOOL sub_1003269C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v19 = 0;
      __int16 v20 = 2082;
      int v21 = "";
      __int16 v22 = 1026;
      int v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:DaemonNotReady for CT SPI, fDaemonReady:%{public}hhd}",  buf,  0x18u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 144);
  if (v8)
  {
    if (_CTServerConnectionGetLocationAreaCode(v8, a2))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      uint64_t v9 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionGetLocationAreaCode failed",  buf,  2u);
      }

      BOOL v10 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v10)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        LOWORD(v17[0]) = 0;
        uint64_t v12 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionGetLocationAreaCode failed",  v17,  2,  v17[0]);
LABEL_33:
        int v14 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLTelephonyService::getServingCellLacCi(int &, int &)",  "%s\n");
LABEL_34:
        if (v14 != buf) {
          free(v14);
        }
        return 0LL;
      }
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      __int16 v15 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "_CTServerConnectionGetCellID failed",  buf,  2u);
      }

      BOOL v16 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v16)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        LOWORD(v17[0]) = 0;
        uint64_t v12 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "_CTServerConnectionGetCellID failed",  v17,  2,  v17[0]);
        goto LABEL_33;
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v13 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "currently not connected to telephony service",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      LOWORD(v17[0]) = 0;
      int v14 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "currently not connected to telephony service",  v17,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLTelephonyService::getServingCellLacCi(int &, int &)",  "%s\n");
      goto LABEL_34;
    }
  }

  return result;
}

BOOL sub_100326E28(uint64_t *a1, CFArrayRef theArray, int a3)
{
  __int128 v100 = 0LL;
  __int128 v101 = 0LL;
  uint64_t v102 = 0LL;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 != *a1)
  {
    do
    {
      v6 -= 696LL;
      sub_10032B988((uint64_t)(a1 + 2), v6);
    }

    while (v6 != v5);
  }

  a1[1] = v5;
  __int128 v95 = theArray;
  if (!theArray)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101832E38);
    }
    __int128 v90 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "CellService, convert, empty CellList",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101832E38);
      }
      LOWORD(v109[0]) = 0;
      __int128 v93 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "CellService, convert, empty CellList",  v109,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)",  "%s\n",  v93);
      if (v93 != buf) {
        free(v93);
      }
    }

    goto LABEL_135;
  }

  CFIndex Count = CFArrayGetCount(theArray);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101832E38);
  }
  int v7 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = Count;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CellService, convertCells, %{public}d, neighbors, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101832E38);
    }
    LODWORD(v109[0]) = 67240448;
    HIDWORD(v109[0]) = Count;
    LOWORD(v109[1]) = 1026;
    *(_DWORD *)((char *)&v109[1] + 2) = a3;
    __int128 v92 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "CellService, convertCells, %{public}d, neighbors, %{public}d",  v109,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)",  "%s\n",  v92);
    if (v92 != buf) {
      free(v92);
    }
  }

  if (Count >= 1)
  {
    CFIndex v8 = 0LL;
    key = (void *)kCTCellMonitorDerivedMCC;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      CFTypeID v10 = CFGetTypeID(ValueAtIndex);
      if (v10 == CFDictionaryGetTypeID())
      {
        CFDictionaryRef v99 = (CFDictionaryRef)ValueAtIndex;
        if (CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, key))
        {
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101832DD8);
          }
          uint64_t v11 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: derivedMCC dictionary",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101832DD8);
            }
            LOWORD(v109[0]) = 0;
            LODWORD(v94) = 2;
            __int16 v68 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: derivedMCC dictionary",  v109,  v94);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)",  "%s\n",  v68);
            if (v68 != buf) {
              free(v68);
            }
          }

          sub_100328064(&v99, (uint64_t)&v100);
        }

        else
        {
          sub_100F58B64(v109, &v99);
          if (HIDWORD(v109[0]) == 1) {
            int v14 = a3;
          }
          else {
            int v14 = 0;
          }
          if (!HIDWORD(v109[0]) || v14)
          {
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101832E38);
            }
            __int16 v26 = (os_log_s *)qword_101934858;
            if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
            {
              sub_100F58B68((uint64_t)v109, (std::stringbuf::string_type *)buf);
              int v27 = buf[23];
              __int16 v28 = *(_BYTE **)buf;
              sub_100F591F4((unsigned int *)v109, &v104);
              int v29 = buf;
              if (v27 < 0) {
                int v29 = v28;
              }
              std::string v30 = &v104;
              if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                std::string v30 = (std::stringbuf::string_type *)v104.__r_.__value_.__r.__words[0];
              }
              LODWORD(__p.__r_.__value_.__l.__data_) = 136446467;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "CellService, convert, add, %{public}s, %{private}s",  (uint8_t *)&__p,  0x16u);
              CFArrayRef theArray = v95;
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_101832E38);
              }
              uint64_t v69 = qword_101934858;
              sub_100F58B68((uint64_t)v109, &v104);
              int size = (char)v104.__r_.__value_.__s.__size_;
              std::string::size_type v71 = v104.__r_.__value_.__r.__words[0];
              sub_100F591F4((unsigned int *)v109, &__p);
              __int128 v72 = &v104;
              if (size < 0) {
                __int128 v72 = (std::stringbuf::string_type *)v71;
              }
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              }
              LODWORD(v103.__r_.__value_.__l.__data_) = 136446467;
              *(std::string::size_type *)((char *)v103.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
              WORD2(v103.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v103.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
              LODWORD(v94) = 22;
              int v74 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v69,  0LL,  "CellService, convert, add, %{public}s, %{private}s",  &v103,  v94);
              CFArrayRef theArray = v95;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)",  "%s\n",  v74);
              if (v74 != buf) {
                free(v74);
              }
            }

            v154[0] = v112[0];
            *(_OWORD *)((char *)v154 + 12) = *(_OWORD *)((char *)v112 + 12);
            *(_OWORD *)&uint8_t buf[16] = v110;
            *(_OWORD *)&uint8_t buf[32] = v111;
            *(_OWORD *)std::string buf = *(_OWORD *)v109;
            int v155 = v113;
            uint64_t v157 = 0LL;
            __int128 v156 = 0uLL;
            sub_10001B72C(&v156, v114, (uint64_t)v115, (v115 - (_BYTE *)v114) >> 2);
            __int128 v168 = v126;
            v169[0] = v127[0];
            *(_OWORD *)((char *)v169 + 12) = *(_OWORD *)((char *)v127 + 12);
            __int128 v164 = v122;
            __int128 v165 = v123;
            __int128 v166 = v124;
            __int128 v167 = v125;
            __int128 v160 = v118;
            __int128 v161 = v119;
            __int128 v162 = v120;
            __int128 v163 = v121;
            __int128 v158 = v116;
            __int128 v159 = v117;
            if (SHIBYTE(v129) < 0)
            {
              sub_1010DD48C(&v170, (void *)__src, *((unint64_t *)&__src + 1));
            }

            else
            {
              __int128 v170 = __src;
              uint64_t v171 = v129;
            }

            __int128 v180 = v138;
            __int128 v181 = v139;
            int v182 = v140;
            __int128 v176 = v134;
            __int128 v177 = v135;
            __int128 v178 = v136;
            __int128 v179 = v137;
            __int128 v172 = v130;
            __int128 v173 = v131;
            __int128 v174 = v132;
            __int128 v175 = v133;
            __int128 v191 = v149;
            __int128 v192 = v150;
            __int128 v193 = v151;
            int v194 = v152;
            __int128 v187 = v145;
            __int128 v188 = v146;
            __int128 v189 = v147;
            __int128 v190 = v148;
            __int128 v183 = v141;
            __int128 v184 = v142;
            __int128 v185 = v143;
            __int128 v186 = v144;
            unint64_t v31 = a1[1];
            if (v31 >= a1[2])
            {
              uint64_t v63 = sub_10032B9CC(a1, (uint64_t)buf);
              int v64 = SHIBYTE(v171);
              a1[1] = v63;
              if (v64 < 0) {
                operator delete((void *)v170);
              }
            }

            else
            {
              *(_OWORD *)unint64_t v31 = *(_OWORD *)buf;
              __int128 v32 = *(_OWORD *)&buf[16];
              __int128 v33 = *(_OWORD *)&buf[32];
              __int128 v34 = v154[0];
              *(_OWORD *)(v31 + 60) = *(_OWORD *)((char *)v154 + 12);
              *(_OWORD *)(v31 + memset(&buf[7], 0, 32) = v33;
              *(_OWORD *)(v31 + 48) = v34;
              *(_OWORD *)(v31 + 16) = v32;
              *(_DWORD *)(v31 + 80) = v155;
              unint64_t v35 = v31 + 80;
              *(void *)(v35 + 16) = 0LL;
              *(void *)(v35 + 24) = 0LL;
              *(void *)(v35 + 8) = 0LL;
              *(_OWORD *)(v35 + 8) = v156;
              *(void *)(v35 + 24) = v157;
              __int128 v156 = 0uLL;
              uint64_t v157 = 0LL;
              *(_OWORD *)(v35 + memset(&buf[7], 0, 32) = v158;
              __int128 v36 = v159;
              __int128 v37 = v160;
              __int128 v38 = v162;
              *(_OWORD *)(v35 + 80) = v161;
              *(_OWORD *)(v35 + 96) = v38;
              *(_OWORD *)(v35 + 48) = v36;
              *(_OWORD *)(v35 + 64) = v37;
              __int128 v39 = v163;
              __int128 v40 = v164;
              __int128 v41 = v166;
              *(_OWORD *)(v35 + 144) = v165;
              *(_OWORD *)(v35 + 160) = v41;
              *(_OWORD *)(v35 + 112) = v39;
              *(_OWORD *)(v35 + 128) = v40;
              __int128 v42 = v167;
              __int128 v43 = v168;
              __int128 v44 = v169[0];
              *(_OWORD *)(v35 + 220) = *(_OWORD *)((char *)v169 + 12);
              *(_OWORD *)(v35 + 192) = v43;
              *(_OWORD *)(v35 + 208) = v44;
              *(_OWORD *)(v35 + 176) = v42;
              __int128 v45 = v170;
              *(void *)(v35 + 256) = v171;
              *(_OWORD *)(v35 + 240) = v45;
              uint64_t v171 = 0LL;
              __int128 v170 = 0uLL;
              __int128 v47 = v173;
              __int128 v46 = v174;
              *(_OWORD *)(v35 + 264) = v172;
              *(_OWORD *)(v35 + 280) = v47;
              *(_OWORD *)(v35 + sub_10000AE14(v1 + 296) = v46;
              __int128 v48 = v178;
              __int128 v50 = v175;
              __int128 v49 = v176;
              *(_OWORD *)(v35 + 344) = v177;
              *(_OWORD *)(v35 + 360) = v48;
              *(_OWORD *)(v35 + 312) = v50;
              *(_OWORD *)(v35 + 328) = v49;
              __int128 v52 = v180;
              __int128 v51 = v181;
              __int128 v53 = v179;
              *(_DWORD *)(v35 + 424) = v182;
              *(_OWORD *)(v35 + 392) = v52;
              *(_OWORD *)(v35 + 408) = v51;
              *(_OWORD *)(v35 + 376) = v53;
              __int128 v54 = v183;
              __int128 v55 = v184;
              __int128 v56 = v186;
              *(_OWORD *)(v35 + 464) = v185;
              *(_OWORD *)(v35 + 480) = v56;
              *(_OWORD *)(v35 + 4memset(&buf[7], 0, 32) = v54;
              *(_OWORD *)(v35 + 448) = v55;
              __int128 v57 = v187;
              __int128 v58 = v188;
              __int128 v59 = v190;
              *(_OWORD *)(v35 + 528) = v189;
              *(_OWORD *)(v35 + 544) = v59;
              *(_OWORD *)(v35 + 496) = v57;
              *(_OWORD *)(v35 + 512) = v58;
              __int128 v60 = v191;
              __int128 v61 = v192;
              __int128 v62 = v193;
              *(_DWORD *)(v35 + 608) = v194;
              *(_OWORD *)(v35 + 576) = v61;
              *(_OWORD *)(v35 + 592) = v62;
              *(_OWORD *)(v35 + 560) = v60;
              a1[1] = v35 + 616;
            }

            if ((void)v156)
            {
              *((void *)&v156 + 1) = v156;
              operator delete((void *)v156);
            }
          }

          else
          {
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101832E38);
            }
            __int16 v15 = (os_log_s *)qword_101934858;
            if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
            {
              sub_100F58B68((uint64_t)v109, &v104);
              int v16 = (char)v104.__r_.__value_.__s.__size_;
              std::string::size_type v17 = v104.__r_.__value_.__r.__words[0];
              sub_100F591F4((unsigned int *)v109, &__p);
              __int16 v18 = &v104;
              if (v16 < 0) {
                __int16 v18 = (std::stringbuf::string_type *)v17;
              }
              int v19 = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                int v19 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136446979;
              *(void *)&uint8_t buf[4] = v18;
              *(_WORD *)&_BYTE buf[12] = 2081;
              *(void *)&_BYTE buf[14] = v19;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&_BYTE buf[24] = HIDWORD(v109[0]) == 0;
              *(_WORD *)&_BYTE buf[28] = 1026;
              *(_DWORD *)&buf[30] = HIDWORD(v109[0]) == 1;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "CellService, convert, ignore, %{public}s, %{private}s, serving, %{public}d, neighbor, %{public}d",  buf,  0x22u);
              CFArrayRef theArray = v95;
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_101832E38);
              }
              uint64_t v20 = qword_101934858;
              sub_100F58B68((uint64_t)v109, &__p);
              int v21 = (char)__p.__r_.__value_.__s.__size_;
              std::string::size_type v22 = __p.__r_.__value_.__r.__words[0];
              sub_100F591F4((unsigned int *)v109, &v103);
              int v23 = &__p;
              if (v21 < 0) {
                int v23 = (std::stringbuf::string_type *)v22;
              }
              float v24 = &v103;
              if ((v103.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                float v24 = (std::stringbuf::string_type *)v103.__r_.__value_.__r.__words[0];
              }
              LODWORD(v104.__r_.__value_.__l.__data_) = 136446979;
              *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
              WORD2(v104.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
              HIWORD(v104.__r_.__value_.__r.__words[2]) = 1026;
              BOOL v105 = HIDWORD(v109[0]) == 0;
              __int16 v106 = 1026;
              BOOL v107 = HIDWORD(v109[0]) == 1;
              LODWORD(v94) = 34;
              unsigned int v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  1LL,  "CellService, convert, ignore, %{public}s, %{private}s, serving, %{public}d, neighbor, %{public}d",  &v104,  v94);
              CFArrayRef theArray = v95;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)",  "%s\n",  v25);
              if (v25 != buf) {
                free(v25);
              }
            }
          }

          if (SHIBYTE(v129) < 0) {
            operator delete((void *)__src);
          }
          if (v114)
          {
            __int16 v115 = v114;
            operator delete(v114);
          }
        }
      }

      else
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101832E38);
        }
        uint64_t v12 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          CFTypeID TypeID = CFDictionaryGetTypeID();
          *(_DWORD *)std::string buf = 134349056;
          *(void *)&uint8_t buf[4] = TypeID;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "CellService, convert, invalid, %{public}ld",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101832E38);
          }
          uint64_t v65 = qword_101934858;
          __int16 v66 = (void *)CFDictionaryGetTypeID();
          LODWORD(v109[0]) = 134349056;
          *(void **)((char *)v109 + 4) = v66;
          LODWORD(v94) = 12;
          int v67 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v65,  16LL,  "CellService, convert, invalid, %{public}ld",  v109,  v94);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)",  "%s\n",  v67);
          if (v67 != buf) {
            free(v67);
          }
        }
      }

      ++v8;
    }

    while (Count != v8);
  }

  __int128 v75 = v100;
  if (v101 != v100)
  {
    uint64_t v76 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v77 = 0LL;
      unint64_t v78 = 0LL;
      do
      {
        if ((*(_DWORD *)(v76 + v77 + 8) - 3) <= 2)
        {
          sub_100F59260(v76 + v77, (uint64_t)&v100);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101832E38);
          }
          __int128 v79 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
          {
            sub_100F58B68(*a1 + v77, (std::stringbuf::string_type *)buf);
            int v80 = buf[23];
            __int128 v81 = *(_BYTE **)buf;
            sub_100F591F4((unsigned int *)(*a1 + v77), (std::stringbuf::string_type *)v109);
            __int128 v82 = buf;
            if (v80 < 0) {
              __int128 v82 = v81;
            }
            __int128 v83 = v109;
            if (SBYTE7(v110) < 0) {
              __int128 v83 = (void **)v109[0];
            }
            LODWORD(v104.__r_.__value_.__l.__data_) = 136446467;
            *(std::string::size_type *)((char *)v104.__r_.__value_.__r.__words + 4) = (std::string::size_type)v82;
            WORD2(v104.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v83;
            _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "CellService, convert, derive, %{public}s, %{private}s",  (uint8_t *)&v104,  0x16u);
            if (SBYTE7(v110) < 0) {
              operator delete(v109[0]);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101832E38);
            }
            uint64_t v84 = qword_101934858;
            sub_100F58B68(*a1 + v77, (std::stringbuf::string_type *)v109);
            int v85 = SBYTE7(v110);
            __int128 v86 = (void **)v109[0];
            sub_100F591F4((unsigned int *)(*a1 + v77), &v104);
            int v87 = v109;
            if (v85 < 0) {
              int v87 = v86;
            }
            __int128 v88 = &v104;
            if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int128 v88 = (std::stringbuf::string_type *)v104.__r_.__value_.__r.__words[0];
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = 136446467;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v87;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v88;
            LODWORD(v94) = 22;
            __int128 v89 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v84,  0LL,  "CellService, convert, derive, %{public}s, %{private}s",  &__p,  v94);
            if (SBYTE7(v110) < 0) {
              operator delete(v109[0]);
            }
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)",  "%s\n",  v89);
            if (v89 != buf) {
              free(v89);
            }
          }
        }

        ++v78;
        uint64_t v76 = *a1;
        v77 += 696LL;
      }

      while (v78 < 0x66FD0EB66FD0EB67LL * ((a1[1] - *a1) >> 3));
    }

LABEL_135:
    __int128 v75 = v100;
    CFArrayRef theArray = v95;
  }

  if (v75)
  {
    __int128 v101 = v75;
    operator delete(v75);
  }

  return theArray != 0LL;
}

  sub_100E65C94((uint64_t)&v66);
  __int128 v55 = std::string::append(&v66, "/");
  __int128 v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__l.__cap_ = v55->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0LL;
  v55->__r_.__value_.__l.__cap_ = 0LL;
  v55->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v57 = std::string::append(&v67, "com.apple.timed");
  __int128 v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[0] = v57->__r_.__value_.__l.__cap_;
  __int16 v68 = v58;
  v57->__r_.__value_.__l.__size_ = 0LL;
  v57->__r_.__value_.__l.__cap_ = 0LL;
  v57->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v59 = std::string::append((std::string *)&v68, ".plist");
  __int128 v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__l.__cap_ = v59->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0LL;
  v59->__r_.__value_.__l.__cap_ = 0LL;
  v59->__r_.__value_.__r.__words[0] = 0LL;
  if (v69.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v68);
  }
  if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v61 = __p;
  }
  else {
    __int128 v61 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  sub_100E65BA8((uint64_t)&v67);
  sub_1010DDBC0(&v66, "com.apple.timed");
  sub_1010DDBC0(&v65, ".plist.log");
  sub_100E6601C( (const void **)&v67.__r_.__value_.__l.__data_,  (uint64_t)&v66,  (uint64_t)&v65,  (uint64_t)v3,  (std::string *)&v68);
  if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v62 = __p;
  }
  else {
    __int128 v62 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (v69.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v63 = (const char *)&v68;
  }
  else {
    uint64_t v63 = (const char *)v68;
  }
  if ((v69.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
LABEL_160:
    if ((v7 & 1) != 0) {
      goto LABEL_162;
    }
    goto LABEL_161;
  }

  operator delete((void *)v68);
  if ((v7 & 1) == 0) {
LABEL_161:
  }
    syslog(5, "%s,%s,could not dump log file\n", "WARNING", "CLLog");
LABEL_162:
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
  if (SHIBYTE(v81) < 0) {
    operator delete((void *)__dst);
  }
  if (HIBYTE(v84))
  {
    if ((_BYTE)v84) {
      pthread_mutex_unlock(v83);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v82 + 24LL))(v82);
    }
  }

  *(_WORD *)((char *)a1 + 297) = 0;
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 80LL))(*a1))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101867068);
    }
    __int128 v46 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "Fence: recalculate, release power assertion",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101867068);
      }
      *(_WORD *)__int128 v86 = 0;
      LODWORD(v74) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  1LL,  "Fence: recalculate, release power assertion",  v86,  v74);
      uint64_t v63 = (uint8_t *)v62;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitorWifi::recalculateNow(const CFAbsoluteTime)",  "%s\n",  v62);
      if (v63 != buf) {
        free(v63);
      }
    }

    (*(void (**)(void))(*(void *)*a1 + 72LL))(*a1);
  }

  (*(void (**)(void, double))(*(void *)*a1 + 136LL))(*a1, a2);
  *(void *)std::string buf = &v77;
  sub_100023498((void ***)buf);
  *(void *)std::string buf = &v79;
  sub_100023498((void ***)buf);
  *(void *)std::string buf = &v82;
  sub_100023498((void ***)buf);
}

  sub_1002F0B04(buf);
  if (sub_1002A6F64(*(uint64_t *)buf, "LCFusionEnableRecordInternalState", (BOOL *)(a1 + 2264)))
  {
    __int128 v62 = *(unsigned __int8 *)(a1 + 2264);
    uint64_t v63 = v87;
    if (!v87) {
      goto LABEL_140;
    }
    int v64 = (unint64_t *)&v87->__shared_owners_;
    do
      uint64_t v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      if (!v62) {
        goto LABEL_156;
      }
    }

    else
    {
LABEL_140:
      if (!v62) {
        goto LABEL_156;
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int16 v66 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "LCFusion enable record internal state to protobuf",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion enable record internal state to protobuf",  v85,  v84);
      __int16 v68 = (uint8_t *)v67;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v67);
      if (v68 != buf) {
        free(v68);
      }
    }
  }

  else
  {
    uint64_t v69 = v87;
    if (v87)
    {
      __int128 v70 = (unint64_t *)&v87->__shared_owners_;
      do
        std::string::size_type v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }

  BOOL result = *(float *)(a2 + 200);
  v5 |= 0x8000000000uLL;
  os_log_s *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 200) = result;
  int v7 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_70:
    if ((v7 & 4) == 0) {
      goto LABEL_71;
    }
    goto LABEL_137;
  }

  PB::TextFormatter::format(this, "maxPulseHeight", *(float *)(a1 + 308));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_69:
    if ((v6 & 0x40) == 0) {
      goto LABEL_70;
    }
    goto LABEL_137;
  }

  BOOL result = PB::Writer::write(this, *(float *)(v3 + 200), 0x41u);
  uint64_t v6 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_70:
    if ((v6 & 4) == 0) {
      goto LABEL_71;
    }
    goto LABEL_137;
  }

  BOOL result = *(float *)(a2 + 252);
  v5 |= 0x1000000000000000uLL;
  os_log_s *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 252) = result;
  uint64_t v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400000000000000LL) == 0)
  {
LABEL_62:
    if ((v7 & 0x200) == 0) {
      goto LABEL_63;
    }
    goto LABEL_137;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold2", *(float *)(a1 + 196));
  uint64_t v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000LL) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000LL) == 0) {
      goto LABEL_62;
    }
    goto LABEL_137;
  }

  BOOL result = PB::Writer::write(this, *(_BYTE *)(v3 + 277), 0x38u);
  uint64_t v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000LL) == 0)
  {
LABEL_61:
    if ((v5 & 0x10000000000LL) == 0) {
      goto LABEL_62;
    }
    goto LABEL_137;
  }

  BOOL result = *(float *)(a2 + 92);
  v5 |= 0x100000uLL;
  os_log_s *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 92) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000) == 0)
  {
LABEL_55:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_137;
  }

  PB::TextFormatter::format(this, "kRegimeZgThresholdROWOASF", *(float *)(a1 + 180));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((v7 & 0x10000) == 0)
  {
LABEL_54:
    if ((v6 & 0x80000000000LL) == 0) {
      goto LABEL_55;
    }
    goto LABEL_137;
  }

  BOOL result = PB::Writer::write(this, *(float *)(v3 + 92), 0xF5u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_55:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_137;
  }

  float v24 = *(_BYTE *)(a2 + 323);
  v6 |= 0x1000uLL;
  os_log_s *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 323) = v24;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((v7 & 0x200000) == 0)
  {
LABEL_30:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_137;
  }

  PB::TextFormatter::format(this, "isTriggerClustersDecided", *(_BYTE *)(a1 + 333));
  int v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x800000) == 0)
  {
LABEL_34:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_137;
  }

  BOOL result = PB::Writer::write(this, *(_BYTE *)(v3 + 323), 0x6Au);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x200000) == 0)
  {
LABEL_30:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_137;
  }

  __int16 v66 = *(_BYTE *)(a2 + 159);
  v3 |= 0x1000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 159) = v66;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_57:
    if ((v2 & 0x10000000000LL) == 0) {
      goto LABEL_58;
    }
    goto LABEL_137;
  }

  PB::TextFormatter::format(this, "kSaturationMetRO0", *(_BYTE *)(a1 + 193));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x80) == 0)
  {
LABEL_56:
    if ((v6 & 0x100) == 0) {
      goto LABEL_57;
    }
    goto LABEL_137;
  }

  BOOL result = PB::Writer::write(this, *(_BYTE *)(v3 + 198), 0x459u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x800) == 0)
  {
LABEL_57:
    if ((v4 & 0x80) == 0) {
      goto LABEL_58;
    }
    goto LABEL_137;
  }

                *(void *)(a1 + 8) = v51;
              }

              else if ((_DWORD)v20 == 202)
              {
                *(_WORD *)(a1 + 60) |= 2u;
                int v27 = *((void *)this + 1);
                uint64_t v2 = *((void *)this + 2);
                __int16 v28 = *(void *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
                {
                  __int128 v58 = 0;
                  __int128 v59 = 0;
                  unint64_t v31 = 0LL;
                  if (v2 <= v27) {
                    uint64_t v2 = *((void *)this + 1);
                  }
                  while (1)
                  {
                    if (v2 == v27)
                    {
                      unint64_t v31 = 0LL;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_120;
                    }

                    __int128 v60 = v27++;
                    __int128 v61 = *(_BYTE *)(v28 + v60);
                    *((void *)this + 1) = v27;
                    v31 |= (unint64_t)(v61 & 0x7F) << v58;
                    if ((v61 & 0x80) == 0) {
                      break;
                    }
                    v58 += 7;
                    int v14 = v59++ > 8;
                    if (v14)
                    {
                      unint64_t v31 = 0LL;
                      goto LABEL_119;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    unint64_t v31 = 0LL;
                  }
LABEL_119:
                  uint64_t v2 = v60 + 1;
                }

                else
                {
                  int v29 = 0;
                  std::string v30 = 0;
                  unint64_t v31 = 0LL;
                  while (1)
                  {
                    uint64_t v2 = v27 + 1;
                    *((void *)this + 1) = v27 + 1;
                    __int128 v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v29 += 7;
                    int v27 = v2;
                    int v14 = v30++ > 8;
                    if (v14)
                    {
                      unint64_t v31 = 0LL;
                      break;
                    }
                  }
                }

              *(_DWORD *)(a1 + 44) = v25;
              goto LABEL_166;
            case 3u:
              *(_BYTE *)(a1 + 52) |= 0x40u;
              __int128 v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                __int128 v72 = 0;
                __int16 v73 = 0;
                __int128 v37 = 0LL;
                if (v2 <= v33) {
                  CFDictionaryRef v3 = *((void *)this + 1);
                }
                else {
                  CFDictionaryRef v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }

                  int v74 = v33++;
                  __int128 v75 = *(_BYTE *)(v34 + v74);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0) {
                    break;
                  }
                  v72 += 7;
                  int v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    CFDictionaryRef v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_144;
              }

              unint64_t v35 = 0;
              __int128 v36 = 0;
              __int128 v37 = 0LL;
              do
              {
                CFDictionaryRef v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                __int128 v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v35 += 7;
                __int128 v33 = v3;
                int v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_166;
            case 4u:
              *(_BYTE *)(a1 + 52) |= 0x10u;
              __int128 v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v76 = 0;
                uint64_t v77 = 0;
                __int128 v43 = 0LL;
                if (v2 <= v39) {
                  CFDictionaryRef v3 = *((void *)this + 1);
                }
                else {
                  CFDictionaryRef v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }

                  unint64_t v78 = v39++;
                  __int128 v79 = *(_BYTE *)(v40 + v78);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0) {
                    break;
                  }
                  v76 += 7;
                  int v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    CFDictionaryRef v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_149;
              }

              __int128 v41 = 0;
              __int128 v42 = 0;
              __int128 v43 = 0LL;
              do
              {
                CFDictionaryRef v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                __int128 v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v41 += 7;
                __int128 v39 = v3;
                int v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_166;
            case 5u:
              *(_BYTE *)(a1 + 52) |= 8u;
              __int128 v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                int v80 = 0;
                __int128 v81 = 0;
                __int128 v49 = 0LL;
                if (v2 <= v45) {
                  CFDictionaryRef v3 = *((void *)this + 1);
                }
                else {
                  CFDictionaryRef v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    __int128 v49 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }

                  __int128 v82 = v45++;
                  __int128 v83 = *(_BYTE *)(v46 + v82);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0) {
                    break;
                  }
                  v80 += 7;
                  int v14 = v81++ > 8;
                  if (v14)
                  {
                    __int128 v49 = 0LL;
LABEL_154:
                    CFDictionaryRef v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  __int128 v49 = 0LL;
                }
                goto LABEL_154;
              }

              __int128 v47 = 0;
              __int128 v48 = 0;
              __int128 v49 = 0LL;
              do
              {
                CFDictionaryRef v3 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                __int128 v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v47 += 7;
                __int128 v45 = v3;
                int v14 = v48++ > 8;
              }

              while (!v14);
              __int128 v49 = 0LL;
LABEL_155:
              *(void *)(a1 + memset(&buf[7], 0, 32) = v49;
              goto LABEL_166;
            case 6u:
              *(_BYTE *)(a1 + 52) |= 1u;
              __int128 v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                uint64_t v84 = 0;
                int v85 = 0;
                __int128 v55 = 0LL;
                if (v2 <= v51) {
                  CFDictionaryRef v3 = *((void *)this + 1);
                }
                else {
                  CFDictionaryRef v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    __int128 v55 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_160;
                  }

                  __int128 v86 = v51++;
                  int v87 = *(_BYTE *)(v52 + v86);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0) {
                    break;
                  }
                  v84 += 7;
                  int v14 = v85++ > 8;
                  if (v14)
                  {
                    __int128 v55 = 0LL;
LABEL_159:
                    CFDictionaryRef v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  __int128 v55 = 0LL;
                }
                goto LABEL_159;
              }

              __int128 v53 = 0;
              __int128 v54 = 0;
              __int128 v55 = 0LL;
              do
              {
                CFDictionaryRef v3 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                __int128 v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_160;
                }
                v53 += 7;
                __int128 v51 = v3;
                int v14 = v54++ > 8;
              }

              while (!v14);
              __int128 v55 = 0LL;
LABEL_160:
              *(void *)(a1 + 8) = v55;
              goto LABEL_166;
            default:
              if ((_DWORD)v20 == 100)
              {
                *(_BYTE *)(a1 + 52) |= 4u;
                __int128 v57 = *((void *)this + 1);
                uint64_t v2 = *((void *)this + 2);
                __int128 v58 = *(void *)this;
                if (v57 > 0xFFFFFFFFFFFFFFF5LL || v57 + 10 > v2)
                {
                  __int128 v88 = 0;
                  __int128 v89 = 0;
                  __int128 v61 = 0LL;
                  if (v2 <= v57) {
                    CFDictionaryRef v3 = *((void *)this + 1);
                  }
                  else {
                    CFDictionaryRef v3 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      __int128 v61 = 0LL;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_165;
                    }

                    __int128 v90 = v57++;
                    __int128 v91 = *(_BYTE *)(v58 + v90);
                    *((void *)this + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0) {
                      break;
                    }
                    v88 += 7;
                    int v14 = v89++ > 8;
                    if (v14)
                    {
                      __int128 v61 = 0LL;
                      goto LABEL_164;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    __int128 v61 = 0LL;
                  }
LABEL_164:
                  CFDictionaryRef v3 = v90 + 1;
                }

                else
                {
                  __int128 v59 = 0;
                  __int128 v60 = 0;
                  __int128 v61 = 0LL;
                  while (1)
                  {
                    CFDictionaryRef v3 = v57 + 1;
                    *((void *)this + 1) = v57 + 1;
                    __int128 v62 = *(_BYTE *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0) {
                      break;
                    }
                    v59 += 7;
                    __int128 v57 = v3;
                    int v14 = v60++ > 8;
                    if (v14)
                    {
                      __int128 v61 = 0LL;
                      break;
                    }
                  }
                }

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          uint64_t v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        case 8u:
          *(_BYTE *)(a1 + 100) |= 0x20u;
          __int128 v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_133;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_135;
      }
    }

    int v21 = 0;
    std::string::size_type v22 = 0;
    std::string::size_type v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      float v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        std::string::size_type v17 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

    *(_BYTE *)(a1 + 256) = *(_BYTE *)(v68 + 88);
    __int128 v72 = *(double *)(v1 + 152);
    __int16 v73 = *(double *)(v1 + 56);
    if (v72 >= v73) {
      int v74 = v1;
    }
    else {
      int v74 = v1 + 96;
    }
    if (v8 != v2)
    {
      if (v72 >= v73) {
        __int128 v75 = v1 + 96;
      }
      else {
        __int128 v75 = v1;
      }
      uint64_t v76 = v1 + 192;
      uint64_t v77 = v1;
      while (1)
      {
        unint64_t v78 = v76;
        __int128 v79 = v76 + 96;
        if (v79 == v2) {
          break;
        }
        int v80 = v77 + 288;
        __int128 v81 = *(double *)(v78 + 152);
        __int128 v82 = *(double *)(v78 + 56);
        __int128 v83 = *(double *)(v74 + 56);
        uint64_t v84 = *(double *)(v75 + 56);
        if (v82 >= v83) {
          int v85 = v74;
        }
        else {
          int v85 = v78;
        }
        if (v81 < v84) {
          int v80 = v75;
        }
        if (v81 < v83) {
          int v74 = v79;
        }
        if (v82 >= v84) {
          __int128 v75 = v78;
        }
        if (v81 >= v82)
        {
          int v74 = v85;
          __int128 v75 = v80;
        }

        uint64_t v76 = v78 + 192;
        uint64_t v77 = v78;
        if (v78 + 192 == v2) {
          goto LABEL_159;
        }
      }
    }

void sub_100327F50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100328064(CFDictionaryRef *a1, uint64_t a2)
{
  int v25 = 0;
  sub_1002A5550((int)v24, *a1);
  uint64_t v3 = kCTCellMonitorDerivedMCC;
  int v4 = sub_1002AF180((uint64_t)v24);
  if (v4 >= 1)
  {
    int v5 = 0;
    int v23 = 67240448;
    do
    {
      if (sub_1002A7D20((uint64_t)v24, v3, &v25))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        uint64_t v6 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67109632;
          int v33 = v5;
          __int16 v34 = 1024;
          int v35 = v4;
          __int16 v36 = 1024;
          int v37 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: Adding MCC %d / %d : %d",  buf,  0x14u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101832DD8);
          }
          int v26 = 67109632;
          int v27 = v5;
          __int16 v28 = 1024;
          int v29 = v4;
          __int16 v30 = 1024;
          int v31 = v25;
          uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: Adding MCC %d / %d : %d",  &v26,  20,  v23);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLTelephonyService::derivedMccFromMonitorDict(const CFDictionaryRef &, DerivedMccVector &)",  "%s\n",  v20);
        }

        CFIndex v8 = *(_DWORD **)(a2 + 8);
        unint64_t v7 = *(void *)(a2 + 16);
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v12 = *(_DWORD **)a2;
          uint64_t v13 = ((uint64_t)v8 - *(void *)a2) >> 2;
          unint64_t v14 = v13 + 1;
          uint64_t v15 = v7 - (void)v12;
          if (v15 >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            std::string::size_type v17 = (char *)sub_10000956C(a2 + 16, v16);
            uint64_t v12 = *(_DWORD **)a2;
            CFIndex v8 = *(_DWORD **)(a2 + 8);
          }

          else
          {
            std::string::size_type v17 = 0LL;
          }

          __int16 v18 = &v17[4 * v13];
          *(_DWORD *)__int16 v18 = v25;
          uint64_t v9 = v18 + 4;
          while (v8 != v12)
          {
            int v19 = *--v8;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }

          *(void *)a2 = v18;
          *(void *)(a2 + 8) = v9;
          *(void *)(a2 + 16) = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }

        else
        {
          _DWORD *v8 = v25;
          uint64_t v9 = v8 + 1;
        }

        *(void *)(a2 + 8) = v9;
      }

      else
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        CFTypeID v10 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = v23;
          int v33 = v5;
          __int16 v34 = 1026;
          int v35 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "CELL_LOC: can't get MCC %{public}d / %{public}d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101832DD8);
          }
          int v26 = v23;
          int v27 = v5;
          __int16 v28 = 1026;
          int v29 = v4;
          LODWORD(v22) = 14;
          uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "CELL_LOC: can't get MCC %{public}d / %{public}d",  &v26,  v22);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLTelephonyService::derivedMccFromMonitorDict(const CFDictionaryRef &, DerivedMccVector &)",  "%s\n",  v11);
        }
      }

      ++v5;
    }

    while (v5 != v4);
  }

  return sub_1002A5590(v24);
}

void sub_1003284BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1003284E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

  return a1;
}

BOOL sub_100328524(uint64_t a1, uint64_t *a2, int a3)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  uint64_t v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: getting current serving cell", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    LOWORD(v17) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: getting current serving cell",  &v17,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::extractServingCellsFromDictionary(std::vector<CLCell> &, BOOL)",  "%s\n",  v13);
  }

  CFTypeRef cf = 0LL;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      v7 -= 696LL;
      sub_10032B988((uint64_t)(a2 + 2), v7);
    }

    while (v7 != v8);
  }

  a2[1] = v8;
  else {
    BOOL v9 = 0LL;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }
  CFTypeID v10 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = 0x66FD0EB66FD0EB67LL * ((a2[1] - *a2) >> 3);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v20 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: getting current serving cells %lu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101832DD8);
    }
    uint64_t v14 = 0x66FD0EB66FD0EB67LL * ((a2[1] - *a2) >> 3);
    int v17 = 134217984;
    uint64_t v18 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: getting current serving cells %lu",  &v17);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTelephonyService::extractServingCellsFromDictionary(std::vector<CLCell> &, BOOL)",  "%s\n",  v15);
  }

  return v9;
}

uint64_t sub_1003288BC()
{
  return 0LL;
}

void sub_1003288C4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101832D18);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTelephonyService::basebandDetectCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    BOOL v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      int v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTelephonyService::basebandDetectCallback, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v10 = [*(id *)(a1 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10032ACFC;
  v11[3] = &unk_101830558;
  int v12 = a2;
  int v13 = a3;
  v11[4] = a1;
  void v11[5] = a4;
  [v10 sync:v11];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100328ABC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100328ADC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 4);
  else {
    int v5 = (&off_101832FD0)[v4];
  }
  return sub_1010DDBC0(a2, v5);
}

id sub_100328B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, id **a4@<X8>)
{
  uint64_t v8 = (id *)operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLTelephonyService");
  sub_100328C88((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  id *v8 = &off_101832CA0;
  *a4 = v8;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  sub_1003207C0(__p, (uint64_t)@"kCLTelephonyServiceConnectedNotification");
  [v8[2] register:v8[1] forNotification:sub_100320924((unsigned int *)__p) registrationInfo:0];
  sub_1003207C0(__p, (uint64_t)@"kCLTelephonyServiceDisconnectedNotification");
  [v8[2] register:v8[1] forNotification:sub_100320924((unsigned int *)__p) registrationInfo:0];
  sub_1003207C0(__p, (uint64_t)@"kCLTelephonyServiceResetNotification");
  return [v8[2] register:v8[1] forNotification:sub_100320924((unsigned int *)__p) registrationInfo:0];
}

void sub_100328C38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100328C88(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101832FB8;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + memset(&buf[7], 0, 32) = a6;
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100328D5C(uint64_t a1, uint64_t a2)
{
  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v14 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832D18);
      }
      id v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        char v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        __int16 v20 = v11;
        __int16 v21 = 1026;
        int v22 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101832D18);
        }
        int v12 = (void *)(a1 + 8);
        int v15 = 136446466;
        unint64_t v16 = v12;
        __int16 v17 = 1026;
        int v18 = a2;
        LODWORD(v14) = 18;
        id v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char , char>::removeClient(int) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTel ephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
      }
    }
  }

uint64_t sub_100328FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101937650);
}

BOOL sub_100328FE4(uint64_t a1, int a2, unsigned int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v41 = v10;
      int v16 = sub_100320924(a3);
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }

      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      int v24 = sub_100320924(a3);
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v24;
        if (v27 >= v24) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v24 >= *(_DWORD *)(v26 + 32))
      {
        *(void *)__int128 v43 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + memset(&buf[7], 0, 32) = v36;
        *(void *)std::string buf = 0LL;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, unsigned int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          int v37 = sub_10032C270((const void **)buf);
          sub_10032B1AC((_BYTE *)a1, (uint64_t)&v41, (uint64_t)v43, v37);
        }

        sub_10032AC64((const void **)buf);
        if (v35) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        *(void *)__int128 v43 = a1 + 64;
        char v30 = byte_101937651;
        HIDWORD(v40) = sub_100320924(a3);
        *(void *)std::string buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = sub_100320924(a3);
        *(void *)std::string buf = (char *)&v40 + 4;
        int v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = sub_100320924(a3);
        *(void *)std::string buf = (char *)&v40 + 4;
        int v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + memset(&buf[7], 0, 32) = v32;
      }

      (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        uint64_t v34 = v41;
        *(_DWORD *)std::string buf = sub_100320924(a3);
        sub_10004A8FC((uint64_t **)(v34 + 40), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101832D18);
  }
  uint64_t v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    __int128 v38 = (void *)(a1 + 8);
    *(_DWORD *)__int128 v43 = 136446466;
    *(void *)&v43[4] = v38;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    __int128 v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                    v43,
                    v40);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, ch ar>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTelephon yService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v39);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

void sub_100329470( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_100329490(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v5;
    }
    else {
      BOOL v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    int v14 = sub_100320924(a3);
    uint64_t v17 = *(void *)(v6 + 48);
    uint64_t v16 = v6 + 48;
    uint64_t v15 = v17;
    if (!v17) {
      goto LABEL_29;
    }
    uint64_t v18 = v16;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v14;
      if (v19 >= v14) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v16 || v14 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v16;
    return v18 != v16;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      int v29 = v11;
      __int16 v30 = 1026;
      int v31 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832D18);
      }
      BOOL v22 = (void *)(a1 + 8);
      int v24 = 136446466;
      uint64_t v25 = v22;
      __int16 v26 = 1026;
      int v27 = a2;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                      &v24,
                      18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, No tificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100329714(char *a1, int a2, unsigned int *a3)
{
  HIDWORD(v33) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        int v12 = sub_100320924(a3);
        uint64_t v15 = (char *)*((void *)v8 + 6);
        int v14 = v8 + 48;
        id v13 = v15;
        if (v15)
        {
          uint64_t v16 = v14;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v12;
            if (v17 >= v12) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v14 && v12 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = sub_100320924(a3);
            sub_1004EF494((uint64_t)(v14 - 8), (int *)__p);
            int v20 = sub_100320924(a3);
            uint64_t v21 = *((void *)a1 + 8);
            if (!v21) {
              goto LABEL_33;
            }
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v21 + 32);
              BOOL v24 = v23 < v20;
              if (v23 >= v20) {
                uint64_t v25 = (uint64_t *)v21;
              }
              else {
                uint64_t v25 = (uint64_t *)(v21 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v21;
              }
              uint64_t v21 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v20 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, unsigned int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101832D18);
              }
              __int16 v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, unsigned int *))(*(void *)a1 + 160LL))( __p,  a1,  a3);
                if (v43 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v35 = 2082;
                char v36 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101832D18);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, unsigned int *))(*(void *)a1 + 160LL))( buf,  a1,  a3);
                if (v37 >= 0) {
                  int v31 = buf;
                }
                else {
                  int v31 = *(_BYTE **)buf;
                }
                int v38 = 136446466;
                __int128 v39 = v29;
                __int16 v40 = 2082;
                uint64_t v41 = v31;
                LODWORD(v33) = 22;
                char v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationDa ta, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTelephonyS ervice_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, Notificatio nInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v32);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

void sub_100329AB0(uint64_t a1, unsigned int *a2)
{
  int v3 = sub_100320924(a2);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v7 = v5;
    do
    {
      int v8 = *(_DWORD *)(v4 + 32);
      BOOL v9 = v8 < v3;
      if (v8 >= v3) {
        BOOL v10 = (uint64_t *)v4;
      }
      else {
        BOOL v10 = (uint64_t *)(v4 + 8);
      }
      if (!v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }

    while (*v10);
    if (v7 != v5 && v3 >= *(_DWORD *)(v7 + 32)) {
      sub_1000F0D38((void *)(v7 + 64));
    }
  }

uint64_t sub_100329B20(uint64_t a1, unsigned int *a2, const void **a3)
{
  int v5 = sub_100320924(a2);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v7;
  do
  {
    int v10 = *(_DWORD *)(v6 + 32);
    BOOL v11 = v10 < v5;
    if (v10 >= v5) {
      int v12 = (uint64_t *)v6;
    }
    else {
      int v12 = (uint64_t *)(v6 + 8);
    }
    if (!v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = *v12;
  }

  while (*v12);
  if (v9 == v7) {
    return 0LL;
  }
  if (v5 < *(_DWORD *)(v9 + 32)) {
    return 0LL;
  }
  id v13 = *(CFTypeRef **)(v9 + 64);
  if (!v13) {
    return 0LL;
  }
  CFTypeRef v14 = *v13;
  if (*v13) {
    CFRetain(*v13);
  }
  uint64_t v15 = *a3;
  *a3 = v14;
  int v17 = v15;
  sub_10032AC64(&v17);
  return 1LL;
}

uint64_t sub_100329BC4(uint64_t a1, unsigned int *a2, const void **a3)
{
  int v10 = sub_100320924(a2);
  int v12 = &v10;
  int v5 = sub_10023347C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_1012CF090, &v12);
  sub_10005F550((uint64_t)(v5 + 8), &v11);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    uint64_t v7 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 1LL;
}

void sub_100329C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

const void **sub_100329C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = 0LL;
  (*(void (**)(uint64_t, uint64_t, const void **, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  &v5,  a3,  a4,  0LL);
  return sub_10032AC64(&v5);
}

void sub_100329CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100329CE8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v34 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832D18);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v29 = 136315138;
      uint64_t v30 = v4;
      int v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
                     (const char *)&v29);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonySe rvice_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101832D18);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = (void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v34 = v7;
      __int16 v35 = 2048;
      v36[0] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832D18);
      }
      uint64_t v25 = (void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 96);
      int v29 = 136315394;
      uint64_t v30 = v25;
      __int16 v31 = 2048;
      v32[0] = v26;
      int v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
                      (const char *)&v29,
                      22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonySe rvice_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v27);
    }

    uint64_t v9 = *(void **)(a1 + 80);
    if (v9 != (void *)(a1 + 88))
    {
      int v10 = (void *)(a1 + 8);
      do
      {
        __int128 v11 = (void *)v9[5];
        if (v11 != v9 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101832D18);
            }
            int v12 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              id v13 = (void *)(a1 + 8);
              int v14 = *((_DWORD *)v9 + 8);
              int v15 = *((_DWORD *)v11 + 7);
              *(_DWORD *)std::string buf = 136315650;
              uint64_t v34 = v13;
              __int16 v35 = 1024;
              LODWORD(v36[0]) = v14;
              WORD2(v36[0]) = 1024;
              *(_DWORD *)((char *)v36 + 6) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101832D18);
              }
              int v19 = (void *)(a1 + 8);
              int v20 = *((_DWORD *)v9 + 8);
              int v21 = *((_DWORD *)v11 + 7);
              int v29 = 136315650;
              uint64_t v30 = v19;
              __int16 v31 = 1024;
              LODWORD(v32[0]) = v20;
              WORD2(v32[0]) = 1024;
              *(_DWORD *)((char *)v32 + 6) = v21;
              BOOL v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                              (const char *)&v29,
                              24,
                              v28);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData , char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v22);
            }

            uint64_t v16 = (void *)v11[1];
            if (v16)
            {
              do
              {
                int v17 = v16;
                uint64_t v16 = (void *)*v16;
              }

              while (v16);
            }

            else
            {
              do
              {
                int v17 = (void *)v11[2];
                BOOL v18 = *v17 == (void)v11;
                __int128 v11 = v17;
              }

              while (!v18);
            }

            __int128 v11 = v17;
          }

          while (v17 != v9 + 6);
        }

        int v23 = (void *)v9[1];
        if (v23)
        {
          do
          {
            BOOL v24 = v23;
            int v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            BOOL v24 = (void *)v9[2];
            BOOL v18 = *v24 == (void)v9;
            uint64_t v9 = v24;
          }

          while (!v18);
        }

        uint64_t v9 = v24;
      }

      while (v24 != (void *)(a1 + 88));
    }
  }

void sub_10032A294(uint64_t a1)
{
  unsigned int v1 = (void *)sub_10032C210(a1);
  operator delete(v1);
}

id sub_10032A2A8(uint64_t a1, int a2, void *a3)
{
  id result = sub_10032B564(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_10032A2F4(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10032A320(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10032A34C(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10032A378(id a1)
{
  unsigned int v1 = operator new(0x38uLL);
  v1[2] = 0LL;
  *unsigned int v1 = 0LL;
  v1[1] = v1 + 2;
  v1[6] = 0LL;
  _OWORD v1[5] = 0LL;
  v1[3] = 0LL;
  v1[4] = v1 + 5;
  qword_1019942C0 = (uint64_t)v1;
}

uint64_t sub_10032A3B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = (void **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v5 = v2 + 16;
    do
    {
      CFComparisonResult v6 = CFStringCompare(*(CFStringRef *)(v3 + 32), *(CFStringRef *)(a1 + 40), 0LL);
      uint64_t v7 = (uint64_t *)(v3 + 8);
      if (v6 != kCFCompareLessThan)
      {
        uint64_t v7 = (uint64_t *)v3;
        uint64_t v5 = v3;
      }

      uint64_t v3 = *v7;
    }

    while (*v7);
    if ((void **)v5 != v4
      && CFStringCompare(*(CFStringRef *)(a1 + 40), *(CFStringRef *)(v5 + 32), 0LL) != kCFCompareLessThan)
    {
      return *(unsigned int *)(v5 + 40);
    }

    uint64_t v9 = (_DWORD *)(v2 + 4);
    int v10 = *(_DWORD *)(v2 + 4);
    __int128 v11 = *(CFStringRef **)(v2 + 16);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          int v12 = v11;
          if (CFStringCompare(*(CFStringRef *)(a1 + 40), v11[4], 0LL) != kCFCompareLessThan) {
            break;
          }
          __int128 v11 = (CFStringRef *)*v12;
          uint64_t v4 = (void **)v12;
          if (!*v12)
          {
            uint64_t v4 = (void **)v12;
            goto LABEL_18;
          }
        }

        if (CFStringCompare(v12[4], *(CFStringRef *)(a1 + 40), 0LL) != kCFCompareLessThan) {
          break;
        }
        uint64_t v4 = (void **)(v12 + 1);
        __int128 v11 = (CFStringRef *)v12[1];
        if (!v11) {
          goto LABEL_18;
        }
      }

      id v13 = *v4;
      if (*v4) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v9 = (_DWORD *)(v2 + 4);
    int v10 = *(_DWORD *)(v2 + 4);
  }

  int v12 = (CFStringRef *)(v2 + 16);
LABEL_18:
  id v13 = operator new(0x30uLL);
  void v13[4] = *(void *)(a1 + 40);
  *((_DWORD *)v13 + 10) = 0;
  *id v13 = 0LL;
  v13[1] = 0LL;
  uint64_t v13[2] = v12;
  void *v4 = v13;
  uint64_t v14 = **(void **)(v2 + 8);
  int v15 = v13;
  if (v14)
  {
    *(void *)(v2 + 8) = v14;
    int v15 = (uint64_t *)*v4;
  }

  sub_100008650(*(uint64_t **)(v2 + 16), v15);
  ++*(void *)(v2 + 24);
LABEL_21:
  *((_DWORD *)v13 + 10) = v10;
  uint64_t v16 = *(uint64_t **)(a1 + 40);
  int v17 = v9;
  sub_10000C858((uint64_t **)(v2 + 32), v9, (uint64_t)&unk_1012CF090, &v17)[5] = v16;
  uint64_t result = *(unsigned int *)(v2 + 4);
  *(_DWORD *)(v2 + 4) = result + 1;
  return result;
}

uint64_t sub_10032A55C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v3 = (void *)(v1 + 40);
  uint64_t v2 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  int v5 = *(_DWORD *)(a1 + 40);
  CFComparisonResult v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v2 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v2;
    }
    else {
      uint64_t v9 = (uint64_t *)(v2 + 8);
    }
    if (!v8) {
      CFComparisonResult v6 = (void *)v2;
    }
    uint64_t v2 = *v9;
  }

  while (*v9);
  if (v6 == v3 || v5 < *((_DWORD *)v6 + 8))
  {
LABEL_12:
    uint64_t v29 = *(void *)(a1 + 32);
    __int128 v11 = *(void **)(v29 + 32);
    if (v11 != v3) {
      goto LABEL_29;
    }
    while (1)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      int v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        int v13 = *(_DWORD *)(a1 + 40);
        int v14 = *(_DWORD *)(v29 + 4);
        *(_DWORD *)std::string buf = 67109376;
        int v34 = v13;
        __int16 v35 = 1024;
        LODWORD(v36) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Request to decode unknown integer %d is a programmer error. fSize %d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
        int v25 = *(_DWORD *)(a1 + 40);
        int v26 = *(_DWORD *)(v29 + 4);
        v30[0] = 67109376;
        v30[1] = v25;
        __int16 v31 = 1024;
        int v32 = v26;
        int v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Request to decode unknown integer %d is a programmer error. fSize %d",  v30,  14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFStringRef (anonymous namespace)::NotificationMap::notificationFromInt(int)_block_invoke",  "%s\n",  v27);
      }

      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
      int v15 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v34 = 0;
        __int16 v35 = 2082;
        char v36 = "";
        __int16 v37 = 2082;
        *(void *)int v38 = "assert";
        *(_WORD *)&v38[8] = 2081;
        *(void *)&v38[10] = "0";
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  buf,  0x26u);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
      }

      uint64_t v16 = (os_log_s *)qword_101934A78;
      if (os_signpost_enabled((os_log_t)qword_101934A78))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v34 = 0;
        __int16 v35 = 2082;
        char v36 = "";
        __int16 v37 = 2082;
        *(void *)int v38 = "assert";
        *(_WORD *)&v38[8] = 2081;
        *(void *)&v38[10] = "0";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  buf,  0x26u);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101832DD8);
        }
      }

      int v17 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v34 = 0;
        __int16 v35 = 2082;
        char v36 = "";
        __int16 v37 = 2082;
        *(void *)int v38 = "assert";
        *(_WORD *)&v38[8] = 2081;
        *(void *)&v38[10] = "0";
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  buf,  0x26u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm",  572,  "notificationFromInt_block_invoke");
LABEL_29:
      uint64_t v18 = qword_101934880;
      do
      {
        if (v18 != -1) {
          dispatch_once(&qword_101934880, &stru_101832E18);
        }
        int v19 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *((_DWORD *)v11 + 8);
          uint64_t v21 = v11[5];
          *(_DWORD *)std::string buf = 68289794;
          int v34 = 0;
          __int16 v35 = 2082;
          char v36 = "";
          __int16 v37 = 1026;
          *(_DWORD *)int v38 = v20;
          *(_WORD *)&v38[4] = 2050;
          *(void *)&v38[6] = v21;
          *(_WORD *)&v38[14] = 2114;
          *(void *)&v38[16] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Int2NotifMap, Key:%{public}d, NotifPtr:%{public}p, NotifVal:%{publ ic, location:escape_only}@}",  buf,  0x2Cu);
          uint64_t v18 = qword_101934880;
        }

        else
        {
          uint64_t v18 = -1LL;
        }

        BOOL v22 = (void *)v11[1];
        if (v22)
        {
          do
          {
            int v23 = v22;
            BOOL v22 = (void *)*v22;
          }

          while (v22);
        }

        else
        {
          do
          {
            int v23 = (void *)v11[2];
            BOOL v24 = *v23 == (void)v11;
            __int128 v11 = v23;
          }

          while (!v24);
        }

        __int128 v11 = v23;
      }

      while (v23 != v3);
    }
  }

  return v6[5];
}

void sub_10032AAD8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10032AB04(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  sub_1010DDBC0((void *)(a1 + 8), (char *)[@"kBundleIDUnavailable" UTF8String]);
  *(_BYTE *)(a1 + memset(&buf[7], 0, 32) = 0;
  sub_1010DDBC0((void *)(a1 + 40), (char *)[@"kBundleVersionUnavailable" UTF8String]);
  *(_BYTE *)(a1 + 64) = 0;
  sub_1002A5370((void *)(a1 + 72));
  *(_BYTE *)(a1 + 88) = 0;
  sub_1002A5370((void *)(a1 + 96));
  *(_BYTE *)(a1 + 112) = 0;
  sub_1002A5370((void *)(a1 + 120));
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_10032ABA4(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_1002A5590(v6);
  sub_1002A5590(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_10032ABFC(uint64_t a1)
{
  return a1;
}

BOOL sub_10032AC54(uint64_t a1)
{
  return sub_1003201AC(*(void *)(a1 + 32), "CoreLocation debugging");
}

const void **sub_10032AC64(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10032AC94(uint64_t a1, uint64_t a2)
{
  return sub_100323ABC(*(void *)(a1 + 32), a2, *(const __CFString **)(a1 + 48), *(const __CFDictionary **)(a1 + 56));
}

void sub_10032ACA4(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10032ACD0(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_10032ACFC(uint64_t result)
{
  if (*(_DWORD *)(result + 52) == -469794816) {
    return (*(uint64_t (**)(void, const __CFString *, void))(**(void **)(result + 32) + 264LL))( *(void *)(result + 32),  @"kCLTelephonyServiceResetNotification",  0LL);
  }
  return result;
}

CLCppContainer *sub_10032AD30(const void **a1)
{
  uint64_t v2 = operator new(8uLL);
  uint64_t v3 = *a1;
  void *v2 = *a1;
  if (v3) {
    CFRetain(v3);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _OWORD v5[2] = sub_10032B540;
  void v5[3] = &unk_10181D3D0;
  _DWORD v5[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v5,  0LL,  8LL);
}

void sub_10032ADBC(_Unwind_Exception *a1)
{
}

void sub_10032ADD0(void *a1, unsigned int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    int v6 = sub_100320924(a2);
    BOOL v8 = a1 + 8;
    uint64_t v7 = a1[8];
    if (v7)
    {
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 < v6;
        if (v10 >= v6) {
          int v12 = (uint64_t *)v7;
        }
        else {
          int v12 = (uint64_t *)(v7 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }

      while (*v12);
      if (v9 != v8 && v6 >= *((_DWORD *)v9 + 8))
      {
        __int128 v50 = v9;
        id v13 = sub_10032B564(a3);
        (*(void (**)(void *, unsigned int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          uint64_t v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int128 v49 = v19;
              sub_10032B1AC(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              int v27 = sub_100320924(a2);
              uint64_t v28 = a1[8];
              if (!v28) {
                return;
              }
              uint64_t v29 = a1 + 8;
              do
              {
                int v30 = *(_DWORD *)(v28 + 32);
                BOOL v31 = v30 < v27;
                if (v30 >= v27) {
                  int v32 = (uint64_t *)v28;
                }
                else {
                  int v32 = (uint64_t *)(v28 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v28;
                }
                uint64_t v28 = *v32;
              }

              while (*v32);
              if (v29 == v8 || v27 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v50 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                __int16 v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int128 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int128 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    __int16 v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  char v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      char v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      __int16 v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int128 v49 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101832D18);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                __int128 v56 = v25;
                __int16 v57 = 1026;
                int v58 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101832D18);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v51 = 136446466;
                __int128 v52 = v45;
                __int16 v53 = 1026;
                int v54 = v46;
                LODWORD(v48) = 18;
                __int16 v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char , char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTelephony Service_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, Notificati onInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
              }
            }
          }

          while (v14 != v50 + 6);
        }
      }
    }
  }

_BYTE *sub_10032B1AC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v15) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_10032B564(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v16 = (int *)(*(void *)a2 + 32LL);
    int v12 = sub_1004EF3D4(v11, v16, (uint64_t)&unk_1012CF090, &v16);
    uint64_t result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v15,  v9,  v10,  v12 + 4);
    if ((_DWORD)result)
    {
      LODWORD(v16) = *(_DWORD *)(*(void *)a3 + 32LL);
      id v13 = *(void **)(*(void *)a2 + 64LL);
      uint64_t v14 = sub_100320924((unsigned int *)&v16);
      return objc_msgSend(v13, "onNotification:withData:", v14, a4, v15);
    }
  }

  return result;
}

uint64_t *sub_10032B29C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v10;
  uint64_t v4 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    int v6 = *((_DWORD *)v10 + 8);
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v6 >= v8) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v4 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }

      if (v8 >= v6) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v4 = v7 + 1;
        goto LABEL_10;
      }
    }

    uint64_t v10 = 0LL;
    if (v3) {
      sub_100233554((uint64_t)&v11, (void **)v3);
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_1000085FC((uint64_t **)a1, (uint64_t)v7, v4, v10);
    return v10;
  }

  return (uint64_t *)v7;
}

uint64_t sub_10032B350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_10032B3D0((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10032B3B4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_100233554(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10032B3D0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = sub_100320924((unsigned int *)a2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 8) = v4;
    void *v4 = 0LL;
    *(void *)(a2 + 24) = 0LL;
  }

  else
  {
    *(void *)(a1 + 8) = v6;
  }

  *(_OWORD *)(a1 + memset(&buf[7], 0, 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + memset(&buf[7], 0, 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

void *sub_10032B44C@<X0>(const void **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x20uLL);
  uint64_t result = sub_10032B4A4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10032B490(_Unwind_Exception *a1)
{
}

void *sub_10032B4A4(void *a1, const void **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_101832F48;
  uint64_t v3 = *a2;
  a1[3] = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

void sub_10032B4E8(_Unwind_Exception *a1)
{
}

void sub_10032B4FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101832F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10032B510(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101832F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

const void **sub_10032B534(uint64_t a1)
{
  return sub_10032AC64((const void **)(a1 + 24));
}

void sub_10032B540(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = sub_10032AC64(v1);
    operator delete(v2);
  }

id sub_10032B564(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_10032B5B0(a1);
  }
  else {
    return 0LL;
  }
}

id sub_10032B5B0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101832F88);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001012E6742LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101832F88);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101832F88);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001012E6742LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101832F88);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTelephonyService_Type::NotificationData, Callb acunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_10032B95C(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10032B988(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 88);
  if (v3)
  {
    *(void *)(a2 + 96) = v3;
    operator delete(v3);
  }

uint64_t sub_10032B9CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x66FD0EB66FD0EB67LL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x66FD0EB66FD0EB67LL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2F149902F14990LL) {
    unint64_t v9 = 0x5E293205E29320LL;
  }
  else {
    unint64_t v9 = v5;
  }
  v46[4] = a1 + 2;
  if (v9) {
    id v10 = (char *)sub_10032BC60(v7, v9);
  }
  else {
    id v10 = 0LL;
  }
  __int16 v11 = &v10[696 * v4];
  v46[0] = v10;
  v46[1] = v11;
  v46[3] = &v10[696 * v9];
  __int128 v12 = *(_OWORD *)(a2 + 16);
  __int128 v13 = *(_OWORD *)(a2 + 32);
  __int128 v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *(_OWORD *)__int16 v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  int v16 = *(_DWORD *)(a2 + 80);
  uint64_t v15 = a2 + 80;
  *((_DWORD *)v11 + 20) = v16;
  v11 += 80;
  *((void *)v11 + 2) = 0LL;
  *((void *)v11 + 3) = 0LL;
  *((void *)v11 + 1) = 0LL;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v15 + 8);
  *((void *)v11 + 3) = *(void *)(v15 + 24);
  *(void *)(v15 + 16) = 0LL;
  *(void *)(v15 + 24) = 0LL;
  *(void *)(v15 + 8) = 0LL;
  __int128 v17 = *(_OWORD *)(v15 + 96);
  __int128 v19 = *(_OWORD *)(v15 + 48);
  __int128 v18 = *(_OWORD *)(v15 + 64);
  *((_OWORD *)v11 + 5) = *(_OWORD *)(v15 + 80);
  *((_OWORD *)v11 + 6) = v17;
  *((_OWORD *)v11 + 3) = v19;
  *((_OWORD *)v11 + 4) = v18;
  __int128 v20 = *(_OWORD *)(v15 + 160);
  __int128 v22 = *(_OWORD *)(v15 + 112);
  __int128 v21 = *(_OWORD *)(v15 + 128);
  *((_OWORD *)v11 + 9) = *(_OWORD *)(v15 + 144);
  *((_OWORD *)v11 + 10) = v20;
  *((_OWORD *)v11 + 7) = v22;
  *((_OWORD *)v11 + 8) = v21;
  __int128 v24 = *(_OWORD *)(v15 + 192);
  __int128 v23 = *(_OWORD *)(v15 + 208);
  __int128 v25 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v11 + 220) = *(_OWORD *)(v15 + 220);
  *((_OWORD *)v11 + 12) = v24;
  *((_OWORD *)v11 + 13) = v23;
  *((_OWORD *)v11 + 11) = v25;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(v15 + 32);
  __int128 v26 = *(_OWORD *)(v15 + 240);
  *((void *)v11 + memset(&buf[7], 0, 32) = *(void *)(v15 + 256);
  *((_OWORD *)v11 + 15) = v26;
  *(void *)(v15 + 248) = 0LL;
  *(void *)(v15 + 256) = 0LL;
  *(void *)(v15 + 240) = 0LL;
  __int128 v27 = *(_OWORD *)(v15 + 360);
  __int128 v29 = *(_OWORD *)(v15 + 312);
  __int128 v28 = *(_OWORD *)(v15 + 328);
  *(_OWORD *)(v11 + 344) = *(_OWORD *)(v15 + 344);
  *(_OWORD *)(v11 + 360) = v27;
  *(_OWORD *)(v11 + 312) = v29;
  *(_OWORD *)(v11 + 328) = v28;
  __int128 v30 = *(_OWORD *)(v15 + 264);
  __int128 v31 = *(_OWORD *)(v15 + 296);
  *(_OWORD *)(v11 + 280) = *(_OWORD *)(v15 + 280);
  *(_OWORD *)(v11 + sub_10000AE14(v1 + 296) = v31;
  *(_OWORD *)(v11 + 264) = v30;
  __int128 v33 = *(_OWORD *)(v15 + 392);
  __int128 v32 = *(_OWORD *)(v15 + 408);
  __int128 v34 = *(_OWORD *)(v15 + 376);
  *((_DWORD *)v11 + 106) = *(_DWORD *)(v15 + 424);
  *(_OWORD *)(v11 + 392) = v33;
  *(_OWORD *)(v11 + 408) = v32;
  *(_OWORD *)(v11 + 376) = v34;
  __int128 v35 = *(_OWORD *)(v15 + 432);
  __int128 v36 = *(_OWORD *)(v15 + 448);
  __int128 v37 = *(_OWORD *)(v15 + 480);
  *((_OWORD *)v11 + 29) = *(_OWORD *)(v15 + 464);
  *((_OWORD *)v11 + 30) = v37;
  *((_OWORD *)v11 + 27) = v35;
  *((_OWORD *)v11 + 28) = v36;
  __int128 v38 = *(_OWORD *)(v15 + 496);
  __int128 v39 = *(_OWORD *)(v15 + 512);
  __int128 v40 = *(_OWORD *)(v15 + 544);
  *((_OWORD *)v11 + 33) = *(_OWORD *)(v15 + 528);
  *((_OWORD *)v11 + 34) = v40;
  *((_OWORD *)v11 + 31) = v38;
  *((_OWORD *)v11 + memset(&buf[7], 0, 32) = v39;
  __int128 v41 = *(_OWORD *)(v15 + 560);
  __int128 v42 = *(_OWORD *)(v15 + 576);
  __int128 v43 = *(_OWORD *)(v15 + 592);
  *((_DWORD *)v11 + 152) = *(_DWORD *)(v15 + 608);
  *((_OWORD *)v11 + 36) = v42;
  *((_OWORD *)v11 + 37) = v43;
  *((_OWORD *)v11 + 35) = v41;
  v46[2] = v11 + 616;
  sub_10032BBEC(a1, v46);
  uint64_t v44 = a1[1];
  sub_10032BEF0(v46);
  return v44;
}

void sub_10032BBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10032BBEC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10032BCA8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10032BC60(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5E293205E29321LL) {
    sub_1000070D4();
  }
  return operator new(696 * a2);
}

uint64_t sub_10032BCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v48 = a6;
  *((void *)&v48 + 1) = a7;
  __int128 v47 = v48;
  v45[0] = a1;
  v45[1] = &v47;
  v45[2] = &v48;
  if (a3 == a5)
  {
    uint64_t v43 = a6;
  }

  else
  {
    uint64_t v8 = a3 - 696;
    do
    {
      uint64_t v9 = v7 - 696;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
      __int128 v10 = *(_OWORD *)(v8 + 16);
      __int128 v11 = *(_OWORD *)(v8 + 32);
      __int128 v12 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v8 + 60);
      *(_OWORD *)(v9 + memset(&buf[7], 0, 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      *(_OWORD *)(v9 + 16) = v10;
      *(_DWORD *)(v9 + 80) = *(_DWORD *)(v8 + 80);
      uint64_t v13 = v7 - 616;
      *(void *)(v13 + 16) = 0LL;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 8) = 0LL;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v8 + 88);
      *(void *)(v13 + 24) = *(void *)(v8 + 104);
      *(void *)(v8 + 96) = 0LL;
      *(void *)(v8 + 104) = 0LL;
      *(void *)(v8 + 88) = 0LL;
      __int128 v14 = *(_OWORD *)(v8 + 176);
      __int128 v16 = *(_OWORD *)(v8 + 128);
      __int128 v15 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v13 + 80) = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v13 + 96) = v14;
      *(_OWORD *)(v13 + 48) = v16;
      *(_OWORD *)(v13 + 64) = v15;
      __int128 v17 = *(_OWORD *)(v8 + 240);
      __int128 v19 = *(_OWORD *)(v8 + 192);
      __int128 v18 = *(_OWORD *)(v8 + 208);
      *(_OWORD *)(v13 + 144) = *(_OWORD *)(v8 + 224);
      *(_OWORD *)(v13 + 160) = v17;
      *(_OWORD *)(v13 + 112) = v19;
      *(_OWORD *)(v13 + 128) = v18;
      __int128 v21 = *(_OWORD *)(v8 + 272);
      __int128 v20 = *(_OWORD *)(v8 + 288);
      __int128 v22 = *(_OWORD *)(v8 + 256);
      *(_OWORD *)(v13 + 220) = *(_OWORD *)(v8 + 300);
      *(_OWORD *)(v13 + 192) = v21;
      *(_OWORD *)(v13 + 208) = v20;
      *(_OWORD *)(v13 + 176) = v22;
      *(_OWORD *)(v13 + memset(&buf[7], 0, 32) = *(_OWORD *)(v8 + 112);
      __int128 v23 = *(_OWORD *)(v8 + 320);
      *(void *)(v13 + 256) = *(void *)(v8 + 336);
      *(_OWORD *)(v13 + 240) = v23;
      *(void *)(v8 + 328) = 0LL;
      *(void *)(v8 + 336) = 0LL;
      *(void *)(v8 + 320) = 0LL;
      __int128 v24 = (_OWORD *)(v7 - 352);
      __int128 v25 = *(_OWORD *)(v8 + 424);
      __int128 v27 = *(_OWORD *)(v8 + 392);
      __int128 v26 = *(_OWORD *)(v8 + 408);
      *(_OWORD *)(v7 - 256) = *(_OWORD *)(v8 + 440);
      _DWORD v24[4] = v26;
      v24[5] = v25;
      v24[3] = v27;
      __int128 v28 = *(_OWORD *)(v8 + 344);
      __int128 v29 = *(_OWORD *)(v8 + 376);
      v24[1] = *(_OWORD *)(v8 + 360);
      void v24[2] = v29;
      _OWORD *v24 = v28;
      __int128 v31 = *(_OWORD *)(v8 + 472);
      __int128 v30 = *(_OWORD *)(v8 + 488);
      __int128 v32 = *(_OWORD *)(v8 + 456);
      *(_DWORD *)(v7 - 192) = *(_DWORD *)(v8 + 504);
      *(_OWORD *)(v7 - 224) = v31;
      *(_OWORD *)(v7 - 208) = v30;
      *(_OWORD *)(v7 - 240) = v32;
      __int128 v33 = *(_OWORD *)(v8 + 512);
      __int128 v34 = *(_OWORD *)(v8 + 528);
      __int128 v35 = *(_OWORD *)(v8 + 544);
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(v8 + 560);
      *(_OWORD *)(v7 - 152) = v35;
      *(_OWORD *)(v7 - 168) = v34;
      *(_OWORD *)(v7 - 184) = v33;
      __int128 v36 = *(_OWORD *)(v8 + 576);
      __int128 v37 = *(_OWORD *)(v8 + 592);
      __int128 v38 = *(_OWORD *)(v8 + 608);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(v8 + 624);
      *(_OWORD *)(v7 - 88) = v38;
      *(_OWORD *)(v7 - 104) = v37;
      *(_OWORD *)(v7 - 120) = v36;
      __int128 v39 = *(_OWORD *)(v8 + 640);
      __int128 v40 = *(_OWORD *)(v8 + 656);
      __int128 v41 = *(_OWORD *)(v8 + 672);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v8 + 688);
      *(_OWORD *)(v7 - 24) = v41;
      *(_OWORD *)(v7 - 40) = v40;
      *(_OWORD *)(v7 - 56) = v39;
      uint64_t v7 = *((void *)&v48 + 1) - 696LL;
      *((void *)&v48 + 1) -= 696LL;
      BOOL v42 = v8 == a5;
      v8 -= 696LL;
    }

    while (!v42);
    uint64_t v43 = v48;
  }

  char v46 = 1;
  sub_10032BE6C((uint64_t)v45);
  return v43;
}

uint64_t sub_10032BE6C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10032BEA0((uint64_t *)a1);
  }
  return a1;
}

void sub_10032BEA0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10032B988(v3, v1);
      v1 += 696LL;
    }

    while (v1 != v2);
  }

void **sub_10032BEF0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10032BF20(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 696;
    sub_10032B988(v4, i - 696);
  }

uint64_t sub_10032BF64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x66FD0EB66FD0EB67LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3);
  }
  else {
    unint64_t v6 = v4;
  }
  __int128 v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10032BC60((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0LL;
  }
  __int128 v10 = v7;
  __int128 v11 = &v7[696 * v3];
  uint64_t v13 = &v7[696 * v6];
  sub_10032C088((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  __int128 v12 = v11 + 696;
  sub_10032BBEC(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10032BEF0(&v10);
  return v8;
}

void sub_10032C074(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_10032C088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  __int128 v5 = *(_OWORD *)(a3 + 16);
  __int128 v6 = *(_OWORD *)(a3 + 32);
  __int128 v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
  *(_OWORD *)(a2 + memset(&buf[7], 0, 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  uint64_t v8 = a3 + 80;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  *(void *)(a2 + 88) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  uint64_t v9 = a2 + 88;
  *(void *)(a2 + 104) = 0LL;
  sub_10001B72C( (void *)(a2 + 88),  *(const void **)(a3 + 88),  *(void *)(a3 + 96),  (uint64_t)(*(void *)(a3 + 96) - *(void *)(a3 + 88)) >> 2);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v8 + 32);
  __int128 v10 = *(_OWORD *)(v8 + 48);
  __int128 v11 = *(_OWORD *)(v8 + 64);
  __int128 v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v8 + 96);
  *(_OWORD *)(v9 + 72) = v12;
  *(_OWORD *)(v9 + 56) = v11;
  *(_OWORD *)(v9 + 40) = v10;
  __int128 v13 = *(_OWORD *)(v8 + 112);
  __int128 v14 = *(_OWORD *)(v8 + 128);
  __int128 v15 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v9 + 152) = *(_OWORD *)(v8 + 160);
  *(_OWORD *)(v9 + 136) = v15;
  *(_OWORD *)(v9 + 120) = v14;
  *(_OWORD *)(v9 + 104) = v13;
  __int128 v16 = *(_OWORD *)(v8 + 176);
  __int128 v17 = *(_OWORD *)(v8 + 192);
  __int128 v18 = *(_OWORD *)(v8 + 208);
  *(_OWORD *)(v9 + 212) = *(_OWORD *)(v8 + 220);
  *(_OWORD *)(v9 + 200) = v18;
  *(_OWORD *)(v9 + 184) = v17;
  *(_OWORD *)(v9 + 168) = v16;
  __int128 v19 = (_BYTE *)(v9 + 232);
  if (*(char *)(v8 + 263) < 0)
  {
    sub_1010DD48C(v19, *(void **)(a3 + 320), *(void *)(a3 + 328));
  }

  else
  {
    __int128 v20 = *(_OWORD *)(v8 + 240);
    *(void *)(v9 + 248) = *(void *)(v8 + 256);
    *(_OWORD *)__int128 v19 = v20;
  }

  __int128 v21 = *(_OWORD *)(a3 + 344);
  __int128 v22 = *(_OWORD *)(a3 + 376);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a3 + 360);
  *(_OWORD *)(a2 + 376) = v22;
  *(_OWORD *)(a2 + 344) = v21;
  __int128 v23 = *(_OWORD *)(a3 + 392);
  __int128 v24 = *(_OWORD *)(a3 + 408);
  __int128 v25 = *(_OWORD *)(a3 + 440);
  *(_OWORD *)(a2 + 424) = *(_OWORD *)(a3 + 424);
  *(_OWORD *)(a2 + 440) = v25;
  *(_OWORD *)(a2 + 392) = v23;
  *(_OWORD *)(a2 + 408) = v24;
  __int128 v26 = *(_OWORD *)(a3 + 456);
  __int128 v27 = *(_OWORD *)(a3 + 472);
  __int128 v28 = *(_OWORD *)(a3 + 488);
  *(_DWORD *)(a2 + 504) = *(_DWORD *)(a3 + 504);
  *(_OWORD *)(a2 + 472) = v27;
  *(_OWORD *)(a2 + 488) = v28;
  *(_OWORD *)(a2 + 456) = v26;
  __int128 v29 = *(_OWORD *)(a3 + 512);
  __int128 v30 = *(_OWORD *)(a3 + 528);
  __int128 v31 = *(_OWORD *)(a3 + 560);
  *(_OWORD *)(a2 + 544) = *(_OWORD *)(a3 + 544);
  *(_OWORD *)(a2 + 560) = v31;
  *(_OWORD *)(a2 + 512) = v29;
  *(_OWORD *)(a2 + 528) = v30;
  __int128 v32 = *(_OWORD *)(a3 + 576);
  __int128 v33 = *(_OWORD *)(a3 + 592);
  __int128 v34 = *(_OWORD *)(a3 + 624);
  *(_OWORD *)(a2 + 608) = *(_OWORD *)(a3 + 608);
  *(_OWORD *)(a2 + 624) = v34;
  *(_OWORD *)(a2 + 576) = v32;
  *(_OWORD *)(a2 + 592) = v33;
  __n128 result = *(__n128 *)(a3 + 640);
  __int128 v36 = *(_OWORD *)(a3 + 656);
  __int128 v37 = *(_OWORD *)(a3 + 672);
  *(_DWORD *)(a2 + 688) = *(_DWORD *)(a3 + 688);
  *(_OWORD *)(a2 + 656) = v36;
  *(_OWORD *)(a2 + 672) = v37;
  *(__n128 *)(a2 + 640) = result;
  return result;
}

void sub_10032C1F4(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10032C210(uint64_t a1)
{
  *(void *)a1 = off_101832FB8;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_10032C270(const void **a1)
{
  uint64_t v2 = operator new(8uLL);
  uint64_t v3 = *a1;
  void *v2 = *a1;
  if (v3) {
    CFRetain(v3);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _OWORD v5[2] = sub_10032C310;
  void v5[3] = &unk_10181D3D0;
  _DWORD v5[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v5,  0LL,  8LL);
}

void sub_10032C2FC(_Unwind_Exception *a1)
{
}

void sub_10032C310(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = sub_10032AC64(v1);
    operator delete(v2);
  }

uint64_t sub_10032C334(uint64_t result)
{
  *(_BYTE *)(result + 48) = 0;
  *(void *)__n128 result = 0LL;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0xBFF0000000000000LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + memset(&buf[7], 0, 32) = 0;
  *(_DWORD *)(result + 36) = -1;
  *(_WORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_10032C358(uint64_t a1, uint64_t a2)
{
  switch(*(void *)(a2 + 16))
  {
    case 0xDLL:
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = 0xBFF0000000000000LL;
      *(void *)(a1 + 24) = 0LL;
      *(_DWORD *)(a1 + memset(&buf[7], 0, 32) = 0;
      *(_DWORD *)(a1 + 36) = -1;
      *(_WORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 44) = 0;
      *(_BYTE *)(a1 + 48) = 1;
      *(void *)a1 = *(void *)a2;
      __int128 v4 = *(_OWORD *)(a2 + 208);
      v26[12] = *(_OWORD *)(a2 + 192);
      v26[13] = v4;
      uint64_t v27 = *(void *)(a2 + 224);
      __int128 v5 = *(_OWORD *)(a2 + 144);
      v26[8] = *(_OWORD *)(a2 + 128);
      v26[9] = v5;
      __int128 v6 = *(_OWORD *)(a2 + 160);
      v26[11] = *(_OWORD *)(a2 + 176);
      _BYTE v26[10] = v6;
      __int128 v7 = *(_OWORD *)(a2 + 80);
      v26[4] = *(_OWORD *)(a2 + 64);
      v26[5] = v7;
      __int128 v8 = *(_OWORD *)(a2 + 96);
      v26[7] = *(_OWORD *)(a2 + 112);
      v26[6] = v8;
      __int128 v9 = *(_OWORD *)(a2 + 16);
      v26[0] = *(_OWORD *)a2;
      v26[1] = v9;
      __int128 v10 = *(_OWORD *)(a2 + 32);
      v26[3] = *(_OWORD *)(a2 + 48);
      v26[2] = v10;
      int v11 = sub_100B7BDD0((uint64_t)v26);
      *(_DWORD *)(a1 + 36) = v11;
      sub_100B7BDEC(v11, (uint64_t)buf);
      *(_BYTE *)(a1 + 41) = buf[0];
      break;
    case 0xFLL:
      if (*(_BYTE *)(a1 + 48))
      {
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        sub_10032C660(a1);
      }

      *(_BYTE *)(a1 + 48) = 0;
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = 0xBFF0000000000000LL;
      *(void *)(a1 + 24) = 0LL;
      *(_DWORD *)(a1 + memset(&buf[7], 0, 32) = 0;
      *(_DWORD *)(a1 + 36) = -1;
      *(_WORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 44) = 0;
      break;
    case 0x10LL:
      *(_BYTE *)(a1 + 48) = 0;
      break;
    case 0x11LL:
      *(_BYTE *)(a1 + 48) = 1;
      break;
    default:
      break;
  }

  if (qword_1019347F0 != -1) {
    dispatch_once(&qword_1019347F0, &stru_101833000);
  }
  __int128 v12 = (os_log_s *)qword_1019347F8;
  if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a2 + 16);
    int v14 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)std::string buf = 67109376;
    int v23 = v13;
    __int16 v24 = 1024;
    int v25 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[CLNoMovement] analytics: eventType,%d,isCollectingSessionMetrics,%d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101833000);
    }
    uint64_t v15 = *(void *)(a2 + 16);
    int v16 = *(unsigned __int8 *)(a1 + 48);
    v19[0] = 67109376;
    v19[1] = v15;
    __int16 v20 = 1024;
    int v21 = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  2LL,  "[CLNoMovement] analytics: eventType,%d,isCollectingSessionMetrics,%d",  v19,  14);
    __int128 v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLNoMovementAnalytics::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

void sub_10032C660(uint64_t a1)
{
  *(void *)&double v2 = objc_opt_class(&OBJC_CLASS___MCProfileConnection).n128_u64[0];
  if (v3
    && (objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection",  v2),  "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    v20[0] = @"sessionDuration";
    int v4 = llround((*(double *)(a1 + 8) - *(double *)a1) / 60.0);
    if (v4 >= 180) {
      uint64_t v5 = 180LL;
    }
    else {
      uint64_t v5 = v4;
    }
    v21[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v5);
    v20[1] = @"timeToTriggerNoMovement";
    int v6 = llround(*(double *)(a1 + 16) / 60.0);
    if (v6 >= 180) {
      uint64_t v7 = 180LL;
    }
    else {
      uint64_t v7 = v6;
    }
    v21[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v7);
    v20[2] = @"averagePercentEpochsInNonTriggerWindows";
    int v8 = (int)((float)(*(float *)(a1 + 28) / (float)*(int *)(a1 + 24)) * 100.0);
    if (v8 >= 100) {
      uint64_t v9 = 100LL;
    }
    else {
      uint64_t v9 = v8;
    }
    v21[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v9);
    v20[3] = @"averagePercentEpochsInTriggerWindows";
    int v10 = (int)((float)(*(float *)(a1 + 32) / (float)*(int *)(a1 + 24)) * 100.0);
    if (v10 >= 100) {
      uint64_t v11 = 100LL;
    }
    else {
      uint64_t v11 = v10;
    }
    v21[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v11);
    v20[4] = @"hkWorkoutActivityType";
    _DWORD v21[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 36));
    void v20[5] = @"enteredNoMovementState";
    v21[5] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40));
    v20[6] = @"shouldServeDetectionToClients";
    v21[6] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 41));
    v20[7] = @"numClients";
    v21[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
    __int128 v12 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  8LL);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_10032CB8C;
    v17[3] = &unk_101820740;
    v17[4] = v12;
    AnalyticsSendEventLazy(@"com.apple.SafetyMonitor.NoMovement.WatchSessionV2", v17);
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101833000);
    }
    uint64_t v13 = (os_log_s *)qword_1019347F8;
    if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138543362;
      int v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[CLNoMovement] analytics: uploaded session metrics %{public}@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347F0 != -1) {
        dispatch_once(&qword_1019347F0, &stru_101833000);
      }
      int v18 = 138543362;
      __int128 v19 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  2LL,  "[CLNoMovement] analytics: uploaded session metrics %{public}@",  &v18,  12);
LABEL_32:
      int v16 = (uint8_t *)v14;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLNoMovementAnalytics::uploadSessionMetrics() const", "%s\n", v14);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  else
  {
    if (qword_1019347F0 != -1) {
      dispatch_once(&qword_1019347F0, &stru_101833000);
    }
    uint64_t v15 = (os_log_s *)qword_1019347F8;
    if (os_log_type_enabled((os_log_t)qword_1019347F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[CLNoMovement] analytics: no IHA authorization",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347F0 != -1) {
        dispatch_once(&qword_1019347F0, &stru_101833000);
      }
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347F8,  1LL,  "[CLNoMovement] analytics: no IHA authorization",  &v18,  2);
      goto LABEL_32;
    }
  }

float sub_10032CAD4(uint64_t a1, void *a2, int a3, float result)
{
  if (*(_BYTE *)(a1 + 48))
  {
    ++*(_DWORD *)(a1 + 24);
    if ([a2 state] == (id)2 && !*(_BYTE *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 40) = 1;
      [a2 startTime];
      *(double *)(a1 + 16) = v7 - *(double *)a1;
    }

    float v8 = (float)a3;
    if (*(_BYTE *)(a1 + 40))
    {
      __n128 result = *(float *)(a1 + 32) + v8;
      *(float *)(a1 + memset(&buf[7], 0, 32) = result;
    }

    else
    {
      __n128 result = *(float *)(a1 + 28) + v8;
      *(float *)(a1 + 28) = result;
    }
  }

  return result;
}

uint64_t sub_10032CB70(uint64_t result, int a2)
{
  if (*(_BYTE *)(result + 48))
  {
    int v2 = *(_DWORD *)(result + 44);
    if (v2 <= a2) {
      int v2 = a2;
    }
    *(_DWORD *)(result + 44) = v2;
  }

  return result;
}

uint64_t sub_10032CB8C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10032CB94(id a1)
{
  qword_1019347F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

float sub_10032CBC0(float **a1, int a2)
{
  if (a2 <= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a2;
  }
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    float v5 = 0.0;
    float v4 = 0.0;
  }

  else
  {
    float v4 = 0.0;
    float v5 = 0.0;
    int v6 = *a1;
    do
    {
      float v8 = *v6;
      float v7 = v6[1];
      v6 += 2;
      float v4 = v4 + (float)(v7 * v8);
      float v5 = v5 + (float)(v8 * v8);
    }

    while (v6 != v3);
  }

  int v9 = 0;
  float result = v4 / fmaxf(v5, 0.0001);
  do
  {
    if (*a1 == v3)
    {
      float v12 = 0.0;
      float v11 = 0.0;
    }

    else
    {
      float v11 = 0.0;
      float v12 = 0.0;
      uint64_t v13 = *a1;
      do
      {
        float v15 = *v13;
        float v14 = v13[1];
        v13 += 2;
        float v16 = fabsf(v14 - (float)(v15 * result));
        if (v16 <= 0.0001) {
          float v17 = 10000.0;
        }
        else {
          float v17 = 1.0 / v16;
        }
        float v11 = v11 + (float)((float)(v14 * v17) * v15);
        float v12 = v12 + (float)((float)(v15 * v17) * v15);
      }

      while (v13 != v3);
    }

    ++v9;
    float result = v11 / fmaxf(v12, 0.0001);
  }

  while (v9 != v2);
  return result;
}

uint64_t sub_10032CC88(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_10032D970(v2, a2);
}

double sub_10032CC98(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0LL;
  }
  double result = 0.0;
  *(void *)(v1 + 896) = 0LL;
  *(_DWORD *)(v1 + 904) = 0;
  return result;
}

int *sub_10032CCB8(int *result)
{
  if (result) {
    uint64_t v1 = result - 2;
  }
  else {
    uint64_t v1 = 0LL;
  }
  *((void *)v1 + 112) = 0LL;
  v1[226] = 0;
  if (*((_WORD *)v1 + 23))
  {
    double result = (int *)sub_100208A44((unsigned __int16 *)v1 + 22, 0LL);
    int v2 = *result;
  }

  else
  {
    int v2 = 0;
  }

  v1[229] = v2;
  v1[230] = 0;
  return result;
}

uint64_t sub_10032CD10(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_10032DA48(v2, a2);
}

double sub_10032CD20(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0LL;
  }
  double result = 0.0;
  *(void *)(v1 + 896) = 0LL;
  *(_DWORD *)(v1 + 904) = 0;
  return result;
}

uint64_t sub_10032CD3C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_10032DCE4(v2, a2);
}

double sub_10032CD4C(uint64_t a1)
{
  *(void *)(a1 + 16) = 13LL;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_101833168;
  *(void *)(a1 + 8) = &unk_101833020;
  *(_BYTE *)(a1 + 28) = 1;
  *(void *)(a1 + 44) = 0xC00000000LL;
  *(_DWORD *)(a1 + 40) = 1031798784;
  *(_BYTE *)(a1 + 100) = 1;
  *(_DWORD *)(a1 + 120) = 6;
  *(void *)(a1 + 112) = 0LL;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 168) = 6;
  *(void *)(a1 + 160) = 0LL;
  *(_BYTE *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 216) = 47;
  *(void *)(a1 + 208) = 0LL;
  *(_BYTE *)(a1 + 408) = 1;
  *(void *)(a1 + 424) = 0x400000000LL;
  *(_DWORD *)(a1 + 420) = 0;
  *(void *)(a1 + 448) = off_101848F08;
  *(void *)(a1 + 456) = 0x4039000000000000LL;
  *(_OWORD *)(a1 + 464) = xmmword_1012E6790;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 488) = 0LL;
  *(_BYTE *)(a1 + 512) = 1;
  *(void *)(a1 + 528) = 0x4B00000000LL;
  *(_DWORD *)(a1 + 524) = 0;
  *(void *)(a1 + 840) = 0LL;
  *(void *)(a1 + 848) = 0LL;
  *(void *)(a1 + 856) = 0xC08F380000000000LL;
  *(void *)(a1 + 864) = 0xC08F380000000000LL;
  *(_BYTE *)(a1 + 872) = 0;
  *(void *)(a1 + 880) = 0LL;
  *(_BYTE *)(a1 + 888) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 896) = xmmword_1012E67A0;
  *(_DWORD *)(a1 + 912) = 0;
  *(void *)(a1 + 916) = 0LL;
  return result;
}

uint64_t sub_10032CE58(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4 = *(_DWORD *)(a1 + 908);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 == v5)
  {
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 908) = v6;
    return result;
  }

  uint64_t v8 = *(unsigned __int16 *)(a1 + 214);
  if (*(_DWORD *)(a1 + 216) != (_DWORD)v8) {
    return 0LL;
  }
  if (*(_WORD *)(a1 + 214))
  {
    unint64_t v11 = 0LL;
    LODWORD(v12) = 0;
    do
      uint64_t v12 = *(int *)sub_10032DE70((unsigned __int16 *)(a1 + 212), v11++) + (uint64_t)(int)v12;
    while (v8 != v11);
    unsigned int v13 = *(_DWORD *)(a1 + 216);
    unint64_t v14 = 100 * v12;
  }

  else
  {
    unsigned int v13 = 0;
    unint64_t v14 = 0LL;
  }

  unint64_t v15 = v14 / v13;
  if ((int)v15 <= 19)
  {
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 912) = 0;
    return result;
  }

  int v16 = *(_DWORD *)(a1 + 912);
  *(_DWORD *)(a1 + 912) = v16 + 1;
  uint64_t result = 0LL;
  if (v16 >= 46 && !*(_DWORD *)(a2 + 20) && !*(_BYTE *)(a2 + 80) && *(int *)(a2 + 16) >= 5)
  {
    *a3 = v16 + 1 + (int)(float)((float)v13 * 0.2);
    return 1LL;
  }

  return result;
}

uint64_t sub_10032CF84(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 18);
  if (!*(_WORD *)(a1 + 18)) {
    return 0LL;
  }
  unint64_t v2 = 0LL;
  LODWORD(v3) = 0;
  int v4 = (unsigned __int16 *)(a1 + 16);
  do
    uint64_t v3 = (*(_DWORD *)sub_10032DE70(v4, v2++) + v3);
  while (v1 != v2);
  return v3;
}

uint64_t sub_10032CFE4(uint64_t a1, double *a2)
{
  int v4 = operator new(0xCuLL);
  int v58 = v4 + 3;
  __int128 v59 = (char *)(v4 + 3);
  *(void *)int v4 = 7LL;
  _DWORD v4[2] = 8;
  std::stringbuf::string_type __p = v4;
  sub_1006A7E04(a1 + 448, (uint64_t)a2);
  v114[0] = xmmword_1012E1E90;
  __int16 v117 = 0;
  memset(&v114[1], 0, 96);
  __int128 v115 = 0u;
  memset(v116, 0, sizeof(v116));
  __int128 v118 = xmmword_1012E1E90;
  uint64_t v119 = 0LL;
  int v120 = 0;
  uint64_t v121 = 0LL;
  v122[0] = 0LL;
  *(void *)((char *)v122 + 5) = 0LL;
  *(void *)((char *)&v122[1] + 6) = 0LL;
  char v123 = 0;
  memset(&v122[3], 0, 24);
  __int128 v124 = xmmword_1012E1E90;
  uint64_t v125 = 0LL;
  int v126 = 0;
  unint64_t v127 = 0xFFEFFFFFFFFFFFFFLL;
  int v138 = 0;
  __int128 v128 = 0u;
  __int128 v129 = 0u;
  __int128 v130 = 0u;
  __int128 v131 = 0u;
  __int128 v132 = 0u;
  int v133 = 0;
  __int128 v134 = 0u;
  __int128 v135 = 0u;
  __int128 v136 = 0u;
  memset(v137, 0, sizeof(v137));
  uint64_t v139 = 0LL;
  uint64_t v140 = 0LL;
  unint64_t v141 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v142 = 0LL;
  int v143 = 0;
  uint64_t v149 = 0LL;
  __int16 v150 = 0;
  int v155 = 0;
  int v148 = 0;
  __int128 v146 = 0u;
  __int128 v147 = 0u;
  __int128 v144 = 0u;
  __int128 v145 = 0u;
  __int128 v152 = 0u;
  __int128 v151 = 0u;
  char v153 = 0;
  memset(v154, 0, sizeof(v154));
  unint64_t v156 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v175 = 0u;
  __int128 v174 = 0u;
  __int128 v173 = 0u;
  __int128 v172 = 0u;
  __int128 v171 = 0u;
  __int128 v170 = 0u;
  __int128 v169 = 0u;
  __int128 v168 = 0u;
  __int128 v167 = 0u;
  __int128 v166 = 0u;
  __int128 v165 = 0u;
  __int128 v164 = 0u;
  __int128 v163 = 0u;
  __int128 v162 = 0u;
  __int128 v161 = 0u;
  __int128 v160 = 0u;
  __int128 v159 = 0u;
  __int128 v158 = 0u;
  __int128 v157 = 0u;
  uint64_t v176 = 0LL;
  unint64_t v177 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v178 = 0u;
  __int128 v179 = 0u;
  __int128 v180 = 0u;
  __int128 v181 = 0u;
  unint64_t v182 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v183 = 0LL;
  int v184 = 0;
  uint64_t v185 = 0LL;
  char v186 = 0;
  unint64_t v187 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v189 = 0LL;
  uint64_t v188 = 0LL;
  uint64_t v190 = 0x80000000800000LL;
  uint64_t v192 = 0LL;
  uint64_t v191 = 0LL;
  __int128 v193 = xmmword_1012E1EA0;
  uint64_t v194 = 0x80000000800000LL;
  __int128 v195 = 0u;
  __int128 v196 = 0u;
  uint64_t v197 = 0LL;
  unint64_t v198 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v199 = 0u;
  __int128 v200 = 0u;
  __int128 v201 = 0u;
  __int128 v202 = 0u;
  __int128 v203 = 0u;
  __int128 v204 = 0u;
  int v205 = 0;
  unint64_t v206 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v207 = 0;
  int v208 = 0;
  unint64_t v209 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v210 = 7LL;
  unint64_t v211 = 0xFFEFFFFFFFFFFFFFLL;
  char v212 = 0;
  uint64_t v214 = 0LL;
  uint64_t v213 = 0LL;
  uint64_t v215 = 0LL;
  if ((sub_100CDB578(a2, &__p, (uint64_t)v114) & 1) != 0)
  {
    else {
      float v5 = *(float *)&v191;
    }
    int v47 = BYTE8(v166) & 0xFD;
    BOOL v6 = v170 < 2 && v47 != 1;
    LODWORD(buf) = v6;
    sub_10032E068((unsigned __int16 *)(a1 + 116), &buf);
    *(_BYTE *)(a1 + 100) = 1;
    LODWORD(buf) = v170 < 2;
    sub_10032E068((unsigned __int16 *)(a1 + 164), &buf);
    *(_BYTE *)(a1 + 148) = 1;
    if ((_DWORD)v170) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v47 != 1;
    }
    LODWORD(buf) = v7;
    sub_10032E068((unsigned __int16 *)(a1 + 212), &buf);
    float v8 = v5 * 57.296;
    uint64_t v9 = *(unsigned __int16 *)(a1 + 44);
    *(_BYTE *)(a1 + 196) = 1;
    uint64_t v10 = *(unsigned __int16 *)(a1 + 46);
    unint64_t v11 = *(unsigned int *)(a1 + 48);
    if (v9 + v10 >= v11) {
      uint64_t v12 = *(unsigned int *)(a1 + 48);
    }
    else {
      uint64_t v12 = 0LL;
    }
    *(float *)(a1 + 44 + 4 * (v9 + v10 - v12) + 8) = *((float *)&v188 + 1) * 57.296;
    if (v11 <= v10)
    {
      unint64_t v13 = v9 + 1;
      if (v13 < v11) {
        LOWORD(v11) = 0;
      }
      *(_WORD *)(a1 + 44) = v13 - v11;
    }

    else
    {
      *(_WORD *)(a1 + 46) = v10 + 1;
    }

    *(_BYTE *)(a1 + 28) = 1;
    LODWORD(buf) = v8 > 10.0;
    sub_10032E068((unsigned __int16 *)(a1 + 424), &buf);
    *(_BYTE *)(a1 + 408) = 1;
    unsigned int v14 = *(unsigned __int16 *)(a1 + 118);
    if (*(_DWORD *)(a1 + 120) == v14
      && *(_DWORD *)(a1 + 48) == *(unsigned __int16 *)(a1 + 46)
      && *(_DWORD *)(a1 + 428) == *(unsigned __int16 *)(a1 + 426))
    {
      double v49 = 0.0;
      double v50 = 0.0;
      LODWORD(v52) = 0;
      double v51 = 0.0;
      __int128 v53 = xmmword_1012E67B0;
      *(void *)int v54 = 0xC08F380000000000LL;
      v54[8] = 0;
      *(void *)&v54[16] = 0LL;
      v54[24] = 0;
      LOBYTE(v55) = 0;
      HIDWORD(v55) = 0;
      int v56 = 0;
      if (*(_BYTE *)(a1 + 28))
      {
        sub_100208C68(a1 + 28);
        unsigned int v14 = *(unsigned __int16 *)(a1 + 118);
      }

      float v15 = *(float *)(a1 + 36);
      LOBYTE(v55) = v47 == 1;
      double v16 = sqrt(v15);
      BOOL v17 = v15 <= 0.0;
      double v18 = 0.0;
      if (!v17) {
        double v18 = v16;
      }
      double v49 = v8;
      double v50 = v18;
      HIDWORD(v51) = v170;
      LODWORD(v52) = DWORD1(v115);
      if (v14)
      {
        unint64_t v19 = 0LL;
        int v20 = 0;
        uint64_t v21 = v14;
        do
          v20 += *(_DWORD *)sub_10032DE70((unsigned __int16 *)(a1 + 116), v19++);
        while (v21 != v19);
      }

      else
      {
        int v20 = 0;
      }

      LODWORD(v51) = v20;
      __int128 v22 = *(_OWORD *)(a1 + 864);
      __int128 v53 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)int v54 = v22;
      *(_OWORD *)&v54[9] = *(_OWORD *)(a1 + 873);
      uint64_t v23 = *(unsigned __int16 *)(a1 + 166);
      if (*(_WORD *)(a1 + 166))
      {
        unint64_t v24 = 0LL;
        int v25 = 0;
        do
          v25 += *(_DWORD *)sub_10032DE70((unsigned __int16 *)(a1 + 164), v24++);
        while (v23 != v24);
      }

      else
      {
        int v25 = 0;
      }

      HIDWORD(v55) = v25;
      uint64_t v26 = *(unsigned __int16 *)(a1 + 426);
      if (*(_WORD *)(a1 + 426))
      {
        unint64_t v27 = 0LL;
        int v28 = 0;
        do
          v28 += *(_DWORD *)sub_10032DE70((unsigned __int16 *)(a1 + 424), v27++);
        while (v26 != v27);
      }

      else
      {
        int v28 = 0;
      }

      int v56 = v28;
      sub_100CCCC8C(a1 + 8, 0, (uint64_t)&v49);
      if (sub_10032CE58(a1, (uint64_t)&v49, &v48))
      {
        *(_DWORD *)(a1 + 904) = v48;
        sub_100CCCC8C(a1 + 8, 4, (uint64_t)&buf);
      }

      int v46 = *(unsigned __int8 *)(a1 + 24);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_1018331C0);
      }
      __int128 v29 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
      {
        int v30 = *(_DWORD *)(a1 + 896);
        int v31 = *(_DWORD *)(a1 + 900);
        uint64_t v32 = *(unsigned __int16 *)(a1 + 214);
        if (*(_WORD *)(a1 + 214))
        {
          unint64_t v33 = 0LL;
          int v34 = 0;
          do
            v34 += *(_DWORD *)sub_10032DE70((unsigned __int16 *)(a1 + 212), v33++);
          while (v32 != v33);
        }

        else
        {
          int v34 = 0;
        }

        int v35 = *(_DWORD *)(a1 + 904);
        double v36 = *(float *)(a1 + 920);
        LODWORD(buf) = 67112448;
        HIDWORD(buf) = v46;
        __int16 v88 = 1024;
        int v89 = v30;
        __int16 v90 = 1024;
        int v91 = v31;
        __int16 v92 = 1024;
        int v93 = v34;
        __int16 v94 = 1024;
        int v95 = v35;
        __int16 v96 = 2048;
        double v97 = v50;
        __int16 v98 = 2048;
        double v99 = v49;
        __int16 v100 = 1024;
        BOOL v101 = v47 == 1;
        __int16 v102 = 1024;
        int v103 = HIDWORD(v51);
        __int16 v104 = 2048;
        double v105 = *(float *)&v52;
        __int16 v106 = 1024;
        int v107 = LODWORD(v51);
        __int16 v108 = 2048;
        uint64_t v109 = *(void *)v54;
        __int16 v110 = 1024;
        int v111 = v54[8];
        __int16 v112 = 2048;
        double v113 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "IndoorPedStop,state,%d,headingCnt,%d,stepCount,%d,zeroStepCount,%d,likelyExitCount,%d,longStd,%f,shortStd,%f,r ails,%d,currentSteps,%d,vm,%f,recentZeroSteps,%d,exertionDelta,%f,exertionIsLow,%d,headingDelta,%f",  (uint8_t *)&buf,  0x6Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_1018331C0);
        }
        uint64_t v39 = qword_101934688;
        int v40 = *(_DWORD *)(a1 + 896);
        int v41 = *(_DWORD *)(a1 + 900);
        int v42 = sub_10032CF84(a1 + 196);
        int v43 = *(_DWORD *)(a1 + 904);
        double v44 = *(float *)(a1 + 920);
        v60[0] = 67112448;
        v60[1] = v46;
        __int16 v61 = 1024;
        int v62 = v40;
        __int16 v63 = 1024;
        int v64 = v41;
        __int16 v65 = 1024;
        int v66 = v42;
        __int16 v67 = 1024;
        int v68 = v43;
        __int16 v69 = 2048;
        double v70 = v50;
        __int16 v71 = 2048;
        double v72 = v49;
        __int16 v73 = 1024;
        BOOL v74 = v47 == 1;
        __int16 v75 = 1024;
        int v76 = HIDWORD(v51);
        __int16 v77 = 2048;
        double v78 = *(float *)&v52;
        __int16 v79 = 1024;
        int v80 = LODWORD(v51);
        __int16 v81 = 2048;
        uint64_t v82 = *(void *)v54;
        __int16 v83 = 1024;
        int v84 = v54[8];
        __int16 v85 = 2048;
        double v86 = v44;
        int v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v39,  1LL,  "IndoorPedStop,state,%d,headingCnt,%d,stepCount,%d,zeroStepCount,%d,likelyExitCount,%d,longStd,%f ,shortStd,%f,rails,%d,currentSteps,%d,vm,%f,recentZeroSteps,%d,exertionDelta,%f,exertionIsLow,%d ,headingDelta,%f",  v60,  106,  v47,  LODWORD(v49),  LODWORD(v50),  v51,  v52,  (_DWORD)v53,  DWORD2(v53),  *(double *)v54,  *(_DWORD *)&v54[8],  *(double *)&v54[16],  *(_DWORD *)&v54[24],  v55);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLTreadmillWorkoutStopModel::update(const CLWorkout PredictorInputs &)",  "%s\n",  v45);
      }

      if (*(_BYTE *)(a1 + 24) == 4)
      {
        uint64_t v37 = 1LL;
        goto LABEL_58;
      }
    }
  }

  else
  {
    sub_1010DDBC0(&buf, "TreadmillStop");
    sub_100CDC2CC(a2, (uint64_t *)&buf, (uint64_t)&__p);
    if (SBYTE1(v93) < 0) {
      operator delete(buf);
    }
  }

  uint64_t v37 = 0LL;
LABEL_58:
  if (__p)
  {
    int v58 = __p;
    operator delete(__p);
  }

  return v37;
}

void sub_10032D8FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D970(uint64_t result, uint64_t a2)
{
  if (*(double *)(a2 + 8) <= 30.0)
  {
    int v2 = *(_DWORD *)(result + 896);
    *(_DWORD *)(result + 896) = v2 + 1;
    int v3 = *(_DWORD *)(result + 900) + *(_DWORD *)(a2 + 20);
    *(_DWORD *)(result + 900) = v3;
    if (v2 >= 70 && v3 >= 181) {
      return sub_100CCCC8C(result + 8, 1, (uint64_t)&v4);
    }
  }

  else
  {
    *(void *)(result + 896) = 0LL;
  }

  return result;
}

uint64_t sub_10032D9E0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if (v2 < 5 || (double v3 = *(double *)(a2 + 40), v3 == -999.0))
  {
    BOOL v5 = 0;
  }

  else
  {
    double v4 = *(double *)(a2 + 48);
    BOOL v5 = v4 == -999.0;
    double v6 = v4 - v3;
    if (v6 < -10.0) {
      BOOL v5 = 1;
    }
    if (v4 == -999.0) {
      BOOL v5 = 0;
    }
    if (v6 == -999.0) {
      BOOL v5 = 0;
    }
  }

  return *(int *)(a2 + 88) > 0 && v2 > 0 || v5;
}

uint64_t sub_10032DA48(uint64_t a1, uint64_t a2)
{
  float v4 = *(float *)(a1 + 916);
  if (*(_WORD *)(a1 + 46)) {
    float v5 = *(float *)sub_100208A44((unsigned __int16 *)(a1 + 44), *(unsigned __int16 *)(a1 + 46) - 1LL);
  }
  else {
    float v5 = 0.0;
  }
  float v6 = vabds_f32(v4, v5);
  *(float *)(a1 + 920) = v6;
  BOOL v7 = *(double *)(a2 + 8) > 30.0 && *(double *)a2 > 5.0;
  BOOL v8 = *(double *)(a2 + 32) <= -1.0 || *(_BYTE *)(a2 + 56) != 0;
  if (*(_DWORD *)(a2 + 20)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *(_BYTE *)(a2 + 80) == 0;
  }
  if (v6 <= 0.0)
  {
    float v12 = 40.0;
  }

  else
  {
    float v11 = 180.0 / v6;
    if (v11 <= 1.0) {
      float v12 = 40.0;
    }
    else {
      float v12 = v11 * 40.0;
    }
  }

  uint64_t result = sub_10032DBE8(a1, a2);
  if ((_DWORD)result)
  {
    uint64_t v14 = a1 + 8;
    float v15 = &v19;
    int v16 = 2;
    return sub_100CCCC8C(v14, v16, (uint64_t)v15);
  }

  float v17 = v12 / 2.56;
  if (v12 >= 70.0) {
    float v17 = 27.344;
  }
  if (v17 < (float)*(int *)(a1 + 896))
  {
    uint64_t v14 = a1 + 8;
    float v15 = &v18;
    int v16 = 3;
    return sub_100CCCC8C(v14, v16, (uint64_t)v15);
  }

  return result;
}

uint64_t sub_10032DBE8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 40);
  double v3 = -999.0;
  if (v2 == -999.0)
  {
    BOOL v6 = 0;
  }

  else
  {
    double v4 = *(double *)(a2 + 48);
    double v3 = v4 - v2;
    if (v4 == -999.0) {
      double v5 = -999.0;
    }
    else {
      double v5 = v4 - v2;
    }
    BOOL v6 = v5 != -999.0;
    if (v4 == -999.0) {
      double v3 = -999.0;
    }
  }

  else {
    int v7 = *(_DWORD *)(a2 + 20) + *(_DWORD *)(a1 + 900);
  }
  BOOL v8 = 0;
  *(_DWORD *)(a1 + 900) = v7;
  BOOL v9 = v3 < 0.0;
  double v10 = v3 * v3 * 0.05 + 60.0;
  if (v10 <= 60.0) {
    BOOL v9 = 0;
  }
  if (!v6 || !v9) {
    double v10 = 60.0;
  }
  return v10 < (double)v7 || v8;
}

uint64_t sub_10032DCE4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10032DBE8(a1, a2);
  if ((_DWORD)result)
  {
    uint64_t v5 = a1 + 8;
    BOOL v6 = &v12;
    int v7 = 2;
    return sub_100CCCC8C(v5, v7, (uint64_t)v6);
  }

  BOOL v8 = *(int *)(a2 + 20) >= 1 && *(double *)a2 > 10.0;
  int v9 = *(int *)(a2 + 84) > 0 || v8;
  if (*(int *)(a1 + 904) >= 59 && v9 != 0)
  {
    uint64_t v5 = a1 + 8;
    BOOL v6 = &v11;
    int v7 = 5;
    return sub_100CCCC8C(v5, v7, (uint64_t)v6);
  }

  return result;
}

void *sub_10032DD80(void *a1)
{
  *a1 = off_101833168;
  a1[56] = off_101848F08;
  double v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10032DDCC(void *__p)
{
  void *__p = off_101833168;
  __p[56] = off_101848F08;
  double v2 = (void *)__p[61];
  if (v2)
  {
    __p[62] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_10032DE18(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10032DE44(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10032DE70(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018331E0);
    }
    int v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v16 = a2;
      __int16 v17 = 1024;
      int v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018331E0);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v11 = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 1024;
      int v14 = v9;
      double v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQ ueue.h, line 233,i,%zu,capacity,%u.",  (size_t)&v11,  18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<int>::operator[](const size_t) const [T = int]",  "%s\n",  v10);
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[2 * (v4 - v5) + 4];
}

unsigned __int16 *sub_10032E068(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 < v3) {
    unint64_t v3 = 0LL;
  }
  *(_DWORD *)&result[2 * (v4 + v2 - v3) + 4] = *a2;
  unint64_t v5 = *((unsigned int *)result + 1);
  if (v5 <= v2)
  {
    __int16 v6 = v4 + 1;
    if (v4 + 1 >= v5) {
      __int16 v7 = *((_DWORD *)result + 1);
    }
    else {
      __int16 v7 = 0;
    }
    *uint64_t result = v6 - v7;
  }

  else
  {
    result[1] = v2 + 1;
  }

  return result;
}

void sub_10032E164(id a1)
{
  qword_1019942C8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLWifiServiceSilo");
}

uint64_t sub_10032E334(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v11 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v12 = 256;
  if (*(void *)(a1 + 304) && *(void *)(a1 + 312))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(void *)(a1 + 224) && *(_BYTE *)(a1 + 632) && (*(_DWORD *)(a1 + 584) - 1) <= 0xA4)
    {
      uint64_t v13 = *(void *)(a1 + 544);
      sub_1007EC454(buf);
      int v3 = *(_DWORD *)(a1 + 584);
      std::string __p = buf[0];
      uint64_t v4 = 1LL;
    }

    else
    {
      uint64_t v4 = 0LL;
      int v3 = -1;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    unint64_t v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240707;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v4;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_p;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "WifiMgr, associated, %{public}d, mac, %{private}s, channel, %{public}d",  (uint8_t *)buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v8 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v13) = 67240707;
      HIDWORD(v13) = v4;
      __int16 v14 = 2081;
      float v15 = v8;
      __int16 v16 = 1026;
      int v17 = v3;
      int v9 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "WifiMgr, associated, %{public}d, mac, %{private}s, channel, %{public}d",  &v13,  24);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::isAssociated()", "%s\n", (const char *)v9);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v4;
}

void sub_10032E5F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1011C52D0((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_10032E744(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  uint64_t v3 = *(void *)(a1 + 312);
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 24LL))(v2);
  return v3 != 0;
}

void sub_10032E840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = v13;
  sub_100023498((void ***)(v14 - 40));
  a10 = (void **)&a13;
  sub_100023498(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10032E870(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 824;
  void v15[3] = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v16 = 256;
  if (*(_BYTE *)(a1 + 246)) {
    sub_10033A5B0(a1, 0);
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = 0x2E8BA2E8BA2E8BA3LL * ((v8 - *a2) >> 3);
  memset(v15, 0, 24);
  sub_1003538AC(v15, v7, v8, v9);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  unint64_t v12 = 0x2E8BA2E8BA2E8BA3LL * ((v11 - *a3) >> 3);
  memset(v14, 0, sizeof(v14));
  sub_1003538AC(v14, v10, v11, v12);
  sub_10033B334(a1, v15, (uint64_t *)v14);
  *(void *)(a1 + 248) = 0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3) + 0x2E8BA2E8BA2E8BA3LL * ((a3[1] - *a3) >> 3);
  if (*(_BYTE *)(a1 + 244)) {
    sub_10033A5B0(a1, 1);
  }
  int v17 = v14;
  sub_100023498((void ***)&v17);
  v14[0] = (void **)v15;
  sub_100023498(v14);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

void sub_10032E9BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10032EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10032EAD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  unint64_t v5 = *(const void **)(a1 + 528);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 528) = 0LL;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_10032EB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10032EB7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  unint64_t v5 = *(const void **)(a1 + 520);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 520) = 0LL;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_10032EC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10032EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_10032ED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_10032EE88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_100023498((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a14;
  sub_100023498((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

id sub_10032EEBC(void *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768LL;
  _DWORD v3[2] = sub_1003519EC;
  void v3[3] = &unk_101833618;
  v3[4] = *a1;
  memset(v4, 0, sizeof(v4));
  sub_1002DE3C8(v4, a1[1], a1[2], 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(a1[2] - a1[1]) >> 3));
  id v1 = [v3 copy];
  unint64_t v5 = (void **)v4;
  sub_100023498(&v5);
  return v1;
}

void sub_10032EF68(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_100023498((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10032F038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_100023498((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a14;
  sub_100023498((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_10032F130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_100023498((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a14;
  sub_100023498((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_10032F1F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (a23)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10032F218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 824;
  uint64_t v15 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v16 = 256;
  uint64_t v8 = qword_1019A1910;
  if (byte_1019A192F < 0)
  {
    sub_1010DD48C(&__p, (void *)qword_1019A1918, unk_1019A1920);
  }

  else
  {
    __int128 __p = *(_OWORD *)&qword_1019A1918;
    uint64_t v10 = unk_1019A1928;
  }

  __int128 v11 = xmmword_1019A1930;
  __int128 v12 = xmmword_1019A1940;
  __int128 v13 = xmmword_1019A1950;
  uint64_t v14 = qword_1019A1960;
  if (sub_10033E16C(a1, &v8))
  {
    *(void *)a2 = v8;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v10;
    __int128 __p = 0uLL;
    uint64_t v10 = 0LL;
    __int128 v5 = v12;
    *(_OWORD *)(a2 + memset(&buf[7], 0, 32) = v11;
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v13;
    *(void *)(a2 + 80) = v14;
    *(_BYTE *)(a2 + 88) = 1;
  }

  else
  {
    *(_BYTE *)a2 = 0;
    int v6 = SHIBYTE(v10);
    *(_BYTE *)(a2 + 88) = 0;
    if (v6 < 0) {
      operator delete((void *)__p);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_10032F34C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_10032F3E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10032F40C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 103;
  __int16 v16 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v17 = 256;
  uint64_t v9 = qword_1019A1910;
  if (byte_1019A1918[23] < 0)
  {
    sub_1010DD48C(&__p, *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
  }

  else
  {
    __int128 __p = *(_OWORD *)byte_1019A1918;
    uint64_t v11 = *(void *)&byte_1019A1918[16];
  }

  __int128 v12 = xmmword_1019A1930;
  __int128 v13 = xmmword_1019A1940;
  __int128 v14 = xmmword_1019A1950;
  uint64_t v15 = qword_1019A1960;
  if (sub_10034A60C(a1))
  {
    sub_10099F10C((uint64_t)&v9, (uint64_t)&v6);
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 40) = 1;
  }

  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }

  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  return (*(uint64_t (**)(void *))(*v4 + 24LL))(v4);
}

void sub_10032F518( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10032F570(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 824;
  v7[3] = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v8 = 256;
  memset(v7, 0, 24);
  memset(v6, 0, sizeof(v6));
  sub_10033B334(a1, v7, (uint64_t *)v6);
  if (a2) {
    *(void *)(a1 + 248) = 0LL;
  }
  uint64_t v9 = v6;
  sub_100023498((void ***)&v9);
  v6[0] = (void **)v7;
  sub_100023498(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_10032F62C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v16 - sub_1011C52D0(v21 - 56) = v15;
  sub_100023498((void ***)(v16 - 56));
  sub_100023498(&a9);
  sub_1011C52D0((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10032F70C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    sub_1012354B8((uint64_t)&a10);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032F7DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032F868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10032F87C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v50 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v51 = 256;
  if (!*(void *)(a1 + 312))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int128 v13 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "WifiScan, skip, null device, #KvCheck",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    *(_WORD *)__int128 __p = 0;
    __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiScan, skip, null device, #KvCheck",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v14);
    goto LABEL_71;
  }

  if (!*(void *)(a1 + 296))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v15 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiScan, skip, null dpc, #KvCheck", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    *(_WORD *)__int128 __p = 0;
    __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiScan, skip, null dpc, #KvCheck",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v14);
    goto LABEL_71;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  double v6 = Current - *(double *)(a1 + 744);
  if (v6 < 10.0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v16 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
    {
      int v17 = sub_100B76B88((uint64_t)a2);
      int v18 = *(_DWORD *)(a1 + 752);
      *(_DWORD *)std::string buf = 67240704;
      *(_DWORD *)__int128 v59 = v17;
      *(_WORD *)&v59[4] = 2050;
      *(double *)&v59[6] = v6;
      *(_WORD *)&v59[14] = 1026;
      *(_DWORD *)&v59[16] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "WifiScan, skip, cooloff, type, %{public}d, since, %{public}.1lf, error, %{public}d",  buf,  0x18u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v33 = qword_101934858;
    int v34 = sub_100B76B88((uint64_t)a2);
    int v35 = *(_DWORD *)(a1 + 752);
    *(_DWORD *)__int128 __p = 67240704;
    *(_DWORD *)&__p[4] = v34;
    *(_WORD *)&__p[8] = 2050;
    *(double *)&__p[10] = v6;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v35;
    __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  1LL,  "WifiScan, skip, cooloff, type, %{public}d, since, %{public}.1lf, error, %{public}d",  __p,  24);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v14);
LABEL_71:
LABEL_37:
    uint64_t v19 = 0LL;
    goto LABEL_38;
  }

  buf[0] = sub_100B76B88((uint64_t)a2);
  sub_100342464((unsigned int *)(a1 + 756), (char *)buf);
  if (sub_100E575B0())
  {
    sub_1002A5370(buf);
    unsigned int v7 = sub_100B76B88((uint64_t)a2);
    __int16 v8 = (char *)sub_10099EBD8(v7);
    sub_1002ACA84((uint64_t)buf, "scan", v8);
    __p[0] = sub_100B76B78((uint64_t)a2);
    sub_1002AB3FC((uint64_t)buf, "low_priority", __p);
    __p[0] = sub_1009830D8((uint64_t)a2);
    sub_1002AB3FC((uint64_t)buf, "passive", __p);
    sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
    sub_1002A5590(buf);
  }

  if (*(void *)(a1 + 368) < 7uLL)
  {
    if (*(_BYTE *)(a1 + 232))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      uint64_t v21 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "override scan, passive scans only...",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018335B8);
        }
        *(_WORD *)__int128 __p = 0;
        int v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "override scan, passive scans only...",  __p,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v46);
      }

      sub_100B76B90((uint64_t)a2, 2);
    }

    sub_10034C614((void *)(a1 + 328), a2);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int128 v22 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B76B98((char *)a2, (uint64_t)__p);
      uint64_t v23 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      unsigned int v24 = sub_100B76B88((uint64_t)a2);
      int v25 = sub_10099EBD8(v24);
      int v26 = sub_100B76B78((uint64_t)a2);
      BOOL v27 = sub_1009830D8((uint64_t)a2);
      uint64_t v28 = *(void *)(a1 + 368);
      *(_DWORD *)std::string buf = 136447234;
      *(void *)__int128 v59 = v23;
      *(_WORD *)&v59[8] = 2082;
      *(void *)&v59[10] = v25;
      *(_WORD *)&v59[18] = 1026;
      int v60 = v26;
      __int16 v61 = 1026;
      BOOL v62 = v27;
      __int16 v63 = 2050;
      uint64_t v64 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "WifiScan, enqueue, %{public}s, %{public}s, lowpri, %{public}d, passive, %{public}d, pending, %{public}lu",  buf,  0x2Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_55;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v39 = qword_101934858;
    sub_100B76B98((char *)a2, (uint64_t)v48);
    if (v49 >= 0) {
      int v40 = v48;
    }
    else {
      int v40 = (void **)v48[0];
    }
    unsigned int v41 = sub_100B76B88((uint64_t)a2);
    int v42 = sub_10099EBD8(v41);
    int v43 = sub_100B76B78((uint64_t)a2);
    BOOL v44 = sub_1009830D8((uint64_t)a2);
    uint64_t v45 = *(void *)(a1 + 368);
    *(_DWORD *)__int128 __p = 136447234;
    *(void *)&__p[4] = v40;
    *(_WORD *)&__p[12] = 2082;
    *(void *)&__p[14] = v42;
    *(_WORD *)&__p[22] = 1026;
    int v53 = v43;
    __int16 v54 = 1026;
    BOOL v55 = v44;
    __int16 v56 = 2050;
    uint64_t v57 = v45;
    LODWORD(v47) = 44;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  0LL,  "WifiScan, enqueue, %{public}s, %{public}s, lowpri, %{public}d, passive, %{public}d, pending, %{public}lu",  __p,  v47);
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v12);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 368);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)__int128 v59 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WifiScan, skip, maxed, %{public}ld", buf, 0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_55;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v11 = *(void *)(a1 + 368);
    *(_DWORD *)__int128 __p = 134349056;
    *(void *)&__p[4] = v11;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "WifiScan, skip, maxed, %{public}ld",  __p,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v12);
  }

  free(v12);
LABEL_55:
  if (Current - *(double *)(a1 + 408) <= 3.0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v31 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 408);
      *(_DWORD *)std::string buf = 134349312;
      *(void *)__int128 v59 = v32;
      *(_WORD *)&v59[8] = 2050;
      *(void *)&v59[10] = 0x4008000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "WifiScan, misc, inprogress, last, %{public}.1f, interval, %{public}.1f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v36 = *(void *)(a1 + 408);
      *(_DWORD *)__int128 __p = 134349312;
      *(void *)&__p[4] = v36;
      *(_WORD *)&__p[12] = 2050;
      *(void *)&__p[14] = 0x4008000000000000LL;
      LODWORD(v47) = 22;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiScan, misc, inprogress, last, %{public}.1f, interval, %{public}.1f",  __p,  v47);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v37);
    }
  }

  else
  {
    WiFiDeviceClientRegisterScanUpdateCallback(*(void *)(a1 + 312), sub_100337E50, 1LL, a1);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int128 v29 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "WifiDpc, signal", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int128 __p = 0;
      LODWORD(v47) = 2;
      __int128 v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiDpc, signal",  __p,  v47);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)",  "%s\n",  v38);
    }

    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 296));
    int v30 = (__CFRunLoop *)sub_10029228C();
    CFRunLoopWakeUp(v30);
  }

  uint64_t v19 = 1LL;
LABEL_38:
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v19;
}

void sub_1003305B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100330680(void *a1, int a2)
{
  uint64_t v4 = a1 + 103;
  __int128 v13 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v14 = 256;
  if (a1[37] && a1[92])
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    __int128 v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "IMD: quiesceWifi, %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      v15[0] = 67109120;
      v15[1] = a2;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "IMD: quiesceWifi, %d",  v15);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::quiesceWifi(BOOL)", "%s\n", v10);
    }

    double v6 = (dispatch_queue_s *)a1[92];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10034FB80;
    block[3] = &unk_101833458;
    block[4] = a1;
    char v12 = a2;
    dispatch_async(v6, block);
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    unsigned int v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning IMD: ignore quiesceWifi configuration, shutdown",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      LOWORD(v15[0]) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning IMD: ignore quiesceWifi configuration, shutdown",  v15,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::quiesceWifi(BOOL)", "%s\n", v9);
    }
  }

  return (*(uint64_t (**)(void *))(*v4 + 24LL))(v4);
}

void sub_1003309E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_100330A58(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int valuePtr = 27;
  uint64_t v49 = a1 + 824;
  uint64_t v44 = a1 + 824;
  (*(void (**)(void))(*(void *)(a1 + 824) + 16LL))();
  __int16 v50 = 256;
  CFNumberRef cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  __int16 v8 = (const __CFArray *)WiFiDeviceClientCopyProperty(*(void *)(a1 + 312));
  CFIndex Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    CFIndex v10 = 0LL;
    uint64_t v45 = a2 + 16;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v10);
      if ((const void *)CFDictionaryGetTypeID() == ValueAtIndex)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        char v12 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "WifiMgr, WiFiDeviceClientCopyProperty, invalid object in APPLE80211_IOC_SUPPORTED_CHANNELS",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          LOWORD(v52) = 0;
          LODWORD(v42) = 2;
          __int128 v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "WifiMgr, WiFiDeviceClientCopyProperty, invalid object in APPLE80211_IOC_SUPPORTED_CHANNELS",  &v52,  v42);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)",  "%s\n",  v38);
        }

        CFShow(ValueAtIndex);
      }

      else
      {
        sub_1002A5550((int)v48, (CFDictionaryRef)ValueAtIndex);
        int v47 = -1;
        if (sub_1002A7D20((uint64_t)v48, (uint64_t)@"SUP_CHANNEL", &v47))
        {
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018335B8);
          }
          __int128 v13 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 134218496;
            CFIndex v59 = v10;
            __int16 v60 = 2048;
            CFIndex v61 = Count;
            __int16 v62 = 1024;
            int v63 = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "WIFI: index, %ld, %ld, channel, %d",  buf,  0x1Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_1018335B8);
            }
            int v52 = 134218496;
            CFIndex v53 = v10;
            __int16 v54 = 2048;
            CFIndex v55 = Count;
            __int16 v56 = 1024;
            int v57 = v47;
            LODWORD(v42) = 28;
            uint64_t v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "WIFI: index, %ld, %ld, channel, %d",  &v52,  v42,  v43);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)",  "%s\n",  v39);
          }

          int v14 = v47;
          if (a3 && v47 <= 14)
          {
            uint64_t v16 = *(int **)(a2 + 8);
            unint64_t v15 = *(void *)(a2 + 16);
            if ((unint64_t)v16 >= v15)
            {
              uint64_t v19 = *(int **)a2;
              uint64_t v20 = ((uint64_t)v16 - *(void *)a2) >> 2;
              unint64_t v21 = v20 + 1;
              uint64_t v22 = v15 - (void)v19;
              if (v22 >> 1 > v21) {
                unint64_t v21 = v22 >> 1;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                unsigned int v24 = (char *)sub_10000956C(v45, v23);
                uint64_t v19 = *(int **)a2;
                uint64_t v16 = *(int **)(a2 + 8);
                int v14 = v47;
              }

              else
              {
                unsigned int v24 = 0LL;
              }

              int v25 = (int *)&v24[4 * v20];
              *int v25 = v14;
              int v17 = v25 + 1;
              while (v16 != v19)
              {
                int v26 = *--v16;
                *--int v25 = v26;
              }

              *(void *)a2 = v25;
              *(void *)(a2 + 8) = v17;
              *(void *)(a2 + 16) = &v24[4 * v23];
              if (v19) {
                operator delete(v19);
              }
            }

            else
            {
              *uint64_t v16 = v47;
              int v17 = v16 + 1;
            }

            *(void *)(a2 + 8) = v17;
            int v14 = v47;
          }

          if (a4 && v14 >= 15)
          {
            uint64_t v28 = *(int **)(a2 + 8);
            unint64_t v27 = *(void *)(a2 + 16);
            if ((unint64_t)v28 >= v27)
            {
              int v30 = *(int **)a2;
              uint64_t v31 = ((uint64_t)v28 - *(void *)a2) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
LABEL_80:
              }
                sub_100007008();
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                int v35 = (char *)sub_10000956C(v45, v34);
                int v30 = *(int **)a2;
                uint64_t v28 = *(int **)(a2 + 8);
                int v14 = v47;
              }

              else
              {
                int v35 = 0LL;
              }

              uint64_t v36 = (int *)&v35[4 * v31];
              int *v36 = v14;
              __int128 v29 = v36 + 1;
              while (v28 != v30)
              {
                int v37 = *--v28;
                *--uint64_t v36 = v37;
              }

              *(void *)a2 = v36;
              *(void *)(a2 + 8) = v29;
              *(void *)(a2 + 16) = &v35[4 * v34];
              if (v30) {
                operator delete(v30);
              }
            }

            else
            {
              *uint64_t v28 = v14;
              __int128 v29 = v28 + 1;
            }

            *(void *)(a2 + 8) = v29;
          }
        }

        else
        {
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          int v18 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "WifiManager, WiFiDeviceClientCopyProperty, invalid APPLE80211KEY_SUP_CHANNEL",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101833558);
            }
            LOWORD(v52) = 0;
            LODWORD(v42) = 2;
            int v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "WifiManager, WiFiDeviceClientCopyProperty, invalid APPLE80211KEY_SUP_CHANNEL",  &v52,  v42);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)",  "%s\n",  v40);
          }

          CFShow(ValueAtIndex);
        }

        sub_1002A5590(v48);
      }

      ++v10;
    }

    while (v10 != Count);
  }

  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24LL))(v44);
}

void sub_10033114C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_1002A5590((uint64_t *)va);
  sub_1011C52D0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003311C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v14 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v15 = 256;
  BOOL v13 = 0;
  WiFiManagerClientSetPower(*(void *)(a1 + 304), a2);
  if (sub_10033CF94(a1, &v13))
  {
    BOOL v5 = v13;
    if (v13 == (_DWORD)a2)
    {
      int v6 = 1;
      goto LABEL_10;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    unsigned int v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240448;
      int v21 = a2;
      __int16 v22 = 1026;
      int v23 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "WifiMgr, WiFiManagerClientSetPower, fail, request, %{public}d, query, %{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v16 = 67240448;
      int v17 = a2;
      __int16 v18 = 1026;
      int v19 = v5;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, WiFiManagerClientSetPower, fail, request, %{public}d, query, %{public}d",  &v16,  14);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWifiService::setPower(BOOL)", "%s\n", v11);
    }
  }

  int v6 = 0;
LABEL_10:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  __int16 v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240448;
    int v21 = a2;
    __int16 v22 = 1026;
    int v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "WifiMgr, WiFiManagerClientSetPower, request, %{public}d, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v16 = 67240448;
    int v17 = a2;
    __int16 v18 = 1026;
    int v19 = v6;
    LODWORD(v12) = 14;
    CFIndex v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "WifiMgr, WiFiManagerClientSetPower, request, %{public}d, %{public}d",  &v16,  v12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::setPower(BOOL)", "%s\n", v10);
  }

  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return 1LL;
}

void sub_100331554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1003315A8(uint64_t a1, int a2)
{
  int v10 = a2;
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  BOOL v5 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "setBackgroundExitScanCount, %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    v11[0] = 67109120;
    v11[1] = a2;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "setBackgroundExitScanCount, %d",  v11);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::setBackgroundExitScanCount(int)", "%s\n", v9);
  }

  if (*(void *)(a1 + 312))
  {
    sub_1002A5370(buf);
    sub_1002AC288((uint64_t)buf, @"IO80211InterfaceBGScanLostNetTO", &v10);
    uint64_t v6 = *(void *)(a1 + 312);
    uint64_t v7 = sub_1002A59CC((uint64_t)buf);
    WiFiDeviceClientSetProperty(v6, @"IO80211InterfaceBGScanParams", v7);
    sub_1002A5590(buf);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_1003317DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_10033183C(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v10 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v11 = 256;
  uint64_t v5 = *(void *)(a1 + 304);
  if (v5)
  {
    if (a2) {
      WiFiManagerClientEnable(v5);
    }
    else {
      WiFiManagerClientDisable(v5);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning no wifi interface available",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      __int16 v9 = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning no wifi interface available",  &v9,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::setAutoJoin(BOOL)", "%s\n", v7);
    }
  }

  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v5 != 0;
}

void sub_100331A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100331A50(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = sub_100CB06C0(a1, (uint64_t)"CLWifiService", a2);
  *uint64_t v5 = off_101833230;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *(_OWORD *)((char *)v5 + 217) = 0u;
  *(_WORD *)((char *)v5 + 233) = 255;
  *(void *)((char *)v5 + 236) = 0xE1000000000LL;
  *((_WORD *)v5 + 122) = 0;
  *((_BYTE *)v5 + 246) = 0;
  v5[31] = 0LL;
  sub_1010DDBC0(&buf, "60:c5:47:4f:51:1d");
  *(void *)(a1 + 2sub_1011C52D0(v21 - 56) = sub_1007EBE44((uint64_t *)&buf);
  sub_1010DDBC0(&context, "60:c5:47:4d:cd:6f");
  *(void *)(a1 + 264) = sub_1007EBE44(&context.version);
  sub_1010DDBC0(&__p, "60:c5:47:4f:51:1c");
  *(void *)(a1 + 2sub_1011C52D0(v15 - 72) = sub_1007EBE44((uint64_t *)&__p);
  if (SHIBYTE(context.retain) < 0) {
    operator delete((void *)context.version);
  }
  if (v48 < 0) {
    operator delete((void *)buf);
  }
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 288) = 0xBFF0000000000000LL;
  uint64_t v6 = (CFRunLoopSourceRef *)(a1 + 296);
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + sub_10000AE14(v1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_1012E6890;
  *(_OWORD *)(a1 + 400) = xmmword_1012E0070;
  *(_BYTE *)(a1 + 416) = -1;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 6memset(&buf[7], 0, 32) = 0;
  *(void *)(a1 + 640) = 0LL;
  *(_BYTE *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 4sub_1011C52D0(v21 - 56) = 0u;
  *(_OWORD *)(a1 + 4sub_1011C52D0(v15 - 72) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_BYTE *)(a1 + 648) = 1;
  *(void *)(a1 + 712) = 0LL;
  *(void *)(a1 + 704) = 0LL;
  *(_OWORD *)(a1 + 6sub_1011C52D0(v21 - 56) = 0u;
  *(_OWORD *)(a1 + 6sub_1011C52D0(v15 - 72) = 0u;
  *(void *)(a1 + 688) = 0LL;
  *(void *)(a1 + 696) = a1 + 704;
  *(_DWORD *)(a1 + 7memset(&buf[7], 0, 32) = 0;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 720) = 0LL;
  *(_BYTE *)(a1 + 728) = 0;
  *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  sub_1002E4C3C(a1 + 824, "CLWifiService internal state", 1LL, 1LL);
  uint64_t v7 = *a3;
  *a3 = 0LL;
  *(void *)(a1 + 840) = v7;
  memset(&__p, 0, sizeof(__p));
  sub_1002F0B04(&buf);
  uint64_t p_vtable = sub_1002A8560(buf, "WifiExcludedAp", &__p);
  __int16 v9 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1))
  {
    uint64_t v10 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if ((_DWORD)p_vtable)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t p_vtable = qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)p_vtable,  OS_LOG_TYPE_DEFAULT,  "WifiService, gExcludedAP, %{public}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      __int128 v38 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(context.version) = 136446210;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)v38;
      uint64_t p_vtable = _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiService, gExcludedAP, %{public}s",  &context,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)",  "%s\n",  (const char *)p_vtable);
    }

    uint64_t v13 = sub_1007EBE44((uint64_t *)&__p);
    if (!byte_101994300) {
      byte_101994300 = 1;
    }
    qword_1019942F8 = v13;
  }

  dispatch_queue_t v14 = dispatch_queue_create("CLWifiService scanning", 0LL);
  *(void *)(a1 + 736) = v14;
  if (v14)
  {
    context.version = 0LL;
    context.info = (void *)a1;
    memset(&context.retain, 0, 56);
    context.perform = (void (__cdecl *)(void *))sub_1003327D4;
    CFRunLoopSourceRef v15 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0LL, &context);
    CFRunLoopSourceRef *v6 = v15;
    if (!v15)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v16 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "WifiService, ctor, fDpcSource is NULL",  (uint8_t *)&buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        LOWORD(v44) = 0;
        LODWORD(v41) = 2;
        int v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, ctor, fDpcSource is NULL",  &v44,  v41);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)",  "%s\n",  v40);
      }
    }

    int v17 = (__CFRunLoop *)sub_10029228C();
    CFRunLoopAddSource(v17, *v6, kCFRunLoopCommonModes);
    sub_1002F0B04(&buf);
    char v18 = sub_1002A82BC(buf, "WifiMaxAge", (void *)(a1 + 384));
    char v19 = v18;
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (!*((void *)&buf + 1)) {
      goto LABEL_34;
    }
    int v21 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if ((v19 & 1) != 0) {
        goto LABEL_36;
      }
    }

    else
    {
LABEL_34:
      if ((v18 & 1) != 0)
      {
LABEL_36:
        sub_1002F0B04(&buf);
        int v23 = (_BYTE *)(a1 + 232);
        char v24 = sub_1002A6F64(buf, "WifiPassiveScansOnly", (BOOL *)(a1 + 232));
        char v25 = v24;
        int v26 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (!*((void *)&buf + 1)) {
          goto LABEL_40;
        }
        unint64_t v27 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
        do
          unint64_t v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          if ((v25 & 1) != 0)
          {
LABEL_41:
            if (*v23)
            {
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_101833558);
              }
              __int128 v29 = (os_log_s *)qword_101934858;
              if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "WifiService, passive scans only",  (uint8_t *)&buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_101934850 != -1) {
                  dispatch_once(&qword_101934850, &stru_101833558);
                }
                LOWORD(v44) = 0;
                LODWORD(v41) = 2;
                int v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiService, passive scans only",  &v44,  v41);
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)",  "%s\n",  v30);
              }
            }

void sub_100332600( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v47 = *(void *)(v44 + 840);
  *(void *)(v44 + 840) = 0LL;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
  }
  sub_1002E4CB0(v45);
  sub_100008390(v44 + 696, *(void **)(v44 + 704));
  if (*(_BYTE *)(v44 + 632))
  {
  }

  a39 = (void *)(v44 + 496);
  sub_100023498((void ***)&a39);
  a39 = (void *)(v44 + 464);
  sub_100023498((void ***)&a39);
  a39 = (void *)(v44 + 432);
  sub_100023498((void ***)&a39);
  sub_100351A84((void *)(v44 + 328));
  sub_100CB0784((void *)v44);
  _Unwind_Resume(a1);
}

uint64_t sub_10033274C(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  void *v4 = &off_1018334B0;
  v4[1] = a1;
  uint64_t v6 = v4;
  sub_100331A50(a1, a2, (uint64_t *)&v6);
  if (v6) {
    (*(void (**)(void *))(*v6 + 8LL))(v6);
  }
  return a1;
}

void sub_1003327B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003327D4(uint64_t a1)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v2 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onDpcSource",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v3 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      unint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onDpcSource, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  id v4 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _OWORD v5[2] = sub_100351618;
  void v5[3] = &unk_10181D3D0;
  _DWORD v5[4] = a1;
  [v4 sync:v5];
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1003329AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003329CC(uint64_t a1)
{
  int v2 = sub_10034A890();
  uint64_t v3 = sub_10034A92C();
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  id v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v2;
    __int16 v95 = 2048;
    uint64_t v96 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "wifi scan iterations %d dwell time is %lldms",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    *(_DWORD *)__int16 v90 = 67109376;
    *(_DWORD *)&v90[4] = v2;
    *(_WORD *)&v90[8] = 2048;
    *(void *)&v90[10] = v3;
    LODWORD(vsub_1011C52D0(v21 - 56) = 18;
    uint64_t v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "wifi scan iterations %d dwell time is %lldms",  v90,  v56);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::createScanOptions()", "%s\n", v41);
  }

  int valuePtr = 2;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  *(void *)(a1 + 112) = v5;
  if (!v5)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v6 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to initialize fScanTypePassive", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      uint64_t v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanTypePassive",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v42);
    }
  }

  int valuePtr = 1;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  *(void *)(a1 + 120) = v7;
  if (!v7)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v8 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "failed to initialize fScanTypeActive", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      int v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanTypeActive",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v43);
    }
  }

  v87[0] = xmmword_1012E68B0;
  v87[1] = unk_1012E68C0;
  *(void *)__int128 buf = v87;
  *(void *)__int16 v90 = &v88;
  int v9 = sub_10034A9CC(a1, v2, 1, 30, (int **)buf, (int **)v90, 50LL, 2, 1);
  *(void *)(a1 + 152) = v9;
  if (!v9)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v10 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsHarvest5GhzSet1",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      uint64_t v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsHarvest5GhzSet1",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v44);
    }
  }

  *(_OWORD *)__int16 v85 = xmmword_1012E68D0;
  *(_OWORD *)&v85[12] = *(__int128 *)((char *)&xmmword_1012E68D0 + 12);
  *(void *)__int128 buf = v85;
  *(void *)__int16 v90 = &v86;
  unint64_t v11 = sub_10034A9CC(a1, v2, 1, 30, (int **)buf, (int **)v90, 50LL, 2, 1);
  *(void *)(a1 + 160) = v11;
  if (!v11)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsHarvest5GhzSet2",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      uint64_t v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsHarvest5GhzSet2",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v45);
    }
  }

  int v83 = 165;
  v82[0] = xmmword_1012E68EC;
  v82[1] = unk_1012E68FC;
  *(void *)__int128 buf = v82;
  *(void *)__int16 v90 = &v84;
  uint64_t v13 = sub_10034A9CC(a1, v2, 1, 30, (int **)buf, (int **)v90, 50LL, 2, 1);
  *(void *)(a1 + 168) = v13;
  if (!v13)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v14 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsHarvest5GhzSet3",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      int v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsHarvest5GhzSet3",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v46);
    }
  }

  int v80 = 11;
  uint64_t v79 = 0x600000001LL;
  *(void *)__int128 buf = &v79;
  *(void *)__int16 v90 = &v81;
  uint64_t v15 = sub_10034A9CC(a1, v2, 1, 14, (int **)buf, (int **)v90, v3, 0, 0);
  *(void *)(a1 + 136) = v15;
  if (!v15)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v16 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsHarvest2GhzSet1",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      uint64_t v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsHarvest2GhzSet1",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v47);
    }
  }

  uint64_t v77 = 0xD0000000CLL;
  v76[0] = xmmword_1012E6910;
  v76[1] = unk_1012E6920;
  *(void *)__int128 buf = v76;
  *(void *)__int16 v90 = &v78;
  int v17 = sub_10034A9CC(a1, v2, 1, 14, (int **)buf, (int **)v90, v3, 0, 0);
  *(void *)(a1 + 144) = v17;
  if (!v17)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    char v18 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsHarvest2GhzSet2",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      char v48 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsHarvest2GhzSet2",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v48);
    }
  }

  int v74 = 11;
  uint64_t v73 = 0x600000001LL;
  *(void *)__int128 buf = &v73;
  *(void *)__int16 v90 = &v75;
  char v19 = sub_10034A9CC(a1, v2, 1, 14, (int **)buf, (int **)v90, 50LL, 0, 0);
  *(void *)(a1 + 128) = v19;
  if (!v19)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v20 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsFast",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      uint64_t v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsFast",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v49);
    }
  }

  int v71 = 11;
  uint64_t v70 = 0x600000001LL;
  *(void *)__int128 buf = &v70;
  *(void *)__int16 v90 = &v72;
  int v21 = sub_10034A9CC(a1, v2, 1, 14, (int **)buf, (int **)v90, v3, 0, 0);
  *(void *)(a1 + 176) = v21;
  if (!v21)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    unint64_t v22 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsStage1",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      __int16 v50 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsStage1",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v50);
    }
  }

  uint64_t v68 = 0xD0000000CLL;
  v67[0] = xmmword_1012E6910;
  v67[1] = unk_1012E6920;
  *(void *)__int128 buf = v67;
  *(void *)__int16 v90 = &v69;
  int v23 = sub_10034A9CC(a1, v2, 1, 14, (int **)buf, (int **)v90, v3, 0, 0);
  *(void *)(a1 + 184) = v23;
  if (!v23)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    char v24 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsStage2",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      __int16 v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsStage2",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v51);
    }
  }

  uint64_t v65 = 0xA10000009DLL;
  v64[0] = xmmword_1012E6938;
  v64[1] = unk_1012E6948;
  *(void *)__int128 buf = v64;
  *(void *)__int16 v90 = &v66;
  char v25 = sub_10034A9CC(a1, v2, 1, 30, (int **)buf, (int **)v90, v3, 0, 0);
  *(void *)(a1 + 192) = v25;
  if (!v25)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v26 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptions5GhzStage1",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v90 = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      int v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptions5GhzStage1",  v90,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v52);
    }
  }

  int v92 = 13;
  *(_OWORD *)__int16 v90 = xmmword_1012E6960;
  *(_OWORD *)&v90[16] = unk_1012E6970;
  __int128 v91 = xmmword_1012E6980;
  *(void *)__int128 buf = v90;
  *(void *)&v61[0] = &v93;
  unint64_t v27 = sub_10034A9CC(a1, v2, 1, 14, (int **)buf, (int **)v61, v3, 0, 0);
  __int128 v29 = xmmword_1012E6980;
  __int128 v28 = unk_1012E6970;
  __int128 v30 = xmmword_1012E6960;
  *(void *)(a1 + 200) = v27;
  if (!v27)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    id v31 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsNormal",  buf,  2u);
    }

    BOOL v32 = sub_1002921D0(115, 0);
    __int128 v28 = unk_1012E6970;
    __int128 v30 = xmmword_1012E6960;
    __int128 v29 = xmmword_1012E6980;
    if (v32)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v61[0]) = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      CFIndex v53 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsNormal",  v61,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v53);
      __int128 v28 = unk_1012E6970;
      __int128 v30 = xmmword_1012E6960;
      __int128 v29 = xmmword_1012E6980;
    }
  }

  int v62 = 13;
  v61[0] = v30;
  v61[1] = v28;
  _OWORD v61[2] = v29;
  *(void *)__int128 buf = v61;
  *(void *)&v58[0] = &v63;
  uint64_t v33 = sub_10034A9CC(a1, 3, 1, 14, (int **)buf, (int **)v58, v3, 0, 0);
  __int128 v35 = xmmword_1012E6980;
  __int128 v34 = unk_1012E6970;
  __int128 v36 = xmmword_1012E6960;
  *(void *)(a1 + 208) = v33;
  if (!v33)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v37 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsThorough",  buf,  2u);
    }

    BOOL v38 = sub_1002921D0(115, 0);
    __int128 v34 = unk_1012E6970;
    __int128 v36 = xmmword_1012E6960;
    __int128 v35 = xmmword_1012E6980;
    if (v38)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v58[0]) = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      __int16 v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsThorough",  v58,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v54);
      __int128 v34 = unk_1012E6970;
      __int128 v36 = xmmword_1012E6960;
      __int128 v35 = xmmword_1012E6980;
    }
  }

  int v59 = 13;
  v58[0] = v36;
  v58[1] = v34;
  v58[2] = v35;
  *(void *)__int128 buf = v58;
  v57[0] = &v60;
  uint64_t v39 = sub_10034A9CC(a1, v2, 1, 14, (int **)buf, v57, v3, (uint64_t)*(double *)(a1 + 384), 0);
  *(void *)(a1 + 216) = v39;
  if (!v39)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v40 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "failed to initialize fScanOptionsCached",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v57[0]) = 0;
      LODWORD(vsub_1011C52D0(v21 - 56) = 2;
      CFIndex v55 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "failed to initialize fScanOptionsCached",  v57,  v56);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::createScanOptions()", "%s\n", v55);
    }
  }

  *(void *)(a1 + 224) = 0LL;
}

uint64_t sub_1003340E0(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v39 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v40 = 256;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v3 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 68289026;
    int v51 = 0;
    __int16 v52 = 2082;
    *(void *)CFIndex v53 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:WifiMgr, allocateWifiArtifacts}",  buf,  0x12u);
  }

  *(_BYTE *)(a1 + 246) = 0;
  id v4 = *(const void **)(a1 + 320);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 320) = 0LL;
  }

  uint64_t v5 = *(void *)(a1 + 312);
  if (v5)
  {
    WiFiDeviceClientRegisterPowerCallback(v5, 0LL, a1);
    WiFiDeviceClientRegisterResumeScanCallback(*(void *)(a1 + 312), 0LL, a1);
    WiFiDeviceClientRegisterExtendedLinkCallback(*(void *)(a1 + 312), 0LL, a1);
    WiFiDeviceClientRegisterBssidChangeCallback(*(void *)(a1 + 312), 0LL, a1);
    WiFiDeviceClientRegisterBgScanSuspendResumeCallback(*(void *)(a1 + 312), 0LL, a1);
    WiFiDeviceClientRegisterScanUpdateCallback(*(void *)(a1 + 312), 0LL, 1LL, 0LL);
    WiFiDeviceClientRegisterLQMCallback(*(void *)(a1 + 312), 0LL, a1);
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback(*(void *)(a1 + 312), 0LL, a1);
    CFRelease(*(CFTypeRef *)(a1 + 312));
    *(void *)(a1 + 312) = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 304);
  if (v6) {
    goto LABEL_12;
  }
  uint64_t v7 = WiFiManagerClientCreate(kCFAllocatorDefault, 0LL);
  *(void *)(a1 + 304) = v7;
  if (v7)
  {
    uint64_t v8 = sub_10029228C();
    WiFiManagerClientScheduleWithRunLoop(v7, v8, kCFRunLoopCommonModes);
    WiFiManagerClientRegisterServerRestartCallback(*(void *)(a1 + 304), sub_100336D7C, a1);
    WiFiManagerClientRegisterWowStateChangedCallback(*(void *)(a1 + 304), sub_100336F80, a1);
    WiFiManagerClientRegisterDeviceAttachmentCallback(*(void *)(a1 + 304), sub_10033718C, a1);
    WiFiManagerClientRegisterBackgroundScanCallback(*(void *)(a1 + 304), sub_10033720C, a1);
    uint64_t v6 = *(void *)(a1 + 304);
LABEL_12:
    int v9 = (const __CFArray *)WiFiManagerClientCopyDevices(v6);
    __int16 v10 = v9;
    if (v9)
    {
      if (!CFArrayGetCount(v9))
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        unint64_t v11 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 68289026;
          int v51 = 0;
          __int16 v52 = 2082;
          *(void *)CFIndex v53 = "";
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:WifiMgr, wifi zero devices}",  buf,  0x12u);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
        }

        __int16 v12 = (os_log_s *)qword_101934858;
        if (os_signpost_enabled((os_log_t)qword_101934858))
        {
          *(_DWORD *)__int128 buf = 68289026;
          int v51 = 0;
          __int16 v52 = 2082;
          *(void *)CFIndex v53 = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "WifiMgr, wifi zero devices",  "{msg%{public}.0s:WifiMgr, wifi zero devices}",  buf,  0x12u);
        }

        sub_1003355AC(a1, (uint64_t)"DevicesZero");
      }

      ValueAtIndex = CFArrayGetValueAtIndex(v10, 0LL);
      *(void *)(a1 + 312) = ValueAtIndex;
      if (ValueAtIndex && (CFTypeID v14 = CFGetTypeID(ValueAtIndex), v14 == WiFiDeviceClientGetTypeID()))
      {
        CFRetain(*(CFTypeRef *)(a1 + 312));
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v15 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          InterfaceName = (const __CFString *)WiFiDeviceClientGetInterfaceName(*(void *)(a1 + 312));
          sub_1002A6C50(InterfaceName, &__p);
          int v17 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)__int128 buf = 68289282;
          int v51 = 0;
          __int16 v52 = 2082;
          *(void *)CFIndex v53 = "";
          *(_WORD *)&v53[8] = 2082;
          *(void *)&v53[10] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:WifiMgr, allocation , wifi interface:%{public, location:escape_only}s}",  buf,  0x1Cu);
        }

        WiFiDeviceClientRegisterPowerCallback(*(void *)(a1 + 312), sub_100337424, a1);
        WiFiDeviceClientRegisterResumeScanCallback(*(void *)(a1 + 312), sub_100337628, a1);
        WiFiDeviceClientRegisterExtendedLinkCallback(*(void *)(a1 + 312), sub_10033782C, a1);
        WiFiDeviceClientRegisterBssidChangeCallback(*(void *)(a1 + 312), sub_100337A38, a1);
        WiFiDeviceClientRegisterBgScanSuspendResumeCallback(*(void *)(a1 + 312), sub_100337C44, a1);
        WiFiDeviceClientRegisterScanUpdateCallback(*(void *)(a1 + 312), sub_100337E50, 1LL, a1);
        WiFiDeviceClientRegisterLQMCallback(*(void *)(a1 + 312), sub_100338070, a1);
        WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback(*(void *)(a1 + 312), sub_10033827C, a1);
        *(void *)(a1 + 320) = WiFiDeviceClientCopyCurrentNetwork(*(void *)(a1 + 312));
        __p.__r_.__value_.__r.__words[0] = qword_1019A1910;
        if (byte_1019A1918[23] < 0)
        {
          sub_1010DD48C( &__p.__r_.__value_.__s.__data_[8],  *(void **)byte_1019A1918,  *(unint64_t *)&byte_1019A1918[8]);
        }

        else
        {
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)byte_1019A1918;
          uint64_t v34 = *(void *)&byte_1019A1918[16];
        }

        __int128 v35 = xmmword_1019A1930;
        __int128 v36 = xmmword_1019A1940;
        __int128 v37 = xmmword_1019A1950;
        uint64_t v38 = qword_1019A1960;
        sub_100338488(a1, (uint64_t)&__p);
        *(_WORD *)__int128 buf = -256;
        LOBYTE(v52) = 0;
        unsigned __int8 v56 = 0;
        memset(v57, 0, sizeof(v57));
        uint64_t v58 = 0LL;
        sub_1003516E4((uint64_t)&v52, (uint64_t)&__p);
        BYTE2(v58) = 0;
        uint64_t v24 = v55;
        *(_DWORD *)uint64_t v41 = 6;
        (*(void (**)(uint64_t, uint8_t *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v41,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        char v25 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = v56;
          int v27 = v55;
          sub_1007EC454(&v32);
          BOOL v28 = !v26 || v27 <= 0;
          BOOL v29 = !v28;
          __int128 v30 = (v32.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v32 : (std::string *)v32.__r_.__value_.__r.__words[0];
          *(_DWORD *)uint64_t v41 = 68289795;
          *(_DWORD *)&v41[4] = 0;
          __int16 v42 = 2082;
          int v43 = "";
          __int16 v44 = 1026;
          BOOL v45 = v29;
          __int16 v46 = 2081;
          uint64_t v47 = v30;
          __int16 v48 = 2049;
          uint64_t v49 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:@ClxLink, associate , isAssociated:%{public}hhd, mac:%{private, location:es cape_only}s, channel:%{private}ld}",  v41,  0x2Cu);
        }

        WiFiManagerClientGetWoWState(*(void *)(a1 + 304));
        sub_100338C4C((void *)a1);
        sub_100338FE8(a1);
        *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
        *(_DWORD *)(a1 + 752) = 0;
        CFRelease(v10);
        sub_1003391D4(a1);
        *(void *)uint64_t v41 = &v57[8];
        sub_100023498((void ***)v41);
        if (v56 && v54 < 0) {
          operator delete(*(void **)&v53[6]);
        }
        if (SHIBYTE(v34) < 0) {
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
      }

      else
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        char v18 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 68289026;
          int v51 = 0;
          __int16 v52 = 2082;
          *(void *)CFIndex v53 = "";
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:WifiMgr, wifi device failure}",  buf,  0x12u);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
        }

        char v19 = (os_log_s *)qword_101934858;
        if (os_signpost_enabled((os_log_t)qword_101934858))
        {
          *(_DWORD *)__int128 buf = 68289026;
          int v51 = 0;
          __int16 v52 = 2082;
          *(void *)CFIndex v53 = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "WifiMgr, wifi device failure",  "{msg%{public}.0s:WifiMgr, wifi device failure}",  buf,  0x12u);
        }

        sub_1003355AC(a1, (uint64_t)"DeviceFail");
        *(void *)(a1 + 312) = 0LL;
        CFRelease(v10);
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v20 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 68289026;
        int v51 = 0;
        __int16 v52 = 2082;
        *(void *)CFIndex v53 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:WifiMgr, wifi devices failure}",  buf,  0x12u);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
      }

      int v21 = (os_log_s *)qword_101934858;
      if (os_signpost_enabled((os_log_t)qword_101934858))
      {
        *(_DWORD *)__int128 buf = 68289026;
        int v51 = 0;
        __int16 v52 = 2082;
        *(void *)CFIndex v53 = "";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "WifiMgr, wifi devices failure",  "{msg%{public}.0s:WifiMgr, wifi devices failure}",  buf,  0x12u);
      }

      sub_1003355AC(a1, (uint64_t)"DevicesNull");
    }

    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  unint64_t v22 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 68289026;
    int v51 = 0;
    __int16 v52 = 2082;
    *(void *)CFIndex v53 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:WifiMgr, WiFiManagerClientCreate failed}",  buf,  0x12u);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
  }

  int v23 = (os_log_s *)qword_101934858;
  if (os_signpost_enabled((os_log_t)qword_101934858))
  {
    *(_DWORD *)__int128 buf = 68289026;
    int v51 = 0;
    __int16 v52 = 2082;
    *(void *)CFIndex v53 = "";
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "WifiMgr, WiFiManagerClientCreate failed",  "{msg%{public}.0s:WifiMgr, WiFiManagerClientCreate failed}",  buf,  0x12u);
  }

  sub_1003355AC(a1, (uint64_t)"ManagerNull");
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_100334BC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

uint64_t sub_100334C28(uint64_t a1)
{
  return sub_100334C30(*(void *)(a1 + 32));
}

uint64_t sub_100334C30(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  id v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 648);
    *(_DWORD *)__int128 buf = 67240192;
    LODWORD(v17) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WsbTimer, first, %{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v9 = *(unsigned __int8 *)(a1 + 648);
    int v14 = 67240192;
    LODWORD(v15) = v9;
    __int16 v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WsbTimer, first, %{public}d",  &v14,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v10);
  }

  [*(id *)(a1 + 640) setNextFireDelay:14400.0];
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  uint64_t v6 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134349056;
    uint64_t v17 = 0x40CC200000000000LL;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WsbClients, timer, %{public}0.f", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    int v14 = 134349056;
    uint64_t v15 = 0x40CC200000000000LL;
    LODWORD(v13) = 12;
    unint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbClients, timer, %{public}0.f",  &v14,  v13);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v11);
  }

  if (*(_BYTE *)(a1 + 648))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v7 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WsbClients, status, start", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      LOWORD(v14) = 0;
      LODWORD(v13) = 2;
      __int16 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbClients, status, start",  &v14,  v13);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v12);
    }

    *(CFAbsoluteTime *)(a1 + 680) = Current;
    *(CFAbsoluteTime *)(a1 + 688) = Current;
  }

  else
  {
    sub_10034813C(a1, 0LL, 0, 1);
  }

  *(_BYTE *)(a1 + 648) = 0;
  sub_1003495BC(a1, (uint64_t)"timer");
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_1003350F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

BOOL sub_100335124(uint64_t a1)
{
  if (-[CLAONSenseWiFiService isAvailable]( +[CLAONSenseWiFiService shared](&OBJC_CLASS____TtC10CLAONSense21CLAONSenseWiFiService, "shared"),  "isAvailable"))
  {
    uint64_t v2 = +[CLAONSenseWiFiService shared](&OBJC_CLASS____TtC10CLAONSense21CLAONSenseWiFiService, "shared");
    id v15 = 0LL;
    id v3 = [*(id *)(a1 + 40) queue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10034C738;
    v14[3] = &unk_101833438;
    _DWORD v14[4] = a1;
    BOOL v4 = -[CLAONSenseWiFiService registerForWifiScanResultsWithQueue:error:callback:]( v2,  "registerForWifiScanResultsWithQueue:error:callback:",  v3,  &v15,  v14);
    if (v4)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v5 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "AONSense, successfully registered for aonsensed scans",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        LOWORD(v16) = 0;
        uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "AONSense, successfully registered for aonsensed scans",  &v16,  2);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::startAONScanRequest()", "%s\n");
LABEL_30:
        if (v6 != buf) {
          free(v6);
        }
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v9 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        id v10 = objc_msgSend(objc_msgSend(v15, "localizedDescription"), "UTF8String");
        *(_DWORD *)__int128 buf = 136446210;
        id v19 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Error registering for AON scan results: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v12 = qword_101934858;
        id v13 = objc_msgSend(objc_msgSend(v15, "localizedDescription"), "UTF8String");
        int v16 = 136446210;
        id v17 = v13;
        uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  16LL,  "Error registering for AON scan results: %{public}s",  &v16,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWifiService::startAONScanRequest()", "%s\n");
        goto LABEL_30;
      }
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "AONSense is unavailable, unable to register for scans",  buf,  2u);
    }

    BOOL v4 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v16) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "AONSense is unavailable, unable to register for scans",  &v16,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWifiService::startAONScanRequest()", "%s\n", v8);
      return 0LL;
    }
  }

  return v4;
}

uint64_t sub_1003355AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 824;
  void block[5] = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v9 = 256;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  int v5 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v13 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "WifiService, re-schedule allocate, %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v10 = 136446210;
    uint64_t v11 = a2;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiService, re-schedule allocate, %{public}s",  &v10,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)",  "%s\n",  v7);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033580C;
  block[3] = &unk_10181D3D0;
  block[4] = a1;
  if (qword_1019942D8 != -1) {
    dispatch_once(&qword_1019942D8, block);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_1003357E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

id sub_10033580C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_100335868;
  void v4[3] = &unk_10181D3D0;
  v4[4] = v1;
  return [v2 afterInterval:v4 async:5.0];
}

void sub_100335868(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 312))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v2 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "WifiService, device, previously retrieved",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      v6[0] = 0;
      id v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiService, device, previously retrieved",  v6,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)_block_invoke",  "%s\n",  v3);
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v4 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiService, device, timer retrieve", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      v6[0] = 0;
      int v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiService, device, timer retrieve",  v6,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)_block_invoke",  "%s\n",  v5);
    }

    sub_1003340E0(v1);
    sub_100335B3C(v1, 1, 1);
  }

void sub_100335B3C(uint64_t a1, int a2, int a3)
{
  uint64_t v90 = a1 + 824;
  (*(void (**)(void))(*(void *)(a1 + 824) + 16LL))();
  int v5 = 0LL;
  uint64_t v6 = 0LL;
  __int16 v92 = 256;
  uint64_t v88 = 0LL;
  uint64_t v89 = 0LL;
  int v87 = &v88;
  uint64_t v7 = &v88;
  while (1)
  {
    uint64_t v8 = (int *)((char *)&unk_101833338 + 16 * v6);
    __int16 v9 = &v88;
    if (v7 == &v88) {
      goto LABEL_8;
    }
    int v10 = v5;
    uint64_t v11 = &v88;
    if (v5)
    {
      do
      {
        __int16 v9 = (uint64_t **)v10;
        int v10 = (uint64_t *)v10[1];
      }

      while (v10);
    }

    else
    {
      do
      {
        __int16 v9 = (uint64_t **)v11[2];
        BOOL v60 = *v9 == (uint64_t *)v11;
        uint64_t v11 = v9;
      }

      while (v60);
    }

    int v12 = *v8;
    if (*((_DWORD *)v9 + 8) < *v8)
    {
LABEL_8:
      if (v5) {
        uint64_t v13 = v9;
      }
      else {
        uint64_t v13 = &v88;
      }
      if (v5)
      {
        int v14 = v9 + 1;
      }

      else
      {
        __int16 v9 = (uint64_t **)&v87;
        int v14 = &v88;
      }

      if (v9[1]) {
        goto LABEL_27;
      }
LABEL_24:
      id v17 = operator new(0x30uLL);
      void v17[2] = *(_OWORD *)v8;
      *(void *)id v17 = 0LL;
      *((void *)v17 + 1) = 0LL;
      *((void *)v17 + 2) = v13;
      *int v14 = (uint64_t *)v17;
      if (*v87)
      {
        int v87 = (uint64_t **)*v87;
        id v17 = *v14;
      }

      sub_100008650(v88, (uint64_t *)v17);
      ++v89;
      goto LABEL_27;
    }

    int v14 = &v88;
    uint64_t v13 = &v88;
    if (!v5) {
      goto LABEL_24;
    }
    id v15 = v5;
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (uint64_t **)v15;
        int v16 = *((_DWORD *)v15 + 8);
        if (v12 >= v16) {
          break;
        }
        id v15 = *v13;
        int v14 = v13;
        if (!*v13) {
          goto LABEL_24;
        }
      }

      if (v16 >= v12) {
        break;
      }
      id v15 = v13[1];
      if (!v15)
      {
        int v14 = v13 + 1;
        goto LABEL_24;
      }
    }

LABEL_156:
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  uint64_t v66 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67240704;
    *(_DWORD *)__int16 v112 = a2;
    *(_WORD *)&v112[4] = 1026;
    *(_DWORD *)&v112[6] = v58;
    *(_WORD *)double v113 = 1026;
    *(_DWORD *)&v113[2] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "@WsbActive, Same, isReg, %{public}d, active, %{public}d, recheck, %{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    int v93 = 67240704;
    *(_DWORD *)__int16 v94 = a2;
    *(_WORD *)&v94[4] = 1026;
    *(_DWORD *)&v94[6] = v58;
    *(_WORD *)__int16 v95 = 1026;
    *(_DWORD *)&v95[2] = 0;
    LODWORD(v83) = 20;
    int v81 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbActive, Same, isReg, %{public}d, active, %{public}d, recheck, %{public}d",  &v93,  v83);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v81);
  }

  int v67 = 0;
LABEL_163:
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  uint64_t v68 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = *sub_10033B1D0((uint64_t **)&v87, &v86);
    int v70 = *(_DWORD *)(a1 + 240);
    int v71 = *(unsigned __int8 *)(a1 + 244);
    int v72 = *(unsigned __int8 *)(a1 + 246);
    uint64_t v73 = *(void *)(v44 + 56);
    *(_DWORD *)__int128 buf = 136448514;
    *(void *)__int16 v112 = v41;
    *(_WORD *)&v112[8] = 1026;
    *(_DWORD *)double v113 = a2;
    *(_WORD *)&v113[4] = 2082;
    double v114 = v69;
    __int16 v115 = 1026;
    int v116 = v70;
    __int16 v117 = 1026;
    int v118 = v84;
    __int16 v119 = 1026;
    int v120 = v29;
    __int16 v121 = 1026;
    int v122 = v71;
    __int16 v123 = 1026;
    int v124 = v67;
    __int16 v125 = 1026;
    int v126 = v72;
    __int16 v127 = 2050;
    uint64_t v128 = v73;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "@WsbReg, codepath, %{public}s, isReg, %{public}d, mode, %{public}s, rate, %{public}d, dynRate, %{public}d, rollove r, %{public}d, active, %{public}d, %{public}d, sample, %{public}d, clients, %{public}lu",  buf,  0x4Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v74 = qword_101934868;
    int v75 = *sub_10033B1D0((uint64_t **)&v87, &v86);
    int v76 = *(_DWORD *)(a1 + 240);
    int v77 = *(unsigned __int8 *)(a1 + 244);
    int v78 = *(unsigned __int8 *)(a1 + 246);
    uint64_t v79 = *(void *)(v44 + 56);
    int v93 = 136448514;
    *(void *)__int16 v94 = v41;
    *(_WORD *)&v94[8] = 1026;
    *(_DWORD *)__int16 v95 = a2;
    *(_WORD *)&v95[4] = 2082;
    uint64_t v96 = v75;
    __int16 v97 = 1026;
    int v98 = v76;
    __int16 v99 = 1026;
    int v100 = v84;
    __int16 v101 = 1026;
    int v102 = v29;
    __int16 v103 = 1026;
    int v104 = v77;
    __int16 v105 = 1026;
    int v106 = v67;
    __int16 v107 = 1026;
    int v108 = v78;
    __int16 v109 = 2050;
    uint64_t v110 = v79;
    LODWORD(v83) = 74;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v74,  0LL,  "@WsbReg, codepath, %{public}s, isReg, %{public}d, mode, %{public}s, rate, %{public}d, dynRate, %{pub lic}d, rollover, %{public}d, active, %{public}d, %{public}d, sample, %{public}d, clients, %{public}lu",  &v93,  v83);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v20);
    goto LABEL_176;
  }

      int v106 = v110 + 96;
      *a2 = v117;
      a2[1] = v110 + 96;
      a2[2] = &v100[96 * v99];
      if (v115) {
        operator delete(v115);
      }
LABEL_158:
      a2[1] = v106;
      goto LABEL_159;
    }

  if (!*(_BYTE *)(v10 + 903)) {
    return v46;
  }
  *(_BYTE *)(v10 + 902) = 0;
  __int16 v99 = *(double *)(v10 + 184);
  if (v99 < 0.0)
  {
    int v100 = *(void **)(a1 + 648);
    __int16 v101 = 1.79769313e308;
LABEL_163:
    [v100 setNextFireDelay:v101];
    goto LABEL_164;
  }

  if (v17 == v9 || v99 > *(double *)(v17 + 184) - (a4 - *(double *)(v17 + 172)))
  {
    [*(id *)(a1 + 648) nextFireDelay];
    if (v102 != 1.79769313e308)
    {
      int v100 = *(void **)(a1 + 648);
      __int16 v101 = *(double *)(v10 + 184) + 15.0;
      goto LABEL_163;
    }
  }

  *(void *)(a1 + 2088) = sub_10042CC1C();
  *(_BYTE *)(a1 + 2164) = 1;
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  int v72 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "#fusion,LC Fusion configured successfully.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v85[0]) = 0;
    LODWORD(v84) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,LC Fusion configured successfully.",  v85,  v84);
    int v75 = (uint8_t *)v74;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v74);
    if (v75 != buf) {
      free(v75);
    }
  }

  return 1LL;
}

      dispatch_once(&qword_101934570, &stru_101873AF8);
      goto LABEL_93;
    }

    sub_101260D64(qword_101934570 == -1);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }

  if (!*(_BYTE *)(a1 + 171))
  {
    int v29 = *(void *)(a1 + 240);
    if (!v29) {
      goto LABEL_73;
    }
    int v30 = *(double *)(a1 + 248);
    if (v30 == 0.0)
    {
      sub_101260ED8();
    }

    else
    {
      if (*(double *)(a1 + 120) == v30)
      {
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        __int16 v48 = (os_log_s *)qword_101934578;
        if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
        {
          char v49 = *(void *)(a1 + 248);
          *(_DWORD *)__int128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v49;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_INFO,  "Still waiting for static timer of %{public}f",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934570 != -1) {
            dispatch_once(&qword_101934570, &stru_101873AF8);
          }
          __int16 v50 = *(void *)(a1 + 248);
          *(_DWORD *)int v108 = 134349056;
          *(void *)&v108[4] = v50;
          LODWORD(v84) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Still waiting for static timer of %{public}f",  v108,  v84);
          BOOL v28 = (char *)v51;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::tryStartCalibration()",  "%s\n",  v51);
          goto LABEL_123;
        }

        return;
      }

      *(void *)(a1 + 240) = 0LL;
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
      uint64_t p_vtable = (std::stringbuf *)&OBJC_METACLASS___CLPrivacyManager.vtable;
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      id v31 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
      {
        std::string v32 = *(void *)(a1 + 248);
        BOOL v33 = *(void *)(a1 + 120);
        *(_DWORD *)__int128 buf = 134349312;
        *(void *)&uint8_t buf[4] = v32;
        *(_WORD *)&_BYTE buf[12] = 2050;
        double v114 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "Resetting static timer. Wait duration changed %{public}f -> %{public}f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        int v80 = *(void *)(a1 + 248);
        int v81 = *(void *)(a1 + 120);
        *(_DWORD *)int v108 = 134349312;
        *(void *)&v108[4] = v80;
        __int16 v109 = 2050;
        *(void *)uint64_t v110 = v81;
        LODWORD(v84) = 22;
        uint64_t p_vtable = (std::stringbuf *)buf;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Resetting static timer. Wait duration changed %{public}f -> %{public}f",  v108,  v84);
        uint64_t v83 = (char *)v82;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v82);
        if (v83 != buf) {
          free(v83);
        }
      }

      if (!*(void *)(a1 + 240))
      {
LABEL_73:
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        uint64_t v34 = (os_log_s *)qword_101934578;
        if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_INFO))
        {
          __int128 v35 = *(void *)(a1 + 120);
          *(_DWORD *)__int128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "Starting static timer for %{public}f",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934570 != -1) {
            dispatch_once(&qword_101934570, &stru_101873AF8);
          }
          int v75 = *(void *)(a1 + 120);
          *(_DWORD *)int v108 = 134349056;
          *(void *)&v108[4] = v75;
          LODWORD(v84) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  1LL,  "Starting static timer for %{public}f",  v108,  v84);
          int v77 = (char *)v76;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorCalibrationController::tryStartCalibration()",  "%s\n",  v76);
          if (v77 != buf) {
            free(v77);
          }
        }

        __int128 v36 = *(double *)(a1 + 120);
        __int128 v37 = *(void **)(a1 + 32);
        v87[0] = _NSConcreteStackBlock;
        v87[1] = 3221225472LL;
        _OWORD v87[2] = sub_100B722D4;
        v87[3] = &unk_10181D3D0;
        v87[4] = a1;
        sub_100A36008(0LL, v37, v87, buf, v36);
        uint64_t v38 = *(void *)buf;
        *(void *)__int128 buf = 0LL;
        int v39 = *(void *)(a1 + 240);
        *(void *)(a1 + 240) = v38;
        if (v39)
        {
          (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
          __int16 v40 = *(void *)buf;
          *(void *)__int128 buf = 0LL;
          if (v40) {
            (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
          }
        }

        *(void *)(a1 + 248) = *(void *)(a1 + 120);
        return;
      }

      sub_101261040();
    }

    goto LABEL_155;
  }

  if (!sub_1003CB7CC(*(_DWORD *)(a1 + 216)))
  {
    int v25 = 480.0;
    if (!*(_BYTE *)(a1 + 300)) {
      int v25 = 120.0;
    }
    goto LABEL_84;
  }

  if (!sub_1004FC57C())
  {
LABEL_52:
    if (!sub_1004FC5C4())
    {
LABEL_85:
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101873AF8);
      }
      uint64_t v41 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
      {
        int v42 = *(void *)(a1 + 312);
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "No coex; calibration runtime = %.0f sec",
          buf,
          0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101873AF8);
        }
        int v72 = *(void *)(a1 + 312);
        *(_DWORD *)int v108 = 134217984;
        *(void *)&v108[4] = v72;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "No coex; calibration runtime = %.0f sec",
          COERCE_DOUBLE(v108));
        uint64_t v74 = (char *)v73;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v73);
        if (v74 != buf) {
          free(v74);
        }
      }

      sub_100B6EE44(a1, 0);
      return;
    }

    if (*(_BYTE *)(a1 + 208))
    {
      int v25 = 50.0;
LABEL_84:
      *(double *)(a1 + 312) = v25;
      goto LABEL_85;
    }

    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101873AF8);
    }
    char v54 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "Avoiding calibration during charging", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 == -1) {
        goto LABEL_112;
      }
      goto LABEL_166;
    }

    return;
  }

  if (*(_BYTE *)(a1 + 181))
  {
    goto LABEL_52;
  }

  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101873AF8);
  }
  int v52 = (os_log_s *)qword_101934578;
  if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Avoiding calibration during charging", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934570 == -1)
    {
LABEL_112:
      *(_WORD *)int v108 = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "Avoiding calibration during charging",  v108,  v84);
      BOOL v28 = (char *)v53;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v53);
      goto LABEL_123;
    }

  int v81 = *(unsigned int **)(a1 + 168);
  if (!v81) {
    int v81 = *(unsigned int **)(qword_1019A1D38 + 168);
  }
  uint64_t v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC38D8(v81, a2);
  uint64_t v83 = (int)v82;
  else {
    int v84 = 1;
  }
  v4 += v83 + v84 + 2;
  id v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x400000) == 0)
  {
LABEL_120:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_174;
    }
    goto LABEL_168;
  }

          operator delete(__s1[0]);
          if (!v78)
          {
LABEL_157:
            if (*(void *)buf != **(void **)(a1 + 1016))
            {
              sub_100D53308(a1, a1 + 656, (uint64_t)(v61 + 2), v98, (void *)&v123 + 1, (void *)&v124 + 1);
            }
          }

  uint64_t result = *(float *)(a2 + 196);
  v5 |= 0x400000000000uLL;
  os_log_s *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 196) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000000LL) == 0)
  {
LABEL_76:
    if ((v4 & 0x200000000000000LL) == 0) {
      goto LABEL_77;
    }
    goto LABEL_158;
  }

  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudio", *(float *)(a1 + 260));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000000000LL) == 0)
  {
LABEL_75:
    if ((v7 & 1) == 0) {
      goto LABEL_76;
    }
    goto LABEL_158;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196), 0x10Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  int v5 = *v4;
  if ((*v4 & 0x200000000000LL) == 0)
  {
LABEL_76:
    if ((v5 & 0x200000000000000LL) == 0) {
      goto LABEL_77;
    }
    goto LABEL_158;
  }

  int v45 = *(_BYTE *)(a2 + 328);
  v6 |= 0x20000uLL;
  os_log_s *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 328) = v45;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x40000) == 0)
  {
LABEL_51:
    if ((v7 & 0x20) == 0) {
      goto LABEL_52;
    }
    goto LABEL_158;
  }

  PB::TextFormatter::format(this, "numAudioSkiing", *(_DWORD *)(a1 + 152));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_158;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 328), 0x13Au);
  int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x40000) == 0)
  {
LABEL_51:
    if ((v6 & 0x20) == 0) {
      goto LABEL_52;
    }
    goto LABEL_158;
  }

  __int16 v92 = *(_BYTE *)(a2 + 164);
  v3 |= 0x20000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 164) = v92;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x200) == 0)
  {
LABEL_78:
    if ((v2 & 0x20) == 0) {
      goto LABEL_79;
    }
    goto LABEL_158;
  }

  PB::TextFormatter::format(this, "passthru1", *(_BYTE *)(a1 + 198));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  int v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x1000) == 0)
  {
LABEL_77:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_158;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x4BEu);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_78:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_158;
  }

            PB::Reader::recallMark(this, v138);
          }

          else
          {
            __int16 v109 = *(char **)(a1 + 64);
            int v108 = *(void *)(a1 + 72);
            if ((unint64_t)v109 >= v108)
            {
              int v122 = (char *)*v10;
              __int16 v123 = (v109 - (_BYTE *)*v10) >> 2;
              int v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 62) {
LABEL_228:
              }
                sub_100007008();
              __int16 v125 = v108 - (void)v122;
              if (v125 >> 1 > v124) {
                int v124 = v125 >> 1;
              }
              else {
                int v126 = v124;
              }
              if (v126)
              {
                __int16 v127 = (char *)sub_10000956C(v137, v126);
                int v122 = *(char **)(a1 + 56);
                __int16 v109 = *(char **)(a1 + 64);
              }

              else
              {
                __int16 v127 = 0LL;
              }

              __int128 v132 = &v127[4 * v123];
              *(_DWORD *)__int128 v132 = 0;
              __int16 v105 = v132 + 4;
              while (v109 != v122)
              {
                int v133 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *((_DWORD *)v132 - 1) = v133;
                v132 -= 4;
              }

              *(void *)(a1 + sub_1011C52D0(v21 - 56) = v132;
              *(void *)(a1 + 64) = v105;
              *(void *)(a1 + sub_1011C52D0(v15 - 72) = &v127[4 * v126];
              if (v122) {
                operator delete(v122);
              }
            }

            else
            {
              *(_DWORD *)__int16 v109 = 0;
              __int16 v105 = v109 + 4;
            }

            *(void *)(a1 + 64) = v105;
LABEL_210:
            __int128 v134 = *((void *)this + 1);
            if (v134 <= 0xFFFFFFFFFFFFFFFBLL && v134 + 4 <= *((void *)this + 2))
            {
              *(v105 - 1) = *(_DWORD *)(*(void *)this + v134);
LABEL_214:
              int v29 = *((void *)this + 1) + 4LL;
LABEL_215:
              *((void *)this + 1) = v29;
            }

            else
            {
LABEL_212:
              *((_BYTE *)this + 24) = 1;
            }
          }

          uint64_t v4 = *((void *)this + 1);
          int v5 = *((void *)this + 2);
          uint64_t v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_156;
      }
    }

    uint64_t v21 = 0;
    unint64_t v22 = 0;
    id v17 = 0LL;
    if (v4 > v5) {
      int v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v23 = v4 + 1;
      uint64_t v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        id v17 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

void sub_100336CFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, ...)
{
}

void sub_100336D7C(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiManagerRestartCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    int v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      id v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiManagerRestartCallback, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v9 = 0;
  }

  id v6 = [*(id *)(a2 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10035164C;
  v7[3] = &unk_101830538;
  _DWORD v7[4] = a2;
  uint64_t v7[5] = a1;
  [v6 sync:v7];
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100336F60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100336F80(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    id v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiManagerClientWowStateChangedCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      int v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiManagerClientWowStateChangedCallback, event:%{public, location :escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100351654;
  v9[3] = &unk_101830518;
  _DWORD v9[4] = a3;
  void v9[5] = a1;
  char v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10033716C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10033718C(const void *a1, const void *a2, uint64_t a3)
{
  id v6 = *(void **)(a3 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10033C534;
  void v8[3] = &unk_101830558;
  _DWORD v8[4] = a3;
  void v8[5] = a1;
  void v8[6] = a2;
  return [v6 async:v8];
}

void sub_10033720C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    id v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiManagerBackgroundScanCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiManagerBackgroundScanCallback, event:%{public, location:escape _only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v13 = 0;
  }

  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100351660;
  v11[3] = &unk_101832DF8;
  _DWORD v11[4] = a4;
  void v11[5] = a1;
  void v11[6] = a2;
  v11[7] = a3;
  [v10 sync:v11];
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_100337404( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100337424(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientPowerCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    int v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      char v13 = "";
      __int16 v14 = 2082;
      int v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientPowerCallback, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v9 = 0;
  }

  id v6 = [*(id *)(a2 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100351670;
  v7[3] = &unk_101830538;
  _DWORD v7[4] = a2;
  uint64_t v7[5] = a1;
  [v6 sync:v7];
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100337608( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100337628(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientResumeScanCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    int v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      char v13 = "";
      __int16 v14 = 2082;
      int v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientResumeScanCallback, event:%{public, location:escap e_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v9 = 0;
  }

  id v6 = [*(id *)(a2 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100351678;
  v7[3] = &unk_101830538;
  _DWORD v7[4] = a2;
  uint64_t v7[5] = a1;
  [v6 sync:v7];
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10033780C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033782C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientLinkExtendedCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientLinkExtendedCallback, event:%{public, location:esc ape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100351680;
  v9[3] = &unk_101830558;
  _DWORD v9[4] = a3;
  void v9[5] = a1;
  void v9[6] = a2;
  [v8 sync:v9];
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100337A18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100337A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientBssidChangeCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientBssidChangeCallback, event:%{public, location:esca pe_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100351690;
  v9[3] = &unk_101830558;
  _DWORD v9[4] = a3;
  void v9[5] = a1;
  void v9[6] = a2;
  [v8 sync:v9];
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100337C24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100337C44(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    id v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback, event:%{public, locat ion:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003516A0;
  v9[3] = &unk_101830518;
  _DWORD v9[4] = a3;
  void v9[5] = a1;
  char v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100337E30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100337E50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v16 = 1;
    char v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientScanCacheCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    char v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 2082;
      unint64_t v22 = "activity";
      __int16 v23 = 2050;
      uint64_t v24 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientScanCacheCallback, event:%{public, location:escape _only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v16 = 0;
  }

  id v12 = [*(id *)(a5 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  uint64_t v13[2] = sub_1003516B0;
  v13[3] = &unk_101833598;
  void v13[4] = a5;
  void v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  int v14 = a4;
  [v12 sync:v13];
  if (v16) {
    os_activity_scope_leave(&state);
  }
}

void sub_100338050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100338070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientRegisterLQMCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientRegisterLQMCallback, event:%{public, location:esca pe_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003516C4;
  v9[3] = &unk_101830558;
  _DWORD v9[4] = a3;
  void v9[5] = a1;
  void v9[6] = a2;
  [v8 sync:v9];
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10033825C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033827C(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    id v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback, event:%{publi c, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003516D4;
  v9[3] = &unk_101830518;
  _DWORD v9[4] = a3;
  void v9[5] = a1;
  char v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100338468( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100338488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v38 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v39 = 256;
  *(void *)a2 = qword_1019A1910;
  std::string::operator=((std::string *)(a2 + 8), (const std::string *)byte_1019A1918);
  __int128 v5 = xmmword_1019A1930;
  __int128 v6 = xmmword_1019A1940;
  __int128 v7 = xmmword_1019A1950;
  *(void *)(a2 + 80) = qword_1019A1960;
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + memset(&buf[7], 0, 32) = v5;
  sub_1000C6A74(a1 + 544, (uint64_t)&byte_1019A18B0);
  if (*(void *)(a1 + 312))
  {
    uint64_t v9 = *(void *)(a1 + 320);
    if (v9)
    {
      uint64_t v10 = sub_10033F1A4(v8, v9, a2, 0);
      if ((_DWORD)v10)
      {
        sub_1003516E4(a1 + 544, a2);
        *(void *)(a1 + 592) = 0LL;
        uint64_t v11 = WiFiDeviceClientCopyCurrentNetwork(*(void *)(a1 + 312));
        char v12 = (const void *)v11;
        if (v11)
        {
          Property = (const void *)WiFiNetworkGetProperty(v11, kWiFiNetworkAttributeIsMoving);
          if (Property) {
            BOOL v14 = CFEqual(Property, kCFBooleanTrue) != 0;
          }
          else {
            BOOL v14 = 1;
          }
          *(_BYTE *)(a1 + 609) = v14;
          CFRelease(v12);
LABEL_33:
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          __int16 v21 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
          {
            v37.__r_.__value_.__r.__words[0] = *(void *)a2;
            sub_1007EC454(&__p);
            unint64_t v22 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
            int v23 = *(_DWORD *)(a2 + 40);
            int v24 = *(_DWORD *)(a2 + 32);
            int v25 = *(unsigned __int8 *)(a2 + 65);
            *(_DWORD *)__int128 buf = 67241219;
            int v46 = v10;
            __int16 v47 = 2081;
            __int16 v48 = v22;
            __int16 v49 = 1026;
            int v50 = v23;
            __int16 v51 = 1026;
            int v52 = v24;
            __int16 v53 = 1026;
            int v54 = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "WifiMgr, queryAssoc, %{public}d, mac, %{private}s, channel, %{public}d, rssi, %{public}d, isMoving, %{public}d",  buf,  0x24u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101833558);
            }
            uint64_t v30 = qword_101934858;
            sub_1007EC454(&v37);
            if ((v37.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              id v31 = &v37;
            }
            else {
              id v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
            }
            int v32 = *(_DWORD *)(a2 + 40);
            int v33 = *(_DWORD *)(a2 + 32);
            int v34 = *(unsigned __int8 *)(a2 + 65);
            LODWORD(__p.__r_.__value_.__l.__data_) = 67241219;
            HIDWORD(__p.__r_.__value_.__r.__words[0]) = v10;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v31;
            WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
            HIDWORD(__p.__r_.__value_.__r.__words[2]) = v32;
            __int16 v41 = 1026;
            int v42 = v33;
            __int16 v43 = 1026;
            int v44 = v34;
            LODWORD(v36) = 36;
            __int128 v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v30,  1LL,  "WifiMgr, queryAssoc, %{public}d, mac, %{private}s, channel, %{public}d, rssi, %{public}d, is Moving, %{public}d",  &__p,  v36);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)",  "%s\n",  v35);
          }

          goto LABEL_42;
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v20 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "WifiMgr, queryAssoc, Unable to copy current network",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        __int16 v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, queryAssoc, Unable to copy current network",  &__p,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)",  "%s\n",  v19);
      }

      else
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        __int16 v18 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67240192;
          int v46 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, queryAssoc, fail, ap, %{public}d",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        __p.__r_.__value_.__r.__words[0] = 67240192LL;
        __int16 v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, queryAssoc, fail, ap, %{public}d",  &__p,  8);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)",  "%s\n",  v19);
      }

      goto LABEL_33;
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  __int16 v15 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v16 = *(void *)(a1 + 312) == 0LL;
    BOOL v17 = *(void *)(a1 + 320) == 0LL;
    *(_DWORD *)__int128 buf = 67240448;
    int v46 = v16;
    __int16 v47 = 1026;
    LODWORD(v48) = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, queryAssoc, fail, device, %{public}d, network, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    BOOL v27 = *(void *)(a1 + 312) == 0LL;
    BOOL v28 = *(void *)(a1 + 320) == 0LL;
    LODWORD(__p.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v27;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v28;
    int v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, queryAssoc, fail, device, %{public}d, network, %{public}d",  &__p,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)",  "%s\n",  v29);
  }

  uint64_t v10 = 0LL;
LABEL_42:
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v10;
}

void sub_100338C04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100338C4C(void *a1)
{
  uint64_t v2 = a1 + 103;
  uint64_t v11 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v12 = 256;
  id v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiManagerClientWowStateChangedCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 68289282;
    int v17 = 0;
    __int16 v18 = 2082;
    *(void *)std::string __p = "";
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiManagerClientWowStateChangedCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  int WoWState = WiFiManagerClientGetWoWState(a1[38]);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  __int128 v6 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109376;
    int v17 = WoWState;
    __int16 v18 = 2048;
    *(void *)std::string __p = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Got onWiFiManagerClientWowStateChangedCallback callback, isEnabled, %d, refcon, %p",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    LODWORD(v13) = 67109376;
    HIDWORD(v13) = WoWState;
    __int16 v14 = 2048;
    __int16 v15 = a1;
    LODWORD(v9) = 18;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Got onWiFiManagerClientWowStateChangedCallback callback, isEnabled, %d, refcon, %p",  &v13,  v9);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerClientWowStateChangedCallback(WiFiManagerClientRef, Boolean)",  "%s\n",  v8);
  }

  *(_WORD *)__int128 buf = -256;
  LOBYTE(v18) = 0;
  char v21 = 0;
  uint64_t v23 = 0LL;
  memset(v22, 0, sizeof(v22));
  *(_DWORD *)((char *)&v23 + 1) = WoWState != 0;
  LODWORD(v13) = 11;
  (*(void (**)(void *, void ***, uint8_t *, uint64_t, uint64_t, void))(*a1 + 152LL))( a1,  &v13,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
  int v13 = (void **)&v22[8];
  sub_100023498(&v13);
  if (v21 && v20 < 0) {
    operator delete(*(void **)&__p[6]);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v2 + 24LL))(v2);
}

void sub_100338FA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_100338FE8(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v16 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v17 = 256;
  uint64_t v9 = qword_1019A1910;
  if (byte_1019A1918[23] < 0)
  {
    sub_1010DD48C(&v10, *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
  }

  else
  {
    __int128 v10 = *(_OWORD *)byte_1019A1918;
    uint64_t v11 = *(void *)&byte_1019A1918[16];
  }

  __int128 v12 = xmmword_1019A1930;
  __int128 v13 = xmmword_1019A1940;
  __int128 v14 = xmmword_1019A1950;
  uint64_t v15 = qword_1019A1960;
  sub_100338488(a1, (uint64_t)&v9);
  id v3 = *(const void **)(a1 + 224);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 224) = 0LL;
  }

  if (sub_10033E16C(a1, &v9))
  {
    if (DWORD2(v12) == -1)
    {
      sub_101235648();
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService.mm",  2489,  "createScanOptionsChannel");
      __break(1u);
      return;
    }

    int v8 = DWORD2(v12);
    v4[0] = &v8;
    __int128 v7 = &v9;
    *(void *)(a1 + 224) = sub_10034AF3C(a1, 1, 1, 14, v4, (int **)&v7, 110LL, 0, 0);
    sub_1003516E4(a1 + 544, (uint64_t)&v9);
  }

  else
  {
    sub_100351790((uint64_t)v4, (uint64_t)&qword_1019A1910);
    sub_100351804(a1 + 544, (uint64_t)v4);
    if (v6 && v5 < 0) {
      operator delete(v4[1]);
    }
  }

  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_100339194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
}

uint64_t sub_1003391D4(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v19 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v20 = 256;
  int v3 = byte_1019942F0;
  if ((byte_1019942F0 & 1) == 0)
  {
    sub_1004F2598();
    byte_1019942F1 = (sub_1004F64FC() & 0x8000) != 0;
    byte_1019942F0 = 1;
  }

  BOOL v18 = 0;
  sub_10033CF94(a1, &v18);
  int v4 = *(unsigned __int8 *)(a1 + 376);
  *(_BYTE *)(a1 + 376) = byte_1019942F1;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  char v5 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(unsigned __int8 *)(a1 + 376);
    int v7 = *(unsigned __int8 *)(a1 + 536);
    *(_DWORD *)__int128 buf = 67109888;
    *(_DWORD *)BOOL v27 = v6;
    *(_WORD *)&v27[4] = 1024;
    *(_DWORD *)&v27[6] = v4;
    __int16 v28 = 1024;
    LODWORD(__p[0]) = byte_1019942F1;
    WORD2(__p[0]) = 1024;
    *(_DWORD *)((char *)__p + 6) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "WiFi tracking available now %d (was %d) (%d %d)",  buf,  0x1Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v12 = *(unsigned __int8 *)(a1 + 376);
    int v13 = *(unsigned __int8 *)(a1 + 536);
    *(_DWORD *)char v21 = 67109888;
    *(_DWORD *)&_DWORD v21[4] = v12;
    *(_WORD *)&void v21[8] = 1024;
    *(_DWORD *)&v21[10] = v4;
    __int16 v22 = 1024;
    int v23 = byte_1019942F1;
    __int16 v24 = 1024;
    int v25 = v13;
    __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "WiFi tracking available now %d (was %d) (%d %d)",  v21,  26,  v17,  v19);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::processTrackingAndPower()", "%s\n", v14);
  }

  if (v3)
  {
    int v8 = *(unsigned __int8 *)(a1 + 376);
    if (v4 != v8)
    {
      *(_WORD *)__int128 buf = -256;
      v27[4] = 0;
      char v31 = 0;
      uint64_t v34 = 0LL;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      BYTE1(v34) = v8;
      *(_DWORD *)char v21 = 10;
      (*(void (**)(uint64_t, _BYTE *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v21,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
      *(void *)char v21 = (char *)&v32 + 8;
      sub_100023498((void ***)v21);
      if (v31)
      {
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  uint64_t v9 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 536)) {
      __int128 v10 = "On";
    }
    else {
      __int128 v10 = "Off";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)BOOL v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiNotify, Power, %s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    if (*(_BYTE *)(a1 + 536)) {
      uint64_t v15 = "On";
    }
    else {
      uint64_t v15 = "Off";
    }
    *(_DWORD *)char v21 = 136315138;
    *(void *)&_DWORD v21[4] = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WifiNotify, Power, %s",  v21);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::processTrackingAndPower()", "%s\n", v16);
  }

  buf[1] = -1;
  v27[4] = 0;
  char v31 = 0;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  uint64_t v34 = 0LL;
  buf[0] = *(_BYTE *)(a1 + 536);
  *(_DWORD *)char v21 = 1;
  (*(void (**)(uint64_t, _BYTE *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v21,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
  *(void *)char v21 = (char *)&v32 + 8;
  sub_100023498((void ***)v21);
  if (v31 && v30 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_1003396D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100339720(uint64_t a1)
{
  int v3 = (void **)(a1 + 112);
  sub_100023498(&v3);
  return a1;
}

uint64_t sub_100339770(uint64_t a1)
{
  *(void *)a1 = off_101833230;
  sub_100339844(a1);
  uint64_t v2 = *(void *)(a1 + 840);
  *(void *)(a1 + 840) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_1002E4CB0(a1 + 824);
  sub_100008390(a1 + 696, *(void **)(a1 + 704));
  int v4 = (void **)(a1 + 496);
  sub_100023498(&v4);
  int v4 = (void **)(a1 + 464);
  sub_100023498(&v4);
  int v4 = (void **)(a1 + 432);
  sub_100023498(&v4);
  sub_100351A84((void *)(a1 + 328));
  return sub_100CB0784((void *)a1);
}

void sub_100339830(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100339770(a1);
  operator delete(v1);
}

uint64_t sub_100339844(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  *(_BYTE *)(a1 + 108) = 1;
  int v3 = *(__CFRunLoopSource **)(a1 + 296);
  if (v3)
  {
    CFRunLoopSourceInvalidate(v3);
    int v4 = *(const void **)(a1 + 296);
    *(void *)(a1 + sub_10000AE14(v1 + 296) = 0LL;
    CFRelease(v4);
  }

  char v5 = *(const void **)(a1 + 320);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 320) = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 312);
  if (v6)
  {
    WiFiDeviceClientSetRangeable(v6, 0LL, 0LL);
    WiFiDeviceClientRegisterRangingReportCallback(*(void *)(a1 + 312), 0LL, 0LL);
    CFRelease(*(CFTypeRef *)(a1 + 312));
    *(void *)(a1 + 312) = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 304);
  if (v7)
  {
    uint64_t v8 = sub_10029228C();
    WiFiManagerClientUnscheduleFromRunLoop(v7, v8, kCFRunLoopCommonModes);
    CFRelease(*(CFTypeRef *)(a1 + 304));
    *(void *)(a1 + 304) = 0LL;
  }

  *(void *)(a1 + 6sub_1011C52D0(v33 - 56) = 0LL;
  *(void *)(a1 + 664) = 0LL;

  *(void *)(a1 + 6sub_1011C52D0(v15 - 72) = 0LL;
  uint64_t v9 = *(const void **)(a1 + 520);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 520) = 0LL;
  }

  __int128 v10 = *(const void **)(a1 + 528);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 528) = 0LL;
  }

  uint64_t v11 = *(const void **)(a1 + 112);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 112) = 0LL;
  }

  int v12 = *(const void **)(a1 + 120);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 120) = 0LL;
  }

  int v13 = *(const void **)(a1 + 128);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 128) = 0LL;
  }

  __int128 v14 = *(const void **)(a1 + 176);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 176) = 0LL;
  }

  uint64_t v15 = *(const void **)(a1 + 184);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 184) = 0LL;
  }

  uint64_t v16 = *(const void **)(a1 + 192);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 192) = 0LL;
  }

  int v17 = *(const void **)(a1 + 200);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 200) = 0LL;
  }

  BOOL v18 = *(const void **)(a1 + 208);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 208) = 0LL;
  }

  uint64_t v19 = *(const void **)(a1 + 216);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 216) = 0LL;
  }

  __int16 v20 = *(const void **)(a1 + 224);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 224) = 0LL;
  }

  char v21 = *(const void **)(a1 + 136);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 136) = 0LL;
  }

  __int16 v22 = *(const void **)(a1 + 144);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 144) = 0LL;
  }

  int v23 = *(const void **)(a1 + 152);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 152) = 0LL;
  }

  __int16 v24 = *(const void **)(a1 + 160);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 160) = 0LL;
  }

  int v25 = *(const void **)(a1 + 168);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 168) = 0LL;
  }

  BOOL v26 = *(dispatch_object_s **)(a1 + 736);
  if (v26)
  {
    dispatch_release(v26);
    *(void *)(a1 + 736) = 0LL;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_100339A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100339A90(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v12 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v13 = 256;
  if (*(void *)(a1 + 304) && *(void *)(a1 + 312))
  {
    Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, @"BGSCAN_CACHE", kCFBooleanFalse);
    CFDictionaryAddValue(Mutable, @"BGSCAN_CACHE_WSB_ROLLOVER", kCFBooleanFalse);
    id v4 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    char v5 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL);
    id v6 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    [v6 setObject:v5 forKey:@"CHANNEL"];
    [v4 addObject:v6];
    CFDictionarySetValue(Mutable, @"SCAN_CHANNELS", v4);
    WiFiManagerClientSetBGScanCacheState(*(void *)(a1 + 304), Mutable);
    CFRelease(Mutable);
    *(void *)(a1 + 236) = 0xE1000000000LL;
    *(_WORD *)(a1 + 244) = 0;
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v7 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@WsbReg, disabled", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      __int16 v11 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbReg, disabled",  &v11,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::turnOffWsb()", "%s\n", v8);
LABEL_20:
    }
  }

  else
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v9 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "@Wsb, No wifi interface available, WARNING",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      __int16 v11 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@Wsb, No wifi interface available, WARNING",  &v11,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::turnOffWsb()", "%s\n", v8);
      goto LABEL_20;
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_100339E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100339E9C(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v7 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v8 = 256;
  if (*(void *)(a1 + 304) && *(void *)(a1 + 312))
  {
    if (*(_DWORD *)(a1 + 236) != 2 || *(int *)(a1 + 284) <= 0)
    {
      WiFiManagerClientRegisterBackgroundScanCacheCallback();
      sub_10033A0D8(a1, 0, 1);
      *(_DWORD *)(a1 + 236) = 2;
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v3 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "@WsbWarn, No wifi interface available, #CloneMe",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      __int16 v6 = 0;
      char v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@WsbWarn, No wifi interface available, #CloneMe",  &v6,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::turnOnWsb()", "%s\n", v5);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_10033A0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_10033A0D8(uint64_t a1, int a2, int a3)
{
  theDict = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(theDict, @"BGSCAN_CACHE", kCFBooleanTrue);
  if (a3) {
    CFIndex v4 = 3LL;
  }
  else {
    CFIndex v4 = 13LL;
  }
  Mutable = CFArrayCreateMutable(0LL, v4, &kCFTypeArrayCallBacks);
  int v6 = 0;
  int valuePtr = 1;
  int v7 = 1;
  do
  {
    if (!a3 || v7 <= 0xB && ((1 << v7) & 0x842) != 0)
    {
      __int16 v8 = CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v9 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v10 = v9;
      if (v8) {
        BOOL v11 = v9 == 0LL;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v12 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67240704;
          int v30 = valuePtr;
          __int16 v31 = 2050;
          __int128 v32 = v8;
          __int16 v33 = 2050;
          CFNumberRef v34 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "@WsbWarn, channel fail, %{public}d channelDict, %{public}p, channelNumber, %{public}p, #CloneMe",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          int v23 = 67240704;
          int v24 = valuePtr;
          __int16 v25 = 2050;
          BOOL v26 = v8;
          __int16 v27 = 2050;
          CFNumberRef v28 = v10;
          LODWORD(v18) = 28;
          __int16 v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@WsbWarn, channel fail, %{public}d channelDict, %{public}p, channelNumber, %{public}p, #CloneMe",  &v23,  v18);
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::enableDefaultWsbProfile(BOOL, BOOL)", "%s\n", v13);
        }
      }

      else
      {
        CFDictionaryAddValue(v8, @"CHANNEL", v9);
        CFArrayAppendValue(Mutable, v8);
      }

      CFRelease(v8);
      CFRelease(v10);
      ++v6;
      int v7 = valuePtr;
    }

    int valuePtr = v7 + 1;
  }

  while (v7++ < 13);
  CFDictionarySetValue(theDict, @"SCAN_CHANNELS", Mutable);
  if (a2) {
    CFBooleanRef v15 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v15 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(theDict, @"BGSCAN_CACHE_WSB_ROLLOVER", v15);
  WiFiManagerClientSetBGScanCacheState(*(void *)(a1 + 304), theDict);
  CFRelease(Mutable);
  CFRelease(theDict);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  uint64_t v16 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67240192;
    int v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "@WsbReg, enable, chs, %{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    int v23 = 67240192;
    int v24 = v6;
    LODWORD(v18) = 8;
    int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WsbReg, enable, chs, %{public}d",  &v23,  v18);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::enableDefaultWsbProfile(BOOL, BOOL)", "%s\n", v17);
  }

void sub_10033A5B0(uint64_t a1, int a2)
{
  if (!sub_1002E52D8(a1 + 824))
  {
    sub_1012357A8();
    __break(1u);
    goto LABEL_76;
  }

  p_dst = &__dst;
  if (*(void *)(a1 + 248) || *(unsigned __int8 *)(a1 + 246) == a2)
  {
    uint64_t p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934860 == -1)
    {
LABEL_5:
      int v6 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
      {
        std::string::size_type v7 = *(void *)(a1 + 248);
        int v8 = *(unsigned __int8 *)(a1 + 246);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)&p_dst[1].__r_.__value_.__r.__words[1] + 4) = v7;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&p_dst[1].__r_.__value_.__r.__words[2] + 6) = a2;
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "@WsbActive, Skip, networks, %{public}lu, turnOn, %{public}d, isSampleScan, %{public}d",  (uint8_t *)&buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        uint64_t v58 = qword_101934868;
        std::string::size_type v59 = *(void *)(a1 + 248);
        int v60 = *(unsigned __int8 *)(a1 + 246);
        LODWORD(__dst.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)p_dst->__r_.__value_.__r.__words + 4) = v59;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&p_dst->__r_.__value_.__r.__words[1] + 6) = a2;
        WORD1(__dst.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(__dst.__r_.__value_.__r.__words[2]) = v60;
        int v61 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v58,  1LL,  "@WsbActive, Skip, networks, %{public}lu, turnOn, %{public}d, isSampleScan, %{public}d",  &__dst,  24);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::programSampleNetworks(BOOL)",  "%s\n",  (const char *)v61);
        if (v61 != &buf) {
          free(v61);
        }
      }

      return;
    }

void sub_10033B104( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char **a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, char *a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  a23 = &a29;
  sub_100023498((void ***)&a23);
  a29 = &a32;
  sub_100023498((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t **sub_10033B1D0(uint64_t **a1, int *a2)
{
  CFIndex v4 = a1 + 1;
  int v3 = a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (uint64_t **)v3;
        int v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7) {
          break;
        }
        int v3 = *v6;
        CFIndex v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }

      if (v7 >= v5) {
        break;
      }
      int v3 = v6[1];
      if (!v3)
      {
        CFIndex v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    int v6 = a1 + 1;
LABEL_9:
    int v8 = operator new(0x30uLL);
    _WORD v8[8] = v5;
    *((void *)v8 + 5) = 0LL;
    sub_1000085FC(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    int v6 = (uint64_t **)v8;
  }

  return v6 + 5;
}

NSDictionary *sub_10033B278(uint64_t a1)
{
  v4[0] = @"active";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  _DWORD v3[2] = @"duration";
  _DWORD v4[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

uint64_t sub_10033B334(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  int v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3);
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3LL * ((a3[1] - *a3) >> 3);
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v21 = v8;
    __int16 v22 = 2048;
    uint64_t v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "setExitAndEntryScanNetworks, entry, %lu, exit, %lu",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v13 = 0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3);
    uint64_t v14 = 0x2E8BA2E8BA2E8BA3LL * ((a3[1] - *a3) >> 3);
    int v16 = 134218240;
    uint64_t v17 = v13;
    __int16 v18 = 2048;
    uint64_t v19 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "setExitAndEntryScanNetworks, entry, %lu, exit, %lu",  &v16,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::setExitAndEntryScanNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, const std::v ector<CLWifiService_Type::AccessPoint> &)",  "%s\n",  v15);
  }

  double v10 = *(const void **)(a1 + 528);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 528) = 0LL;
  }

  BOOL v11 = *(const void **)(a1 + 520);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 520) = 0LL;
  }

  if (sub_10034CDF0(a1, a2, (CFTypeRef *)(a1 + 520), 1)
    && sub_10034CDF0(a1, a3, (CFTypeRef *)(a1 + 528), 0))
  {
    sub_100347224(a1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

void sub_10033B5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

BOOL sub_10033B61C(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray)
  {
    int v57 = 0;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_147;
  }

  memset(&__p, 0, sizeof(__p));
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    int v57 = 0;
    goto LABEL_147;
  }

  CFIndex v4 = 0LL;
  int v57 = 0;
  theArraya = theArray;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArraya, v4);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0LL;
    }

    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      __p.__r_.__value_.__s.__size_ = 0;
    }

    Property = (const __CFString *)WiFiNetworkGetProperty(ValueAtIndex, @"BSSID");
    if (!Property || !sub_1002AA05C(Property, &__p)) {
      break;
    }
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      break;
    }
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v8 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136381187;
      *(void *)&uint8_t buf[4] = p_p;
      *(_WORD *)&_BYTE buf[12] = 1026;
      *(_DWORD *)&_BYTE buf[14] = v4;
      *(_WORD *)&buf[18] = 2050;
      *(void *)&_BYTE buf[20] = Count;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "@WsbActive, network, %{private}s, %{public}d, %{public}ld",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      uint64_t v48 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v69 = 136381187;
      *(void *)&v69[4] = v48;
      *(_WORD *)&v69[12] = 1026;
      *(_DWORD *)&v69[14] = v4;
      *(_WORD *)&v69[18] = 2050;
      *(void *)&v69[20] = Count;
      LODWORD(v54) = 28;
      uint64_t v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbActive, network, %{private}s, %{public}d, %{public}ld",  v69,  v54);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v49);
      if (v49 != buf) {
        free(v49);
      }
    }

    uint64_t v10 = 0LL;
    BOOL v11 = (uint64_t *)(a1 + 256);
    do
    {
      sub_1007EC454((std::string *)buf);
      int v12 = buf[23];
      uint64_t v13 = *(void **)buf;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v14 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v15 = &__p;
      }
      else {
        int v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (buf[23] >= 0) {
        size_t v16 = buf[23];
      }
      else {
        size_t v16 = *(void *)&buf[8];
      }
      if (buf[23] >= 0) {
        uint64_t v17 = buf;
      }
      else {
        uint64_t v17 = *(_BYTE **)buf;
      }
      if (v16 >= v14) {
        size_t v18 = v14;
      }
      else {
        size_t v18 = v16;
      }
      BOOL v19 = memcmp(v15, v17, v18) == 0;
      BOOL v20 = v16 == v14 && v19;
      if (v12 < 0)
      {
        operator delete(v13);
        if (!v20) {
          goto LABEL_108;
        }
      }

      else if (!v20)
      {
        goto LABEL_108;
      }

      int v21 = rand();
      if (v21 == -1) {
        int v22 = 0;
      }
      else {
        int v22 = v21;
      }
      int v23 = *(_DWORD *)(a1 + 280);
      *(_DWORD *)(a1 + 280) = v23 + 1;
      if ((v23 & 1) != 0) {
        int v24 = "56:78";
      }
      else {
        int v24 = "12:34";
      }
      sub_1010DDBC0(v69, v24);
      std::to_string(&v61, (v22 >> 6) % 99);
      if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v61;
      }
      else {
        v25.__i_ = (std::__wrap_iter<const char *>::iterator_type)v61.__r_.__value_.__r.__words[0];
      }
      std::string::insert(&v61, v25, 58);
      std::string v62 = v61;
      memset(&v61, 0, sizeof(v61));
      std::string::push_back(&v62, 58);
      std::string v63 = v62;
      memset(&v62, 0, sizeof(v62));
      std::to_string(&v60, (v22 >> 4) % 99);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v26 = &v60;
      }
      else {
        std::string::size_type v26 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v27 = v60.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v27 = v60.__r_.__value_.__l.__size_;
      }
      char v28 = std::string::append(&v63, (const std::string::value_type *)v26, v27);
      __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0LL;
      v28->__r_.__value_.__l.__cap_ = 0LL;
      v28->__r_.__value_.__r.__words[0] = 0LL;
      std::string::push_back(&v64, 58);
      std::string v65 = v64;
      memset(&v64, 0, sizeof(v64));
      std::to_string(&v59, (v22 >> 2) % 99);
      if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v30 = &v59;
      }
      else {
        int v30 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v31 = v59.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v31 = v59.__r_.__value_.__l.__size_;
      }
      unint64_t v32 = std::string::append(&v65, (const std::string::value_type *)v30, v31);
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      std::string::push_back(&v66, 58);
      std::string v68 = v66;
      memset(&v66, 0, sizeof(v66));
      std::to_string(&v58, v22 % 99);
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v34 = &v58;
      }
      else {
        unint64_t v34 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v35 = v58.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v35 = v58.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v68, (const std::string::value_type *)v34, v35);
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(void *)&uint8_t buf[16] = v36->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string buf = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      if (buf[23] >= 0) {
        unint64_t v38 = buf;
      }
      else {
        unint64_t v38 = *(const std::string::value_type **)buf;
      }
      if (buf[23] >= 0) {
        std::string::size_type v39 = buf[23];
      }
      else {
        std::string::size_type v39 = *(void *)&buf[8];
      }
      std::string::append((std::string *)v69, v38, v39);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t *v11 = sub_1007EBE44((uint64_t *)v69);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      int v40 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC454(&v68);
        std::string::size_type v41 = &v68;
        if ((v68.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string::size_type v41 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        int v42 = *(_DWORD *)(a1 + 280);
        *(_DWORD *)std::string buf = 67175171;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)&uint8_t buf[8] = 2081;
        *(void *)&buf[10] = v41;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&_BYTE buf[20] = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "@WsbActive, Match, %{private}d, newmac, %{private}s, matches, %{public}d, #CloneMe",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        uint64_t v43 = qword_101934868;
        sub_1007EC454(&v66);
        char v44 = &v66;
        if ((v66.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          char v44 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        int v45 = *(_DWORD *)(a1 + 280);
        LODWORD(v68.__r_.__value_.__l.__data_) = 67175171;
        HIDWORD(v68.__r_.__value_.__r.__words[0]) = v10;
        LOWORD(v68.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v44;
        WORD1(v68.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(v68.__r_.__value_.__r.__words[2]) = v45;
        LODWORD(v54) = 24;
        int v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v43,  0LL,  "@WsbActive, Match, %{private}d, newmac, %{private}s, matches, %{public}d, #CloneMe",  &v68,  v54);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v46);
        if (v46 != buf) {
          free(v46);
        }
      }

      if ((v69[23] & 0x80000000) != 0) {
        operator delete(*(void **)v69);
      }
      ++v57;
LABEL_108:
      ++v10;
      ++v11;
    }

    while (v10 != 3);
    if (v57)
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      __int16 v47 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "WsbClients, status, samplematch, %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        *(_DWORD *)uint64_t v69 = 67240192;
        *(_DWORD *)&v69[4] = v57;
        LODWORD(v54) = 8;
        int v50 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbClients, status, samplematch, %{public}d",  v69,  v54);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v50);
        if (v50 != buf) {
          free(v50);
        }
      }
    }

    if (++v4 == Count) {
      goto LABEL_147;
    }
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  int v51 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = Count;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "@WsbActive, network, invalid, %{public}d, %{public}ld",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    *(_DWORD *)uint64_t v69 = 67240448;
    *(_DWORD *)&v69[4] = v4;
    *(_WORD *)&v69[8] = 2050;
    *(void *)&v69[10] = Count;
    LODWORD(v54) = 18;
    std::string::size_type v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WsbActive, network, invalid, %{public}d, %{public}ld",  v69,  v54);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v52);
    if (v52 != buf) {
      free(v52);
    }
  }

void sub_10033C1AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10033C31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiManagerBackgroundScanCacheCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2082;
      BOOL v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiManagerBackgroundScanCacheCallback, event:%{public, location:e scape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v13 = 0;
  }

  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100351780;
  v11[3] = &unk_101832DF8;
  _DWORD v11[4] = a4;
  void v11[5] = a1;
  void v11[6] = a2;
  v11[7] = a3;
  [v10 sync:v11];
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_10033C514( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033C534(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10033C568(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 + 103;
  int v23 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v24 = 256;
  uint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientAttachedCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  int v7 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v31 = 2082;
    unint64_t v32 = "";
    __int16 v33 = 2082;
    unint64_t v34 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientAttachedCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  if (a3)
  {
    if (a1[39])
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v8 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        InterfaceName = (const __CFString *)WiFiDeviceClientGetInterfaceName(a1[39]);
        id v10 = buf;
        sub_1002A6C50(InterfaceName, (std::string *)buf);
        if (SBYTE3(v34) < 0) {
          id v10 = *(uint8_t **)buf;
        }
        BOOL v11 = (const __CFString *)WiFiDeviceClientGetInterfaceName(a3);
        sub_1002A6C50(v11, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(v25.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
        WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, prefer existing device, %s, ignoring %s",  (uint8_t *)&v25,  0x16u);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_38;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v13 = qword_101934858;
      std::string::size_type v14 = (const __CFString *)WiFiDeviceClientGetInterfaceName(a1[39]);
      int v15 = &__p;
      sub_1002A6C50(v14, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      __int16 v16 = (const __CFString *)WiFiDeviceClientGetInterfaceName(a3);
      sub_1002A6C50(v16, &v25);
      if ((v25.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v17 = &v25;
      }
      else {
        uint64_t v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      int v26 = 136315394;
      std::string::size_type v27 = v15;
      __int16 v28 = 2080;
      __int128 v29 = v17;
      __int16 v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  0LL,  "WifiMgr, prefer existing device, %s, ignoring %s",  (const char *)&v26,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientAttachedCallback(WiFiManagerClientRef, WiFiDeviceClientRef)",  "%s\n",  v18);
LABEL_45:
      free(v18);
      goto LABEL_38;
    }

    sub_1003340E0(a1);
    if (a1[39] && a1[38])
    {
      sub_100335B3C((uint64_t)a1, 1, 1);
      *(_DWORD *)std::string buf = 0;
      (*(void (**)(void *, uint8_t *, void, uint64_t))(*a1 + 144LL))(a1, buf, 0LL, 0xFFFFFFFFLL);
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    BOOL v19 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "WifiMgr, onWifiDeviceClientAttachedCallback, NULL device",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      __int16 v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, onWifiDeviceClientAttachedCallback, NULL device",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientAttachedCallback(WiFiManagerClientRef, WiFiDeviceClientRef)",  "%s\n",  v18);
    }
  }

void sub_10033CA84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, os_activity_scope_state_s state, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
}

uint64_t sub_10033CAF0(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v20 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v21 = 256;
  int v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientPowerCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  CFIndex v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v24 = 2082;
    std::string v25 = "";
    __int16 v26 = 2082;
    std::string::size_type v27 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientPowerCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_1000C6A74(a1 + 544, (uint64_t)&byte_1019A18B0);
  char v13 = 0;
  char v16 = 0;
  __int16 v12 = -256;
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0LL;
  if ((sub_10033CF94(a1, (BOOL *)&v12) & 1) != 0)
  {
    *(_BYTE *)(a1 + 536) = v12;
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 536);
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, onWiFiDeviceClientPowerCallback, fIsWifiPowered, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v9 = *(unsigned __int8 *)(a1 + 536);
      v22[0] = 67240192;
      v22[1] = v9;
      id v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, onWiFiDeviceClientPowerCallback, fIsWifiPowered, %{public}d",  v22,  8);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientPowerCallback(WiFiDeviceClientRef)",  "%s\n",  v10);
    }

    sub_1003391D4(a1);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "WifiService, could not retrieve power state",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v22[0]) = 0;
      BOOL v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, could not retrieve power state",  v22,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientPowerCallback(WiFiDeviceClientRef)",  "%s\n",  v11);
    }

    *(_BYTE *)(a1 + 536) = v12;
  }

  *(void *)std::string buf = (char *)v17 + 8;
  sub_100023498((void ***)buf);
  if (v16 && v15 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_10033CF50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, os_activity_scope_state_s state, char a31)
{
}

uint64_t sub_10033CF94(uint64_t a1, BOOL *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  if (*(void *)(a1 + 296))
  {
    if (*(void *)(a1 + 312))
    {
      BOOL v5 = WiFiDeviceClientGetPower() != 0;
      *a2 = v5;
      *(_BYTE *)(a1 + 536) = v5;
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v6 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(unsigned __int8 *)(a1 + 536);
        *(_DWORD *)std::string buf = 67240192;
        int v18 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, WiFiDeviceClientGetPower, %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        int v12 = *(unsigned __int8 *)(a1 + 536);
        v16[0] = 67240192;
        v16[1] = v12;
        char v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, WiFiDeviceClientGetPower, %{public}d",  v16,  8);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v13);
      }

      uint64_t v8 = 1LL;
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      id v10 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "WifiService, queryPowerState, fWifiDevice is NULL",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        LOWORD(v16[0]) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiService, queryPowerState, fWifiDevice is NULL",  v16,  2);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v15);
      }

      uint64_t v8 = 0LL;
      *(_BYTE *)(a1 + 536) = 0;
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "WifiService, queryPowerState, fDpcSource is NULL",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v16[0]) = 0;
      std::string::size_type v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiService, queryPowerState, fDpcSource is NULL",  v16,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v14);
    }

    uint64_t v8 = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v8;
}

void sub_10033D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10033D448(double *a1)
{
  uint64_t v2 = a1 + 103;
  int v7 = a1 + 103;
  (*(void (**)(void *))(*((void *)a1 + 103) + 16LL))((void *)a1 + 103);
  __int16 v8 = 256;
  int v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientResumeScanCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    std::string::size_type v14 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientResumeScanCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_10033D610((uint64_t)a1);
  if (a1[49] >= 0.0) {
    a1[49] = -1.0;
  }
  *(_DWORD *)std::string buf = 2;
  (*(void (**)(double *, uint8_t *, void, uint64_t))(*(void *)a1 + 144LL))(a1, buf, 0LL, 0xFFFFFFFFLL);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v2 + 24LL))(v2);
}

void sub_10033D5E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033D610(uint64_t result)
{
  if (!*(_BYTE *)(result + 536))
  {
    uint64_t v1 = result;
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v2 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "WifiService, power mismatch", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      v4[0] = 0;
      int v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "WifiService, power mismatch",  v4,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::handlePowerMismatch()", "%s\n", v3);
    }

    return sub_1003391D4(v1);
  }

  return result;
}

uint64_t sub_10033D7B0(void *a1, uint64_t a2, const __CFDictionary *a3)
{
  BOOL v5 = a1 + 103;
  uint64_t v43 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v44 = 256;
  int v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientLinkExtendedCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  int v7 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(void *)std::string buf = 68289282LL;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&_BYTE buf[20] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientLinkExtendedCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_10033D610((uint64_t)a1);
  __int16 v8 = (const void *)a1[40];
  if (v8)
  {
    CFRelease(v8);
    a1[40] = 0LL;
  }

  if (a3)
  {
    Value = CFDictionaryGetValue(a3, @"LINK_CHANGED_NETWORK");
    a1[40] = Value;
    if (Value) {
      CFRetain(Value);
    }
  }

  sub_100338FE8((uint64_t)a1);
  __int16 v35 = -256;
  LOBYTE(v36[0]) = 0;
  char v39 = 0;
  memset(v40, 0, sizeof(v40));
  uint64_t v41 = 0LL;
  if (sub_10032E334((uint64_t)a1))
  {
    __p.__r_.__value_.__r.__words[0] = qword_1019A1910;
    if (byte_1019A1918[23] < 0)
    {
      sub_1010DD48C( &__p.__r_.__value_.__s.__data_[8],  *(void **)byte_1019A1918,  *(unint64_t *)&byte_1019A1918[8]);
    }

    else
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)byte_1019A1918;
      uint64_t v30 = *(void *)&byte_1019A1918[16];
    }

    __int128 v31 = xmmword_1019A1930;
    __int128 v32 = xmmword_1019A1940;
    __int128 v33 = xmmword_1019A1950;
    uint64_t v34 = qword_1019A1960;
    if ((sub_10033E16C((uint64_t)a1, (uint64_t *)&__p) & 1) == 0)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v10 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "WifiService, linkextend1 failed", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        LOWORD(v45) = 0;
        LODWORD(v28) = 2;
        __int16 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "WifiService, linkextend1 failed",  &v45,  v28,  __p.__r_.__value_.__r.__words[0],  __p.__r_.__value_.__l.__size_,  __p.__r_.__value_.__l.__cap_,  v30);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)",  "%s\n",  v26);
        if (v26 != buf) {
          free(v26);
        }
      }
    }

    sub_1003516E4((uint64_t)v36, (uint64_t)&__p);
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
  }

  BYTE2(v41) = 0;
  if (a3)
  {
    sub_1002A5550((int)&__p, a3);
    sub_1002A6FD4((uint64_t)&__p, (uint64_t)@"LINKDOWN_IS_INVOL", (BOOL *)&v41 + 2);
    if (v39) {
      BOOL v11 = v38 <= 0;
    }
    else {
      BOOL v11 = 1;
    }
    char v12 = !v11;
    HIBYTE(v28) = v12;
    sub_1002A6FD4((uint64_t)&__p, (uint64_t)@"LINK_CHANGED_IS_LINKDOWN", (BOOL *)&v28 + 7);
    if (HIBYTE(v28))
    {
      sub_1000C6A74((uint64_t)v36, (uint64_t)&byte_1019A18B0);
    }

    else if (!v39 || v38 <= 0)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      char v15 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "WifiService, linkextend2 failed", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        LOWORD(v45) = 0;
        LODWORD(v28) = 2;
        std::string::size_type v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "WifiService, linkextend2 failed",  &v45,  v28);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)",  "%s\n",  v27);
        if (v27 != buf) {
          free(v27);
        }
      }
    }

    sub_1002B024C((uint64_t)&__p, "linkChangedEventDataDict");
    sub_1002A5590(&__p);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v13 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "WifiMgr, onWiFiDeviceClientLinkExtendedCallback, linkChangedEventDataDict null",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v28) = 2;
      std::string::size_type v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, onWiFiDeviceClientLinkExtendedCallback, linkChangedEventDataDict null",  &__p,  v28);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)",  "%s\n",  v14);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  memset(&__p, 0, sizeof(__p));
  if (v39 && v38 >= 1)
  {
    uint64_t v45 = v36[0];
    sub_1007EC454((std::string *)buf);
    std::string __p = *(std::string *)buf;
    int v16 = v38;
  }

  else
  {
    int v16 = DWORD2(xmmword_1019A1930);
    std::string::assign(&__p, "N/A");
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v17 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    if (v39) {
      BOOL v18 = v38 <= 0;
    }
    else {
      BOOL v18 = 1;
    }
    int v19 = !v18;
    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 67240707;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 2081;
    *(void *)&buf[10] = p_p;
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&_BYTE buf[20] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "@ClxLink, associate, %{public}d, %{private}s, %{private}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    if (v39) {
      BOOL v22 = v38 <= 0;
    }
    else {
      BOOL v22 = 1;
    }
    int v23 = !v22;
    __int16 v24 = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v45) = 67240707;
    HIDWORD(v45) = v23;
    __int16 v46 = 2081;
    __int16 v47 = v24;
    __int16 v48 = 1025;
    int v49 = v16;
    LODWORD(v28) = 24;
    std::string v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@ClxLink, associate, %{public}d, %{private}s, %{private}d",  &v45,  v28);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)",  "%s\n",  v25);
    if (v25 != buf) {
      free(v25);
    }
  }

  *(_DWORD *)std::string buf = 6;
  (*(void (**)(void *, _BYTE *, __int16 *, uint64_t, uint64_t, void))(*a1 + 152LL))( a1,  buf,  &v35,  1LL,  0xFFFFFFFFLL,  0LL);
  *(void *)std::string buf = &v40[8];
  sub_100023498((void ***)buf);
  if (v39 && v37 < 0) {
    operator delete((void *)v36[1]);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v5 + 24LL))(v5);
}

void sub_10033E0D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, os_activity_scope_state_s state, char a47)
{
}

uint64_t sub_10033E16C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v33 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v34 = 256;
  if (!*(void *)(a1 + 312) || !*(void *)(a1 + 304))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    BOOL v11 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = *(void *)(a1 + 312) == 0LL;
      BOOL v13 = *(void *)(a1 + 304) == 0LL;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)int v40 = v12;
      *(_WORD *)&v40[4] = 1026;
      *(_DWORD *)&v40[6] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, getAssoc, fail, device, %{public}d, manager, %{public}d",  buf,  0xEu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    BOOL v14 = *(void *)(a1 + 312) == 0LL;
    BOOL v15 = *(void *)(a1 + 304) == 0LL;
    LODWORD(v35.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(v35.__r_.__value_.__r.__words[0]) = v14;
    LOWORD(v35.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[1] + 2) = v15;
    int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, getAssoc, fail, device, %{public}d, manager, %{public}d",  &v35,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const",  "%s\n",  v16);
    goto LABEL_39;
  }

  if (!*(_BYTE *)(a1 + 632) || *(int *)(a1 + 584) < 1)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v17 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "WifiMgr, getAssoc, fail, no association",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    LOWORD(v35.__r_.__value_.__l.__data_) = 0;
    int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "WifiMgr, getAssoc, fail, no association",  &v35,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const",  "%s\n",  v16);
LABEL_39:
LABEL_25:
    uint64_t v18 = 0LL;
    goto LABEL_26;
  }

  *a2 = *(void *)(a1 + 544);
  BOOL v5 = a2 + 1;
  std::string::operator=((std::string *)(a2 + 1), (const std::string *)(a1 + 552));
  __int128 v6 = *(_OWORD *)(a1 + 576);
  __int128 v7 = *(_OWORD *)(a1 + 592);
  __int128 v8 = *(_OWORD *)(a1 + 608);
  a2[10] = *(void *)(a1 + 624);
  *((_OWORD *)a2 + 3) = v7;
  *((_OWORD *)a2 + 4) = v8;
  *((_OWORD *)a2 + 2) = v6;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  int v9 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    __dst[0] = (void *)*a2;
    int v10 = &v35;
    sub_1007EC454(&v35);
    if ((v35.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0)
    {
      sub_1010DD48C(&__p, (void *)a2[1], a2[2]);
    }

    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
      __p.__r_.__value_.__l.__cap_ = a2[3];
    }

    p_p = &__p;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v21 = *((_DWORD *)a2 + 10);
    int v22 = *((_DWORD *)a2 + 8);
    *(_DWORD *)std::string buf = 136381443;
    *(void *)int v40 = v10;
    *(_WORD *)&v40[8] = 2081;
    uint64_t v41 = p_p;
    __int16 v42 = 1026;
    int v43 = v21;
    __int16 v44 = 1026;
    int v45 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "WifiMgr, getAssoc, mac, %{private}s, ssid, %{private}s, channel, %{public}d, rssi, %{public}d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v23 = qword_101934858;
    uint64_t v31 = *a2;
    __int16 v24 = &__p;
    sub_1007EC454(&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int16 v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0)
    {
      sub_1010DD48C(__dst, (void *)a2[1], a2[2]);
    }

    else
    {
      *(_OWORD *)std::string __dst = *v5;
      uint64_t v30 = a2[3];
    }

    std::string v25 = __dst;
    if (v30 < 0) {
      std::string v25 = (void **)__dst[0];
    }
    int v26 = *((_DWORD *)a2 + 10);
    int v27 = *((_DWORD *)a2 + 8);
    LODWORD(v35.__r_.__value_.__l.__data_) = 136381443;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    WORD2(v35.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
    HIWORD(v35.__r_.__value_.__r.__words[2]) = 1026;
    int v36 = v26;
    __int16 v37 = 1026;
    int v38 = v27;
    uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "WifiMgr, getAssoc, mac, %{private}s, ssid, %{private}s, channel, %{public}d, rssi, %{public}d",  &v35,  34);
    if (SHIBYTE(v30) < 0) {
      operator delete(__dst[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const",  "%s\n",  v28);
  }

  uint64_t v18 = 1LL;
LABEL_26:
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v18;
}

void sub_10033E7C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1011C52D0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_10033E828(void *a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = a1 + 103;
  __int16 v46 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v47 = 256;
  __int128 v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientBssidChangeCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v7, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  __int128 v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&_BYTE buf[20] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientBssidChangeCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_10033D610((uint64_t)a1);
  sub_100338FE8((uint64_t)a1);
  __int16 v37 = -256;
  v38[0] = 0;
  char v42 = 0;
  memset(v43, 0, sizeof(v43));
  int v9 = &qword_1019A1910;
  uint64_t v44 = 0LL;
  uint64_t v30 = qword_1019A1910;
  if (byte_1019A1918[23] < 0)
  {
    sub_1010DD48C(&v31, *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
  }

  else
  {
    __int128 v31 = *(_OWORD *)byte_1019A1918;
    uint64_t v32 = *(void *)&byte_1019A1918[16];
  }

  __int128 v33 = xmmword_1019A1930;
  __int128 v34 = xmmword_1019A1940;
  __int128 v35 = xmmword_1019A1950;
  uint64_t v36 = qword_1019A1960;
  int v10 = sub_10033E16C((uint64_t)a1, &v30);
  uint64_t v11 = sub_10032E334((uint64_t)a1);
  if (v10 != (_DWORD)v11)
  {
    sub_101235930();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService.mm",  1259,  "onWiFiDeviceClientBssidChangeCallback");
    __break(1u);
LABEL_64:
    dispatch_once(&qword_101934850, &stru_101833558);
    goto LABEL_46;
  }

  int v9 = (uint64_t *)v38;
  if (v10) {
    uint64_t v11 = sub_1003516E4((uint64_t)v38, (uint64_t)&v30);
  }
  if (sub_10033F1A4(v11, a3, (uint64_t)&v30, 0))
  {
    sub_1003516E4((uint64_t)v38, (uint64_t)&v30);
    if (v10)
    {
      Property = (const void *)WiFiNetworkGetProperty(a3, kWiFiNetworkAttributeIsMoving);
      if (Property) {
        BOOL v13 = CFEqual(Property, kCFBooleanTrue) != 0;
      }
      else {
        BOOL v13 = 1;
      }
      BOOL v41 = v13;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v16 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      sub_10099EA10((uint64_t)v38, (std::stringbuf::string_type *)buf);
      uint64_t v17 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__int16 v48 = 136380675;
      *(void *)&v48[4] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, associated state changed to %{private}s",  v48,  0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v25 = qword_101934858;
      sub_10099EA10((uint64_t)v38, (std::stringbuf::string_type *)v48);
      if (SBYTE3(v50) >= 0) {
        int v26 = v48;
      }
      else {
        int v26 = *(_BYTE **)v48;
      }
      LODWORD(__p[0]) = 136380675;
      *(void **)((char *)__p + 4) = v26;
      BOOL v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  0LL,  "WifiMgr, associated state changed to %{private}s",  __p,  12);
      if (SBYTE3(v50) < 0) {
        operator delete(*(void **)v48);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)",  "%s\n",  v15);
      if (v15 != buf) {
LABEL_81:
      }
        free(v15);
    }
  }

  else
  {
    sub_1000C6A74((uint64_t)v38, (uint64_t)&byte_1019A18B0);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    BOOL v14 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "WifiMgr, onWiFiDeviceClientBssidChangeCallback, invalid roam network",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_WORD *)__int16 v48 = 0;
      BOOL v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, onWiFiDeviceClientBssidChangeCallback, invalid roam network",  v48,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)",  "%s\n",  v15);
      if (v15 != buf) {
        goto LABEL_81;
      }
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v56 = 0LL;
  sub_1010DDBC0(v28, "");
  if (v10)
  {
    *(void *)__int16 v48 = v30;
    sub_1007EC360((std::string *)buf);
    if (SHIBYTE(v56) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    uint64_t v56 = *(void *)&buf[16];
    LODWORD(a3) = DWORD2(v33);
    if (SHIBYTE(v32) < 0)
    {
      sub_1010DD48C(buf, (void *)v31, *((unint64_t *)&v31 + 1));
    }

    else
    {
      *(_OWORD *)std::string buf = v31;
      *(void *)&uint8_t buf[16] = v32;
    }

    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    *(_OWORD *)uint64_t v28 = *(_OWORD *)buf;
    uint64_t v29 = *(void *)&buf[16];
    int v3 = v33;
  }

  else
  {
    int v3 = 0;
    LODWORD(a3) = 0;
  }

  if (qword_101934850 != -1) {
    goto LABEL_64;
  }
LABEL_46:
  uint64_t v18 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = __p;
    if (v56 < 0) {
      int v19 = (void **)__p[0];
    }
    uint64_t v20 = v28;
    if (v29 < 0) {
      uint64_t v20 = (void **)v28[0];
    }
    *(_DWORD *)std::string buf = 67110147;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_WORD *)&uint8_t buf[8] = 2081;
    *(void *)&buf[10] = v19;
    *(_WORD *)&buf[18] = 2081;
    *(void *)&_BYTE buf[20] = v20;
    __int16 v58 = 1024;
    int v59 = a3;
    __int16 v60 = 1024;
    int v61 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, roaming, associated, %d, ap, %{private}s, ssid, %{private}s, %d, %d",  buf,  0x28u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v22 = __p;
    if (v56 < 0) {
      int v22 = (void **)__p[0];
    }
    uint64_t v23 = v28;
    if (v29 < 0) {
      uint64_t v23 = (void **)v28[0];
    }
    *(_DWORD *)__int16 v48 = 67110147;
    *(_DWORD *)&v48[4] = v10;
    *(_WORD *)&v48[8] = 2081;
    *(void *)&_BYTE v48[10] = v22;
    __int16 v49 = 2081;
    int v50 = v23;
    __int16 v51 = 1024;
    int v52 = a3;
    __int16 v53 = 1024;
    int v54 = v3;
    LODWORD(v27) = 40;
    __int16 v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, roaming, associated, %d, ap, %{private}s, ssid, %{private}s, %d, %d",  v48,  v27);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)",  "%s\n",  v24);
    if (v24 != buf) {
      free(v24);
    }
  }

  *(_DWORD *)std::string buf = 7;
  (*(void (**)(void *, _BYTE *, __int16 *, void, uint64_t, void))(*a1 + 152LL))( a1,  buf,  &v37,  0LL,  0xFFFFFFFFLL,  0LL);
  sub_1000C6A74((uint64_t)(a1 + 68), (uint64_t)v9);
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  *(void *)std::string buf = &v43[8];
  sub_100023498((void ***)buf);
  if (v42 && v40 < 0) {
    operator delete(v39);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v6 + 24LL))(v6);
}

void sub_10033F0F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, os_activity_scope_state_s state, char a50)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_100339720((uint64_t)&a31);
  os_activity_scope_leave(&state);
  sub_1011C52D0((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_10033F1A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a3 = qword_1019A1910;
  uint64_t v120 = a3 + 8;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)&qword_1019A1918);
  __int128 v8 = xmmword_1019A1940;
  __int128 v7 = xmmword_1019A1950;
  __int128 v9 = xmmword_1019A1930;
  *(void *)(a3 + 80) = qword_1019A1960;
  *(_OWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + memset(&buf[7], 0, 32) = v9;
  memset(&v130, 0, sizeof(v130));
  Property = (const __CFString *)WiFiNetworkGetProperty(a2, @"BSSID");
  if (!Property || !sub_1002AA05C(Property, &v130)) {
    goto LABEL_6;
  }
  std::string::size_type size = v130.__r_.__value_.__s.__size_;
  if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v130.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_6:
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    BOOL v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      BOOL v13 = &v130;
      if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        BOOL v13 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "WifiMgr, error, bssid invalid, %{private}s, #CloneMe",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      __int16 v85 = &v130;
      if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v85 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      int v131 = 136380675;
      __int128 v132 = v85;
      int v86 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, error, bssid invalid, %{private}s, #CloneMe",  &v131,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const",  "%s\n",  v86);
      if (v86 != buf) {
        free(v86);
      }
    }
  }

  int v14 = *(_DWORD *)(a3 + 32);
  int v15 = *(_DWORD *)(a3 + 36);
  int v128 = *(_DWORD *)(a3 + 40);
  int v129 = v15;
  memset(&v127, 0, sizeof(v127));
  int v126 = v14;
  double v125 = *(double *)(a3 + 48);
  HIDWORD(v121) = *(unsigned __int8 *)(a3 + 65);
  int v124 = *(_DWORD *)(a3 + 68);
  int v16 = (const void *)WiFiNetworkGetProperty(a2, @"AP_MODE");
  if (!v16 || (sub_1002A96F8(v16, &v129) & 1) == 0) {
    int v129 = -1;
  }
  uint64_t v17 = (const void *)WiFiNetworkGetProperty(a2, @"CHANNEL");
  if (!v17 || (sub_1002A96F8(v17, &v128) & 1) == 0) {
    int v128 = -1;
  }
  uint64_t v18 = (const __CFString *)WiFiNetworkGetProperty(a2, @"SSID_STR");
  if (!v18 || !sub_1002AA05C(v18, &v127))
  {
    if ((char)v127.__r_.__value_.__s.__size_ < 0)
    {
      *v127.__r_.__value_.__l.__data_ = 0;
      v127.__r_.__value_.__l.__size_ = 0LL;
    }

    else
    {
      v127.__r_.__value_.__s.__data_[0] = 0;
      v127.__r_.__value_.__s.__size_ = 0;
    }
  }

  int v19 = (const void *)WiFiNetworkGetProperty(a2, @"RSSI");
  if (!v19 || (sub_1002A96F8(v19, &v126) & 1) == 0) {
    int v126 = -1;
  }
  uint64_t v20 = (const void *)WiFiNetworkGetProperty(a2, @"AGE");
  double v21 = -1.0;
  double v125 = v21;
  int IsApplePersonalHotspot = WiFiNetworkIsApplePersonalHotspot(a2);
  if (v129 != -1 || v128 != -1)
  {
    std::string::size_type v25 = v130.__r_.__value_.__s.__size_;
    if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v25 = v130.__r_.__value_.__l.__size_;
    }
    if (!v25) {
      goto LABEL_45;
    }
    if (v128 >= 1)
    {
LABEL_49:
      int v26 = 0;
      BOOL v27 = v128 < 0xA6;
      goto LABEL_51;
    }

void sub_10034039C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100340410(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 824;
  uint64_t v16 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v17 = 256;
  __int128 v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientBgScanSuspendResumeCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  __int128 v7 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v22 = 0;
    __int16 v23 = 2082;
    std::string::size_type v24 = "";
    __int16 v25 = 2082;
    int v26 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientBgScanSuspendResumeCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
  }

  __int128 v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v9 = *(const char **)(a1 + 400);
    *(_DWORD *)std::string buf = 67240448;
    int v22 = a3;
    __int16 v23 = 2050;
    std::string::size_type v24 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, resume, %{public}d, timestamp, %{public}.1f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v13 = *(void *)(a1 + 400);
    v18[0] = 67240448;
    v18[1] = a3;
    __int16 v19 = 2050;
    uint64_t v20 = v13;
    int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, resume, %{public}d, timestamp, %{public}.1f",  v18,  18);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback(WiFiDeviceClientRef, Boolean)",  "%s\n",  v14);
  }

  double v10 = *(double *)(a1 + 400);
  if (a3)
  {
    if (v10 < 0.0)
    {
      double Current = CFAbsoluteTimeGetCurrent();
LABEL_13:
      *(double *)(a1 + 400) = Current;
    }
  }

  else
  {
    double Current = -1.0;
    if (v10 >= 0.0) {
      goto LABEL_13;
    }
  }

  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
}

void sub_100340704( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
}

uint64_t sub_100340734(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v5 = a1 + 824;
  uint64_t v37 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v38 = 256;
  __int128 v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientRegisterLQMCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  __int128 v7 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)uint64_t v44 = 0;
    *(_WORD *)&v44[4] = 2082;
    *(void *)&v44[6] = "";
    *(_WORD *)&v44[14] = 2082;
    *(void *)&v44[16] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientRegisterLQMCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_10033D610(a1);
  if (a3)
  {
    Value = (void *)CFDictionaryGetValue(a3, @"RSSI");
    __int128 v9 = (void *)CFDictionaryGetValue(a3, @"LQMTIMESTAMP");
    if (*(_BYTE *)(a1 + 632) && *(int *)(a1 + 584) >= 1 && Value)
    {
      double v10 = v9;
      *(_DWORD *)(a1 + 576) = [Value intValue];
      double Current = CFAbsoluteTimeGetCurrent();
      if (v10)
      {
        objc_msgSend(v10, "timeIntervalSinceReferenceDate", Current);
        double v13 = v12;
      }

      else
      {
        double v13 = Current;
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v18 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "WifiMgr, LQM notification handling error: timestamp missing, use current system time",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          BOOL v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, LQM notification handling error: timestamp missing, use current system time",  &v39,  2);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)",  "%s\n",  v27);
        }
      }

      *(double *)(a1 + 600) = v13;
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      __int16 v19 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        __dst[0] = *(void **)(a1 + 544);
        uint64_t v20 = &v39;
        sub_1007EC360(&v39);
        if ((v39.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v20 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        else {
          std::string __p = *(std::string *)(a1 + 552);
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v22 = *(_DWORD *)(a1 + 576);
        uint64_t v23 = *(void *)(a1 + 600);
        *(_DWORD *)std::string buf = 136381443;
        *(void *)uint64_t v44 = v20;
        *(_WORD *)&v44[8] = 2081;
        *(void *)&v44[10] = p_p;
        *(_WORD *)&v44[18] = 1026;
        *(_DWORD *)&v44[20] = v22;
        __int16 v45 = 2050;
        uint64_t v46 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "WifiMgr, update associated rssi via LQM, mac, %{private}s, ssid, %{private}s, rssi, %{public}d, ts, %{public}.1lf",  buf,  0x26u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v25 = qword_101934858;
        uint64_t v34 = *(void *)(a1 + 544);
        int v26 = &__p;
        sub_1007EC360(&__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (*(char *)(a1 + 575) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(a1 + 552), *(void *)(a1 + 560));
        }

        else
        {
          *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 552);
          uint64_t v33 = *(void *)(a1 + 568);
        }

        std::string::size_type v28 = __dst;
        if (v33 < 0) {
          std::string::size_type v28 = (void **)__dst[0];
        }
        int v29 = *(_DWORD *)(a1 + 576);
        uint64_t v30 = *(void *)(a1 + 600);
        LODWORD(v39.__r_.__value_.__l.__data_) = 136381443;
        *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
        WORD2(v39.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
        HIWORD(v39.__r_.__value_.__r.__words[2]) = 1026;
        int v40 = v29;
        __int16 v41 = 2050;
        uint64_t v42 = v30;
        LODWORD(v31) = 38;
        __int16 v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  2LL,  "WifiMgr, update associated rssi via LQM, mac, %{private}s, ssid, %{private}s, rssi, %{public}d, ts, %{public}.1lf",  &v39,  v31);
        if (SHIBYTE(v33) < 0) {
          operator delete(__dst[0]);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)",  "%s\n",  v17);
        if (v17 != (char *)buf) {
LABEL_63:
        }
          free(v17);
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v14 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        int v15 = *(unsigned __int8 *)(a1 + 632);
        if (*(_BYTE *)(a1 + 632)) {
          int v15 = *(_DWORD *)(a1 + 584) > 0;
        }
        *(_DWORD *)std::string buf = 67240449;
        *(_DWORD *)uint64_t v44 = Value == 0LL;
        *(_WORD *)&v44[4] = 1025;
        *(_DWORD *)&v44[6] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "WifiMgr, LQM notification handling error: rssi value is null - %{public}d; isAssociated - %{private}d",
          buf,
          0xEu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        int v16 = *(unsigned __int8 *)(a1 + 632);
        if (*(_BYTE *)(a1 + 632)) {
          int v16 = *(_DWORD *)(a1 + 584) > 0;
        }
        LODWORD(v39.__r_.__value_.__l.__data_) = 67240449;
        HIDWORD(v39.__r_.__value_.__r.__words[0]) = Value == 0LL;
        LOWORD(v39.__r_.__value_.__r.__words[1]) = 1025;
        *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[1] + 2) = v16;
        __int16 v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, LQM notification handling error: rssi value is null - %{public}d; isAssociated - %{private}d",
                        &v39,
                        14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)",  "%s\n",  v17);
      }
    }
  }

  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
}

void sub_100340E88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, os_activity_scope_state_s state, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  sub_1011C52D0((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_100340F00(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v7 = -256;
  char v8 = 0;
  char v11 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v13 = 0LL;
  sub_10033D610(a1);
  BYTE3(v13) = a3;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v5 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiMgr, network critical, %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    v14[0] = 67109120;
    v14[1] = a3;
    __int128 v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiMgr, network critical, %d",  v14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback(WiFiDeviceClientRef, BOOL)",  "%s\n",  v6);
  }

  *(_DWORD *)std::string buf = 13;
  (*(void (**)(uint64_t, uint8_t *, __int16 *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  &v7,  1LL,  0xFFFFFFFFLL,  0LL);
  *(void *)std::string buf = (char *)v12 + 8;
  sub_100023498((void ***)buf);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }

void sub_10034112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100341148(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  HIDWORD(v42) = a3;
  uint64_t v43 = sub_10099EBD8(a3);
  if (sub_100E575B0())
  {
    sub_1002A5370(buf);
    LODWORD(v57.__r_.__value_.__l.__data_) = -1171354717 * ((unint64_t)(a2[1] - *a2) >> 3);
    sub_1002AC220((uint64_t)buf, "scanResult", &v57);
    sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
    sub_1002A5590(buf);
  }

  __int16 v7 = a2;
  uint64_t v6 = *a2;
  uint64_t v5 = v7[1];
  int v44 = -1171354717 * ((unint64_t)(v5 - v6) >> 3);
  if (v5 == v6)
  {
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    unsigned int v8 = 0;
  }

  else
  {
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 1;
    do
    {
      if (*(_BYTE *)(a1 + 632) && *(int *)(a1 + 584) >= 1)
      {
        *(void *)std::string buf = *(void *)(a1 + 544);
        v57.__r_.__value_.__r.__words[0] = *(void *)v6;
        BOOL v12 = sub_1007EC0B0(buf, &v57);
      }

      else
      {
        BOOL v12 = 0;
      }

      if (v11 <= sub_100B7E828())
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v13 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          __dst[0] = *(void **)v6;
          sub_1007EC360(&v57);
          if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v14 = &v57;
          }
          else {
            int v14 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(v6 + 31) < 0)
          {
            sub_1010DD48C(&__p, *(void **)(v6 + 8), *(void *)(v6 + 16));
          }

          else
          {
            __int128 v15 = *(_OWORD *)(v6 + 8);
            __p.__r_.__value_.__l.__cap_ = *(void *)(v6 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
          }

          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v17 = *(_DWORD *)(v6 + 32);
          int v18 = *(_DWORD *)(v6 + 36);
          int v19 = *(_DWORD *)(v6 + 40);
          uint64_t v20 = *(void *)(v6 + 48);
          uint64_t v21 = *(void *)(v6 + 56);
          *(_DWORD *)std::string buf = 136448771;
          *(void *)&uint8_t buf[4] = v43;
          __int16 v71 = 2081;
          *(void *)int v72 = v14;
          *(_WORD *)&v72[8] = 1026;
          *(_DWORD *)double v73 = v11;
          *(_WORD *)&v73[4] = 1026;
          *(_DWORD *)uint64_t v74 = v44;
          *(_WORD *)&v74[4] = 2081;
          int v75 = p_p;
          *(_WORD *)std::string::size_type v76 = 1026;
          *(_DWORD *)&_OWORD v76[2] = v17;
          *(_WORD *)unsigned __int8 v77 = 1026;
          *(_DWORD *)&v77[2] = v18;
          *(_WORD *)unsigned __int8 v78 = 1026;
          *(_DWORD *)&v78[2] = v19;
          __int16 v79 = 2050;
          uint64_t v80 = v20;
          __int16 v81 = 2050;
          uint64_t v82 = v21;
          __int16 v83 = 1026;
          BOOL v84 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "WifiScan, result, %{public}s, mac, %{private}s, %{public}d / %{public}d, ssid, %{private}s, rssi, %{public}d , mode, %{public}d, channel, %{public}d, age, %{public}0.1lf, timestamp, %{public}.1lf, associated, %{public}d",  buf,  0x58u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          uint64_t v24 = qword_101934858;
          std::string::size_type v55 = *(void *)v6;
          sub_1007EC360(&__p);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v25 = &__p;
          }
          else {
            uint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(v6 + 31) < 0)
          {
            sub_1010DD48C(__dst, *(void **)(v6 + 8), *(void *)(v6 + 16));
          }

          else
          {
            __int128 v26 = *(_OWORD *)(v6 + 8);
            uint64_t v54 = *(void *)(v6 + 24);
            *(_OWORD *)std::string __dst = v26;
          }

          BOOL v27 = __dst;
          if (v54 < 0) {
            BOOL v27 = (void **)__dst[0];
          }
          int v28 = *(_DWORD *)(v6 + 32);
          int v29 = *(_DWORD *)(v6 + 36);
          int v30 = *(_DWORD *)(v6 + 40);
          uint64_t v31 = *(void *)(v6 + 48);
          uint64_t v32 = *(void *)(v6 + 56);
          LODWORD(v57.__r_.__value_.__l.__data_) = 136448771;
          *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
          WORD2(v57.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v57.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
          HIWORD(v57.__r_.__value_.__r.__words[2]) = 1026;
          *(_DWORD *)int v58 = v11;
          *(_WORD *)&v58[4] = 1026;
          *(_DWORD *)int v59 = v44;
          *(_WORD *)&v59[4] = 2081;
          uint64_t v60 = v27;
          *(_WORD *)uint64_t v61 = 1026;
          *(_DWORD *)&_OWORD v61[2] = v28;
          *(_WORD *)uint64_t v62 = 1026;
          *(_DWORD *)&v62[2] = v29;
          *(_WORD *)std::string::size_type v63 = 1026;
          *(_DWORD *)&v63[2] = v30;
          __int16 v64 = 2050;
          uint64_t v65 = v31;
          __int16 v66 = 2050;
          uint64_t v67 = v32;
          __int16 v68 = 1026;
          BOOL v69 = v12;
          LODWORD(v42) = 88;
          uint64_t v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  2LL,  "WifiScan, result, %{public}s, mac, %{private}s, %{public}d / %{public}d, ssid, %{private}s, rs si, %{public}d, mode, %{public}d, channel, %{public}d, age, %{public}0.1lf, timestamp, %{publi c}.1lf, associated, %{public}d",  &v57,  v42);
          if (SHIBYTE(v54) < 0) {
            operator delete(__dst[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)",  "%s\n",  v33);
          if (v33 != buf) {
            free(v33);
          }
        }
      }

      unint64_t v22 = sub_1005B46E8(v6);
      int v23 = sub_10099EDC8(*(_DWORD *)(v6 + 40));
      v10 += (v22 >> 41) & 1;
      v9 += v23 ^ 1;
      v8 += v23;
      v6 += 88LL;
      ++v11;
    }

    while (v6 != v5);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v34 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v43;
    __int16 v71 = 1026;
    *(_DWORD *)int v72 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "WifiScan, results, %{public}s, %{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    LODWORD(v57.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
    WORD2(v57.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v57.__r_.__value_.__r.__words[1] + 6) = v44;
    LODWORD(v42) = 18;
    int v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiScan, results, %{public}s, %{public}d",  &v57,  v42);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)",  "%s\n",  v40);
    if (v40 != buf) {
      free(v40);
    }
  }

  if (HIDWORD(v42) != 5 || v44 >= 1)
  {
    int v35 = v44;
    if (v44)
    {
      if (v44 == 1)
      {
        int v35 = 1;
      }

      else if (v44 >= 5)
      {
        if (v44 >= 9)
        {
          if (v44 >= 0x11)
          {
            if (v44 >= 0x21)
            {
              else {
                int v35 = 65;
              }
            }

            else
            {
              int v35 = 32;
            }
          }

          else
          {
            int v35 = 16;
          }
        }

        else
        {
          int v35 = 8;
        }
      }

      else
      {
        int v35 = 4;
      }
    }

    int v36 = v8;
    if (v8)
    {
      if (v8 == 1)
      {
        int v36 = 1;
      }

      else if (v8 >= 5)
      {
        if (v8 >= 9)
        {
          if (v8 >= 0x11)
          {
            if (v8 >= 0x21)
            {
              if (v8 < 0x41) {
                int v36 = 64;
              }
              else {
                int v36 = 65;
              }
            }

            else
            {
              int v36 = 32;
            }
          }

          else
          {
            int v36 = 16;
          }
        }

        else
        {
          int v36 = 8;
        }
      }

      else
      {
        int v36 = 4;
      }
    }

    int v37 = v9;
    if (v9)
    {
      if (v9 == 1)
      {
        int v37 = 1;
      }

      else if (v9 >= 5)
      {
        if (v9 >= 9)
        {
          if (v9 >= 0x11)
          {
            if (v9 >= 0x21)
            {
              if (v9 < 0x41) {
                int v37 = 64;
              }
              else {
                int v37 = 65;
              }
            }

            else
            {
              int v37 = 32;
            }
          }

          else
          {
            int v37 = 16;
          }
        }

        else
        {
          int v37 = 8;
        }
      }

      else
      {
        int v37 = 4;
      }
    }

    int v38 = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        int v38 = 1;
      }

      else if (v10 >= 5)
      {
        if (v10 >= 9)
        {
          if (v10 >= 0x11)
          {
            if (v10 >= 0x21)
            {
              if (v10 < 0x41) {
                int v38 = 64;
              }
              else {
                int v38 = 65;
              }
            }

            else
            {
              int v38 = 32;
            }
          }

          else
          {
            int v38 = 16;
          }
        }

        else
        {
          int v38 = 8;
        }
      }

      else
      {
        int v38 = 4;
      }
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    std::string v39 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136448258;
      *(void *)&uint8_t buf[4] = v43;
      __int16 v71 = 1026;
      *(_DWORD *)int v72 = v44;
      *(_WORD *)&v72[4] = 1026;
      *(_DWORD *)&v72[6] = v35;
      *(_WORD *)double v73 = 1026;
      *(_DWORD *)&v73[2] = v8;
      *(_WORD *)uint64_t v74 = 1026;
      *(_DWORD *)&v74[2] = v36;
      LOWORD(v75) = 1026;
      *(_DWORD *)((char *)&v75 + 2) = v9;
      HIWORD(v75) = 1026;
      *(_DWORD *)std::string::size_type v76 = v37;
      *(_WORD *)&v76[4] = 1026;
      *(_DWORD *)unsigned __int8 v77 = v10;
      *(_WORD *)&v77[4] = 1026;
      *(_DWORD *)unsigned __int8 v78 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "WsMetric, scanreply, %{public}s, %{public}d, %{public}d, 2ghz, %{public}d, %{public}d, 5ghz, %{public}d, %{publi c}d, la, %{public}d, %{public}d",  buf,  0x3Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LODWORD(v57.__r_.__value_.__l.__data_) = 136448258;
      *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
      WORD2(v57.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v57.__r_.__value_.__r.__words[1] + 6) = v44;
      WORD1(v57.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v57.__r_.__value_.__r.__words[2]) = v35;
      *(_WORD *)int v58 = 1026;
      *(_DWORD *)&v58[2] = v8;
      *(_WORD *)int v59 = 1026;
      *(_DWORD *)&v59[2] = v36;
      LOWORD(v60) = 1026;
      *(_DWORD *)((char *)&v60 + 2) = v9;
      HIWORD(v60) = 1026;
      *(_DWORD *)uint64_t v61 = v37;
      *(_WORD *)&v61[4] = 1026;
      *(_DWORD *)uint64_t v62 = v10;
      *(_WORD *)&void v62[4] = 1026;
      *(_DWORD *)std::string::size_type v63 = v38;
      LODWORD(v42) = 60;
      __int16 v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WsMetric, scanreply, %{public}s, %{public}d, %{public}d, 2ghz, %{public}d, %{public}d, 5ghz, %{pub lic}d, %{public}d, la, %{public}d, %{public}d",  &v57,  v42);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)",  "%s\n",  v41);
      if (v41 != buf) {
        free(v41);
      }
    }

    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_100341BF0;
    void v45[3] = &unk_101833398;
    v45[4] = v43;
    int v46 = v44;
    int v47 = v35;
    unsigned int v48 = v8;
    int v49 = v36;
    int v50 = v37;
    unsigned int v51 = v10;
    int v52 = v38;
    AnalyticsSendEventLazy(@"com.apple.clx.wifiservice.scanreply", v45);
  }

void sub_100341BA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100341BF0(uint64_t a1)
{
  v4[0] = @"type";
  v5[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  v4[1] = @"aps";
  v5[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  _DWORD v4[2] = @"binAps";
  _OWORD v5[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  void v4[3] = @"aps2GHz";
  void v5[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v4[4] = @"bin2GHz";
  _DWORD v5[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  void v4[5] = @"aps5GHz";
  void v5[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  void v4[6] = @"bin5GHz";
  v5[6] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v4[7] = @"apsLocalAdmin";
  v5[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  _WORD v4[8] = @"binLocalAdmin";
  uint64_t v2 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  v4[9] = @"daily";
  _WORD v5[8] = v2;
  v5[9] = &off_1018D31E8;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  10LL);
}

void sub_100341D70(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, int a5)
{
  unsigned int v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientScanCacheCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  unsigned int v10 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&_BYTE buf[20] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientScanCacheCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  if (!a4 || a5)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v14 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = a5;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "WifiMgr, error, cache callback, %{public}d, %{public}p",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_DWORD *)BOOL v27 = 67240448;
      *(_DWORD *)&v27[4] = a5;
      *(_WORD *)&v27[8] = 2050;
      *(void *)&_BYTE v27[10] = a4;
      __int128 v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiMgr, error, cache callback, %{public}d, %{public}p",  v27,  18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientScanCacheCallback(WiFiDeviceClientRef, CFDictionaryRef, CFArrayRef, WiFiError)",  "%s\n",  v15);
    }
  }

  else
  {
    sub_10033D610(a1);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    unsigned int v11 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
    {
      CFIndex Count = CFArrayGetCount(a4);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)&uint8_t buf[4] = Count;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "WifiMgr, onWiFiDeviceClientScanCacheCallback, %{public}lu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v16 = qword_101934858;
      CFIndex v17 = CFArrayGetCount(a4);
      *(_DWORD *)BOOL v27 = 134349056;
      *(void *)&v27[4] = v17;
      int v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  1LL,  "WifiMgr, onWiFiDeviceClientScanCacheCallback, %{public}lu",  v27,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientScanCacheCallback(WiFiDeviceClientRef, CFDictionaryRef, CFArrayRef, WiFiError)",  "%s\n",  v18);
    }

    uint64_t v23 = a1 + 824;
    (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
    __int16 v25 = 256;
    sub_1002A5550((int)v22, a3);
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_1019942E8);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1019942E8))
    {
      sub_1002F0B04(buf);
      char v19 = sub_1002A6F64(*(uint64_t *)buf, "printScanResultsCSV", v27);
      if (v27[0]) {
        char v20 = v19;
      }
      else {
        char v20 = 0;
      }
      sub_10000AE14((uint64_t)buf);
      byte_1019942E0 = v20;
      __cxa_guard_release(&qword_1019942E8);
    }

    if (byte_1019942E0) {
      sub_1002B024C((uint64_t)v22, "scanResults");
    }
    buf[0] = 5;
    sub_100342464((unsigned int *)(a1 + 756), (char *)buf);
    ++*(_DWORD *)(a1 + 756);
    *(_BYTE *)(a1 + 416) = 5;
    *(CFAbsoluteTime *)(a1 + 424) = CFAbsoluteTimeGetCurrent();
    sub_1000234D8((uint64_t *)(a1 + 432));
    sub_100342998(a1, a4, (double *)(a1 + 384), (uint64_t *)(a1 + 432), (uint64_t)"cache");
    sub_100341148(a1, (uint64_t *)(a1 + 432), *(char *)(a1 + 416));
    if (*(void *)(a1 + 440) != *(void *)(a1 + 432))
    {
      buf[0] = 0;
      uint8_t buf[8] = 0;
      char v31 = 0;
      memset(v32, 0, sizeof(v32));
      uint64_t v33 = 0LL;
      buf[1] = *(_BYTE *)(a1 + 416);
      (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(void *)a1 + 224LL))(a1, &v32[8], v32);
      sub_10032F218(a1, (uint64_t)v27);
      if (v29) {
        sub_1003516E4((uint64_t)&buf[8], (uint64_t)v27);
      }
      int v21 = 3;
      (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v21,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
      [*(id *)(a1 + 656) processEventTime:CFAbsoluteTimeGetCurrent()];
      if (v29 && v28 < 0) {
        operator delete(*(void **)&v27[8]);
      }
      *(void *)BOOL v27 = &v32[8];
      sub_100023498((void ***)v27);
    }

    sub_1002A5590(v22);
    if (HIBYTE(v25))
    {
      if ((_BYTE)v25) {
        pthread_mutex_unlock(v24);
      }
      else {
        (*(void (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1003423AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, int a33, __int16 a34, char a35, char a36)
{
}

void sub_100342464(unsigned int *a1, char *a2)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  uint64_t v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = *a2;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v5;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)sub_10099EBD8(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "WIFI: stats: increment scan, type, %d, %s",  (uint8_t *)buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v12 = qword_101934A78;
    unsigned int v13 = *a2;
    int v14 = sub_10099EBD8(v13);
    LODWORD(v24.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(v24.__r_.__value_.__r.__words[0]) = v13;
    LOWORD(v24.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v24.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v14;
    LODWORD(v23) = 18;
    __int128 v15 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  2LL,  "WIFI: stats: increment scan, type, %d, %s",  &v24,  v23);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)",  "%s\n",  (const char *)v15);
    if (v15 != buf) {
      free(v15);
    }
  }

  uint64_t v6 = *a2;
  if (v6 > 12)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = *a2;
      unsigned int v9 = sub_10099EBD8(v8);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240450;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v8;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "WIFI: stats: unknown scan type, %{public}d, %{public}s",  (uint8_t *)buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v19 = qword_101934858;
      unsigned int v20 = *a2;
      int v21 = sub_10099EBD8(v20);
      LODWORD(v24.__r_.__value_.__l.__data_) = 67240450;
      HIDWORD(v24.__r_.__value_.__r.__words[0]) = v20;
      LOWORD(v24.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v24.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v21;
      LODWORD(v23) = 18;
      unint64_t v22 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  16LL,  "WIFI: stats: unknown scan type, %{public}d, %{public}s",  &v24,  v23);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)",  "%s\n",  (const char *)v22);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

  else
  {
    ++a1[v6 + 3];
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  unsigned int v10 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_10034FDB0(a1, buf);
    unsigned int v11 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
        ? buf
        : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
    LODWORD(v24.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "WIFI: stats: scansStat, %s",  (uint8_t *)&v24,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v16 = qword_101934A78;
    sub_10034FDB0(a1, &v24);
    if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex v17 = &v24;
    }
    else {
      CFIndex v17 = (std::stringbuf::string_type *)v24.__r_.__value_.__r.__words[0];
    }
    int v25 = 136315138;
    __int128 v26 = v17;
    int v18 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "WIFI: stats: scansStat, %s",  (const char *)&v25);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)",  "%s\n",  (const char *)v18);
    if (v18 != buf) {
      free(v18);
    }
  }

uint64_t sub_100342998(uint64_t a1, CFArrayRef theArray, double *a3, uint64_t *a4, uint64_t a5)
{
  unsigned int v51 = a3;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 10001)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      unsigned int v9 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = a5;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&_BYTE buf[14] = Count;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "WifiScan, warning, too many APs returned from wifid. source, %{public}s, APs, %{public}ld",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        *(_DWORD *)std::string::size_type v76 = 136446466;
        *(void *)&v76[4] = a5;
        *(_WORD *)&v76[12] = 2050;
        *(void *)&v76[14] = Count;
        unsigned int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "WifiScan, warning, too many APs returned from wifid. source, %{public}s, APs, %{public}ld",  v76,  22);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::Access Point> &, const char *)",  "%s\n",  v10);
        if (v10 != buf) {
          free(v10);
        }
      }
    }
  }

  else
  {
    CFIndex Count = 0LL;
  }

  __int128 v59 = 0u;
  __int128 v60 = 0u;
  int v61 = 1065353216;
  unsigned int v11 = (void *)*a4;
  uint64_t v12 = (void *)a4[1];
  while (v11 != v12)
  {
    *(void *)std::string buf = *v11;
    sub_1002DFB20((uint64_t)&v59, buf, buf);
    v11 += 11;
  }

  *(double *)&__int128 v13 = CFAbsoluteTimeGetCurrent();
  if (Count >= 1)
  {
    double v14 = *(double *)&v13;
    uint64_t v54 = a1;
    int v49 = a4;
    CFIndex v15 = 0LL;
    uint64_t v53 = 0LL;
    int v16 = 0;
    int v55 = 0;
    int v17 = 0;
    *(void *)&__int128 v13 = 67240451LL;
    __int128 v50 = v13;
    *(void *)&__int128 v13 = 136381187LL;
    __int128 v47 = v13;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
      CFTypeID v19 = CFGetTypeID(ValueAtIndex);
      CFTypeID TypeID = (void *)WiFiNetworkGetTypeID();
      if ((void *)v19 != TypeID)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        int v21 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "WifiScan, failed to retrieve index %{public}d in array",  buf,  8u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          *(_DWORD *)std::string::size_type v76 = 67240192;
          *(_DWORD *)&v76[4] = v15;
          LODWORD(v46) = 8;
          uint64_t v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiScan, failed to retrieve index %{public}d in array",  v76,  v46);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::Acce ssPoint> &, const char *)",  "%s\n",  v32);
          if (v32 != buf) {
            free(v32);
          }
        }

        ++v17;
        goto LABEL_93;
      }

      *(void *)std::string::size_type v76 = qword_1019A1910;
      if (byte_1019A192F < 0)
      {
        CFTypeID TypeID = sub_1010DD48C(&v76[8], (void *)qword_1019A1918, unk_1019A1920);
      }

      else
      {
        *(_OWORD *)&v76[8] = *(_OWORD *)&qword_1019A1918;
        *(void *)&v76[24] = unk_1019A1928;
      }

      *(_OWORD *)unsigned __int8 v77 = xmmword_1019A1930;
      *(_OWORD *)&v77[16] = xmmword_1019A1940;
      __int128 v78 = xmmword_1019A1950;
      uint64_t v79 = qword_1019A1960;
      if ((sub_10033F1A4((uint64_t)TypeID, (uint64_t)ValueAtIndex, (uint64_t)v76, 0) & 1) == 0)
      {
        ++v17;
        goto LABEL_91;
      }

      *(double *)&v77[24] = v14 - *(double *)&v77[16];
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      unint64_t v22 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        __dst[0] = *(void **)v76;
        sub_1007EC454((std::string *)v62);
        if (v62[23] >= 0) {
          uint64_t v23 = v62;
        }
        else {
          uint64_t v23 = *(_BYTE **)v62;
        }
        if ((v76[31] & 0x80000000) != 0) {
          sub_1010DD48C(&__p, *(void **)&v76[8], *(unint64_t *)&v76[16]);
        }
        else {
          std::string __p = *(std::string *)&v76[8];
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67111170;
        *(_DWORD *)&uint8_t buf[4] = v15;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = Count;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v23;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&buf[30] = p_p;
        __int16 v81 = 1024;
        int v82 = *(_DWORD *)v77;
        __int16 v83 = 1024;
        int v84 = *(_DWORD *)&v77[4];
        __int16 v85 = 1024;
        int v86 = *(_DWORD *)&v77[8];
        __int16 v87 = 2048;
        uint64_t v88 = *(void *)&v77[16];
        __int16 v89 = 2048;
        uint64_t v90 = *(void *)&v77[24];
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "WIFI_SCAN: raw scan result, ap, %d, %ld, mac, %-20s, ssid, %-30s, rssi, %+4d, mode, %d, channel, %3d, age, %5. 2lf, timestamp, %.1lf",  buf,  0x4Cu);
        if ((v62[23] & 0x80000000) != 0) {
          operator delete(*(void **)v62);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018335B8);
        }
        uint64_t v33 = qword_101934A78;
        uint64_t v58 = *(void *)v76;
        sub_1007EC454(&__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v34 = &__p;
        }
        else {
          uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v76[31] & 0x80000000) != 0)
        {
          sub_1010DD48C(__dst, *(void **)&v76[8], *(unint64_t *)&v76[16]);
        }

        else
        {
          *(_OWORD *)std::string __dst = *(_OWORD *)&v76[8];
          uint64_t v57 = *(void *)&v76[24];
        }

        int v35 = __dst;
        if (v57 < 0) {
          int v35 = (void **)__dst[0];
        }
        *(_DWORD *)uint64_t v62 = 67111170;
        *(_DWORD *)&void v62[4] = v15;
        *(_WORD *)&v62[8] = 2048;
        *(void *)&v62[10] = Count;
        *(_WORD *)&v62[18] = 2080;
        *(void *)&v62[20] = v34;
        __int16 v63 = 2080;
        __int16 v64 = v35;
        __int16 v65 = 1024;
        int v66 = *(_DWORD *)v77;
        __int16 v67 = 1024;
        int v68 = *(_DWORD *)&v77[4];
        __int16 v69 = 1024;
        int v70 = *(_DWORD *)&v77[8];
        __int16 v71 = 2048;
        uint64_t v72 = *(void *)&v77[16];
        __int16 v73 = 2048;
        uint64_t v74 = *(void *)&v77[24];
        LODWORD(v46) = 76;
        int v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  2LL,  "WIFI_SCAN: raw scan result, ap, %d, %ld, mac, %-20s, ssid, %-30s, rssi, %+4d, mode, %d, channel, %3d, age, %5.2lf, timestamp, %.1lf",  v62,  v46,  (const char *)v47,  *((const char **)&v47 + 1),  v48,  (_DWORD)v49,  (_DWORD)v50,  *((double *)&v50 + 1),  *(double *)&v51);
        if (SHIBYTE(v57) < 0) {
          operator delete(__dst[0]);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::Access Point> &, const char *)",  "%s\n",  v36);
        if (v36 != buf) {
          free(v36);
        }
      }

      if (*(_BYTE *)(v54 + 632))
      {
        if (*(int *)(v54 + 584) >= 1)
        {
          *(void *)std::string buf = *(void *)v76;
          *(void *)uint64_t v62 = *(void *)(v54 + 544);
          if (sub_1007EC0B0(buf, v62))
          {
            *(_DWORD *)(v54 + 576) = *(_DWORD *)v77;
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101833558);
            }
            BOOL v27 = (os_log_s *)qword_101934858;
            if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
            {
              __dst[0] = *(void **)v76;
              sub_1007EC360((std::string *)v62);
              if (v62[23] >= 0) {
                char v28 = v62;
              }
              else {
                char v28 = *(_BYTE **)v62;
              }
              if ((v76[31] & 0x80000000) != 0) {
                sub_1010DD48C(&__p, *(void **)&v76[8], *(unint64_t *)&v76[16]);
              }
              else {
                std::string __p = *(std::string *)&v76[8];
              }
              char v29 = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                char v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = v47;
              *(void *)&uint8_t buf[4] = v28;
              *(_WORD *)&_BYTE buf[12] = 2081;
              *(void *)&_BYTE buf[14] = v29;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&_BYTE buf[24] = *(_DWORD *)v77;
              _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "WifiScan, update associated rssi, mac, %{private}s, ssid, %{private}s, rssi, %{public}d",  buf,  0x1Cu);
              if ((v62[23] & 0x80000000) != 0) {
                operator delete(*(void **)v62);
              }
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_101833558);
              }
              uint64_t v39 = qword_101934858;
              uint64_t v58 = *(void *)v76;
              sub_1007EC360(&__p);
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int v40 = &__p;
              }
              else {
                int v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((v76[31] & 0x80000000) != 0)
              {
                sub_1010DD48C(__dst, *(void **)&v76[8], *(unint64_t *)&v76[16]);
              }

              else
              {
                *(_OWORD *)std::string __dst = *(_OWORD *)&v76[8];
                uint64_t v57 = *(void *)&v76[24];
              }

              __int16 v41 = __dst;
              if (v57 < 0) {
                __int16 v41 = (void **)__dst[0];
              }
              *(_DWORD *)uint64_t v62 = v47;
              *(void *)&void v62[4] = v40;
              *(_WORD *)&v62[12] = 2081;
              *(void *)&v62[14] = v41;
              *(_WORD *)&v62[22] = 1026;
              *(_DWORD *)&v62[24] = *(_DWORD *)v77;
              LODWORD(v46) = 28;
              uint64_t v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  2LL,  "WifiScan, update associated rssi, mac, %{private}s, ssid, %{private}s, rssi, %{public}d",  v62,  v46);
              if (SHIBYTE(v57) < 0) {
                operator delete(__dst[0]);
              }
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type:: AccessPoint> &, const char *)",  "%s\n",  v42);
              if (v42 != buf) {
                free(v42);
              }
            }
          }
        }
      }

      if (byte_101994300)
      {
        *(void *)std::string buf = *(void *)v76;
        if (sub_1007EC0B0(&qword_1019942F8, buf))
        {
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          int v30 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
          {
            sub_1007EC360((std::string *)buf);
            char v31 = buf;
            if (buf[23] < 0) {
              char v31 = *(_BYTE **)buf;
            }
            *(_DWORD *)uint64_t v62 = v50;
            *(_DWORD *)&void v62[4] = v15 + 1;
            *(_WORD *)&v62[8] = 2081;
            *(void *)&v62[10] = v31;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "WifiScan, addAp, %{public}d, excluded, %{private}s",  v62,  0x12u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_84;
          }
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          uint64_t v37 = qword_101934858;
          sub_1007EC360((std::string *)v62);
          int v38 = v62;
          if (v62[23] < 0) {
            int v38 = *(_BYTE **)v62;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = v50;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = v15 + 1;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v38;
          LODWORD(v46) = 18;
          __int128 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v37,  0LL,  "WifiScan, addAp, %{public}d, excluded, %{private}s",  &__p,  v46);
          if ((v62[23] & 0x80000000) != 0) {
            operator delete(*(void **)v62);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::Acce ssPoint> &, const char *)",  "%s\n",  v26);
LABEL_122:
          if (v26 != buf) {
            free(v26);
          }
LABEL_84:
          ++v16;
          goto LABEL_91;
        }
      }

      *(void *)std::string buf = *(void *)v76;
      if (sub_100353A18(&v59, buf))
      {
        ++v55;
      }

      else if (*v51 < 0.0 || *v51 >= *(double *)&v77[16])
      {
        *(void *)std::string buf = *(void *)v76;
        sub_1002DFB20((uint64_t)&v59, buf, buf);
        sub_10034B6AC(v49, (uint64_t)v76);
        LODWORD(v53) = v53 + 1;
      }

      else
      {
        ++HIDWORD(v53);
      }

void sub_100343A7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_100343B34(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4)
{
  uint64_t v7 = a1 + 824;
  uint64_t v46 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v47 = 256;
  unsigned int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiDeviceClientScanCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  unsigned int v9 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v57 = 0;
    __int16 v58 = 2082;
    *(void *)__int128 v59 = "";
    *(_WORD *)&v59[8] = 2082;
    *(void *)&v59[10] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiDeviceClientScanCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_10033D610(a1);
  int v10 = *(char *)(a1 + 233);
  if (!*(_BYTE *)(a1 + 234))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    unsigned int v11 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, Multiple scan callbacks, #CloneMe",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v48) = 0;
      LODWORD(v37) = 2;
      uint64_t v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, Multiple scan callbacks, #CloneMe",  &v48,  v37);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)",  "%s\n",  v34);
    }
  }

  *(_BYTE *)(a1 + 234) = 0;
  uint64_t v38 = qword_1019A1910;
  if (byte_1019A192F < 0)
  {
    sub_1010DD48C(&__p, (void *)qword_1019A1918, unk_1019A1920);
  }

  else
  {
    __int128 __p = *(_OWORD *)&qword_1019A1918;
    uint64_t v40 = unk_1019A1928;
  }

  __int128 v41 = xmmword_1019A1930;
  __int128 v42 = xmmword_1019A1940;
  __int128 v43 = xmmword_1019A1950;
  uint64_t v44 = qword_1019A1960;
  if (a3 && (CFTypeID v12 = CFGetTypeID(a3), v12 == CFArrayGetTypeID()))
  {
    int Count = CFArrayGetCount(a3);
    int v14 = 1;
  }

  else
  {
    int v14 = 0;
    int Count = 0;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  CFIndex v15 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240704;
    int v57 = a4;
    __int16 v58 = 1026;
    *(_DWORD *)__int128 v59 = v14;
    *(_WORD *)&v59[4] = 1026;
    *(_DWORD *)&_BYTE v59[6] = Count;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, onWiFiDeviceClientScanCallback, error, %{public}d, valid, %{public}d, count, %{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    LODWORD(v48) = 67240704;
    HIDWORD(v48) = a4;
    *(_WORD *)int v49 = 1026;
    *(_DWORD *)&_OWORD v49[2] = v14;
    *(_WORD *)&v49[6] = 1026;
    *(_DWORD *)&v49[8] = Count;
    LODWORD(v37) = 20;
    BOOL v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, onWiFiDeviceClientScanCallback, error, %{public}d, valid, %{public}d, count, %{public}d",  &v48,  v37,  v38,  (void)__p,  *((void *)&__p + 1),  v40,  v41,  v42,  v43,  v44);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)",  "%s\n",  v27);
  }

  char v16 = v14 ^ 1;
  if (a4) {
    char v16 = 1;
  }
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a1 + 416) = -1;
    *(void *)(a1 + 424) = 0LL;
    sub_1000234D8((uint64_t *)(a1 + 432));
    *(void *)(a1 + 408) = 0LL;
    if (a4 == 16)
    {
      *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
      *(_DWORD *)(a1 + 752) = 16;
      if (*(double *)(a1 + 392) < 0.0)
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018335B8);
        }
        unint64_t v22 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "recording busy start time as now", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018335B8);
          }
          LOWORD(v48) = 0;
          LODWORD(v37) = 2;
          int v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "recording busy start time as now",  &v48,  v37);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)",  "%s\n",  v36);
        }

        *(CFAbsoluteTime *)(a1 + 392) = CFAbsoluteTimeGetCurrent();
      }

      ++*(_DWORD *)(a1 + 764);
      *(_DWORD *)std::string buf = 5;
      (*(void (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144LL))(a1, buf, 0LL, 0xFFFFFFFFLL);
    }

    else
    {
      *(_DWORD *)std::string buf = 4;
      (*(void (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144LL))(a1, buf, 0LL, 0xFFFFFFFFLL);
      if (a4 == 6)
      {
        *(CFAbsoluteTime *)(a1 + 744) = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)(a1 + 752) = 6;
      }

      ++*(_DWORD *)(a1 + 760);
    }
  }

  else
  {
    *(_BYTE *)(a1 + 416) = v10;
    *(CFAbsoluteTime *)(a1 + 424) = CFAbsoluteTimeGetCurrent();
    sub_1000234D8((uint64_t *)(a1 + 432));
    *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
    *(_DWORD *)(a1 + 752) = 0;
    sub_100342998(a1, a3, (double *)(a1 + 384), (uint64_t *)(a1 + 432), (uint64_t)"scan");
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v17 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v18 = sub_10099EBD8((char)v10);
      uint64_t v19 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3);
      double v20 = *(double *)(a1 + 424) - *(double *)(a1 + 408);
      uint64_t v21 = *(void *)(a1 + 384);
      *(_DWORD *)std::string buf = 67110146;
      int v57 = v10;
      __int16 v58 = 2080;
      *(void *)__int128 v59 = v18;
      *(_WORD *)&v59[8] = 2048;
      *(void *)&v59[10] = v19;
      __int16 v60 = 2048;
      double v61 = v20;
      __int16 v62 = 2048;
      uint64_t v63 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "asynchronous scan type %d %s completed - %lu results (%.3fs scan time), max age, %.3f",  buf,  0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      uint64_t v28 = qword_101934A78;
      char v29 = sub_10099EBD8((char)v10);
      uint64_t v30 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3);
      double v31 = *(double *)(a1 + 424) - *(double *)(a1 + 408);
      uint64_t v32 = *(void *)(a1 + 384);
      LODWORD(v48) = 67110146;
      HIDWORD(v48) = v10;
      *(_WORD *)int v49 = 2080;
      *(void *)&_OWORD v49[2] = v29;
      *(_WORD *)&v49[10] = 2048;
      uint64_t v50 = v30;
      __int16 v51 = 2048;
      double v52 = v31;
      __int16 v53 = 2048;
      uint64_t v54 = v32;
      LODWORD(v37) = 48;
      uint64_t v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  2LL,  "asynchronous scan type %d %s completed - %lu results (%.3fs scan time), max age, %.3f",  &v48,  v37,  v38,  *(double *)&__p,  *((double *)&__p + 1));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)",  "%s\n",  v33);
    }

    ++*(_DWORD *)(a1 + 756);
    *(void *)(a1 + 408) = 0LL;
    sub_100341148(a1, (uint64_t *)(a1 + 432), (char)v10);
    buf[0] = 0;
    LOBYTE(v58) = 0;
    char v64 = 0;
    memset(v65, 0, sizeof(v65));
    uint64_t v66 = 0LL;
    buf[1] = v10;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(void *)a1 + 224LL))(a1, &v65[8], v65);
    sub_10032F218(a1, (uint64_t)&v48);
    if (v55) {
      sub_1003516E4((uint64_t)&v58, (uint64_t)&v48);
    }
    HIDWORD(v37) = 3;
    (*(void (**)(uint64_t, char *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  (char *)&v37 + 4,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
    [*(id *)(a1 + 656) processEventTime:CFAbsoluteTimeGetCurrent()];
    if (v55 && SBYTE1(v52) < 0) {
      operator delete(*(void **)v49);
    }
    int v48 = (void **)&v65[8];
    sub_100023498(&v48);
    if (v64 && SHIBYTE(v62) < 0) {
      operator delete(*(void **)&v59[6]);
    }
  }

  uint64_t v23 = *(void *)(a1 + 312);
  if (v23)
  {
    WiFiDeviceClientRegisterScanUpdateCallback(v23, sub_100337E50, 1LL, a1);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    std::stringbuf::string_type v24 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "WifiService, scan callback, fWifiDevice NULL",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v48) = 0;
      LODWORD(v37) = 2;
      int v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, scan callback, fWifiDevice NULL",  &v48,  v37);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)",  "%s\n",  v35);
    }
  }

  if (*(void *)(a1 + 368))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 296));
    int v25 = (__CFRunLoop *)sub_10029228C();
    CFRunLoopWakeUp(v25);
  }

  if (SHIBYTE(v40) < 0) {
    operator delete((void *)__p);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
}

void sub_1003446EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, os_activity_scope_state_s state, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, int a44, __int16 a45, char a46, char a47)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  sub_1011C52D0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100344798(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t v4 = a1;
  uint64_t v110 = a1 + 824;
  (*(void (**)(void))(*(void *)(a1 + 824) + 16LL))();
  __int16 v112 = 256;
  unsigned int v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiManagerBackgroundScanCacheCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v6 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&_BYTE buf[20] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiManagerBackgroundScanCacheCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  uint64_t v7 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(v4 + 284);
    int v9 = *(unsigned __int8 *)(v4 + 244);
    int v10 = *(unsigned __int8 *)(v4 + 245);
    int v11 = *(unsigned __int8 *)(v4 + 246);
    int v13 = *(_DWORD *)(v4 + 236);
    int v12 = *(_DWORD *)(v4 + 240);
    *(_DWORD *)std::string buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v12;
    *(_WORD *)&_BYTE buf[14] = 1026;
    *(_DWORD *)&uint8_t buf[16] = v9;
    *(_WORD *)&_BYTE buf[20] = 1026;
    *(_DWORD *)&buf[22] = v10;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&_BYTE buf[28] = v11;
    *(_WORD *)&uint8_t buf[32] = 1026;
    int v121 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "WsbReg, snap, clients, %{public}d, interval, %{public}d, active, %{public}d, rollover, %{public}d, sample, %{publi c}d, state, %{public}d",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    int v69 = *(_DWORD *)(v4 + 284);
    int v70 = *(unsigned __int8 *)(v4 + 244);
    int v71 = *(unsigned __int8 *)(v4 + 245);
    int v72 = *(unsigned __int8 *)(v4 + 246);
    int v74 = *(_DWORD *)(v4 + 236);
    int v73 = *(_DWORD *)(v4 + 240);
    *(_DWORD *)double v115 = 67241472;
    *(_DWORD *)&v115[4] = v69;
    *(_WORD *)&v115[8] = 1026;
    *(_DWORD *)&v115[10] = v73;
    *(_WORD *)&v115[14] = 1026;
    *(_DWORD *)&v115[16] = v70;
    *(_WORD *)&v115[20] = 1026;
    *(_DWORD *)&v115[22] = v71;
    *(_WORD *)&v115[26] = 1026;
    *(_DWORD *)&v115[28] = v72;
    LOWORD(v116) = 1026;
    *(_DWORD *)((char *)&v116 + 2) = v74;
    int v75 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbReg, snap, clients, %{public}d, interval, %{public}d, active, %{public}d, rollover, %{public}d, s ample, %{public}d, state, %{public}d",  v115,  38);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v75);
    if (v75 != buf) {
      free(v75);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  CFIndex v15 = &OBJC_INSTANCE_METHODS_TRANSITPbTransitMacTile;
  if (!a4)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    BOOL v27 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@WsbCb, count, 0", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      *(_WORD *)double v115 = 0;
      LODWORD(v80) = 2;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbCb, count, 0",  v115,  v80);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v28);
      if (v28 != buf) {
        free(v28);
      }
    }

    goto LABEL_149;
  }

  CFIndex Count = CFArrayGetCount(a4);
  id v17 = -[__CFArray objectAtIndexedSubscript:](a4, "objectAtIndexedSubscript:", ((Count << 32) - 0x100000000LL) >> 32);
  int IntProperty = WiFiNetworkGetIntProperty(v17, @"AGE");
  WiFiNetworkGetProperty(v17, @"BSSID");
  uint64_t v82 = v4;
  int v83 = Count;
  if (Current - (double)IntProperty <= *(double *)(v4 + 488)
    && 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(v4 + 504) - *(void *)(v4 + 496)) >> 3) == (int)Count)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v19 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(v4 + 488);
      *(_DWORD *)std::string buf = 134349568;
      *(double *)&uint8_t buf[4] = Current - (double)IntProperty;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v20;
      *(_WORD *)&buf[22] = 1026;
      *(_DWORD *)&_BYTE buf[24] = Count;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "@WsbCb, duplicate, times, %{public}.1f, %{public}.1f, count, %{public}d, #CloneMe",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      uint64_t v21 = *(void *)(v4 + 488);
      *(_DWORD *)double v115 = 134349568;
      *(double *)&v115[4] = Current - (double)IntProperty;
      *(_WORD *)&v115[12] = 2050;
      *(void *)&v115[14] = v21;
      *(_WORD *)&v115[22] = 1026;
      *(_DWORD *)&v115[24] = Count;
      LODWORD(v80) = 28;
      unint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "@WsbCb, duplicate, times, %{public}.1f, %{public}.1f, count, %{public}d, #CloneMe",  v115,  v80);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v22);
      if (v22 != buf) {
        free(v22);
      }
    }

void sub_100346020( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *__p, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
}

NSDictionary *sub_100346154(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  2LL);
}

NSDictionary *sub_1003461E8(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard:badcb";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  2LL);
}

NSDictionary *sub_10034627C(uint64_t a1)
{
  v4[0] = @"aps";
  v5[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v4[1] = @"delta";
  v5[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  _DWORD v4[2] = @"active";
  uint64_t v2 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  void v4[3] = @"daily";
  _OWORD v5[2] = v2;
  void v5[3] = &off_1018D31E8;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  4LL);
}

uint64_t sub_100346354(_BYTE *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = a1 + 824;
  int v24 = a1 + 824;
  (*(void (**)(_BYTE *))(*((void *)a1 + 103) + 16LL))(a1 + 824);
  __int16 v25 = 256;
  uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiManagerBackgroundScanCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v7, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  int v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&_BYTE buf[20] = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiManagerBackgroundScanCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_10033D610((uint64_t)a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  int v9 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *((void *)a1 + 31);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = a4;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&_BYTE buf[14] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Got background scan callback, networks, %p, Exit / Entry notification, gfNetworks, %ld",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v16 = *((void *)a1 + 31);
    *(_DWORD *)__int128 v26 = 134218240;
    *(void *)&v26[4] = a4;
    __int16 v27 = 2048;
    uint64_t v28 = v16;
    id v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Got background scan callback, networks, %p, Exit / Entry notification, gfNetworks, %ld",  v26,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v17);
    if (v17 != buf) {
      free(v17);
    }
  }

  CFShow(a4);
  sub_1000234D8((uint64_t *)a1 + 58);
  *((CFAbsoluteTime *)a1 + 57) = CFAbsoluteTimeGetCurrent();
  if (a4)
  {
    *(void *)std::string buf = 0xBFF0000000000000LL;
    sub_1000234D8((uint64_t *)a1 + 58);
    sub_100342998((uint64_t)a1, (CFArrayRef)a4, (double *)buf, (uint64_t *)a1 + 58, (uint64_t)"get");
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*((void *)a1 + 59) - *((void *)a1 + 58)) >> 3);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%ld background scan entry results", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      uint64_t v18 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*((void *)a1 + 59) - *((void *)a1 + 58)) >> 3);
      *(_DWORD *)__int128 v26 = 134217984;
      *(void *)&v26[4] = v18;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "%ld background scan entry results",  v26);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v19);
      if (v19 != buf) {
        free(v19);
      }
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v13 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "issue kNotificationBackgroundEntry", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      *(_WORD *)__int128 v26 = 0;
      LODWORD(v22) = 2;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "issue kNotificationBackgroundEntry",  v26,  v22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v20);
      if (v20 != buf) {
        free(v20);
      }
    }

    *(_WORD *)std::string buf = -256;
    uint8_t buf[8] = 0;
    char v31 = 0;
    memset(v32, 0, sizeof(v32));
    uint64_t v33 = 0LL;
    (*(void (**)(_BYTE *, _BYTE *, _BYTE *))(*(void *)a1 + 232LL))(a1, &v32[8], v32);
    *(_DWORD *)__int128 v26 = 8;
    (*(void (**)(_BYTE *, _BYTE *, _BYTE *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v26,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
    *(void *)__int128 v26 = &v32[8];
    sub_100023498((void ***)v26);
    if (v31 && v30 < 0) {
      operator delete(*(void **)&buf[16]);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v14 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "issue kNotificationBackgroundExit", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      *(_WORD *)__int128 v26 = 0;
      LODWORD(v22) = 2;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "issue kNotificationBackgroundExit",  v26,  v22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v21);
      if (v21 != buf) {
        free(v21);
      }
    }

    *(_DWORD *)std::string buf = 9;
    (*(void (**)(_BYTE *, _BYTE *, void, uint64_t))(*(void *)a1 + 144LL))(a1, buf, 0LL, 0xFFFFFFFFLL);
  }

  if (sub_10033B61C((uint64_t)a1, (CFArrayRef)a4))
  {
    a1[246] = 0;
    sub_10033A5B0((uint64_t)a1, 1);
  }

  if (sub_100E575B0())
  {
    sub_1002A5370(buf);
    v26[0] = a4 != 0LL;
    sub_1002AB3FC((uint64_t)buf, "ePNOEnter", v26);
    sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
    sub_1002A5590(buf);
  }

  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(_BYTE *))(*(void *)v6 + 24LL))(v6);
}

void sub_100346B70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100346BE0(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v26 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v27 = 256;
  int v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: onWiFiManagerRestartCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v4 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v32 = 0;
    __int16 v33 = 2082;
    uint64_t v34 = "";
    __int16 v35 = 2082;
    unsigned int v36 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:onWiFiManagerRestartCallback, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  unsigned int v5 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiNotify, WifiManagerRestart", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    LOWORD(v17) = 0;
    int v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiNotify, WifiManagerRestart",  &v17,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)",  "%s\n",  v11);
  }

  sub_10033CF94(a1, &v24);
  uint64_t v17 = qword_1019A1910;
  if (byte_1019A1918[23] < 0)
  {
    sub_1010DD48C(&__p, *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
  }

  else
  {
    __int128 __p = *(_OWORD *)byte_1019A1918;
    uint64_t v19 = *(void *)&byte_1019A1918[16];
  }

  __int128 v20 = xmmword_1019A1930;
  __int128 v21 = xmmword_1019A1940;
  __int128 v22 = xmmword_1019A1950;
  uint64_t v23 = qword_1019A1960;
  if ((sub_100338488(a1, (uint64_t)&v17) & 1) == 0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Failed to query associated network",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      LOWORD(v28[0]) = 0;
      LODWORD(v16) = 2;
      CFIndex v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning Failed to query associated network",  v28,  v16,  v17,  (void)__p,  *((void *)&__p + 1),  v19);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)",  "%s\n",  v15);
    }
  }

  sub_1003340E0(a1);
  sub_100347224(a1);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  uint64_t v7 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 284);
    int v9 = *(const char **)(a1 + 712);
    *(_DWORD *)std::string buf = 67240448;
    int v32 = v8;
    __int16 v33 = 2050;
    uint64_t v34 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "WsbReg, wifirestart, clients, %{public}d, %{public}ld",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v12 = *(_DWORD *)(a1 + 284);
    uint64_t v13 = *(void *)(a1 + 712);
    v28[0] = 67240448;
    v28[1] = v12;
    __int16 v29 = 2050;
    uint64_t v30 = v13;
    LODWORD(v16) = 18;
    int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WsbReg, wifirestart, clients, %{public}d, %{public}ld",  v28,  v16);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)",  "%s\n",  v14);
  }

  if (*(int *)(a1 + 284) >= 1)
  {
    *(_DWORD *)(a1 + 236) = 0;
    sub_100335B3C(a1, 1, 1);
  }

  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_1003471CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, os_activity_scope_state_s state, char a28)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  sub_1011C52D0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_100347224(uint64_t a1)
{
  if (*(void *)(a1 + 296) && *(void *)(a1 + 304))
  {
    uint64_t v2 = *(const __CFArray **)(a1 + 520);
    if (v2) {
      CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, v2);
    }
    else {
      CFMutableArrayRef MutableCopy = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    }
    uint64_t v10 = MutableCopy;
    int v11 = *(const __CFArray **)(a1 + 528);
    if (v11)
    {
      v41.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 528));
      v41.location = 0LL;
      CFArrayAppendArray(v10, v11, v41);
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v12 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      CFIndex Count = CFArrayGetCount(v10);
      uint64_t v15 = *(void *)(a1 + 296);
      uint64_t v14 = *(void *)(a1 + 304);
      *(_DWORD *)std::string buf = 134218496;
      CFIndex v36 = Count;
      __int16 v37 = 2048;
      uint64_t v38 = v14;
      __int16 v39 = 2048;
      uint64_t v40 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Setting %ld background scan networks, fWifiManager, %p, fDpcSource, %p",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      uint64_t v20 = qword_101934A78;
      CFIndex v21 = CFArrayGetCount(v10);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v22 = *(void *)(a1 + 304);
      int v29 = 134218496;
      CFIndex v30 = v21;
      __int16 v31 = 2048;
      uint64_t v32 = v22;
      __int16 v33 = 2048;
      uint64_t v34 = v23;
      BOOL v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  2LL,  "Setting %ld background scan networks, fWifiManager, %p, fDpcSource, %p",  &v29,  32);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v24);
    }

    if (*(void *)(a1 + 304))
    {
      uint64_t v16 = (*(uint64_t (**)(void, __CFArray *))(**(void **)(a1 + 840) + 16LL))( *(void *)(a1 + 840),  v10);
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v17 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(a1 + 296);
        CFIndex v18 = *(void *)(a1 + 304);
        *(_DWORD *)std::string buf = 134349312;
        CFIndex v36 = v18;
        __int16 v37 = 2050;
        uint64_t v38 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "WifiService, fWifiManager is NULL, %{public}p, fDpcSource, %{public}p",  buf,  0x16u);
      }

      uint64_t v16 = sub_1002921D0(115, 0);
      if ((_DWORD)v16)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v26 = *(void *)(a1 + 296);
        CFIndex v25 = *(void *)(a1 + 304);
        int v29 = 134349312;
        CFIndex v30 = v25;
        __int16 v31 = 2050;
        uint64_t v32 = v26;
        LODWORD(v28) = 22;
        __int16 v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, fWifiManager is NULL, %{public}p, fDpcSource, %{public}p",  &v29,  v28);
        uint64_t v16 = sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::setBackgroundScanNetworksInternal()",  "%s\n",  v27);
      }
    }

    sub_10034D038(v16, v10);
    CFRelease(v10);
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 296);
      CFIndex v5 = *(void *)(a1 + 304);
      *(_DWORD *)std::string buf = 134218240;
      CFIndex v36 = v5;
      __int16 v37 = 2048;
      uint64_t v38 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning avoid setBackgroundScanNetworksInternal, fWifiManager is NULL, %p, fDpcSource, %p, shutdown?",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      uint64_t v8 = *(void *)(a1 + 296);
      CFIndex v7 = *(void *)(a1 + 304);
      int v29 = 134218240;
      CFIndex v30 = v7;
      __int16 v31 = 2048;
      uint64_t v32 = v8;
      int v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning avoid setBackgroundScanNetworksInternal, fWifiManager is NULL, %p, fDpcSource, %p, shutdown?",  &v29,  22);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v9);
    }
  }

void *sub_100347778@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_1003477F0(uint64_t a1, int a2, int *a3, int *a4)
{
  if (*a3 == 12)
  {
    sub_1004F2598();
    if (sub_1004F8C84())
    {
      *(_DWORD *)std::string buf = *a3;
      int v8 = sub_100247620(a1, (int *)buf, 1LL);
      if (v8 == *(_DWORD *)(a1 + 284))
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        int v9 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *((void *)a4 + 1);
          int v11 = *a4;
          int v12 = *((unsigned __int8 *)a4 + 4);
          int v13 = *((unsigned __int8 *)a4 + 5);
          *(_DWORD *)std::string buf = 67241474;
          int v43 = v8;
          __int16 v44 = 1026;
          int v45 = a2;
          __int16 v46 = 2082;
          uint64_t v47 = v10;
          __int16 v48 = 1026;
          int v49 = v11;
          __int16 v50 = 1026;
          int v51 = v12;
          __int16 v52 = 1026;
          int v53 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "@WsbReg, clients, %{public}d, same, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, ro llover, %{public}d",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          uint64_t v14 = *((void *)a4 + 1);
          int v15 = *a4;
          int v16 = *((unsigned __int8 *)a4 + 4);
          int v17 = *((unsigned __int8 *)a4 + 5);
          int v30 = 67241474;
          int v31 = v8;
          __int16 v32 = 1026;
          int v33 = a2;
          __int16 v34 = 2082;
          uint64_t v35 = v14;
          __int16 v36 = 1026;
          int v37 = v15;
          __int16 v38 = 1026;
          int v39 = v16;
          __int16 v40 = 1026;
          int v41 = v17;
          CFIndex v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbReg, clients, %{public}d, same, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d",  &v30,  42);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiService::registerForNotification(int, const CLWifiService_Type::Notification &, const CLW ifiService_Type::RegInfo &)",  "%s\n",  v18);
        }
      }

      else
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        uint64_t v19 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = *((void *)a4 + 1);
          int v21 = *a4;
          int v22 = *((unsigned __int8 *)a4 + 4);
          int v23 = *((unsigned __int8 *)a4 + 5);
          *(_DWORD *)std::string buf = 67241474;
          int v43 = v8;
          __int16 v44 = 1026;
          int v45 = a2;
          __int16 v46 = 2082;
          uint64_t v47 = v20;
          __int16 v48 = 1026;
          int v49 = v21;
          __int16 v50 = 1026;
          int v51 = v22;
          __int16 v52 = 1026;
          int v53 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "@WsbReg, clients, %{public}d, plus, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, ro llover, %{public}d",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          uint64_t v25 = *((void *)a4 + 1);
          int v26 = *a4;
          int v27 = *((unsigned __int8 *)a4 + 4);
          int v28 = *((unsigned __int8 *)a4 + 5);
          int v30 = 67241474;
          int v31 = v8;
          __int16 v32 = 1026;
          int v33 = a2;
          __int16 v34 = 2082;
          uint64_t v35 = v25;
          __int16 v36 = 1026;
          int v37 = v26;
          __int16 v38 = 1026;
          int v39 = v27;
          __int16 v40 = 1026;
          int v41 = v28;
          int v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbReg, clients, %{public}d, plus, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d",  &v30,  42);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiService::registerForNotification(int, const CLWifiService_Type::Notification &, const CLW ifiService_Type::RegInfo &)",  "%s\n",  v29);
        }

        sub_10034813C(a1, *((uint64_t **)a4 + 1), a2, 0);
        sub_100335B3C(a1, 1, 0);
        *(_DWORD *)(a1 + 284) = v8;
      }

      sub_1003495BC(a1, (uint64_t)"reg");
    }
  }

  return 1LL;
}

BOOL sub_100347C6C(uint64_t a1, int a2, int *a3, _OWORD *a4)
{
  int v38 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v37 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          int v23 = (uint64_t *)v17;
        }
        else {
          int v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }

      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          int v28 = (uint64_t *)v24;
        }
        else {
          int v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }

      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        uint64_t v36 = v25;
        uint64_t v32 = *(void *)(v25 + 56);
        *(void *)std::string buf = &v38;
        *(_OWORD *)(sub_1003529EC((uint64_t **)(v25 + 40), &v38, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5) = *a4;
        *(_WORD *)std::string buf = -256;
        uint8_t buf[8] = 0;
        char v46 = 0;
        memset(v47, 0, sizeof(v47));
        uint64_t v48 = 0LL;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          int v33 = sub_100352DD0((uint64_t)buf);
          sub_1003520E0((_BYTE *)a1, (uint64_t)&v37, (uint64_t)&v36, v33);
        }

        *(void *)int v39 = &v47[8];
        sub_100023498((void ***)v39);
        if (v46 && v45 < 0) {
          operator delete(*(void **)((char *)__p + 2));
        }
        if (v32) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v36 = a1 + 64;
        char v29 = byte_101937718;
        *(_DWORD *)int v39 = v16;
        *(void *)std::string buf = v39;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)v39, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)int v39 = *a3;
        *(void *)std::string buf = v39;
        int v30 = sub_10023347C((uint64_t **)(a1 + 56), (int *)v39, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v30 + 8);
        *(_DWORD *)int v39 = *a3;
        *(void *)std::string buf = v39;
        int v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)v39, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::string buf = &v38;
        *(_OWORD *)(sub_1003529EC(v31 + 5, &v38, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5) = *a4;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_10004A8FC((uint64_t **)(v37 + 40), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  uint64_t v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v43 = 1026;
    __p[0] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    __int16 v34 = (void *)(a1 + 8);
    *(_DWORD *)int v39 = 136446466;
    *(void *)&v39[4] = v34;
    __int16 v40 = 1026;
    int v41 = a2;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                    v39,
                    18);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiServic e_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v35);
    if (v35 != buf) {
      free(v35);
    }
    return 0LL;
  }

  return result;
}

void sub_10034811C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10034813C(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  int v91 = a3;
  if (*(double *)(a1 + 680) == 0.0)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    int v15 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 284);
      int v17 = *(unsigned __int8 *)(a1 + 246);
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "WsbClients, status, holdoff, clients, %{public}d, samplescan, %{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      int v18 = *(_DWORD *)(a1 + 284);
      int v19 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(v102) = 67240448;
      HIDWORD(v102) = v18;
      LOWORD(v103.__vftable) = 1026;
      *(_DWORD *)((char *)&v103.__vftable + 2) = v19;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbClients, status, holdoff, clients, %{public}d, samplescan, %{public}d",  &v102,  14);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v20);
      if (v20 != buf) {
        free(v20);
      }
    }
  }

  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v8 = *(double *)(a1 + 680);
    double v9 = *(double *)(a1 + 688);
    uint64_t v10 = *(unsigned int *)(a1 + 712);
    sub_100271FC8((uint64_t)&v102);
    std::ostream::operator<<(&v102, v10);
    std::stringbuf::str(&v90, &v103);
    double v11 = Current - v8;
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    BOOL v12 = (os_log_s *)qword_101934868;
    double v13 = v11 / 60.0;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = &v90;
      if ((v90.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v14 = (std::stringbuf::string_type *)v90.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&_BYTE buf[12] = 2050;
      double v101 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "WsbMetric, clients, %{public}s, delta, %{public}.1f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      int v71 = &v90;
      if ((v90.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v71 = (std::stringbuf::string_type *)v90.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v96 = 136446466;
      *(void *)&v96[4] = v71;
      *(_WORD *)&v96[12] = 2050;
      *(double *)&v96[14] = v13;
      int v72 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, clients, %{public}s, delta, %{public}.1f",  v96,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v72);
      if (v72 != buf) {
        free(v72);
      }
    }

    v87[0] = _NSConcreteStackBlock;
    v87[1] = 3321888768LL;
    _OWORD v87[2] = sub_10034A17C;
    v87[3] = &unk_1018333D8;
    else {
      std::stringbuf::string_type v88 = v90;
    }
    double v89 = v13;
    AnalyticsSendEventLazy(@"com.apple.clx.wsb.clients", v87);
    if ((int)v10 >= 1)
    {
      if ((Current - v9) / 60.0 >= 1.0)
      {
        int v21 = *(_DWORD *)(a1 + 720);
        BOOL v22 = "active:off";
        if (v21 == 1) {
          BOOL v22 = "active:fences";
        }
        if (v21 == 2) {
          int v23 = "active:fake";
        }
        else {
          int v23 = v22;
        }
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        uint64_t v24 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&_BYTE buf[12] = 2050;
          double v101 = (Current - v9) / 60.0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          *(_DWORD *)uint64_t v96 = 136446466;
          *(void *)&v96[4] = v23;
          *(_WORD *)&v96[12] = 2050;
          *(double *)&v96[14] = (Current - v9) / 60.0;
          LODWORD(v77) = 22;
          int v73 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  v96,  v77);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v73);
          if (v73 != buf) {
            free(v73);
          }
        }

        v86[0] = _NSConcreteStackBlock;
        v86[1] = 3221225472LL;
        v86[2] = sub_10034A270;
        v86[3] = &unk_101827B10;
        v86[4] = v23;
        *(double *)&void v86[5] = (Current - v9) / 60.0;
        AnalyticsSendEventLazy(@"com.apple.clx.wsb.regmode", v86);
      }

      if (v13 >= 1.0)
      {
        int v27 = *(_DWORD *)(a1 + 724);
        int v28 = "rollover:off";
        if (v27 == 1) {
          int v28 = "rollover:partial";
        }
        if (v27 == 2) {
          char v29 = "rollover:all";
        }
        else {
          char v29 = v28;
        }
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        int v30 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&_BYTE buf[12] = 2050;
          double v101 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          *(_DWORD *)uint64_t v96 = 136446466;
          *(void *)&v96[4] = v29;
          *(_WORD *)&v96[12] = 2050;
          *(double *)&v96[14] = v13;
          LODWORD(v77) = 22;
          int v74 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  v96,  v77);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v74);
          if (v74 != buf) {
            free(v74);
          }
        }

        v85[0] = _NSConcreteStackBlock;
        v85[1] = 3221225472LL;
        v85[2] = sub_10034A32C;
        v85[3] = &unk_101827B10;
        v85[4] = v29;
        *(double *)&v85[5] = v13;
        AnalyticsSendEventLazy(@"com.apple.clx.wsb.regmode", v85);
        if (*(_BYTE *)(a1 + 728)) {
          int v31 = "profile:dynamic";
        }
        else {
          int v31 = "profile:standard";
        }
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        uint64_t v32 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v31;
          *(_WORD *)&_BYTE buf[12] = 2050;
          double v101 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          *(_DWORD *)uint64_t v96 = 136446466;
          *(void *)&v96[4] = v31;
          *(_WORD *)&v96[12] = 2050;
          *(double *)&v96[14] = v13;
          LODWORD(v77) = 22;
          int v75 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  v96,  v77);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v75);
          if (v75 != buf) {
            free(v75);
          }
        }

        v84[0] = _NSConcreteStackBlock;
        v84[1] = 3221225472LL;
        v84[2] = sub_10034A3E8;
        v84[3] = &unk_101827B10;
        v84[4] = v31;
        *(double *)&v84[5] = v13;
        AnalyticsSendEventLazy(@"com.apple.clx.wsb.regmode", v84);
        int v78 = a4;
        int v33 = *(void **)(a1 + 696);
        if (v33 != (void *)(a1 + 704))
        {
          do
          {
            sub_100271FC8((uint64_t)v96);
            uint64_t v36 = sub_10000CF44(v96, (uint64_t)"client:", 7LL);
            size_t v37 = strlen((const char *)v33[5]);
            sub_10000CF44(v36, v33[5], v37);
            std::stringbuf::str(&v83, (const std::stringbuf *)&v96[8]);
            if (qword_101934860 != -1) {
              dispatch_once(&qword_101934860, &stru_101833578);
            }
            int v38 = (os_log_s *)qword_101934868;
            if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
            {
              int v39 = &v83;
              if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                int v39 = (std::stringbuf::string_type *)v83.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = v39;
              *(_WORD *)&_BYTE buf[12] = 2050;
              double v101 = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934860 != -1) {
                dispatch_once(&qword_101934860, &stru_101833578);
              }
              __int16 v43 = &v83;
              if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                __int16 v43 = (std::stringbuf::string_type *)v83.__r_.__value_.__r.__words[0];
              }
              int v92 = 136446466;
              int v93 = v43;
              __int16 v94 = 2050;
              double v95 = v13;
              LODWORD(v77) = 22;
              __int16 v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  &v92,  v77);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v44);
              if (v44 != buf) {
                free(v44);
              }
            }

            v80[0] = _NSConcreteStackBlock;
            v80[1] = 3321888768LL;
            v80[2] = sub_10034A4A4;
            uint64_t v80[3] = &unk_1018333D8;
            else {
              std::stringbuf::string_type __p = v83;
            }
            double v82 = v13;
            AnalyticsSendEventLazy(@"com.apple.clx.wsb.regmode", v80);
            *(void *)uint64_t v96 = v34;
            *(void *)&v96[*(void *)(v34 - 24)] = v35;
            if (v98 < 0) {
              operator delete(v97);
            }
            std::streambuf::~streambuf(&v96[8]);
            std::ios::~ios(&v99);
            __int16 v40 = (void *)v33[1];
            if (v40)
            {
              do
              {
                int v41 = v40;
                __int16 v40 = (void *)*v40;
              }

              while (v40);
            }

            else
            {
              do
              {
                int v41 = (void *)v33[2];
                BOOL v42 = *v41 == (void)v33;
                int v33 = v41;
              }

              while (!v42);
            }

            int v33 = v41;
          }

          while (v41 != (void *)(a1 + 704));
        }

        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        a4 = v78;
        char v45 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134349056;
          *(double *)&uint8_t buf[4] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "WsbMetric, regmode, total, duration, %{public}.1f",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          *(_DWORD *)uint64_t v96 = 134349056;
          *(double *)&v96[4] = v13;
          LODWORD(v77) = 12;
          std::string::size_type v76 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, regmode, total, duration, %{public}.1f",  v96,  v77);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v76);
          if (v76 != buf) {
            free(v76);
          }
          a4 = v78;
        }

        v79[0] = _NSConcreteStackBlock;
        v79[1] = 3221225472LL;
        v79[2] = sub_10034A56C;
        v79[3] = &unk_101820718;
        *(double *)&v79[4] = v13;
        AnalyticsSendEventLazy(@"com.apple.clx.wsb.regmode", v79);
      }

      else
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        uint64_t v25 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, subminute", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          *(_WORD *)uint64_t v96 = 0;
          LODWORD(v77) = 2;
          int v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, regmode, subminute",  v96,  v77);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v26);
          if (v26 != buf) {
            free(v26);
          }
        }
      }
    }

    *(double *)(a1 + 680) = Current;
    *(double *)(a1 + 688) = Current;
    std::streambuf::~streambuf(&v103);
    std::ios::~ios(&v104);
  }

  if (a4)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    char v46 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      int v47 = *(_DWORD *)(a1 + 284);
      int v48 = *(unsigned __int8 *)(a1 + 246);
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v47;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "WsbClients, status, reportonly, clients, %{public}d, dummyscan, %{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      int v49 = *(_DWORD *)(a1 + 284);
      int v50 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(v102) = 67240448;
      HIDWORD(v102) = v49;
      LOWORD(v103.__vftable) = 1026;
      *(_DWORD *)((char *)&v103.__vftable + 2) = v50;
      LODWORD(v77) = 14;
      int v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbClients, status, reportonly, clients, %{public}d, dummyscan, %{public}d",  &v102,  v77);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)",  "%s\n",  v51);
      if (v51 != buf) {
        free(v51);
      }
    }
  }

  else
  {
    uint64_t v52 = *(void *)(a1 + 64);
    if (!v52) {
      goto LABEL_146;
    }
    uint64_t v53 = a1 + 64;
    do
    {
      int v54 = *(_DWORD *)(v52 + 32);
      BOOL v55 = v54 < 12;
      if (v54 >= 12) {
        uint64_t v56 = (uint64_t *)v52;
      }
      else {
        uint64_t v56 = (uint64_t *)(v52 + 8);
      }
      if (!v55) {
        uint64_t v53 = v52;
      }
      uint64_t v52 = *v56;
    }

    while (*v56);
    if (v53 != a1 + 64 && *(int *)(v53 + 32) <= 12 && (uint64_t v57 = *(void *)(v53 + 56)) != 0)
    {
      uint64_t v58 = *(void **)(v53 + 40);
      int v59 = (void *)(v53 + 48);
      if (v58 == (void *)(v53 + 48))
      {
        int v69 = 0;
        *(_DWORD *)(a1 + 724) = 0;
      }

      else
      {
        int v60 = 0;
        BOOL v61 = 0;
        char v62 = *(_BYTE *)(a1 + 728);
        do
        {
          char v63 = *((_BYTE *)v58 + 44) | v61;
          BOOL v61 = v63 != 0;
          __objc2_meth_list v64 = (void *)v58[1];
          double v65 = v58;
          if (v64)
          {
            do
            {
              int v66 = v64;
              __objc2_meth_list v64 = (void *)*v64;
            }

            while (v64);
          }

          else
          {
            do
            {
              int v66 = (void *)v65[2];
              BOOL v42 = *v66 == (void)v65;
              double v65 = v66;
            }

            while (!v42);
          }

          v60 += *((unsigned __int8 *)v58 + 45);
          v62 |= *((_DWORD *)v58 + 10) < 3600;
          uint64_t v58 = v66;
        }

        while (v66 != v59);
        *(_BYTE *)(a1 + 728) = v62;
        if (v57 == v60) {
          int v67 = 2;
        }
        else {
          int v67 = 1;
        }
        if (v60) {
          int v68 = v67;
        }
        else {
          int v68 = 0;
        }
        *(_DWORD *)(a1 + 724) = v68;
        if (v63)
        {
          if (*(_BYTE *)(a1 + 246)) {
            int v69 = 2;
          }
          else {
            int v69 = 1;
          }
        }

        else
        {
          int v69 = 0;
        }
      }

      *(_DWORD *)(a1 + 720) = v69;
    }

    else
    {
LABEL_146:
      sub_100008390(a1 + 696, *(void **)(a1 + 704));
      *(void *)(a1 + 696) = a1 + 704;
      *(void *)(a1 + 712) = 0LL;
      *(void *)(a1 + 704) = 0LL;
      *(void *)(a1 + 720) = 0LL;
      *(_BYTE *)(a1 + 728) = 0;
    }

    int v70 = (uint64_t **)(a1 + 696);
    if (a2)
    {
      *(void *)std::string buf = &v91;
      sub_10000C858(v70, &v91, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5] = a2;
    }

    else
    {
      sub_1002475A8((uint64_t)v70, &v91);
    }
  }

void sub_100349504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  sub_1002720B4((uint64_t)&STACK[0x940]);
  _Unwind_Resume(a1);
}

void sub_1003495BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 712) != *(_DWORD *)(a1 + 284))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v4 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 712);
      int v6 = *(_DWORD *)(a1 + 284);
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v17 = a2;
      __int16 v18 = 1026;
      int v19 = v5;
      __int16 v20 = 1026;
      int v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "WsbClients, mismatch, %{public}s, %{public}d, %{public}d, #CloneMe",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      uint64_t v7 = *(void *)(a1 + 712);
      int v8 = *(_DWORD *)(a1 + 284);
      int v10 = 136446722;
      uint64_t v11 = a2;
      __int16 v12 = 1026;
      int v13 = v7;
      __int16 v14 = 1026;
      int v15 = v8;
      double v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbClients, mismatch, %{public}s, %{public}d, %{public}d, #CloneMe",  &v10,  24);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::wsbConfirmClientCounts(const char *)", "%s\n", v9);
    }
  }

uint64_t sub_1003497B0(uint64_t a1, int a2, int *a3)
{
  int v17 = a2;
  sub_100349A68((char *)a1, a2, a3);
  if (*a3 == 12)
  {
    *(_DWORD *)std::string buf = 12;
    int v6 = sub_100247620(a1, (int *)buf, 1LL);
    int v7 = *(_DWORD *)(a1 + 284);
    if (v6 != v7 && v7 >= 1)
    {
      int v9 = v6;
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      int v10 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)std::string buf = &v17;
        uint64_t v11 = sub_10000C858((uint64_t **)(a1 + 696), &v17, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5];
        *(_DWORD *)std::string buf = 67240707;
        *(_DWORD *)&uint8_t buf[4] = v9;
        __int16 v24 = 1026;
        int v25 = a2;
        __int16 v26 = 2081;
        int v27 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "@WsbReg, clients, %{public}d, minus, idname, %{public}d, %{private}s",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        uint64_t v13 = qword_101934868;
        int v14 = v17;
        __int16 v18 = &v17;
        int v15 = sub_10000C858((uint64_t **)(a1 + 696), &v17, (uint64_t)&unk_1012CF090, &v18)[5];
        LODWORD(v18) = 67240707;
        HIDWORD(v18) = v9;
        __int16 v19 = 1026;
        int v20 = v14;
        __int16 v21 = 2081;
        BOOL v22 = v15;
        int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  0LL,  "@WsbReg, clients, %{public}d, minus, idname, %{public}d, %{private}s",  &v18,  24);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiService::unregisterForNotification(int, const CLWifiService_Type::Notification &)",  "%s\n",  v16);
      }

      sub_10034813C(a1, 0LL, v17, 0);
      sub_100335B3C(a1, 0, 0);
      *(_DWORD *)(a1 + 284) = v9;
    }

    sub_1003495BC(a1, (uint64_t)"unreg");
  }

  return 1LL;
}

BOOL sub_100349A68(char *a1, int a2, int *a3)
{
  HIDWORD(v33) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      int v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          uint64_t v11 = (uint64_t *)v6;
        }
        else {
          uint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          int v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        int v14 = (char *)*((void *)v8 + 6);
        __int16 v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          int v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              __int16 v19 = (char **)v13;
            }
            else {
              __int16 v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              int v16 = v13;
            }
            uint64_t v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1002475A8((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101833538);
              }
              __int16 v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v43 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v35 = 2082;
                uint64_t v36 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101833538);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v37 >= 0) {
                  int v31 = buf;
                }
                else {
                  int v31 = *(_BYTE **)buf;
                }
                int v38 = 136446466;
                int v39 = v29;
                __int16 v40 = 2082;
                int v41 = v31;
                LODWORD(v33) = 22;
                uint64_t v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, Notifica tionInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v32);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100349DF0()
{
  return 1LL;
}

uint64_t sub_100349DF8()
{
  return 1LL;
}

uint64_t sub_100349E00(uint64_t a1, _BYTE *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  if (!*(void *)(a1 + 296))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "WifiService, getPower, fDpcSource is NULL",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    LOWORD(v14) = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, getPower, fDpcSource is NULL",  &v14,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLWifiService::getPower(BOOL &)", "%s\n", v11);
    goto LABEL_23;
  }

  if (!*(void *)(a1 + 312) || !*(void *)(a1 + 304))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v6 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 304);
      uint64_t v7 = *(void *)(a1 + 312);
      *(_DWORD *)std::string buf = 134349312;
      uint64_t v19 = v7;
      __int16 v20 = 2050;
      uint64_t v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "WifiService, getPower, device/manager is NULL, %{public}p, %{public}p",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v10 = *(void *)(a1 + 304);
    uint64_t v9 = *(void *)(a1 + 312);
    int v14 = 134349312;
    uint64_t v15 = v9;
    __int16 v16 = 2050;
    uint64_t v17 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, getPower, device/manager is NULL, %{public}p, %{public}p",  &v14,  22);
    sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLWifiService::getPower(BOOL &)", "%s\n", v11);
LABEL_23:
LABEL_18:
    uint64_t v5 = 0LL;
    goto LABEL_19;
  }

  *a2 = *(_BYTE *)(a1 + 536);
  uint64_t v5 = 1LL;
LABEL_19:
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v5;
}

void sub_10034A14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

NSDictionary *sub_10034A17C(uint64_t a1)
{
  v4[0] = @"clients";
  uint64_t v2 = (void *)(a1 + 32);
  v4[1] = @"duration";
  v5[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  v5[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL);
}

void *sub_10034A22C(uint64_t a1, uint64_t a2)
{
  BOOL result = (void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)BOOL result = v3;
  return result;
}

void sub_10034A25C(uint64_t a1)
{
}

NSDictionary *sub_10034A270(uint64_t a1)
{
  v4[0] = @"active";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  void v3[2] = @"duration";
  void v4[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

NSDictionary *sub_10034A32C(uint64_t a1)
{
  v4[0] = @"rollover";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  void v3[2] = @"duration";
  void v4[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

NSDictionary *sub_10034A3E8(uint64_t a1)
{
  v4[0] = @"profile";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  void v3[2] = @"duration";
  void v4[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL);
}

NSDictionary *sub_10034A4A4(uint64_t a1)
{
  v5[0] = @"client";
  v4[0] = @"mode";
  v4[1] = @"submode";
  uint64_t v2 = (void *)(a1 + 32);
  v5[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  void v4[2] = @"duration";
  void v5[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  3LL);
}

NSDictionary *sub_10034A56C(uint64_t a1)
{
  v2[0] = @"mode";
  v2[1] = @"submode";
  v3[0] = @"total";
  v3[1] = @"total";
  void v2[2] = @"duration";
  void v3[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v3,  v2,  3LL);
}

uint64_t sub_10034A60C(void *a1)
{
  uint64_t v2 = a1 + 103;
  uint64_t v7 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v8 = 256;
  if (a1[39] && a1[38])
  {
    theArray[0] = 0LL;
    WiFiDeviceClientCopyHostedNetworks();
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    __int128 v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(theArray[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning no device / manager",  (uint8_t *)theArray,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(theArray, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      __int16 v6 = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  theArray,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning no device / manager",  &v6,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::getHostedNetwork(CLWifiService_Type::AccessPoint &) const",  "%s\n",  v5);
    }
  }

  (*(void (**)(void *))(*v2 + 24LL))(v2);
  return 0LL;
}

void sub_10034A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10034A890()
{
  int v0 = sub_1002A7CB0(v5, "WifiScanIterations", &v7);
  uint64_t v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v0) {
    return v7;
  }
  else {
    return 1LL;
  }
}

void sub_10034A918(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10034A92C()
{
  int v0 = sub_1002A7CB0(v5, "WifiScanDwellTime", &v7);
  uint64_t v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v0) {
    return v7;
  }
  else {
    return 110LL;
  }
}

void sub_10034A9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__CFDictionary *sub_10034A9CC( uint64_t a1, int a2, int a3, int a4, int **a5, int **a6, uint64_t a7, int a8, char a9)
{
  int v39 = a3;
  int v40 = a2;
  int v37 = a7;
  int valuePtr = a4;
  int v36 = a8;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v40);
  CFNumberRef v15 = CFNumberCreate(0LL, kCFNumberSInt32Type, &unk_1012E6ADC);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v36);
  CFNumberRef v17 = v16;
  if (v11) {
    BOOL v18 = v12 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || v13 == 0LL || v14 == 0LL || v15 == 0LL || v16 == 0LL)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v23 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134350336;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&_BYTE buf[24] = v13;
      *(_WORD *)uint64_t v52 = 2050;
      *(void *)&v52[2] = v14;
      *(_WORD *)&v52[10] = 2050;
      *(void *)&v52[12] = v15;
      *(_WORD *)&v52[20] = 2050;
      *(void *)&v52[22] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v41 = 134350336;
      *(void *)BOOL v42 = v11;
      *(_WORD *)&v42[8] = 2050;
      CFNumberRef v43 = v12;
      *(_WORD *)__int16 v44 = 2050;
      *(void *)&void v44[2] = v13;
      __int16 v45 = 2050;
      CFNumberRef v46 = v14;
      __int16 v47 = 2050;
      CFNumberRef v48 = v15;
      __int16 v49 = 2050;
      CFNumberRef v50 = v17;
      char v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p fla g %{public}p age %{public}p",  &v41,  62);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = const int *]",  "%s\n",  v29);
      if (v29 != buf) {
        free(v29);
      }
    }

    Mutable = 0LL;
  }

  else
  {
    CFNumberRef v32 = v15;
    uint64_t v33 = a6;
    *(void *)std::string buf = kCFBooleanFalse;
    *(void *)&uint8_t buf[8] = kCFBooleanTrue;
    *(void *)&uint8_t buf[16] = v11;
    *(void *)&_BYTE buf[24] = v12;
    *(void *)uint64_t v52 = v13;
    *(void *)&v52[8] = v14;
    if (a9) {
      CFBooleanRef v25 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v25 = kCFBooleanFalse;
    }
    *(void *)&_BYTE v52[16] = v16;
    *(void *)&v52[24] = v25;
    CFBooleanRef v53 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  9LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    for (uint64_t i = 0LL; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_1018336B8[i], *(const void **)&buf[i * 8]);
    if (*a5 != *v33) {
      sub_100352F28(a1, a5, v33, v15, Mutable);
    }
  }

  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (!Mutable)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v27 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v40;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v39;
      *(_WORD *)&_BYTE buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = valuePtr;
      *(_WORD *)&_BYTE buf[20] = 2048;
      *(void *)&buf[22] = a7;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)",  buf,  0x1Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      int v41 = 67109888;
      *(_DWORD *)BOOL v42 = v40;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v39;
      LOWORD(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 2) = valuePtr;
      HIWORD(v43) = 2048;
      *(void *)__int16 v44 = a7;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)",  &v41,  30,  v31,  v32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = const int *]",  "%s\n",  v30);
      if (v30 != buf) {
        free(v30);
      }
    }
  }

  return Mutable;
}

__CFDictionary *sub_10034AF3C( uint64_t a1, int a2, int a3, int a4, int **a5, int **a6, uint64_t a7, int a8, char a9)
{
  int v39 = a3;
  int v40 = a2;
  int v37 = a7;
  int valuePtr = a4;
  int v36 = a8;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v40);
  CFNumberRef v15 = CFNumberCreate(0LL, kCFNumberSInt32Type, &unk_1012E6AE0);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v36);
  CFNumberRef v17 = v16;
  if (v11) {
    BOOL v18 = v12 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || v13 == 0LL || v14 == 0LL || v15 == 0LL || v16 == 0LL)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v23 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134350336;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&_BYTE buf[24] = v13;
      *(_WORD *)uint64_t v52 = 2050;
      *(void *)&v52[2] = v14;
      *(_WORD *)&v52[10] = 2050;
      *(void *)&v52[12] = v15;
      *(_WORD *)&v52[20] = 2050;
      *(void *)&v52[22] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v41 = 134350336;
      *(void *)BOOL v42 = v11;
      *(_WORD *)&v42[8] = 2050;
      CFNumberRef v43 = v12;
      *(_WORD *)__int16 v44 = 2050;
      *(void *)&void v44[2] = v13;
      __int16 v45 = 2050;
      CFNumberRef v46 = v14;
      __int16 v47 = 2050;
      CFNumberRef v48 = v15;
      __int16 v49 = 2050;
      CFNumberRef v50 = v17;
      char v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p fla g %{public}p age %{public}p",  &v41,  62);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = int *]",  "%s\n",  v29);
      if (v29 != buf) {
        free(v29);
      }
    }

    Mutable = 0LL;
  }

  else
  {
    CFNumberRef v32 = v15;
    uint64_t v33 = a6;
    *(void *)std::string buf = kCFBooleanFalse;
    *(void *)&uint8_t buf[8] = kCFBooleanTrue;
    *(void *)&uint8_t buf[16] = v11;
    *(void *)&_BYTE buf[24] = v12;
    *(void *)uint64_t v52 = v13;
    *(void *)&v52[8] = v14;
    if (a9) {
      CFBooleanRef v25 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v25 = kCFBooleanFalse;
    }
    *(void *)&_BYTE v52[16] = v16;
    *(void *)&v52[24] = v25;
    CFBooleanRef v53 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  9LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    for (uint64_t i = 0LL; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_1018336B8[i], *(const void **)&buf[i * 8]);
    if (*a5 != *v33) {
      sub_100353228(a1, a5, v33, v15, Mutable);
    }
  }

  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (!Mutable)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    int v27 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v40;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v39;
      *(_WORD *)&_BYTE buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = valuePtr;
      *(_WORD *)&_BYTE buf[20] = 2048;
      *(void *)&buf[22] = a7;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)",  buf,  0x1Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      int v41 = 67109888;
      *(_DWORD *)BOOL v42 = v40;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v39;
      LOWORD(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 2) = valuePtr;
      HIWORD(v43) = 2048;
      *(void *)__int16 v44 = a7;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)",  &v41,  30,  v31,  v32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = int *]",  "%s\n",  v30);
      if (v30 != buf) {
        free(v30);
      }
    }
  }

  return Mutable;
}

uint64_t sub_10034B4AC(void *a1, uint64_t *a2, void *a3)
{
  __int16 v6 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  if (a1 + 54 != a2) {
    sub_1002DD704(a2, a1[54], a1[55], 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(a1[55] - a1[54]) >> 3));
  }
  *a3 = a1[53];
  return (*(uint64_t (**)(void *))(a1[103] + 24LL))(v6);
}

void sub_10034B54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10034B564(void *a1, uint64_t *a2, void *a3)
{
  __int16 v6 = a1 + 103;
  int v23 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  __int16 v24 = 256;
  uint64_t v7 = a1[58];
  uint64_t v8 = a1[59];
  if (v7 != v8)
  {
    uint64_t v9 = (__int128 *)(v7 + 8);
    do
    {
      uint64_t v10 = (uint64_t)v9 - 8;
      uint64_t v16 = *((void *)v9 - 1);
      if (*((char *)v9 + 23) < 0)
      {
        sub_1010DD48C(&__p, *(void **)v9, *((void *)v9 + 1));
      }

      else
      {
        __int128 v11 = *v9;
        uint64_t v18 = *((void *)v9 + 2);
        __int128 __p = v11;
      }

      __int128 v12 = *(__int128 *)((char *)v9 + 24);
      __int128 v13 = *(__int128 *)((char *)v9 + 40);
      __int128 v14 = *(__int128 *)((char *)v9 + 56);
      uint64_t v22 = *((void *)v9 + 9);
      __int128 v20 = v13;
      __int128 v21 = v14;
      __int128 v19 = v12;
      sub_10034B6AC(a2, (uint64_t)&v16);
      if (SHIBYTE(v18) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v9 = (__int128 *)((char *)v9 + 88);
    }

    while (v10 + 88 != v8);
  }

  *a3 = a1[57];
  return (*(uint64_t (**)(void *))(a1[103] + 24LL))(v6);
}

void sub_10034B680( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_10034B6AC(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v13 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    unint64_t v15 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x1745D1745D1745DLL) {
      unint64_t v16 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v16 = v14;
    }
    v23[4] = result;
    if (v16) {
      CFNumberRef v17 = (char *)sub_100023598(result, v16);
    }
    else {
      CFNumberRef v17 = 0LL;
    }
    uint64_t v18 = &v17[88 * v13];
    v23[0] = v17;
    v23[1] = v18;
    __int128 v23[3] = &v17[88 * v16];
    *(void *)uint64_t v18 = *(void *)a2;
    __int128 v19 = *(_OWORD *)(a2 + 8);
    *((void *)v18 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v18 + 8) = v19;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 8) = 0LL;
    __int128 v21 = *(_OWORD *)(a2 + 48);
    __int128 v20 = *(_OWORD *)(a2 + 64);
    uint64_t v22 = *(void *)(a2 + 80);
    *((_OWORD *)v18 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v18 + 3) = v21;
    *((void *)v18 + 10) = v22;
    *((_OWORD *)v18 + 4) = v20;
    void v23[2] = v18 + 88;
    sub_100023524(a1, v23);
    uint64_t v12 = a1[1];
    uint64_t result = sub_100023728((uint64_t)v23);
  }

  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    __int128 v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 8) = 0LL;
    __int128 v9 = *(_OWORD *)(a2 + 32);
    __int128 v10 = *(_OWORD *)(a2 + 48);
    __int128 v11 = *(_OWORD *)(a2 + 64);
    *(void *)(v7 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(v7 + 48) = v10;
    *(_OWORD *)(v7 + 64) = v11;
    *(_OWORD *)(v7 + memset(&buf[7], 0, 32) = v9;
    uint64_t v12 = v7 + 88;
    a1[1] = v7 + 88;
  }

  a1[1] = v12;
  return result;
}

void sub_10034B828(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10034B83C(void *a1, uint64_t *a2, void *a3)
{
  unint64_t v6 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  if (a1 + 62 != a2) {
    sub_1002DD704(a2, a1[62], a1[63], 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(a1[63] - a1[62]) >> 3));
  }
  *a3 = a1[61];
  return (*(uint64_t (**)(void *))(a1[103] + 24LL))(v6);
}

void sub_10034B8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10034B8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a5, *(void *)(a5 + 8));
  }

  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a5;
    uint64_t v14 = *(void *)(a5 + 16);
  }

  LOBYTE(__p[0]) = 0;
  char v12 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void **, void **))(*(void *)a1 + 256LL))( a1,  a2,  a3,  0LL,  a4,  __dst,  __p);
  if (v12 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return v9;
}

void sub_10034B9B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    sub_1012354B8((uint64_t)&a9);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034B9E0(uint64_t a1, unsigned int a2, int a3, int a4, int a5, void **a6, uint64_t a7)
{
  HIDWORD(v27) = a4;
  char v12 = sub_10099EBD8(a2);
  if (a5) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  HIDWORD(v26) = a5;
  LODWORD(v27) = v13;
  if (a5) {
    uint64_t v14 = "passive";
  }
  else {
    uint64_t v14 = "active";
  }
  if (a3) {
    unint64_t v15 = "low";
  }
  else {
    unint64_t v15 = "normal";
  }
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  unint64_t v16 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    CFNumberRef v17 = a6;
    *(_DWORD *)std::string buf = 136446978;
    *(void *)int v59 = v17;
    *(_WORD *)&v59[8] = 2082;
    int v60 = v12;
    *(_WORD *)BOOL v61 = 2082;
    *(void *)&_OWORD v61[2] = v14;
    __int16 v62 = 2082;
    char v63 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "WsMetric, scanrequest, %{public}s, %{public}s, %{public}s, %{public}s",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v22 = a6;
    int v49 = 136446978;
    CFNumberRef v50 = v22;
    __int16 v51 = 2082;
    uint64_t v52 = v12;
    __int16 v53 = 2082;
    int v54 = v14;
    __int16 v55 = 2082;
    uint64_t v56 = v15;
    LODWORD(v26) = 42;
    int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WsMetric, scanrequest, %{public}s, %{public}s, %{public}s, %{public}s",  &v49,  v26,  v27);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiService::startScan(CLWifiService_Type::ScanType, BOOL, BOOL, BOOL, std::string, const std::opti onal<CLWifiService_Type::Channels> &)",  "%s\n",  v23);
  }

  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3321888768LL;
  _OWORD v36[2] = sub_10034BF88;
  void v36[3] = &unk_101833408;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1010DD48C(&v37, *a6, (unint64_t)a6[1]);
  }

  else
  {
    __int128 v37 = *(_OWORD *)a6;
    int v38 = a6[2];
  }

  int v39 = v12;
  int v40 = v14;
  int v41 = v15;
  AnalyticsSendEventLazy(@"com.apple.clx.wifiservice.scanrequest", v36);
  if (*((char *)a6 + 23) < 0)
  {
    sub_1010DD48C(__p, *a6, (unint64_t)a6[1]);
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a6;
    __int16 v35 = a6[2];
  }

  sub_10034C084(a1, a2, v27, a3, SHIDWORD(v27), (uint64_t)__p, a7, &v49);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  if (v57)
  {
    sub_1000219C4((uint64_t)v29, (uint64_t *)&v49);
    uint64_t v18 = sub_10032F87C(a1, v29);
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v30)
    {
      int v31 = v30;
      operator delete(v30);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    __int128 v19 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v20 = *(unsigned __int8 *)(a7 + 24);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)int v59 = a2;
      *(_WORD *)&v59[4] = 1024;
      *(_DWORD *)&_BYTE v59[6] = a3;
      LOWORD(v60) = 1024;
      *(_DWORD *)((char *)&v60 + 2) = HIDWORD(v26);
      HIWORD(v60) = 1026;
      *(_DWORD *)BOOL v61 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Unable to convert type: %d, isLowPriority: %d, isPassiveScan: %d, w/ overriding channels: %{public}d to scan par ameters. Not attempting to scan",  buf,  0x1Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      int v24 = *(unsigned __int8 *)(a7 + 24);
      v42[0] = 67109888;
      v42[1] = a2;
      __int16 v43 = 1024;
      int v44 = a3;
      __int16 v45 = 1024;
      int v46 = HIDWORD(v26);
      __int16 v47 = 1026;
      int v48 = v24;
      LODWORD(v26) = 26;
      CFBooleanRef v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Unable to convert type: %d, isLowPriority: %d, isPassiveScan: %d, w/ overriding channels: %{public }d to scan parameters. Not attempting to scan",  v42,  v26);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiService::startScan(CLWifiService_Type::ScanType, BOOL, BOOL, BOOL, std::string, const std::op tional<CLWifiService_Type::Channels> &)",  "%s\n",  v25);
    }

    uint64_t v18 = 0LL;
  }

  sub_1003518EC((uint64_t)&v49);
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  return v18;
}

void sub_10034BF24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *__p, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_10034BF88(uint64_t a1)
{
  v5[0] = @"requester";
  uint64_t v2 = (void *)(a1 + 32);
  v6[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
  v5[1] = @"type";
  v6[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 56));
  void v5[2] = @"activepassive";
  _DWORD v6[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 64));
  void v5[3] = @"priority";
  unint64_t v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 72));
  void v5[4] = @"daily";
  void v6[3] = v3;
  _DWORD v6[4] = &off_1018D31E8;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v6,  v5,  5LL);
}

void sub_10034C084( uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  int valuePtr = a3;
  uint64_t v14 = sub_10034D898(a1, a2);
  if (v14)
  {
    unint64_t v15 = v14;
    CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    CFTypeRef v17 = CFAutorelease(v16);
    if (a4) {
      CFBooleanRef v18 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v18 = kCFBooleanFalse;
    }
    if (a5) {
      CFBooleanRef v19 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v19 = kCFBooleanFalse;
    }
    CFDictionarySetValue(v15, @"SCAN_TYPE", v17);
    CFDictionarySetValue(v15, @"SCAN_LOW_PRIORITY", v18);
    CFDictionarySetValue(v15, @"SCAN_LOW_LATENCY", v19);
    if ((a2 - 11) <= 1 && *(_BYTE *)(a7 + 24))
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v20 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a7 + 24)) {
          sub_100036CD8();
        }
        sub_10099EFA8((unsigned int **)a7, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 67240450;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "WifiScan, type, %{public}d, overriding channels, %{public}s",  (uint8_t *)&buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        if (!*(_BYTE *)(a7 + 24)) {
          sub_100036CD8();
        }
        uint64_t v24 = qword_101934858;
        sub_10099EFA8((unsigned int **)a7, &buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        v32[0] = 67240450;
        v32[1] = a2;
        __int16 v33 = 2082;
        uint64_t v34 = p_buf;
        uint64_t v26 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v24,  0LL,  "WifiScan, type, %{public}d, overriding channels, %{public}s",  v32,  18);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLWifiService_Type::ScanParameters> CLWifiService::toWifiScanParameters(CLWifiService_Type::Scan Type, apple80211_scan_type, CLWifiService_Type::ScanParameters::Priority, BOOL, std::string, const std::option al<CLWifiService_Type::Channels> &)",  "%s\n",  (const char *)v26);
        if (v26 != &__p) {
          free(v26);
        }
      }

      if (*(char *)(a6 + 23) < 0)
      {
        sub_1010DD48C(__dst, *(void **)a6, *(void *)(a6 + 8));
      }

      else
      {
        *(_OWORD *)std::string __dst = *(_OWORD *)a6;
        uint64_t v28 = *(void *)(a6 + 16);
      }

      sub_100351948((uint64_t)&buf, a7);
    }

    else
    {
      if (*(char *)(a6 + 23) < 0)
      {
        sub_1010DD48C(__dst, *(void **)a6, *(void *)(a6 + 8));
      }

      else
      {
        *(_OWORD *)std::string __dst = *(_OWORD *)a6;
        uint64_t v28 = *(void *)(a6 + 16);
      }

      buf.__r_.__value_.__s.__data_[0] = 0;
      char v31 = 0;
    }

    sub_100B76BCC(a2, v15, (uint64_t)__dst, (uint64_t)&buf, (uint64_t)&__p);
    sub_1000219C4((uint64_t)a8, (uint64_t *)&__p);
    a8[96] = 1;
    if (v38 < 0) {
      operator delete(v37);
    }
    if (__p.__r_.__value_.__l.__cap_)
    {
      std::string::size_type cap = __p.__r_.__value_.__l.__cap_;
      operator delete((void *)__p.__r_.__value_.__l.__cap_);
    }

    if (v31 && buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }

    if (SHIBYTE(v28) < 0) {
      operator delete(__dst[0]);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v22 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "Got null wifi device options for scan type %d",  (uint8_t *)&__p,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
      int v23 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Got null wifi device options for scan type %d",  &buf);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLWifiService_Type::ScanParameters> CLWifiService::toWifiScanParameters(CLWifiService_Type::ScanTy pe, apple80211_scan_type, CLWifiService_Type::ScanParameters::Priority, BOOL, std::string, const std::optional<C LWifiService_Type::Channels> &)",  "%s\n",  (const char *)v23);
      if (v23 != &__p) {
        free(v23);
      }
    }

    *a8 = 0;
    a8[96] = 0;
  }

void sub_10034C5C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034C614(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 5);
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 42 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_100353528(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }

  if (v6 == v5)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = *(void *)(v5 + 8 * (v8 / 0x2A)) + 96 * (v8 % 0x2A);
  }

  sub_10035383C(v4, v9, a2);
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1LL;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  uint64_t v14 = (void *)(v13 + 8 * (v12 / 0x2A));
  uint64_t v15 = *v14 + 96 * (v12 % 0x2A);
  if (a1[2] == v13) {
    uint64_t v15 = 0LL;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4032LL;
  }
  return v15 - 96;
}

void sub_10034C738(uint64_t a1, void *a2)
{
  if (a2 && (char v29 = *(id **)(a1 + 32), [a2 data]))
  {
    uint64_t v28 = [a2 data];
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    unint64_t v3 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v4 = [a2 type];
      uint64_t v6 = v28[14];
      uint64_t v5 = v28[15];
      uint64_t v7 = v28[13];
      sub_10099EA10((uint64_t)(v28 + 1), (std::stringbuf::string_type *)&__p);
      unint64_t v8 = (v35 & 0x80000000LL) == 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 67240963;
      *(_DWORD *)&uint8_t buf[4] = v4;
      __int16 v39 = 2050;
      uint64_t v40 = v7;
      __int16 v41 = 2050;
      uint64_t v42 = 0x2E8BA2E8BA2E8BA3LL * ((v5 - v6) >> 3);
      __int16 v43 = 2081;
      int v44 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "AONSense,wifiService,type,%{public}d,scanTime,%{public}.3f,count,%{public}zu,associated,%{private}s",  buf,  0x26u);
      if (SBYTE3(v35) < 0) {
        operator delete(__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v20 = qword_101934858;
      unsigned int v21 = [a2 type];
      uint64_t v23 = v28[14];
      uint64_t v22 = v28[15];
      uint64_t v24 = (uint8_t *)v28[13];
      sub_10099EA10((uint64_t)(v28 + 1), &v30);
      if ((v30.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        CFBooleanRef v25 = &v30;
      }
      else {
        CFBooleanRef v25 = (std::stringbuf::string_type *)v30.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p) = 67240963;
      HIDWORD(__p) = v21;
      __int16 v32 = 2050;
      __int16 v33 = v24;
      __int16 v34 = 2050;
      uint64_t v35 = 0x2E8BA2E8BA2E8BA3LL * ((v22 - v23) >> 3);
      __int16 v36 = 2081;
      __int128 v37 = v25;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  2LL,  "AONSense,wifiService,type,%{public}d,scanTime,%{public}.3f,count,%{public}zu,associated,%{private}s",  &__p,  38);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v26);
    }

    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v10 = v28[14];
    uint64_t v11 = v28[15];
    if (v10 != v11)
    {
      int v12 = 0;
      do
      {
        -[NSMutableArray addObject:]( v9,  "addObject:",  +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)(*(double *)(v10 + 56) + 0.5)));
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        uint64_t v13 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          sub_10099E630((uint64_t *)v10, (std::stringbuf::string_type *)buf);
          if ((v42 & 0x80000000LL) == 0) {
            uint64_t v14 = buf;
          }
          else {
            uint64_t v14 = *(uint8_t **)buf;
          }
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v12;
          __int16 v32 = 2081;
          __int16 v33 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "AONSense,wifiService,ap,%{public}d,%{private}s",  (uint8_t *)&__p,  0x12u);
          if (SBYTE3(v42) < 0) {
            operator delete(*(void **)buf);
          }
          ++v12;
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          uint64_t v15 = qword_101934858;
          sub_10099E630((uint64_t *)v10, (std::stringbuf::string_type *)&__p);
          p_p = &__p;
          if ((v35 & 0x80000000LL) != 0) {
            p_p = __p;
          }
          LODWORD(v30.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v30.__r_.__value_.__r.__words[0]) = v12;
          LOWORD(v30.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_p;
          LODWORD(v27) = 18;
          CFTypeRef v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  2LL,  "AONSense,wifiService,ap,%{public}d,%{private}s",  &v30,  v27);
          if (SBYTE3(v35) < 0) {
            operator delete(__p);
          }
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v17);
          ++v12;
        }

        v10 += 88LL;
      }

      while (v10 != v11);
    }

    [v29[83] processEventTimes:v9];
    [v29[84] processEventTimes:v9];
    *((_DWORD *)v28 + 35) = 2;
    *(_DWORD *)std::string buf = 12;
    (*((void (**)(id *, uint8_t *))*v29 + 19))(v29, buf);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    CFBooleanRef v18 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "AONSense,wifiService,data,null", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(__p) = 0;
      CFBooleanRef v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "AONSense,wifiService,data,null",  &__p,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v19);
    }
  }

uint64_t sub_10034CDF0(uint64_t a1, uint64_t *a2, CFTypeRef *a3, int a4)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable( kCFAllocatorDefault,  0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3),  &kCFTypeArrayCallBacks);
  *a3 = (CFTypeRef)result;
  if (result)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 == v9)
    {
      return 1LL;
    }

    else
    {
      uint64_t v10 = (__CFArray *)result;
      while (1)
      {
        value = 0LL;
        uint64_t v11 = value;
        if (!value) {
          break;
        }
        CFArrayAppendValue(v10, value);
        CFRelease(v11);
        v8 += 88LL;
        if (v8 == v9) {
          return 1LL;
        }
      }

      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v12 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "WifiService, create background network failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        __int16 v14 = 0;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, create background network failed",  &v14,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiService::createBackgroundNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, CFArrayRef &, BOOL)",  "%s\n",  v13);
      }

      CFRelease(*a3);
      uint64_t result = 0LL;
      *a3 = 0LL;
    }
  }

  return result;
}

void sub_10034D038(uint64_t a1, void *a2)
{
  unint64_t v3 = +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  14LL);
  if ([a2 count])
  {
    unint64_t v4 = 0LL;
    char v5 = 0;
    int v14 = 67109120;
    do
    {
      uint64_t IntProperty = WiFiNetworkGetIntProperty([a2 objectAtIndexedSubscript:v4], @"CHANNEL");
      int v7 = IntProperty;
      else {
        -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL),  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", IntProperty));
      }
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      uint64_t v8 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v24 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "gfmetrics, channel, %d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        int v15 = 67109120;
        int v16 = v7;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "gfmetrics, channel, %d",  &v15);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::collectChannelMetrics(NSArray *)", "%s\n", v9);
      }

      ++v4;
    }

    while ((unint64_t)[a2 count] > v4);
  }

  else
  {
    char v5 = 0;
  }

  id v10 = objc_msgSend(-[NSMutableDictionary allKeys](v3, "allKeys"), "count");
  BOOL v11 = -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", &off_1018D31E8)
     && -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", &off_1018D3200)
     && -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", &off_1018D3218) != 0LL;
  if (((int)v10 > 0) | v5 & 1)
  {
    v21[0] = @"Channels";
    v22[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v10);
    v21[1] = @"1_6_11";
    v22[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v11);
    v21[2] = @"Non24GHz";
    void v22[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5 & 1);
    AnalyticsSendEvent( @"com.apple.clx.geofence.channels",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  3LL));
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109632;
      int v24 = (int)v10;
      __int16 v25 = 1024;
      BOOL v26 = v11;
      __int16 v27 = 1024;
      int v28 = v5 & 1;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "gfmetrics, Channels, %d, 1_6_11, %d, Non24GHz, %d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v15 = 67109632;
      int v16 = (int)v10;
      __int16 v17 = 1024;
      BOOL v18 = v11;
      __int16 v19 = 1024;
      int v20 = v5 & 1;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "gfmetrics, Channels, %d, 1_6_11, %d, Non24GHz, %d",  &v15,  20,  v14);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::collectChannelMetrics(NSArray *)", "%s\n", v13);
    }
  }

BOOL sub_10034D508(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  v23.__r_.__value_.__r.__words[0] = *(void *)a2;
  sub_1007EC454(__p);
  if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v7 = __p;
  }
  else {
    int v7 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  sub_1002ACAEC((uint64_t)v21, @"BSSID", (char *)v7);
  if ((*(_DWORD *)(a2 + 40) & 0x80000000) == 0)
  {
    LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 40);
    sub_1002AC288((uint64_t)v21, @"CHANNEL", __p);
  }

  __p[0].__r_.__value_.__s.__data_[0] = 1;
  if (a4) {
    sub_1002AB464((uint64_t)v21, @"ENTRY_NETWORK", __p);
  }
  else {
    sub_1002AB464((uint64_t)v21, @"EXIT_NETWORK", __p);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  uint64_t v8 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    v20.__r_.__value_.__r.__words[0] = *(void *)a2;
    sub_1007EC454(&v23);
    uint64_t v9 = (v23.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v23 : (std::string *)v23.__r_.__value_.__r.__words[0];
    int v10 = *(_DWORD *)(a2 + 40);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v10;
    WORD1(__p[0].__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p[0].__r_.__value_.__r.__words[2]) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "network mac, %s, channel, %d, entry, %d",  (uint8_t *)__p,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    uint64_t v15 = qword_101934A78;
    std::string::size_type v19 = *(void *)a2;
    sub_1007EC454(&v20);
    if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v16 = &v20;
    }
    else {
      int v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    int v17 = *(_DWORD *)(a2 + 40);
    LODWORD(v23.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v23.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v23.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v23.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v23.__r_.__value_.__r.__words[2]) = a4;
    BOOL v18 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v15,  2LL,  "network mac, %s, channel, %d, entry, %d",  (const char *)&v23,  24,  v19);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::createBackgroundNetwork(const CLWifiService_Type::AccessPoint &, WiFiNetworkRef &, BOOL)",  "%s\n",  (const char *)v18);
    if (v18 != __p) {
      free(v18);
    }
  }

  uint64_t v11 = sub_1002A59CC((uint64_t)v21);
  uint64_t v12 = WiFiNetworkCreate(kCFAllocatorDefault, v11);
  *a3 = v12;
  BOOL v13 = v12 != 0;
  sub_1002A5590(v21);
  return v13;
}

void sub_10034D848( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

CFDictionaryRef sub_10034D898(uint64_t a1, int a2)
{
  char v2 = a2;
  switch(a2)
  {
    case -1:
    case 13:
      sub_101235C18();
      goto LABEL_22;
    case 0:
      unint64_t v4 = (const __CFDictionary **)(a1 + 136);
      goto LABEL_15;
    case 1:
      unint64_t v4 = (const __CFDictionary **)(a1 + 144);
      goto LABEL_15;
    case 2:
      unint64_t v4 = (const __CFDictionary **)(a1 + 152);
      goto LABEL_15;
    case 3:
      unint64_t v4 = (const __CFDictionary **)(a1 + 160);
      goto LABEL_15;
    case 4:
      unint64_t v4 = (const __CFDictionary **)(a1 + 168);
      goto LABEL_15;
    case 5:
      unint64_t v4 = (const __CFDictionary **)(a1 + 216);
      goto LABEL_15;
    case 6:
      char v5 = *(const __CFDictionary **)(a1 + 224);
      if (!v5) {
        goto LABEL_10;
      }
      goto LABEL_16;
    case 7:
      unint64_t v4 = (const __CFDictionary **)(a1 + 128);
      goto LABEL_15;
    case 8:
      unint64_t v4 = (const __CFDictionary **)(a1 + 176);
      goto LABEL_15;
    case 9:
      unint64_t v4 = (const __CFDictionary **)(a1 + 184);
      goto LABEL_15;
    case 10:
LABEL_10:
      unint64_t v4 = (const __CFDictionary **)(a1 + 200);
      goto LABEL_15;
    case 11:
LABEL_22:
      uint64_t v9 = (_Unwind_Exception *)sub_101235A90();
      if (v14)
      {
        if (__p)
        {
          BOOL v13 = (int *)__p;
          operator delete(__p);
        }
      }

      _Unwind_Resume(v9);
      return result;
    case 12:
      unint64_t v4 = (const __CFDictionary **)(a1 + 192);
LABEL_15:
      char v5 = *v4;
      if (*v4)
      {
LABEL_16:
        uint64_t v6 = sub_100F4CD74();
        sub_100F4CDB0(v6, v2, (uint64_t)&__p);
        if (v14)
        {
          CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v5);
          int v10 = v13;
          uint64_t v11 = (int *)__p;
          sub_10034DA00(a1, &v11, &v10, MutableCopy);
          char v5 = (const __CFDictionary *)CFAutorelease(MutableCopy);
          if (v14)
          {
            if (__p)
            {
              BOOL v13 = (int *)__p;
              operator delete(__p);
            }
          }
        }
      }

      break;
    default:
      char v5 = 0LL;
      break;
  }

  return v5;
}

void sub_10034DA00(uint64_t a1, int **a2, int **a3, __CFDictionary *a4)
{
  CFNumberRef v8 = CFNumberCreate(0LL, kCFNumberSInt32Type, &unk_1012E6AE4);
  if (v8)
  {
    CFNumberRef v9 = v8;
    sub_100353B10(a1, a2, a3, v8, a4);
    CFRelease(v9);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v10 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v15 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "setScanOptionsChannels could not create scan params flag %{public}p",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v12 = 134349056;
      uint64_t v13 = 0LL;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "setScanOptionsChannels could not create scan params flag %{public}p",  &v12,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFMutableDictionaryRef) [Iter = std::__wrap_iter<int *>]",  "%s\n",  v11);
    }
  }

CFDictionaryRef sub_10034DC1C(uint64_t a1, unsigned int *a2)
{
  if (sub_100B76B88((uint64_t)a2) == 11)
  {
    int v4 = sub_100496E10(a2);
    int v5 = sub_100924300((uint64_t)a2);
    int v6 = sub_100808784((uint64_t)a2);
    char v14 = *(int **)sub_1000E7908((uint64_t)a2);
    uint64_t v13 = *(int **)(sub_1000E7908((uint64_t)a2) + 8);
    uint64_t v7 = sub_100603208((uint64_t)a2);
    int v8 = sub_100B76B70((uint64_t)a2);
    char v9 = sub_100B76B78((uint64_t)a2);
    int v10 = sub_10034DD28(a1, v4, v5, v6, &v14, &v13, v7, v8, v9);
    return (const __CFDictionary *)CFAutorelease(v10);
  }

  else
  {
    int v12 = sub_100B76B88((uint64_t)a2);
    return sub_10034D898(a1, v12);
  }

__CFDictionary *sub_10034DD28( uint64_t a1, int a2, int a3, int a4, int **a5, int **a6, uint64_t a7, int a8, char a9)
{
  int v39 = a3;
  int v40 = a2;
  int v37 = a7;
  int valuePtr = a4;
  int v36 = a8;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v40);
  CFNumberRef v15 = CFNumberCreate(0LL, kCFNumberSInt32Type, &unk_1012E6AE8);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v36);
  CFNumberRef v17 = v16;
  if (v11) {
    BOOL v18 = v12 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || v13 == 0LL || v14 == 0LL || v15 == 0LL || v16 == 0LL)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    std::string v23 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134350336;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&_BYTE buf[24] = v13;
      *(_WORD *)uint64_t v52 = 2050;
      *(void *)&v52[2] = v14;
      *(_WORD *)&v52[10] = 2050;
      *(void *)&v52[12] = v15;
      *(_WORD *)&v52[20] = 2050;
      *(void *)&v52[22] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v41 = 134350336;
      *(void *)uint64_t v42 = v11;
      *(_WORD *)&v42[8] = 2050;
      CFNumberRef v43 = v12;
      *(_WORD *)int v44 = 2050;
      *(void *)&void v44[2] = v13;
      __int16 v45 = 2050;
      CFNumberRef v46 = v14;
      __int16 v47 = 2050;
      CFNumberRef v48 = v15;
      __int16 v49 = 2050;
      CFNumberRef v50 = v17;
      char v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p fla g %{public}p age %{public}p",  &v41,  62);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = std::__wrap_iter<const int *>]",  "%s\n",  v29);
      if (v29 != buf) {
        free(v29);
      }
    }

    Mutable = 0LL;
  }

  else
  {
    CFNumberRef v32 = v15;
    __int16 v33 = a6;
    *(void *)std::string buf = kCFBooleanFalse;
    *(void *)&uint8_t buf[8] = kCFBooleanTrue;
    *(void *)&uint8_t buf[16] = v11;
    *(void *)&_BYTE buf[24] = v12;
    *(void *)uint64_t v52 = v13;
    *(void *)&v52[8] = v14;
    if (a9) {
      CFBooleanRef v25 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v25 = kCFBooleanFalse;
    }
    *(void *)&_BYTE v52[16] = v16;
    *(void *)&v52[24] = v25;
    CFBooleanRef v53 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  9LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    for (uint64_t i = 0LL; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_1018336B8[i], *(const void **)&buf[i * 8]);
    if (*a5 != *v33) {
      sub_100353E10(a1, a5, v33, v15, Mutable);
    }
  }

  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (!Mutable)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    __int16 v27 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v40;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v39;
      *(_WORD *)&_BYTE buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = valuePtr;
      *(_WORD *)&_BYTE buf[20] = 2048;
      *(void *)&buf[22] = a7;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)",  buf,  0x1Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      int v41 = 67109888;
      *(_DWORD *)uint64_t v42 = v40;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v39;
      LOWORD(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 2) = valuePtr;
      HIWORD(v43) = 2048;
      *(void *)int v44 = a7;
      std::stringbuf::string_type v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)",  &v41,  30,  v31,  v32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = std::__wrap_iter<const int *>]",  "%s\n",  v30);
      if (v30 != buf) {
        free(v30);
      }
    }
  }

  return Mutable;
}

void sub_10034E298(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v83 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v85 = 256;
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (!*(void *)(a1 + 312) || !*(void *)(a1 + 296))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v66 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v67 = *(void *)(a1 + 312) == 0LL;
      BOOL v68 = *(void *)(a1 + 296) == 0LL;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)char v98 = v67;
      *(_WORD *)&v98[4] = 1026;
      *(_DWORD *)&v98[6] = v68;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, performScan, fail,  device, %{public}d, dpc, %{public}d",  buf,  0xEu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_138;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    BOOL v69 = *(void *)(a1 + 312) == 0LL;
    BOOL v70 = *(void *)(a1 + 296) == 0LL;
    unsigned int v91 = 67240448;
    *(_DWORD *)int v92 = v69;
    *(_WORD *)&v92[4] = 1026;
    *(_DWORD *)&v92[6] = v70;
    int v71 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, performScan, fail,  device, %{public}d, dpc, %{public}d",  &v91,  14);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v71);
    goto LABEL_135;
  }

  double v5 = Current;
  if (Current - *(double *)(a1 + 408) <= 3.0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v72 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "WifiMgr, performScan, in progress", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_138;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    LOWORD(v91) = 0;
    int v71 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiMgr, performScan, in progress",  &v91,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v71);
LABEL_135:
LABEL_138:
    if ((_BYTE)v85) {
      pthread_mutex_unlock(v84);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v83 + 24LL))(v83);
    }
    return;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  int v6 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 368);
    *(_DWORD *)std::string buf = 134349056;
    *(void *)char v98 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "WifiScan, perform, %{public}lu", buf, 0xCu);
  }

  uint64_t v78 = v2;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v73 = *(void *)(a1 + 368);
    unsigned int v91 = 134349056;
    *(void *)int v92 = v73;
    int v74 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "WifiScan, perform, %{public}lu",  &v91,  12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v74);
  }

  *(void *)&__int128 v8 = 67109890LL;
  __int128 v76 = v8;
  uint64_t v77 = 134217984LL;
  uint64_t v9 = 1LL;
  while (*(void *)(a1 + 368))
  {
    sub_1000219C4( (uint64_t)&v91,  (uint64_t *)(*(void *)(*(void *)(a1 + 336) + 8 * (*(void *)(a1 + 360) / 0x2AuLL))
                + 96 * (*(void *)(a1 + 360) % 0x2AuLL)));
    unsigned int v10 = sub_100B76B88((uint64_t)&v91);
    sub_10034F4FC((int64x2_t *)(a1 + 328));
    uint64_t v11 = v9;
    CFNumberRef v12 = sub_10034DC1C(a1, &v91);
    if (v12)
    {
      else {
        CFBooleanRef v13 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v12, @"SCAN_LOW_PRIORITY", v13);
      else {
        CFBooleanRef v14 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v12, @"SCAN_LOW_LATENCY", v14);
      BOOL v15 = sub_1009830D8((uint64_t)&v91);
      uint64_t v16 = 120LL;
      if (v15) {
        uint64_t v16 = 112LL;
      }
      CFDictionarySetValue(v12, @"SCAN_TYPE", *(const void **)(a1 + v16));
      CFNumberRef v17 = *(const void **)(a1 + 312);
      CFRetain(v17);
      CFRetain(v12);
      sub_1002E4AFC(v2);
      double v18 = CFAbsoluteTimeGetCurrent();
      *(_BYTE *)(a1 + 233) = v10;
      int v79 = WiFiDeviceClientScanAsync(v17, v12, sub_10034F574, a1);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      std::string::size_type v19 = (os_log_s *)p_vtable[267];
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        sub_100B76B98((char *)&v91, (uint64_t)__p);
        if (__p[23] >= 0) {
          std::string v20 = __p;
        }
        else {
          std::string v20 = *(_BYTE **)__p;
        }
        unsigned int v21 = sub_100B76B88((uint64_t)&v91);
        uint64_t v22 = sub_10099EBD8(v21);
        else {
          int v23 = 110;
        }
        int v24 = sub_100B76B80((uint64_t)&v91);
        BOOL v25 = sub_1009830D8((uint64_t)&v91);
        *(_DWORD *)std::string buf = 136447746;
        if (v24) {
          int v26 = 108;
        }
        else {
          int v26 = 100;
        }
        *(void *)char v98 = v20;
        if (v25) {
          int v27 = 112;
        }
        else {
          int v27 = 97;
        }
        *(_WORD *)&v98[8] = 2082;
        *(void *)&v98[10] = v22;
        *(_WORD *)&v98[18] = 1026;
        *(_DWORD *)&v98[20] = v23;
        __int16 v99 = 1026;
        LODWORD(v100) = v26;
        WORD2(v100) = 1026;
        *(_DWORD *)((char *)&v100 + 6) = v27;
        WORD5(v100) = 1026;
        HIDWORD(v100) = v9;
        __int16 v101 = 1026;
        int v102 = v79;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "WifiScan, execute, %{public}s, %{public}s, flags, %{public}c%{public}c%{public}c, n, %{public}d, error, %{public}d",  buf,  0x34u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v11 = (v9 + 1);
        uint64_t p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
        uint64_t v2 = v78;
      }

      else
      {
        uint64_t p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        int v42 = v11;
        CFNumberRef v43 = p_vtable[267];
        sub_100B76B98((char *)&v91, (uint64_t)v81);
        if (v82 >= 0) {
          int v44 = v81;
        }
        else {
          int v44 = (void **)v81[0];
        }
        unsigned int v45 = sub_100B76B88((uint64_t)&v91);
        CFNumberRef v46 = sub_10099EBD8(v45);
        else {
          int v47 = 110;
        }
        int v48 = sub_100B76B80((uint64_t)&v91);
        BOOL v49 = sub_1009830D8((uint64_t)&v91);
        *(_DWORD *)std::string __p = 136447746;
        if (v48) {
          int v50 = 108;
        }
        else {
          int v50 = 100;
        }
        *(void *)&__p[4] = v44;
        if (v49) {
          int v51 = 112;
        }
        else {
          int v51 = 97;
        }
        *(_WORD *)&__p[12] = 2082;
        *(void *)&__p[14] = v46;
        *(_WORD *)&__p[22] = 1026;
        *(_DWORD *)&_BYTE __p[24] = v47;
        __int16 v87 = 1026;
        LODWORD(v88) = v50;
        WORD2(v88) = 1026;
        *(_DWORD *)((char *)&v88 + 6) = v51;
        WORD5(v88) = 1026;
        HIDWORD(v88) = v42;
        __int16 v89 = 1026;
        int v90 = v79;
        LODWORD(v75) = 52;
        uint64_t v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v43,  0LL,  "WifiScan, execute, %{public}s, %{public}s, flags, %{public}c%{public}c%{public}c, n, %{public}d, error, %{public}d",  __p,  v75);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v52);
        uint64_t p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
        uint64_t v2 = v78;
        uint64_t v11 = (v42 + 1);
      }

      if (*(_BYTE *)(a1 + 234))
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        int v28 = (os_log_s *)p_vtable[267];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "WifiMgr, Requesting scan with pending scan reply, #CloneMe",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          CFBooleanRef v53 = p_vtable[267];
          *(_WORD *)std::string __p = 0;
          LODWORD(v75) = 2;
          int v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v53,  0LL,  "WifiMgr, Requesting scan with pending scan reply, #CloneMe",  __p,  v75);
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v54);
        }
      }

      *(_BYTE *)(a1 + 234) = 1;
      double v29 = CFAbsoluteTimeGetCurrent();
      sub_1002E4AF0(v2);
      CFRelease(v12);
      CFRelease(v17);
      double v30 = v29 - v18;
      if (v30 >= 3.0)
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018335B8);
        }
        int v31 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = v77;
          *(double *)char v98 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#Warning WIFI: ScanAsync blocked for, %.1lf",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018335B8);
          }
          *(_DWORD *)std::string __p = v77;
          *(double *)&__p[4] = v30;
          int v59 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning WIFI: ScanAsync blocked for, %.1lf",  COERCE_DOUBLE(__p));
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v59);
        }
      }

      if (!v79)
      {
        *(double *)(a1 + 408) = v5;
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018335B8);
        }
        int v37 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          char v38 = sub_10099EBD8(v10);
          uint64_t v39 = *(void *)(a1 + 368);
          *(_DWORD *)std::string buf = v76;
          *(_DWORD *)char v98 = v10;
          *(_WORD *)&v98[4] = 2080;
          *(void *)&v98[6] = v38;
          *(_WORD *)&v98[14] = 2048;
          *(void *)&v98[16] = v39;
          __int16 v99 = 2048;
          *(double *)&__int128 v100 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "asynchronous scan type %d %s in progress (%lu requests left), scanWaitInterval, %.3lf",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018335B8);
          }
          uint64_t v60 = qword_101934A78;
          BOOL v61 = sub_10099EBD8(v10);
          uint64_t v62 = *(void *)(a1 + 368);
          *(_DWORD *)std::string __p = v76;
          *(_DWORD *)&__p[4] = v10;
          *(_WORD *)&__p[8] = 2080;
          *(void *)&__p[10] = v61;
          *(_WORD *)&_BYTE __p[18] = 2048;
          *(void *)&__p[20] = v62;
          __int16 v87 = 2048;
          *(double *)&__int128 v88 = v30;
          LODWORD(v75) = 38;
          char v63 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v60,  2LL,  "asynchronous scan type %d %s in progress (%lu requests left), scanWaitInterval, %.3lf",  __p,  v75,  (void)v76,  *((double *)&v76 + 1));
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v63);
        }

        uint64_t v40 = *(void *)(a1 + 312);
        if (v40)
        {
          WiFiDeviceClientRegisterScanUpdateCallback(v40, 0LL, 1LL, -1LL);
          goto LABEL_72;
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        int v41 = (os_log_s *)p_vtable[267];
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "WifiService, performPendingScans, fWifiDevice NULL",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          __objc2_meth_list v64 = p_vtable[267];
          *(_WORD *)std::string __p = 0;
          LODWORD(v75) = 2;
          double v65 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v64,  16LL,  "WifiService, performPendingScans, fWifiDevice NULL",  __p,  v75);
          sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWifiService::performPendingScans()", "%s\n", v65);
          uint64_t v9 = v11;
        }

        else
        {
LABEL_72:
          uint64_t v9 = v11;
        }

        char v36 = 0;
        goto LABEL_74;
      }

      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      CFNumberRef v32 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v33 = sub_10099EBD8(v10);
        uint64_t v34 = *(void *)(a1 + 368);
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)char v98 = v10;
        *(_WORD *)&v98[4] = 2080;
        *(void *)&v98[6] = v33;
        *(_WORD *)&v98[14] = 2048;
        *(void *)&v98[16] = v34;
        __int16 v99 = 1024;
        LODWORD(v100) = v79;
        WORD2(v100) = 2048;
        *(double *)((char *)&v100 + 6) = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#Warning asynchronous scan type %d %s failed (%lu requests left) - error %d, scanWaitInterval, %.3lf",  buf,  0x2Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018335B8);
        }
        uint64_t v55 = qword_101934A78;
        uint64_t v56 = sub_10099EBD8(v10);
        uint64_t v57 = *(void *)(a1 + 368);
        *(_DWORD *)std::string __p = 67110146;
        *(_DWORD *)&__p[4] = v10;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = v56;
        *(_WORD *)&_BYTE __p[18] = 2048;
        *(void *)&__p[20] = v57;
        __int16 v87 = 1024;
        LODWORD(v88) = v79;
        WORD2(v88) = 2048;
        *(double *)((char *)&v88 + 6) = v30;
        LODWORD(v75) = 44;
        uint64_t v58 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v55,  0LL,  "#Warning asynchronous scan type %d %s failed (%lu requests left) - error %d, scanWaitInterval, %.3lf",  __p,  v75,  (void)v76,  DWORD2(v76),  *(double *)&v77);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::performPendingScans()", "%s\n", v58);
      }

      sub_1000234D8((uint64_t *)(a1 + 432));
      *(_BYTE *)(a1 + 416) = -1;
      *(void *)(a1 + 424) = 0LL;
      uint64_t v35 = *(void **)(a1 + 40);
      v80[0] = _NSConcreteStackBlock;
      v80[1] = 3221225472LL;
      v80[2] = sub_10034F790;
      uint64_t v80[3] = &unk_10181D3D0;
      void v80[4] = a1;
      [v35 async:v80];
      uint64_t v9 = v11;
    }

    char v36 = 1;
LABEL_74:
    if (v96 < 0) {
      operator delete(v95);
    }
    if (v93)
    {
      __int16 v94 = v93;
      operator delete(v93);
    }

    if ((v36 & 1) == 0) {
      break;
    }
  }

  if (HIBYTE(v85)) {
    goto LABEL_138;
  }
}

void sub_10034F444( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

uint64_t sub_10034F4FC(int64x2_t *a1)
{
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012CE4D0);
  return sub_100354110((uint64_t)a1, 1);
}

void sub_10034F574(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101833538);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v14 = 1;
    __int128 v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiService::onWiFiDeviceClientScanCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      double v18 = "";
      __int16 v19 = 2082;
      std::string v20 = "activity";
      __int16 v21 = 2050;
      uint64_t v22 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiService::onWiFiDeviceClientScanCallback, event:%{public, location:escape_only }s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v14 = 0;
  }

  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100351934;
  v11[3] = &unk_1018335D8;
  _DWORD v11[4] = a4;
  void v11[5] = a1;
  void v11[6] = a2;
  int v12 = a3;
  [v10 sync:v11];
  if (v14) {
    os_activity_scope_leave(&state);
  }
}

void sub_10034F770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034F790(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  int v4 = v1 + 103;
  (*(void (**)(void *))(v1[103] + 16LL))(v1 + 103);
  __int16 v5 = 256;
  int v3 = 4;
  (*(void (**)(void *, int *, void, uint64_t))(*v1 + 144LL))(v1, &v3, 0LL, 0xFFFFFFFFLL);
  return (*(uint64_t (**)(void *))(v1[103] + 24LL))(v1 + 103);
}

void sub_10034F80C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10034F820(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v11 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16LL))(a1 + 824);
  __int16 v12 = 256;
  if (*(void *)(a1 + 736))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v3 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WifiDpc, onDpcSource", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      __int16 v10 = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiDpc, onDpcSource",  &v10,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::onDpcSource()", "%s\n", v7);
    }

    int v4 = *(dispatch_queue_s **)(a1 + 736);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10034FB78;
    block[3] = &unk_10181D3D0;
    block[4] = a1;
    dispatch_async(v4, block);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    __int16 v5 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "WifiDpc, null dispatch queue (shutdown?), #KvCheck",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      __int16 v10 = 0;
      __int128 v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiDpc, null dispatch queue (shutdown?), #KvCheck",  &v10,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::onDpcSource()", "%s\n", v8);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_10034FB4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_10034FB78(uint64_t a1)
{
}

uint64_t sub_10034FB80(uint64_t a1)
{
  return sub_10034FB90(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10034FB90(void *a1, int a2)
{
  int v4 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16LL))(a1 + 103);
  if (a1[38] && a1[37])
  {
    WiFiManagerClientQuiesceWiFi();
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
    __int16 v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "IMD: doQuiesceWifi, %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018335B8);
      }
      v8[0] = 67109120;
      v8[1] = a2;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "IMD: doQuiesceWifi, %d",  v8);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::doQuiesceWifi(BOOL)", "%s\n", v7);
    }
  }

  return (*(uint64_t (**)(void *))(*v4 + 24LL))(v4);
}

void sub_10034FD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10034FDB0@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  int v4 = sub_10000CF44(&v22, (uint64_t)"scanStats, numOfScan, S1, ", 26LL);
  __int16 v5 = (void *)std::ostream::operator<<(v4, a1[11]);
  int v6 = sub_10000CF44(v5, (uint64_t)", S2, ", 6LL);
  uint64_t v7 = (void *)std::ostream::operator<<(v6, a1[12]);
  __int128 v8 = sub_10000CF44(v7, (uint64_t)", 5GHz S1, ", 11LL);
  uint64_t v9 = (void *)std::ostream::operator<<(v8, a1[15]);
  int v10 = sub_10000CF44(v9, (uint64_t)", Fast, ", 8LL);
  uint64_t v11 = (void *)std::ostream::operator<<(v10, a1[10]);
  __int16 v12 = sub_10000CF44(v11, (uint64_t)", Cached, ", 10LL);
  CFBooleanRef v13 = (void *)std::ostream::operator<<(v12, a1[8]);
  char v14 = sub_10000CF44(v13, (uint64_t)", numOfScanErrors, ", 19LL);
  BOOL v15 = (void *)std::ostream::operator<<(v14, a1[1]);
  int v16 = sub_10000CF44(v15, (uint64_t)", numOfScanBusies, ", 19LL);
  __int16 v17 = (void *)std::ostream::operator<<(v16, a1[2]);
  double v18 = sub_10000CF44(v17, (uint64_t)", numOfReceivedScans, ", 22LL);
  std::ostream::operator<<(v18, *a1);
  std::stringbuf::str(a2, &v23);
  *(void *)((char *)v21
  uint64_t v22 = v19;
  std::streambuf::~streambuf(&v23);
  return std::ios::~ios(&v24);
}

void sub_10034FF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10034FF34(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  __int128 v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLWifiService");
  sub_1003500C8((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  void *v8 = off_101833488;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10034FFD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_10034FFFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  char v10 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLWifiService");
  sub_1003500C8((uint64_t)v10, a1, (uint64_t *)__p, a4, a2, a3);
  void *v10 = off_101833488;
  *a5 = v10;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10035009C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003500C8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101833710;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + memset(&buf[7], 0, 32) = a6;
  else {
    char v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_10035019C(uint64_t a1)
{
  return WiFiManagerClientSetBackgroundScanNetworks(*(void *)(*(void *)(a1 + 8) + 304LL));
}

void sub_1003501A8(uint64_t a1, uint64_t a2)
{
  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v14 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101833538);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        std::string v20 = v11;
        __int16 v21 = 1026;
        int v22 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101833538);
        }
        char v12 = (void *)(a1 + 8);
        int v15 = 136446466;
        int v16 = v12;
        __int16 v17 = 1026;
        int v18 = a2;
        LODWORD(v14) = 18;
        id v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiSe rvice_Type::RegInfo>::removeClient(int) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v13);
      }
    }
  }

uint64_t sub_10035041C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1003541CC(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96LL))(a1, a2, &v10, v7);
  }

  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))(a1, a2, &v9);
  }

uint64_t sub_10035049C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101937720);
}

BOOL sub_1003504B0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        __int16 v21 = (uint64_t *)v15;
      }
      else {
        __int16 v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    int v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      double v29 = v11;
      __int16 v30 = 1026;
      int v31 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101833538);
      }
      int v22 = (void *)(a1 + 8);
      int v24 = 136446466;
      BOOL v25 = v22;
      __int16 v26 = 1026;
      int v27 = a2;
      std::stringbuf v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
                      &v24,
                      18);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiServ ice_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notifica tion, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v23);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100350730(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }

  while (*v11);
  if (v8 == v3) {
    return 0LL;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0LL;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0LL;
  }
  *(_WORD *)a3 = *(_WORD *)v12;
  sub_1000C6A74(a3 + 8, v12 + 8);
  *(void *)(a3 + 104) = *(void *)(v12 + 104);
  if (v12 != a3) {
    sub_1002DD704( (uint64_t *)(a3 + 112),  *(void *)(v12 + 112),  *(void *)(v12 + 120),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(v12 + 120) - *(void *)(v12 + 112)) >> 3));
  }
  *(void *)(a3 + 136) = *(void *)(v12 + 136);
  return 1LL;
}

uint64_t sub_1003507F4(uint64_t a1, int *a2, uint64_t a3)
{
  int v10 = *a2;
  uint64_t v12 = &v10;
  uint64_t v5 = sub_10023347C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_1012CF090, &v12);
  sub_10005F550((uint64_t)(v5 + 8), &v11);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    int v7 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 1LL;
}

void sub_1003508A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1003508B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v4 = -256;
  char v5 = 0;
  char v8 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0LL;
  (*(void (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  &v4,  a3,  a4,  0LL);
  __int128 v11 = (void **)v9 + 1;
  sub_100023498(&v11);
  if (v8)
  {
    if (v7 < 0) {
      operator delete(__p);
    }
  }

void sub_100350938(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10035094C(uint64_t a1, int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    __int128 v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)(a1 + 8);
      id v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)double v65 = 0;
      *(_WORD *)&v65[4] = 2082;
      *(void *)&v65[6] = "";
      *(_WORD *)&v65[14] = 2082;
      *(void *)&v65[16] = "activity";
      __int16 v66 = 2082;
      BOOL v67 = v12;
      __int16 v68 = 2050;
      BOOL v69 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    uint64_t v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        BOOL v20 = (__n128 **)v14;
      }
      else {
        BOOL v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)BOOL v70 = &v70[8];
      memset(&v70[8], 0, 24);
      int v71 = 0LL;
      sub_1003521BC((uint64_t)buf, a2, (uint64_t)v70);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      __int16 v21 = v69;
      if (v69)
      {
        p_shared_owners = (unint64_t *)&v69->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&v65[4], *(void **)&v65[12]);
      int v24 = v71;
      if (v71)
      {
        BOOL v25 = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v70, *(void **)&v70[8]);
    }

    if (a4)
    {
      sub_10035237C(a3, buf);
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v27 = *(std::__shared_weak_count **)&v65[4];
      if (*(void *)&v65[4])
      {
        int v28 = (unint64_t *)(*(void *)&v65[4] + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v30 = sub_100351C0C(a3);
    if (a5 == -1)
    {
      sub_100351D0C((void *)a1, a2, v30);
    }

    else
    {
      uint64_t v31 = a1 + 88;
      uint64_t v32 = *(void *)(a1 + 88);
      if (!v32) {
        goto LABEL_48;
      }
      uint64_t v33 = a1 + 88;
      do
      {
        int v34 = *(_DWORD *)(v32 + 32);
        BOOL v35 = v34 < a5;
        if (v34 >= a5) {
          char v36 = (uint64_t *)v32;
        }
        else {
          char v36 = (uint64_t *)(v32 + 8);
        }
        if (!v35) {
          uint64_t v33 = v32;
        }
        uint64_t v32 = *v36;
      }

      while (*v36);
      if (v33 == v31 || *(_DWORD *)(v33 + 32) > a5) {
LABEL_48:
      }
        uint64_t v33 = a1 + 88;
      uint64_t v62 = v33;
      unint64_t v37 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v38 = *a2;
      uint64_t v39 = (__n128 *)(a1 + 64);
      do
      {
        int v40 = *(_DWORD *)(v37 + 32);
        BOOL v41 = v40 < v38;
        if (v40 >= v38) {
          int v42 = (unint64_t *)v37;
        }
        else {
          int v42 = (unint64_t *)(v37 + 8);
        }
        if (!v41) {
          uint64_t v39 = (__n128 *)v37;
        }
        unint64_t v37 = *v42;
      }

      while (*v42);
      if (v39 == v15 || v38 < (signed __int32)v39[2].n128_u32[0])
      {
LABEL_59:
        BOOL v61 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101833538);
        }
        CFNumberRef v43 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v44 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, int *))(*(void *)a1 + 160LL))(v70, a1, a2);
          if (v70[23] >= 0) {
            unsigned int v45 = v70;
          }
          else {
            unsigned int v45 = *(_BYTE **)v70;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)double v65 = v44;
          *(_WORD *)&v65[8] = 1024;
          *(_DWORD *)&v65[10] = a5;
          *(_WORD *)&v65[14] = 2080;
          *(void *)&v65[16] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v70[23] & 0x80000000) != 0) {
            operator delete(*(void **)v70);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101833538);
          }
          CFNumberRef v46 = (void *)(a1 + 8);
          uint64_t v47 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v60 >= 0) {
            int v48 = __p;
          }
          else {
            int v48 = (void **)__p[0];
          }
          *(_DWORD *)BOOL v70 = 136315650;
          *(void *)&v70[4] = v46;
          *(_WORD *)&v70[12] = 1024;
          *(_DWORD *)&v70[14] = a5;
          *(_WORD *)&v70[18] = 2080;
          *(void *)&v70[20] = v48;
          BOOL v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "%s; client %d has deregistered, not notifying %s",
                          v70,
                          28,
                          v58);
          if (v60 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifi Service_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::Notifica tionData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v49);
        }

        goto LABEL_83;
      }

      BOOL v61 = v39;
      if (v33 == v31) {
        goto LABEL_60;
      }
      uint64_t v52 = v39[3].n128_i64[0];
      int v50 = v39 + 3;
      int v51 = (__n128 *)v52;
      if (!v52) {
        goto LABEL_60;
      }
      int v53 = *(_DWORD *)(v33 + 32);
      int v54 = v50;
      do
      {
        int v55 = v51[2].n128_i32[0];
        BOOL v56 = v55 < v53;
        if (v55 >= v53) {
          uint64_t v57 = v51;
        }
        else {
          uint64_t v57 = (__n128 *)&v51->n128_i8[8];
        }
        if (!v56) {
          int v54 = v51;
        }
        int v51 = (__n128 *)v57->n128_u64[0];
      }

      while (v57->n128_u64[0]);
      sub_1003520E0((_BYTE *)a1, (uint64_t)&v62, (uint64_t)&v61, v30);
    }

void sub_100350F68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100350FB4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      int v34 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101833538);
      }
      __int16 v4 = (void *)(a1 + 8);
      int v29 = 136315138;
      __int16 v30 = v4;
      char v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
                     (const char *)&v29);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiServ ice_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWif iService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v5);
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101833538);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      char v7 = (void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v34 = v7;
      __int16 v35 = 2048;
      v36[0] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101833538);
      }
      BOOL v25 = (void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 96);
      int v29 = 136315394;
      __int16 v30 = v25;
      __int16 v31 = 2048;
      v32[0] = v26;
      int v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
                      (const char *)&v29,
                      22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiServ ice_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWif iService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v27);
    }

    int v9 = *(void **)(a1 + 80);
    if (v9 != (void *)(a1 + 88))
    {
      uint64_t v10 = (void *)(a1 + 8);
      do
      {
        __int128 v11 = (void *)v9[5];
        if (v11 != v9 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101833538);
            }
            uint64_t v12 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              id v13 = (void *)(a1 + 8);
              int v14 = *((_DWORD *)v9 + 8);
              int v15 = *((_DWORD *)v11 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v34 = v13;
              __int16 v35 = 1024;
              LODWORD(v36[0]) = v14;
              WORD2(v36[0]) = 1024;
              *(_DWORD *)((char *)v36 + 6) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101833538);
              }
              BOOL v19 = (void *)(a1 + 8);
              int v20 = *((_DWORD *)v9 + 8);
              int v21 = *((_DWORD *)v11 + 7);
              int v29 = 136315650;
              __int16 v30 = v19;
              __int16 v31 = 1024;
              LODWORD(v32[0]) = v20;
              WORD2(v32[0]) = 1024;
              *(_DWORD *)((char *)v32 + 6) = v21;
              int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                              (const char *)&v29,
                              24,
                              v28);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CL WifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, Notificati onData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiS ervice_Type::RegInfo]",  "%s\n",  v22);
            }

            signed __int32 v16 = (void *)v11[1];
            if (v16)
            {
              do
              {
                int v17 = v16;
                signed __int32 v16 = (void *)*v16;
              }

              while (v16);
            }

            else
            {
              do
              {
                int v17 = (void *)v11[2];
                BOOL v18 = *v17 == (void)v11;
                __int128 v11 = v17;
              }

              while (!v18);
            }

            __int128 v11 = v17;
          }

          while (v17 != v9 + 6);
        }

        unint64_t v23 = (void *)v9[1];
        if (v23)
        {
          do
          {
            int v24 = v23;
            unint64_t v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            int v24 = (void *)v9[2];
            BOOL v18 = *v24 == (void)v9;
            int v9 = v24;
          }

          while (!v18);
        }

        int v9 = v24;
      }

      while (v24 != (void *)(a1 + 88));
    }
  }

void sub_100351560(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035416C(a1);
  operator delete(v1);
}

id sub_100351574(uint64_t a1, int a2, void *a3)
{
  id result = sub_1003525C8(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_1003515C0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1003515EC(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100351618(uint64_t a1)
{
  return sub_10034F820(*(void *)(a1 + 32));
}

void sub_100351620(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_10035164C(uint64_t a1)
{
  return sub_100346BE0(*(void *)(a1 + 32));
}

uint64_t sub_100351654(uint64_t a1)
{
  return sub_100338C4C(*(void **)(a1 + 32));
}

uint64_t sub_100351660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100346354(*(_BYTE **)(a1 + 32), a2, a3, *(const void **)(a1 + 56));
}

uint64_t sub_100351670(uint64_t a1)
{
  return sub_10033CAF0(*(void *)(a1 + 32));
}

uint64_t sub_100351678(uint64_t a1)
{
  return sub_10033D448(*(double **)(a1 + 32));
}

uint64_t sub_100351680(uint64_t a1, uint64_t a2)
{
  return sub_10033D7B0(*(void **)(a1 + 32), a2, *(const __CFDictionary **)(a1 + 48));
}

uint64_t sub_100351690(uint64_t a1, uint64_t a2)
{
  return sub_10033E828(*(void **)(a1 + 32), a2, *(void *)(a1 + 48));
}

uint64_t sub_1003516A0(uint64_t a1, uint64_t a2)
{
  return sub_100340410(*(void *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
}

void sub_1003516B0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1003516C4(uint64_t a1, uint64_t a2)
{
  return sub_100340734(*(void *)(a1 + 32), a2, *(const __CFDictionary **)(a1 + 48));
}

void sub_1003516D4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1003516E4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 88))
  {
    *(void *)a1 = *(void *)a2;
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
    __int128 v5 = *(_OWORD *)(a2 + 48);
    __int128 v4 = *(_OWORD *)(a2 + 64);
    __int128 v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + memset(&buf[7], 0, 32) = v6;
  }

  else
  {
    sub_1000C69DC(a1, a2);
    *(_BYTE *)(a1 + 88) = 1;
  }

  return a1;
}

void sub_100351754(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100351780(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100351790(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C((_BYTE *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }

  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  __int128 v8 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + memset(&buf[7], 0, 32) = v6;
  *(_BYTE *)(a1 + 88) = 1;
  return a1;
}

__n128 sub_100351804(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v4 = (void **)(a1 + 8);
      __int128 v5 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v5;
      *(_BYTE *)(a2 + 31) = 0;
      *(_BYTE *)(a2 + 8) = 0;
      __n128 result = *(__n128 *)(a2 + 32);
      __int128 v7 = *(_OWORD *)(a2 + 48);
      __int128 v8 = *(_OWORD *)(a2 + 64);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      *(__n128 *)(a1 + memset(&buf[7], 0, 32) = result;
    }
  }

  else if (*(_BYTE *)(a1 + 88))
  {
    *(_BYTE *)(a1 + 88) = 0;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    __int128 v9 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v9;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 8) = 0LL;
    __n128 result = *(__n128 *)(a2 + 32);
    __int128 v10 = *(_OWORD *)(a2 + 48);
    __int128 v11 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(__n128 *)(a1 + memset(&buf[7], 0, 32) = result;
    *(_BYTE *)(a1 + 88) = 1;
  }

  return result;
}

uint64_t sub_1003518EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      operator delete(v2);
    }
  }

  return a1;
}

uint64_t sub_100351934(uint64_t a1, uint64_t a2)
{
  return sub_100343B34(*(void *)(a1 + 32), a2, *(const __CFArray **)(a1 + 48), *(_DWORD *)(a1 + 56));
}

uint64_t sub_100351948(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_100351990((void *)a1, a2);
  return a1;
}

void sub_100351974(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_101233EA0(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100351990(void *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    __n128 result = sub_10001B72C( result,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *((_BYTE *)v2 + 24) = 1;
  }

  return result;
}

__n128 sub_1003519D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  __int128 v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + memset(&buf[7], 0, 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

void *sub_1003519EC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = a1[4];
  a2[2] = 0LL;
  a2[3] = 0LL;
  a2[1] = 0LL;
  return sub_1002DE3C8(a2 + 1, a1[5], a1[6], 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(a1[6] - a1[5]) >> 3));
}

void *sub_100351A24(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[4];
  *(void *)(a1 + 40) = 0LL;
  uint64_t v3 = (void *)(a1 + 40);
  *(v3 - 1) = v2;
  v3[1] = 0LL;
  void v3[2] = 0LL;
  return sub_1002DE3C8(v3, a2[5], a2[6], 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(a2[6] - a2[5]) >> 3));
}

void sub_100351A5C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_100023498(&v1);
}

uint64_t sub_100351A84(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  __int128 v4 = (void **)a1[2];
  if (v4 == v3)
  {
    __int128 v4 = (void **)a1[1];
  }

  else
  {
    unint64_t v5 = a1[4];
    __int128 v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (uint64_t)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != v8)
    {
      do
      {
        sub_100351BC8((uint64_t)v2, v7);
        v7 += 96LL;
        if (v7 - (void)*v6 == 4032)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      __int128 v4 = (void **)a1[2];
    }
  }

  void *v2 = 0LL;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      __int128 v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8LL);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }

    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    id v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000EA11C((uint64_t)a1);
}

void sub_100351BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 16);
  if (v3)
  {
    *(void *)(a2 + 24) = v3;
    operator delete(v3);
  }

CLCppContainer *sub_100351C0C(uint64_t a1)
{
  uint64_t v2 = operator new(0x90uLL);
  *(_WORD *)uint64_t v2 = *(_WORD *)a1;
  sub_1000C6980(v2 + 8, a1 + 8);
  uint64_t v3 = *(void *)(a1 + 104);
  *((void *)v2 + 14) = 0LL;
  *((void *)v2 + 13) = v3;
  *((void *)v2 + 15) = 0LL;
  *((void *)v2 + 16) = 0LL;
  sub_1002DE3C8( (void *)v2 + 14,  *(void *)(a1 + 112),  *(void *)(a1 + 120),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3));
  *((void *)v2 + 17) = *(void *)(a1 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100352570;
  void v5[3] = &unk_10181D3D0;
  void v5[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v5,  0LL,  144LL);
}

void sub_100351CD8(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 96))
  {
  }

  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_100351D0C(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    unint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        int v50 = v9;
        id v13 = sub_1003525C8(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          signed __int32 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              BOOL v49 = v19;
              sub_1003520E0(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  uint64_t v32 = (uint64_t *)v27;
                }
                else {
                  uint64_t v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              int v50 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                __int16 v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    uint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    uint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    __int16 v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  CFNumberRef v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      CFNumberRef v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      __int16 v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              BOOL v49 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101833538);
              }
              int v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                BOOL v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)std::string buf = 136446466;
                BOOL v56 = v25;
                __int16 v57 = 1026;
                int v58 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101833538);
                }
                unsigned int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 8);
                int v51 = 136446466;
                uint64_t v52 = v45;
                __int16 v53 = 1026;
                int v54 = v46;
                LODWORD(v48) = 18;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiSe rvice_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, Notific ationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]",  "%s\n",  v47);
              }
            }
          }

          while (v14 != v50 + 6);
        }
      }
    }
  }

_BYTE *sub_1003520E0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_1003525C8(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    int v14 = (int *)(*(void *)a2 + 32LL);
    uint64_t v12 = sub_1003529EC(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    __n128 result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 5);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

uint64_t sub_1003521BC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_100352218(a1 + 8, a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + memset(&buf[7], 0, 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    __int128 v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t sub_100352218(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_10035226C((_OWORD *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100352254(_Unwind_Exception *a1)
{
}

_OWORD *sub_10035226C(_OWORD *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    __int128 v6 = (uint64_t *)result + 1;
    do
    {
      __n128 result = sub_1003522F0(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      unint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = *(int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

_OWORD *sub_1003522F0(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  __int128 v6 = sub_1000EBE2C(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    _DWORD v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_1000085FC(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

void *sub_10035237C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA8uLL);
  __n128 result = sub_1003523D4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1003523C0(_Unwind_Exception *a1)
{
}

void *sub_1003523D4(void *a1, uint64_t a2)
{
  a1[2] = 0LL;
  *a1 = off_101833658;
  a1[1] = 0LL;
  sub_100352494((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100352420(_Unwind_Exception *a1)
{
}

void sub_100352434(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101833658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100352448(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101833658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10035246C(uint64_t a1)
{
}

void *sub_100352494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  sub_1000C6980((_BYTE *)(a2 + 8), a3 + 8);
  uint64_t v5 = *(void *)(a3 + 104);
  *(void *)(a2 + 112) = 0LL;
  *(void *)(a2 + 104) = v5;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  __n128 result = sub_1002DE3C8( (void *)(a2 + 112),  *(void *)(a3 + 112),  *(void *)(a3 + 120),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a3 + 120) - *(void *)(a3 + 112)) >> 3));
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  return result;
}

void sub_100352508(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 96)) {
    sub_101235DA0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100352524(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 112);
  sub_100023498(&v3);
  if (*(_BYTE *)(a2 + 96))
  {
  }

void sub_100352570(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 112);
    sub_100023498(&v2);
    if (*(_BYTE *)(v1 + 96))
    {
    }

    operator delete((void *)v1);
  }

id sub_1003525C8(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100352614(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100352614(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001012E6AB3LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    char v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    __int128 v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001012E6AB3LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    char v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  unint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiService_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_1003529C0(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t **sub_1003529EC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  __int128 v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        __int128 v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      __int128 v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    __int16 v11 = operator new(0x38uLL);
    void v11[8] = **a4;
    *((void *)v11 + 5) = 3600LL;
    *((void *)v11 + 6) = "na";
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t *sub_100352AB8(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)sub_1002FB00C((uint64_t)a1, &v9, a2);
  __int128 v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    __int128 v6 = (uint64_t *)operator new(0x28uLL);
    _DWORD v6[4] = *a3;
    sub_1000085FC(a1, v9, v7, v6);
  }

  return v6;
}

void sub_100352B38(void *a1)
{
  if (a1)
  {
    sub_100352B38(*a1);
    sub_100352B38(a1[1]);
    operator delete(a1);
  }

uint64_t sub_100352B70( uint64_t *a1, uint64_t *a2, __int128 *a3, int *a4, int *a5, int *a6, double *a7, uint64_t *a8, char *a9, char *a10, int *a11)
{
  uint64_t v12 = 0x2E8BA2E8BA2E8BA3LL * ((a1[1] - *a1) >> 3);
  unint64_t v13 = v12 + 1;
  int v20 = a10;
  if (0x5D1745D1745D1746LL * ((a1[2] - *a1) >> 3) > v13) {
    unint64_t v13 = 0x5D1745D1745D1746LL * ((a1[2] - *a1) >> 3);
  }
  else {
    unint64_t v21 = v13;
  }
  BOOL v31 = a1 + 2;
  if (v21)
  {
    int v26 = a8;
    uint64_t v25 = v12;
    int v22 = (char *)sub_100023598((uint64_t)(a1 + 2), v21);
    uint64_t v12 = v25;
    a8 = v26;
    int v20 = a10;
  }

  else
  {
    int v22 = 0LL;
  }

  uint64_t v27 = v22;
  int v28 = &v22[88 * v12];
  int v30 = &v22[88 * v21];
  sub_100352CF4((uint64_t)(a1 + 2), (uint64_t)v28, a2, a3, a4, a5, a6, a7, a8, a9, v20, a11);
  int v29 = v28 + 88;
  sub_100023524(a1, &v27);
  uint64_t v23 = a1[1];
  sub_100023728((uint64_t)&v27);
  return v23;
}

void sub_100352CE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

double sub_100352CF4( uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, int *a5, int *a6, int *a7, double *a8, uint64_t *a9, char *a10, char *a11, int *a12)
{
  uint64_t v17 = *a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1010DD48C(&v26, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v26 = *a4;
    uint64_t v27 = *((void *)a4 + 2);
  }

  int v18 = *a5;
  int v19 = *a6;
  int v20 = *a7;
  double result = *a8;
  uint64_t v22 = *a9;
  char v23 = *a10;
  char v24 = *a11;
  int v25 = *a12;
  *(void *)a2 = v17;
  *(_OWORD *)(a2 + 8) = v26;
  *(void *)(a2 + 24) = v27;
  *(_DWORD *)(a2 + memset(&buf[7], 0, 32) = v18;
  *(_DWORD *)(a2 + 36) = v19;
  *(_DWORD *)(a2 + 40) = v20;
  *(double *)(a2 + 48) = result;
  *(void *)(a2 + sub_1011C52D0(v33 - 56) = v22;
  *(_BYTE *)(a2 + 64) = v23;
  *(_BYTE *)(a2 + 65) = v24;
  *(_DWORD *)(a2 + 68) = v25;
  *(_BYTE *)(a2 + sub_1011C52D0(v15 - 72) = 0;
  *(void *)(a2 + 80) = 0LL;
  return result;
}

CLCppContainer *sub_100352DD0(uint64_t a1)
{
  id v2 = operator new(0x90uLL);
  *(_WORD *)id v2 = *(_WORD *)a1;
  sub_1000C6980(v2 + 8, a1 + 8);
  uint64_t v3 = *(void *)(a1 + 104);
  *((void *)v2 + 14) = 0LL;
  *((void *)v2 + 13) = v3;
  *((void *)v2 + 15) = 0LL;
  *((void *)v2 + 16) = 0LL;
  sub_1002DE3C8( (void *)v2 + 14,  *(void *)(a1 + 112),  *(void *)(a1 + 120),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3));
  *((void *)v2 + 17) = *(void *)(a1 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100352ED0;
  void v5[3] = &unk_10181D3D0;
  void v5[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v5,  0LL,  144LL);
}

void sub_100352E9C(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 96))
  {
  }

  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_100352ED0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (void **)(v1 + 112);
    sub_100023498(&v2);
    if (*(_BYTE *)(v1 + 96))
    {
    }

    operator delete((void *)v1);
  }

void sub_100352F28(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0LL, 24LL, &kCFTypeArrayCallBacks);
  for (uint64_t i = *a2; i != *a3; ++i)
  {
    int valuePtr = *i;
    if (valuePtr != -1)
    {
      int v10 = CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v11 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v12 = v11;
      if (v10) {
        BOOL v13 = v11 == 0LL;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        unint64_t v14 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240704;
          int v25 = valuePtr;
          __int16 v26 = 2050;
          uint64_t v27 = v10;
          __int16 v28 = 2050;
          CFNumberRef v29 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          v19[0] = 67240704;
          v19[1] = valuePtr;
          __int16 v20 = 2050;
          unint64_t v21 = v10;
          __int16 v22 = 2050;
          CFNumberRef v23 = v12;
          LODWORD(v16) = 28;
          int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  v19,  v16);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = const int *]",  "%s\n",  v15);
        }
      }

      else
      {
        CFDictionaryAddValue(v10, @"CHANNEL", v11);
        CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }

  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

void sub_100353228(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0LL, 24LL, &kCFTypeArrayCallBacks);
  for (uint64_t i = *a2; i != *a3; ++i)
  {
    int valuePtr = *i;
    if (valuePtr != -1)
    {
      int v10 = CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v11 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v12 = v11;
      if (v10) {
        BOOL v13 = v11 == 0LL;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        unint64_t v14 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240704;
          int v25 = valuePtr;
          __int16 v26 = 2050;
          uint64_t v27 = v10;
          __int16 v28 = 2050;
          CFNumberRef v29 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          v19[0] = 67240704;
          v19[1] = valuePtr;
          __int16 v20 = 2050;
          unint64_t v21 = v10;
          __int16 v22 = 2050;
          CFNumberRef v23 = v12;
          LODWORD(v16) = 28;
          int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  v19,  v16);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = int *]",  "%s\n",  v15);
        }
      }

      else
      {
        CFDictionaryAddValue(v10, @"CHANNEL", v11);
        CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }

  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

void sub_100353528(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    __int128 v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1003537F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10035383C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v5)
  {
    __int128 v6 = v5;
    operator delete(v5);
  }

void sub_100353898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1003538AC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    sub_10004C510(result, a4);
    double result = (void *)sub_100353930((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100353910( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100023498(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100353930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a2 != a3)
  {
    __int128 v6 = (__int128 *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(void *)uint64_t v4 = *((void *)v6 - 1);
      char v8 = (_BYTE *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_1010DD48C(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v10 = v18;
      }

      else
      {
        __int128 v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)char v8 = v9;
        uint64_t v10 = v4;
      }

      __int128 v11 = *(__int128 *)((char *)v6 + 24);
      __int128 v12 = *(__int128 *)((char *)v6 + 40);
      __int128 v13 = *(__int128 *)((char *)v6 + 56);
      *(void *)(v4 + 80) = *((void *)v6 + 9);
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 64) = v13;
      *(_OWORD *)(v4 + memset(&buf[7], 0, 32) = v11;
      uint64_t v4 = v10 + 88;
      uint64_t v18 = v10 + 88;
      __int128 v6 = (__int128 *)((char *)v6 + 88);
    }

    while (v7 + 88 != a3);
  }

  char v16 = 1;
  sub_1002DD9B8((uint64_t)v15);
  return v4;
}

void sub_100353A04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100353A18(void *a1, void *a2)
{
  unint64_t v4 = sub_1005B46E8((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  __int128 v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (sub_1007EC0B0(v11 + 2, a2)) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }

        else
        {
          v12 &= *(void *)&v5 - 1LL;
        }

        if (v12 != v9) {
          return 0LL;
        }
      }

      __int128 v11 = (void *)*v11;
    }

    while (v11);
  }

  return v11;
}

void sub_100353B10(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0LL, 24LL, &kCFTypeArrayCallBacks);
  for (uint64_t i = *a2; i != *a3; ++i)
  {
    int valuePtr = *i;
    if (valuePtr != -1)
    {
      uint64_t v10 = CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v11 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v12 = v11;
      if (v10) {
        BOOL v13 = v11 == 0LL;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        BOOL v14 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240704;
          int v25 = valuePtr;
          __int16 v26 = 2050;
          uint64_t v27 = v10;
          __int16 v28 = 2050;
          CFNumberRef v29 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          v19[0] = 67240704;
          v19[1] = valuePtr;
          __int16 v20 = 2050;
          uint64_t v21 = v10;
          __int16 v22 = 2050;
          CFNumberRef v23 = v12;
          LODWORD(v16) = 28;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  v19,  v16);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = std::__wrap_iter<int *>]",  "%s\n",  v15);
        }
      }

      else
      {
        CFDictionaryAddValue(v10, @"CHANNEL", v11);
        CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }

  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

void sub_100353E10(uint64_t a1, int **a2, int **a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0LL, 24LL, &kCFTypeArrayCallBacks);
  for (uint64_t i = *a2; i != *a3; ++i)
  {
    int valuePtr = *i;
    if (valuePtr != -1)
    {
      uint64_t v10 = CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v11 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v12 = v11;
      if (v10) {
        BOOL v13 = v11 == 0LL;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        BOOL v14 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240704;
          int v25 = valuePtr;
          __int16 v26 = 2050;
          uint64_t v27 = v10;
          __int16 v28 = 2050;
          CFNumberRef v29 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          v19[0] = 67240704;
          v19[1] = valuePtr;
          __int16 v20 = 2050;
          uint64_t v21 = v10;
          __int16 v22 = 2050;
          CFNumberRef v23 = v12;
          LODWORD(v16) = 28;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p",  v19,  v16);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = std::__wrap_iter<const int *>]",  "%s\n",  v15);
        }
      }

      else
      {
        CFDictionaryAddValue(v10, @"CHANNEL", v11);
        CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }

  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

uint64_t sub_100354110(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x2A) {
    a2 = 1;
  }
  if (v2 < 0x54) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 42LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10035416C(uint64_t a1)
{
  *(void *)a1 = off_101833710;
  unint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

id sub_1003541CC(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100354218(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100354218(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    BOOL v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001012E6AECLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    int v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    unint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x80000001012E6AECLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101833698);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    int v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint8x8_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiService_Type::RegInfo, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

  ;
}

void sub_1003545D8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100354674(_Unwind_Exception *a1)
{
}

void sub_10035468C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100354718(_Unwind_Exception *a1)
{
}

uint64_t sub_100354A28(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0LL;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (1)
        {
          uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v18 = v17 + 1;
          if (v17 == -1 || v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0) {
            goto LABEL_54;
          }
          v14 += 7;
          BOOL v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_56;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_56:
        uint64_t v37 = 44LL;
        goto LABEL_61;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v16 = 0LL;
        while (2)
        {
          uint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
            v16 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v10 = v22++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_60;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_60:
        uint64_t v37 = 40LL;
LABEL_61:
        *(_DWORD *)(a1 + v37) = v16;
        continue;
      case 3u:
        unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 <= 0xFFFFFFFFFFFFFFF7LL && v26 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          uint64_t v27 = 0LL;
        }

        uint64_t v38 = 8LL;
        goto LABEL_74;
      case 4u:
        unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v28 <= 0xFFFFFFFFFFFFFFF7LL && v28 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          uint64_t v27 = 0LL;
        }

        uint64_t v38 = 16LL;
        goto LABEL_74;
      case 5u:
        unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7LL && v29 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          uint64_t v27 = 0LL;
        }

        uint64_t v38 = 24LL;
        goto LABEL_74;
      case 6u:
        *(_BYTE *)(a1 + 52) |= 1u;
        unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFF7LL && v30 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v27 = 0LL;
        }

        uint64_t v38 = 32LL;
LABEL_74:
        *(void *)(a1 + v38) = v27;
        continue;
      case 7u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0LL;
        *(_BYTE *)(a1 + 52) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v35 = v34 + 1;
      if (v34 == -1 || v35 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
      v33 |= (unint64_t)(v36 & 0x7F) << v31;
      if ((v36 & 0x80) == 0) {
        goto LABEL_63;
      }
      v31 += 7;
      BOOL v10 = v32++ >= 9;
      if (v10)
      {
        uint64_t v33 = 0LL;
        goto LABEL_65;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v33 = 0LL;
    }
LABEL_65:
    *(_BYTE *)(a1 + 48) = v33 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100355650(uint64_t a1)
{
  return a1;
}

uint64_t sub_100355680(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &off_1018337C8;
  sub_101204164((unsigned __int8 *)(a1 + 8), "NatalimetryMaxDelay", &qword_1012E6B60, 0);
  *(void *)a1 = off_101833758;
  *(void *)(a1 + memset(&buf[7], 0, 32) = 0LL;
  *(void *)(a1 + 40) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 48) = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  *(_OWORD *)(a1 + 64) = 0u;
  char v9 = (uint64_t *)(a1 + 64);
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  LOBYTE(v18) = 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 217), "LogBinaryNatalimetryOutputs", (unsigned __int8 *)&v18, 0);
  LODWORD(v18) = -1082130432;
  sub_101206C88((unsigned __int8 *)(a1 + 220), "OverrideUserMetsWithMets", &v18, 0);
  LODWORD(v18) = -1082130432;
  sub_101206C88((unsigned __int8 *)(a1 + 232), "OverrideRawTruthMetsWithMets", &v18, 0);
  *(void *)(a1 + 248) = off_10182B230;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + sub_10000AE14(v1 + 296) = 0u;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 312) = a1 + 320;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = 0x10000000000000LL;
  *(_DWORD *)(a1 + 2sub_1011C52D0(v33 - 56) = 3;
  *(void *)(a1 + 344) = off_10182B230;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 408) = a1 + 416;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 4memset(&buf[7], 0, 32) = 0x10000000000000LL;
  *(_DWORD *)(a1 + 352) = 3;
  *(void *)(a1 + 440) = a3;
  sub_10083BFD8(a1 + 448, a3);
  sub_100C5A538(a1 + 520);
  int v10 = sub_100E02D88();
  sub_100C5FE20(v10, &v18);
  uint64_t v11 = v18;
  uint64_t v18 = 0LL;
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + memset(&buf[7], 0, 32) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 40LL))(v12);
    uint64_t v13 = v18;
    uint64_t v18 = 0LL;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 40LL))(v13);
    }
  }

  *(void *)(a1 + sub_1011C52D0(v33 - 56) = objc_alloc_init(&OBJC_CLASS___CLRunningPowerHealthKitWriter);
  char v14 = operator new(0x68uLL);
  double v15 = sub_100BCA91C((uint64_t)v14);
  uint64_t v16 = *v9;
  *char v9 = (uint64_t)v14;
  if (v16) {
    (*(void (**)(uint64_t, double))(*(void *)v16 + 8LL))(v16, v15);
  }
  return a1;
}

void sub_1003558A0(_Unwind_Exception *a1)
{
  char v9 = v6;
  operator delete(v9);
  sub_1003580A0(v7);
  sub_10083C03C(v5);
  sub_10020AFD8(v4);
  sub_10020AFD8(v3);
  sub_100231C10(v8 + 13);
  sub_100231C10(v8 + 7);
  sub_100210578(v8 + 1);
  uint64_t v11 = *v8;
  uint64_t *v8 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  sub_10000AE14(v2);
  uint64_t v12 = *(void *)(v1 + 32);
  *(void *)(v1 + memset(&buf[7], 0, 32) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 40LL))(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100355964(uint64_t a1)
{
  *(void *)a1 = off_101833758;

  sub_1003580A0((void *)(a1 + 520));
  sub_10083C03C(a1 + 448);
  *(void *)(a1 + 344) = off_10182B230;
  sub_100008390(a1 + 408, *(void **)(a1 + 416));
  sub_100210578((void *)(a1 + 360));
  *(void *)(a1 + 248) = off_10182B230;
  sub_100008390(a1 + 312, *(void **)(a1 + 320));
  sub_100210578((void *)(a1 + 264));
  sub_100231C10((void *)(a1 + 168));
  sub_100231C10((void *)(a1 + 120));
  sub_100210578((void *)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_10000AE14(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + memset(&buf[7], 0, 32) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  }
  return a1;
}

void sub_100355A3C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100355964(a1);
  operator delete(v1);
}

void sub_100355A50(uint64_t a1, uint64_t a2)
{
}

void sub_100355A58(uint64_t a1)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101833800);
  }
  uint64_t v2 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Pausing calorimetry processing", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101833800);
    }
    LOWORD(v8[0]) = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "Pausing calorimetry processing",  v8,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLCalorieController::pause()", "%s\n", v7);
  }

  *(_BYTE *)(a1 + 216) = 1;
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 218))
  {
    double v4 = Current;
    v8[0] = &off_101857FE0;
    char v9 = 1;
    *(double *)&v8[1] = Current;
    uint64_t v5 = sub_100E00E14();
    sub_100E022E0(v5, (uint64_t)v8);
    sub_101125260(buf);
    sub_10113AE6C(buf);
    v13 |= 1u;
    double v12 = v4;
    uint64_t v6 = v11;
    *(_BYTE *)(v11 + 12) |= 1u;
    *(_BYTE *)(v6 + 8) = 1;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_101833820);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

void sub_100355CB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100355CD4(uint64_t a1)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101833800);
  }
  uint64_t v2 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resuming calorimetry processing", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101833800);
    }
    LOWORD(v6) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "Resuming calorimetry processing",  &v6,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLCalorieController::resume()", "%s\n", v5);
  }

  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a1 + 218))
  {
    uint64_t v6 = &off_101857FE0;
    char v8 = 0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v3 = sub_100E00E14();
    sub_100E022E0(v3, (uint64_t)&v6);
    sub_101125260(buf);
    sub_10113AE6C(buf);
    v12 |= 1u;
    CFAbsoluteTime v11 = Current;
    uint64_t v4 = v10;
    *(_BYTE *)(v10 + 12) |= 1u;
    *(_BYTE *)(v4 + 8) = 0;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_101833820);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

void sub_100355F1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100355F3C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
  {
    double v4 = sub_100355FA8((void *)(a1 + 72), (double *)a2);
    (*(void (**)(void, uint64_t, double))(**(void **)(*(void *)(a1 + 40) + 48LL) + 32LL))( *(void *)(*(void *)(a1 + 40) + 48LL),  a2,  v4);
    sub_10035602C(a1, *(double *)a2);
  }

double sub_100355FA8(void *a1, double *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100358164(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  double result = *a2;
  *(double *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void sub_10035602C(uint64_t a1, double a2)
{
  void (***v5)(_BYTE *__return_ptr, void, _OWORD *, uint64_t, void, double);
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  double v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  float v16;
  os_log_s *v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23;
  float v24;
  float v25;
  __int32 v26;
  NSDate *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  float v44;
  float v45;
  double v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  BOOL v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  os_log_s *v62;
  float v63;
  float v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  float v70;
  double v71;
  uint64_t v72;
  _BYTE *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  float v87;
  float v88;
  int8x16_t v89;
  int v90;
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  int v95;
  BOOL v96;
  int v97;
  int v98;
  int v99;
  float32x2_t v100;
  float64x2_t v101;
  int v102;
  char v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  dispatch_queue_t *v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  float v124;
  float v125;
  double v126;
  uint64_t v127;
  void **v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  dispatch_queue_t *v140;
  __int128 v141;
  double v142;
  double v143;
  uint64_t v144;
  double v145;
  uint64_t (**v146)();
  double v147;
  double v148;
  float64x2_t v149;
  void *v150;
  char *v151;
  _OWORD *v152;
  const char *v153;
  char *v154;
  void *v155;
  _OWORD *v156;
  char *v157;
  void *v158;
  void *v159;
  _OWORD *v160;
  _OWORD *v161;
  _OWORD *v162;
  char *v163;
  char *v164;
  char *v165;
  _OWORD *v166;
  char *v167;
  uint64_t v168;
  double v169;
  float v170;
  float v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  uint64_t v178;
  void *v179[2];
  char v180;
  float v181;
  float v182;
  uint64_t v183;
  float v184;
  float v185;
  double v186[2];
  char v187;
  uint64_t v188;
  float v189;
  float v190;
  float v191;
  float v192;
  unsigned int v193;
  float v194;
  unsigned int v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  char v198[8];
  double v199;
  _OWORD v200[14];
  uint64_t v201;
  _BYTE __p[32];
  __int128 v203;
  _BYTE v204[32];
  _BYTE v205[96];
  double v206;
  __int16 v207;
  int v208;
  __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  __int16 v213;
  int v214;
  __int16 v215;
  int v216;
  __int16 v217;
  uint64_t v218;
  __int16 v219;
  uint64_t v220;
  __int16 v221;
  int v222;
  __int16 v223;
  uint64_t v224;
  _BYTE buf[32];
  __int128 v226;
  _BYTE v227[32];
  _BYTE v228[64];
  _BYTE v229[32];
  double v230;
  _OWORD v231[110];
  uint64_t v232;
  char v233;
  _OWORD v234[9];
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  if ((*(unsigned int (**)(void, _OWORD *))(**(void **)(*(void *)(a1 + 40) + 48LL) + 24LL))( *(void *)(*(void *)(a1 + 40) + 48LL),  v234))
  {
    uint64_t v5 = *(void (****)(_BYTE *__return_ptr, void, _OWORD *, uint64_t, void, double))(a1 + 32);
    uint64_t v6 = (*(uint64_t (**)(void, double))(**(void **)(*(void *)(a1 + 40) + 8LL) + 48LL))( *(void *)(*(void *)(a1 + 40) + 8LL),  a2);
    (**v5)(buf, v5, v234, v6, *(void *)(a1 + 40), a2);
    (*(void (**)(void, void, double))(**(void **)buf + 24LL))(*(void *)buf, *(void *)(a1 + 40), a2);
    uint64_t v7 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      unint64_t v8 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        char v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

  if (!*(_BYTE *)(a1 + 216))
  {
    __int128 v175 = 0LL;
    uint64_t v176 = 0LL;
    uint64_t v148 = 0.0;
    __int128 v173 = 0LL;
    __int128 v174 = 0LL;
    __int128 v178 = a1 + 72;
    __int128 v168 = 0LL;
    __int128 v167 = (char *)&v231[18] + 8;
    uint64_t v166 = &v231[24];
    v4.f64[0] = 0.0;
    __int16 v149 = v4;
    HIDWORD(v147) = 1067869798;
    uint64_t v146 = &off_101858050;
    uint64_t v164 = (char *)&v231[27] + 8;
    __int16 v165 = (char *)&v231[26] + 4;
    uint64_t v162 = (_OWORD *)((char *)&v231[31] + 8);
    __int16 v163 = (char *)&v231[29] + 8;
    int v160 = &v231[43];
    __int16 v161 = (_OWORD *)((char *)&v231[37] + 8);
    double v158 = (void *)((char *)&v231[46] + 14);
    __int16 v159 = (void *)&v231[45] + 1;
    int v156 = &v231[65];
    __int16 v157 = (char *)&v231[63] + 8;
    int v154 = (char *)&v231[69] + 8;
    __int16 v155 = (void *)&v231[66] + 1;
    int v152 = &v231[73];
    __int16 v153 = (const char *)&v231[71];
    uint64_t v150 = (void *)&v231[76] + 1;
    __int128 v151 = (char *)&v231[74] + 8;
    while (1)
    {
      if (!*(void *)(a1 + 112))
      {
LABEL_146:
        __int16 v139 = sub_100F5A080();
        *((void *)&v141 + 1) = __PAIR64__(v168, LODWORD(v148));
        *(void *)&__int16 v141 = __PAIR64__(HIDWORD(v148), v173);
        sub_100F5C37C( v139,  SHIDWORD(v175),  SHIDWORD(v173),  v175,  v174,  v176,  SHIDWORD(v174),  SHIDWORD(v176),  *((float *)v149.f64 + 1),  *(float *)v149.f64,  v141,  SHIDWORD(v168));
        *(_DWORD *)std::string buf = HIDWORD(v175);
        *(_DWORD *)&uint8_t buf[4] = v176;
        *(_DWORD *)&uint8_t buf[8] = v175;
        *(_DWORD *)&_BYTE buf[12] = HIDWORD(v176);
        *(void *)&uint8_t buf[16] = v168;
        int v140 = (dispatch_queue_t *)sub_100B354EC();
        sub_100B36560(v140, (uint64_t)buf);
        return;
      }

      if ((*(unsigned int (**)(void, double))(**(void **)(*(void *)(a1 + 40) + 48LL) + 48LL))( *(void *)(*(void *)(a1 + 40) + 48LL),  v10)
        && (*(unsigned int (**)(void, _OWORD *, double))(**(void **)(*(void *)(a1 + 40) + 48LL) + 24LL))( *(void *)(*(void *)(a1 + 40) + 48LL),  v234,  v10))
      {
        CFAbsoluteTime v11 = (uint64_t *)(a1 + 40);
        char v12 = (*(uint64_t (**)(void, char *, double))(**(void **)(*(void *)(a1 + 40) + 8LL) + 24LL))( *(void *)(*(void *)(a1 + 40) + 8LL),  v198,  v10);
        if (v199 > 120.0) {
          char v13 = v12;
        }
        else {
          char v13 = 0LL;
        }
        (***(void (****)(uint64_t *__return_ptr, void, _OWORD *, uint64_t, uint64_t, double))(a1 + 32))( &v196,  *(void *)(a1 + 32),  v234,  v13,  *v11,  v10);
        if ((sub_100449324(v196, *v11, v10) & 1) != 0
          || (char v14 = *(void *)(a1 + 112) + *(void *)(a1 + 104) - 1LL,
              vabdd_f64( *(double *)(*(void *)(*(void *)(a1 + 80) + ((v14 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v14 & 0x1FF)),  v10) > *(double *)(a1 + 16)))
        {
          sub_1003DB0E8(*(void *)(a1 + 40), v10);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v196 + 16LL))( &v188,  v196,  *(void *)(a1 + 40));
          double v15 = v195;
          if (v195)
          {
            uint64_t v16 = v190;
          }

          else
          {
            (*(void (**)(_BYTE *__return_ptr, void, void))(**(void **)(a1 + 32) + 16LL))( __p,  *(void *)(a1 + 32),  *(void *)(a1 + 40));
            (*(void (**)(_BYTE *__return_ptr, void, void))(**(void **)__p + 16LL))( buf,  *(void *)__p,  *(void *)(a1 + 40));
            char v19 = *(std::__shared_weak_count **)&__p[8];
            if (*(void *)&__p[8])
            {
              __int16 v20 = (unint64_t *)(*(void *)&__p[8] + 8LL);
              do
                char v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }

            uint64_t v16 = *(float *)&buf[12];
            double v15 = DWORD1(v226);
          }

          else {
            uint64_t v23 = DWORD2(v234[0]);
          }
          unint64_t v24 = sub_100B7E740((float *)(*(void *)(a1 + 40) + 1352LL), v23);
          char v25 = sub_100357594(v16, v24);
          if (v15 <= 1) {
            unint64_t v26 = 1;
          }
          else {
            unint64_t v26 = v15;
          }
          sub_1004F2598();
          sub_100C5A53C(a1 + 520, *(void *)(a1 + 40), (uint64_t)v186);
          if (v187)
          {
            uint64_t v27 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v186[1]);
            [*(id *)(a1 + 56) writeToHealthRunningPower:v27 startDate:v27 endDate:v186[0]];
          }

          if (*(_BYTE *)(a1 + 218) && *(_BYTE *)(*(void *)(a1 + 40) + 352LL))
          {
            *(void *)std::string __p = v146;
            *(void *)&__p[8] = CFAbsoluteTimeGetCurrent();
            *(float *)&__p[20] = v192;
            *(void *)&_BYTE __p[24] = v188;
            *(void *)&__int128 v203 = __PAIR64__(LODWORD(v191), v193);
            unint64_t v28 = sub_100E00E14();
            sub_100E022E0(v28, (uint64_t)__p);
            sub_101125260(buf);
            sub_10113AEC0(buf);
            v233 |= 1u;
            *(void *)&v231[27] = *(void *)&__p[8];
            unint64_t v29 = v232;
            unint64_t v30 = v192;
            *(_BYTE *)(v232 + 28) |= 1u;
            *(float *)(v29 + 8) = v30;
            char v31 = v232;
            unsigned int v32 = HIDWORD(v188);
            *(_DWORD *)(v232 + 16) = v188;
            *(_BYTE *)(v31 + 28) |= 4u;
            uint64_t v33 = v232;
            *(_BYTE *)(v232 + 28) |= 8u;
            *(_DWORD *)(v33 + 20) = v32;
            uint64_t v34 = v232;
            unint64_t v35 = v193;
            *(_BYTE *)(v232 + 28) |= 0x10u;
            *(_DWORD *)(v34 + 24) = v35;
            char v36 = v232;
            uint64_t v37 = v191;
            *(_BYTE *)(v232 + 28) |= 2u;
            *(float *)(v36 + 12) = v37;
            if (qword_1019A1D00 != -1) {
              dispatch_once(&qword_1019A1D00, &stru_101833820);
            }
            if (qword_1019A1D08) {
              sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
            }
            sub_101127D00((PB::Base *)buf);
          }

          uint64_t v38 = v192;
          __int128 v172 = v189;
          if (v194 <= 0.0) {
            uint64_t v39 = v192;
          }
          else {
            uint64_t v39 = v194;
          }
          uint64_t v40 = *((float *)&v188 + 1);
          __int128 v171 = *(float *)&v188;
          (*(void (**)(_BYTE *__return_ptr))(**(void **)(a1 + 32) + 8LL))(buf);
          (*(void (**)(uint64_t *__return_ptr, void, void))(**(void **)buf + 16LL))( &v183,  *(void *)buf,  *(void *)(a1 + 40));
          BOOL v41 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            uint64_t v42 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              CFNumberRef v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }

          __int128 v170 = v25;
          if (v184 > 0.0)
          {
            else {
              BOOL v44 = *((float *)&v147 + 1);
            }
            uint64_t v38 = v44 + v184;
            else {
              uint64_t v45 = *((float *)&v147 + 1);
            }
            else {
              uint64_t v39 = v185;
            }
          }

          unint64_t v46 = sub_100357898(a1 + 248, *(double *)(*(void *)(a1 + 40) + 120LL), v38);
          __int128 v169 = v40;
          uint64_t v47 = sub_100357898(a1 + 344, *(double *)(*(void *)(a1 + 40) + 120LL), v40);
          uint64_t v48 = *(float *)(a1 + 224);
          uint64_t v49 = v48;
          if (v48 <= -1.0)
          {
            uint64_t v50 = v46;
            uint64_t v49 = sub_100357594(v50, v24);
            uint64_t v48 = *(float *)(a1 + 224);
          }

          unint64_t v182 = v49;
          if (v48 <= -1.0) {
            uint64_t v48 = sub_100357594(v38, v24);
          }
          int v51 = *(float *)(a1 + 236);
          if (v51 <= -1.0) {
            int v51 = sub_100357594(v39, v24);
          }
          uint64_t v52 = v47;
          __int16 v53 = sub_100357594(v52, v24);
          __int128 v54 = sub_10083C040(a1 + 448, *(void *)(a1 + 40), v48);
          unint64_t v177 = sub_100357914( *(double *)(*(void *)(a1 + 40) + 128LL) - *(double *)(*(void *)(a1 + 40) + 120LL),  v54,  v239,  (void *)(a1 + 120),  &v182);
          BOOL v56 = v182;
          __int16 v57 = v182 > (float)(v24 + 0.00000011921) && v177 > 0.0;
          int v58 = *(void *)(a1 + 40);
          int v59 = *(float *)(v58 + 1364);
          __int128 v181 = v51;
          sub_100357914( *(double *)(v58 + 128) - *(double *)(v58 + 120),  v55,  v239,  (void *)(a1 + 168),  &v181);
          if (qword_1019344D0 != -1) {
            dispatch_once(&qword_1019344D0, &stru_101833800);
          }
          char v60 = v177 * (float)(v24 * v59) / 3600.0;
          BOOL v61 = v177 * (float)(v59 * v56) / 3600.0;
          uint64_t v62 = (os_log_s *)qword_1019344D8;
          if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
          {
            char v63 = v177 * (float)(v24 * v59) / 3600.0;
            __objc2_meth_list v64 = v53;
            double v65 = *(void *)(a1 + 40);
            __int16 v66 = *(void *)(a1 + 112) + *(void *)(a1 + 104) - 1LL;
            BOOL v67 = *(void *)(v65 + 128);
            __int16 v68 = *(void *)(*(void *)(*(void *)(a1 + 80) + ((v66 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v66 & 0x1FF));
            BOOL v69 = *(_DWORD *)(v65 + 152);
            BOOL v70 = v181;
            sub_1003DBB58(v65, __p);
            int v71 = v70;
            __int16 v53 = v64;
            int v72 = *(void *)(a1 + 40);
            if (__p[23] >= 0) {
              uint64_t v73 = __p;
            }
            else {
              uint64_t v73 = *(_BYTE **)__p;
            }
            int v74 = *(_DWORD *)(v72 + 520);
            int v75 = *(_DWORD *)(v72 + 288);
            __int128 v76 = *(unsigned __int8 *)(v72 + 324);
            uint64_t v77 = *(unsigned __int8 *)(v72 + 352);
            uint64_t v78 = *(void *)(v72 + 328);
            int v79 = *(void *)(v72 + 408);
            uint64_t v80 = *(void *)(v72 + 416);
            __int16 v81 = *(unsigned __int8 *)(v72 + 542);
            char v82 = *(void *)(v72 + 448);
            *(_DWORD *)std::string buf = 134224898;
            *(void *)&uint8_t buf[4] = v67;
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(double *)&_BYTE buf[14] = v10;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&_BYTE buf[24] = v68;
            LOWORD(v226) = 1024;
            *(_DWORD *)((char *)&v226 + 2) = v69;
            WORD3(v226) = 2048;
            *((double *)&v226 + 1) = v56;
            *(_WORD *)v227 = 2048;
            *(double *)&v227[2] = v64;
            *(_WORD *)&v227[10] = 2048;
            *(double *)&v227[12] = v169;
            *(_WORD *)&v227[20] = 2048;
            *(double *)&v227[22] = v170;
            *(_WORD *)&v227[30] = 2048;
            *(double *)v228 = v51;
            *(_WORD *)&v228[8] = 2048;
            *(double *)&v228[10] = v71;
            *(_WORD *)&v228[18] = 2048;
            *(double *)&v228[20] = v24;
            *(_WORD *)&v228[28] = 2048;
            *(double *)&v228[30] = v177;
            *(_WORD *)&v228[38] = 1024;
            *(_DWORD *)&v228[40] = v57;
            *(_WORD *)&v228[44] = 2080;
            *(void *)&v228[46] = v73;
            *(_WORD *)&v228[54] = 2048;
            *(double *)&v228[56] = v171;
            *(_WORD *)v229 = 2048;
            *(double *)&v229[2] = v172;
            *(_WORD *)&v229[10] = 2048;
            *(void *)&v229[12] = (uint64_t)(float)(v61 * 1000.0);
            *(_WORD *)&v229[20] = 2048;
            *(void *)&v229[22] = (uint64_t)(float)(v63 * 1000.0);
            *(_WORD *)&v229[30] = 2048;
            v230 = *((float *)&v235 + 2);
            LOWORD(v231[0]) = 1024;
            *(_DWORD *)((char *)v231 + 2) = v74;
            WORD3(v231[0]) = 1024;
            DWORD2(v231[0]) = v75;
            WORD6(v231[0]) = 1024;
            *(_DWORD *)((char *)v231 + 14) = v76;
            WORD1(v231[1]) = 1024;
            DWORD1(v231[1]) = v77;
            WORD4(v231[1]) = 1024;
            *(_DWORD *)((char *)&v231[1] + 10) = v78;
            HIWORD(v231[1]) = 2048;
            *(void *)&v231[2] = v79;
            WORD4(v231[2]) = 2048;
            *(void *)((char *)&v231[2] + 10) = v80;
            WORD1(v231[3]) = 1024;
            DWORD1(v231[3]) = v81;
            WORD4(v231[3]) = 2048;
            *(void *)((char *)&v231[3] + 10) = v82;
            _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "METS consumed,startTime,%.3f,computeTime,%.3f,now,%.3f,activity,%d,userMets,%f,wrMets,%f,rawWRMets,%f,phys icalEffortMets, %f, rawTruthMets,%f,avgTruthMets,%f,basalMets,%f,duration,%lf,stored,%d,%s,rawHRMets,%f,ra wFMMets,%f,totalCalories,%lld,basalCalories,%lld,VectorMag,%f,pushCount,%d,activityWithoutOverride,%d,isSt anding,%d,isMotionOverrideSet,%d, mediaType, %d,pedDistance,%f,pedRawDistance,%f,distanceSource,%hu,currentPace,%f",  buf,  0xFAu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            char v60 = v63;
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            *((float *)&v145 + 1) = v53;
            if (qword_1019344D0 != -1) {
              dispatch_once(&qword_1019344D0, &stru_101833800);
            }
            uint64_t v120 = qword_1019344D8;
            int v121 = *(void *)(a1 + 40);
            int v144 = *(void *)(v121 + 128);
            char v122 = *(void *)(a1 + 112) + *(void *)(a1 + 104) - 1LL;
            char v123 = *(void *)(*(void *)(*(void *)(a1 + 80) + ((v122 >> 6) & 0x3FFFFFFFFFFFFF8LL))
                             + 8 * (v122 & 0x1FF));
            HIDWORD(v143) = *(_DWORD *)(v121 + 152);
            int v124 = v182;
            uint64_t v125 = v181;
            sub_1003DBB58(v121, v179);
            uint64_t v83 = (uint64_t)(float)(v61 * 1000.0);
            int v84 = (uint64_t)(float)(v60 * 1000.0);
            int v126 = v125;
            __int16 v85 = v51;
            __int16 v53 = *((float *)&v145 + 1);
            std::string v127 = *(void *)(a1 + 40);
            if (v180 >= 0) {
              int v128 = v179;
            }
            else {
              int v128 = (void **)v179[0];
            }
            int v129 = *(_DWORD *)(v127 + 520);
            std::string v130 = *(_DWORD *)(v127 + 288);
            int v131 = *(unsigned __int8 *)(v127 + 324);
            __int128 v132 = *(unsigned __int8 *)(v127 + 352);
            __int16 v133 = *(void *)(v127 + 328);
            __int16 v135 = *(void *)(v127 + 408);
            __int128 v134 = *(void *)(v127 + 416);
            int v136 = *(unsigned __int8 *)(v127 + 542);
            __int16 v137 = *(void *)(v127 + 448);
            *(_DWORD *)std::string __p = 134224898;
            *(void *)&__p[4] = v144;
            *(_WORD *)&__p[12] = 2048;
            *(double *)&__p[14] = v10;
            *(_WORD *)&__p[22] = 2048;
            *(void *)&_BYTE __p[24] = v123;
            LOWORD(v203) = 1024;
            *(_DWORD *)((char *)&v203 + 2) = HIDWORD(v143);
            WORD3(v203) = 2048;
            *((double *)&v203 + 1) = v124;
            *(_WORD *)__int128 v204 = 2048;
            *(double *)&v204[2] = *((float *)&v145 + 1);
            *(_WORD *)&v204[10] = 2048;
            *(double *)&v204[12] = v169;
            *(_WORD *)&v204[20] = 2048;
            *(double *)&v204[22] = v170;
            *(_WORD *)&v204[30] = 2048;
            *(double *)int v205 = v51;
            *(_WORD *)&v205[8] = 2048;
            *(double *)&v205[10] = v126;
            *(_WORD *)&v205[18] = 2048;
            *(double *)&v205[20] = v24;
            *(_WORD *)&v205[28] = 2048;
            *(double *)&v205[30] = v177;
            *(_WORD *)&v205[38] = 1024;
            *(_DWORD *)&v205[40] = v57;
            *(_WORD *)&v205[44] = 2080;
            *(void *)&v205[46] = v128;
            *(_WORD *)&v205[54] = 2048;
            *(double *)&v205[56] = v171;
            *(_WORD *)&v205[64] = 2048;
            *(double *)&v205[66] = v172;
            *(_WORD *)&v205[74] = 2048;
            *(void *)&v205[76] = (uint64_t)(float)(v61 * 1000.0);
            *(_WORD *)&v205[84] = 2048;
            *(void *)&v205[86] = v84;
            *(_WORD *)&v205[94] = 2048;
            unint64_t v206 = *((float *)&v235 + 2);
            __int16 v207 = 1024;
            int v208 = v129;
            unint64_t v209 = 1024;
            uint64_t v210 = v130;
            unint64_t v211 = 1024;
            char v212 = v131;
            uint64_t v213 = 1024;
            uint64_t v214 = v132;
            uint64_t v215 = 1024;
            v216 = v133;
            v217 = 2048;
            v218 = v135;
            v219 = 2048;
            v220 = v134;
            v221 = 1024;
            v222 = v136;
            v223 = 2048;
            v224 = v137;
            LODWORD(v142) = 250;
            int v138 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v120,  1LL,  "METS consumed,startTime,%.3f,computeTime,%.3f,now,%.3f,activity,%d,userMets,%f,wrMets,%f,ra wWRMets,%f,physicalEffortMets, %f, rawTruthMets,%f,avgTruthMets,%f,basalMets,%f,duration,%l f,stored,%d,%s,rawHRMets,%f,rawFMMets,%f,totalCalories,%lld,basalCalories,%lld,VectorMag,%f ,pushCount,%d,activityWithoutOverride,%d,isStanding,%d,isMotionOverrideSet,%d, mediaType, % d,pedDistance,%f,pedRawDistance,%f,distanceSource,%hu,currentPace,%f",  COERCE_DOUBLE(__p),  v142,  v143,  v144,  v145,  *(double *)&v146,  v147,  v148,  v149.f64[0],  v149.f64[1],  *(double *)&v150,  *(double *)&v151,  (_DWORD)v152,  v153,  *(double *)&v154,  *(double *)&v155,  v156,  v157,  *(double *)&v158,  (_DWORD)v159,  (_DWORD)v160,  (_DWORD)v161,  (_DWORD)v162,  (_DWORD)v163,  *(double *)&v164,  *(double *)&v165,  (_DWORD)v166,  *(double *)&v167);
            if (v180 < 0) {
              operator delete(v179[0]);
            }
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCalorieController::updateCalorimetry(CFAbsoluteTime)",  "%s\n",  v138);
            if (v138 != buf) {
              free(v138);
            }
          }

          else
          {
            uint64_t v83 = (uint64_t)(float)(v61 * 1000.0);
            int v84 = (uint64_t)(float)(v60 * 1000.0);
            __int16 v85 = v51;
          }

          *(_DWORD *)std::string __p = 0;
          *(void *)&__p[8] = 0LL;
          int v86 = *(void *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(v86 + 128);
          *(_DWORD *)&_BYTE __p[24] = *(_DWORD *)(v86 + 152);
          _BYTE __p[28] = *(_BYTE *)(v86 + 352);
          __p[29] = *(_BYTE *)(v86 + 184);
          __int16 v87 = v182;
          *(double *)&__int128 v203 = v182;
          *((double *)&v203 + 1) = v181;
          *(void *)__int128 v204 = v83;
          *(void *)&v204[8] = v84;
          *(double *)&v204[16] = v177;
          *(void *)&v204[24] = 0LL;
          *(void *)int v205 = 0LL;
          *(_DWORD *)&v205[8] = v193;
          __int128 v88 = *(double *)(v86 + 840);
          *(_DWORD *)&v205[24] = *(_DWORD *)(v86 + 832);
          *(float64x2_t *)&v205[32] = vcvtq_f64_f32(*(float32x2_t *)(v86 + 1372));
          v205[48] = *(double *)(v86 + 616) > 0.0;
          __int16 v89 = *(int8x16_t *)(v86 + 448);
          *(double *)&v205[16] = v88 * *(double *)v89.i64;
          *(int8x16_t *)&v205[56] = vextq_s8(v89, v89, 8uLL);
          v205[72] = *(_BYTE *)(v86 + 528) == 1;
          *(float *)&v205[76] = v53;
          int v90 = *(_DWORD *)(v86 + 520);
          *(_DWORD *)&v205[80] = *(_DWORD *)(v86 + 400);
          *(_DWORD *)&v205[84] = v90;
          *(double *)&v205[88] = v85;
          LOBYTE(v206) = v57;
          uuid_copy(&v204[24], (const unsigned __int8 *)(v86 + 354));
          WORD4(v231[23]) = 0;
          LODWORD(v231[27]) = 0;
          DWORD2(v231[42]) = 0;
          *((void *)&v231[68] + 1) = 0LL;
          LODWORD(v231[69]) = 0;
          BYTE4(v231[69]) = 0;
          memset(v231, 0, 24);
          memset(&v231[2], 0, 226);
          *((void *)&v231[16] + 1) = 0LL;
          memset(&v231[17], 0, 20);
          *(_OWORD *)__int128 v167 = 0u;
          *((_OWORD *)v167 + 1) = 0u;
          *((_OWORD *)v167 + 2) = 0u;
          *((_OWORD *)v167 + 3) = 0u;
          *((_DWORD *)v167 + 16) = 0;
          *uint64_t v166 = 0u;
          v166[1] = 0u;
          *((_BYTE *)v166 + memset(&buf[7], 0, 32) = 0;
          *(void *)__int16 v165 = 0LL;
          *(_DWORD *)(v165 + 7) = 0;
          *((void *)v164 + 1) = 0LL;
          *((void *)v164 + 2) = 0LL;
          *(void *)uint64_t v164 = 0LL;
          v164[24] = 0;
          *(void *)__int16 v163 = 0LL;
          *((void *)v163 + 1) = 0LL;
          *((_DWORD *)v163 + 6) = 0;
          *((void *)v163 + 2) = 0LL;
          *(_OWORD *)((char *)v162 + 76) = 0u;
          v162[3] = 0u;
          v162[4] = 0u;
          v162[1] = 0u;
          v162[2] = 0u;
          *uint64_t v162 = 0u;
          *(_OWORD *)((char *)v161 + 57) = 0u;
          v161[2] = 0u;
          v161[3] = 0u;
          *__int16 v161 = 0u;
          v161[1] = 0u;
          *((_DWORD *)v160 + 8) = 0;
          *int v160 = 0u;
          v160[1] = 0u;
          *__int16 v159 = 0LL;
          v159[1] = 0LL;
          *(void *)((char *)v159 + 13) = 0LL;
          *double v158 = 0LL;
          DWORD2(v231[56]) = 0;
          *(_OWORD *)((char *)&v231[54] + 8) = 0u;
          *(_OWORD *)((char *)&v231[55] + 8) = 0u;
          *(_OWORD *)((char *)&v231[52] + 8) = 0u;
          *(_OWORD *)((char *)&v231[53] + 8) = 0u;
          *(_OWORD *)((char *)&v231[50] + 8) = 0u;
          *(_OWORD *)((char *)&v231[51] + 8) = 0u;
          *(_OWORD *)((char *)&v231[48] + 8) = 0u;
          *(_OWORD *)((char *)&v231[49] + 8) = 0u;
          *(_OWORD *)((char *)&v231[47] + 8) = 0u;
          memset(&v231[57], 0, 100);
          *(void *)__int16 v157 = 0LL;
          *((void *)v157 + 1) = 0LL;
          *((_DWORD *)v157 + 4) = 0;
          *(void *)int v156 = 0LL;
          *((void *)v156 + 1) = 0LL;
          *((_DWORD *)v156 + 4) = 0;
          *__int16 v155 = 0LL;
          v155[1] = 0LL;
          *(void *)((char *)v155 + 21) = 0LL;
          v155[2] = 0LL;
          *(void *)int v154 = 0LL;
          *((void *)v154 + 1) = 0LL;
          *((_DWORD *)v154 + 4) = 0;
          *(void *)__int16 v153 = 0LL;
          *((void *)v153 + 1) = 0LL;
          *((_DWORD *)v153 + 6) = 0;
          *((void *)v153 + 2) = 0LL;
          *(void *)int v152 = 0LL;
          *((void *)v152 + 1) = 0LL;
          *((_DWORD *)v152 + 4) = 0;
          *(void *)__int128 v151 = 0LL;
          *((void *)v151 + 1) = 0LL;
          v151[24] = 0;
          *((void *)v151 + 2) = 0LL;
          *uint64_t v150 = 0LL;
          v150[1] = 0LL;
          v226 = v203;
          *(_OWORD *)v227 = *(_OWORD *)v204;
          *(_OWORD *)std::string buf = *(_OWORD *)__p;
          *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&__p[16];
          *(_OWORD *)&v228[16] = *(_OWORD *)&v205[16];
          *(_OWORD *)&v228[32] = *(_OWORD *)&v205[32];
          *(_OWORD *)&v227[16] = *(_OWORD *)&v204[16];
          *(_OWORD *)v228 = *(_OWORD *)v205;
          *(void *)&v231[23] = 0LL;
          v230 = v206;
          *(_OWORD *)v229 = *(_OWORD *)&v205[64];
          *(_OWORD *)&v229[16] = *(_OWORD *)&v205[80];
          unsigned int v91 = (const void *)(*(void *)(a1 + 40) + 112LL);
          *(_OWORD *)&v228[48] = *(_OWORD *)&v205[48];
          memcpy(v231, v91, 0x4D8uLL);
          int v92 = *(void *)(a1 + 440);
          if (v92) {
            (*(void (**)(uint64_t, _BYTE *))(*(void *)v92 + 8LL))(v92, buf);
          }
          if (v57)
          {
            int v93 = *(void *)(a1 + 40);
            __int16 v94 = *(double *)(v93 + 448);
            double v95 = HIDWORD(v176);
            HIDWORD(v176) = v95;
            char v96 = v94 > 1.11847 || v94 == 0.0;
            std::string v97 = v174;
            if (v193 == 1) {
              std::string v97 = v174 + 1;
            }
            LODWORD(v174) = v97;
            char v98 = HIDWORD(v174);
            if (v193 == 3) {
              char v98 = HIDWORD(v174) + 1;
            }
            HIDWORD(v174) = v98;
            __int16 v99 = v176;
            if (v193 == 2) {
              __int16 v99 = v176 + 1;
            }
            LODWORD(v176) = v99;
            if (*(float *)&v188 != 0.0)
            {
              v100.i32[0] = HIDWORD(v188);
              if (*((float *)&v188 + 1) != 0.0)
              {
                v100.i32[1] = v188;
                __int16 v101 = vaddq_f64( vdivq_f64( vmulq_n_f64(vcvtq_f64_f32(vmul_n_f32(v100, *(float *)(v93 + 1364))), v177),  (float64x2_t)vdupq_n_s64(0x40AC200000000000uLL)),  vcvtq_f64_f32(*(float32x2_t *)&v149.f64[0]));
                *(float32x2_t *)&v101.f64[0] = vcvt_f32_f64(v101);
                __int16 v149 = v101;
              }
            }

            int v102 = *(_DWORD *)(v93 + 700);
            if (v102 == 2)
            {
              ++HIDWORD(v168);
            }

            else if (v102 == 1)
            {
              LODWORD(v168) = v168 + 1;
            }

            if (*(_DWORD *)&v205[24] == 3)
            {
              ++LODWORD(v148);
            }

            else if (*(_DWORD *)&v205[24] == 1)
            {
              ++HIDWORD(v148);
            }

            uint64_t v104 = v205[48];
            uint64_t v105 = *(_DWORD *)(v93 + 400);
            char v106 = *(unsigned __int8 *)(v93 + 489);
            uint64_t v107 = sub_100F5A080();
            sub_100F5CA68(v107, v191);
            std::string v108 = sub_100F5A080();
            sub_100F5D1E4(v108, (uint64_t)v87);
            if (!(_BYTE)v239)
            {
              int v109 = sub_1008D9630();
              sub_1008D9988(v109, v87, v184);
            }

            uint64_t v110 = (dispatch_queue_t *)sub_100B354EC();
            sub_100B36694(v110, v87);
            sub_100357B04(v10, v111, *(void *)(a1 + 40), (uint64_t)v234, (uint64_t)__p, (int *)&v188);
            __int16 v112 = *(_DWORD *)(*(void *)(a1 + 40) + 1392LL);
            sub_1004F2598();
            std::stringbuf::string_type v113 = sub_1001B9A1C();
            ++HIDWORD(v175);
            HIDWORD(v173) += v104;
            LODWORD(v175) = v175 + v106;
            LODWORD(v173) = v173 + v96;
            if (v112) {
              int v114 = v113;
            }
            else {
              int v114 = 0;
            }
            if (v114 == 1)
            {
              double v115 = sub_1008D9630();
              v200[12] = v238;
              v200[13] = v239;
              __int128 v201 = v240;
              v200[8] = v234[8];
              v200[9] = v235;
              v200[10] = v236;
              v200[11] = v237;
              v200[4] = v234[4];
              v200[5] = v234[5];
              v200[6] = v234[6];
              v200[7] = v234[7];
              v200[0] = v234[0];
              v200[1] = v234[1];
              v200[2] = v234[2];
              v200[3] = v234[3];
              sub_1008D9704(v115, v105, (uint64_t)v200, (float)*(uint64_t *)v204, v192);
            }
          }

          *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), (int64x2_t)xmmword_1012CE4D0);
          sub_1002109A4(v178, 1);
          uint64_t v18 = 0;
          std::stringbuf v103 = 1;
        }

        else
        {
          std::stringbuf v103 = 0;
          uint64_t v18 = 3;
        }

        __int128 v116 = v197;
        if (v197)
        {
          p_shared_owners = (unint64_t *)&v197->__shared_owners_;
          do
            __int128 v118 = __ldaxr(p_shared_owners);
          while (__stlxr(v118 - 1, p_shared_owners));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }

        if ((v103 & 1) == 0) {
          goto LABEL_26;
        }
      }

      else
      {
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101833800);
        }
        uint64_t v17 = (os_log_s *)qword_1019344D8;
        if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Popping out an activity since there's no activity associated with current time.  This shouldn't happen",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344D0 != -1) {
            dispatch_once(&qword_1019344D0, &stru_101833800);
          }
          *(_WORD *)std::string __p = 0;
          LODWORD(v142) = 2;
          uint64_t v119 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "Popping out an activity since there's no activity associated with current time.  This shouldn't happen",  __p,  *(void *)&v142);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLCalorieController::updateCalorimetry(CFAbsoluteTime)",  "%s\n",  v119);
          if (v119 != buf) {
            free(v119);
          }
        }

        *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), (int64x2_t)xmmword_1012CE4D0);
        sub_1002109A4(v178, 1);
      }

      uint64_t v18 = 0;
LABEL_26:
      if (v18) {
        goto LABEL_146;
      }
    }
  }

void sub_1003574AC(_Unwind_Exception *a1)
{
}

uint64_t sub_10035754C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 24LL))(result, a2);
  }
  return result;
}

float sub_100357594(float a1, float a2)
{
  float v2 = a2;
  if (a1 < a2) {
    return v2;
  }
  double v3 = a1;
  if (a1 <= 30.0)
  {
    float v2 = a1;
    if (a1 > 20.0)
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101833800);
      }
      uint64_t v6 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218240;
        double v10 = v3;
        __int16 v11 = 2048;
        double v12 = 20.0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "In-human MET spike,%f,setting to upper bound,%f",  buf,  0x16u);
      }

      float v2 = 20.0;
      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_101833800);
        }
        uint64_t v5 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "In-human MET spike,%f,setting to upper bound,%f");
        goto LABEL_21;
      }
    }
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101833800);
    }
    float64x2_t v4 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218240;
      double v10 = v3;
      __int16 v11 = 2048;
      double v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "MET spike,%f,setting to basal,%f", buf, 0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101833800);
      }
      uint64_t v5 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "MET spike,%f,setting to basal,%f");
LABEL_21:
      unint64_t v8 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 0LL, "float CLCalorieController::sanitizeMets(float, float)", "%s\n", v5);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  return v2;
}

double sub_100357898(uint64_t a1, double a2, double a3)
{
  double v7 = a3;
  sub_1002104CC(a1, &v7);
  *(double *)(a1 + 88) = a2;
  double v6 = -1.0;
  sub_100358478((void *)a1, 2, &v6);
  return v6;
}

double sub_100357914(double a1, uint64_t a2, int a3, void *a4, float *a5)
{
  double v6 = a1;
  if (!a3)
  {
    uint64_t v13 = *(unsigned int *)a5;
    *(double *)&__int128 v39 = a1;
    *((void *)&v39 + 1) = v13;
    sub_100357FE4(a4, &v39);
    char v14 = (void **)a4[1];
    double v6 = 0.0;
    unint64_t v15 = a4[2] - (void)v14;
    if (!v15) {
      return v6;
    }
    unint64_t v16 = a4[4];
    uint64_t v17 = &v14[v16 >> 8];
    uint64_t v18 = *v17;
    uint64_t v19 = (uint64_t)*v17 + 16 * v16;
    unint64_t v20 = a4[5] + v16;
    uint64_t v21 = (uint64_t)v14[v20 >> 8] + 16 * v20;
    if (v19 == v21) {
      return v6;
    }
    double v22 = 0.0;
    uint64_t v23 = (double *)*v17;
    unint64_t v24 = (double *)((char *)*v17 + 16 * v16);
    char v25 = &v14[v16 >> 8];
    do
    {
      double v26 = *v24;
      v24 += 2;
      double v27 = v26;
      if ((char *)v24 - (char *)v23 == 4096)
      {
        unint64_t v28 = (double *)v25[1];
        ++v25;
        uint64_t v23 = v28;
        unint64_t v24 = v28;
      }

      double v22 = v22 + v27;
    }

    while (v24 != (double *)v21);
    double v6 = 0.0;
    if (v22 < 10.0) {
      return v6;
    }
    uint64_t v29 = (uint64_t)v14[v20 >> 8] + 16 * v20;
    if (v19 == v29)
    {
      double v34 = 0.0;
    }

    else
    {
      float v30 = 0.0;
      do
      {
        uint64_t v31 = v19 + 16;
        if (v19 + 16 - (void)v18 == 4096)
        {
          unsigned int v32 = v17[1];
          ++v17;
          uint64_t v18 = v32;
          uint64_t v31 = (uint64_t)v32;
        }

        float v33 = *(double *)v19 * *(float *)(v19 + 8);
        float v30 = v30 + v33;
        uint64_t v19 = v31;
      }

      while (v31 != v29);
      double v34 = v30;
    }

    float v35 = v34 / v22;
    *a5 = v35;
    a4[5] = 0LL;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v14);
        uint64_t v36 = a4[2];
        char v14 = (void **)(a4[1] + 8LL);
        a4[1] = v14;
        unint64_t v15 = v36 - (void)v14;
      }

      while (v15 > 0x10);
    }

    if (v15 >> 3 == 1)
    {
      uint64_t v37 = 128LL;
    }

    else
    {
      if (v15 >> 3 != 2) {
        return v22;
      }
      uint64_t v37 = 256LL;
    }

    a4[4] = v37;
    return v22;
  }

  double v7 = (void **)a4[1];
  uint64_t v8 = a4[2];
  a4[5] = 0LL;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = a4[2];
      double v7 = (void **)(a4[1] + 8LL);
      a4[1] = v7;
      unint64_t v9 = v10 - (void)v7;
    }

    while (v9 > 0x10);
  }

  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 128LL;
    goto LABEL_21;
  }

  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 256LL;
LABEL_21:
    a4[4] = v11;
  }

  return v6;
}

void sub_100357B04(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (sub_1001B9A1C())
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    double v12 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
    -[ALActivityLog setTimestamp:](v12, "setTimestamp:", *(double *)(a5 + 16));
    -[ALActivityLog setCalorieData:]( v12,  "setCalorieData:",  objc_alloc_init(&OBJC_CLASS___ALCMCalorieData));
    -[ALCMCalorieData setActivityType:]( -[ALActivityLog calorieData](v12, "calorieData"),  "setActivityType:",  *(unsigned int *)(a5 + 24));
    -[ALCMCalorieData setIsStanding:]( -[ALActivityLog calorieData](v12, "calorieData"),  "setIsStanding:",  *(unsigned __int8 *)(a5 + 29));
    -[ALCMCalorieData setUserMets:]( -[ALActivityLog calorieData](v12, "calorieData"),  "setUserMets:",  *(double *)(a5 + 32));
    -[ALCMCalorieData setTruthMets:]( -[ALActivityLog calorieData](v12, "calorieData"),  "setTruthMets:",  *(double *)(a5 + 40));
    if (*(_BYTE *)(a4 + 208))
    {
      -[ALCMCalorieData setUserMetsSource:]( -[ALActivityLog calorieData](v12, "calorieData"),  "setUserMetsSource:",  a6[6]);
      -[ALCMCalorieData setTruthMetsSource:]( -[ALActivityLog calorieData](v12, "calorieData"),  "setTruthMetsSource:",  a6[8]);
      int v13 = *a6;
      char v14 = -[ALActivityLog calorieData](v12, "calorieData");
      LODWORD(v15) = v13;
      -[ALCMCalorieData setMetsHR:](v14, "setMetsHR:", v15);
      int v16 = a6[1];
      uint64_t v17 = -[ALActivityLog calorieData](v12, "calorieData");
      LODWORD(v18) = v16;
      -[ALCMCalorieData setMetsWR:](v17, "setMetsWR:", v18);
      int v19 = a6[2];
      unint64_t v20 = -[ALActivityLog calorieData](v12, "calorieData");
      LODWORD(v21) = v19;
      -[ALCMCalorieData setMetsFM:](v20, "setMetsFM:", v21);
    }

    objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v12);
    objc_autoreleasePoolPop(v11);
    if (*(_BYTE *)(*(void *)(a3 + 16) + 80LL))
    {
      double v22 = objc_autoreleasePoolPush();
      uint64_t v23 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
      -[ALActivityLog setTimestamp:](v23, "setTimestamp:", a1);
      -[ALActivityLog setOdometer:](v23, "setOdometer:", objc_alloc_init(&OBJC_CLASS___ALCLOdometer));
      float v24 = *(double *)(a3 + 624);
      char v25 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&double v26 = v24;
      -[ALCLOdometer setDistance:](v25, "setDistance:", v26);
      float v27 = *(double *)(a3 + 632);
      unint64_t v28 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&double v29 = v27;
      -[ALCLOdometer setAccuracy:](v28, "setAccuracy:", v29);
      float v30 = *(double *)(a3 + 640);
      uint64_t v31 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&double v32 = v30;
      -[ALCLOdometer setGpsAltitude:](v31, "setGpsAltitude:", v32);
      float v33 = *(double *)(a3 + 648);
      double v34 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&double v35 = v33;
      -[ALCLOdometer setSpeed:](v34, "setSpeed:", v35);
      float v36 = *(double *)(a3 + 656);
      uint64_t v37 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&double v38 = v36;
      -[ALCLOdometer setRawSpeed:](v37, "setRawSpeed:", v38);
      float v39 = *(double *)(a3 + 664);
      uint64_t v40 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&double v41 = v39;
      -[ALCLOdometer setOdometer:](v40, "setOdometer:", v41);
      float v42 = *(double *)(a3 + 672);
      CFNumberRef v43 = -[ALActivityLog odometer](v23, "odometer");
      *(float *)&double v44 = v42;
      -[ALCLOdometer setGpsSpeedAccuracy:](v43, "setGpsSpeedAccuracy:", v44);
      -[ALCLOdometer setTimestampGps:]( -[ALActivityLog odometer](v23, "odometer"),  "setTimestampGps:",  *(double *)(a3 + 680));
      -[ALCLOdometer setQuality:]( -[ALActivityLog odometer](v23, "odometer"),  "setQuality:",  *(unsigned int *)(a3 + 696));
      objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v23);
      objc_autoreleasePoolPop(v22);
    }

    if (*(_BYTE *)(*(void *)(a3 + 24) + 80LL))
    {
      uint64_t v45 = objc_autoreleasePoolPush();
      unint64_t v46 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
      -[ALActivityLog setTimestamp:](v46, "setTimestamp:", a1);
      -[ALActivityLog setElevation:]( v46,  "setElevation:",  objc_alloc_init(&OBJC_CLASS___ALCMElevation));
      -[ALCMElevation setElevationAscended:]( -[ALActivityLog elevation](v46, "elevation"),  "setElevationAscended:",  *(unsigned int *)(a3 + 824));
      -[ALCMElevation setElevationDescended:]( -[ALActivityLog elevation](v46, "elevation"),  "setElevationDescended:",  *(unsigned int *)(a3 + 828));
      -[ALCMElevation setGradeType:]( -[ALActivityLog elevation](v46, "elevation"),  "setGradeType:",  *(unsigned int *)(a3 + 832));
      float v47 = *(double *)(a3 + 840);
      uint64_t v48 = -[ALActivityLog elevation](v46, "elevation");
      *(float *)&double v49 = v47;
      -[ALCMElevation setVerticalSpeed:](v48, "setVerticalSpeed:", v49);
      -[ALCMElevation setRawGradeType:]( -[ALActivityLog elevation](v46, "elevation"),  "setRawGradeType:",  *(unsigned int *)(a3 + 832));
      -[ALCMElevation setSource:]( -[ALActivityLog elevation](v46, "elevation"),  "setSource:",  *(unsigned int *)(a3 + 848));
      objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v46);
      objc_autoreleasePoolPop(v45);
    }

    if (*(_BYTE *)(*(void *)(a3 + 8) + 80LL))
    {
      uint64_t v50 = objc_autoreleasePoolPush();
      int v51 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
      -[ALActivityLog setTimestamp:](v51, "setTimestamp:", a1);
      -[ALActivityLog setStairClimbingModel:]( v51,  "setStairClimbingModel:",  objc_alloc_init(&OBJC_CLASS___ALCLStairClimbingModel));
      int v52 = *(_DWORD *)(a3 + 304);
      __int16 v53 = -[ALActivityLog stairClimbingModel](v51, "stairClimbingModel");
      LODWORD(v54) = v52;
      -[ALCLStairClimbingModel setMachineFrequency:](v53, "setMachineFrequency:", v54);
      objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v51);
      objc_autoreleasePoolPop(v50);
      if (*(_BYTE *)(*(void *)(a3 + 8) + 80LL))
      {
        __int128 v55 = objc_autoreleasePoolPush();
        BOOL v56 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
        -[ALActivityLog setTimestamp:](v56, "setTimestamp:", a1);
        -[ALActivityLog setRowingModel:]( v56,  "setRowingModel:",  objc_alloc_init(&OBJC_CLASS___ALCLRowingModel));
        int v57 = *(_DWORD *)(a3 + 316);
        int v58 = -[ALActivityLog rowingModel](v56, "rowingModel");
        LODWORD(v59) = v57;
        -[ALCLRowingModel setStrokePower:](v58, "setStrokePower:", v59);
        int v60 = *(_DWORD *)(a3 + 312);
        BOOL v61 = -[ALActivityLog rowingModel](v56, "rowingModel");
        LODWORD(v62) = v60;
        -[ALCLRowingModel setStrokeAmp:](v61, "setStrokeAmp:", v62);
        int v63 = *(_DWORD *)(a3 + 308);
        __objc2_meth_list v64 = -[ALActivityLog rowingModel](v56, "rowingModel");
        LODWORD(v65) = v63;
        -[ALCLRowingModel setStrokeFrequency:](v64, "setStrokeFrequency:", v65);
        objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v56);
        objc_autoreleasePoolPop(v55);
      }
    }
  }

uint64_t sub_100357FE4(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10035854C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  *(_OWORD *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5] + 1LL;
  a1[5] = v9;
  unint64_t v10 = v8 + v9;
  uint64_t v11 = a1[1];
  double v12 = (void *)(v11 + 8 * (v10 >> 8));
  uint64_t v13 = *v12 + 16LL * v10;
  if (a1[2] == v11) {
    uint64_t v13 = 0LL;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096LL;
  }
  return v13 - 16;
}

uint64_t sub_1003580A0(void *a1)
{
  float v2 = (void **)a1[1];
  double v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      double v3 = (void **)a1[2];
      float v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 36LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 73LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

void sub_100358134(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100358164(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10035842C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100358478(void *a1, int a2, void *a3)
{
  unint64_t v3 = a1[10];
  if (!v3) {
    return 0LL;
  }
  if (a2 == 2)
  {
    float v10 = (double)v3 * 0.5;
    int v11 = vcvtms_s32_f32(v10);
    uint64_t v12 = (void *)a1[8];
    if (v11 < 1)
    {
      unint64_t v7 = (void *)a1[8];
    }

    else
    {
      for (int i = 0; i != v11; ++i)
      {
        BOOL v14 = (void *)v12[1];
        if (v14)
        {
          do
          {
            unint64_t v7 = v14;
            BOOL v14 = (void *)*v14;
          }

          while (v14);
        }

        else
        {
          do
          {
            unint64_t v7 = (void *)v12[2];
            BOOL v8 = *v7 == (void)v12;
            uint64_t v12 = v7;
          }

          while (!v8);
        }

        uint64_t v12 = v7;
      }
    }

    goto LABEL_22;
  }

  if (a2 != 1)
  {
    if (!a2)
    {
      uint64_t v6 = (void *)a1[9];
      unint64_t v4 = a1 + 9;
      uint64_t v5 = v6;
      if (v6)
      {
        do
        {
          unint64_t v7 = v5;
          uint64_t v5 = (void *)v5[1];
        }

        while (v5);
      }

      else
      {
        do
        {
          unint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          unint64_t v4 = v7;
        }

        while (v8);
      }

      goto LABEL_22;
    }

    return 0LL;
  }

  unint64_t v7 = (void *)a1[8];
LABEL_22:
  *a3 = v7[4];
  return 1LL;
}

void sub_10035854C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    BOOL v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)BOOL v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      BOOL v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        BOOL v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100358814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100358860()
{
  dword_101994320 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_101994308, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_101994328, "DmFp");
  dword_101994340 = 200;
  return __cxa_atexit((void (*)(void *))sub_100355650, qword_101994328, (void *)&_mh_execute_header);
}

uint64_t sub_1003588EC(char a1)
{
  unint64_t v2 = operator new(0x3570uLL);
  uint64_t result = sub_1003589C0((uint64_t)v2, a1);
  qword_1019A0E58 = (uint64_t)v2;
  return result;
}

void sub_100358924(_Unwind_Exception *a1)
{
}

uint64_t sub_100358938(char a1)
{
  uint64_t result = qword_1019A0E58;
  if (!qword_1019A0E58)
  {
    uint64_t v3 = sub_1006E27E8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    uint64_t v4[2] = sub_1003589A8;
    void v4[3] = &unk_101833840;
    char v5 = a1;
    sub_1006E28B8(v3, (uint64_t)v4);
    return qword_1019A0E58;
  }

  return result;
}

uint64_t sub_1003589A8(uint64_t result)
{
  if (!qword_1019A0E58) {
    return sub_1003588EC(*(_BYTE *)(result + 32));
  }
  return result;
}

uint64_t sub_1003589C0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100C97748(a1, (uint64_t)"CLSPU", 52, a2);
  *(void *)uint64_t v4 = off_101833870;
  *(void *)(v4 + memset(&buf[7], 0, 32) = off_101833D38;
  *(void *)(v4 + 40) = off_101833D80;
  *(void *)(v4 + 48) = off_101833DB8;
  *(void *)(v4 + sub_1011C52D0(v33 - 56) = off_101833DE0;
  *(void *)(v4 + 64) = off_101833E30;
  *(void *)(v4 + sub_1011C52D0(v15 - 72) = off_101833E68;
  *(void *)(v4 + 80) = off_101833EA8;
  *(void *)(v4 + 88) = off_101833EE0;
  *(void *)(v4 + 96) = off_101833F10;
  *(void *)(v4 + 104) = off_101833F60;
  *(void *)(v4 + 112) = off_101833F88;
  *(void *)(v4 + 120) = off_101833FF0;
  *(void *)(v4 + 128) = off_101834018;
  *(void *)(v4 + 136) = off_101834040;
  *(void *)(v4 + 152) = off_101834068;
  char v5 = (uint64_t *)(v4 + 1936);
  unint64_t v25 = (uint64_t *)(v4 + 1928);
  uint64_t v26 = v4 + 1952;
  *(_OWORD *)(v4 + sub_10000AE14(v1 + 1912) = 0u;
  *(_OWORD *)(v4 + 1928) = 0u;
  *(_OWORD *)(v4 + 1944) = 0u;
  *(_OWORD *)(v4 + 1960) = 0u;
  *(_OWORD *)(v4 + 1976) = 0u;
  *(void *)(v4 + 4152) = 0xFFFFFFFFLL;
  *(void *)(v4 + 6320) = 0xFFFFFFFFLL;
  *(void *)(v4 + 8488) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 12824) = -1;
  *(_OWORD *)(v4 + 12828) = 0u;
  *(void *)(v4 + 106sub_1011C52D0(v33 - 56) = 0xFFFFFFFFLL;
  *(_BYTE *)(v4 + 12844) = 0;
  sub_10080A774(v4 + 12848);
  sub_1008290F0(a1 + 13040);
  sub_10099A4D4(a1 + 13176, *(void *)(a1 + 168));
  sub_100510650(a1 + 13608);
  *(void *)(a1 + 13648) = 0LL;
  *(_OWORD *)(a1 + 136memset(&buf[7], 0, 32) = 0u;
  *(CFAbsoluteTime *)(a1 + 136memset(&buf[7], 0, 32) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 13640) = 0x12C00000000LL;
  *(_BYTE *)(a1 + 13648) = 1;
  *(_DWORD *)(a1 + 13664) = 0;
  *(void *)(a1 + 136sub_1011C52D0(v15 - 72) = 0LL;
  sub_1006E27E8();
  sub_1006E2A54();
  if ((sub_1004F97F4() & 2) != 0)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    uint64_t v6 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting up hid interface", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      v31[0] = 0;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "Setting up hid interface",  v31,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "CLSPU::CLSPU(BOOL)", "%s\n", v24);
    }

    unint64_t v7 = (uint64_t *)sub_10071542C();
    uint64_t v29 = 0x10000FF0CLL;
    char v30 = 0;
    sub_10121B774(v7, (uint64_t)&v29, (uint64_t *)buf);
    sub_10005F550((uint64_t)v5, (__int128 *)buf);
    BOOL v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    sub_100719ECC(*(void *)(a1 + 1936), (uint64_t)sub_100358FE8, a1);
    sub_100719D78(*(uint64_t **)(a1 + 1936), (uint64_t)sub_100359024, a1);
    sub_100719E00(*(void *)(a1 + 1936), (uint64_t)sub_100359200, a1);
    (*(void (**)(uint64_t, const __CFString *, void *))(*(void *)*v5 + 16LL))( *v5,  @"HistoricalBufferDefersQueueStart",  &__kCFBooleanTrue);
    sub_10071A408(*(void *)(a1 + 1936), (uint64_t)sub_10035923C, a1);
    sub_10071A684(*(void *)(a1 + 1936), (uint64_t)sub_1003593C0, a1);
    if (sub_100719C6C(*v5)) {
      sub_1003593EC((void *)a1);
    }
    sub_1003597D0(a1, 1LL);
  }

  sub_1004F2598();
  if ((sub_1004F97F4() & 0x80) != 0)
  {
    uint64_t v11 = (uint64_t *)sub_10071542C();
    uint64_t v27 = 0x70000FF0CLL;
    char v28 = 0;
    sub_10121B774(v11, (uint64_t)&v27, (uint64_t *)buf);
    sub_10005F550(v26, (__int128 *)buf);
    uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v13 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    sub_100719D78(*(uint64_t **)(a1 + 1952), (uint64_t)nullsub_164, a1);
    sub_100719ECC(*(void *)(a1 + 1952), (uint64_t)sub_10035A608, a1);
    sub_100719E00(*(void *)(a1 + 1952), (uint64_t)sub_10035A608, a1);
    sub_10071A408(*(void *)(a1 + 1952), (uint64_t)sub_10035A608, a1);
    uint64_t v15 = operator new(0x20uLL);
    uint64_t v16 = (uint64_t)v15;
    uint64_t v17 = *(void *)(a1 + 1960);
    *(void *)std::string buf = *(void *)(a1 + 1952);
    *(void *)&uint8_t buf[8] = v17;
    if (v17)
    {
      uint64_t v18 = (unint64_t *)(v17 + 8);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }

    sub_100E2E64C(v15, buf);
    int64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v21 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    sub_10029D2EC(v25, v16);
    sub_100E2EA00((uint64_t *)*v25);
  }

  sub_10035A64C((void *)a1, a2);
  return a1;
}

void sub_100358F20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v19 = *(void *)(v12 + 1968);
  *(void *)(v12 + 1968) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_10000AE14(a12);
  sub_10000AE14(v13);
  sub_10029D2EC(a11, 0LL);
  sub_100C990C0(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_100358FE8(_BYTE *a1)
{
  a1[216] = 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 552LL))(a1, 1LL);
}

void sub_100359024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  IOHIDEventGetVendorDefinedData(a4, &v14, &v13);
  uint64_t v7 = v13;
  uint64_t v6 = v14;
  if (v14) {
    BOOL v8 = v13 <= 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    uint64_t v9 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      v12[0] = 0;
      unint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Empty payload",  v12,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLSPU::onCMAServiceIohidEvent(void *, void *, void *, IOHIDEventRef)",  "%s\n",  v10);
    }
  }

  else
  {
    unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
    *(void *)std::string buf = sub_101171C7C(TimeStamp);
    sub_100CA6BB8(a1, v6, v7, buf);
  }

uint64_t sub_100359200(_BYTE *a1)
{
  a1[216] = 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 552LL))(a1, 1LL);
}

void sub_10035923C()
{
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  unsigned __int8 v0 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "cma reopening HID driver interface, this is not expected",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    v2[0] = 0;
    uint64_t v1 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "cma reopening HID driver interface, this is not expected",  v2,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "static void CLSPU::onRegistryIDChangedBounce(void *)", "%s\n", v1);
  }

uint64_t sub_1003593C0(uint64_t a1)
{
  return sub_10035BD9C(a1, 0);
}

void sub_1003593EC(void *a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current != (CFRunLoopRef)sub_1006E2AB4())
  {
    uint64_t v3 = sub_1006E27E8();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = (const void *)3221225472LL;
    _OWORD v17[2] = sub_10035BD94;
    v17[3] = &unk_10181D3D0;
    v17[4] = a1;
    sub_1006E28B8(v3, (uint64_t)v17);
    return;
  }

  if (a1[242])
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    uint64_t v4 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Close hid driver interface", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      LOWORD(v18) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  2LL,  "Close hid driver interface",  &v18,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::closeHidDriverInterface()", "%s\n", v11);
    }

    char v5 = a1 + 239;
    uint64_t v6 = (IOCFPlugInInterface **)a1[239];
    uint64_t v7 = a1[240];
    if (v7)
    {
      (*(void (**)(void, void))(*(void *)v7 + 72LL))(a1[240], 0LL);
      if (!v6) {
        goto LABEL_14;
      }
    }

    else if (!v6)
    {
      *(void *)(a1[242] + 8LL) = 0LL;
      *char v5 = 0LL;
      a1[240] = 0LL;
      return;
    }

    ((void (*)(IOCFPlugInInterface **))(*v6)->Release)(v6);
    IODestroyPlugInInterface(v6);
LABEL_14:
    *(void *)(a1[242] + 8LL) = 0LL;
    *char v5 = 0LL;
    a1[240] = 0LL;
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    BOOL v8 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[239];
      uint64_t v10 = a1[240];
      *(_DWORD *)std::string buf = 134218752;
      uint64_t v27 = v6;
      __int16 v28 = 2048;
      uint64_t v29 = v7;
      __int16 v30 = 2048;
      uint64_t v31 = v9;
      __int16 v32 = 2048;
      uint64_t v33 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      uint64_t v12 = a1[239];
      uint64_t v13 = a1[240];
      int v18 = 134218752;
      uint64_t v19 = v6;
      __int16 v20 = 2048;
      uint64_t v21 = v7;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      __int16 v24 = 2048;
      uint64_t v25 = v13;
      LODWORD(v15) = 42;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}",  &v18,  v15,  v16,  v17[0]);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::closeHidDriverInterface()", "%s\n", v14);
    }
  }

void sub_1003597D0(uint64_t a1, uint64_t a2)
{
  kern_return_t v17;
  kern_return_t v18;
  os_log_s *v19;
  uint64_t v20;
  os_log_s *v21;
  uint8_t *v22;
  os_log_s *v23;
  os_log_s *v24;
  os_log_s *v25;
  IOCFPlugInInterface **v26;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  CFUUIDRef v28;
  CFUUIDBytes v29;
  os_log_s *v30;
  os_log_s *v31;
  os_log_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t byte15;
  const void *byte15a;
  const void *v45;
  void **v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t v50;
  char v51;
  SInt32 theScore;
  uint64_t v53;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v56;
  _BYTE v57[18];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  IOCFPlugInInterface **v61;
  __int16 v62;
  uint64_t v63;
  uint8_t buf[4];
  _BYTE v65[18];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  IOCFPlugInInterface **v69;
  __int16 v70;
  uint64_t v71;
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  uint64_t v4 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)double v65 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Open hid driver interface,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    BOOL v56 = 67109120;
    *(_DWORD *)int v57 = a2;
    uint64_t v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  2LL,  "Open hid driver interface,%d",  &v56);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v36);
  }

  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current != (CFRunLoopRef)sub_1006E2AB4())
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    uint64_t v6 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "openHidDriverInterface should be called from motion thread",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      LOWORD(vsub_1011C52D0(v33 - 56) = 0;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "openHidDriverInterface should be called from motion thread",  &v56,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v37);
    }

    uint64_t v7 = sub_1006E27E8();
    unint64_t v46 = _NSConcreteStackBlock;
    uint64_t v47 = 3221225472LL;
    uint64_t v48 = sub_10035BD84;
    uint64_t v49 = &unk_101833458;
    uint64_t v50 = a1;
    int v51 = a2;
    sub_1006E28B8(v7, (uint64_t)&v46);
    return;
  }

  uint64_t v8 = *(void *)(a1 + 1936);
  if (!v8) {
    return;
  }
  theInterface = 0LL;
  int valuePtr = 0LL;
  __int16 v53 = 0LL;
  uint64_t v9 = (__IOHIDServiceClient *)sub_100719C6C(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v9);
    if (RegistryID)
    {
      CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr)
      {
        theScore = 0;
        uint64_t v12 = IORegistryEntryIDMatching(valuePtr);
        io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v12);
        if (MatchingService)
        {
          io_service_t v14 = MatchingService;
          uint64_t v15 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0x3Bu,  0xC5u,  0xCCu,  0x87u,  0x84u,  0x5Eu,  0x48u,  0xABu,  0xA9u,  0xC2u,  0x94u,  0x36u,  0,  0x1Bu,  0xA6u,  0x8Au);
          uint64_t v16 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0xC2u,  0x44u,  0xE8u,  0x58u,  0x10u,  0x9Cu,  0x11u,  0xD4u,  0x91u,  0xD4u,  0,  0x50u,  0xE4u,  0xC6u,  0x42u,  0x6Fu);
          uint64_t v17 = IOCreatePlugInInterfaceForService(v14, v15, v16, &theInterface, &theScore);
          if (!v17)
          {
            IOObjectRelease(v14);
            uint64_t v26 = theInterface;
            QueryInterface = (*theInterface)->QueryInterface;
            __int16 v28 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0x6Eu,  0xBEu,  0xBAu,  0x6Eu,  9u,  0x1Eu,  0x45u,  0x2Eu,  0x82u,  0xEAu,  0x29u,  0x79u,  0x81u,  0x6Fu,  0xB1u,  0xB5u);
            uint64_t v29 = CFUUIDGetUUIDBytes(v28);
            if (((unsigned int (*)(IOCFPlugInInterface **, void, void, uint64_t *))QueryInterface)( v26,  *(void *)&v29.byte0,  *(void *)&v29.byte8,  &v53))
            {
              if (qword_1019344C0 != -1) {
                dispatch_once(&qword_1019344C0, &stru_101834360);
              }
              __int16 v30 = (os_log_s *)qword_1019344C8;
              if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_FAULT,  "Unable to set up query interface",  buf,  2u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019344C0 != -1) {
                  dispatch_once(&qword_1019344C0, &stru_101834360);
                }
                LOWORD(vsub_1011C52D0(v33 - 56) = 0;
                LODWORD(byte15a) = 2;
                double v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Unable to set up query interface",  &v56,  byte15a);
                sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v38);
              }
            }

            else
            {
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v53 + 64LL))(v53, a2))
              {
                if (qword_1019344C0 != -1) {
                  dispatch_once(&qword_1019344C0, &stru_101834360);
                }
                __int16 v32 = (os_log_s *)qword_1019344C8;
                if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v33 = *(void *)(a1 + 1912);
                  double v34 = *(void *)(a1 + 1920);
                  *(_DWORD *)std::string buf = 134219008;
                  *(void *)double v65 = valuePtr;
                  *(_WORD *)&v65[8] = 2048;
                  *(void *)&v65[10] = v33;
                  __int16 v66 = 2048;
                  BOOL v67 = v34;
                  __int16 v68 = 2048;
                  BOOL v69 = theInterface;
                  BOOL v70 = 2048;
                  int v71 = v53;
                  _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,% p}, is now {%p,%p}",  buf,  0x34u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1019344C0 != -1) {
                    dispatch_once(&qword_1019344C0, &stru_101834360);
                  }
                  uint64_t v40 = *(void *)(a1 + 1912);
                  double v41 = *(void *)(a1 + 1920);
                  BOOL v56 = 134219008;
                  *(void *)int v57 = valuePtr;
                  *(_WORD *)&v57[8] = 2048;
                  *(void *)&v57[10] = v40;
                  int v58 = 2048;
                  double v59 = v41;
                  int v60 = 2048;
                  BOOL v61 = theInterface;
                  double v62 = 2048;
                  int v63 = v53;
                  LODWORD(byte15a) = 52;
                  uint64_t v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}",  &v56,  byte15a,  v45,  v46,  (const void *)v47);
                  sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v42);
                }

                *(void *)(*(void *)(a1 + 1936) + 8LL) = valuePtr;
                double v35 = v53;
                *(void *)(a1 + sub_10000AE14(v1 + 1912) = theInterface;
                *(void *)(a1 + 1920) = v35;
                sub_10035BCD4((dispatch_queue_s **)(a1 + 192), v35);
                if (*(void *)(a1 + 1920))
                {
                  if ((_DWORD)a2) {
                    sub_10035BD2C(a1);
                  }
                  else {
                    sub_10035BD58(a1);
                  }
                }

                return;
              }

              if (qword_1019344C0 != -1) {
                dispatch_once(&qword_1019344C0, &stru_101834360);
              }
              uint64_t v31 = (os_log_s *)qword_1019344C8;
              if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)std::string buf = 67240450;
                *(_DWORD *)double v65 = 0;
                *(_WORD *)&v65[4] = 2114;
                *(void *)&v65[6] = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "Unable to create plugin interface: kr:%{public}x service:%{public}@",  buf,  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019344C0 != -1) {
                  dispatch_once(&qword_1019344C0, &stru_101834360);
                }
                BOOL v56 = 67240450;
                *(_DWORD *)int v57 = 0;
                *(_WORD *)&v57[4] = 2114;
                *(void *)&v57[6] = v10;
                LODWORD(byte15a) = 18;
                uint64_t v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Unable to create plugin interface: kr:%{public}x service:%{public}@",  &v56,  byte15a);
                sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v39);
              }

              if (v53) {
                (*(void (**)(uint64_t, void))(*(void *)v53 + 72LL))(v53, 0LL);
              }
            }

            if (theInterface)
            {
              ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
              IODestroyPlugInInterface(theInterface);
            }

            return;
          }

          int v18 = v17;
          if (qword_1019344C0 != -1) {
            dispatch_once(&qword_1019344C0, &stru_101834360);
          }
          uint64_t v19 = (os_log_s *)qword_1019344C8;
          if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)std::string buf = 67240192;
            *(_DWORD *)double v65 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Unable to create plugin interface: 0x%{public}x",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344C0 != -1) {
              dispatch_once(&qword_1019344C0, &stru_101834360);
            }
            BOOL v56 = 67240192;
            *(_DWORD *)int v57 = v18;
            LODWORD(byte15) = 8;
            __int16 v20 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Unable to create plugin interface: 0x%{public}x",  &v56,  byte15);
LABEL_60:
            __int16 v22 = (uint8_t *)v20;
            sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n");
LABEL_61:
            if (v22 != buf) {
              free(v22);
            }
          }
        }

        else
        {
          if (qword_1019344C0 != -1) {
            dispatch_once(&qword_1019344C0, &stru_101834360);
          }
          uint64_t v25 = (os_log_s *)qword_1019344C8;
          if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Service doesn't exist", buf, 2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344C0 != -1) {
              dispatch_once(&qword_1019344C0, &stru_101834360);
            }
            LOWORD(vsub_1011C52D0(v33 - 56) = 0;
            __int16 v20 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Service doesn't exist",  &v56,  2);
            goto LABEL_60;
          }
        }
      }

      else
      {
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_101834360);
        }
        __int16 v24 = (os_log_s *)qword_1019344C8;
        if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Can't get cma registry ID", buf, 2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344C0 != -1) {
            dispatch_once(&qword_1019344C0, &stru_101834360);
          }
          LOWORD(vsub_1011C52D0(v33 - 56) = 0;
          __int16 v20 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Can't get cma registry ID",  &v56,  2);
          goto LABEL_60;
        }
      }
    }

    else
    {
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      uint64_t v23 = (os_log_s *)qword_1019344C8;
      if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "IOHIDServiceClientGetRegistryID query for cma service failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_101834360);
        }
        LOWORD(vsub_1011C52D0(v33 - 56) = 0;
        __int16 v20 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "IOHIDServiceClientGetRegistryID query for cma service failed",  &v56,  2);
        goto LABEL_60;
      }
    }
  }

  else
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    uint64_t v21 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "IoHidDevice is not ready", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      LOWORD(vsub_1011C52D0(v33 - 56) = 0;
      __int16 v22 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "IoHidDevice is not ready",  &v56,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n");
      goto LABEL_61;
    }
  }

uint64_t sub_10035A608(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[241];
  sub_100E2E678(v2);
  sub_100E2EA00(v2);
  return (*(uint64_t (**)(void *))(*a1 + 568LL))(a1);
}

void sub_10035A64C(void *a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  sub_100413284(v4, &v35);
  int v34 = 1;
  sub_1002A7CB0(v35, "OscarLogLevel", &v34);
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  char v5 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = (char)v34;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "spuLogLevel,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    v37[0] = 67109120;
    v37[1] = (char)v34;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "spuLogLevel,%d",  v37);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::sendInitialConfig(BOOL)", "%s\n", v25);
  }

  char v6 = (*(uint64_t (**)(void *))(*a1 + 192LL))(a1);
  __int16 v33 = 0;
  sub_1002A6F64(v35, "OscarActivityForceCodeTransition", (BOOL *)&v33 + 1);
  sub_1002A6F64(v35, "OscarStepCountingForceCodeTransition", (BOOL *)&v33);
  sub_1002A7208(v35, "UserConfig", (_WORD *)a1 + 172);
  buf[0] = 0;
  sub_1012049AC(v32, "LogCompassCalibration", buf, 0);
  buf[0] = 0;
  sub_1012049AC(v31, "LogCompass", buf, 0);
  *((_BYTE *)a1 + 12844) = (v31[1] | v32[1]) != 0;
  buf[0] = 0;
  sub_1012049AC(v30, "IgnoreDynamicGyroBiasEstimator", buf, 0);
  BOOL v29 = sub_1004F76B8() ^ 1;
  sub_1002A6F64(v35, "ConsumeBasebandSpeedInActivity", &v29);
  v37[0] = 1114636288;
  sub_101206C88(buf, "ViewObstructedReplyIntervalSecs", v37, 0);
  char v27 = a2;
  char v28 = v6;
  LOBYTE(v37[0]) = 0;
  sub_1002A6F64(v35, "EnableComputeWhileStatic", (BOOL *)v37);
  char v7 = sub_100C948C0();
  char v8 = HIBYTE(v33);
  char v9 = v33;
  char v10 = v34;
  unsigned __int8 v26 = v30[1];
  sub_1004F2598();
  char v11 = sub_1004FCB90();
  BOOL v12 = v29;
  sub_1004F2598();
  BOOL v13 = sub_1004FC628();
  sub_1004F2598();
  char v14 = sub_1004FC6A0();
  sub_1004F2598();
  char v15 = sub_1004FC6FC();
  sub_1004F2598();
  BOOL v16 = sub_1004FC778();
  int v17 = v39;
  char v18 = v37[0];
  *((_BYTE *)a1 + 217) = 6;
  *((_BYTE *)a1 + 218) = v7;
  *((_BYTE *)a1 + 219) = v28;
  *((_BYTE *)a1 + 220) = v8;
  *((_BYTE *)a1 + 221) = v9;
  *(_DWORD *)((char *)a1 + 222) = 0;
  *((_BYTE *)a1 + 226) = 0;
  *((_BYTE *)a1 + 227) = v10;
  *(void *)((char *)a1 + 228) = 0LL;
  *(void *)((char *)a1 + 235) = 0LL;
  *((_BYTE *)a1 + 243) = v26;
  *((_BYTE *)a1 + 244) = v11;
  *(void *)((char *)a1 + 253) = 0LL;
  *(void *)((char *)a1 + 245) = 0LL;
  *((_BYTE *)a1 + 263) = v12;
  *((_WORD *)a1 + 1memset(&buf[7], 0, 32) = 0;
  *((_BYTE *)a1 + 266) = v13;
  *(_WORD *)((char *)a1 + 267) = 0;
  *((_BYTE *)a1 + 269) = v14;
  *((_BYTE *)a1 + 270) = 0;
  *((_BYTE *)a1 + 271) = v15;
  *((_BYTE *)a1 + 2sub_1011C52D0(v15 - 72) = v16;
  *((_BYTE *)a1 + 273) = 0;
  *(_DWORD *)((char *)a1 + 274) = v17;
  *(_DWORD *)((char *)a1 + 278) = 0;
  *((_BYTE *)a1 + 282) = v18;
  unsigned int v19 = sub_1004F97F4();
  unsigned int v20 = sub_1004FAB40();
  if ((v19 & 0x20000000) != 0) {
    int v21 = 34;
  }
  else {
    int v21 = 32;
  }
  if ((v19 & 0x20000008) != 0) {
    v21 |= 0x40u;
  }
  sub_100C94910((uint64_t)a1, (float *)((v19 >> 9) & 8 | v19 & 0x10 | (v20 >> 2) & 4 | v21), v27);
  if ((v27 & 1) == 0)
  {
    sub_10035ABA8(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 552LL))(a1, 1LL);
    sub_10035AC0C((uint64_t)a1);
  }

  sub_10035AF1C((uint64_t)a1);
  __int16 v22 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

void sub_10035AB18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10035AB68(uint64_t a1)
{
  return a1;
}

void *sub_10035ABA8(void *result)
{
  uint64_t v1 = result[73];
  if (v1)
  {
    unint64_t v2 = result;
    [*(id *)(v1 + 16) register:*(void *)(v1 + 8) forNotification:1 registrationInfo:0];
    [*(id *)(v2[73] + 16) register:*(void *)(v2[73] + 8) forNotification:2 registrationInfo:0];
    return [*(id *)(v2[73] + 16) register:*(void *)(v2[73] + 8) forNotification:3 registrationInfo:0];
  }

  return result;
}

void sub_10035AC0C(uint64_t a1)
{
  uint64_t v2 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v3 = *(void *)(a1 + 1968);
  *(void *)(a1 + 1968) = v2;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    uint64_t v4 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  if (sub_1001B9A1C())
  {
    [*(id *)(*(void *)(a1 + 1968) + 16) register:*(void *)(*(void *)(a1 + 1968) + 8) forNotification:0 registrationInfo:0];
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101834480);
    }
    char v5 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Registering for backlight state notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_101834480);
      }
      v8[0] = 0;
      char v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  1LL,  "Registering for backlight state notifications",  v8,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::registerForDisplayStatusNotification()", "%s\n");
LABEL_22:
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101834480);
    }
    char v7 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Backlight state notifications are not available on this platform",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_101834480);
      }
      v8[0] = 0;
      char v6 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  16LL,  "Backlight state notifications are not available on this platform",  v8,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPU::registerForDisplayStatusNotification()", "%s\n");
      goto LABEL_22;
    }
  }

void sub_10035AF1C(uint64_t a1)
{
  double v64 = 0.0;
  uint64_t v2 = sub_1002F8DDC();
  if ((sub_1002A6F20(v2, (uint64_t)@"CompassCalibration", (CFTypeRef *)&v64) & 1) != 0)
  {
    objc_msgSend(objc_msgSend(*(id *)&v64, "objectForKeyedSubscript:", @"Time"), "floatValue");
    float v4 = v3;
    id v5 = [*(id *)&v64 objectForKeyedSubscript:@"Bias"];
    id v6 = [*(id *)&v64 objectForKeyedSubscript:@"Scale"];
    double v7 = v4;
    if (*(_BYTE *)(a1 + 12844))
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018343A0);
      }
      char v8 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
        float v10 = v9;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
        float v12 = v11;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
        float v14 = v13;
        objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
        *(_DWORD *)std::string buf = 134219520;
        *(double *)&uint8_t buf[4] = v10;
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(double *)&_BYTE buf[14] = v12;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&_BYTE buf[24] = v14;
        __int16 v66 = 2048;
        double v67 = (float)(1.0 / v15);
        __int16 v68 = 1024;
        int v69 = 4;
        __int16 v70 = 2048;
        uint64_t v71 = 0x3FD1EB8520000000LL;
        __int16 v72 = 2048;
        double v73 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[CompassCalibration] logging initial persisted calibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,q uality,%.2f,cftime,%.3f",  buf,  0x44u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018343A0);
        }
        uint64_t v52 = qword_101934588;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
        float v54 = v53;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
        float v56 = v55;
        objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
        float v58 = v57;
        objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
        int v77 = 134219520;
        double v78 = v54;
        __int16 v79 = 2048;
        double v80 = v56;
        __int16 v81 = 2048;
        double v82 = v58;
        __int16 v83 = 2048;
        double v84 = (float)(1.0 / v59);
        __int16 v85 = 1024;
        int v86 = 4;
        __int16 v87 = 2048;
        uint64_t v88 = 0x3FD1EB8520000000LL;
        __int16 v89 = 2048;
        double v90 = v7;
        LODWORD(v62) = 68;
        int v60 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v52,  0LL,  "[CompassCalibration] logging initial persisted calibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,% .2f,level,%d,quality,%.2f,cftime,%.3f",  COERCE_DOUBLE(&v77),  v62,  v63,  v64);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v60);
        if (v60 != buf) {
          free(v60);
        }
      }

      sub_101125260(buf);
      sub_10113A884(buf);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v76 |= 1u;
      CFAbsoluteTime v74 = Current;
      uint64_t v17 = v75;
      uint64_t v18 = *(void *)(a1 + 352);
      *(_DWORD *)(v75 + 80) |= 1u;
      *(void *)(v17 + 8) = v18;
      uint64_t v19 = v75;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)(v19 + 80) |= 2u;
      *(_DWORD *)(v19 + 16) = v20;
      uint64_t v21 = v75;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)(v21 + 80) |= 4u;
      *(_DWORD *)(v21 + 20) = v22;
      uint64_t v23 = v75;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)(v23 + 80) |= 8u;
      *(_DWORD *)(v23 + 24) = v24;
      uint64_t v25 = v75;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)(v25 + 80) |= 0x2000u;
      *(_DWORD *)(v25 + 64) = v26;
      uint64_t v27 = v75;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)(v27 + 80) |= 0x4000u;
      *(_DWORD *)(v27 + 68) = v28;
      uint64_t v29 = v75;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)(v29 + 80) |= 0x8000u;
      *(_DWORD *)(v29 + sub_1011C52D0(v15 - 72) = v30;
      uint64_t v31 = v75;
      *(_DWORD *)(v75 + 80) |= 0x1000u;
      *(_DWORD *)(v31 + 60) = 1049582633;
      uint64_t v32 = v75;
      *(_DWORD *)(v75 + 80) |= 0x20u;
      *(_DWORD *)(v32 + memset(&buf[7], 0, 32) = 2139095039;
      uint64_t v33 = v75;
      *(_DWORD *)(v75 + 80) |= 0x40u;
      *(_DWORD *)(v33 + 36) = 0;
      uint64_t v34 = v75;
      *(_DWORD *)(v75 + 80) |= 0x80u;
      *(_DWORD *)(v34 + 40) = 0;
      uint64_t v35 = v75;
      *(_DWORD *)(v75 + 80) |= 0x200u;
      *(_DWORD *)(v35 + 48) = 0;
      uint64_t v36 = v75;
      *(_DWORD *)(v75 + 80) |= 0x400u;
      *(_DWORD *)(v36 + 52) = 0;
      uint64_t v37 = v75;
      *(_DWORD *)(v75 + 80) |= 0x800u;
      *(_DWORD *)(v37 + sub_1011C52D0(v33 - 56) = 0;
      uint64_t v38 = v75;
      *(_DWORD *)(v75 + 80) |= 0x10u;
      *(_DWORD *)(v38 + 28) = 4;
      uint64_t v39 = v75;
      *(_DWORD *)(v75 + 80) |= 0x20000u;
      *(_BYTE *)(v39 + 77) = 0;
      uint64_t v40 = v75;
      *(_DWORD *)(v75 + 80) |= 0x10000u;
      *(_BYTE *)(v40 + 76) = 1;
      uint64_t v41 = v75;
      *(_DWORD *)(v75 + 80) |= 0x100u;
      *(_DWORD *)(v41 + 44) = 0;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_1018343C0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
      }
      sub_101127D00((PB::Base *)buf);
    }

    if (CFAbsoluteTimeGetCurrent() + -3600.0 <= v7)
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018343A0);
      }
      uint64_t v45 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(double *)&uint8_t buf[4] = v64;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "[CompassCalibration] restoring calibration,%@",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018343A0);
        }
        int v77 = 138412290;
        double v78 = v64;
        LODWORD(v62) = 12;
        BOOL v61 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "[CompassCalibration] restoring calibration,%@",  &v77,  *(void *)&v62);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v61);
        if (v61 != buf) {
          free(v61);
        }
      }

      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)&buf[1] = v46;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)&buf[5] = v47;
      objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)&buf[9] = v48;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "floatValue");
      *(_DWORD *)&buf[13] = v49;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 1), "floatValue");
      *(_DWORD *)&buf[17] = v50;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 2), "floatValue");
      *(_DWORD *)&buf[21] = v51;
      *(_DWORD *)&buf[25] = 1049582633;
      sub_100362794(a1 + 192, buf, 0LL);
    }

    else
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018343A0);
      }
      uint64_t v42 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(double *)&uint8_t buf[4] = v64;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[CompassCalibration] stale persistent calibration,%@",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018343A0);
        }
        int v77 = 138412290;
        double v78 = v64;
        LODWORD(v62) = 12;
        CFNumberRef v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "[CompassCalibration] stale persistent calibration,%@",  &v77,  *(void *)&v62);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v43);
LABEL_30:
        if (v43 != buf) {
          free(v43);
        }
      }
    }
  }

  else
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    double v44 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[CompassCalibration] no persistent calibration found",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018343A0);
      }
      LOWORD(v77) = 0;
      CFNumberRef v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "[CompassCalibration] no persistent calibration found",  &v77,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v43);
      goto LABEL_30;
    }
  }

void sub_10035B960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10035B980(uint64_t a1)
{
  *(void *)a1 = off_101833870;
  *(void *)(a1 + memset(&buf[7], 0, 32) = off_101833D38;
  *(void *)(a1 + 40) = off_101833D80;
  *(void *)(a1 + 48) = off_101833DB8;
  *(void *)(a1 + sub_1011C52D0(v33 - 56) = off_101833DE0;
  *(void *)(a1 + 64) = off_101833E30;
  *(void *)(a1 + sub_1011C52D0(v15 - 72) = off_101833E68;
  *(void *)(a1 + 80) = off_101833EA8;
  *(void *)(a1 + 88) = off_101833EE0;
  *(void *)(a1 + 96) = off_101833F10;
  *(void *)(a1 + 104) = off_101833F60;
  *(void *)(a1 + 112) = off_101833F88;
  *(void *)(a1 + 120) = off_101833FF0;
  *(void *)(a1 + 128) = off_101834018;
  *(void *)(a1 + 136) = off_101834040;
  uint64_t v2 = a1 + 1936;
  *(void *)(a1 + 152) = off_101834068;
  sub_1000F0D38((void *)(a1 + 1936));
  sub_1000F0D38((void *)(a1 + 1952));
  sub_10029D2EC((uint64_t *)(a1 + 1928), 0LL);

  nullsub_10(a1 + 13608);
  sub_10099A5AC(a1 + 13176);
  sub_1008290F4(a1 + 13040);
  uint64_t v3 = *(void *)(a1 + 1968);
  *(void *)(a1 + 1968) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_10000AE14(a1 + 1952);
  sub_10000AE14(v2);
  sub_10029D2EC((uint64_t *)(a1 + 1928), 0LL);
  return sub_100C990C0(a1);
}

uint64_t sub_10035BAE0(uint64_t a1)
{
  return sub_10035B980(a1 - 32);
}

uint64_t sub_10035BAE8(uint64_t a1)
{
  return sub_10035B980(a1 - 40);
}

uint64_t sub_10035BAF0(uint64_t a1)
{
  return sub_10035B980(a1 - 48);
}

uint64_t sub_10035BAF8(uint64_t a1)
{
  return sub_10035B980(a1 - 56);
}

uint64_t sub_10035BB00(uint64_t a1)
{
  return sub_10035B980(a1 - 64);
}

uint64_t sub_10035BB08(uint64_t a1)
{
  return sub_10035B980(a1 - 72);
}

uint64_t sub_10035BB10(uint64_t a1)
{
  return sub_10035B980(a1 - 80);
}

uint64_t sub_10035BB18(uint64_t a1)
{
  return sub_10035B980(a1 - 88);
}

uint64_t sub_10035BB20(uint64_t a1)
{
  return sub_10035B980(a1 - 96);
}

uint64_t sub_10035BB28(uint64_t a1)
{
  return sub_10035B980(a1 - 104);
}

uint64_t sub_10035BB30(uint64_t a1)
{
  return sub_10035B980(a1 - 112);
}

uint64_t sub_10035BB38(uint64_t a1)
{
  return sub_10035B980(a1 - 120);
}

uint64_t sub_10035BB40(uint64_t a1)
{
  return sub_10035B980(a1 - 128);
}

uint64_t sub_10035BB48(uint64_t a1)
{
  return sub_10035B980(a1 - 136);
}

uint64_t sub_10035BB50(uint64_t a1)
{
  return sub_10035B980(a1 - 152);
}

void sub_10035BB58(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1);
  operator delete(v1);
}

void sub_10035BB6C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 32);
  operator delete(v1);
}

void sub_10035BB84(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 40);
  operator delete(v1);
}

void sub_10035BB9C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 48);
  operator delete(v1);
}

void sub_10035BBB4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 56);
  operator delete(v1);
}

void sub_10035BBCC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 64);
  operator delete(v1);
}

void sub_10035BBE4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 72);
  operator delete(v1);
}

void sub_10035BBFC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 80);
  operator delete(v1);
}

void sub_10035BC14(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 88);
  operator delete(v1);
}

void sub_10035BC2C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 96);
  operator delete(v1);
}

void sub_10035BC44(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 104);
  operator delete(v1);
}

void sub_10035BC5C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 112);
  operator delete(v1);
}

void sub_10035BC74(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 120);
  operator delete(v1);
}

void sub_10035BC8C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 128);
  operator delete(v1);
}

void sub_10035BCA4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 136);
  operator delete(v1);
}

void sub_10035BCBC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10035B980(a1 - 152);
  operator delete(v1);
}

void sub_10035BCD4(dispatch_queue_s **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1003623DC;
  void v3[3] = &unk_101830538;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_10035BD2C(uint64_t a1)
{
  return sub_10035BD9C(a1, 1);
}

uint64_t sub_10035BD58(uint64_t a1)
{
  return sub_10035BD9C(a1, 0);
}

uint64_t sub_10035BD84(uint64_t a1)
{
  return sub_1003597D0(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10035BD94(uint64_t a1)
{
  return sub_1003593EC(*(void *)(a1 + 32));
}

uint64_t sub_10035BD9C(uint64_t a1, int a2)
{
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)(a1 + 1920))
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    float v4 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Begin processing historical events.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      LOWORD(v20[0]) = 0;
      float v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Begin processing historical events.",  v20,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v12);
    }

    sub_100CA7390(a1, 1);
    uint64_t v5 = *(void *)(a1 + 1920);
    if (a2)
    {
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      id v6 = (os_log_s *)qword_1019344C8;
      if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Clearing historical event buffer", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_101834360);
        }
        LOWORD(v20[0]) = 0;
        LODWORD(v16) = 2;
        float v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "Clearing historical event buffer",  v20,  v16);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v15);
      }

      int v7 = (*(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t))(*(void *)v5 + 96LL))( v5,  nullsub_165,  a1);
    }

    else
    {
      int v7 = (*(uint64_t (**)(void, uint64_t (*)(), uint64_t))(*(void *)v5 + 96LL))( *(void *)(a1 + 1920),  sub_10035C3D8,  a1);
    }

    int v8 = v7;
    if (v7)
    {
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      float v9 = (os_log_s *)qword_1019344C8;
      if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v22 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "ApplyToHistorical did not complete successfully.  Status: 0x%x",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_101834360);
        }
        v20[0] = 67109120;
        v20[1] = v8;
        float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "ApplyToHistorical did not complete successfully.  Status: 0x%x",  v20);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v14);
      }
    }

    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    float v10 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Finish processing historical events.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      LOWORD(v20[0]) = 0;
      LODWORD(v16) = 2;
      float v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Finish processing historical events.",  v20,  v16);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v13);
    }

    sub_100CA7390(a1, 0);
  }

  sub_100AD5D38((uint64_t)v19);
  return sub_100AD5650(v19);
}

void sub_10035C38C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_10035C3DC(uint64_t a1, uint64_t a2)
{
  if (sub_100719C6C(*(void *)(a1 + 1936)))
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    float v4 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Processing historical event", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      v10[0] = 0;
      int v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  2LL,  "Processing historical event",  v10,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::historicalEventApplier(IOHIDEventRef)", "%s\n", v8);
    }

    sub_100719C6C(*(void *)(a1 + 1936));
    sub_100359024(a1, v5, v6, a2);
  }

  else
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    int v7 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "No service ref, did not process historical event",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      v10[0] = 0;
      float v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  2LL,  "No service ref, did not process historical event",  v10,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::historicalEventApplier(IOHIDEventRef)", "%s\n", v9);
    }
  }

void sub_10035C6B8(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10035C724;
  void v5[3] = &unk_10181FA90;
  void v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_10035C724(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1976) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

void sub_10035C75C(uint64_t a1, int a2)
{
  char v7 = 18;
  int v8 = a2;
  uint64_t v9 = -1LL;
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  uint64_t v4 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v13 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[CLSPU] Setting BufferedAccelSampleRate,%lu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    int v10 = 134217984;
    uint64_t v11 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "[CLSPU] Setting BufferedAccelSampleRate,%lu",  &v10);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::setAccelBufferSampling(int)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_10036257C(a1 + 192, (uint64_t *)&v7, 0LL);
}

void sub_10035C938(uint64_t a1, int a2)
{
  char v7 = 18;
  int v8 = -1;
  int v9 = a2;
  int v10 = -1;
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  uint64_t v4 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[CLSPU] Setting BufferedGyroSampleRate,%lu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    int v11 = 134217984;
    uint64_t v12 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "[CLSPU] Setting BufferedGyroSampleRate,%lu",  &v11);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::setGyroBufferSampling(int)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_10036257C(a1 + 192, (uint64_t *)&v7, 0LL);
}

void sub_10035CB14(uint64_t a1, int a2)
{
  char v7 = 18;
  uint64_t v8 = -1LL;
  int v9 = a2;
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  uint64_t v4 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v13 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[CLSPU] Setting BufferedPressureSampleRate,%lu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    int v10 = 134217984;
    uint64_t v11 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "[CLSPU] Setting BufferedPressureSampleRate,%lu",  &v10);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPU::setPressureBufferSampling(int)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_10036257C(a1 + 192, (uint64_t *)&v7, 0LL);
}

void sub_10035CCF0(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10035CD5C;
  void v5[3] = &unk_10181FA90;
  void v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_10035CD5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1984) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

void sub_10035CD94(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10035CE00;
  void v5[3] = &unk_10181FA90;
  void v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_10035CE00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 128memset(&buf[7], 0, 32) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

BOOL sub_10035CE38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1928);
  if (v1)
  {
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    sub_1006E27E8();
    if (Current == (CFRunLoopRef)sub_1006E2AB4())
    {
      double v5 = 0.005;
      if (!*(_BYTE *)(a1 + 225)) {
        double v5 = 0.0;
      }
      sub_10071A73C(*(void *)(a1 + 1952), v5);
      v20[0] = 3;
      int v6 = *(unsigned __int8 *)(a1 + 226);
      v20[1] = *(_BYTE *)(a1 + 226);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101834380);
      }
      char v7 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v24) = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[CLSPU] Sending CameraDebug command %hhu",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101834380);
        }
        int v21 = 67109120;
        LODWORD(v22) = v6;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "[CLSPU] Sending CameraDebug command %hhu",  &v21);
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLSPU::configureDevMotion3()", "%s\n", v13);
      }

      int v19 = 0;
      uint64_t v18 = 4LL;
      mach_error_t v8 = sub_100E2F5E4(*(void *)(a1 + 1928), (uint64_t)v20, (char *)2, (uint64_t)&v19, (uint64_t)&v18);
      if (v8)
      {
        mach_error_t v9 = v8;
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101834380);
        }
        int v10 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = mach_error_string(v9);
          *(_DWORD *)std::string buf = 136315138;
          int v24 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CLSPU] Send command failed %s", buf, 0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_101834380);
          }
          uint64_t v14 = qword_101934568;
          float v15 = mach_error_string(v9);
          int v21 = 136315138;
          int v22 = v15;
          uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v14,  16LL,  "[CLSPU] Send command failed %s",  (const char *)&v21);
          sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLSPU::configureDevMotion3()", "%s\n", v16);
        }
      }
    }

    else
    {
      uint64_t v4 = sub_1006E27E8();
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      _OWORD v17[2] = sub_10035D200;
      v17[3] = &unk_10181D3D0;
      v17[4] = a1;
      sub_1006E28B8(v4, (uint64_t)v17);
    }
  }

  return v1 != 0;
}

uint64_t sub_10035D200(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 568LL))(*(void *)(a1 + 32));
}

void sub_10035D210(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1006E27E8();
  if (Current == (CFRunLoopRef)sub_1006E2AB4())
  {
    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 560LL))(a1, a2, 0LL, 0LL);
  }

  else
  {
    uint64_t v5 = sub_1006E27E8();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_10035D2C4;
    void v6[3] = &unk_101833458;
    _DWORD v6[4] = a1;
    char v7 = a2;
    sub_1006E2970(v5, (uint64_t)v6);
  }

uint64_t sub_10035D2C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 552LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_10035D2DC(uint64_t a1, char a2, dispatch_object_s *a3, id a4)
{
  *(_BYTE *)(a1 + 246) = a2;
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  mach_error_t v8 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
  {
    int v9 = *(unsigned __int8 *)(a1 + 218);
    int v10 = *(unsigned __int8 *)(a1 + 219);
    int v11 = *(unsigned __int8 *)(a1 + 223);
    int v12 = *(unsigned __int8 *)(a1 + 264);
    int v13 = *(unsigned __int8 *)(a1 + 220);
    int v14 = *(unsigned __int8 *)(a1 + 221);
    int v15 = *(unsigned __int8 *)(a1 + 222);
    int v16 = *(unsigned __int8 *)(a1 + 242);
    int v17 = *(unsigned __int8 *)(a1 + 243);
    int v18 = *(unsigned __int8 *)(a1 + 225);
    int v19 = *(unsigned __int8 *)(a1 + 226);
    double v20 = *(float *)(a1 + 230);
    int v21 = *(unsigned __int8 *)(a1 + 224);
    int v22 = *(char *)(a1 + 227);
    int v23 = *(unsigned __int8 *)(a1 + 245);
    int v24 = *(unsigned __int16 *)(a1 + 228);
    int v25 = *(unsigned __int8 *)(a1 + 255);
    int v26 = *(unsigned __int8 *)(a1 + 256);
    int v27 = *(unsigned __int8 *)(a1 + 257);
    int v28 = *(unsigned __int8 *)(a1 + 258);
    int v29 = *(unsigned __int8 *)(a1 + 259);
    id v30 = a4;
    uint64_t v31 = *(void *)(a1 + 247);
    int v32 = *(unsigned __int8 *)(a1 + 267);
    __int16 v66 = a3;
    int v33 = *(unsigned __int8 *)(a1 + 244);
    int v63 = *(unsigned __int8 *)(a1 + 271);
    int v64 = *(unsigned __int8 *)(a1 + 282);
    int v65 = *(unsigned __int8 *)(a1 + 272);
    *(_DWORD *)std::string buf = 67181313;
    int v123 = v9;
    __int16 v124 = 1025;
    int v125 = v10;
    __int16 v126 = 1025;
    int v127 = v11;
    __int16 v128 = 1025;
    int v129 = v12;
    __int16 v130 = 1025;
    int v131 = v13;
    __int16 v132 = 1025;
    int v133 = v14;
    __int16 v134 = 1025;
    int v135 = v15;
    __int16 v136 = 1026;
    int v137 = v16;
    __int16 v138 = 1026;
    int v139 = v17;
    __int16 v140 = 1026;
    int v141 = v18;
    __int16 v142 = 1026;
    int v143 = v19;
    __int16 v144 = 2050;
    double v145 = v20;
    __int16 v146 = 1026;
    int v147 = v21;
    __int16 v148 = 1026;
    int v149 = v22;
    __int16 v150 = 1025;
    int v151 = v23;
    __int16 v152 = 1026;
    int v153 = v24;
    __int16 v154 = 1025;
    int v155 = v25;
    __int16 v156 = 1025;
    int v157 = v26;
    __int16 v158 = 1025;
    int v159 = v27;
    __int16 v160 = 1025;
    int v161 = v28;
    __int16 v162 = 1025;
    int v163 = v29;
    __int16 v164 = 2050;
    uint64_t v165 = v31;
    a4 = v30;
    __int16 v166 = 1025;
    int v167 = v32;
    __int16 v168 = 1025;
    int v169 = v33;
    a3 = v66;
    __int16 v170 = 1025;
    int v171 = v63;
    __int16 v172 = 1025;
    int v173 = v64;
    __int16 v174 = 1025;
    int v175 = v65;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Sending new config to SPU:enableActivity,%{private}u,enableStepCounting,%{private}u,enableOnBodyDetection,%{privat e}u,enableStepCountPeriodFast,%{private}uactivityForceCodeTransition,%{private}u,stepCountingForceCodeTransition,% {private}u,enableThreshold,%{private}u,disableDynamicBias,%{public}u,ignoreDynamicBias,%{public}u,ispEnable,%{publ ic}u,ispMode,%{public}u,ISPUpdateIntervalOverride,%{public}f,stickyIsp,%{public}d,logLevel,%{public}d,enableCoarse Elevation,%{private}d,proactiveRevisitTime,%{public}u,fallStatsMode,%{private}u,sensorRecordingActive,%{private}u, simulateEvent,%{private}u,userStudyPressureDataCollection,%{private}u,detectorEnabled,%{private}u,lastAckedAopTime stamp,%{public}llu,gateDynamicBiasOnChargerStatus,%{private}u,supportsOISImprovements,%{private}u,compassCoexDurin gBasebandUse,%{private}u,enableComputeWhileStatic,%{private}u,magnetometer50HzODRUse,%{private}u",  buf,  0xACu);
  }

  if (!sub_1002921D0(115, 2))
  {
    if (!a4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }

  bzero(buf, 0x65CuLL);
  double v67 = a3;
  id v62 = a4;
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  int v34 = *(unsigned __int8 *)(a1 + 218);
  int v35 = *(unsigned __int8 *)(a1 + 219);
  int v36 = *(unsigned __int8 *)(a1 + 223);
  int v37 = *(unsigned __int8 *)(a1 + 264);
  int v38 = *(unsigned __int8 *)(a1 + 220);
  int v39 = *(unsigned __int8 *)(a1 + 221);
  int v40 = *(unsigned __int8 *)(a1 + 222);
  int v41 = *(unsigned __int8 *)(a1 + 242);
  int v42 = *(unsigned __int8 *)(a1 + 243);
  int v43 = *(unsigned __int8 *)(a1 + 225);
  int v44 = *(unsigned __int8 *)(a1 + 226);
  double v45 = *(float *)(a1 + 230);
  int v46 = *(unsigned __int8 *)(a1 + 224);
  int v47 = *(char *)(a1 + 227);
  int v48 = *(unsigned __int8 *)(a1 + 245);
  int v49 = *(unsigned __int16 *)(a1 + 228);
  int v50 = *(unsigned __int8 *)(a1 + 255);
  int v51 = *(unsigned __int8 *)(a1 + 256);
  int v52 = *(unsigned __int8 *)(a1 + 257);
  int v53 = *(unsigned __int8 *)(a1 + 258);
  int v54 = *(unsigned __int8 *)(a1 + 259);
  uint64_t v55 = *(void *)(a1 + 247);
  int v56 = *(unsigned __int8 *)(a1 + 267);
  int v57 = *(unsigned __int8 *)(a1 + 244);
  int v58 = *(unsigned __int8 *)(a1 + 271);
  int v59 = *(unsigned __int8 *)(a1 + 282);
  int v60 = *(unsigned __int8 *)(a1 + 272);
  v69[0] = 67181313;
  v69[1] = v34;
  __int16 v70 = 1025;
  int v71 = v35;
  __int16 v72 = 1025;
  int v73 = v36;
  __int16 v74 = 1025;
  int v75 = v37;
  __int16 v76 = 1025;
  int v77 = v38;
  __int16 v78 = 1025;
  int v79 = v39;
  __int16 v80 = 1025;
  int v81 = v40;
  __int16 v82 = 1026;
  int v83 = v41;
  __int16 v84 = 1026;
  int v85 = v42;
  __int16 v86 = 1026;
  int v87 = v43;
  __int16 v88 = 1026;
  int v89 = v44;
  __int16 v90 = 2050;
  double v91 = v45;
  __int16 v92 = 1026;
  int v93 = v46;
  __int16 v94 = 1026;
  int v95 = v47;
  __int16 v96 = 1025;
  int v97 = v48;
  __int16 v98 = 1026;
  int v99 = v49;
  __int16 v100 = 1025;
  int v101 = v50;
  __int16 v102 = 1025;
  int v103 = v51;
  __int16 v104 = 1025;
  int v105 = v52;
  __int16 v106 = 1025;
  int v107 = v53;
  __int16 v108 = 1025;
  int v109 = v54;
  __int16 v110 = 2050;
  uint64_t v111 = v55;
  __int16 v112 = 1025;
  int v113 = v56;
  __int16 v114 = 1025;
  int v115 = v57;
  __int16 v116 = 1025;
  int v117 = v58;
  __int16 v118 = 1025;
  int v119 = v59;
  __int16 v120 = 1025;
  int v121 = v60;
  BOOL v61 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Sending new config to SPU:enableActivity,%{private}u,enableStepCounting,%{private}u,enableOnBodyDetect ion,%{private}u,enableStepCountPeriodFast,%{private}uactivityForceCodeTransition,%{private}u,stepCount ingForceCodeTransition,%{private}u,enableThreshold,%{private}u,disableDynamicBias,%{public}u,ignoreDyn amicBias,%{public}u,ispEnable,%{public}u,ispMode,%{public}u,ISPUpdateIntervalOverride,%{public}f,stick yIsp,%{public}d,logLevel,%{public}d,enableCoarseElevation,%{private}d,proactiveRevisitTime,%{public}u, fallStatsMode,%{private}u,sensorRecordingActive,%{private}u,simulateEvent,%{private}u,userStudyPressur eDataCollection,%{private}u,detectorEnabled,%{private}u,lastAckedAopTimestamp,%{public}llu,gateDynamic BiasOnChargerStatus,%{private}u,supportsOISImprovements,%{private}u,compassCoexDuringBasebandUse,%{pri vate}u,enableComputeWhileStatic,%{private}u,magnetometer50HzODRUse,%{private}u",  v69,  172);
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)",  "%s\n",  v61);
  a3 = v67;
  a4 = v62;
  if (v62)
  {
LABEL_7:
    a4 = [a4 copy];
    if (a3) {
      dispatch_retain(a3);
    }
  }

void sub_10035D7F0(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v9[0] = 0LL;
    v9[1] = v9;
    v9[3] = sub_100362704;
    _DWORD v9[4] = nullsub_167;
    _OWORD v9[2] = 0x7812000000LL;
    void v9[5] = &unk_10175E27B;
    __int128 v4 = a2[3];
    __int128 v12 = a2[2];
    __int128 v13 = v4;
    __int16 v14 = *((_WORD *)a2 + 32);
    __int128 v5 = *a2;
    __int128 v11 = a2[1];
    __int128 v10 = v5;
    if (aBlock) {
      int v6 = _Block_copy(aBlock);
    }
    else {
      int v6 = 0LL;
    }
    char v7 = *(dispatch_queue_s **)a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10036272C;
    void v8[3] = &unk_1018344C8;
    void v8[5] = v9;
    void v8[6] = a1;
    _DWORD v8[4] = v6;
    dispatch_async(v7, v8);
    _Block_object_dispose(v9, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_10035D8F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_10035D90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = sub_1006E27E8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10035D9E8;
  v11[3] = &unk_101833458;
  _DWORD v11[4] = v4;
  char v12 = a2;
  sub_1006E2970(v5, (uint64_t)v11);
  int v6 = *(void (***)(void, void))(a1 + 40);
  if (v6)
  {
    if (*(void *)(a1 + 32))
    {
      id v7 = [v6 copy];
      mach_error_t v8 = *(dispatch_queue_s **)(a1 + 32);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      _OWORD v9[2] = sub_10035DCD8;
      v9[3] = &unk_101834300;
      _DWORD v9[4] = v7;
      char v10 = a2;
      dispatch_async(v8, v9);
    }

    else
    {
      v6[2](v6, a2);
    }
  }

void sub_10035D9E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 40)) {
    goto LABEL_9;
  }
  if (*(_BYTE *)(v1 + 216))
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    uint64_t v3 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sending initial configuration.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      v8[0] = 0;
      int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "Sending initial configuration.",  v8,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)_block_invoke",  "%s\n",  v6);
    }

    sub_100C95560(v1);
    *(_BYTE *)(v1 + 216) = 0;
    if (!*(_BYTE *)(a1 + 40))
    {
LABEL_9:
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      uint64_t v4 = (os_log_s *)qword_1019344C8;
      if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to configure motion coprocessor",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_101834360);
        }
        v8[0] = 0;
        LODWORD(v7) = 2;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  16LL,  "Failed to configure motion coprocessor",  v8,  v7);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)_block_invoke",  "%s\n",  v5);
      }

      sub_100C93A54(v1);
    }
  }

void sub_10035DCD8(uint64_t a1)
{
}

uint64_t sub_10035DD08(uint64_t a1)
{
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101834360);
  }
  uint64_t v2 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "SPU rejected configuration. resending.", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "SPU rejected configuration. resending.",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLSPU::visitHello(const CMMotionCoprocessorReply::Hello *)",  "%s\n",  v4);
  }

  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 552LL))(a1, 0LL);
}

uint64_t sub_10035DEAC(uint64_t a1)
{
  return sub_10035DD08(a1 - 152);
}

uint64_t sub_10035DEB4(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018343A0);
  }
  uint64_t v5 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = *(float *)(a2 + 5);
    double v7 = *(float *)(a2 + 9);
    double v8 = *(float *)(a2 + 13);
    double v9 = *(float *)(a2 + 17);
    double v10 = *(float *)(a2 + 21);
    double v11 = *(float *)(a2 + 25);
    double v12 = *(float *)(a2 + 29);
    double v13 = *(float *)(a2 + 33);
    double v14 = *(float *)(a2 + 37);
    double v15 = *(float *)(a2 + 53);
    double v16 = *(float *)(a2 + 57);
    double v17 = *(float *)(a2 + 61);
    double v18 = *(float *)(a2 + 65);
    double v19 = *(float *)(a2 + 41);
    double v20 = *(float *)(a2 + 49);
    int v21 = *(char *)(a2 + 1);
    int v22 = *(unsigned __int8 *)(a2 + 2);
    int v23 = *(unsigned __int8 *)(a2 + 3);
    int v24 = *(unsigned __int8 *)(a2 + 4);
    double v25 = *(float *)(a2 + 69);
    double v26 = *(float *)(a2 + 73);
    double v27 = *(float *)(a2 + 77);
    double v28 = *(float *)(a2 + 81);
    double v29 = *(float *)(a2 + 85);
    *(_DWORD *)std::string buf = 134224128;
    double v99 = v6;
    __int16 v100 = 2048;
    double v101 = v7;
    __int16 v102 = 2048;
    double v103 = v8;
    __int16 v104 = 2048;
    double v105 = v9;
    __int16 v106 = 2048;
    double v107 = v10;
    __int16 v108 = 2048;
    double v109 = v11;
    __int16 v110 = 2048;
    double v111 = v12;
    __int16 v112 = 2048;
    double v113 = v13;
    __int16 v114 = 2048;
    double v115 = v14;
    __int16 v116 = 2050;
    double v117 = v15;
    __int16 v118 = 2050;
    double v119 = v16;
    __int16 v120 = 2050;
    double v121 = v17;
    __int16 v122 = 2050;
    double v123 = v18;
    __int16 v124 = 2048;
    double v125 = v19;
    __int16 v126 = 2048;
    double v127 = v20;
    __int16 v128 = 2048;
    double v129 = v20;
    __int16 v130 = 1026;
    int v131 = v21;
    __int16 v132 = 1026;
    int v133 = v22;
    __int16 v134 = 1026;
    int v135 = v23;
    __int16 v136 = 1026;
    int v137 = v24;
    __int16 v138 = 2050;
    double v139 = v25;
    __int16 v140 = 2050;
    double v141 = v26;
    __int16 v142 = 2050;
    double v143 = v27;
    __int16 v144 = 2050;
    double v145 = v28;
    __int16 v146 = 2050;
    double v147 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[CompassCalibration] bias.x,%f,.y,%f,.z,%f,biasEstVar.x,%f,.y,%f,.z,%f,scale.x,%f,.y,%f,.z,%f,quality,%{public}f,c ost,%{public}f,coverage,%{public}f,earthDiffRatio,%{public}f,pose.x,%f,.y,%f,.z,%f,level,%{public}d,saturations,%{ public}d,hasConsistency,%{public}d,apAwake,%{public}d,planarity,%{public}f,temperature,%{public}f,minTemperatureSi nceLastCal,%{public}f,maxTemperatureSinceLastCal,%{public}f,avgTemperatureSinceLastCal,%{public}f",  buf,  0xECu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    double v68 = *(float *)(a2 + 5);
    double v69 = *(float *)(a2 + 9);
    double v70 = *(float *)(a2 + 13);
    double v71 = *(float *)(a2 + 17);
    double v72 = *(float *)(a2 + 21);
    double v73 = *(float *)(a2 + 25);
    double v74 = *(float *)(a2 + 29);
    double v75 = *(float *)(a2 + 33);
    double v76 = *(float *)(a2 + 37);
    double v77 = *(float *)(a2 + 53);
    double v78 = *(float *)(a2 + 57);
    double v79 = *(float *)(a2 + 61);
    double v80 = *(float *)(a2 + 65);
    double v81 = *(float *)(a2 + 41);
    double v82 = *(float *)(a2 + 49);
    int v83 = *(char *)(a2 + 1);
    int v84 = *(unsigned __int8 *)(a2 + 2);
    int v85 = *(unsigned __int8 *)(a2 + 3);
    int v86 = *(unsigned __int8 *)(a2 + 4);
    double v87 = *(float *)(a2 + 69);
    double v88 = *(float *)(a2 + 73);
    double v89 = *(float *)(a2 + 77);
    double v90 = *(float *)(a2 + 81);
    double v91 = *(float *)(a2 + 85);
    *(_DWORD *)int v155 = 134224128;
    *(double *)&v155[4] = v68;
    *(_WORD *)&v155[12] = 2048;
    *(double *)&v155[14] = v69;
    __int16 v156 = 2048;
    double v157 = v70;
    *(_WORD *)__int16 v158 = 2048;
    *(double *)&v158[2] = v71;
    *(_WORD *)&v158[10] = 2048;
    *(double *)&v158[12] = v72;
    *(_WORD *)int v159 = 2048;
    *(double *)&v159[2] = v73;
    *(_WORD *)&v159[10] = 2048;
    *(double *)&v159[12] = v74;
    *(_WORD *)__int16 v160 = 2048;
    *(double *)&v160[2] = v75;
    *(_WORD *)&v160[10] = 2048;
    double v161 = v76;
    __int16 v162 = 2050;
    double v163 = v77;
    __int16 v164 = 2050;
    double v165 = v78;
    __int16 v166 = 2050;
    double v167 = v79;
    __int16 v168 = 2050;
    double v169 = v80;
    __int16 v170 = 2048;
    double v171 = v81;
    __int16 v172 = 2048;
    double v173 = v82;
    __int16 v174 = 2048;
    double v175 = v82;
    __int16 v176 = 1026;
    int v177 = v83;
    __int16 v178 = 1026;
    int v179 = v84;
    __int16 v180 = 1026;
    int v181 = v85;
    __int16 v182 = 1026;
    int v183 = v86;
    __int16 v184 = 2050;
    double v185 = v87;
    __int16 v186 = 2050;
    double v187 = v88;
    __int16 v188 = 2050;
    double v189 = v89;
    __int16 v190 = 2050;
    double v191 = v90;
    __int16 v192 = 2050;
    double v193 = v91;
    __int16 v92 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "[CompassCalibration] bias.x,%f,.y,%f,.z,%f,biasEstVar.x,%f,.y,%f,.z,%f,scale.x,%f,.y,%f,.z,%f,qualit y,%{public}f,cost,%{public}f,coverage,%{public}f,earthDiffRatio,%{public}f,pose.x,%f,.y,%f,.z,%f,lev el,%{public}d,saturations,%{public}d,hasConsistency,%{public}d,apAwake,%{public}d,planarity,%{public }f,temperature,%{public}f,minTemperatureSinceLastCal,%{public}f,maxTemperatureSinceLastCal,%{public} f,avgTemperatureSinceLastCal,%{public}f",  v155,  236);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)",  "%s\n",  v92);
  }

  if (*(char *)(a2 + 1) < 4)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    int v39 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "[CompassCalibration] clearing persistent calibration",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018343A0);
      }
      *(_WORD *)int v155 = 0;
      LODWORD(v95) = 2;
      int v93 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "[CompassCalibration] clearing persistent calibration",  v155,  v95);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)",  "%s\n",  v93);
    }

    uint64_t v40 = sub_1002F8DDC();
    sub_1002A66DC(v40);
  }

  else if (*(float *)(a2 + 53) > 0.28)
  {
    v153[0] = @"Bias";
    LODWORD(v30) = *(_DWORD *)(a2 + 5);
    v152[0] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v30);
    LODWORD(v31) = *(_DWORD *)(a2 + 9);
    v152[1] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v31);
    LODWORD(vmemset(&buf[7], 0, 32) = *(_DWORD *)(a2 + 13);
    v152[2] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v32);
    v154[0] = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v152, 3LL);
    v153[1] = @"Scale";
    LODWORD(v33) = *(_DWORD *)(a2 + 29);
    v151[0] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v33);
    LODWORD(v34) = *(_DWORD *)(a2 + 33);
    v151[1] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v34);
    LODWORD(v35) = *(_DWORD *)(a2 + 37);
    v151[2] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v35);
    v154[1] = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v151, 3LL);
    v153[2] = @"Time";
    _OWORD v154[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", Current);
    *(double *)&int v36 = COERCE_DOUBLE( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v154,  v153,  3LL));
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    int v37 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412290;
      double v99 = *(double *)&v36;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "[CompassCalibration] persisting calibration,%@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018343A0);
      }
      *(_DWORD *)int v155 = 138412290;
      *(void *)&v155[4] = v36;
      LODWORD(v95) = 12;
      __int16 v94 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "[CompassCalibration] persisting calibration,%@",  v155,  v95);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)",  "%s\n",  v94);
    }

    uint64_t v38 = sub_1002F8DDC();
    sub_1002AB3DC(v38);
  }

  if (*(_BYTE *)(a1 + 12844))
  {
    *(void *)int v155 = &off_101857AB8;
    double v41 = *(double *)(a1 + 352);
    *(double *)&v155[8] = Current;
    double v157 = v41;
    *(void *)&__int128 v42 = *(void *)(a2 + 9);
    *((void *)&v42 + 1) = *(void *)(a2 + 29);
    int v43 = *(_DWORD *)(a2 + 5);
    *(_OWORD *)&v158[4] = v42;
    LODWORD(v42) = *(_DWORD *)(a2 + 37);
    *(_DWORD *)__int16 v158 = v43;
    *(_DWORD *)int v159 = v42;
    *(_OWORD *)&v159[4] = *(_OWORD *)(a2 + 53);
    *(void *)__int16 v160 = *(void *)(a2 + 41);
    *(_DWORD *)&v160[8] = *(_DWORD *)(a2 + 49);
    LOBYTE(v161) = *(_BYTE *)(a2 + 1);
    uint64_t v44 = sub_100E00E14();
    sub_100E022E0(v44, (uint64_t)v155);
    sub_101125260(buf);
    sub_10113A884(buf);
    v150 |= 1u;
    double v148 = Current;
    uint64_t v45 = v149;
    uint64_t v46 = *(void *)(a1 + 352);
    *(_DWORD *)(v149 + 80) |= 1u;
    *(void *)(v45 + _Block_object_dispose(va, 8) = v46;
    uint64_t v47 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 5);
    *(_DWORD *)(v149 + 80) |= 2u;
    *(_DWORD *)(v47 + 16) = v46;
    uint64_t v48 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 9);
    *(_DWORD *)(v149 + 80) |= 4u;
    *(_DWORD *)(v48 + 20) = v46;
    uint64_t v49 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 13);
    *(_DWORD *)(v149 + 80) |= 8u;
    *(_DWORD *)(v49 + 24) = v46;
    uint64_t v50 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 29);
    *(_DWORD *)(v149 + 80) |= 0x2000u;
    *(_DWORD *)(v50 + 64) = v46;
    uint64_t v51 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 33);
    *(_DWORD *)(v149 + 80) |= 0x4000u;
    *(_DWORD *)(v51 + 6_Block_object_dispose(va, 8) = v46;
    uint64_t v52 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 37);
    *(_DWORD *)(v149 + 80) |= 0x8000u;
    *(_DWORD *)(v52 + sub_1011C52D0(v15 - 72) = v46;
    uint64_t v53 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 53);
    *(_DWORD *)(v149 + 80) |= 0x1000u;
    *(_DWORD *)(v53 + 60) = v46;
    uint64_t v54 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 57);
    *(_DWORD *)(v149 + 80) |= 0x20u;
    *(_DWORD *)(v54 + memset(&buf[7], 0, 32) = v46;
    uint64_t v55 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 61);
    *(_DWORD *)(v149 + 80) |= 0x40u;
    *(_DWORD *)(v55 + 36) = v46;
    uint64_t v56 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 65);
    *(_DWORD *)(v149 + 80) |= 0x80u;
    *(_DWORD *)(v56 + 40) = v46;
    uint64_t v57 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 41);
    *(_DWORD *)(v149 + 80) |= 0x200u;
    *(_DWORD *)(v57 + 4_Block_object_dispose(va, 8) = v46;
    uint64_t v58 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 45);
    *(_DWORD *)(v149 + 80) |= 0x400u;
    *(_DWORD *)(v58 + 52) = v46;
    uint64_t v59 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 49);
    *(_DWORD *)(v149 + 80) |= 0x800u;
    *(_DWORD *)(v59 + sub_1011C52D0(v33 - 56) = v46;
    uint64_t v60 = v149;
    int v61 = *(char *)(a2 + 1);
    *(_DWORD *)(v149 + 80) |= 0x10u;
    *(_DWORD *)(v60 + 2_Block_object_dispose(va, 8) = v61;
    uint64_t v62 = v149;
    LOBYTE(v61) = *(_BYTE *)(a2 + 3) != 0;
    *(_DWORD *)(v149 + 80) |= 0x20000u;
    *(_BYTE *)(v62 + 77) = v61;
    uint64_t v63 = v149;
    LOBYTE(v61) = *(_BYTE *)(a2 + 4);
    *(_DWORD *)(v149 + 80) |= 0x10000u;
    *(_BYTE *)(v63 + 76) = v61;
    uint64_t v64 = v149;
    LODWORD(v46) = *(_DWORD *)(a2 + 69);
    *(_DWORD *)(v149 + 80) |= 0x100u;
    *(_DWORD *)(v64 + 44) = v46;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_1018343C0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

  sub_100829128(a1 + 13040, a2);
  __int128 v65 = *(_OWORD *)(a2 + 48);
  v96[2] = *(_OWORD *)(a2 + 32);
  v96[3] = v65;
  v97[0] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)(a2 + 73);
  __int128 v66 = *(_OWORD *)(a2 + 16);
  v96[0] = *(_OWORD *)a2;
  v96[1] = v66;
  sub_10080B044(a1 + 12848, (uint64_t)v96);
  return sub_1006DD65C(a1, 6LL, a2, 89LL);
}

void sub_10035EA30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10035EA50(uint64_t a1, uint64_t a2)
{
  return sub_10035DEB4(a1 - 152, a2);
}

void sub_10035EA58(uint64_t a1, uint64_t a2)
{
}

void sub_10035EA70(uint64_t a1, uint64_t a2)
{
}

void sub_10035EA88(uint64_t a1, uint64_t *a2)
{
}

void sub_10035EA9C(uint64_t a1, uint64_t *a2)
{
}

void sub_10035EAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  switch(*(_BYTE *)(a2 + 16))
  {
    case 1:
      uint64_t v5 = a1 + 1992;
      goto LABEL_10;
    case 2:
      uint64_t v7 = 4160LL;
      goto LABEL_9;
    case 3:
      uint64_t v8 = 6328LL;
      goto LABEL_7;
    case 4:
      uint64_t v8 = 8496LL;
LABEL_7:
      uint64_t v5 = a1 + v8;
      double v9 = (uint64_t *)(a1 + 1984);
      goto LABEL_11;
    case 5:
      uint64_t v7 = 10664LL;
LABEL_9:
      uint64_t v5 = a1 + v7;
LABEL_10:
      double v9 = (uint64_t *)(a1 + 1976);
LABEL_11:
      uint64_t v6 = *v9;
      break;
    default:
      uint64_t v6 = 0LL;
      uint64_t v5 = 0LL;
      break;
  }

  if (sub_10035EFE8(v5, a2))
  {
    if (qword_1019345F0 != -1) {
      dispatch_once(&qword_1019345F0, &stru_1018343E0);
    }
    double v10 = (os_log_s *)qword_1019345F8;
    if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v25 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "data type %u,received and reconstructed",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345F0 != -1) {
        dispatch_once(&qword_1019345F0, &stru_1018343E0);
      }
      int v20 = 67109120;
      int v21 = v4;
      double v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345F8,  2LL,  "data type %u,received and reconstructed",  &v20);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)",  "%s\n",  v19);
    }

    int v11 = *(_DWORD *)(a2 + 2);
    int v12 = *(_DWORD *)(a1 + 12840);
    if (v12)
    {
      if (v12 + 1 == v11) {
        goto LABEL_33;
      }
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101834400);
      }
      double v13 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        int v14 = *(_DWORD *)(a1 + 12840) + 1;
        *(_DWORD *)std::string buf = 67109376;
        int v25 = v14;
        __int16 v26 = 1024;
        int v27 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Sensor Buffer packet drop detected. AP is expecting %u, but got %u",  buf,  0xEu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101834400);
      }
      int v15 = *(_DWORD *)(a1 + 12840) + 1;
      int v20 = 67109376;
      int v21 = v15;
      __int16 v22 = 1024;
      int v23 = v11;
      double v16 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Sensor Buffer packet drop detected. AP is expecting %u, but got %u",  &v20,  14);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)",  "%s\n");
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101834400);
      }
      double v17 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v25 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Receiving first Sensor Buffer packet since process start, seq %u",  buf,  8u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101834400);
      }
      int v20 = 67109120;
      int v21 = v11;
      double v16 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "Receiving first Sensor Buffer packet since process start, seq %u",  &v20);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)",  "%s\n");
    }

    if (v16 != buf) {
      free(v16);
    }
LABEL_33:
    *(_DWORD *)(a1 + 12840) = v11;
    if (v6)
    {
      double v18 = sub_100C93A08(a1, *(double *)(a1 + 352));
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, double))(v6 + 16))( v6,  v4,  *(void *)(a2 + 8),  v5,  *(unsigned int *)(v5 + 2164),  v18);
    }
  }

BOOL sub_10035EFE8(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 1);
  if (*(_BYTE *)(a2 + 1) && *(_DWORD *)(a1 + 2160) + 1 != v4)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101834360);
    }
    double v10 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      int v11 = *(_DWORD *)(a1 + 2160);
      int v12 = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)std::string buf = 67240704;
      int v26 = 25;
      __int16 v27 = 1026;
      int v28 = v11;
      __int16 v29 = 1026;
      int v30 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Out of order segments,U::kType,%{public}u,fLastSegment,%{public}u,packet->fSegment,%{public}u",  buf,  0x14u);
    }

    BOOL v13 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      int v16 = *(_DWORD *)(a1 + 2160);
      int v17 = *(unsigned __int8 *)(a2 + 1);
      int v19 = 67240704;
      int v20 = 25;
      __int16 v21 = 1026;
      int v22 = v16;
      __int16 v23 = 1026;
      int v24 = v17;
      double v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Out of order segments,U::kType,%{public}u,fLastSegment,%{public}u,packet->fSegment,%{public}u",  &v19,  20);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSPUReportReconstructor<CLSPU::PackedSensorBuffer>::reconstruct(const U *) [T = CLSPU::PackedSensorBuffer, U = CMMotionCoprocessorReply::SensorBuffer]",  "%s\n",  v18);
      return 0LL;
    }
  }

  else
  {
    size_t v5 = *(unsigned __int16 *)(a2 + 6);
    if (v5 > 0xC8 || (unsigned int v6 = 200 * v4, (200 * v4 + v5) >= 0x871))
    {
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101834360);
      }
      uint64_t v8 = (os_log_s *)qword_1019344C8;
      if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
      {
        int v9 = *(unsigned __int16 *)(a2 + 6);
        *(_DWORD *)std::string buf = 67240192;
        int v26 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Bad size,packet->fSize,%{public}u", buf, 8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_101834360);
        }
        int v14 = *(unsigned __int16 *)(a2 + 6);
        int v19 = 67240192;
        int v20 = v14;
        int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Bad size,packet->fSize,%{public}u",  &v19,  8);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSPUReportReconstructor<CLSPU::PackedSensorBuffer>::reconstruct(const U *) [T = CLSPU::PackedSensorBuffe r, U = CMMotionCoprocessorReply::SensorBuffer]",  "%s\n",  v15);
      }

      BOOL result = 0LL;
      *(_DWORD *)(a1 + 2160) = -1;
    }

    else
    {
      memcpy((void *)(a1 + v6), (const void *)(a2 + 18), v5);
      *(_DWORD *)(a1 + 2160) = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)(a1 + 2164) = v6 + *(unsigned __int16 *)(a2 + 6);
      return *(_BYTE *)(a2 + 17) != 0;
    }
  }

  return result;
}

void sub_10035F3A8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10035F3B0(uint64_t a1, __int128 *a2)
{
  double v6 = sub_100C93A08(a1, *(double *)(a1 + 352));
  __int128 v4 = a2[1];
  __int128 v7 = *a2;
  __int128 v8 = v4;
  return sub_1006DD65C(a1, 8LL, (uint64_t)&v6, 40LL);
}

uint64_t sub_10035F400(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = a1 - 152;
  double v6 = sub_100C93A08(a1 - 152, *(double *)(a1 + 200));
  __int128 v4 = a2[1];
  __int128 v7 = *a2;
  __int128 v8 = v4;
  return sub_1006DD65C(v3, 8LL, (uint64_t)&v6, 40LL);
}

uint64_t sub_10035F454(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 12832);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a2 + 1));
  }
  return result;
}

uint64_t sub_10035F46C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 12680);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a2 + 1));
  }
  return result;
}

uint64_t sub_10035F484(uint64_t a1, uint64_t a2)
{
  double v4 = sub_100C93A08( a1,  *(double *)(a1 + 352)
       + ((double)*(unint64_t *)(a2 + 12) - (double)*(unint64_t *)(a2 + 20)) / 1000000.0);
  v6[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)(a2 + 12);
  double v7 = v4;
  return sub_1006DD65C(a1, 21LL, (uint64_t)v6, 40LL);
}

uint64_t sub_10035F500(uint64_t a1, uint64_t a2)
{
  return sub_10035F484(a1 - 152, a2);
}

uint64_t sub_10035F508(uint64_t a1, uint64_t a2)
{
  double v4 = sub_100C93A08( a1,  *(double *)(a1 + 352)
       + ((double)*(unint64_t *)(a2 + 12) - (double)*(unint64_t *)(a2 + 20)) / 1000000.0);
  v6[0] = *(_OWORD *)a2;
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)(a2 + 12);
  double v7 = v4;
  return sub_1006DD65C(a1, 13LL, (uint64_t)v6, 40LL);
}

uint64_t sub_10035F584(uint64_t a1, uint64_t a2)
{
  return sub_10035F508(a1 - 152, a2);
}

void sub_10035F58C(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10035F5EC;
  void v3[3] = &unk_10181D3D0;
  v3[4] = a1;
  sub_1006E2970(v2, (uint64_t)v3);
}

void sub_10035F5EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((sub_1004F97F4() & 0x10) != 0)
  {
    v2[0] = 0;
    unint64_t v3 = 0xBFF0000000000000LL;
    *(_OWORD *)std::string __p = 0u;
    __int128 v5 = 0u;
    unint64_t v6 = 0xFFFFFFFF7FFFFFFFLL;
    int v7 = -1082130432;
    uint64_t v8 = -1LL;
    int v9 = 0;
    sub_10080A778(v1 + 12848, (uint64_t)v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 464LL))(v1);
    if (SBYTE7(v5) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_10035F680( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035F69C(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_10035F6FC;
  void v3[3] = &unk_10181D3D0;
  v3[4] = a1;
  sub_1006E2970(v2, (uint64_t)v3);
}

void sub_10035F6FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((sub_1004F97F4() & 0x40000) != 0)
  {
    v2[0] = 0;
    unint64_t v3 = 0xBFF0000000000000LL;
    std::string __p = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    unint64_t v7 = 0xFFFFFFFF7FFFFFFFLL;
    int v8 = -1;
    sub_10080AB8C(v1 + 12848, (uint64_t)v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 472LL))(v1);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p);
    }
  }

void sub_10035F77C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035F798(uint64_t a1, __int128 *a2)
{
  __int128 v5 = *a2;
  uint64_t v3 = sub_1006E27E8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  uint64_t v4[2] = sub_10035F800;
  void v4[3] = &unk_101830558;
  void v4[4] = a1;
  sub_1006E2970(v3, (uint64_t)v4);
}

uint64_t sub_10035F800(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101834420);
  }
  uint64_t v3 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 48);
    BOOL v5 = *(_BYTE *)(a1 + 49) != 0;
    int v6 = *(unsigned __int8 *)(a1 + 50);
    BOOL v7 = *(_BYTE *)(a1 + 51) != 0;
    BOOL v8 = *(_BYTE *)(a1 + 52) != 0;
    uint64_t v9 = *(void *)(a1 + 40);
    v11[0] = 68290563;
    v11[1] = 0;
    __int16 v12 = 2082;
    BOOL v13 = "";
    __int16 v14 = 1025;
    int v15 = v4;
    __int16 v16 = 1025;
    BOOL v17 = v5;
    __int16 v18 = 1025;
    int v19 = v6;
    __int16 v20 = 1025;
    BOOL v21 = v7;
    __int16 v22 = 1025;
    BOOL v23 = v8;
    __int16 v24 = 2049;
    uint64_t v25 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Configuration sent, fFallStatsMode:%{private}d, fSensorRecordingActive:%{private} hhd, fSimulateEvent:%{private}d, fUserStudyPressureDataCollection:%{private}hhd, fDetectorEnabled:%{pr ivate}hhd, fLastReplyAopTimestamp:%{private}llu}",  (uint8_t *)v11,  0x3Au);
  }

  *(_OWORD *)(v2 + 247) = *(_OWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 552LL))(v2, 0LL);
}

void sub_10035F968()
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101834400);
  }
  unsigned __int8 v0 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Sending fallModel Command.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101834400);
    }
    v3[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Sending fallModel Command.",  v3,  2);
    uint64_t v2 = (uint8_t *)v1;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSPU::setFallModels(const CMSPUFall_Types::FallModel &, const CMSPUFall_Types::FallModel &, const CMSPUFall_ Types::FallModel &)",  "%s\n",  v1);
    if (v2 != buf) {
      free(v2);
    }
  }

void sub_10035FAEC(uint64_t a1, __int128 *a2)
{
  __int128 v4 = a2[3];
  __int128 v90 = a2[2];
  __int128 v91 = v4;
  *(_OWORD *)__int16 v92 = a2[4];
  *(_OWORD *)&v92[12] = *(__int128 *)((char *)a2 + 76);
  __int128 v5 = a2[1];
  __int128 v88 = *a2;
  char v87 = 32;
  __int128 v89 = v5;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101834420);
  }
  int v6 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_INFO))
  {
    double v7 = *(float *)a2;
    double v8 = *((float *)a2 + 1);
    double v9 = *((float *)a2 + 2);
    double v10 = *((float *)a2 + 3);
    double v11 = *((float *)a2 + 4);
    double v12 = *((float *)a2 + 5);
    double v13 = *((float *)a2 + 6);
    int v14 = *((_DWORD *)a2 + 10);
    int v15 = *((_DWORD *)a2 + 11);
    double v16 = *((float *)a2 + 12);
    double v17 = *((float *)a2 + 13);
    double v18 = *((float *)a2 + 14);
    double v19 = *((float *)a2 + 15);
    double v20 = *((float *)a2 + 16);
    int v21 = *((_DWORD *)a2 + 17);
    int v22 = *((_DWORD *)a2 + 18);
    int v23 = *((_DWORD *)a2 + 19);
    int v24 = *((_DWORD *)a2 + 20);
    int v25 = *((unsigned __int8 *)a2 + 84);
    int v26 = *((unsigned __int8 *)a2 + 85);
    int v27 = *((unsigned __int8 *)a2 + 86);
    int v28 = *((unsigned __int8 *)a2 + 87);
    int v29 = *((unsigned __int8 *)a2 + 88);
    int v30 = *((unsigned __int8 *)a2 + 89);
    int v31 = *((unsigned __int8 *)a2 + 90);
    v32[0] = 68295683;
    v32[1] = 0;
    __int16 v33 = 2082;
    double v34 = "";
    __int16 v35 = 2049;
    double v36 = v7;
    __int16 v37 = 2049;
    double v38 = v8;
    __int16 v39 = 2049;
    double v40 = v9;
    __int16 v41 = 2049;
    double v42 = v10;
    __int16 v43 = 2049;
    double v44 = v9;
    __int16 v45 = 2049;
    double v46 = v11;
    __int16 v47 = 2049;
    double v48 = v12;
    __int16 v49 = 2049;
    double v50 = v13;
    __int16 v51 = 1025;
    int v52 = v14;
    __int16 v53 = 1025;
    int v54 = v15;
    __int16 v55 = 2049;
    double v56 = v16;
    __int16 v57 = 2049;
    double v58 = v17;
    __int16 v59 = 2049;
    double v60 = v18;
    __int16 v61 = 2049;
    double v62 = v19;
    __int16 v63 = 2049;
    double v64 = v20;
    __int16 v65 = 1025;
    int v66 = v21;
    __int16 v67 = 1025;
    int v68 = v22;
    __int16 v69 = 1025;
    int v70 = v23;
    __int16 v71 = 1025;
    int v72 = v24;
    __int16 v73 = 1025;
    int v74 = v25;
    __int16 v75 = 1025;
    int v76 = v26;
    __int16 v77 = 1025;
    int v78 = v27;
    __int16 v79 = 1025;
    int v80 = v28;
    __int16 v81 = 1025;
    int v82 = v29;
    __int16 v83 = 1025;
    int v84 = v30;
    __int16 v85 = 1025;
    int v86 = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Sending fallThresholds Command, fImpactMaxAccelNormAlertThreshold:%{private}f,  fImpactMaxAccelNormLoggingStatsThreshold:%{private}f, fImpactMaxAccelNormLoggingHeartRateThreshold:%{p rivate}f, fImpactMaxAccelNormLoggingHighResolutionSensorDataThreshold:%{private}f, fImpactMaxAccelNorm LoggingHeartRateThreshold:%{private}f, fTripFallPosteriorRatioDetectionThreshold:%{private}f, fSli pFallPosteriorRatioDetectionThreshold:%{private}f, fOtherFallPosteriorRatioDetectionThreshold:%{privat e}f, fTotalLongLieThreshold:%{private}d, fConsecutiveLongLieThreshold:%{private}d, fAlertGatingMotionT hreshold:%{private}f, fCyclingImpactGravityVarianceThreshold:%{private}f, fCyclingImpactCrownVaria nceThreshold:%{private}f, fCyclingImpactMaxAbsYThreshold:%{private}f, fCyclingDistanceTraveledPost ImpactThreshold:%{private}f, fCyclingEpochsDetectedPostImpactThreshold:%{private}d, fOtherWorkoutQuies cenceThresholdLow:%{private}d, fOtherWorkoutQuiescenceThresholdHigh:%{private}d, fOtherWorkoutConsecutiveL ongLieThreshold:%{private}d, fOtherWorkoutShouldCancelAlertOnStepsThreshold:%{private}d, fOtherWorkoutShou ldCancelAlertOnStandThreshold:%{private}d, fOtherWorkoutShouldCancelAlertOnActiveThreshold:%{private}d, fR efereeOperatingModeOverride:%{private}d, fAllDayStateMachineOperatingModeOverride:%{private}d, fCyclingSta teMachineEnabledOverride:%{private}d, fAllDayStateMachineEnabledOverride:%{private}d}",  (uint8_t *)v32,  0xE2u);
  }

  sub_100362920(a1 + 192, (__int128 *)&v87, 0LL);
}

void sub_10035FD64(uint64_t a1, char a2, void *__src, unint64_t a4)
{
  int v7 = 0;
  memset(v6, 0, sizeof(v6));
  LOBYTE(v6[0]) = 65;
  BYTE1(v6[0]) = a2;
  if (__src && a4)
  {
    size_t v5 = 96LL;
    if (a4 < 0x60) {
      size_t v5 = a4;
    }
    memcpy((char *)v6 + 4, __src, v5);
  }

  sub_100362B18(a1 + 192, v6, 0LL);
}

void sub_10035FDE0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10035FE48;
  void v5[3] = &unk_101833458;
  void v5[4] = a1;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

uint64_t sub_10035FE48(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 32);
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_101834440);
  }
  uint64_t v3 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    double v8 = "";
    __int16 v9 = 1025;
    int v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Configuration sent, shouldGateDynamicBiasOnChargerStatus:%{private}d}",  (uint8_t *)v6,  0x18u);
  }

  v2[267] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, void))(*(void *)v2 + 552LL))(v2, 0LL);
}

void sub_10035FF58(uint64_t a1, int a2, int a3)
{
  LOBYTE(v7) = 46;
  BYTE1(v7) = a2;
  BYTE2(v7) = a3;
  sub_100362CD4(a1 + 192, &v7, 0LL);
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018343A0);
  }
  size_t v5 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Applying override baseband usage flag, enabled, %d, value, %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    char v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Applying override baseband usage flag, enabled, %d, value, %d",  v8,  14);
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLSPU::overrideBasebandUsageFlag(BOOL, BOOL)", "%s\n", v6);
  }

void sub_10036013C(uint64_t a1, char a2, char a3, float a4)
{
  v4[0] = 71;
  v4[1] = a2;
  float v5 = a4;
  char v6 = a3;
  sub_100362E50(a1 + 192, v4, 0LL);
}

void sub_100360178(uint64_t a1, char a2)
{
  LOBYTE(sub_1002DF1A0(v1, v2) = 72;
  HIBYTE(sub_1002DF1A0(v1, v2) = a2;
  sub_100362FDC(a1 + 192, &v2, 0LL);
}

float sub_1003601AC(uint64_t a1, char a2, char a3, double a4)
{
  v6[0] = 74;
  v6[1] = a2;
  float v4 = a4;
  float v7 = v4;
  char v8 = a3;
  sub_100363158(a1 + 192, v6, 0LL);
  return result;
}

void sub_1003601EC(uint64_t a1, char a2, uint64_t a3)
{
  v3[0] = 75;
  v3[1] = a2;
  uint64_t v4 = a3;
  sub_1003632E4(a1 + 192, (uint64_t *)v3, 0LL);
}

void sub_100360224(uint64_t a1, char a2, float a3)
{
  v3[0] = 81;
  v3[1] = a2;
  float v4 = a3;
  sub_10036346C(a1 + 192, (int *)v3, 0LL);
}

id sub_10036025C(uint64_t a1, __int128 *a2)
{
  __int128 v6 = *a2;
  int v7 = *((_DWORD *)a2 + 4);
  id v3 = [*(id *)(a1 + 168) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1003602D0;
  void v5[3] = &unk_1018335D8;
  void v5[4] = a1;
  return [v3 async:v5];
}

uint64_t sub_1003602D0(uint64_t a1)
{
  return sub_10099B0F4(*(void *)(a1 + 32) + 13176LL, a1 + 40);
}

id sub_1003602E8(uint64_t a1, __int128 *a2)
{
  uint64_t v2 = a1 - 152;
  __int128 v6 = *a2;
  int v7 = *((_DWORD *)a2 + 4);
  id v3 = [*(id *)(a1 + 16) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1003602D0;
  void v5[3] = &unk_1018335D8;
  void v5[4] = v2;
  return [v3 async:v5];
}

void sub_10036035C(uint64_t a1, _DWORD *a2, float *a3)
{
  switch(*a2)
  {
    case 0:
      sub_10099A75C((double *)(a1 + 13176), (double *)a3);
      break;
    case 1:
      sub_10099B148(a1 + 13176);
      break;
    case 2:
      sub_10099A5B0(a1 + 13176, *(double *)a3);
      break;
    case 3:
      sub_10099AA48(a1 + 13176, a3[2], *(double *)a3);
      break;
    default:
      return;
  }

void sub_100360420(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101834460);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSPU::onBLSData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101834460);
    }
    char v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      double v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSPU::onBLSData, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  if (!*a2) {
    sub_1005092C0(a4 + 13632, *a3);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1003605E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100360600(uint64_t a1, uint64_t a2)
{
  return sub_10099B174(a1 + 13176, a2);
}

uint64_t sub_10036060C(uint64_t a1, uint64_t a2)
{
  return sub_10099B174(a1 + 13024, a2);
}

uint64_t sub_100360618(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 12844))
  {
    sub_101125260(buf);
    sub_1011396CC(buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v69 |= 1u;
    CFAbsoluteTime v67 = Current;
    uint64_t v5 = v68;
    uint64_t v6 = *(void *)(a1 + 352);
    *(_BYTE *)(v68 + 44) |= 4u;
    *(void *)(v5 + 24) = v6;
    uint64_t v7 = v68;
    uint64_t v8 = *(void *)(a2 + 1);
    *(_BYTE *)(v68 + 44) |= 2u;
    *(void *)(v7 + 16) = v8;
    uint64_t v9 = v68;
    uint64_t v10 = *(void *)(a2 + 9);
    *(_BYTE *)(v68 + 44) |= 1u;
    *(void *)(v9 + _Block_object_dispose(va, 8) = v10;
    uint64_t v11 = v68;
    uint64_t v12 = *(void *)(a2 + 17);
    *(_BYTE *)(v68 + 44) |= 8u;
    *(void *)(v11 + memset(&buf[7], 0, 32) = v12;
    uint64_t v13 = v68;
    LOBYTE(v12) = *(_BYTE *)(a2 + 25);
    *(_BYTE *)(v68 + 44) |= 0x10u;
    *(_BYTE *)(v13 + 40) = v12;
    uint64_t v14 = v68;
    LOBYTE(v12) = *(_BYTE *)(a2 + 26);
    *(_BYTE *)(v68 + 44) |= 0x40u;
    *(_BYTE *)(v14 + 42) = v12;
    uint64_t v15 = v68;
    LOBYTE(v12) = *(_BYTE *)(a2 + 27);
    *(_BYTE *)(v68 + 44) |= 0x20u;
    *(_BYTE *)(v15 + 41) = v12;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_1018343C0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018343A0);
  }
  double v16 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 352);
    uint64_t v18 = *(void *)(a2 + 1);
    uint64_t v19 = *(void *)(a2 + 9);
    uint64_t v20 = *(void *)(a2 + 17);
    int v21 = *(unsigned __int8 *)(a2 + 25);
    int v22 = *(unsigned __int8 *)(a2 + 27);
    int v23 = *(unsigned __int8 *)(a2 + 26);
    int v24 = *(unsigned __int8 *)(a2 + 28);
    *(_DWORD *)std::string buf = 134350848;
    uint64_t v52 = v17;
    __int16 v53 = 2048;
    uint64_t v54 = v18;
    __int16 v55 = 2048;
    uint64_t v56 = v19;
    __int16 v57 = 2048;
    uint64_t v58 = v20;
    __int16 v59 = 1026;
    int v60 = v21;
    __int16 v61 = 1026;
    int v62 = v22;
    __int16 v63 = 1026;
    int v64 = v23;
    __int16 v65 = 1026;
    int v66 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "MagnetometerReset,timestamp,%{public}f,timeSinceLastRemagTrigger,%llu,timeSinceLastRemag,%llu,triggerCount,%llu,ex itingSaturation,%{public}d,extendedSaturation,%{public}d,shiftInSaturation,%{public}d,fSuccessFlag,%{public}d",  buf,  0x42u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    uint64_t v26 = *(void *)(a1 + 352);
    uint64_t v27 = *(void *)(a2 + 1);
    uint64_t v28 = *(void *)(a2 + 9);
    uint64_t v29 = *(void *)(a2 + 17);
    int v30 = *(unsigned __int8 *)(a2 + 25);
    int v31 = *(unsigned __int8 *)(a2 + 27);
    int v32 = *(unsigned __int8 *)(a2 + 26);
    int v33 = *(unsigned __int8 *)(a2 + 28);
    int v35 = 134350848;
    uint64_t v36 = v26;
    __int16 v37 = 2048;
    uint64_t v38 = v27;
    __int16 v39 = 2048;
    uint64_t v40 = v28;
    __int16 v41 = 2048;
    uint64_t v42 = v29;
    __int16 v43 = 1026;
    int v44 = v30;
    __int16 v45 = 1026;
    int v46 = v31;
    __int16 v47 = 1026;
    int v48 = v32;
    __int16 v49 = 1026;
    int v50 = v33;
    double v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "MagnetometerReset,timestamp,%{public}f,timeSinceLastRemagTrigger,%llu,timeSinceLastRemag,%llu,trigge rCount,%llu,exitingSaturation,%{public}d,extendedSaturation,%{public}d,shiftInSaturation,%{public}d, fSuccessFlag,%{public}d",  &v35,  66);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitMagnetometerReset(const CMMotionCoprocessorReply::MagnetometerReset *)",  "%s\n",  v34);
  }

  return sub_100510654(a1 + 13608, a2, *(double *)(a1 + 352));
}

void sub_1003609C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1003609E0(uint64_t a1, uint64_t a2)
{
  return sub_100360618(a1 - 152, a2);
}

uint64_t sub_1003609E8(uint64_t a1, uint64_t a2)
{
  return sub_100BD85B8(a1 + 13625, a2);
}

uint64_t sub_1003609F4(uint64_t a1, uint64_t a2)
{
  return sub_100BD85B8(a1 + 13473, a2);
}

void sub_100360A00(uint64_t a1, uint64_t a2)
{
}

void sub_100360A0C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100360A18(uint64_t a1, uint64_t a2)
{
  return sub_1005089FC(a1 + 13632, a2);
}

uint64_t sub_100360A24(uint64_t a1, uint64_t a2)
{
  return sub_1005089FC(a1 + 13480, a2);
}

uint64_t sub_100360A30(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v18 = v4;
  double v5 = sub_100C93A08(a1, v4);
  double v19 = v5;
  int v6 = *(unsigned __int8 *)(a2 + 1);
  LOBYTE(v20) = *(_BYTE *)(a2 + 1);
  int v7 = *(unsigned __int8 *)(a2 + 2);
  BYTE1(v20) = *(_BYTE *)(a2 + 2);
  __int16 v8 = *(_WORD *)(a2 + 3);
  BYTE2(v20) = v8;
  if (*(_BYTE *)(a1 + 12844))
  {
    sub_101125260(buf);
    sub_101139B10(buf);
    v43 |= 1u;
    double v42 = v5;
    uint64_t v9 = v41;
    *(_BYTE *)(v41 + 28) |= 1u;
    *(double *)(v9 + _Block_object_dispose(va, 8) = v4;
    uint64_t v10 = v41;
    int v11 = *(unsigned __int8 *)(a2 + 1);
    *(_BYTE *)(v41 + 28) |= 4u;
    *(_DWORD *)(v10 + 20) = v11;
    uint64_t v12 = v41;
    LOBYTE(v11) = *(_BYTE *)(a2 + 2) != 0;
    *(_BYTE *)(v41 + 28) |= 8u;
    *(_BYTE *)(v12 + 24) = v11;
    uint64_t v13 = v41;
    int v14 = *(unsigned __int16 *)(a2 + 3);
    *(_BYTE *)(v41 + 28) |= 2u;
    *(_DWORD *)(v13 + 16) = v14;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_1018343C0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018343A0);
  }
  uint64_t v15 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134219008;
    double v32 = v4;
    __int16 v33 = 2048;
    double v34 = v5;
    __int16 v35 = 1024;
    int v36 = v6;
    __int16 v37 = 1026;
    int v38 = v7;
    __int16 v39 = 1024;
    int v40 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "BasebandCompassCoex,timestamp,%f,startTime,%f,sub_type,%d,inCoex,%{public}d,reserved,0x%02x",  buf,  0x28u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    int v21 = 134219008;
    double v22 = v4;
    __int16 v23 = 2048;
    double v24 = v5;
    __int16 v25 = 1024;
    int v26 = v6;
    __int16 v27 = 1026;
    int v28 = v7;
    __int16 v29 = 1024;
    int v30 = v8;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "BasebandCompassCoex,timestamp,%f,startTime,%f,sub_type,%d,inCoex,%{public}d,reserved,0x%02x",  &v21,  40,  *(void *)&v18,  *(void *)&v19,  v20);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitBasebandCompassCoex(const CMMotionCoprocessorReply::BasebandCompassCoex *)",  "%s\n",  v17);
  }

  return sub_1006DD65C(a1, 36LL, (uint64_t)&v18, 224LL);
}

void sub_100360D74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
}

uint64_t sub_100360D94(uint64_t a1, uint64_t a2)
{
  return sub_100360A30(a1 - 152, a2);
}

uint64_t sub_100360D9C(uint64_t a1, uint64_t a2)
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018343A0);
  }
  double v4 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    int v6 = *(unsigned __int8 *)(a2 + 2);
    uint64_t v7 = *(void *)(a2 + 4);
    *(_DWORD *)std::string buf = 67240704;
    int v19 = v5;
    __int16 v20 = 1026;
    int v21 = v6;
    __int16 v22 = 2048;
    uint64_t v23 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BasebandCompassCoexMetrics,countOfTimesEnteringHeatup,%{public}d,hasActiveMagnetometerClientDuringHeatUp,%{public} d,durationOfNonDefaultState,%llu",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018343A0);
    }
    int v9 = *(unsigned __int8 *)(a2 + 1);
    int v10 = *(unsigned __int8 *)(a2 + 2);
    uint64_t v11 = *(void *)(a2 + 4);
    v13[0] = 67240704;
    v13[1] = v9;
    __int16 v14 = 1026;
    int v15 = v10;
    __int16 v16 = 2048;
    uint64_t v17 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "BasebandCompassCoexMetrics,countOfTimesEnteringHeatup,%{public}d,hasActiveMagnetometerClientDuringHe atUp,%{public}d,durationOfNonDefaultState,%llu",  v13,  24);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitBasebandCompassCoexMetrics(const CMMotionCoprocessorReply::BasebandCompassCoexMetrics *)",  "%s\n",  v12);
  }

  return sub_100510858(a1 + 13608, a2, *(double *)(a1 + 352));
}

uint64_t sub_100360FA4(uint64_t a1, uint64_t a2)
{
  return sub_100360D9C(a1 - 152, a2);
}

uint64_t sub_100360FAC(uint64_t a1, __int128 *a2)
{
  double v6 = sub_100C93A08(a1, *(double *)(a1 + 352));
  __int128 v4 = a2[1];
  __int128 v7 = *a2;
  *(_OWORD *)__int16 v8 = v4;
  *(void *)&v8[15] = *(void *)((char *)a2 + 31);
  return sub_1006DD65C(a1, 40LL, (uint64_t)&v6, 48LL);
}

uint64_t sub_100361008(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = a1 - 152;
  double v6 = sub_100C93A08(a1 - 152, *(double *)(a1 + 200));
  __int128 v4 = a2[1];
  __int128 v7 = *a2;
  *(_OWORD *)__int16 v8 = v4;
  *(void *)&v8[15] = *(void *)((char *)a2 + 31);
  return sub_1006DD65C(v3, 40LL, (uint64_t)&v6, 48LL);
}

void sub_100361068(uint64_t a1, uint64_t a2)
{
  if (qword_1019344A0 != -1) {
    dispatch_once(&qword_1019344A0, &stru_101834480);
  }
  __int128 v4 = (os_log_s *)qword_1019344A8;
  if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 352);
    uint64_t v6 = *(void *)(a2 + 1);
    int v7 = *(unsigned __int8 *)(a2 + 9);
    int v8 = *(unsigned __int8 *)(a2 + 10);
    int v9 = *(unsigned __int8 *)(a2 + 11);
    int v10 = *(unsigned __int8 *)(a2 + 12);
    int v11 = *(unsigned __int8 *)(a2 + 13);
    int v12 = *(unsigned __int8 *)(a2 + 14);
    double v13 = *(float *)(a2 + 15);
    double v14 = *(float *)(a2 + 19);
    double v15 = *(float *)(a2 + 23);
    double v16 = *(float *)(a2 + 27);
    double v17 = *(float *)(a2 + 31);
    double v18 = *(float *)(a2 + 35);
    double v19 = (float)(*(float *)(a2 + 39) * 57.296);
    int v20 = *(unsigned __int8 *)(a2 + 43);
    *(_DWORD *)std::string buf = 134352896;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&_BYTE buf[14] = v6;
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)int v72 = v7;
    *(_WORD *)&v72[4] = 1026;
    *(_DWORD *)&v72[6] = v8;
    *(_WORD *)&_BYTE v72[10] = 1026;
    *(_DWORD *)&v72[12] = v9;
    *(_WORD *)&v72[16] = 1026;
    *(_DWORD *)&v72[18] = v10;
    *(_WORD *)&v72[22] = 1026;
    *(_DWORD *)&_BYTE v72[24] = v11;
    *(_WORD *)&v72[28] = 1026;
    int v73 = v12;
    __int16 v74 = 2050;
    double v75 = v13;
    __int16 v76 = 2050;
    double v77 = v14;
    __int16 v78 = 2050;
    double v79 = v15;
    __int16 v80 = 2050;
    double v81 = v16;
    __int16 v82 = 2050;
    double v83 = v17;
    __int16 v84 = 2050;
    double v85 = v18;
    __int16 v86 = 2050;
    double v87 = v19;
    __int16 v88 = 1026;
    int v89 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "ViewObstructedState,timestamp,%{public}f,aopTimestamp,%{public}llu,shouldSuppress,%{public}u,currentState,%{public }u,currentEventTag,%{public}u,orientation,%{public}u,motionType,%{public}u,sufficientMotion,%{public}u,lux,%{publi c}f,rawProxIntensity,%{public}f,factoryPocketProbability,%{public}f,baselinedPocketProbability,%{public}f,pocketPr obSuppressThreshold,%{public}f,pocketProbUnsuppressThreshold,%{public}f,gravityAngleDeg,%{public}f,hasProxCalibration,%{public}u",  buf,  0x86u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101834480);
    }
    uint64_t v22 = *(void *)(a1 + 352);
    uint64_t v23 = *(void *)(a2 + 1);
    int v24 = *(unsigned __int8 *)(a2 + 9);
    int v25 = *(unsigned __int8 *)(a2 + 10);
    int v26 = *(unsigned __int8 *)(a2 + 11);
    int v27 = *(unsigned __int8 *)(a2 + 12);
    int v28 = *(unsigned __int8 *)(a2 + 13);
    int v29 = *(unsigned __int8 *)(a2 + 14);
    double v30 = *(float *)(a2 + 15);
    double v31 = *(float *)(a2 + 19);
    double v32 = *(float *)(a2 + 23);
    double v33 = *(float *)(a2 + 27);
    double v34 = *(float *)(a2 + 31);
    double v35 = *(float *)(a2 + 35);
    double v36 = (float)(*(float *)(a2 + 39) * 57.296);
    int v37 = *(unsigned __int8 *)(a2 + 43);
    int v39 = 134352896;
    uint64_t v40 = v22;
    __int16 v41 = 2050;
    uint64_t v42 = v23;
    __int16 v43 = 1026;
    int v44 = v24;
    __int16 v45 = 1026;
    int v46 = v25;
    __int16 v47 = 1026;
    int v48 = v26;
    __int16 v49 = 1026;
    int v50 = v27;
    __int16 v51 = 1026;
    int v52 = v28;
    __int16 v53 = 1026;
    int v54 = v29;
    __int16 v55 = 2050;
    double v56 = v30;
    __int16 v57 = 2050;
    double v58 = v31;
    __int16 v59 = 2050;
    double v60 = v32;
    __int16 v61 = 2050;
    double v62 = v33;
    __int16 v63 = 2050;
    double v64 = v34;
    __int16 v65 = 2050;
    double v66 = v35;
    __int16 v67 = 2050;
    double v68 = v36;
    __int16 v69 = 1026;
    int v70 = v37;
    int v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  0LL,  "ViewObstructedState,timestamp,%{public}f,aopTimestamp,%{public}llu,shouldSuppress,%{public}u,current State,%{public}u,currentEventTag,%{public}u,orientation,%{public}u,motionType,%{public}u,sufficientM otion,%{public}u,lux,%{public}f,rawProxIntensity,%{public}f,factoryPocketProbability,%{public}f,base linedPocketProbability,%{public}f,pocketProbSuppressThreshold,%{public}f,pocketProbUnsuppressThresho ld,%{public}f,gravityAngleDeg,%{public}f,hasProxCalibration,%{public}u",  &v39,  134);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitViewObstructedState(const CMMotionCoprocessorReply::ViewObstructedState *)",  "%s\n",  v38);
    if (v38 != buf) {
      free(v38);
    }
  }

  if (*(_BYTE *)(a2 + 44))
  {
    *(void *)std::string buf = sub_100C93A08(a1, *(double *)(a1 + 352));
    __int128 v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
    *(_OWORD *)int v72 = v21;
    *(_OWORD *)&v72[13] = *(_OWORD *)(a2 + 29);
    sub_1006DD65C(a1, 42LL, (uint64_t)buf, 56LL);
  }

void sub_100361434(uint64_t a1, uint64_t a2)
{
}

void sub_10036143C(uint64_t a1, uint64_t a2)
{
  if (qword_1019344A0 != -1) {
    dispatch_once(&qword_1019344A0, &stru_101834480);
  }
  __int128 v4 = (os_log_s *)qword_1019344A8;
  if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 352);
    int v6 = *(unsigned __int8 *)(a2 + 9);
    int v7 = *(unsigned __int8 *)(a2 + 10);
    double v8 = *(float *)(a2 + 11);
    double v9 = *(float *)(a2 + 15);
    double v10 = *(float *)(a2 + 19);
    double v11 = *(float *)(a2 + 23);
    double v12 = *(float *)(a2 + 27);
    double v13 = *(float *)(a2 + 31);
    double v14 = *(float *)(a2 + 35);
    double v15 = *(float *)(a2 + 39);
    double v16 = *(float *)(a2 + 43);
    double v17 = *(float *)(a2 + 47);
    double v18 = *(float *)(a2 + 51);
    double v19 = *(float *)(a2 + 55);
    double v20 = *(float *)(a2 + 59);
    double v21 = *(float *)(a2 + 63);
    double v22 = *(float *)(a2 + 67);
    double v23 = *(float *)(a2 + 71);
    double v24 = *(float *)(a2 + 75);
    double v25 = *(float *)(a2 + 79);
    *(_DWORD *)std::string buf = 134354176;
    uint64_t v91 = v5;
    __int16 v92 = 1026;
    int v93 = v6;
    __int16 v94 = 1026;
    int v95 = v7;
    __int16 v96 = 2050;
    double v97 = v8;
    __int16 v98 = 2050;
    double v99 = v9;
    __int16 v100 = 2050;
    double v101 = v10;
    __int16 v102 = 2050;
    double v103 = v11;
    __int16 v104 = 2050;
    double v105 = v12;
    __int16 v106 = 2050;
    double v107 = v13;
    __int16 v108 = 2050;
    double v109 = v14;
    __int16 v110 = 2050;
    double v111 = v15;
    __int16 v112 = 2050;
    double v113 = v16;
    __int16 v114 = 2050;
    double v115 = v17;
    __int16 v116 = 2050;
    double v117 = v18;
    __int16 v118 = 2050;
    double v119 = v19;
    __int16 v120 = 2050;
    double v121 = v20;
    __int16 v122 = 2050;
    double v123 = v21;
    __int16 v124 = 2050;
    double v125 = v22;
    __int16 v126 = 2050;
    double v127 = v23;
    __int16 v128 = 2050;
    double v129 = v24;
    __int16 v130 = 2050;
    double v131 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "ViewObstructedMLFeatures timestamp,%{public}f,currentState,%{public}u,priorState,%{public}u,absMeanGravX,%{public} f,meanGravY,%{public}f,meanGravZ,%{public}f,AccelFFTBin1,%{public}f,AccelFFTBin2,%{public}f,AccelFFTBin3,%{public} f,AccelFFTBin4,%{public}f,AccelFFTBin5,%{public}f,AccelFFTBin6,%{public}f,PressureFFTBin1,%{public}f,PressureFFTBi n2,%{public}f,PressureFFTBin3,%{public}f,PressureFFTBin4,%{public}f,PressureFFTBin5,%{public}f,PressureFFTBin6,%{p ublic}fAccelFFTBinDotPressureFFTBin,%{public}f,MedianPocketProb,%{public}f,MedianLux,%{public}f",  buf,  0xCCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101834480);
    }
    uint64_t v26 = *(void *)(a1 + 352);
    int v27 = *(unsigned __int8 *)(a2 + 9);
    int v28 = *(unsigned __int8 *)(a2 + 10);
    double v29 = *(float *)(a2 + 11);
    double v30 = *(float *)(a2 + 15);
    double v31 = *(float *)(a2 + 19);
    double v32 = *(float *)(a2 + 23);
    double v33 = *(float *)(a2 + 27);
    double v34 = *(float *)(a2 + 31);
    double v35 = *(float *)(a2 + 35);
    double v36 = *(float *)(a2 + 39);
    double v37 = *(float *)(a2 + 43);
    double v38 = *(float *)(a2 + 47);
    double v39 = *(float *)(a2 + 51);
    double v40 = *(float *)(a2 + 55);
    double v41 = *(float *)(a2 + 59);
    double v42 = *(float *)(a2 + 63);
    double v43 = *(float *)(a2 + 67);
    double v44 = *(float *)(a2 + 71);
    double v45 = *(float *)(a2 + 75);
    double v46 = *(float *)(a2 + 79);
    int v48 = 134354176;
    uint64_t v49 = v26;
    __int16 v50 = 1026;
    int v51 = v27;
    __int16 v52 = 1026;
    int v53 = v28;
    __int16 v54 = 2050;
    double v55 = v29;
    __int16 v56 = 2050;
    double v57 = v30;
    __int16 v58 = 2050;
    double v59 = v31;
    __int16 v60 = 2050;
    double v61 = v32;
    __int16 v62 = 2050;
    double v63 = v33;
    __int16 v64 = 2050;
    double v65 = v34;
    __int16 v66 = 2050;
    double v67 = v35;
    __int16 v68 = 2050;
    double v69 = v36;
    __int16 v70 = 2050;
    double v71 = v37;
    __int16 v72 = 2050;
    double v73 = v38;
    __int16 v74 = 2050;
    double v75 = v39;
    __int16 v76 = 2050;
    double v77 = v40;
    __int16 v78 = 2050;
    double v79 = v41;
    __int16 v80 = 2050;
    double v81 = v42;
    __int16 v82 = 2050;
    double v83 = v43;
    __int16 v84 = 2050;
    double v85 = v44;
    __int16 v86 = 2050;
    double v87 = v45;
    __int16 v88 = 2050;
    double v89 = v46;
    __int16 v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  0LL,  "ViewObstructedMLFeatures timestamp,%{public}f,currentState,%{public}u,priorState,%{public}u,absMeanG ravX,%{public}f,meanGravY,%{public}f,meanGravZ,%{public}f,AccelFFTBin1,%{public}f,AccelFFTBin2,%{pub lic}f,AccelFFTBin3,%{public}f,AccelFFTBin4,%{public}f,AccelFFTBin5,%{public}f,AccelFFTBin6,%{public} f,PressureFFTBin1,%{public}f,PressureFFTBin2,%{public}f,PressureFFTBin3,%{public}f,PressureFFTBin4,% {public}f,PressureFFTBin5,%{public}f,PressureFFTBin6,%{public}fAccelFFTBinDotPressureFFTBin,%{public }f,MedianPocketProb,%{public}f,MedianLux,%{public}f",  &v48,  204);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitViewObstructedMLFeatures(const CMMotionCoprocessorReply::ViewObstructedMLFeatures *)",  "%s\n",  v47);
  }

void sub_100361880(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100361888(uint64_t a1, uint64_t a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101834400);
  }
  __int128 v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 352);
    double v6 = *(float *)(a2 + 12);
    *(_DWORD *)std::string buf = 134349312;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(double *)&_BYTE buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ALS,timestamp,%{public}f,value,%f", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101834400);
    }
    uint64_t v8 = *(void *)(a1 + 352);
    double v9 = *(float *)(a2 + 12);
    int v11 = 134349312;
    uint64_t v12 = v8;
    __int16 v13 = 2048;
    double v14 = v9;
    double v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "ALS,timestamp,%{public}f,value,%f",  &v11,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitALS(const CMMotionCoprocessorReply::ALS *)",  "%s\n",  v10);
    if (v10 != buf) {
      free(v10);
    }
  }

  *(void *)std::string buf = sub_100C93A08(a1, *(double *)(a1 + 352));
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
  return sub_1006DD65C(a1, 41LL, (uint64_t)buf, 24LL);
}

uint64_t sub_100361A90(uint64_t a1, uint64_t a2)
{
  return sub_100361888(a1 - 152, a2);
}

uint64_t sub_100361A98(uint64_t a1, uint64_t a2)
{
  v5[0] = sub_100C93A08(a1, *(double *)(a1 + 352));
  v5[1] = *(void *)a2;
  __int16 v6 = *(_WORD *)(a2 + 8);
  return sub_1006DD65C(a1, 43LL, (uint64_t)v5, 24LL);
}

uint64_t sub_100361AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 152;
  v5[0] = sub_100C93A08(a1 - 152, *(double *)(a1 + 200));
  v5[1] = *(void *)a2;
  __int16 v6 = *(_WORD *)(a2 + 8);
  return sub_1006DD65C(v3, 43LL, (uint64_t)v5, 24LL);
}

uint64_t sub_100361B4C(uint64_t a1, __int128 *a2)
{
  double v6 = sub_100C93A08(a1, *(double *)(a1 + 352));
  __int128 v4 = a2[1];
  __int128 v7 = *a2;
  __int128 v8 = v4;
  *(_OWORD *)double v9 = a2[2];
  *(_DWORD *)&v9[15] = *(_DWORD *)((char *)a2 + 47);
  return sub_1006DD65C(a1, 44LL, (uint64_t)&v6, 64LL);
}

uint64_t sub_100361BB0(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = a1 - 152;
  double v6 = sub_100C93A08(a1 - 152, *(double *)(a1 + 200));
  __int128 v4 = a2[1];
  __int128 v7 = *a2;
  __int128 v8 = v4;
  *(_OWORD *)double v9 = a2[2];
  *(_DWORD *)&v9[15] = *(_DWORD *)((char *)a2 + 47);
  return sub_1006DD65C(v3, 44LL, (uint64_t)&v6, 64LL);
}

uint64_t sub_100361C18(uint64_t a1, void *a2)
{
  v5[0] = sub_100C93A08(a1, *(double *)(a1 + 352));
  v5[1] = *a2;
  return sub_1006DD65C(a1, 45LL, (uint64_t)v5, 16LL);
}

uint64_t sub_100361C68(uint64_t a1, void *a2)
{
  return sub_100361C18(a1 - 152, a2);
}

uint64_t sub_100361C70(uint64_t a1, void *a2)
{
  v5[0] = sub_100C93A08(a1, *(double *)(a1 + 352));
  v5[1] = *a2;
  return sub_1006DD65C(a1, 46LL, (uint64_t)v5, 16LL);
}

uint64_t sub_100361CC0(uint64_t a1, void *a2)
{
  return sub_100361C70(a1 - 152, a2);
}

uint64_t sub_100361CC8(uint64_t a1, uint64_t a2)
{
  return sub_1005D815C(a1 + 13600, a2);
}

uint64_t sub_100361CD4(uint64_t a1, uint64_t a2)
{
  return sub_1005D815C(a1 + 13448, a2);
}

void sub_100361CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100AED3C8();
  sub_100AED42C(v3, a2);
}

void sub_100361D04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100AED3C8();
  sub_100AED42C(v3, a2);
}

uint64_t sub_100361D28(uint64_t a1, uint64_t a2)
{
  return sub_100FC050C(a1 + 13656, a2);
}

uint64_t sub_100361D34(uint64_t a1, uint64_t a2)
{
  return sub_100FC050C(a1 + 13504, a2);
}

_DWORD *sub_100361D40(uint64_t a1, uint64_t a2)
{
  return sub_100B07410((_DWORD *)(a1 + 13664), a2);
}

_DWORD *sub_100361D4C(uint64_t a1, uint64_t a2)
{
  return sub_100B07410((_DWORD *)(a1 + 13512), a2);
}

void sub_100361D58(uint64_t a1, uint64_t a2)
{
  if (qword_101934550 != -1) {
    dispatch_once(&qword_101934550, &stru_1018344A0);
  }
  uint64_t v3 = (os_log_s *)qword_101934558;
  if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_DEFAULT))
  {
    _H0 = *(_WORD *)(a2 + 4);
    __asm { FCVT            S0, H0 }

    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }

    _H1 = *(_WORD *)(a2 + 2);
    __asm { FCVT            S1, H1 }

    _S1 = fabsf(_S1);
    __asm
    {
      FCVT            H1, S1
      FCVT            S8, H1
    }

    double v16 = (float)(atan2f(_S0, _S8) * 57.296);
    _H0 = *(_WORD *)(a2 + 6);
    __asm { FCVT            S0, H0 }

    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }

    float v21 = atan2f(_S0, _S8);
    _H1 = *(_WORD *)(a2 + 8);
    _H2 = *(_WORD *)(a2 + 10);
    __asm
    {
      FCVT            D1, H1
      FCVT            D2, H2
    }

    _H3 = *(_WORD *)(a2 + 12);
    __asm { FCVT            D3, H3 }

    _H4 = *(_WORD *)(a2 + 14);
    __asm { FCVT            D4, H4 }

    _H5 = *(_WORD *)(a2 + 16);
    __asm { FCVT            D5, H5 }

    _H6 = *(_WORD *)(a2 + 18);
    __asm { FCVT            D6, H6 }

    int v34 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)std::string buf = 134351104;
    double v83 = v16;
    __int16 v84 = 2050;
    double v85 = (float)(v21 * 57.296);
    __int16 v86 = 2050;
    uint64_t v87 = _D1;
    __int16 v88 = 2050;
    uint64_t v89 = _D2;
    __int16 v90 = 2050;
    uint64_t v91 = _D3;
    __int16 v92 = 2050;
    uint64_t v93 = _D4;
    __int16 v94 = 2050;
    uint64_t v95 = _D5;
    __int16 v96 = 2050;
    uint64_t v97 = _D6;
    __int16 v98 = 1026;
    int v99 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[MagicMount][DebugLogging]rollAngle,%{public}f,landscapeAngle,%{public}f,rotationRate,(%{public}f,%{public}f,%{pub lic}f),userAccel,(%{public}f,%{public}f,%{public}f),isStationary,%{public}u",  buf,  0x58u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_1018344A0);
    }
    uint64_t v35 = qword_101934558;
    _H0 = *(_WORD *)(a2 + 4);
    __asm { FCVT            S0, H0 }

    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }

    _H1 = *(_WORD *)(a2 + 2);
    __asm { FCVT            S1, H1 }

    _S1 = fabsf(_S1);
    __asm
    {
      FCVT            H1, S1
      FCVT            S8, H1
    }

    double v44 = (float)(atan2f(_S0, _S8) * 57.296);
    _H0 = *(_WORD *)(a2 + 6);
    __asm { FCVT            S0, H0 }

    _S0 = fabsf(_S0);
    __asm
    {
      FCVT            H0, S0
      FCVT            S0, H0; float
    }

    float v49 = atan2f(_S0, _S8);
    _H1 = *(_WORD *)(a2 + 8);
    _H2 = *(_WORD *)(a2 + 10);
    __asm
    {
      FCVT            D1, H1
      FCVT            D2, H2
    }

    _H3 = *(_WORD *)(a2 + 12);
    __asm { FCVT            D3, H3 }

    _H4 = *(_WORD *)(a2 + 14);
    __asm { FCVT            D4, H4 }

    _H5 = *(_WORD *)(a2 + 16);
    __asm { FCVT            D5, H5 }

    _H6 = *(_WORD *)(a2 + 18);
    __asm { FCVT            D6, H6 }

    int v62 = *(unsigned __int8 *)(a2 + 1);
    int v64 = 134351104;
    double v65 = v44;
    __int16 v66 = 2050;
    double v67 = (float)(v49 * 57.296);
    __int16 v68 = 2050;
    uint64_t v69 = _D1;
    __int16 v70 = 2050;
    uint64_t v71 = _D2;
    __int16 v72 = 2050;
    uint64_t v73 = _D3;
    __int16 v74 = 2050;
    uint64_t v75 = _D4;
    __int16 v76 = 2050;
    uint64_t v77 = _D5;
    __int16 v78 = 2050;
    uint64_t v79 = _D6;
    __int16 v80 = 1026;
    int v81 = v62;
    double v63 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v35,  0LL,  "[MagicMount][DebugLogging]rollAngle,%{public}f,landscapeAngle,%{public}f,rotationRate,(%{public}f,%{ public}f,%{public}f),userAccel,(%{public}f,%{public}f,%{public}f),isStationary,%{public}u",  &v64,  88);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSPU::visitMagicMountDebug(const CMMotionCoprocessorReply::MagicMountDebug *)",  "%s\n",  v63);
  }

uint64_t sub_1003620DC(uint64_t a1, __int128 *a2)
{
  double v8 = sub_100C93A08(a1, *(double *)(a1 + 352));
  __int128 v4 = a2[5];
  __int128 v13 = a2[4];
  __int128 v14 = v4;
  __int128 v15 = a2[6];
  __int128 v5 = a2[1];
  __int128 v9 = *a2;
  __int128 v10 = v5;
  __int128 v6 = a2[3];
  __int128 v11 = a2[2];
  char v16 = *((_BYTE *)a2 + 112);
  __int128 v12 = v6;
  return sub_1006DD65C(a1, 49LL, (uint64_t)&v8, 128LL);
}

uint64_t sub_100362158(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = a1 - 152;
  double v8 = sub_100C93A08(a1 - 152, *(double *)(a1 + 200));
  __int128 v4 = a2[5];
  __int128 v13 = a2[4];
  __int128 v14 = v4;
  __int128 v15 = a2[6];
  __int128 v5 = a2[1];
  __int128 v9 = *a2;
  __int128 v10 = v5;
  __int128 v6 = a2[3];
  __int128 v11 = a2[2];
  char v16 = *((_BYTE *)a2 + 112);
  __int128 v12 = v6;
  return sub_1006DD65C(v3, 49LL, (uint64_t)&v8, 128LL);
}

uint64_t sub_1003621D8(uint64_t a1, uint64_t a2)
{
  v5[0] = *(double *)(a1 + 352);
  v5[1] = sub_100C93A08(a1, v5[0]);
  char v6 = *(_BYTE *)(a2 + 1);
  return sub_1006DD65C(a1, 50LL, (uint64_t)v5, 224LL);
}

uint64_t sub_100362234(uint64_t a1, uint64_t a2)
{
  return sub_1003621D8(a1 - 152, a2);
}

uint64_t sub_10036223C(uint64_t a1, uint64_t a2)
{
  return sub_100B6C4A4(a1 + 13624, a2);
}

uint64_t sub_100362248(uint64_t a1, uint64_t a2)
{
  return sub_100B6C4A4(a1 + 13472, a2);
}

uint64_t sub_100362254(uint64_t a1, __int128 *a2)
{
  double v11 = sub_100C93A08(a1, *(double *)(a1 + 352));
  __int128 v4 = a2[11];
  __int128 v22 = a2[10];
  __int128 v23 = v4;
  __int128 v24 = a2[12];
  __int128 v5 = a2[7];
  __int128 v18 = a2[6];
  __int128 v19 = v5;
  __int128 v6 = a2[9];
  __int128 v20 = a2[8];
  __int128 v21 = v6;
  __int128 v7 = a2[3];
  __int128 v14 = a2[2];
  __int128 v15 = v7;
  __int128 v8 = a2[5];
  __int128 v16 = a2[4];
  __int128 v17 = v8;
  __int128 v9 = a2[1];
  __int128 v12 = *a2;
  __int16 v25 = *((_WORD *)a2 + 104);
  __int128 v13 = v9;
  return sub_1006DD65C(a1, 51LL, (uint64_t)&v11, 224LL);
}

uint64_t sub_100362300(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = a1 - 152;
  double v11 = sub_100C93A08(a1 - 152, *(double *)(a1 + 200));
  __int128 v4 = a2[11];
  __int128 v22 = a2[10];
  __int128 v23 = v4;
  __int128 v24 = a2[12];
  __int128 v5 = a2[7];
  __int128 v18 = a2[6];
  __int128 v19 = v5;
  __int128 v6 = a2[9];
  __int128 v20 = a2[8];
  __int128 v21 = v6;
  __int128 v7 = a2[3];
  __int128 v14 = a2[2];
  __int128 v15 = v7;
  __int128 v8 = a2[5];
  __int128 v16 = a2[4];
  __int128 v17 = v8;
  __int128 v9 = a2[1];
  __int128 v12 = *a2;
  __int16 v25 = *((_WORD *)a2 + 104);
  __int128 v13 = v9;
  return sub_1006DD65C(v3, 51LL, (uint64_t)&v11, 224LL);
}

void sub_1003623B0(id a1)
{
  qword_1019344C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_1003623DC(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 8LL) = *(void *)(result + 40);
  return result;
}

void sub_1003623EC(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100362418(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100362448(id a1)
{
  qword_1019345F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_100362474(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1003624A0(id a1)
{
  qword_1019345D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_1003624CC(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1003624F8(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100362524(id a1)
{
  qword_1019344A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_100362550(id a1)
{
  qword_101934558 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

void sub_10036257C(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _DWORD v8[2] = 0x4012000000LL;
    void v8[3] = sub_100362684;
    _DWORD v8[4] = nullsub_166;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    v9[0] = v4;
    *(void *)((char *)v9 + 5) = *(uint64_t *)((char *)a2 + 5);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    __int128 v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10036269C;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_10036266C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100362684(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 53) = *(void *)(a2 + 53);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_10036269C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 18;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 13LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

__n128 sub_100362704(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  __n128 result = *(__n128 *)(a2 + 64);
  __int128 v3 = *(_OWORD *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

void sub_10036272C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 6;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 66LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100362794(uint64_t a1, _OWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    v7[3] = sub_1003628A0;
    _DWORD v7[4] = nullsub_168;
    _DWORD v7[2] = 0x5012000000LL;
    uint64_t v7[5] = &unk_10175E27B;
    v8[0] = *a2;
    *(_OWORD *)((char *)v8 + 13) = *(_OWORD *)((char *)a2 + 13);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003628B8;
    block[3] = &unk_1018344C8;
    void block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100362888( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

__n128 sub_1003628A0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 61) = *(_OWORD *)(a2 + 61);
  *(__n128 *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1003628B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 37;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 29LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100362920(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v9[0] = 0LL;
    v9[1] = v9;
    void v9[2] = 0x9012000000LL;
    v9[3] = sub_100362A88;
    _DWORD v9[4] = nullsub_169;
    void v9[5] = &unk_10175E27B;
    __int128 v4 = a2[3];
    __int128 v12 = a2[2];
    __int128 v13 = v4;
    v14[0] = a2[4];
    *(_OWORD *)((char *)v14 + 13) = *(__int128 *)((char *)a2 + 77);
    __int128 v5 = a2[1];
    __int128 v10 = *a2;
    __int128 v11 = v5;
    if (aBlock) {
      __int128 v6 = _Block_copy(aBlock);
    }
    else {
      __int128 v6 = 0LL;
    }
    __int128 v7 = *(dispatch_queue_s **)a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_100362AB0;
    void v8[3] = &unk_1018344C8;
    void v8[5] = v9;
    void v8[6] = a1;
    _DWORD v8[4] = v6;
    dispatch_async(v7, v8);
    _Block_object_dispose(v9, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100362A70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

__n128 sub_100362A88(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_100362AB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 32;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 93LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100362B18(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v10[0] = 0LL;
    v10[1] = v10;
    _DWORD v10[2] = 0x9812000000LL;
    v10[3] = sub_100362C3C;
    v10[4] = nullsub_170;
    void v10[5] = &unk_10175E27B;
    __int128 v4 = a2[5];
    __int128 v15 = a2[4];
    __int128 v16 = v4;
    int v17 = *((_DWORD *)a2 + 24);
    __int128 v5 = a2[1];
    __int128 v11 = *a2;
    __int128 v12 = v5;
    __int128 v6 = a2[3];
    __int128 v13 = a2[2];
    __int128 v14 = v6;
    if (aBlock) {
      __int128 v7 = _Block_copy(aBlock);
    }
    else {
      __int128 v7 = 0LL;
    }
    __int128 v8 = *(dispatch_queue_s **)a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100362C6C;
    v9[3] = &unk_1018344C8;
    void v9[5] = v10;
    void v9[6] = a1;
    _DWORD v9[4] = v7;
    dispatch_async(v8, v9);
    _Block_object_dispose(v10, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100362C24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

__n128 sub_100362C3C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v2;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  __int128 v6 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_100362C6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 65;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 100LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100362CD4(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _DWORD v7[2] = 0x3812000000LL;
    v7[3] = sub_100362DD8;
    _DWORD v7[4] = nullsub_171;
    uint64_t v7[5] = &unk_10175E27B;
    int v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _BYTE v6[2] = sub_100362DE8;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    __int128 v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100362DC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100362DD8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_100362DE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 46;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 4LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100362E50(uint64_t a1, _DWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    v7[3] = sub_100362F5C;
    _DWORD v7[4] = nullsub_172;
    _DWORD v7[2] = 0x3812000000LL;
    uint64_t v7[5] = &unk_10175E27B;
    v8[0] = *a2;
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)a2 + 3);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _BYTE v6[2] = sub_100362F74;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    __int128 v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100362F44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100362F5C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100362F74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 71;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 7LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100362FDC(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _DWORD v7[2] = 0x3812000000LL;
    v7[3] = sub_1003630E0;
    _DWORD v7[4] = nullsub_173;
    uint64_t v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _BYTE v6[2] = sub_1003630F0;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    __int128 v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_1003630C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1003630E0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1003630F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 72;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100363158(uint64_t a1, _DWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    v7[3] = sub_100363264;
    _DWORD v7[4] = nullsub_174;
    _DWORD v7[2] = 0x3812000000LL;
    uint64_t v7[5] = &unk_10175E27B;
    v8[0] = *a2;
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)a2 + 3);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _BYTE v6[2] = sub_10036327C;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    __int128 v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_10036324C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100363264(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_10036327C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 74;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 7LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_1003632E4(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _DWORD v8[2] = 0x4012000000LL;
    void v8[3] = sub_1003633EC;
    _DWORD v8[4] = nullsub_175;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    __int16 v9 = *((_WORD *)a2 + 4);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    __int128 v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100363404;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_1003633D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1003633EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_WORD *)(result + sub_1011C52D0(v33 - 56) = *(_WORD *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100363404(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 75;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 10LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_10036346C(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    v7[3] = sub_100363578;
    _DWORD v7[4] = nullsub_176;
    _DWORD v7[2] = 0x3812000000LL;
    uint64_t v7[5] = &unk_10175E27B;
    int v8 = *a2;
    __int16 v9 = *((_WORD *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _BYTE v6[2] = sub_100363590;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    __int128 v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100363560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100363578(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100363590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 81;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 6LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

uint64_t sub_1003635F8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101994348, (void *)&_mh_execute_header);
}

uint64_t sub_10036363C(uint64_t a1, char *a2, int a3)
{
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return a1;
}

void sub_1003636B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003636E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(_OWORD *)__int128 v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  char v7 = operator new(8uLL);
  *char v7 = &off_1018344F8;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  __int128 v12 = v7;
  *(void *)a4 = 0LL;
  *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  sub_100363808(a1, (__int128 *)v13, a3, (uint64_t *)&v12, (__int128 *)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (uint64_t)v12;
  __int128 v12 = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_1003637B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100363808(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  *(_BYTE *)a1 = 0;
  __int128 v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v8;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + 40) = 0x100000002LL;
  char v9 = (os_log_s *)(a1 + 40);
  __int128 v10 = (void *)(a1 + 8);
  *(void *)(a1 + memset(&buf[7], 0, 32) = 0LL;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v11 = *a5;
    *(void *)(a1 + sub_1011C52D0(v15 - 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + sub_1011C52D0(v33 - 56) = v11;
  }

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  uint64_t v12 = *a4;
  *a4 = 0LL;
  *(void *)(a1 + 96) = v12;
  if (qword_101934830 != -1) {
    goto LABEL_42;
  }
  while (1)
  {
    __int128 v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v10;
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v39 = 1024;
      int v40 = a3;
      __int16 v41 = 1024;
      int v42 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Creating managed location database %s (count triggers %d, use cache %d)",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101834538);
      }
      int v27 = v10;
      int v32 = 136315650;
      double v33 = v27;
      __int16 v34 = 1024;
      int v35 = a3;
      __int16 v36 = 1024;
      int v37 = 1;
      int v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Creating managed location database %s (count triggers %d, use cache %d)",  (const char *)&v32,  24,  v31);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLNrCellLocationDatabase, CLTelephonyService_Type::NrCell>::CLManagedLocationDatabase( std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLNrCellLocationDatabase, DataType = CLT elephonyService_Type::NrCell]",  "%s\n",  v28);
      if (v28 != buf) {
        free(v28);
      }
    }

    if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96)))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101834538);
      }
      char v9 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        __int128 v15 = v10;
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Data protection is enabled, creating in-memory database for table %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101834538);
        }
        double v29 = v10;
        int v32 = 136315138;
        double v33 = v29;
        char v9 = (os_log_s *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Data protection is enabled, creating in-memory database for table %s",  (const char *)&v32);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLNrCellLocationDatabase, CLTelephonyService_Type::NrCell>::CLManagedLocationDatabas e(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLNrCellLocationDatabase, DataType = CLTelephonyService_Type::NrCell]",  "%s\n",  (const char *)v9);
        if (v9 != (os_log_s *)buf) {
          free(v9);
        }
      }

      sub_100363EFC((_BYTE *)a1, a3, buf);
      uint64_t v16 = *(void *)buf;
      *(void *)std::string buf = 0LL;
      uint64_t v17 = *(void *)(a1 + 32);
      *(void *)(a1 + memset(&buf[7], 0, 32) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
        uint64_t v18 = *(void *)buf;
        *(void *)std::string buf = 0LL;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
      }
    }

    else
    {
      sub_100364018(a1, (uint64_t)v9, buf);
      uint64_t v19 = *(void *)buf;
      *(void *)std::string buf = 0LL;
      uint64_t v20 = *(void *)(a1 + 32);
      *(void *)(a1 + memset(&buf[7], 0, 32) = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        uint64_t v21 = *(void *)buf;
        *(void *)std::string buf = 0LL;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
        }
        uint64_t v19 = *(void *)(a1 + 32);
      }

      if (!v19)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101834538);
        }
        char v9 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101834538);
          }
          LOWORD(vmemset(&buf[7], 0, 32) = 0;
          LODWORD(v30) = 2;
          char v9 = (os_log_s *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Persistent database failed to create despite data protection not enabled. Falling back to i n-memory database",  &v32,  v30);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLNrCellLocationDatabase, CLTelephonyService_Type::NrCell>::CLManagedLocationDatab ase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLNrCellLocationDatabase, DataTy pe = CLTelephonyService_Type::NrCell]",  "%s\n",  (const char *)v9);
          if (v9 != (os_log_s *)buf) {
            free(v9);
          }
        }

        sub_100363EFC((_BYTE *)a1, a3, buf);
        uint64_t v22 = *(void *)buf;
        *(void *)std::string buf = 0LL;
        uint64_t v23 = *(void *)(a1 + 32);
        *(void *)(a1 + memset(&buf[7], 0, 32) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v24 = *(void *)buf;
          *(void *)std::string buf = 0LL;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          }
          uint64_t v22 = *(void *)(a1 + 32);
        }

        if (!v22 || !sub_100400B64(v22))
        {
          sub_101235F24(buf);
          goto LABEL_41;
        }
      }
    }

    uint64_t v25 = *(void *)(a1 + 32);
    if (v25)
    {
      if (sub_100400B64(v25)) {
        return a1;
      }
    }

    sub_101235DB4(buf);
LABEL_41:
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  *(_DWORD *)buf,  "CLManagedLocationDatabase");
    __break(1u);
LABEL_42:
    dispatch_once(&qword_101934830, &stru_101834538);
  }

void sub_100363E78(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + memset(&buf[7], 0, 32) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_100363EFC(_BYTE *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v9 = 0;
  uint64_t v8 = 0LL;
  char v10 = a2;
  if (SHIBYTE(v7) < 0)
  {
    sub_1010DD48C(&v11, __p[0], (unint64_t)__p[1]);
    uint64_t v13 = 0LL;
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v11 = *(_OWORD *)__p;
    uint64_t v12 = v7;
    uint64_t v13 = 0LL;
  }

  sub_100364018((uint64_t)a1, (uint64_t)&v8, a3);
  if (*a3)
  {
    *a1 = 1;
    sub_1003640F8((uint64_t)a1);
  }

  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_100363FC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100364018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = operator new(0x110uLL);
  sub_1005B2E38(v6, v5, a2, -1.0);
  *a3 = v6;
  uint64_t result = sub_100400B64((uint64_t)v6);
  if ((result & 1) == 0)
  {
    *a3 = 0LL;
    return (*(uint64_t (**)(void *))(*(void *)v6 + 8LL))(v6);
  }

  return result;
}

void sub_10036409C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  _Unwind_Resume(a1);
}

void sub_1003640CC(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1003640F8(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_101236094();
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  BOOL v3 = __p;
  sub_1000392EC((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    BOOL v3 = (void **)__p[0];
  }
  if (v2)
  {
    else {
      uint64_t v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }

  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = objc_alloc(&OBJC_CLASS___CLOSTransaction);
  if (v5 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = v6;
  }
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003641FC(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

  ;
}

BOOL sub_100364234()
{
  return os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT);
}

BOOL sub_100364248()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2104), OS_LOG_TYPE_INFO);
}

BOOL sub_100364258()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2104));
}

uint64_t sub_100364264(uint64_t a1)
{
  uint64_t result = sub_100ACA534(a1, 0);
  *(void *)uint64_t result = &off_101834588;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

uint64_t *sub_10036428C(uint64_t *result, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = result;
  if (*a2 < 3u)
  {
    BOOL v5 = *((_DWORD *)result + 24) == a3;
    a3 = a4;
    if (!v5) {
      return result;
    }
LABEL_6:
    sub_1003642F8((uint64_t)result, a3);
    return sub_100364408(v4);
  }

  if (*a2 == 9 && *((_DWORD *)result + 24) == a4) {
    goto LABEL_6;
  }
  return result;
}

void sub_1003642F8(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 96) != a2)
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_101834630);
    }
    uint64_t v4 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 96);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      uint64_t v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = v5;
      __int16 v11 = 2050;
      uint64_t v12 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Transitioned state, old state:%{public, location:CLStreamingAwareLocationProviderNo LocalGPSStateMachine::LocationSourceState}lld, new state:%{public, location:CLStreamingAwareLocationProvider NoLocalGPSStateMachine::LocationSourceState}lld}",  (uint8_t *)v6,  0x26u);
    }

    *(_DWORD *)(a1 + 96) = a2;
  }

uint64_t *sub_100364408(uint64_t *result)
{
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v7 = _Q0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  uint64_t v6 = (uint64_t)result;
  switch(*((_DWORD *)result + 24))
  {
    case 0:
      sub_100ACB610((uint64_t)result, 0LL);
      uint64_t result = sub_100ACB610(v6, 1LL);
      break;
    case 1:
    case 3:
      sub_100ACB794((uint64_t)result, 0LL, (uint64_t)&v7);
      goto LABEL_5;
    case 2:
      sub_100ACB610((uint64_t)result, 0LL);
LABEL_5:
      uint64_t result = sub_100ACB794(v6, 1LL, (uint64_t)&v7);
      break;
    case 4:
      sub_100ACB794((uint64_t)result, 0LL, (uint64_t)&v7);
      uint64_t result = sub_100ACB610(v6, 1LL);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *sub_1003644D4(uint64_t a1)
{
  size_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2)
  {
LABEL_16:
    unsigned int v8 = 0;
    goto LABEL_17;
  }

  BOOL v3 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    int v4 = *((_DWORD *)v3 + 7);
    if (v4 <= 0) {
      break;
    }
LABEL_6:
    BOOL v3 = (uint64_t *)*v3;
    if (!v3)
    {
      uint64_t v5 = *(uint64_t **)(a1 + 16);
      while (1)
      {
        int v6 = *((_DWORD *)v5 + 7);
        if (v6 <= 1)
        {
          if (v6 == 1)
          {
LABEL_19:
            if (*(_DWORD *)(a1 + 96) > 2u) {
              return sub_100364408((uint64_t *)a1);
            }
            unsigned int v8 = 4;
LABEL_17:
            sub_1003642F8(a1, v8);
            return sub_100364408((uint64_t *)a1);
          }

          ++v5;
        }

        uint64_t v5 = (uint64_t *)*v5;
        if (!v5)
        {
          do
          {
            int v7 = *((_DWORD *)v2 + 7);
            if (v7 <= 2)
            {
              if (v7 == 2) {
                goto LABEL_19;
              }
              ++v2;
            }

            size_t v2 = (uint64_t *)*v2;
          }

          while (v2);
          goto LABEL_16;
        }
      }
    }
  }

  if (v4 < 0)
  {
    ++v3;
    goto LABEL_6;
  }

  unsigned int v10 = *(_DWORD *)(a1 + 96);
  BOOL v11 = v10 > 4;
  int v12 = (1 << v10) & 0x19;
  if (!v11 && v12 != 0)
  {
    unsigned int v8 = 2;
    goto LABEL_17;
  }

  return sub_100364408((uint64_t *)a1);
}

uint64_t sub_1003645A8(uint64_t a1, int a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = sub_100ACA518(*a3);
  if ((_DWORD)result)
  {
    int v9 = *(_DWORD *)(a1 + 96);
    BOOL v10 = v9 != 4 || a2 == 0;
    if (v9 == 2) {
      BOOL v11 = a2 == 1;
    }
    else {
      BOOL v11 = v10;
    }
  }

  else
  {
    BOOL v11 = 1;
  }

  if (a2 == 1)
  {
    int v12 = (uint64_t *)a1;
    uint64_t v13 = a3;
    unsigned int v14 = 1;
    unsigned int v15 = 2;
  }

  else
  {
    if (a2) {
      goto LABEL_14;
    }
    int v12 = (uint64_t *)a1;
    uint64_t v13 = a3;
    unsigned int v14 = 3;
    unsigned int v15 = 4;
  }

  uint64_t result = (uint64_t)sub_10036428C(v12, v13, v14, v15);
LABEL_14:
  if (v11) {
    return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 8LL))( *(void *)(a1 + 32),  *a3,  a4);
  }
  return result;
}

void sub_10036467C(id a1)
{
  qword_101934998 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

unsigned __int8 *sub_1003646A8(unsigned __int8 *result, float *a2, double *a3, int a4, float a5)
{
  if (*result == a4)
  {
    float v5 = *((float *)result + 4);
    float v6 = *((float *)result + 5);
    float v7 = *((float *)result + 6);
    double v8 = *((double *)result + 1);
    double v9 = *((double *)result + 5);
  }

  else
  {
    *((void *)result + 1) = 0xBFF0000000000000LL;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *uint64_t result = a4;
    float v7 = 0.0;
    double v8 = -1.0;
    double v9 = 0.0;
    float v6 = 0.0;
    float v5 = 0.0;
  }

  float v10 = *a2 + v5;
  *((float *)result + 4) = v10;
  float v11 = a2[1] + v6;
  *((float *)result + 5) = v11;
  float v12 = a2[2] + v7;
  *((float *)result + 6) = v12;
  double v13 = *a3;
  BOOL v14 = *a3 <= v8 || v8 <= 0.0;
  double v15 = v13 - v8;
  double v16 = a5;
  if (!v14) {
    double v16 = v15;
  }
  *((double *)result + 1) = v13;
  double v17 = v9 + v16;
  *((double *)result + 5) = v17;
  double v18 = *((double *)result + 10);
  if (v18 > 0.0 && v17 >= v18)
  {
    *((double *)result + 6) = v17 + *((double *)result + 6);
    float v20 = v11 + *((float *)result + 8);
    *((float *)result + 7) = v10 + *((float *)result + 7);
    *((float *)result + _Block_object_dispose(va, 8) = v20;
    *((float *)result + 9) = v12 + *((float *)result + 9);
    *((void *)result + 2) = 0LL;
    *((_DWORD *)result + 6) = 0;
    *((void *)result + 5) = 0LL;
  }

  uint64_t v21 = *(void *)a2;
  *((float *)result + 16) = a2[2];
  *((void *)result + 7) = v21;
  return result;
}

double sub_10036479C(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + memset(&buf[7], 0, 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)a1 = 1;
  return result;
}

unsigned __int8 *sub_1003647BC(unsigned __int8 *result, float *a2, double *a3, int a4, float a5)
{
  if (*result == a4)
  {
    float v6 = *((float *)result + 4);
    float v5 = *((float *)result + 5);
    float v7 = *((float *)result + 6);
    double v8 = *((double *)result + 1);
    double v9 = *((double *)result + 4);
  }

  else
  {
    *((void *)result + 1) = 0xBFF0000000000000LL;
    *((void *)result + 2) = 0LL;
    *((_DWORD *)result + 6) = 0;
    *((void *)result + 4) = 0LL;
    *((void *)result + 5) = 0LL;
    *((_DWORD *)result + 12) = 0;
    float v7 = 0.0;
    *((void *)result + 7) = 0xBFF0000000000000LL;
    *((void *)result + _Block_object_dispose(va, 8) = 0LL;
    double v8 = -1.0;
    double v9 = 0.0;
    *((_DWORD *)result + 1_Block_object_dispose(va, 8) = 0;
    float v5 = 0.0;
    float v6 = 0.0;
    *double result = a4;
  }

  *((float *)result + 4) = *a2 + v6;
  *((float *)result + 5) = a2[1] + v5;
  *((float *)result + 6) = a2[2] + v7;
  double v10 = *a3;
  BOOL v11 = *a3 <= v8 || v8 <= 0.0;
  double v12 = v10 - v8;
  double v13 = a5;
  if (v11) {
    double v12 = v13;
  }
  *((double *)result + 1) = v10;
  *((double *)result + 4) = v9 + v12;
  uint64_t v14 = *(void *)a2;
  *((float *)result + 12) = a2[2];
  *((void *)result + 5) = v14;
  *((double *)result + 7) = v13;
  return result;
}

BOOL sub_100364874(uint64_t a1, void *a2)
{
  if (*a2 == a2[1]) {
    return 0LL;
  }
  size_t v2 = a2;
  uint64_t v4 = sub_10080E94C();
  *(_DWORD *)std::string buf = 1;
  double v5 = sub_10080EB58(v4, buf);
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  if (*v2 != v6)
  {
    double v8 = v5;
    while (1)
    {
      double v9 = *(double *)(v7 + 8);
      if (v9 <= 0.0 || v5 > 0.0 && vabdd_f64(v5, v9) > 600.0) {
        break;
      }
      v7 += 72LL;
      if (v7 == v6) {
        goto LABEL_8;
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101834650);
    }
    double v61 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v62 = *(void *)(v7 + 8);
      *(_DWORD *)std::string buf = 134349312;
      *(double *)&uint8_t buf[4] = v8;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v62;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,ignoring IO data,unexpected MCT time-tag of IO data,current mct,%{public}.3f,IO mct,%{public}.3f",  buf,  0x16u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101834650);
      }
      uint64_t v63 = *(void *)(v7 + 8);
      *(_DWORD *)v243 = 134349312;
      *(double *)&v243[4] = v8;
      __int16 v244 = 2050;
      *(void *)v245 = v63;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "InertialOdometry,ignoring IO data,unexpected MCT time-tag of IO data,current mct,%{public}.3f,IO mct,%{public}.3f",  v243,  22);
      double v65 = (char *)v64;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v64);
      goto LABEL_53;
    }

    return result;
  }

void sub_100366654(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

double sub_10036666C(uint64_t a1)
{
  size_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 16);
      size_t v2 = (void **)(*(void *)(a1 + 8) + 8LL);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 28LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 56LL;
  }

  *(void *)(a1 + memset(&buf[7], 0, 32) = v6;
LABEL_8:
  if (*(_BYTE *)(a1 + 416)) {
    *(_BYTE *)(a1 + 416) = 0;
  }
  *(void *)(a1 + 320) = 0xBFF0000000000000LL;
  *(void *)(a1 + 336) = 0xBFF0000000000000LL;
  *(void *)(a1 + sub_1011C52D0(v33 - 56) = 0xBFF0000000000000LL;
  *(_BYTE *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 65) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + sub_1011C52D0(v15 - 72) = 0xBFF0000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(_OWORD *)(a1 + 96) = 0uLL;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_BYTE *)(a1 + 2memset(&buf[7], 0, 32) = 1;
  uint64_t v7 = a1 + 232;
  *(void *)(v7 - 80) = 0xBFF0000000000000LL;
  *(_OWORD *)(v7 - sub_1011C52D0(v15 - 72) = 0u;
  *(_OWORD *)(v7 - sub_1011C52D0(v33 - 56) = 0u;
  *(_OWORD *)(v7 - 40) = 0u;
  *(_OWORD *)(v7 - 24) = 0u;
  *(_BYTE *)(v7 - 8_Block_object_dispose(va, 8) = 1;
  *(void *)(v7 + _Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + memset(&buf[7], 0, 32) = 0u;
  *(_OWORD *)(v7 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 152) = 0xBFF0000000000000LL;
  *(_DWORD *)(v7 + 160) = 0;
  double result = -1.0;
  *(_OWORD *)(v7 + 120) = xmmword_1012E0070;
  *(void *)(v7 + 136) = 0xBFF0000000000000LL;
  return result;
}

unint64_t sub_100366788(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 56 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  double v9 = (char **)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = &(*v9)[72 * (v7 % 0x38)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 56 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100368144(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100368144(v24, v6);
      sub_10036826C( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_100368144(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      int v16 = (_BYTE **)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15) {
        BOOL v17 = 0LL;
      }
      else {
        BOOL v17 = &(*v16)[72 * (v14 % 0x38)];
      }
      v24[0] = v12;
      sub_10036842C(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1003681F8(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  double v21 = (void *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 72 * (v19 % 0x38);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100368144(v24, v11);
  return v24[0].n128_u64[0];
}

BOOL sub_100366A30(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 63)) {
    return 0LL;
  }
  float v3 = *(float *)(a2 + 16);
  if (v3 <= 0.0) {
    return 0LL;
  }
  float v5 = *(float *)(a2 + 20);
  float v6 = *(float *)(a2 + 24);
  float v7 = hypotf(v5, v6);
  double v8 = v7;
  *(double *)(a1 + 320) = v7 / v3;
  double v9 = *(double *)(a1 + 336);
  if (v9 >= 0.0) {
    *(double *)(a1 + 32_Block_object_dispose(va, 8) = v9;
  }
  if (v7 >= 0.5 && fabsf(v5) >= 0.005 && fabsf(v6) >= 0.005)
  {
    float v20 = atan2f(v6, v5);
    if (v20 >= 0.0) {
      double v21 = v20;
    }
    else {
      double v21 = v20 + 6.28318531;
    }
    double v22 = 6.28318531 - v21;
    if (v22 < 0.0 || v22 >= 6.28318531)
    {
      double v22 = fmod(v22, 6.28318531);
      if (v22 < 0.0) {
        double v22 = v22 + 6.28318531;
      }
    }

    *(double *)(a1 + 336) = v22;
    *(double *)(a1 + 344) = v23;
    if (v23 < 0.0) {
      *(void *)(a1 + 344) = qword_1012E6D80[*(_BYTE *)(a2 + 61) == 1];
    }
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101834650);
    }
    float v24 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(a2 + 8);
      int v26 = *(unsigned __int8 *)(a2 + 61);
      uint64_t v27 = *(void *)(a1 + 320);
      double v28 = *(double *)(a1 + 336) * 57.2957795;
      double v29 = sqrt(*(double *)(a1 + 344)) * 57.2957795;
      double v30 = sub_100367100((float *)(a1 + 144));
      double v31 = *(float *)(a2 + 20);
      double v32 = *(float *)(a2 + 24);
      *(_DWORD *)std::string buf = 134351104;
      uint64_t v57 = v25;
      __int16 v58 = 1026;
      *(_DWORD *)double v59 = v26;
      *(_WORD *)&v59[4] = 2050;
      *(double *)&_BYTE v59[6] = v8;
      *(_WORD *)&v59[14] = 2050;
      *(void *)&v59[16] = v27;
      *(_WORD *)&v59[24] = 2050;
      *(double *)&v59[26] = v28;
      __int16 v60 = 2050;
      double v61 = v29;
      __int16 v62 = 2050;
      double v63 = v30;
      __int16 v64 = 2050;
      double v65 = v31;
      __int16 v66 = 2050;
      double v67 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,PDR,estimated course,sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpe ed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,BatchGDistMoved_m,%{public}.3f,PosX,%{pu blic}.3f,dPosY,%{public}.3f",  buf,  0x58u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101834650);
      }
      uint64_t v33 = qword_101934968;
      uint64_t v34 = *(void *)(a2 + 8);
      int v35 = *(unsigned __int8 *)(a2 + 61);
      uint64_t v36 = *(void *)(a1 + 320);
      double v37 = *(double *)(a1 + 336) * 57.2957795;
      double v38 = sqrt(*(double *)(a1 + 344)) * 57.2957795;
      double v39 = sub_100367100((float *)(a1 + 144));
      double v40 = *(float *)(a2 + 20);
      double v41 = *(float *)(a2 + 24);
      int v44 = 134351104;
      uint64_t v45 = v34;
      __int16 v46 = 1026;
      *(_DWORD *)uint64_t v47 = v35;
      *(_WORD *)&v47[4] = 2050;
      *(double *)&v47[6] = v8;
      *(_WORD *)&v47[14] = 2050;
      *(void *)&v47[16] = v36;
      *(_WORD *)&v47[24] = 2050;
      *(double *)&v47[26] = v37;
      __int16 v48 = 2050;
      double v49 = v38;
      __int16 v50 = 2050;
      double v51 = v39;
      __int16 v52 = 2050;
      double v53 = v40;
      __int16 v54 = 2050;
      double v55 = v41;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  2LL,  "InertialOdometry,PDR,estimated course,sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpe ed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,BatchGDistMoved_m,%{public}.3f,PosX,%{pu blic}.3f,dPosY,%{public}.3f",  &v44,  88);
      float v43 = (uint8_t *)v42;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::estimateGroundSpeedAndCoursePDR(const CLPIOSample &)",  "%s\n",  v42);
      if (v43 != buf) {
        free(v43);
      }
    }

    return 1LL;
  }

  else
  {
    *(void *)(a1 + 336) = 0xBFF0000000000000LL;
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101834650);
    }
    uint64_t v10 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a2 + 8);
      double v12 = *(float *)(a2 + 20);
      double v13 = *(float *)(a2 + 24);
      *(_DWORD *)std::string buf = 134349824;
      uint64_t v57 = v11;
      __int16 v58 = 2050;
      *(double *)double v59 = v8;
      *(_WORD *)&v59[8] = 2050;
      *(double *)&_BYTE v59[10] = v12;
      *(_WORD *)&_BYTE v59[18] = 2050;
      *(double *)&_BYTE v59[20] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,PDR,cannot compute course,sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3 f,dPosY,%{public}.3f",  buf,  0x2Au);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101834650);
      }
      uint64_t v15 = *(void *)(a2 + 8);
      double v16 = *(float *)(a2 + 20);
      double v17 = *(float *)(a2 + 24);
      int v44 = 134349824;
      uint64_t v45 = v15;
      __int16 v46 = 2050;
      *(double *)uint64_t v47 = v8;
      *(_WORD *)&v47[8] = 2050;
      *(double *)&v47[10] = v16;
      *(_WORD *)&v47[18] = 2050;
      *(double *)&v47[20] = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "InertialOdometry,PDR,cannot compute course,sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3 f,dPosY,%{public}.3f",  &v44,  42);
      unint64_t v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::estimateGroundSpeedAndCoursePDR(const CLPIOSample &)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
      return 0LL;
    }
  }

  return result;
}