void sub_10005B800(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _Unwind_Resume(exception_object);
}

void sub_10005B81C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10005B848(void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 136;
      v7 = v4 - 136;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 136;
        (*v8)(v6);
        BOOL v9 = v6 == v2;
        v6 = v7;
      }

      while (!v9);
      v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10005B8D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1LL) {
    sub_100007008();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1LL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0xF0F0F0F0F0F0F0LL) {
    unint64_t v7 = 0x1E1E1E1E1E1E1E1LL;
  }
  else {
    unint64_t v7 = v4;
  }
  v15 = a1 + 2;
  if (v7) {
    v8 = (char *)sub_10005BA4C(v5, v7);
  }
  else {
    v8 = 0LL;
  }
  v11 = v8;
  v12 = &v8[136 * v3];
  v14 = &v8[136 * v7];
  sub_1000865CC(v12);
  v13 = v12 + 136;
  sub_10005B9D8(a1, &v11);
  uint64_t v9 = a1[1];
  sub_10005BB28((uint64_t)&v11);
  return v9;
}

void sub_10005B9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10005B9D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10005BA90((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10005BA4C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2LL) {
    sub_1000070D4();
  }
  return operator new(136 * a2);
}

uint64_t sub_10005BA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = a7 - 136;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 136LL;
    sub_1000865CC(v12);
  }

  return a6;
}

uint64_t sub_10005BB28(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 136);
    *(void *)(a1 + 16) = i - 136;
    (*v4)();
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10005BB78(void **a1)
{
  v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 136;
      uint64_t v6 = v3 - 136;
      do
      {
        uint64_t v7 = *(void (***)(char *))v6;
        v6 -= 136;
        (*v7)(v5);
        BOOL v8 = v5 == v1;
        uint64_t v5 = v6;
      }

      while (!v8);
      unint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void *sub_10005BBEC(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v12 = operator new(0x28uLL);
  void *v12 = 0LL;
  v12[1] = v7;
  *((_OWORD *)v12 + 1) = **a4;
  *((_DWORD *)v12 + 8) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }
  }

  uint64_t v21 = *(void *)a1;
  v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *v12 = *v22;
LABEL_44:
    void *v22 = v12;
    goto LABEL_45;
  }

  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }

    else
    {
      v23 &= v9 - 1;
    }

    v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }

void sub_10005BE30(_Unwind_Exception *a1)
{
}

uint64_t *sub_10005BE44(void *a1, void *a2)
{
  uint64_t result = sub_10001A7B8(a1, a2);
  if (result)
  {
    sub_10005BE78(a1, result);
    return (uint64_t *)1;
  }

  return result;
}

uint64_t sub_10005BE78(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10005BEB8(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  __p = 0LL;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_10005BEB8@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  void *v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_10005BFEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10005BB78((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1LL) {
      sub_100007008();
    }
    unint64_t v10 = 0xE1E1E1E1E1E1E1E2LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10005C168((void *)a1, v11);
    uint64_t result = sub_10005C1B8(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }

  if (0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_10005C240(a2, v13, (uint64_t)v9);
    uint64_t result = sub_10005C1B8(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }

  uint64_t result = sub_10005C240(a2, a3, (uint64_t)v9);
  float v15 = v14;
  float v16 = *(uint64_t (****)(void))(a1 + 8);
  if (v16 != v14)
  {
    BOOL v17 = v16 - 17;
    unint64_t v18 = v16 - 17;
    do
    {
      unint64_t v19 = *v18;
      v18 -= 17;
      uint64_t result = (*v19)(v17);
      BOOL v20 = v17 == v15;
      BOOL v17 = v18;
    }

    while (!v20);
  }

  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_10005C158(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10005C160(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_10005C168(void *a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2LL) {
    sub_100007008();
  }
  uint64_t result = (char *)sub_10005BA4C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

uint64_t sub_10005C1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      sub_1000865CC(a4 + v7);
      v7 += 136LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_10005C214(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 136;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 136LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10005C240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100087EC8(a3, v4);
      v4 += 136LL;
      a3 += 136LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

void sub_10005C29C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  if (!sub_100097CA8(a1)) {
    sub_101226EAC();
  }
  if (!*(_BYTE *)(a3 + 32)) {
    sub_101226D38();
  }
  v49 = 0LL;
  v50 = 0LL;
  v48 = (uint64_t *)&v49;
  uint64_t v9 = *(void *)(a1 + 232);
  uint64_t v8 = *(void *)(a1 + 240);
  if (v9 == v8)
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    do
    {
      uint64_t v10 = *(void *)(a3 + 24);
      if (!v10) {
        sub_100008BDC();
      }
      *(void *)&__int128 v45 = (*(double (**)(uint64_t, void, uint64_t))(*(void *)v10 + 48LL))( v10,  *(void *)v9,  a2);
      uint64_t v11 = v9 + 16;
      sub_10005C660(&v48, (double *)&v45, (_OWORD *)(v9 + 16));
      v9 += 32LL;
    }

    while (v11 + 16 != v8);
    uint64_t v12 = v50;
  }

  sub_1002F0B04(&v45);
  CFStringRef v13 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsMaximumNearestNeighbors", 0x8000100u, kCFAllocatorNull);
  int v14 = sub_1002A77CC(v45, (uint64_t)v13, &v51);
  CFRelease(v13);
  unint64_t v15 = v51;
  float v16 = (std::__shared_weak_count *)*((void *)&v45 + 1);
  if (*((void *)&v45 + 1))
  {
    BOOL v17 = (unint64_t *)(*((void *)&v45 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v14) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = 1LL;
  }
  else {
    BOOL v20 = (void *)v19;
  }
  if (v19) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = v12;
  }
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  int v47 = 1065353216;
  if (v21)
  {
    v22 = 0LL;
    unint64_t v23 = v48;
    do
    {
      v51 = v23 + 5;
      v24 = (double *)sub_10005C6F8((uint64_t)&v45, v23 + 5, (uint64_t)&unk_1012CF090, &v51);
      v24[4] = 1.0 / (double)(unint64_t)v21 + v24[4];
      v25 = (uint64_t *)v23[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }

        while (v25);
      }

      else
      {
        do
        {
          v26 = (uint64_t *)v23[2];
          BOOL v27 = *v26 == (void)v23;
          unint64_t v23 = v26;
        }

        while (!v27);
      }

      v22 = (void *)((char *)v22 + 1);
      unint64_t v23 = v26;
    }

    while (v22 != v21);
    uint64_t v21 = (void *)v46;
  }

  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  *((_DWORD *)a4 + 6) = 3;
  *((_BYTE *)a4 + 80) = 0;
  a4[5] = 0LL;
  a4[6] = 0LL;
  a4[4] = 0LL;
  *((_BYTE *)a4 + 56) = 0;
  if (v21)
  {
    v28 = 0LL;
    v29 = a4 + 2;
    do
    {
      uint64_t v31 = v21[2];
      uint64_t v30 = v21[3];
      if ((unint64_t)v28 >= *v29)
      {
        uint64_t v33 = (v28 - *a4) >> 5;
        uint64_t v34 = *v29 - (void)*a4;
        uint64_t v35 = v34 >> 4;
        else {
          unint64_t v36 = v35;
        }
        v37 = (char *)sub_10000835C((uint64_t)(a4 + 2), v36);
        v39 = &v37[32 * v33];
        uint64_t v40 = v21[4];
        *(void *)v39 = v31;
        *((void *)v39 + 1) = v30;
        *((void *)v39 + 2) = v40;
        *((_DWORD *)v39 + 6) = 0;
        v42 = *a4;
        v41 = a4[1];
        v43 = v39;
        if (v41 != *a4)
        {
          do
          {
            __int128 v44 = *((_OWORD *)v41 - 2);
            *(_OWORD *)(v43 - 20) = *(_OWORD *)(v41 - 20);
            *((_OWORD *)v43 - 2) = v44;
            v43 -= 32;
            v41 -= 32;
          }

          while (v41 != v42);
          v41 = *a4;
        }

        v28 = v39 + 32;
        *a4 = v43;
        a4[1] = v39 + 32;
        a4[2] = &v37[32 * v38];
        if (v41) {
          operator delete(v41);
        }
      }

      else
      {
        uint64_t v32 = v21[4];
        *(void *)v28 = v31;
        *((void *)v28 + 1) = v30;
        *((void *)v28 + 2) = v32;
        *((_DWORD *)v28 + 6) = 0;
        v28 += 32;
      }

      a4[1] = v28;
      uint64_t v21 = (void *)*v21;
    }

    while (v21);
  }

  sub_100019CEC((uint64_t)&v45);
  sub_100008390((uint64_t)&v48, v49);
}

void sub_10005C5DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_10005C634(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

char *sub_10005C660(uint64_t **a1, double *a2, _OWORD *a3)
{
  uint64_t v6 = (char *)operator new(0x38uLL);
  double v7 = *a2;
  *((double *)v6 + 4) = *a2;
  *(_OWORD *)(v6 + 40) = *a3;
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v9;
        uint64_t v9 = (uint64_t *)*v9;
        uint64_t v10 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }

      uint64_t v9 = (uint64_t *)v9[1];
    }

    while (v9);
    uint64_t v10 = v8 + 1;
  }

  else
  {
    uint64_t v10 = a1 + 1;
  }

LABEL_8:
  sub_1000085FC(a1, (uint64_t)v8, v10, (uint64_t *)v6);
  return v6;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 32),  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  double v7 = *(void *)(v5 + 16);
  if (!v7) {
    double v7 = *(void *)(qword_1019A08A0 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 20),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  sub_1000085FC(a1, (uint64_t)v9, v11, (uint64_t *)v6);
  return v6;
}

  sub_1000085FC(a1, (uint64_t)v6, v8, v4);
  return v4;
}

  sub_1000085FC((uint64_t **)a1, (uint64_t)v3, v5, (uint64_t *)v7);
  return v7;
}

  sub_1000085FC(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

        *(void *)(v27 + 8) = v25;
        uint64_t v32 = sub_1001BC6EC(*((void *)v28 + 350));
        uint64_t v34 = qword_1019A0AF8;
        uint64_t v35 = qword_1019A0AB8;
        if (qword_1019A0AB8)
        {
          *(void *)(qword_1019A0AF8 + 8) = qword_1019A0AB8;
          *(void *)(qword_1019A0B00 + 8) = v35;
          unint64_t v36 = qword_1019A0B08;
LABEL_10:
          v37 = &dword_1019A0000;
          uint64_t v38 = &dword_1019A0000;
          *(void *)(v36 + 8) = v35;
          *(void *)(qword_1019A0B10 + 8) = v35;
          v39 = qword_1019A0B18;
          uint64_t v40 = &dword_1019A0000;
          v41 = &dword_1019A0000;
LABEL_11:
          *(void *)(v39 + 8) = v35;
          *(void *)(*((void *)v38 + 356) + 8LL) = v35;
          v42 = *((void *)v41 + 357);
LABEL_12:
          *(void *)(v42 + 8) = v35;
          *(void *)(*((void *)v37 + 358) + 8LL) = v35;
LABEL_18:
          v48 = *((void *)v40 + 359);
LABEL_19:
          *(void *)(v48 + 8) = v35;
          wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_1001BBC50,  v33);
          return;
        }

        v43 = sub_1001BBE2C(v32);
        uint64_t v35 = qword_1019A0AB8;
        *(void *)(v34 + 8) = qword_1019A0AB8;
        __int128 v44 = qword_1019A0B00;
        if (v35)
        {
          *(void *)(qword_1019A0B00 + 8) = v35;
          *(void *)(qword_1019A0B08 + 8) = v35;
          __int128 v45 = qword_1019A0B10;
        }

        else
        {
          v52 = sub_1001BBE2C(v43);
          uint64_t v35 = qword_1019A0AB8;
          *(void *)(v44 + 8) = qword_1019A0AB8;
          unint64_t v36 = qword_1019A0B08;
          if (v35) {
            goto LABEL_10;
          }
          v53 = sub_1001BBE2C(v52);
          uint64_t v35 = qword_1019A0AB8;
          *(void *)(v36 + 8) = qword_1019A0AB8;
          __int128 v45 = qword_1019A0B10;
          if (!v35)
          {
            v54 = sub_1001BBE2C(v53);
            uint64_t v35 = qword_1019A0AB8;
            *(void *)(v45 + 8) = qword_1019A0AB8;
            v39 = qword_1019A0B18;
            if (v35)
            {
              uint64_t v40 = &dword_1019A0000;
              v37 = &dword_1019A0000;
              v41 = &dword_1019A0000;
              uint64_t v38 = &dword_1019A0000;
              goto LABEL_11;
            }

            v55 = sub_1001BBE2C(v54);
            uint64_t v35 = qword_1019A0AB8;
            *(void *)(v39 + 8) = qword_1019A0AB8;
            __int128 v46 = qword_1019A0B20;
            if (!v35)
            {
              v56 = sub_1001BBE2C(v55);
              uint64_t v35 = qword_1019A0AB8;
              *(void *)(v46 + 8) = qword_1019A0AB8;
              v42 = qword_1019A0B28;
              if (v35)
              {
                uint64_t v40 = &dword_1019A0000;
                v37 = &dword_1019A0000;
                goto LABEL_12;
              }

              v57 = sub_1001BBE2C(v56);
              uint64_t v35 = qword_1019A0AB8;
              *(void *)(v42 + 8) = qword_1019A0AB8;
              int v47 = qword_1019A0B30;
              if (!v35)
              {
                v58 = sub_1001BBE2C(v57);
                uint64_t v35 = qword_1019A0AB8;
                *(void *)(v47 + 8) = qword_1019A0AB8;
                v48 = qword_1019A0B38;
                if (!v35)
                {
                  sub_1001BBE2C(v58);
                  uint64_t v35 = qword_1019A0AB8;
                }

                goto LABEL_19;
              }

              uint64_t v40 = &dword_1019A0000;
LABEL_17:
              *(void *)(v47 + 8) = v35;
              goto LABEL_18;
            }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 32),  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(v5 + 24),  a2,  a4);
  }
  return result;
}

  if ((v3 & 4) != 0)
  {
    uint64_t v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v6 & 0x80000000) != 0)
    {
      double v7 = 11;
    }

    else if (v6 >= 0x80)
    {
      double v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int8x8_t v3 = *(_DWORD *)(a1 + 40);
    }

    else
    {
      double v7 = 2;
    }

    uint64_t v4 = (v7 + v4);
    if ((v3 & 8) != 0) {
      goto LABEL_10;
    }
  }

  else if ((v3 & 8) != 0)
  {
LABEL_10:
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24),  a2)
       + 1;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 24),  a2,  a4);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 25),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 32),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
  if ((*(_DWORD *)(v4 + 44) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v4 + 32),  a3);
  }
  return result;
}

  double v7 = *(void *)(v5 + 24);
  if (!v7) {
    double v7 = *(void *)(qword_1019A0C08 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 24) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
  if ((*(_DWORD *)(v4 + 44) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v4 + 32),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  sub_1000085FC(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
    *((void *)a3 + 2) = self->_marketId;
    *((_BYTE *)a3 + 68) |= 2u;
  }

  v6[4] = -[TRANSITPbLocationFingerprintsV1 copyWithZone:](self->_dEPRECATEDFingerprints, "copyWithZone:", a3);
  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
    v6[2] = (id)self->_marketId;
    *((_BYTE *)v6 + 68) |= 2u;
  }

  v6[6] = -[TRANSITPbLocationFingerprints copyWithZone:](self->_fingerprints, "copyWithZone:", a3);
  return v6;
}

  dEPRECATEDFingerprints = self->_dEPRECATEDFingerprints;
  double v7 = *((void *)a3 + 4);
  if (dEPRECATEDFingerprints)
  {
    if (v7) {
      -[TRANSITPbLocationFingerprintsV1 mergeFrom:](dEPRECATEDFingerprints, "mergeFrom:");
    }
  }

  else if (v7)
  {
    -[TRANSITPbTransitTile setDEPRECATEDFingerprints:](self, "setDEPRECATEDFingerprints:");
  }

  if ((*((_BYTE *)a3 + 68) & 2) != 0)
  {
    self->_marketId = *((void *)a3 + 2);
    *(_BYTE *)&self->_has |= 2u;
  }

  fingerprints = self->_fingerprints;
  uint64_t v9 = *((void *)a3 + 6);
  if (fingerprints)
  {
    if (v9) {
      -[TRANSITPbLocationFingerprints mergeFrom:](fingerprints, "mergeFrom:");
    }
  }

  else if (v9)
  {
    -[TRANSITPbTransitTile setFingerprints:](self, "setFingerprints:");
  }

  uint64_t v10 = *(void *)(a1 + 400);
  *(void *)buf = 0xBFF0000000000000LL;
  if ((sub_10044B5B8(v10, (double *)buf) & 1) != 0 || sub_10044B95C(*(void *)(a1 + 400)))
  {
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101834650);
    }
    uint64_t v12 = &OBJC_METACLASS___CLPrivacyManager.vtable;
    CFStringRef v13 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(void *)(v2[1] - 64LL);
      unint64_t v15 = *(void *)(a1 + 400);
      *(void *)v243 = 0xBFF0000000000000LL;
      float v16 = sub_10044B5B8(v15, (double *)v243);
      BOOL v17 = sub_10044B95C(*(void *)(a1 + 400));
      *(_DWORD *)buf = 134349568;
      *(void *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v16;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,PDR,CM not pedestrian,ignoring IO data,IO mct,%{public}.3f,isVehicular,%{public}d,isCycling,%{public}d",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101834650);
      }
      v196 = qword_101934968;
      v197 = *(void *)(v2[1] - 64LL);
      v198 = *(void *)(a1 + 400);
      v242 = 0xBFF0000000000000LL;
      v199 = sub_10044B5B8(v198, (double *)&v242);
      v200 = sub_10044B95C(*(void *)(a1 + 400));
      *(_DWORD *)v243 = 134349568;
      *(void *)&v243[4] = v197;
      v244 = 1026;
      *(_DWORD *)v245 = v199;
      *(_WORD *)&v245[4] = 1026;
      *(_DWORD *)&v245[6] = v200;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v196,  2LL,  "InertialOdometry,PDR,CM not pedestrian,ignoring IO data,IO mct,%{public}.3f,isVehicular,%{public}d,isCycling,%{public}d",  v243,  24);
      v202 = (char *)v201;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v201);
      if (v202 != buf) {
        free(v202);
      }
    }

    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 64) = 1;
    *(void *)(a1 + 152) = 0xBFF0000000000000LL;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_BYTE *)(a1 + 144) = 1;
    *(_DWORD *)(a1 + 88) = 0;
    *(void *)(a1 + 72) = 0xBFF0000000000000LL;
    *(void *)(a1 + 80) = 0LL;
    *(void *)(a1 + 96) = 0LL;
    *(void *)(a1 + 104) = 0LL;
    *(_DWORD *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0xBFF0000000000000LL;
    *(void *)(a1 + 128) = 0LL;
    *(_DWORD *)(a1 + 136) = 0;
    unint64_t v19 = (_BYTE *)v2[1];
    if ((_BYTE *)*v2 != v19)
    {
      BOOL v20 = (float *)(*v2 + 64LL);
      uint64_t v21 = 0.3;
      v22 = 0.001;
      unint64_t v23 = 2.0;
      do
      {
        *(void *)(a1 + 376) = 0LL;
        if (*((_BYTE *)v20 - 1))
        {
          v24 = *(v20 - 12);
          if (v24 > 0.0)
          {
            v25 = (float)(*(v20 - 9) / v24);
            v26 = *(double *)(a1 + 352);
            BOOL v27 = *((double *)v20 - 7);
            if (v26 > 0.0 && vabdd_f64(v26, v27) < v23) {
              *(double *)(a1 + 376) = vabdd_f64(v25, *(double *)(a1 + 360));
            }
            *(double *)(a1 + 352) = v27;
            *(double *)(a1 + 360) = v25;
            *(void *)(a1 + 368) = 0x3FB70A3D70A3D70ALL;
          }
        }

        if (*(_BYTE *)v20)
        {
          v28 = *(v20 - 12);
          if (v28 > 0.0)
          {
            *(void *)buf = *((void *)v20 - 4);
            *(float *)&buf[8] = *(v20 - 6);
            sub_1003647BC( (unsigned __int8 *)(a1 + 64),  (float *)buf,  (double *)v20 - 7,  *((unsigned __int8 *)v20 - 3),  v28);
            v29 = hypotf(*(v20 - 11), *(v20 - 10));
            uint64_t v30 = *(double *)(a1 + 120);
            if (v30 > 0.0)
            {
              uint64_t v31 = v29;
              uint64_t v32 = *(v20 - 12);
              if (hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v30 > v21)
              {
                uint64_t v33 = (float)(v31 / v32);
                if (!*((_BYTE *)v20 - 1) || v33 < v22)
                {
                  uint64_t v34 = (os_log_s *)v12[301];
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                  {
                    v235 = v22;
                    v238 = v21;
                    uint64_t v35 = *((void *)v20 - 7);
                    unint64_t v36 = *((unsigned __int8 *)v20 - 1);
                    v37 = *(v20 - 11);
                    uint64_t v38 = *(v20 - 10);
                    v39 = *(unsigned __int8 *)v20;
                    v41 = *(v20 - 9);
                    uint64_t v40 = *(v20 - 8);
                    v43 = *(v20 - 7);
                    v42 = *(v20 - 6);
                    __int128 v44 = *(double *)(a1 + 120);
                    __int128 v45 = 0.0;
                    if (v44 > 0.0) {
                      __int128 v45 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v44;
                    }
                    *(_DWORD *)buf = 134351616;
                    *(void *)&buf[4] = v35;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v36;
                    *(_WORD *)&buf[18] = 2050;
                    *(double *)&buf[20] = v37;
                    *(_WORD *)&buf[28] = 2050;
                    *(double *)&buf[30] = v38;
                    *(_WORD *)&buf[38] = 2050;
                    *(double *)&buf[40] = v41;
                    *(_WORD *)&buf[48] = 1026;
                    *(_DWORD *)&buf[50] = v39;
                    *(_WORD *)&buf[54] = 2050;
                    *(double *)&buf[56] = v40;
                    *(_WORD *)&buf[64] = 2050;
                    *(double *)&buf[66] = v43;
                    *(_WORD *)&buf[74] = 2050;
                    *(double *)&buf[76] = v42;
                    *(_WORD *)&buf[84] = 2050;
                    *(double *)&buf[86] = v33;
                    *(_WORD *)&buf[94] = 2050;
                    *(double *)&buf[96] = v45;
                    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,PDR,VDR xcheck detected vehicular,mct,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_ m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}. 3f,%{public}.3f,GDis_m,%{public}.3f,GSpeedRate_mps2,%{public}.3f",  buf,  0x68u);
                    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
                    uint64_t v12 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
                    v22 = v235;
                    uint64_t v21 = v238;
                    unint64_t v23 = 2.0;
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    v236 = v22;
                    v239 = v21;
                    bzero(buf, 0x65CuLL);
                    int v47 = qword_101934968;
                    v48 = *((void *)v20 - 7);
                    v49 = *((unsigned __int8 *)v20 - 1);
                    v50 = *(v20 - 11);
                    v51 = *(v20 - 10);
                    v52 = *(unsigned __int8 *)v20;
                    v54 = *(v20 - 9);
                    v53 = *(v20 - 8);
                    v55 = *(double *)(a1 + 120);
                    v56 = 0.0;
                    v57 = *(v20 - 7);
                    v58 = *(v20 - 6);
                    if (v55 > 0.0) {
                      v56 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v55;
                    }
                    *(_DWORD *)v243 = 134351616;
                    *(void *)&v243[4] = v48;
                    v244 = 1026;
                    *(_DWORD *)v245 = v49;
                    *(_WORD *)&v245[4] = 2050;
                    *(double *)&v245[6] = v50;
                    *(_WORD *)&v245[14] = 2050;
                    *(double *)&v245[16] = v51;
                    *(_WORD *)&v245[24] = 2050;
                    *(double *)&v245[26] = v54;
                    *(_WORD *)&v245[34] = 1026;
                    *(_DWORD *)&v245[36] = v52;
                    *(_WORD *)&v245[40] = 2050;
                    *(double *)&v245[42] = v53;
                    *(_WORD *)&v245[50] = 2050;
                    *(double *)&v245[52] = v57;
                    *(_WORD *)&v245[60] = 2050;
                    *(double *)&v245[62] = v58;
                    *(_WORD *)&v245[70] = 2050;
                    *(double *)&v245[72] = v33;
                    *(_WORD *)&v245[80] = 2050;
                    *(double *)&v245[82] = v56;
                    LODWORD(v230) = 104;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "InertialOdometry,PDR,VDR xcheck detected vehicular,mct,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_ m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}. 3f,%{public}.3f,GDis_m,%{public}.3f,GSpeedRate_mps2,%{public}.3f",  v243,  v230);
                    v60 = (char *)v59;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v59);
                    p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
                    uint64_t v12 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
                    v22 = v236;
                    uint64_t v21 = v239;
                    unint64_t v23 = 2.0;
                    if (v60 != buf) {
                      free(v60);
                    }
                  }

                  *(_DWORD *)(a1 + 392) = 4;
                  *(void *)(a1 + 384) = *((void *)v20 - 7);
                }
              }
            }
          }
        }

        __int128 v46 = v20 + 2;
        v20 += 18;
      }

      while (v46 != v19);
      return 1LL;
    }

    return result;
  }

  v66 = *(double *)(a1 + 56);
  v240 = v2;
  if (v66 < 0.0)
  {
    v67 = 0LL;
LABEL_81:
    v77 = 0x8E38E38E38E38E39LL * ((uint64_t)(v2[1] - *v2) >> 3) - v67;
    v78 = *(void *)(a1 + 40);
    if (v78 > 0x1E || v77 >= 30 - v78)
    {
      v79 = v78 + v77;
      v80 = v79 - 30;
      if (v79 != 30)
      {
        v81 = *(void *)(a1 + 32);
        v82 = *(void *)(a1 + 8);
        v83 = (void *)(v82 + 8 * (v81 / 0x38));
        if (*(void *)(a1 + 16) == v82) {
          v84 = 0LL;
        }
        else {
          v84 = (char *)(*v83 + 72 * (v81 % 0x38));
        }
        *(void *)buf = v82 + 8 * (v81 / 0x38);
        *(void *)&buf[8] = v84;
        sub_100368144(buf, v80);
        sub_100366788((void *)a1, v83, v84, *(void **)buf, *(char **)&buf[8]);
      }
    }

    *(_BYTE *)(a1 + 144) = 1;
    *(void *)(a1 + 152) = 0xBFF0000000000000LL;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_BYTE *)(a1 + 64) = 1;
    v237 = (unsigned __int8 *)(a1 + 144);
    *(_DWORD *)(a1 + 88) = 0;
    *(void *)(a1 + 72) = 0xBFF0000000000000LL;
    *(void *)(a1 + 80) = 0LL;
    *(void *)(a1 + 96) = 0LL;
    *(void *)(a1 + 104) = 0LL;
    *(_DWORD *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0xBFF0000000000000LL;
    *(void *)(a1 + 128) = 0LL;
    *(_DWORD *)(a1 + 136) = 0;
    v85 = *v2;
    v241 = 0LL;
    v86 = 72 * v67 + 64;
    do
    {
      v87 = v85 + v86;
      if (!*(_BYTE *)(v85 + v86 - 1)) {
        goto LABEL_100;
      }
      v88 = *(unsigned __int8 *)(v87 - 3);
      if (v88 != *(unsigned __int8 *)(a1 + 48))
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_101834650);
        }
        v89 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          v90 = *(void *)(a1 + 56);
          v91 = *(void *)(v85 + v86 - 56);
          v92 = *(unsigned __int8 *)(a1 + 48);
          v93 = *(unsigned __int8 *)(v87 - 3);
          *(_DWORD *)buf = 134349824;
          *(void *)&buf[4] = v90;
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v91;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v92;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v93;
          _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,ref frame change detected;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,prevRefF,%{publ"
            "ic}d,currRefF,%{public}d",
            buf,
            0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_101834650);
          }
          v153 = *(void *)(a1 + 56);
          v154 = *(void *)(v85 + v86 - 56);
          v155 = *(unsigned __int8 *)(a1 + 48);
          v156 = *(unsigned __int8 *)(v87 - 3);
          *(_DWORD *)v243 = 134349824;
          *(void *)&v243[4] = v153;
          v244 = 2050;
          *(void *)v245 = v154;
          *(_WORD *)&v245[8] = 1026;
          *(_DWORD *)&v245[10] = v155;
          *(_WORD *)&v245[14] = 1026;
          *(_DWORD *)&v245[16] = v156;
          LODWORD(v230) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "InertialOdometry,ref frame change detected;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,prevRefF,%{publ"
            "ic}d,currRefF,%{public}d",
            v243,
            v230);
          v158 = (char *)v157;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v157);
          if (v158 != buf) {
            free(v158);
          }
        }

        sub_10036666C(a1);
        *(void *)(a1 + 328) = 0xBFF0000000000000LL;
        v88 = *(unsigned __int8 *)(v87 - 3);
        *(_BYTE *)(a1 + 48) = v88;
        if (!*(_BYTE *)(v87 - 1)) {
          goto LABEL_100;
        }
      }

      v94 = v85 + v86;
      v95 = *(float *)(v85 + v86 - 48);
      if (v95 <= 0.0 || (float)(hypotf(*(float *)(v94 - 44), *(float *)(v94 - 40)) / v95) <= 9.0)
      {
        *(void *)buf = *(void *)(v94 - 32);
        *(_DWORD *)&buf[8] = *(_DWORD *)(v94 - 24);
        v107 = (uint64_t *)(v94 - 56);
        sub_1003647BC((unsigned __int8 *)(a1 + 64), (float *)buf, (double *)(v94 - 56), v88, v95);
        *(void *)buf = *(void *)(v94 - 44);
        *(_DWORD *)&buf[8] = *(_DWORD *)(v94 - 36);
        sub_1003646A8(v237, (float *)buf, (double *)(v94 - 56), *(unsigned __int8 *)(v87 - 3), *(float *)(v94 - 48));
        *(void *)buf = *(void *)(v94 - 44);
        *(_DWORD *)&buf[8] = *(_DWORD *)(v94 - 36);
        sub_1003646A8( (unsigned __int8 *)(a1 + 232),  (float *)buf,  (double *)(v94 - 56),  *(unsigned __int8 *)(v87 - 3),  *(float *)(v94 - 48));
        sub_100366A30(a1, v87 - 64);
        sub_100366FF0((void *)a1, v87 - 64);
        v108 = *(void *)(a1 + 40);
        if (v108 >= 0x1E)
        {
          ++*(void *)(a1 + 32);
          *(void *)(a1 + 40) = v108 - 1;
          sub_1002D6744(a1, 1);
        }

        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_101834650);
        }
        v109 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          v110 = *v107;
          v111 = *(float *)(v94 - 44);
          v112 = *(float *)(v94 - 48);
          v231 = *(unsigned __int8 *)(v87 - 1);
          v232 = *(unsigned __int8 *)(v87 - 3);
          v113 = v111;
          v114 = *(float *)(v94 - 40);
          v115 = v114;
          v116 = *(float *)(v94 - 36);
          v117 = *(float *)(v94 - 32);
          v118 = *(float *)(v94 - 28);
          v233 = *(float *)(v94 - 24);
          v119 = *(unsigned __int8 *)(v85 + v86);
          v120 = hypotf(v111, v114);
          v121 = hypotf(v117, v118);
          *(_DWORD *)buf = 134352128;
          *(void *)&buf[4] = v110;
          uint64_t v2 = v240;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v232;
          *(_WORD *)&buf[18] = 2050;
          *(double *)&buf[20] = v112;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v231;
          *(_WORD *)&buf[34] = 2050;
          *(double *)&buf[36] = v113;
          *(_WORD *)&buf[44] = 2050;
          *(double *)&buf[46] = v115;
          *(_WORD *)&buf[54] = 2050;
          *(double *)&buf[56] = v116;
          *(_WORD *)&buf[64] = 1026;
          *(_DWORD *)&buf[66] = v119;
          *(_WORD *)&buf[70] = 2050;
          *(double *)&buf[72] = v117;
          *(_WORD *)&buf[80] = 2050;
          *(double *)&buf[82] = v118;
          *(_WORD *)&buf[90] = 2050;
          *(double *)&buf[92] = v233;
          *(_WORD *)&buf[100] = 2050;
          *(double *)&buf[102] = v120;
          v249 = 2050;
          v250 = v121;
          _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,PDR,consumed IO sample,mct,%{public}.3f,RefF,%{public}d,sample_interval_s,%{public}.3f,isPD RValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{publi c}.3f,%{public}.3f,%{public}.3f,GDis,%{public}.3f,GSpeedRate,%{public}.3f",  buf,  0x78u);
        }

        ++v241;
        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_101834650);
          }
          v136 = qword_101934968;
          v137 = *v107;
          v138 = *(unsigned __int8 *)(v87 - 3);
          v139 = *(float *)(v94 - 44);
          v140 = *(float *)(v94 - 48);
          v141 = v139;
          v142 = *(float *)(v94 - 40);
          v143 = v142;
          v144 = *(float *)(v94 - 36);
          v145 = *(float *)(v94 - 32);
          v146 = *(float *)(v94 - 28);
          v234 = *(float *)(v94 - 24);
          v147 = *(unsigned __int8 *)(v87 - 1);
          v148 = *(unsigned __int8 *)(v85 + v86);
          v149 = hypotf(v139, v142);
          v150 = hypotf(v145, v146);
          *(_DWORD *)v243 = 134352128;
          *(void *)&v243[4] = v137;
          v244 = 1026;
          *(_DWORD *)v245 = v138;
          *(_WORD *)&v245[4] = 2050;
          *(double *)&v245[6] = v140;
          *(_WORD *)&v245[14] = 1026;
          *(_DWORD *)&v245[16] = v147;
          *(_WORD *)&v245[20] = 2050;
          *(double *)&v245[22] = v141;
          *(_WORD *)&v245[30] = 2050;
          *(double *)&v245[32] = v143;
          *(_WORD *)&v245[40] = 2050;
          *(double *)&v245[42] = v144;
          *(_WORD *)&v245[50] = 1026;
          *(_DWORD *)&v245[52] = v148;
          *(_WORD *)&v245[56] = 2050;
          *(double *)&v245[58] = v145;
          *(_WORD *)&v245[66] = 2050;
          *(double *)&v245[68] = v146;
          *(_WORD *)&v245[76] = 2050;
          *(double *)&v245[78] = v234;
          *(_WORD *)&v245[86] = 2050;
          *(double *)&v245[88] = v149;
          v246 = 2050;
          v247 = v150;
          LODWORD(v230) = 120;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v136,  2LL,  "InertialOdometry,PDR,consumed IO sample,mct,%{public}.3f,RefF,%{public}d,sample_interval_s,%{public}.3f,isPD RValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{publi c}.3f,%{public}.3f,%{public}.3f,GDis,%{public}.3f,GSpeedRate,%{public}.3f",  v243,  v230);
          v152 = (char *)v151;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v151);
          uint64_t v2 = v240;
          if (v152 != buf) {
            free(v152);
          }
        }
      }

      else
      {
LABEL_100:
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_101834650);
        }
        v96 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          v97 = *(void *)(a1 + 56);
          v98 = *(void *)(v85 + v86 - 56);
          v99 = *(unsigned __int8 *)(v85 + v86 - 3);
          v100 = *(unsigned __int8 *)(v87 - 1);
          v101 = *(float *)(v85 + v86 - 44);
          v102 = *(float *)(v85 + v86 - 48);
          v103 = v101;
          v104 = *(float *)(v85 + v86 - 40);
          v105 = v104;
          v106 = hypotf(v101, v104);
          *(_DWORD *)buf = 134350848;
          *(void *)&buf[4] = v97;
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v98;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v99;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v100;
          uint64_t v2 = v240;
          *(_WORD *)&buf[34] = 2050;
          *(double *)&buf[36] = v102;
          *(_WORD *)&buf[44] = 2050;
          *(double *)&buf[46] = v103;
          *(_WORD *)&buf[54] = 2050;
          *(double *)&buf[56] = v105;
          *(_WORD *)&buf[64] = 2050;
          *(double *)&buf[66] = v106;
          _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,PDR,rejected dPos invalid/outlier sample;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,"
            "RefF,%{public}d,isValid,%{public}d,sample_interval,%{public}.3f,dPosX_m,%{public}.3f,dPosY_m,%{public}.3f,dP"
            "osXYnorm,%{public}.3f",
            buf,
            0x4Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_101834650);
          }
          v122 = qword_101934968;
          v123 = *(void *)(a1 + 56);
          v124 = v85 + v86;
          v125 = *(void *)(v85 + v86 - 56);
          v126 = *(unsigned __int8 *)(v85 + v86 - 3);
          v127 = *(unsigned __int8 *)(v87 - 1);
          v128 = *(float *)(v124 - 44);
          v129 = *(float *)(v124 - 48);
          v130 = v128;
          v131 = *(float *)(v124 - 40);
          v132 = v131;
          v133 = hypotf(v128, v131);
          *(_DWORD *)v243 = 134350848;
          *(void *)&v243[4] = v123;
          v244 = 2050;
          *(void *)v245 = v125;
          *(_WORD *)&v245[8] = 1026;
          *(_DWORD *)&v245[10] = v126;
          *(_WORD *)&v245[14] = 1026;
          *(_DWORD *)&v245[16] = v127;
          *(_WORD *)&v245[20] = 2050;
          *(double *)&v245[22] = v129;
          *(_WORD *)&v245[30] = 2050;
          *(double *)&v245[32] = v130;
          *(_WORD *)&v245[40] = 2050;
          *(double *)&v245[42] = v132;
          *(_WORD *)&v245[50] = 2050;
          *(double *)&v245[52] = v133;
          LODWORD(v230) = 74;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v122,  2LL,  "InertialOdometry,PDR,rejected dPos invalid/outlier sample;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,"
            "RefF,%{public}d,isValid,%{public}d,sample_interval,%{public}.3f,dPosX_m,%{public}.3f,dPosY_m,%{public}.3f,dP"
            "osXYnorm,%{public}.3f",
            v243,
            v230);
          v135 = (char *)v134;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v134);
          uint64_t v2 = v240;
          if (v135 != buf) {
            free(v135);
          }
        }

        ++*(_DWORD *)(a1 + 436);
      }

      ++v67;
      v85 = *v2;
      v86 += 72LL;
    }

    while (v67 < 0x8E38E38E38E38E39LL * ((uint64_t)(v2[1] - *v2) >> 3));
    if (v241)
    {
      v159 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      v160 = 0.0;
      v161 = 0.0;
      if (v159 > 0.0) {
        v161 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220)) / v159;
      }
      v162 = *(double *)(a1 + 152);
      v163 = v162 - v159;
      *(void *)(a1 + 376) = 0LL;
      v164 = *(double *)(a1 + 352);
      if (v164 > 0.0 && vabdd_f64(v164, v163) < 2.0)
      {
        v160 = vabdd_f64(v161, *(double *)(a1 + 360));
        *(double *)(a1 + 376) = v160;
      }

      v165 = hypotf( (float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212),  (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
      if (v165 >= 0.001)
      {
        if (v159 * 0.25 <= v165)
        {
          if (v159 * 3.5 >= v165) {
            v168 = 3;
          }
          else {
            v168 = 4;
          }
        }

        else
        {
          v168 = 2;
        }

        *(_DWORD *)(a1 + 392) = v168;
      }

      else
      {
        v166 = *(double *)(a1 + 96);
        if (v166 > 0.0 && hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v166 > 0.3
          || (v167 = *(double *)(a1 + 120), v167 > 0.0)
          && hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v167 > 0.3
          || v160 > 0.3)
        {
          *(_DWORD *)(a1 + 392) = 4;
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_101834650);
          }
          v169 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            v170 = *(void *)(a1 + 152);
            v171 = *(double *)(a1 + 120);
            v172 = 0.0;
            v173 = 0.0;
            if (v171 > 0.0) {
              v173 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v171;
            }
            v174 = *(double *)(a1 + 96);
            if (v174 > 0.0) {
              v172 = hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v174;
            }
            v175 = *(void *)(a1 + 360);
            v176 = *(double *)(a1 + 352);
            v177 = vabdd_f64(v163, v176);
            v178 = v176 <= 0.0;
            v179 = -1.0;
            if (!v178) {
              v179 = v177;
            }
            *(_DWORD *)buf = 134350592;
            *(void *)&buf[4] = v170;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v173;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&buf[24] = v172;
            *(_WORD *)&buf[32] = 2050;
            *(double *)&buf[34] = v174;
            *(_WORD *)&buf[42] = 2050;
            *(void *)&buf[44] = v175;
            *(_WORD *)&buf[52] = 2050;
            *(double *)&buf[54] = v161;
            *(_WORD *)&buf[62] = 2050;
            *(double *)&buf[64] = v179;
            _os_log_impl( (void *)&_mh_execute_header,  v169,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,PDR,VDR xcheck detected non-stationary,mct,%{public}.3f,horizSpeedRate_mps2,%{public}.3f, horizSpeedRateCumSum_mps2,%{public}.3f,dtCumSum_s,%{public}.3f,lastPDRVVel_mps,%{public}.3f,currPDRVVel,%{ public}.3f,VVel_dt_s,%{public}.3f",  buf,  0x48u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_101834650);
            }
            v216 = qword_101934968;
            v217 = *(void *)(a1 + 152);
            v218 = *(double *)(a1 + 120);
            v219 = 0.0;
            v220 = 0.0;
            if (v218 > 0.0) {
              v220 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v218;
            }
            v221 = *(double *)(a1 + 96);
            if (v221 > 0.0) {
              v219 = hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v221;
            }
            v222 = *(void *)(a1 + 360);
            v223 = *(double *)(a1 + 352);
            v224 = fabs(v163 - v223);
            if (v223 <= 0.0) {
              v224 = -1.0;
            }
            *(_DWORD *)v243 = 134350592;
            *(void *)&v243[4] = v217;
            v244 = 2050;
            *(double *)v245 = v220;
            *(_WORD *)&v245[8] = 2050;
            *(double *)&v245[10] = v219;
            *(_WORD *)&v245[18] = 2050;
            *(double *)&v245[20] = v221;
            *(_WORD *)&v245[28] = 2050;
            *(void *)&v245[30] = v222;
            *(_WORD *)&v245[38] = 2050;
            *(double *)&v245[40] = v161;
            *(_WORD *)&v245[48] = 2050;
            *(double *)&v245[50] = v224;
            LODWORD(v230) = 72;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v216,  2LL,  "InertialOdometry,PDR,VDR xcheck detected non-stationary,mct,%{public}.3f,horizSpeedRate_mps2,%{public}.3f, horizSpeedRateCumSum_mps2,%{public}.3f,dtCumSum_s,%{public}.3f,lastPDRVVel_mps,%{public}.3f,currPDRVVel,%{ public}.3f,VVel_dt_s,%{public}.3f",  v243,  v230);
            v226 = (char *)v225;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v225);
            if (v226 != buf) {
              free(v226);
            }
            uint64_t v2 = v240;
          }

          ++*(_DWORD *)(a1 + 424);
          v162 = *(double *)(a1 + 152);
        }

        else
        {
          *(_DWORD *)(a1 + 392) = 1;
          ++*(_DWORD *)(a1 + 428);
        }
      }

      *(double *)(a1 + 384) = v162;
    }

    else
    {
LABEL_139:
      *(void *)(a1 + 384) = 0xBFF0000000000000LL;
      *(_DWORD *)(a1 + 392) = 0;
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101834650);
    }
    v180 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      v181 = *(double *)(a1 + 56);
      v182 = *(double *)(a1 + 152);
      v183 = *(_DWORD *)(a1 + 392);
      v184 = *(void *)(a1 + 96);
      v185 = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
      v186 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      v187 = v185;
      v188 = hypotf( (float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212),  (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
      v189 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
      v190 = *(double *)(a1 + 280) + *(double *)(a1 + 272);
      v191 = hypotf( (float)(*(float *)(a1 + 260) + *(float *)(a1 + 248)) - *(float *)(a1 + 300),  (float)(*(float *)(a1 + 264) + *(float *)(a1 + 252)) - *(float *)(a1 + 304));
      *(_DWORD *)buf = 134351616;
      *(double *)&buf[4] = v181;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v182;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&buf[24] = vabdd_f64(v182, v181);
      *(_WORD *)&buf[32] = 1026;
      *(_DWORD *)&buf[34] = v183;
      *(_WORD *)&buf[38] = 2050;
      *(void *)&buf[40] = v184;
      *(_WORD *)&buf[48] = 2050;
      *(double *)&buf[50] = v187;
      *(_WORD *)&buf[58] = 2050;
      *(double *)&buf[60] = v186;
      *(_WORD *)&buf[68] = 2050;
      *(double *)&buf[70] = v188;
      *(_WORD *)&buf[78] = 2050;
      *(double *)&buf[80] = v189;
      *(_WORD *)&buf[88] = 2050;
      *(double *)&buf[90] = v190;
      *(_WORD *)&buf[98] = 2050;
      *(double *)&buf[100] = v191;
      _os_log_impl( (void *)&_mh_execute_header,  v180,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,Batch IO cumsum,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f,IO_Context ,%{public}d,HorizSpeed_dt_s,%{public}.3f,HSpeed_mps,%{public}.3f,GDistMoved_dt_s,%{public}.3f,GDis_m,%{public}.3 f,VDis_m,%{public}.3f,CumSumGDistMoved_dt_s,%{public}.3f,CumSumGDist_m,%{public}.3f",  buf,  0x6Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101834650);
      }
      v203 = qword_101934968;
      v204 = *(double *)(a1 + 56);
      v205 = *(double *)(a1 + 152);
      v206 = *(_DWORD *)(a1 + 392);
      v207 = *(void *)(a1 + 96);
      v208 = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
      v209 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      v210 = sub_100367100((float *)v237);
      v211 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
      v212 = *(double *)(a1 + 280) + *(double *)(a1 + 272);
      v213 = sub_100367100((float *)(a1 + 232));
      *(_DWORD *)v243 = 134351616;
      *(double *)&v243[4] = v204;
      v244 = 2050;
      *(double *)v245 = v205;
      *(_WORD *)&v245[8] = 2050;
      *(void *)&v245[10] = vabdd_f64(v205, v204);
      *(_WORD *)&v245[18] = 1026;
      *(_DWORD *)&v245[20] = v206;
      *(_WORD *)&v245[24] = 2050;
      *(void *)&v245[26] = v207;
      *(_WORD *)&v245[34] = 2050;
      *(double *)&v245[36] = v208;
      *(_WORD *)&v245[44] = 2050;
      *(double *)&v245[46] = v209;
      *(_WORD *)&v245[54] = 2050;
      *(double *)&v245[56] = v210;
      *(_WORD *)&v245[64] = 2050;
      *(double *)&v245[66] = v211;
      *(_WORD *)&v245[74] = 2050;
      *(double *)&v245[76] = v212;
      *(_WORD *)&v245[84] = 2050;
      *(double *)&v245[86] = v213;
      LODWORD(v230) = 108;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v203,  2LL,  "InertialOdometry,Batch IO cumsum,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f,IO_Context ,%{public}d,HorizSpeed_dt_s,%{public}.3f,HSpeed_mps,%{public}.3f,GDistMoved_dt_s,%{public}.3f,GDis_m,%{public}.3 f,VDis_m,%{public}.3f,CumSumGDistMoved_dt_s,%{public}.3f,CumSumGDist_m,%{public}.3f",  v243,  v230);
      v215 = (char *)v214;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v214);
      if (v215 != buf) {
        free(v215);
      }
      uint64_t v2 = v240;
    }

    v192 = *(double *)(v2[1] - 64LL);
    *(double *)(a1 + 56) = v192;
    v193 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
    if (v193 <= 0.0)
    {
      v194 = 0.0;
      v195 = -1.0;
      v192 = -1.0;
    }

    else
    {
      v194 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220)) / v193;
      v195 = 0.09;
    }

    *(double *)(a1 + 352) = v192;
    *(double *)(a1 + 360) = v194;
    uint64_t result = 1LL;
    *(double *)(a1 + 368) = v195;
    return result;
  }

  v68 = v2[1];
  if (v66 < *(double *)(v68 - 64))
  {
    v69 = *v2;
    if (*v2 == v68)
    {
      v67 = 0LL;
    }

    else
    {
      v67 = 0LL;
      do
      {
        ++v67;
        v69 += 72LL;
      }

      while (v69 != v68);
    }

    v74 = *(void **)(a1 + 400);
    *(void *)buf = 0xBFF0000000000000LL;
    if ((sub_10044B44C(v74, (double *)buf) & 1) == 0
      && vabdd_f64(*(double *)(*v2 + 72 * v67 + 8), *(double *)(a1 + 56)) > 300.0)
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101834650);
      }
      v75 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        v76 = *(double *)(a1 + 56);
        *(void *)&buf[14] = *(void *)(*v2 + 72 * v67 + 8);
        *(double *)&buf[4] = v76;
        *(_DWORD *)buf = 134349568;
        *(_WORD *)&buf[12] = 2050;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&buf[24] = vabdd_f64(*(double *)&buf[14], v76);
        _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,large gap in IO data while not static,resetting,prev IO mct,%{public}.3f,curr IO mct,%{public }.3f,dTime,%{public}.3f",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_101834650);
        }
        v227 = *(double *)(a1 + 56);
        *(void *)v245 = *(void *)(*v2 + 72 * v67 + 8);
        *(double *)&v243[4] = v227;
        *(_DWORD *)v243 = 134349568;
        v244 = 2050;
        *(_WORD *)&v245[8] = 2050;
        *(void *)&v245[10] = vabdd_f64(*(double *)v245, v227);
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "InertialOdometry,large gap in IO data while not static,resetting,prev IO mct,%{public}.3f,curr IO mct,%{public }.3f,dTime,%{public}.3f",  v243,  32);
        v229 = (char *)v228;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v228);
        if (v229 != buf) {
          free(v229);
        }
      }

      ++*(_DWORD *)(a1 + 432);
      sub_10036666C(a1);
    }

    goto LABEL_81;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101834650);
  }
  v70 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    v71 = *(double *)(a1 + 56);
    *(void *)&buf[14] = *(void *)(v2[1] - 64LL);
    *(double *)&buf[4] = v71;
    *(_DWORD *)buf = 134349568;
    *(_WORD *)&buf[12] = 2050;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = *(double *)&buf[14] - v71;
    _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEBUG,  "InertialOdometry,ignoring received overlapping IO data,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f",  buf,  0x20u);
  }

  uint64_t result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101834650);
    }
    v72 = *(double *)(a1 + 56);
    *(void *)v245 = *(void *)(v2[1] - 64LL);
    *(double *)&v243[4] = v72;
    *(_DWORD *)v243 = 134349568;
    v244 = 2050;
    *(_WORD *)&v245[8] = 2050;
    *(double *)&v245[10] = *(double *)v245 - v72;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "InertialOdometry,ignoring received overlapping IO data,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f",  v243,  32);
    v65 = (char *)v73;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)",  "%s\n",  v73);
LABEL_53:
    if (v65 != buf) {
      free(v65);
    }
    return 0LL;
  }

  return result;
}

      sub_100460014(a1);
      float v16 = (dispatch_queue_t *)sub_100B354EC();
      sub_100B367B4(v16, *v6, v6[1]);
      break;
    case 4:
      if (*(_DWORD *)(a1 + 8900) != *a4)
      {
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_1018399F8);
        }
        BOOL v17 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v18 = *(int *)(a1 + 8900);
          unint64_t v19 = *a4;
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)uint64_t v31 = 2082;
          *(void *)&v31[2] = "";
          *(_WORD *)&v31[10] = 2050;
          *(void *)&v31[12] = v18;
          *(_WORD *)&v31[20] = 2050;
          *(void *)&v31[22] = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Current Activity Move Mode changed, from:%{public, location:CLFitnessTrackingNo tifier_Type::ActivityMoveMode}lld, to:%{public, location:CLFitnessTrackingNotifier_Type::ActivityMoveMode}lld}",  buf,  0x26u);
        }

        *(_DWORD *)(a1 + 8900) = *a4;
        BOOL v20 = *(void **)(a1 + 10280);
        uint64_t v21 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle");
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)uint64_t v31 = 3221225472LL;
        *(void *)&v31[8] = sub_100467CBC;
        *(void *)&v31[16] = &unk_1018398E0;
        *(void *)&v31[24] = a1;
        [v20 getAuthorizationContextOfNonZonalClient:v21 withReply:buf];
      }

      break;
    case 5:
      v22 = sub_100B354EC();
      sub_100B379FC(v22, a4);
      break;
    case 7:
      *(_BYTE *)(a1 + 8898) = *(_BYTE *)a4;
      sub_100460014(a1);
      break;
    default:
      return;
  }

  sub_1000085FC(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

  sub_1000085FC(a1, (uint64_t)v6, v8, v4);
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v4,  *(float *)(v5 + 24),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(void *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  a2,  a4);
  }
  return result;
}

  uint8x8_t v5 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)uint64_t v9 = 2082;
    *(void *)&v9[2] = "";
    *(_WORD *)&v9[10] = 2114;
    *(void *)&v9[12] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:resetting and disconnecting client, Client:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  sub_100545628(a1, (uint64_t)v3);
  if (v3)
  {
    [v3 cppClientKey];
  }

  else
  {
    *(void *)buf = 0LL;
    *(void *)uint64_t v9 = 0LL;
    *(void *)&v9[8] = 0LL;
  }

  sub_100588FC8((uint64_t **)(a1 + 664), (const void **)buf);
  if ((v9[15] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v3) {
      goto LABEL_15;
    }
  }

  else if (v3)
  {
LABEL_15:
    [v3 cppClientKey];
    goto LABEL_18;
  }

  *(void *)buf = 0LL;
  *(void *)uint64_t v9 = 0LL;
  *(void *)&v9[8] = 0LL;
LABEL_18:
  sub_100588FC8((uint64_t **)(a1 + 688), (const void **)buf);
  if ((v9[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1010DDBC0(__p, "ClientRemoved");
  sub_10054BFD4(a1, v3, 1, (uint64_t *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

  if (CFStringCompare(v7, a2, 0x100uLL) == kCFCompareEqualTo)
  {
    CFRelease(v7);
    goto LABEL_10;
  }
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  if ((v5[7] & 8) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  }
  return result;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  if ((v5[7] & 8) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  }
  return result;
}

  double v7 = *(void *)(v5 + 16);
  if (!v7) {
    double v7 = *(void *)(qword_1019A1460 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_11:
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1460 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  }
  return result;
}

  sub_1000085FC(a1, (uint64_t)v7, v9, (uint64_t *)v4);
  return v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v3,  *(double *)(v4 + 24),  a3);
  if ((*(_DWORD *)(v4 + 44) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v3,  *(double *)(v4 + 32),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  if ((*(_DWORD *)(v5 + 28) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 16),  a3);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  sub_100717CF4(*(void *)(a1 + 32));
}

  if ((v3 & 0x80) != 0)
  {
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 104),  a2)
        + 1;
    int8x8_t v3 = *(_DWORD *)(a1 + 276);
  }

  unint64_t v15 = sub_100864274(v20);
  if (v15) {
    float v16 = 32;
  }
  else {
    float v16 = 0;
  }
  sub_100847D10(a6, v16);
  *(void *)&v24 = &v23;
  sub_100864494((void ***)&v24);
  sub_100008390((uint64_t)&v21, v22[0]);
  return v15 ^ 1u;
}

  uint64_t v2 = *((_DWORD *)a1 + 6);
LABEL_9:
  uint64_t v8 = v2 | 2;
LABEL_10:
  *((_DWORD *)a1 + 6) = v8;
  if (v8 == 3) {
    return 0LL;
  }
  return (*a1)[9] == 0;
}

  uint64_t v2 = *((_DWORD *)a1 + 6);
LABEL_9:
  uint64_t v8 = v2 | 2;
LABEL_10:
  *((_DWORD *)a1 + 6) = v8;
  if (v8 == 3) {
    return 0LL;
  }
  return (*a1)[9] == 0;
}

  uint64_t v1 = *(_DWORD *)(v2 + 40);
LABEL_9:
  uint64_t v8 = v1 | 2;
LABEL_10:
  *(_DWORD *)(v2 + 40) = v8;
  uint64_t v9 = v8 == 7 || *(_BYTE *)(*(void *)(v2 + 24) + 9LL) != 0;
  *(_BYTE *)(v2 + 16) = v9;
  return result;
}

  uint64_t v1 = *(_DWORD *)(v2 + 40);
LABEL_9:
  uint64_t v8 = v1 | 2;
LABEL_10:
  *(_DWORD *)(v2 + 40) = v8;
  uint64_t v9 = v8 == 7 || *(_BYTE *)(*(void *)(v2 + 24) + 9LL) != 0;
  *(_BYTE *)(v2 + 16) = v9;
  return result;
}

    if (result) {
      return result;
    }
LABEL_11:
    sub_10124DB74(result);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

  sub_1000085FC(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

  v1[5] = v3;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  if ((*(_DWORD *)(v5 + 16) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 24),  a2,  a4);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 25),  a2,  a4);
  }
  return result;
}

  uint64_t v6 = v4 + 9;
  if ((v3 & 4) == 0) {
    uint64_t v6 = v4;
  }
  if ((v3 & 8) != 0) {
    v6 += 9;
  }
  if ((v3 & 0x10) != 0) {
    uint64_t result = v6 + 2;
  }
  else {
    uint64_t result = v6;
  }
LABEL_15:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(float *)(v5 + 24),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(double *)(v5 + 24),  a3);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v4,  *(double *)(v5 + 32),  a3);
  }
  return result;
}

    if (*(_BYTE *)(v2 + 520)) {
      *(_BYTE *)(v2 + 520) = 0;
    }
    uint64_t v4 = sub_100A77000(a1, 0);
    uint8x8_t v5 = v4;
    v57 = 0u;
    uint64_t v6 = HIDWORD(v4);
    v58 = 0u;
    double v7 = v4 >> 16;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v56 = v4;
    *(_DWORD *)buf = 11;
    uint64_t v8 = *(void *)(v2 + 1456);
    if (v8)
    {
      (*(void (**)(uint64_t, uint8_t *, unint64_t *))(*(void *)v8 + 48LL))(v8, buf, &v56);
      v42 = 0u;
      v43 = 0u;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      int v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      memset(v55, 0, sizeof(v55));
      v41 = 256;
      *(_DWORD *)buf = 9;
      uint64_t v9 = *(void *)(v2 + 1456);
      if (v9)
      {
        (*(void (**)(uint64_t, uint8_t *, __int16 *))(*(void *)v9 + 48LL))(v9, buf, &v41);
        uint64_t v10 = 0;
        uint64_t v11 = 2;
LABEL_13:
        uint64_t v12 = *(float *)&v6;
        sub_100A77790(v2, v10, 1);
        CFStringRef v13 = v5;
        LODWORD(v7) = (unsigned __int16)v7;
        int v14 = v12;
        goto LABEL_14;
      }
    }

    goto LABEL_64;
  }

  uint64_t v11 = a2;
  switch(a2)
  {
    case 2:
      goto LABEL_8;
    case 1:
      unint64_t v23 = sub_100A77000(a1, 0);
      uint8x8_t v5 = v23;
      v87 = 0u;
      uint64_t v6 = HIDWORD(v23);
      v88 = 0u;
      double v7 = v23 >> 16;
      v89 = 0u;
      v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v95 = 0u;
      v96 = 0u;
      v97 = 0u;
      v98 = 0u;
      v99 = 0u;
      v100 = 0u;
      v86 = v23;
      *(_DWORD *)buf = 11;
      v24 = *(void *)(v2 + 1456);
      if (v24)
      {
        (*(void (**)(uint64_t, uint8_t *, unint64_t *))(*(void *)v24 + 48LL))(v24, buf, &v86);
        v72 = 0u;
        v73 = 0u;
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v83 = 0u;
        v84 = 0u;
        memset(v85, 0, sizeof(v85));
        v71 = 257;
        *(_DWORD *)buf = 9;
        v25 = *(void *)(v2 + 1456);
        if (v25)
        {
          (*(void (**)(uint64_t, uint8_t *, __int16 *))(*(void *)v25 + 48LL))(v25, buf, &v71);
          uint64_t v10 = 1;
          uint64_t v11 = 1;
          goto LABEL_13;
        }
      }

      goto LABEL_64;
    case 0:
      if (*(_BYTE *)(a1 + 520)) {
        *(_BYTE *)(a1 + 520) = 0;
      }
      BOOL v20 = sub_100A77000(a1, 1);
      uint8x8_t v5 = v20;
      v117 = 0u;
      uint64_t v6 = HIDWORD(v20);
      v118 = 0u;
      double v7 = v20 >> 16;
      v119 = 0u;
      v120 = 0u;
      v121 = 0u;
      v122 = 0u;
      v123 = 0u;
      v124 = 0u;
      v125 = 0u;
      v126 = 0u;
      v127 = 0u;
      v128 = 0u;
      v129 = 0u;
      v130 = 0u;
      v116 = v20;
      *(_DWORD *)buf = 11;
      uint64_t v21 = *(void *)(v2 + 1456);
      if (v21)
      {
        (*(void (**)(uint64_t, uint8_t *, unint64_t *))(*(void *)v21 + 48LL))(v21, buf, &v116);
        v102 = 0u;
        v103 = 0u;
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        v107 = 0u;
        v108 = 0u;
        v109 = 0u;
        v110 = 0u;
        v111 = 0u;
        v112 = 0u;
        v113 = 0u;
        v114 = 0u;
        memset(v115, 0, sizeof(v115));
        v101 = 256;
        *(_DWORD *)buf = 9;
        v22 = *(void *)(v2 + 1456);
        if (v22)
        {
          (*(void (**)(uint64_t, uint8_t *, __int16 *))(*(void *)v22 + 48LL))(v22, buf, &v101);
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          goto LABEL_13;
        }
      }

  double v7 = *(void *)(v5 + 16);
  if (!v7) {
    double v7 = *(void *)(qword_1019A1C78 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
  {
LABEL_11:
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1C78 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  }

  return result;
}

  uint64_t v6 = v4 + 2;
  if ((v3 & 4) == 0) {
    uint64_t v6 = v4;
  }
  if ((v3 & 8) != 0) {
    v6 += 2;
  }
  if ((v3 & 0x10) != 0) {
    uint64_t result = v6 + 2;
  }
  else {
    uint64_t result = v6;
  }
LABEL_15:
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

  if ((v3 & 4) != 0) {
    uint64_t v4 = v4
  }
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24),  a2)
       + 1;
LABEL_10:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  v4,  a4);
  if ((v5[8] & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  v4,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(double *)(v5 + 24),  a3);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v4,  *(double *)(v5 + 32),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  if ((*(_DWORD *)(v5 + 20) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 14),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 18),  a2,  a4);
  if ((*(_DWORD *)(v5 + 24) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(v5 + 8),  a2,  a4);
  }
  return result;
}

      uint8x8_t v5 = (void *)nullsub_10(v3);
      return sub_1002DDF18((uint64_t)a2, v5, (uint64_t)v5);
    }
  }

  return result;
}

  sub_1000085FC(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

  sub_1000085FC(a1, (uint64_t)v6, v8, v4);
  return v4;
}

  sub_1000085FC(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

  sub_1000085FC((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

  sub_1000085FC(a1, (uint64_t)v5, v6, a2);
  return a2;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(v5 + 32),  a2,  a4);
  }
  return result;
}

  sub_1000085FC(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v44;
  uint64_t v9 = cap;
  a2->__r_.__value_.__l.__cap_ = cap;
  uint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) == 0LL) {
    uint64_t v11 = (uint64_t)a2;
  }
  else {
    uint64_t v11 = a2->__r_.__value_.__r.__words[0];
  }
  if ((v10 & 0x80u) == 0LL) {
    size = v10;
  }
  else {
    size = a2->__r_.__value_.__l.__size_;
  }
  CFStringRef v13 = sub_10000CF44(&v46, v11, size);
  int v14 = sub_10000CF44(v13, (uint64_t)"isValid, ", 9LL);
  unint64_t v15 = (void *)std::ostream::operator<<(v14, *(unsigned __int8 *)(a1 + 25));
  sub_10000CF44(v15, (uint64_t)", ", 2LL);
  float v16 = (char)a2->__r_.__value_.__s.__size_;
  if (v16 >= 0) {
    BOOL v17 = (uint64_t)a2;
  }
  else {
    BOOL v17 = a2->__r_.__value_.__r.__words[0];
  }
  if (v16 >= 0) {
    unint64_t v18 = a2->__r_.__value_.__s.__size_;
  }
  else {
    unint64_t v18 = a2->__r_.__value_.__l.__size_;
  }
  unint64_t v19 = sub_10000CF44(&v46, v17, v18);
  sub_10000CF44(v19, (uint64_t)"startTime, ", 11LL);
  BOOL v20 = (void *)std::ostream::operator<<(*(double *)a1);
  sub_10000CF44(v20, (uint64_t)", ", 2LL);
  uint64_t v21 = (char)a2->__r_.__value_.__s.__size_;
  if (v21 >= 0) {
    v22 = (uint64_t)a2;
  }
  else {
    v22 = a2->__r_.__value_.__r.__words[0];
  }
  if (v21 >= 0) {
    unint64_t v23 = a2->__r_.__value_.__s.__size_;
  }
  else {
    unint64_t v23 = a2->__r_.__value_.__l.__size_;
  }
  v24 = sub_10000CF44(&v46, v22, v23);
  sub_10000CF44(v24, (uint64_t)"endTime, ", 9LL);
  v25 = (void *)std::ostream::operator<<(*(double *)(a1 + 8));
  sub_10000CF44(v25, (uint64_t)", ", 2LL);
  v26 = (char)a2->__r_.__value_.__s.__size_;
  if (v26 >= 0) {
    BOOL v27 = (uint64_t)a2;
  }
  else {
    BOOL v27 = a2->__r_.__value_.__r.__words[0];
  }
  if (v26 >= 0) {
    v28 = a2->__r_.__value_.__s.__size_;
  }
  else {
    v28 = a2->__r_.__value_.__l.__size_;
  }
  v29 = sub_10000CF44(&v46, v27, v28);
  uint64_t v30 = sub_10000CF44(v29, (uint64_t)"score, ", 7LL);
  uint64_t v31 = (void *)std::ostream::operator<<(v30, *(float *)(a1 + 16));
  sub_10000CF44(v31, (uint64_t)", ", 2LL);
  uint64_t v32 = (char)a2->__r_.__value_.__s.__size_;
  if (v32 >= 0) {
    uint64_t v33 = (uint64_t)a2;
  }
  else {
    uint64_t v33 = a2->__r_.__value_.__r.__words[0];
  }
  if (v32 >= 0) {
    uint64_t v34 = a2->__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v34 = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v35 = sub_10000CF44(&v46, v33, v34);
  unint64_t v36 = sub_10000CF44(v35, (uint64_t)"scorePreBiasCorrection, ", 24LL);
  v37 = (void *)std::ostream::operator<<(v36, *(float *)(a1 + 20));
  sub_10000CF44(v37, (uint64_t)", ", 2LL);
  uint64_t v38 = (char)a2->__r_.__value_.__s.__size_;
  if (v38 >= 0) {
    v39 = (uint64_t)a2;
  }
  else {
    v39 = a2->__r_.__value_.__r.__words[0];
  }
  if (v38 >= 0) {
    uint64_t v40 = a2->__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v40 = a2->__r_.__value_.__l.__size_;
  }
  v41 = sub_10000CF44(&v46, v39, v40);
  v42 = sub_10000CF44(v41, (uint64_t)"isTransient, ", 13LL);
  std::ostream::operator<<(v42, *(unsigned __int8 *)(a1 + 24));
  std::stringbuf::str(a3, &v47);
  std::streambuf::~streambuf(&v47);
  return std::ios::~ios(&v48);
}

    uint64_t v2 = 1;
    goto LABEL_10;
  }

  if (a2 == 4)
  {
    uint64_t v2 = 3;
    goto LABEL_10;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 24) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 24) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }
  return result;
}

  if ((v6 & 1) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v7 | 1;
    *(void *)(a1 + 16) = v10;
  }

  return a1;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 40) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, v3[17], 3u);
  if ((v3[20] & 8) != 0) {
    return PB::Writer::write(this, v3[18], 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 36) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 25), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 40) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 28), 4u);
  }
  return result;
}

  if ((v6 & 0x40) != 0)
  {
    uint64_t v12 = *(void *)(a2 + 56);
    v7 |= 0x40u;
    *(_BYTE *)(a1 + 80) = v7;
    *(void *)(a1 + 56) = v12;
    uint64_t v6 = *(_BYTE *)(a2 + 80);
    if ((v6 & 0x80) == 0)
    {
LABEL_10:
      if ((v6 & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_18;
    }
  }

  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_10;
  }

  CFStringRef v13 = *(void *)(a2 + 64);
  v7 |= 0x80u;
  *(_BYTE *)(a1 + 80) = v7;
  *(void *)(a1 + 64) = v13;
  uint64_t v6 = *(_BYTE *)(a2 + 80);
  if ((v6 & 2) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }
  return result;
}

void *sub_10005C6F8(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (j = *v11; j; j = (void *)*j)
      {
        unint64_t v13 = j[1];
        if (v13 == v7)
        {
          if (j[2] == *a2 && j[3] == a2[1]) {
            return j;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }

  j = operator new(0x28uLL);
  void *j = 0LL;
  j[1] = v7;
  *((_OWORD *)j + 1) = **a4;
  j[4] = 0LL;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }
  }

  uint64_t v21 = *(void *)a1;
  v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *j = *v22;
LABEL_44:
    void *v22 = j;
    goto LABEL_45;
  }

  void *j = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = j;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*j)
  {
    unint64_t v23 = *(void *)(*j + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }

    else
    {
      v23 &= v9 - 1;
    }

    v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }

void sub_10005C93C(_Unwind_Exception *a1)
{
}

void sub_10005C950( void *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11 = a2;
  sub_100040B88(a2, (uint64_t)&v92);
  sub_1002F0B04(buf);
  CFStringRef v14 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsPruneDistanceThreshold", 0x8000100u, kCFAllocatorNull);
  int v15 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v14, v108);
  CFRelease(v14);
  double v16 = *(double *)v108;
  BOOL v17 = *(std::__shared_weak_count **)v102;
  if (*(void *)v102)
  {
    unint64_t v18 = (unint64_t *)(*(void *)v102 + 8LL);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if (!v15) {
    double v16 = 0.075;
  }
  size_t v20 = (double *)v92;
  if (v92 == v93)
  {
    sub_101227020(buf);
LABEL_111:
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDendrogramAlgorithm.mm",  *(_DWORD *)buf,  "learn");
    __break(1u);
LABEL_112:
    dispatch_once(&qword_1019348D0, &stru_10181A260);
    goto LABEL_19;
  }

  uint64_t v21 = (double *)((char *)v92 + 8);
  if ((char *)v92 + 8 != v93)
  {
    double v22 = *(double *)v92;
    unint64_t v23 = (double *)((char *)v92 + 8);
    do
    {
      double v24 = *v23++;
      double v25 = v24;
      if (v24 < v22)
      {
        double v22 = v25;
        size_t v20 = v21;
      }

      uint64_t v21 = v23;
    }

    while (v23 != (double *)v93);
  }

  if (v16 > *v20)
  {
    sub_1012272C0(buf);
    goto LABEL_111;
  }

  if (!sub_1000EFCD4(a1))
  {
    sub_101227170(buf);
    goto LABEL_111;
  }

  sub_100094E18(a7);
  *(_DWORD *)a7 = 1;
  *(_DWORD *)(a7 + 4) = v11;
  uint64_t v11 = a7 + 16;
  if (a7 + 16 != a4)
  {
    *(_DWORD *)(a7 + 48) = *(_DWORD *)(a4 + 32);
    sub_1000193A0((void *)(a7 + 16), *(uint64_t **)(a4 + 16), 0LL);
  }

  *(_OWORD *)(a7 + 56) = *(_OWORD *)(a4 + 40);
  unint64_t v79 = a3;
  if (qword_1019348D0 != -1) {
    goto LABEL_112;
  }
LABEL_19:
  v26 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v27 = sub_1000954BC(a7);
    *(void *)buf = 68289282LL;
    *(_WORD *)v102 = 2082;
    *(void *)&v102[2] = "";
    __int16 v103 = 1026;
    BOOL v104 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:isStable, dendrogram, initialization, isStableflag:%{public}hhd}",  buf,  0x18u);
  }

  sub_1002F0B04(buf);
  CFStringRef v28 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsFingerprintDistanceFunctionType",  0x8000100u,  kCFAllocatorNull);
  int v29 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v28, v108);
  CFRelease(v28);
  int v30 = v108[0];
  uint64_t v31 = *(std::__shared_weak_count **)v102;
  if (*(void *)v102)
  {
    uint64_t v32 = (unint64_t *)(*(void *)v102 + 8LL);
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  if (v29) {
    int v34 = v30;
  }
  else {
    int v34 = 4;
  }
  sub_1000C7D20(v34, v91);
  sub_1002F0B04(buf);
  CFStringRef v35 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAdaptiveAnchorsEnable", 0x8000100u, kCFAllocatorNull);
  unint64_t v36 = a6;
  char v37 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v35, (BOOL *)v108);
  CFRelease(v35);
  int v38 = LOBYTE(v108[0]);
  v39 = *(std::__shared_weak_count **)v102;
  if (*(void *)v102)
  {
    uint64_t v40 = (unint64_t *)(*(void *)v102 + 8LL);
    do
      unint64_t v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  if (v38) {
    char v42 = 0;
  }
  else {
    char v42 = v37;
  }
  if ((v42 & 1) != 0)
  {
    char v43 = 0;
    buf[0] = 0;
    unint64_t v44 = v36;
  }

  else
  {
    sub_100019D9C((uint64_t)buf, v11);
    unint64_t v44 = v36;
    __int128 v106 = *(_OWORD *)(a7 + 56);
    char v43 = 1;
  }

  char v107 = v43;
  sub_1000412CC(v34);
  if (v107) {
    sub_100019CEC((uint64_t)buf);
  }
  sub_1002F0B04(&v87);
  CFStringRef v45 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLinkageFunction", 0x8000100u, kCFAllocatorNull);
  int v46 = sub_1002A77CC((uint64_t)v87, (uint64_t)v45, v90);
  CFRelease(v45);
  unsigned int v47 = v90[0];
  v48 = (std::__shared_weak_count *)__p;
  if (__p)
  {
    v49 = (unint64_t *)((char *)__p + 8);
    do
      unint64_t v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  if (v46) {
    unsigned int v51 = v47;
  }
  else {
    unsigned int v51 = 1;
  }
  sub_100041344(v51, buf);
  uint64_t v52 = (uint64_t)v109;
  if (!v109) {
    goto LABEL_53;
  }
  if (v109 != v108)
  {
    uint64_t v52 = (*(uint64_t (**)(void))(*v109 + 16LL))();
LABEL_53:
    v100 = (_BYTE *)v52;
    goto LABEL_55;
  }

  v100 = v99;
  (*(void (**)(void *, _BYTE *))(v108[0] + 24LL))(v108, v99);
LABEL_55:
  sub_10005D398((uint64_t *)&v87, a1, (uint64_t)v99);
  uint64_t v53 = (uint64_t)v105;
  if (!v105)
  {
LABEL_58:
    v98 = (_BYTE *)v53;
    goto LABEL_60;
  }

  if (v105 != buf)
  {
    uint64_t v53 = (*(uint64_t (**)(void))(*(void *)v105 + 16LL))();
    goto LABEL_58;
  }

  v98 = v97;
  (*(void (**)(uint8_t *, _BYTE *))(*(void *)buf + 24LL))(buf, v97);
LABEL_60:
  sub_100007E38((char **)v90, (unint64_t *)&v87, (uint64_t)v97);
  v54 = v98;
  if (v98 == v97)
  {
    uint64_t v56 = 4LL;
    v54 = v97;
    unint64_t v55 = v79;
  }

  else
  {
    unint64_t v55 = v79;
    if (!v98) {
      goto LABEL_65;
    }
    uint64_t v56 = 5LL;
  }

  (*(void (**)(void))(*v54 + 8 * v56))();
LABEL_65:
  if (__p)
  {
    v89 = __p;
    operator delete(__p);
  }

  v57 = v100;
  if (v100 == v99)
  {
    uint64_t v58 = 4LL;
    v57 = v99;
  }

  else
  {
    if (!v100) {
      goto LABEL_72;
    }
    uint64_t v58 = 5LL;
  }

  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_72:
  unint64_t v59 = vcvtmd_u64_f64(v95 * (double)v44);
  if (v94 <= v59) {
    unint64_t v60 = v59;
  }
  else {
    unint64_t v60 = v94;
  }
  v87 = 0LL;
  __p = 0LL;
  v89 = 0LL;
  unint64_t v61 = sub_100007E3C((uint64_t *)v90, &v87, &v92, v60, v55, v96);
  sub_100097E5C(v61, v86);
  v83 = 0LL;
  v84 = 0LL;
  uint64_t v85 = 0LL;
  unint64_t v62 = sub_100008260((uint64_t *)v90, &v83, 0LL, v16, 0.0);
  uint64_t v80 = 0LL;
  sub_10001E524(&v81, v62, &v80);
  v63 = v83;
  v64 = (unint64_t *)v81;
  if (v84 != v83)
  {
    unint64_t v65 = 0LL;
    unint64_t v66 = (v84 - (_BYTE *)v83) >> 3;
    if (v66 <= 1) {
      unint64_t v66 = 1LL;
    }
    do
    {
      v64[v63[v65]] = v65;
      ++v65;
    }

    while (v66 != v65);
  }

  v67 = v82;
  while (v64 != v67)
  {
    uint64_t v68 = *((void *)v87 + *v64);
    uint64_t v69 = sub_1000EFC84(a1, *v64);
    sub_1000968D4(a7, v69, (__int128 *)v86[0] + v68, a5);
    ++v64;
  }

  v70 = v87;
  if (__p != v87)
  {
    unint64_t v71 = 0LL;
    do
    {
      uint64_t v72 = v70[v71];
      v73 = v86[0];
      uint64_t v74 = sub_1000EFC84(a1, v71);
      sub_100096A04(a7, &v73[v72], (_OWORD *)(v74 + 40));
      ++v71;
      v70 = v87;
    }

    while (v71 < ((_BYTE *)__p - (_BYTE *)v87) >> 3);
  }

  if (v81)
  {
    v82 = (unint64_t *)v81;
    operator delete(v81);
  }

  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }

  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }

  if (v87)
  {
    __p = v87;
    operator delete(v87);
  }

  if (v90[0])
  {
    v90[1] = v90[0];
    operator delete(v90[0]);
  }

  v75 = v105;
  if (v105 == buf)
  {
    uint64_t v76 = 4LL;
    v75 = buf;
  }

  else
  {
    if (!v105) {
      goto LABEL_100;
    }
    uint64_t v76 = 5LL;
  }

  (*(void (**)(void))(*(void *)v75 + 8 * v76))();
LABEL_100:
  v77 = v109;
  if (v109 == v108)
  {
    uint64_t v78 = 4LL;
    v77 = v108;
  }

  else
  {
    if (!v109) {
      goto LABEL_105;
    }
    uint64_t v78 = 5LL;
  }

  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_105:
  sub_1002A5554(v91);
  if (v92)
  {
    v93 = (char *)v92;
    operator delete(v92);
  }

void sub_10005D144( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, void *a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10005D36C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t *sub_10005D398(uint64_t *a1, void *a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = a1 + 1;
  a1[3] = 0LL;
  uint64_t v7 = sub_1000EFCD4(a2);
  *a1 = v7;
  v20[0] = 0;
  sub_10001E3E4((uint64_t)v6, (unint64_t)(v7 + v7 * v7) >> 1, v20);
  if (*a1)
  {
    unint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = sub_1000EFC84(a2, v8);
      sub_10001AD40((uint64_t)v20, v9);
      __int128 v10 = *(_OWORD *)(v9 + 40);
      uint64_t v22 = *(void *)(v9 + 56);
      __int128 v21 = v10;
      sub_10001B204((uint64_t)v23, v9 + 64);
      sub_10001B494((uint64_t)v24, v9 + 104);
      __int128 v11 = *(_OWORD *)(v9 + 144);
      int v25 = *(_DWORD *)(v9 + 160);
      *(_OWORD *)&v24[40] = v11;
      BOOL v27 = 0LL;
      uint64_t v28 = 0LL;
      __p = 0LL;
      sub_10001B72C( &__p,  *(const void **)(v9 + 168),  *(void *)(v9 + 176),  (uint64_t)(*(void *)(v9 + 176) - *(void *)(v9 + 168)) >> 2);
      if (v8)
      {
        for (unint64_t i = 0LL; i != v8; ++i)
        {
          uint64_t v13 = sub_1000EFC84(a2, i);
          uint64_t v14 = *(void *)(a3 + 24);
          if (!v14) {
            sub_100008BDC();
          }
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v14 + 48LL))(v14, v20, v13);
          if (v8 <= i) {
            unint64_t v16 = i;
          }
          else {
            unint64_t v16 = v8;
          }
          if (v8 >= i) {
            unint64_t v17 = i;
          }
          else {
            unint64_t v17 = v8;
          }
          float v18 = v15;
          *(float *)(*v6 + 4 * (v17 + ((v16 + v16 * v16) >> 1))) = v18;
        }
      }

      if (__p)
      {
        BOOL v27 = __p;
        operator delete(__p);
      }

      sub_100019CEC((uint64_t)v24);
      sub_100019CEC((uint64_t)v23);
      sub_10001AA60((uint64_t)v20);
      ++v8;
    }

    while (v8 < *a1);
  }

  return a1;
}

void sub_10005D57C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 16) = v14;
    operator delete(v14);
  }

  _Unwind_Resume(exception_object);
}

void sub_10005D5E8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10005D608( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10005D61C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

BOOL sub_10005D63C()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2264), OS_LOG_TYPE_INFO);
}

uint64_t sub_10005D88C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsEnabled", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  int8x8_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_10005D948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10005E064(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, id))(**(void **)(*(void *)(a1 + 32) + 64) + 8))( *(void *)(*(void *)(a1 + 32) + 64),  0,  [*(id *)(a1 + 32) generateLocationManagerNotAvailableError]);
}

uint64_t sub_10005E09C(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A348);
  }
  BOOL v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    int v9 = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen}",  buf,  0x12u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A348);
    }
  }

  int8x8_t v3 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    *(_DWORD *)buf = 68289026;
    int v9 = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen",  "{msg%{public}.0s:fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen}",  buf,  0x12u);
  }

  [*(id *)(a1 + 32) invalidateFetchPlaceInferenceTimer];
  unint64_t v4 = objc_alloc(&OBJC_CLASS___NSError);
  NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
  BOOL v7 = @"Request to fetch place inference timed out";
  return (*(uint64_t (**)(void, void, NSError *))(**(void **)(*(void *)(a1 + 32) + 64LL) + 8LL))( *(void *)(*(void *)(a1 + 32) + 64LL),  0LL,   -[NSError initWithDomain:code:userInfo:]( v4,  "initWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  0LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL)));
}

uint64_t sub_10005E290(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v14 = a3;
  if (a3)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A348);
    }
    NSErrorUserInfoKey v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289283LL;
      __int16 v21 = 2082;
      uint64_t v22 = "";
      __int16 v23 = 2113;
      uint64_t v24 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:fetchPlaceInferenceAtCurrentLocation, failed to request place inference, we will start le eching and wait for next location update, Error Reason:%{private, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
    }
  }

  else
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v7 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v16;
      do
      {
        __int16 v10 = 0LL;
        do
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(a2);
          }
          uint64_t v11 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)v10);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181A348);
          }
          uint64_t v12 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t buf = 68289283LL;
            __int16 v21 = 2082;
            uint64_t v22 = "";
            __int16 v23 = 2113;
            uint64_t v24 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:fetchPlaceInferenceAtCurrentLocation, received Place Inference, PI:%{private, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
          }

          __int16 v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v8);
    }
  }

  return (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 64LL) + 8LL))( *(void *)(*(void *)(a1 + 32) + 64LL),  a2,  v14);
}

uint64_t sub_10005E63C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(**(void **)(a1[4] + 64LL) + 16LL))( *(void *)(a1[4] + 64LL),  0LL,  a1[5],  a1[6]);
}

uint64_t sub_10005E65C(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, CLMicroLocationLoi *, void, uint64_t))(**(void **)(*(void *)(a1 + 32)
                                                                                                + 64LL)
                                                                                  + 16))( *(void *)(*(void *)(a1 + 32) + 64),   -[CLMicroLocationLoi initWithIdentifier:andType:]( [CLMicroLocationLoi alloc],  "initWithIdentifier:andType:",  [a2 identifier],  objc_msgSend(a2, "type")),  *(void *)(a1 + 40),  a3);
}

uint64_t sub_10005E824(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 32) + 64LL) + 24LL))( *(void *)(*(void *)(a1 + 32) + 64LL),  0LL,  *(void *)(a1 + 40));
}

id sub_10005E83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void **)(v3 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10005E898;
  v6[3] = &unk_10181A2D8;
  v6[4] = a2;
  v6[5] = v3;
  v6[6] = a3;
  return [v4 async:v6];
}

uint64_t sub_10005E898(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v3 = (__CFString *)[v2 componentsJoinedByString:@","];
  }
  else {
    uint64_t v3 = &stru_1018A4B00;
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A348);
  }
  unint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) count];
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    id v11 = v5;
    __int16 v12 = 2082;
    id v13 = -[__CFString UTF8String](v3, "UTF8String");
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LOI Bridge, received LOI Ids from CLRoutineMonitor, LOI ID Count:%{public}ld, LOI L ist:%{public, location:escape_only}s}",  (uint8_t *)v7,  0x26u);
  }

  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 40) + 64LL) + 24LL))( *(void *)(*(void *)(a1 + 40) + 64LL),  *(void *)(a1 + 32),  *(void *)(a1 + 48));
}

uint64_t sub_10005EBB0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, id))(**(void **)(*(void *)(a1 + 32) + 64) + 32))( *(void *)(*(void *)(a1 + 32) + 64),  0,  [*(id *)(a1 + 32) generateLocationManagerNotAvailableError]);
}

void sub_10005EF74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10005EF94(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1[4] + 64LL) + 32LL))( *(void *)(a1[4] + 64LL),  a1[5],  a1[6]);
}

void sub_10005F420(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10005F44C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *(void *)&__int128 v18 = a2;
  NSErrorUserInfoKey v6 = sub_10005F688(a1, a2, (uint64_t)&unk_1012CF090, (_OWORD **)&v18);
  *a4 = 0LL;
  a4[1] = 0LL;
  id v7 = (std::__shared_weak_count *)v6[5];
  if (!v7 || (v8 = std::__shared_weak_count::lock(v7), (a4[1] = (uint64_t)v8) == 0) || (uint64_t v9 = v6[4], (*a4 = v9) == 0))
  {
    sub_10005F954(a3, &v18);
    sub_10005F550((uint64_t)a4, &v18);
    __int16 v10 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    if (*((void *)&v18 + 1))
    {
      id v11 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    uint64_t v14 = *a4;
    uint64_t v13 = a4[1];
    if (v13)
    {
      __int128 v15 = (unint64_t *)(v13 + 16);
      do
        unint64_t v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }

    __int128 v17 = (std::__shared_weak_count *)v6[5];
    v6[4] = v14;
    v6[5] = v13;
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
  }

void sub_10005F53C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005F550(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_10005F5B4(void *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = 0;
  a3[192] = 0;
  unint64_t v4 = sub_10004ACA4(a1, a2);
  id v5 = v4;
  if (v4)
  {
    unint64_t v6 = (std::__shared_weak_count *)v4[5];
    if (v6)
    {
      id v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        __int16 v8 = v7;
        uint64_t v9 = v5[4];
        if (v9)
        {
          sub_10003F7D8((uint64_t)a3);
          sub_10005FA6C((uint64_t)a3, v9);
          a3[192] = 1;
        }

        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }

void sub_10005F664( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10005F688(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (j = *v11; j; j = (void *)*j)
      {
        unint64_t v13 = j[1];
        if (v13 == v7)
        {
          if (j[2] == *a2 && j[3] == a2[1]) {
            return j;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }

  __int128 v15 = (void *)(a1 + 16);
  j = operator new(0x30uLL);
  void *j = 0LL;
  j[1] = v7;
  *((_OWORD *)j + 1) = **a4;
  j[4] = 0LL;
  j[5] = 0LL;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }
  }

  uint64_t v22 = *(void *)a1;
  __int16 v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *j = *v23;
LABEL_44:
    *__int16 v23 = j;
    goto LABEL_45;
  }

  void *j = *v15;
  void *v15 = j;
  *(void *)(v22 + 8 * v4) = v15;
  if (*j)
  {
    unint64_t v24 = *(void *)(*j + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }

    else
    {
      v24 &= v9 - 1;
    }

    __int16 v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }

void sub_10005F8F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_10005F90C(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __int128 v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_10005F954@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0xD8uLL);
  uint64_t result = sub_10005F9AC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10005F998(_Unwind_Exception *a1)
{
}

void *sub_10005F9AC(void *a1, uint64_t a2)
{
  a1[2] = 0LL;
  *a1 = off_10181A378;
  a1[1] = 0LL;
  sub_10001DDD8((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10005F9F8(_Unwind_Exception *a1)
{
}

void sub_10005FA0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10181A378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005FA20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10181A378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10005FA44(uint64_t a1)
{
  return sub_10001A9E0((uint64_t)&v2, a1 + 24);
}

uint64_t sub_10005FA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AD40(a1, a2);
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_10001B204(v4 + 64, a2 + 64);
  sub_10001B494(a1 + 104, a2 + 104);
  __int128 v6 = *(_OWORD *)(a2 + 144);
  int v7 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0LL;
  *(_DWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  sub_10001B72C( (void *)(a1 + 168),  *(const void **)(a2 + 168),  *(void *)(a2 + 176),  (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  return a1;
}

void sub_10005FAF8(_Unwind_Exception *a1)
{
}

uint64_t sub_10005FB2C@<X0>(void *a1@<X1>, int a2@<W2>, uint64_t a3@<X5>, _DWORD *a4@<X8>)
{
  *a4 = 2;
  a4[1] = a2;
  __int16 v8 = operator new(8uLL);
  void *v8 = &off_101819860;
  v73 = v8;
  unint64_t v9 = (double *)operator new(0x10uLL);
  sub_100042A0C(v9, 1.0);
  uint64_t v72 = v9;
  sub_100006688(&v74, (uint64_t *)&v73, (uint64_t *)&v72);
  uint64_t v10 = (uint64_t)v72;
  uint64_t v72 = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = (uint64_t)v73;
  v73 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  memset(v70, 0, sizeof(v70));
  int v71 = 1065353216;
  sub_10013AD58(a1, (uint64_t)v70, (uint64_t *)v69);
  unint64_t v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  if ((sub_10000668C(&v74, v69, (_DWORD *)&v65 + 1, &v66) & 1) == 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
    int v46 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "error in mean shift algorithm", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A3F8);
      }
      LOWORD(v62) = 0;
      unsigned int v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "error in mean shift algorithm",  &v62,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLMicroLocationModel CLMicroLocationKMeansAlgorithm::learn(const CLMicroLocationFingerprintVector &, CLM icroLocationProto::Model::ModelType, size_t, const CLMicroLocationAnchorAppearanceMap &, CLMicroLocationFingerpr intPool &, size_t) const",  "%s\n",  v47);
    }

    goto LABEL_47;
  }

  if (!HIDWORD(v65))
  {
    sub_101227578( (uint64_t)buf,  v12,  v13,  0LL,  v14,  v15,  v16,  v17,  v52,  v53,  v54,  (uint64_t)v55,  (uint64_t)v56,  v57,  (uint64_t)__p,  (uint64_t)v59,  v60,  v61,  v62,  v63,  v64,  v65,  (uint64_t)v66,  v67);
LABEL_54:
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationKMeansAlgorithm.mm",  *(_DWORD *)buf,  "learn");
    goto LABEL_57;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((v67 - (uint64_t)v66) >> 3) != HIDWORD(v65))
  {
    sub_101227410( (uint64_t)buf,  v12,  v13,  HIDWORD(v65),  v14,  v15,  v16,  v17,  v52,  v53,  v54,  (uint64_t)v55,  (uint64_t)v56,  v57,  (uint64_t)__p,  (uint64_t)v59,  v60,  v61,  v62,  v63,  v64,  v65,  (uint64_t)v66,  v67);
    goto LABEL_54;
  }

  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  if (sub_100008DFC((uint64_t)buf, (uint64_t)&v66, (uint64_t)v69, HIDWORD(v65), &v62))
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v63 - v62) >> 3) != HIDWORD(v65))
    {
      sub_10122783C( HIDWORD(v65),  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v52,  v53,  v54,  (uint64_t)v55,  (uint64_t)v56,  v57,  (uint64_t)__p,  (uint64_t)v59,  v60,  v61,  v62,  v63,  v64,  v65,  (uint64_t)v66,  v67);
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationKMeansAlgorithm.mm",  58,  "learn");
      goto LABEL_57;
    }

    sub_100097E5C(HIDWORD(v65), &__p);
    if ((sub_100060334() & 1) != 0)
    {
      sub_100137504((uint64_t *)buf);
      sub_10013B064((uint64_t)&v62, (uint64_t)v70, (uint64_t *)&v55);
      int v25 = v55;
      if (v56 != v55)
      {
        uint64_t v26 = 0LL;
        uint64_t v27 = 0LL;
        unint64_t v28 = 0LL;
        do
        {
          sub_1000968D4((uint64_t)a4, (uint64_t)&v25[v27], (__int128 *)((char *)__p + v26), a3);
          ++v28;
          int v25 = v55;
          v27 += 24LL;
          v26 += 16LL;
        }

        while (v28 < 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 6));
      }

      uint64_t v76 = &v55;
      sub_10001D978((void ***)&v76);
      sub_100019CEC((uint64_t)&v78);
    }

    for (unint64_t i = 0LL; ; ++i)
    {
      unint64_t v30 = sub_1000EFCD4(a1);
      if (i >= v30) {
        break;
      }
      unint64_t v38 = HIDWORD(v65);
      if (!HIDWORD(v65)) {
        goto LABEL_56;
      }
      uint64_t v39 = 0LL;
      unint64_t v40 = 0LL;
      double v41 = INFINITY;
      do
      {
        unint64_t v55 = &off_1018187B0;
        double v42 = sqrt(sub_10000947C((uint64_t)&v55, (uint64_t *)&v69[0][3 * i], (void *)(v62 + v39)));
        if (v42 < v41)
        {
          double v41 = v42;
          unint64_t v38 = v40;
        }

        ++v40;
        v39 += 24LL;
      }

      while (v40 < HIDWORD(v65));
      if (v38 >= HIDWORD(v65))
      {
LABEL_56:
        sub_1012276E0( v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v52,  v53,  v54,  (uint64_t)v55,  (uint64_t)v56,  v57,  (uint64_t)__p,  (uint64_t)v59,  v60,  v61,  v62,  v63,  v64,  v65,  (uint64_t)v66,  v67);
        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationKMeansAlgorithm.mm",  82,  "learn");
LABEL_57:
        __break(1u);
      }

      char v43 = __p;
      uint64_t v44 = sub_1000EFC84(a1, i);
      sub_100096A04((uint64_t)a4, &v43[v38], (_OWORD *)(v44 + 40));
      if ((sub_100060334() & 1) == 0)
      {
        uint64_t v45 = sub_1000EFC84(a1, i);
        sub_1000968D4((uint64_t)a4, v45, (__int128 *)__p + v38, a3);
      }
    }

    if (__p)
    {
      unint64_t v59 = __p;
      operator delete(__p);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
    v48 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "error in kmeans algorithm", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A3F8);
      }
      LOWORD(__p) = 0;
      v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "error in kmeans algorithm",  &__p,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLMicroLocationModel CLMicroLocationKMeansAlgorithm::learn(const CLMicroLocationFingerprintVector &, CLM icroLocationProto::Model::ModelType, size_t, const CLMicroLocationAnchorAppearanceMap &, CLMicroLocationFingerpr intPool &, size_t) const",  "%s\n",  v49);
    }
  }

  *(void *)uint64_t buf = &v62;
  sub_100006BC8((void ***)buf);
LABEL_47:
  *(void *)uint64_t buf = &v66;
  sub_100006BC8((void ***)buf);
  *(void *)uint64_t buf = v69;
  sub_100006BC8((void ***)buf);
  sub_10001AA60((uint64_t)v70);
  uint64_t v50 = v75;
  uint64_t v75 = 0LL;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
  }
  uint64_t result = v74;
  uint64_t v74 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1000601DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char *a39)
{
  a39 = &a19;
  sub_100006BC8((void ***)&a39);
  a39 = &a23;
  sub_100006BC8((void ***)&a39);
  a39 = &a26;
  sub_100006BC8((void ***)&a39);
  sub_10001AA60((uint64_t)&a29);
  uint64_t v41 = a37;
  a37 = 0LL;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
  }
  uint64_t v42 = a36;
  a36 = 0LL;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
  }
  sub_1000173AC(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_100060334()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsUseKMeansClusterCenters", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_1000603F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100060408(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

  ;
}

void sub_100060440(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  else {
    size_t v6 = (size_t)a1[1];
  }
  p_p = &__p;
  sub_1000392EC((uint64_t)&__p, v6 + 2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    else {
      uint64_t v8 = *a1;
    }
    memmove(p_p, v8, v6);
  }

  strcpy((char *)p_p + v6, "--");
  unint64_t v9 = (char *)operator new(0x28uLL);
  *(void *)(v9 + 29) = 0LL;
  *(_OWORD *)unint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  sub_10000AE6C(a2, v9);
  uint64_t v10 = std::string::append(&__p, v9, 0x24uLL);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  operator delete(v9);
}

void sub_100060548( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100060578(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  int64_t size = a1->__r_.__value_.__s.__size_;
  if ((size & 0x80u) == 0LL) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v18 & 0x80u) == 0) {
    size_t v6 = v17;
  }
  else {
    size_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    int64_t v7 = v18;
  }
  else {
    int64_t v7 = (int64_t)v17[1];
  }
  if (v7)
  {
    if ((size & 0x80u) != 0LL) {
      int64_t size = a1->__r_.__value_.__l.__size_;
    }
    if (size >= v7)
    {
      unint64_t v9 = (char *)v5 + size;
      int v10 = *(char *)v6;
      uint64_t v11 = v5;
      do
      {
        int64_t v12 = size - v7;
        if (v12 == -1) {
          break;
        }
        uint64_t v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13) {
          break;
        }
        uint64_t v14 = v13;
        if (!memcmp(v13, v6, v7))
        {
          if (v14 != v9)
          {
            int64_t v8 = v14 - (char *)v5;
          }

          break;
        }

        uint64_t v11 = (const std::string *)(v14 + 1);
        int64_t size = v9 - (v14 + 1);
      }

      while (size >= v7);
    }

    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }

  else
  {
    int64_t v8 = 0LL;
LABEL_16:
    std::string::basic_string(&v20, a1, v8 + v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
    std::string __p = v20;
    sub_10010147C((uint64_t)&__p, (uint64_t)&v20);
    if (v20.__r_.__value_.__s.__data_[16])
    {
      *a2 = __p;
      a2[1].__r_.__value_.__s.__data_[0] = 1;
    }

    else
    {
      int v15 = (char)__p.__r_.__value_.__s.__size_;
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2[1].__r_.__value_.__s.__data_[0] = 0;
      if (v15 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }

void sub_100060734( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100060770(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = __p;
  sub_1010DDBC0(__p, "--");
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  int64_t size = a1->__r_.__value_.__s.__size_;
  if ((size & 0x80u) == 0LL) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v17 & 0x80u) == 0)
  {
    int64_t v7 = v17;
  }

  else
  {
    uint64_t v4 = (void **)__p[0];
    int64_t v7 = (int64_t)__p[1];
  }

  if (v7)
  {
    if ((size & 0x80u) != 0LL) {
      int64_t size = a1->__r_.__value_.__l.__size_;
    }
    if (size >= v7)
    {
      unint64_t v9 = (char *)v6 + size;
      int v10 = *(char *)v4;
      uint64_t v11 = v6;
      do
      {
        int64_t v12 = size - v7;
        if (v12 == -1) {
          break;
        }
        uint64_t v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13) {
          break;
        }
        uint64_t v14 = v13;
        if (!memcmp(v13, v4, v7))
        {
          if (v14 != v9)
          {
            std::string::size_type v8 = v14 - (char *)v6;
          }

          break;
        }

        uint64_t v11 = (const std::string *)(v14 + 1);
        int64_t size = v9 - (v14 + 1);
      }

      while (size >= v7);
    }

    std::string::operator=(a2, a1);
  }

  else
  {
    std::string::size_type v8 = 0LL;
LABEL_13:
    std::string::basic_string(&v15, a1, 0LL, v8, (std::allocator<char> *)&v18);
    *a2 = v15;
  }

void sub_1000608C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000608F4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v37 = a3;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A418);
  }
  unint64_t v5 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (uint64_t)(a2[1] - *a2) >> 4;
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = v6;
    *(_WORD *)&buf[28] = 2050;
    *(void *)&buf[30] = 0xEEEEEEEEEEEEEEEFLL * (v44 - v43);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, recording entries found for trigger uuids, NumTriggerUUID:%{public}lu, NumEntries:%{public}lu}",  buf,  0x26u);
  }

  std::string::size_type v8 = v43;
  int64_t v7 = v44;
  if (v43 != v44)
  {
    while (1)
    {
      if (!*((_BYTE *)v8 + 232))
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181A418);
        }
        unsigned __int8 v17 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Error: recording entry does not have trigger UUID",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181A418);
          }
          LOWORD(v51[0]) = 0;
          LODWORD(v36) = 2;
          char v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error: recording entry does not have trigger UUID",  v51,  v36);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::unordered_map<boost::uuids::uuid, CLMicroLocationFingerprint> CLMicroLocationClientUtils::requireFinger printsForTriggerUuids(CLMicroLocationDatabase &, const std::vector<boost::uuids::uuid> &)",  "%s\n",  v18);
          if (v18 != buf) {
            free(v18);
          }
        }

        goto LABEL_69;
      }

      v51[0] = &off_101818E08;
      v51[1] = sub_100137504;
      uint8_t v52 = v51;
      char v53 = 1;
      if (*((_DWORD *)v8 + 18) == 1) {
        sub_100061678(v51, (uint64_t)sub_100138214);
      }
      sub_1002F0B04(buf);
      CFStringRef v9 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsFingerprintDataSource", 0x8000100u, kCFAllocatorNull);
      int v10 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v9, &v39);
      CFRelease(v9);
      unsigned int v11 = v39;
      int64_t v12 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v13 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      if (v10) {
        unsigned int v15 = v11;
      }
      else {
        unsigned int v15 = 1;
      }
      v49[0] = &off_10181A448;
      uint64_t v50 = v49;
      if (!v53) {
        sub_100036CD8();
      }
      uint64_t v16 = (uint64_t)v52;
      if (!v52) {
        goto LABEL_21;
      }
      if (v52 != v51) {
        break;
      }
      v48 = v47;
      (*(void (**)(uint64_t, void *))(v51[0] + 24LL))((uint64_t)v51, v47);
LABEL_32:
      __int128 v19 = *v8;
      *(void *)&buf[16] = *((void *)v8 + 2);
      *(_OWORD *)uint64_t buf = v19;
      if (*((char *)v8 + 47) < 0)
      {
        sub_1010DD48C(&buf[24], *((void **)v8 + 3), *((void *)v8 + 4));
      }

      else
      {
        __int128 v20 = *(__int128 *)((char *)v8 + 24);
        uint64_t v55 = *((void *)v8 + 5);
        *(_OWORD *)&buf[24] = v20;
      }

      __int128 v21 = v8[3];
      *(_OWORD *)((char *)v56 + 12) = *(__int128 *)((char *)v8 + 60);
      v56[0] = v21;
      sub_1000865CC(v57);
      __int128 v22 = *(__int128 *)((char *)v8 + 216);
      char v62 = *((_BYTE *)v8 + 232);
      __int128 v61 = v22;
      __int128 v40 = 0uLL;
      uint64_t v39 = 0LL;
      uint64_t v45 = &v39;
      char v46 = 0;
      uint64_t v39 = operator new(0xF0uLL);
      *(void *)&__int128 v40 = v39;
      *((void *)&v40 + 1) = (char *)v39 + 240;
      *(void *)&__int128 v40 = sub_100061924((uint64_t)&v40 + 8, (__int128 *)buf, v63, (uint64_t)v39);
      sub_1000E2848(v15, (uint64_t)v49, (uint64_t)v47, (uint64_t)&v39, a1, &v41);
      sub_1000EFC74(&v42, &v41);
      uint64_t v23 = v41;
      uint64_t v41 = 0LL;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
      }
      uint64_t v45 = &v39;
      sub_10001A350(&v45);
      sub_100086708(v57);
      if (SHIBYTE(v55) < 0) {
        operator delete(*(void **)&buf[24]);
      }
      uint64_t v24 = v48;
      if (v48 == v47)
      {
        uint64_t v24 = v47;
        uint64_t v25 = 4LL;
      }

      else
      {
        if (!v48) {
          goto LABEL_44;
        }
        uint64_t v25 = 5LL;
      }

      (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_44:
      uint64_t v26 = v50;
      if (v50 == v49)
      {
        uint64_t v26 = v49;
        uint64_t v27 = 4LL;
      }

      else
      {
        if (!v50) {
          goto LABEL_49;
        }
        uint64_t v27 = 5LL;
      }

      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_49:
      if (sub_1000EFCD4(&v42) == 1)
      {
        uint64_t v39 = (void *)sub_1000EFD0C((uint64_t)&v42);
        *(void *)&__int128 v40 = v28;
        uint64_t v29 = sub_1000EFC50(&v39);
        sub_1000614E4((uint64_t)buf, (__int128 *)((char *)v8 + 216), v29);
        sub_100061A50(v37, buf, (uint64_t)buf);
        if (__p)
        {
          uint64_t v60 = __p;
          operator delete(__p);
        }

        sub_100019CEC((uint64_t)&v58);
        sub_100019CEC((uint64_t)v57);
        sub_10001AA60((uint64_t)&buf[16]);
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181A418);
        }
        unint64_t v30 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = operator new(0x28uLL);
          uint64_t v39 = v31;
          __int128 v40 = xmmword_1012C8460;
          *uint64_t v31 = 0u;
          v31[1] = 0u;
          *(void *)((char *)v31 + 29) = 0LL;
          sub_10000AE6C((uint64_t)v8 + 216, v31);
          uint64_t v32 = v40 >= 0 ? &v39 : (void **)v39;
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, no fingerprint create d for TriggerUUID, TriggerUUID:%{public, location:escape_only}s}",  buf,  0x1Cu);
          if (SHIBYTE(v40) < 0) {
            operator delete(v39);
          }
        }
      }

      uint64_t v33 = v42;
      uint64_t v42 = 0LL;
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
      }
      if (!v53) {
        goto LABEL_69;
      }
      uint64_t v34 = v52;
      if (v52 == v51)
      {
        uint64_t v34 = v51;
        uint64_t v35 = 4LL;
        goto LABEL_68;
      }

      if (v52)
      {
        uint64_t v35 = 5LL;
LABEL_68:
        (*(void (**)(void))(*v34 + 8 * v35))();
      }

LABEL_69:
      v8 += 15;
      if (v8 == v7) {
        goto LABEL_70;
      }
    }

    uint64_t v16 = (*(uint64_t (**)(void))(*v52 + 16LL))();
LABEL_21:
    v48 = (void *)v16;
    goto LABEL_32;
  }

  *(_DWORD *)(a1 + 128) |= 0x400u;
  uint64_t v25 = *(void **)(a1 + 88);
  if (!v25)
  {
    uint64_t v25 = operator new(0x30uLL);
    uint64_t *v25 = off_10181AF90;
    v25[1] = 0x10000000DLL;
    v25[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v25[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v25[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v25[5] = 0LL;
    *(void *)(a1 + 88) = v25;
  }

  uint64_t v26 = *(void *)(a2 + 88);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_1019A0980 + 88);
  }
  sub_100071FE0((uint64_t)v25, v26);
  uint64_t v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 0x800) == 0)
  {
LABEL_55:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_75;
  }

  uint64_t v27 = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 228) |= 0x800u;
  *(void *)(a1 + 72) = v27;
  unint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x1000) == 0)
  {
LABEL_37:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_71;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_71;
  }

  uint64_t v29 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 148) |= 0x40000u;
  *(_DWORD *)(a1 + 116) = v29;
  unint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x80000) == 0)
  {
LABEL_62:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_71;
  }

    unint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_type);
    goto LABEL_70;
  }

  if (type > 11)
  {
    if (type > 31)
    {
      if (type == 32)
      {
        unint64_t v5 = @"kTypeWalkingSlow";
        goto LABEL_70;
      }

      if (type == 64)
      {
        unint64_t v5 = @"kTypeRunning";
        goto LABEL_70;
      }
    }

    else
    {
      if (type == 12)
      {
        unint64_t v5 = @"kTypeSemiStationary";
        goto LABEL_70;
      }

      if (type == 16)
      {
        unint64_t v5 = @"kTypeWalking";
        goto LABEL_70;
      }
    }

    goto LABEL_69;
  }

  unint64_t v5 = @"kTypeUnknown";
  switch(type)
  {
    case 0:
      break;
    case 1:
      unint64_t v5 = @"kTypeFrozen";
      break;
    case 2:
      unint64_t v5 = @"kTypeStatic";
      break;
    case 4:
      unint64_t v5 = @"kTypeMoving";
      break;
    default:
      goto LABEL_69;
  }

  uint64_t v31 = *(_DWORD *)(a2 + 92);
  a1[37] |= 0x200000u;
  a1[23] = v31;
  unint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x400000) == 0)
  {
LABEL_31:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }

        *a12 = 0;
LABEL_70:
        ++v39;
        ++v38;
        unint64_t v66 = v83 + 1;
        if (v83 + 1 == v86) {
          unint64_t v66 = &v89[v83 != v89];
        }
        v83 = v66;
        ++v40;
        uint64_t v63 = v42++ == v76;
        if (v63) {
          goto LABEL_79;
        }
      }
    }
  }

  return 1LL;
}

  int64_t v12 = v46;
LABEL_70:
  *(_OWORD *)int64_t v12 = v79;
  int v71 = v80;
  uint64_t v72 = v81;
  v73 = v83;
  *(_OWORD *)(v12 + 48) = v82;
  *(_OWORD *)(v12 + 64) = v73;
  *(_OWORD *)(v12 + 16) = v71;
  *(_OWORD *)(v12 + 32) = v72;
  uint64_t v74 = v84;
  uint64_t v75 = v85;
  uint64_t v76 = v87;
  *(_OWORD *)(v12 + 112) = v86;
  *(_OWORD *)(v12 + 128) = v76;
  *(_OWORD *)(v12 + 80) = v74;
  *(_OWORD *)(v12 + 96) = v75;
  uint64_t result = v88;
  v77 = v89;
  uint64_t v78 = v90;
  *(void *)(v12 + 192) = v91;
  *(_OWORD *)(v12 + 160) = v77;
  *(_OWORD *)(v12 + 176) = v78;
  *(__n128 *)(v12 + 144) = result;
  return result;
}

  int64_t v12 = v46;
LABEL_70:
  *(_OWORD *)int64_t v12 = v79;
  int v71 = v80;
  uint64_t v72 = v81;
  v73 = v83;
  *(_OWORD *)(v12 + 48) = v82;
  *(_OWORD *)(v12 + 64) = v73;
  *(_OWORD *)(v12 + 16) = v71;
  *(_OWORD *)(v12 + 32) = v72;
  uint64_t v74 = v84;
  uint64_t v75 = v85;
  uint64_t v76 = v87;
  *(_OWORD *)(v12 + 112) = v86;
  *(_OWORD *)(v12 + 128) = v76;
  *(_OWORD *)(v12 + 80) = v74;
  *(_OWORD *)(v12 + 96) = v75;
  uint64_t result = v88;
  v77 = v89;
  uint64_t v78 = v90;
  *(void *)(v12 + 192) = v91;
  *(_OWORD *)(v12 + 160) = v77;
  *(_OWORD *)(v12 + 176) = v78;
  *(__n128 *)(v12 + 144) = result;
  return result;
}

          CFStringRef v9 = v46 + 2;
          *a3 = v47;
          a3[1] = v46 + 2;
          a3[2] = (double *)&v39[16 * v38];
          if (v34) {
            operator delete(v34);
          }
          goto LABEL_71;
        }

        *unsigned __int8 v17 = v42;
        v17[1] = a4;
      }

      CFStringRef v9 = v17 + 2;
LABEL_71:
      a3[1] = v9;
LABEL_72:
      v4 += 3;
    }

    while (v4 != v5);
  }

  *(_DWORD *)(a1 + 60) = v5;
  return v5;
}

            if (SHIBYTE(v78) < 0) {
              operator delete((void *)v77);
            }
          }

          if (++v24 == 19)
          {
            uint64_t v23 = *v74;
            break;
          }
        }
      }

      if (v23 == 2)
      {
        char v43 = -20;
        uint64_t v44 = &OBJC_METACLASS___CLPrivacyManager.vtable;
        v73 = 67109634LL;
        do
        {
          for (j = -20; j != 21; ++j)
          {
            if (!(j | v43)) {
              continue;
            }
            std::string __p = v80;
            if (SHIBYTE(v82) < 0)
            {
              sub_1010DD48C(&v77, (void *)v81, *((unint64_t *)&v81 + 1));
            }

            else
            {
              v77 = v81;
              uint64_t v78 = v82;
            }

            char v46 = *(double *)(a2 + 160);
            unsigned int v47 = *(double *)(a2 + 152);
            *(float *)&char v46 = v46;
            sub_1008AE784((uint64_t)&__p, v43, j, v47, *(float32x2_t *)&v46);
            if (sub_1008AD1E0((unsigned int *)&__p))
            {
              v48 = sub_1006025CC(a2 + 184, (unsigned int *)&__p);
              v49 = v48;
              uint64_t v50 = (*(double (**)(void))(**(void **)(v4 + 464) + 56LL))(*(void *)(v4 + 464));
              unsigned int v51 = sub_100DD963C(v49, v50);
              uint8_t v52 = (os_log_s *)qword_101934838;
              if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
              {
                char v53 = *v74;
                sub_1008AD840((unsigned int *)&__p, &v79);
                uint64_t v54 = &v79;
                if ((v79.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v54 = (std::stringbuf::string_type *)v79.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)uint64_t buf = v73;
                *(_DWORD *)v84 = v51;
                *(_WORD *)&v84[4] = 1024;
                *(_DWORD *)&v84[6] = (__int16)v53;
                uint64_t v85 = 2080;
                v86 = v54;
                _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "TILE: updating HRSE neighbor mtime, %d, type, %d, tileid, %s",  buf,  0x18u);
                uint64_t v44 = &OBJC_METACLASS___CLPrivacyManager.vtable;
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_111;
              }
              bzero(buf, 0x65CuLL);
              uint64_t v55 = qword_101934838;
              uint64_t v56 = *v74;
              sub_1008AD840((unsigned int *)&__p, &v75);
              uint64_t v57 = &v75;
              if ((v75.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v57 = (std::stringbuf::string_type *)v75.__r_.__value_.__r.__words[0];
              }
              v79.__r_.__value_.__r.__words[0] = __PAIR64__(v51, v73);
              LOWORD(v79.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v79.__r_.__value_.__r.__words[1] + 2) = (__int16)v56;
              HIWORD(v79.__r_.__value_.__r.__words[1]) = 2080;
              v79.__r_.__value_.__l.__cap_ = (std::string::size_type)v57;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v55,  2LL,  "TILE: updating HRSE neighbor mtime, %d, type, %d, tileid, %s",  &v79,  24,  (const char *)v73);
              unint64_t v59 = v58;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke",  "%s\n",  v59);
              uint64_t v44 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
            }

            else
            {
              uint64_t v60 = (os_log_s *)qword_101934838;
              if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "Invalid HRSE neighbor tile id!",  buf,  2u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_111;
              }
              bzero(buf, 0x65CuLL);
              LOWORD(v79.__r_.__value_.__l.__data_) = 0;
              LODWORD(v70) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "Invalid HRSE neighbor tile id!",  &v79,  v70);
              unint64_t v59 = (char *)v61;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke",  "%s\n",  v61);
            }

  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
}

  *(_DWORD *)(a1 + 80) = v4;
  return v4;
}

  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
}

  unsigned int v11 = *(_BYTE *)(a2 + 155);
  v3 |= 0x1000000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 155) = v11;
  BOOL v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 24));
  unint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }

  uint64_t v27 = *(void *)(a2 + 72);
  v5 |= 0x100uLL;
  void *v2 = v5;
  *(void *)(a1 + 72) = v27;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x200) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "hkWorkoutId", *(void *)(a1 + 176));
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x40u);
  unint64_t v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }

  uint64_t v25 = *(_DWORD *)(a2 + 120);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 120) = v25;
  BOOL v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_36:
    if ((v2 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "sharpPeaksDelaySpread", *(float *)(a1 + 128));
  unint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x20u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "gatingOnCharger", *(_BYTE *)(a1 + 393));
  unsigned int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 288), 0x17u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_71;
  }

  std::string::size_type v8 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(a1 + 216) = v3;
  *(void *)(a1 + 24) = v8;
  BOOL v2 = *(void *)(a2 + 216);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 92));
  unint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x13u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 210), 0x1Du);
  unint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000) == 0)
  {
LABEL_38:
    if ((v14 & 0x200) == 0) {
      goto LABEL_39;
    }
    goto LABEL_71;
  }

  int64_t v12 = *(_BYTE *)(a2 + 168);
  v3 |= 0x200000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 168) = v12;
  BOOL v2 = *(void *)(a2 + 172);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "kMaxEnergyRO", *(float *)(a1 + 76));
  unint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 157), 0x6Du);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_24:
    if ((v4 & 0x40000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_71;
  }

  int64_t v12 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 96) = v12;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "stepBegin", *(float *)(a1 + 124));
  unint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_32:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }

  uint64_t v36 = *(void *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 16) = v36;
  if ((*(void *)(a2 + 164) & 0x800) != 0) {
    goto LABEL_70;
  }
  return result;
}

  unint64_t v30 = *(_DWORD *)(a2 + 116);
  v3 |= 0x8000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 116) = v30;
  BOOL v2 = *(void *)(a2 + 212);
  if ((v2 & 0x4000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "rolloverMaxChaos", *(float *)(a1 + 172));
  unint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "hkStartTime", *(double *)(a1 + 80));
  if ((*(_DWORD *)(a1 + 244) & 0x400000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "isHistoricalCompute", *(_BYTE *)(a1 + 238));
LABEL_20:
  std::string::size_type v8 = *(void *)(a1 + 88);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))( v8,  this,  "modelBalanceFeatures");
  }
  CFStringRef v9 = *(void *)(a1 + 96);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))( v9,  this,  "modelContinuousWalkingFeatures");
  }
  int v10 = *(void *)(a1 + 104);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32LL))( v10,  this,  "modelContinuousWalkingResult");
  }
  unsigned int v11 = *(void *)(a1 + 112);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32LL))( v11,  this,  "modelGaitBaselineFeatures");
  }
  int64_t v12 = *(void *)(a1 + 120);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32LL))( v12,  this,  "modelGaitBaselineResult");
  }
  uint64_t v13 = *(void *)(a1 + 128);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32LL))( v13,  this,  "modelHarmonicFeatures");
  }
  unint64_t v14 = *(void *)(a1 + 136);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32LL))( v14,  this,  "modelHarmonicResult");
  }
  unsigned int v15 = *(void *)(a1 + 144);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32LL))( v15,  this,  "modelTemporalDispersionFeatures");
  }
  uint64_t v16 = *(void *)(a1 + 152);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32LL))( v16,  this,  "modelTemporalDispersionResult");
  }
  unsigned __int8 v17 = *(void *)(a1 + 160);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32LL))( v17,  this,  "modelTemporalEntropyFeatures");
  }
  char v18 = *(void *)(a1 + 168);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32LL))( v18,  this,  "modelTemporalEntropyResult");
  }
  __int128 v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "nextClassificationTime", *(double *)(a1 + 176));
    __int128 v19 = *(_DWORD *)(a1 + 244);
    if ((v19 & 0x400) == 0)
    {
LABEL_44:
      if ((v19 & 0x10000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_73;
    }
  }

  else if ((v19 & 0x400) == 0)
  {
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 184));
  __int128 v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x10000) == 0)
  {
LABEL_45:
    if ((v19 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_74;
  }

  __int128 v19 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 80) = v19;
  BOOL v2 = *(void *)(a2 + 184);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular", *(_DWORD *)(a1 + 92));
  unint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x17u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000000000LL) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }

  uint64_t v37 = *(_DWORD *)(a2 + 120);
  v5 |= 0x100000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 120) = v37;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x80000) != 0) {
    goto LABEL_70;
  }
LABEL_29:
  if ((v4 & 0x40000) != 0)
  {
LABEL_30:
    std::string::size_type v8 = *(_DWORD *)(a2 + 112);
    *(void *)(a1 + 192) = v5 | 0x40000;
    *(_DWORD *)(a1 + 112) = v8;
  }

  PB::TextFormatter::format(this, "typeYouth", *(_DWORD *)(a1 + 152));
  unint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_71;
  }

  __int128 v20 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 44) = v20;
  BOOL v2 = *(void *)(a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "horizontalRotationSimilarityBaseline", *(float *)(a1 + 72));
  unint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0x12u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "useRelaxedQuiescenceBounds", *(_BYTE *)(a1 + 161));
  uint64_t v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_38;
    }
LABEL_71:
    PB::TextFormatter::format(this, "vHat_Y", *(float *)(a1 + 144));
    if ((*(_DWORD *)(a1 + 164) & 0x200000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_39;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0x1Fu);
  unsigned int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_71;
  }

  uint64_t result = *(double *)(a2 + 168);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 168) = result;
  BOOL v2 = *(void *)(a2 + 224);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_71;
  }

  PB::TextFormatter::format(this, "verticalOscillationGradeType", *(double *)(a1 + 176));
  unint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x400000000LL) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
LABEL_71:
    PB::TextFormatter::format(this, "verticalOscillationReportingStatus", *(_DWORD *)(a1 + 212));
    if ((*(void *)(a1 + 224) & 0x400000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x21u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x400) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 88), 0x23u);
  }

LABEL_70:
  *(void *)uint64_t buf = &v43;
  sub_10001A350((void ***)buf);
}

  __int128 v19 = *(void *)(v5 + 104);
  if (!v19) {
    __int128 v19 = *(void *)(qword_1019A0978 + 104);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v19,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }

  if ((v54 & 0xFF00) == 0) {
    goto LABEL_78;
  }
  if ((v54 & 0x100) != 0)
  {
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 292) |= 0x100u;
    *(double *)(a1 + 64) = result;
    uint64_t v54 = *(_DWORD *)(a2 + 292);
    if ((v54 & 0x200) == 0)
    {
LABEL_73:
      if ((v54 & 0x400) == 0) {
        goto LABEL_74;
      }
      goto LABEL_87;
    }
  }

  else if ((v54 & 0x200) == 0)
  {
    goto LABEL_73;
  }

  uint64_t result = *(double *)(a2 + 72);
  *(_DWORD *)(a1 + 292) |= 0x200u;
  *(double *)(a1 + 72) = result;
  uint64_t v54 = *(_DWORD *)(a2 + 292);
  if ((v54 & 0x400) == 0)
  {
LABEL_74:
    if ((v54 & 0x800) == 0) {
      goto LABEL_75;
    }
    goto LABEL_88;
  }

  uint64_t v28 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 228) |= 0x1000u;
  *(void *)(a1 + 80) = v28;
  unint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x2000) == 0)
  {
LABEL_38:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_72;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 112),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_72;
  }

  unint64_t v30 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 148) |= 0x80000u;
  *(_DWORD *)(a1 + 120) = v30;
  unint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x100000) == 0)
  {
LABEL_63:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_72;
  }

  [v3 setObject:v5 forKey:@"type"];
  confidence = self->_confidence;
  if (confidence >= 3) {
    int64_t v7 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_confidence);
  }
  else {
    int64_t v7 = (NSString *)*(&off_10182C3F0 + confidence);
  }
  [v3 setObject:v7 forKey:@"confidence"];
  has = (char)self->_has;
  if ((has & 4) != 0)
  {
    mounted = self->_mounted;
    if (mounted)
    {
      if (mounted == 1) {
        unsigned int v11 = @"kMounted";
      }
      else {
        unsigned int v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_mounted);
      }
    }

    else
    {
      unsigned int v11 = @"kNotMounted";
    }

    [v3 setObject:v11 forKey:@"mounted"];
    has = (char)self->_has;
    if ((has & 8) == 0)
    {
LABEL_75:
      if ((has & 0x10) == 0) {
        goto LABEL_76;
      }
      goto LABEL_92;
    }
  }

  else if ((*(_BYTE *)&self->_has & 8) == 0)
  {
    goto LABEL_75;
  }

  mountedConfidence = self->_mountedConfidence;
  if (mountedConfidence >= 3) {
    uint64_t v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_mountedConfidence);
  }
  else {
    uint64_t v13 = (NSString *)*(&off_10182C3F0 + mountedConfidence);
  }
  [v3 setObject:v13 forKey:@"mountedConfidence"];
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_76:
    if ((has & 0x40) == 0) {
      goto LABEL_77;
    }
    goto LABEL_96;
  }

  (*(void (**)(uint64_t))(*(void *)v43 + 24LL))(v43);
  return v9;
}

  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = a6;
  return a1;
}

  operator delete(*(void **)buf);
  if (!v35) {
    goto LABEL_82;
  }
LABEL_71:
  uint64_t v37 = HIBYTE(v56);
  if (v56 < 0) {
    uint64_t v37 = __n;
  }
  if (v37 && v10 && v12)
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101835C50);
    }
    unint64_t v38 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = (char *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v60 = 2082;
      *(void *)&v60[2] = "";
      __int128 v61 = 2082;
      char v62 = v39;
      uint64_t v63 = 2081;
      uint64_t v64 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:The CL version has not changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair, so not creating table, path:%{public, location:escape_only}s, table:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    goto LABEL_90;
  }

  uint64_t v6 = 0LL;
LABEL_71:
  objc_autoreleasePoolPop(*(void **)&v12);
LABEL_72:
  return v6;
}

  uint64_t v68 = *(void *)(a1 + 192);
  if (v68 >= 0x101)
  {
    uint64_t v69 = (int64x2_t *)(a1 + 328);
    do
    {
      if (!*(void *)(a1 + 336)) {
        break;
      }
      v70 = *(void *)(a1 + 304);
      if (*(void *)(a1 + 312) == v70) {
        int v71 = 0LL;
      }
      else {
        int v71 = *(void *)(v70 + 8 * (v69->i64[0] / 0x22uLL)) + 120 * (v69->i64[0] % 0x22uLL);
      }
      uint64_t v72 = *(void *)(a1 + 184);
      v73 = v72 / 0xAA;
      uint64_t v74 = *(void *)(a1 + 160);
      if (*(void *)(a1 + 168) == v74)
      {
        uint64_t v78 = 0LL;
        *(void *)uint64_t buf = v74 + 8 * (v72 / 0xAA);
        *(void *)&uint8_t buf[8] = 0LL;
        v77 = (void *)(v74 + 8 * ((v72 + v68) / 0xAA));
      }

      else
      {
        uint64_t v75 = *(void *)(v74 + 8 * v73);
        *(void *)uint64_t buf = v74 + 8 * v73;
        *(void *)&uint8_t buf[8] = v75 + 24 * (v72 % 0xAA);
        uint64_t v76 = v72 + v68;
        v77 = (void *)(v74 + 8 * (v76 / 0xAA));
        uint64_t v78 = *v77 + 24 * (v76 % 0xAA);
      }

      v423[0].n128_u64[0] = (unint64_t)v77;
      v423[0].n128_u64[1] = v78;
      sub_1005A2820((uint64_t)buf, (uint64_t)v423, a1 + 472, (uint64_t)v418);
      unint64_t v79 = v4[4];
      uint64_t v80 = v79 / 0x49;
      v81 = v4[1];
      if (v4[2] == v81)
      {
        v82 = 0LL;
        uint64_t v85 = 0LL;
        v84 = (void *)(v81
                       + (((unint64_t)(((*v8 + v79) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8LL));
      }

      else
      {
        v82 = (float *)(*(void *)(v81 + 8 * (v79 / 0x49)) + 56 * (v79 % 0x49));
        v83 = *v8 + v79;
        v84 = (void *)(v81 + 8 * (v83 / 0x49));
        uint64_t v85 = *v84 + 56 * (v83 % 0x49);
      }

      if ((float *)v85 != v82)
      {
        v87 = v8;
        v88 = (void *)(v81 + 8 * v80);
        v89 = 73 * (v84 - v88)
        if (v89)
        {
          do
          {
            v90 = v89 >> 1;
            *(void *)uint64_t buf = v88;
            *(void *)&uint8_t buf[8] = v82;
            sub_1005A9130(buf, v89 >> 1);
            v91 = *(void *)&buf[8];
            if (*(double *)(*(void *)&buf[8] + 40LL) < *(double *)&v86)
            {
              v82 = (float *)(*(void *)&buf[8] + 56LL);
              *(void *)&buf[8] += 56LL;
              v88 = *(void **)buf;
              if (v91 + 56 - **(void **)buf == 4088)
              {
                v88 = (void *)(*(void *)buf + 8LL);
                v82 = *(float **)(*(void *)buf + 8LL);
              }

              v90 = v89 + ~v90;
            }

            v89 = v90;
          }

          while (v90);
          uint64_t v4 = v404;
        }

        std::string::size_type v8 = v87;
      }

      v92 = sub_100833470(v82);
      double v95 = *(double *)&v86 + *(double *)(a1 + 448);
      if (v95 > *(double *)(v71 + 88))
      {
        v97 = fabsf(v96);
        if (*(double *)&qword_101996E98 <= 0.0)
        {
          v98 = v97;
        }

        else
        {
          v98 = v97;
          else {
            v99 = (*(double *)&v86 - *(double *)&qword_101996E98) * (*(double *)&qword_101996E90 + v98) * 0.5;
          }
          *(double *)&qword_101996EA0 = *(double *)&qword_101996EA0 + v99;
          *(double *)&v100 = v96;
        }

        qword_101996E90 = *(void *)&v98;
        qword_101996E98 = v86;
      }

      if (v95 >= *(double *)(v71 + 104))
      {
        v101 = *(double *)&qword_101996EA0;
        v102 = *(double *)&qword_101938980 - *(double *)&qword_101938988;
        *(float *)(v71 + 60) = v102;
        *(float *)(v71 + 64) = v101;
        __int16 v103 = sub_1005A29A4(a1, v71);
        if (qword_101934740 != -1) {
          dispatch_once(&qword_101934740, &stru_101841208);
        }
        BOOL v104 = (float)(v103 * 0.001);
        v105 = (os_log_s *)qword_101934748;
        if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
        {
          __int128 v106 = *(void *)(v71 + 96);
          char v107 = *(double *)&v86 + *(double *)(a1 + 448);
          *(_DWORD *)uint64_t buf = 134349824;
          *(void *)&uint8_t buf[4] = v106;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v107;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&buf[24] = v86;
          LOWORD(v431) = 2048;
          *(double *)((char *)&v431 + 2) = v104;
          _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEBUG,  "[FormModels] VerticalOscillationEvent,startTime,%{public}.2f,endTime,%{public}.2f,timestamp,%{public}.2f,displacement,%.3f",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934740 != -1) {
            dispatch_once(&qword_101934740, &stru_101841208);
          }
          v108 = *(void *)(v71 + 96);
          v109 = *(double *)&v86 + *(double *)(a1 + 448);
          v423[0].n128_u32[0] = 134349824;
          *(unint64_t *)((char *)v423[0].n128_u64 + 4) = v108;
          v423[0].n128_u16[6] = 2050;
          *(double *)((char *)&v423[0].n128_f64[1] + 6) = v109;
          v423[1].n128_u16[3] = 2050;
          v423[1].n128_u64[1] = v86;
          LOWORD(v424) = 2048;
          *(double *)((char *)&v424 + 2) = v104;
          LODWORD(v347) = 42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormModels] VerticalOscillationEvent,startTime,%{public}.2f,endTime,%{public}.2f,timestamp,%{public}.2f,displacement,%.3f",  v423,  *(void *)&v347);
          v111 = (char *)v110;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)",  "%s\n",  v110);
          if (v111 != buf) {
            free(v111);
          }
        }

        *uint64_t v69 = vaddq_s64(*v69, (int64x2_t)xmmword_1012CE4D0);
        sub_1005AA13C(a1 + 296, 1);
        if (*(void *)(a1 + 336)) {
          int v71 = *(void *)(*(void *)(a1 + 304) + 8 * (*(void *)(a1 + 328) / 0x22uLL))
        }
              + 120 * (*(void *)(a1 + 328) % 0x22uLL);
        if (*(_BYTE *)(v71 + 112))
        {
          *(void *)uint64_t buf = v86;
          *(double *)&uint8_t buf[8] = v104;
          sub_1005A2B84((void *)(a1 + 248), buf);
        }

        qword_101938980 = 0xFFEFFFFFFFFFFFFFLL;
        qword_101938988 = 0x7FEFFFFFFFFFFFFFLL;
        qword_101996E90 = 0LL;
        qword_101996E98 = 0LL;
        qword_101996EA0 = 0LL;
      }

      *(int64x2_t *)(a1 + 184) = vaddq_s64(*(int64x2_t *)(a1 + 184), (int64x2_t)xmmword_1012CE4D0);
      sub_100211164(a1 + 152, 1);
      uint64_t v68 = *(void *)(a1 + 192);
    }

    while (v68 > 0x100);
  }

  v112 = *(_DWORD *)(a1 + 2608) + 1;
  *(_DWORD *)(a1 + 2608) = v112;
  v113 = v112 & 7;
  if (*v8 >= 0x80uLL && v113 == 0)
  {
    v115 = v4[4] + *v8;
    v116 = v4[1];
    v117 = v4[2];
    v118 = (uint64_t *)(v116 + 8 * (v115 / 0x49));
    v119 = *v118;
    v120 = *v118 + 56 * (v115 % 0x49);
    if (v117 == v116) {
      v120 = 0LL;
    }
    v121 = v120 - v119;
    v122 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v120 - v119) >> 3);
    if (v121 < 7169)
    {
      v129 = 200 - v122;
      v124 = &v118[-(v129 / 0x49)];
      v125 = *v124 + 56 * (73 * (v129 / 0x49) - v129) + 4032;
    }

    else
    {
      v123 = v122 - 128;
      v124 = &v118[v123 / 0x49];
      v125 = *v124 + 56 * (v123 % 0x49);
    }

    v130 = v119 + 56 * (v115 % 0x49);
    if (v117 == v116) {
      v131 = 0LL;
    }
    else {
      v131 = v130;
    }
    sub_1005AA4AC((uint64_t)buf, v124, v125, v118, v131);
    *(_DWORD *)(a1 + 2608) = 0;
    if ((v400 & 1) != 0 || *(_BYTE *)(a1 + 2612)) {
      sub_1005A2C40(a1, buf);
    }
    sub_1003580A0(buf);
  }

  v132 = *(void *)(a1 + 96);
  if (v132 >= 0x101)
  {
    do
    {
      *(void *)(a1 + 96) = v132 - 1;
      ++*(void *)(a1 + 88);
      sub_100211164(a1 + 56, 1);
      v132 = *(void *)(a1 + 96);
    }

    while (v132 > 0x100);
  }

  v133 = *(void *)(a1 + 144);
  if (v133 >= 0x51)
  {
    do
    {
      *(void *)(a1 + 144) = v133 - 1;
      ++*(void *)(a1 + 136);
      sub_100211164(a1 + 104, 1);
      v133 = *(void *)(a1 + 144);
    }

    while (v133 > 0x50);
  }

  v134 = *(void *)(a1 + 240);
  if (v134 >= 0x101)
  {
    do
    {
      *(void *)(a1 + 240) = v134 - 1;
      ++*(void *)(a1 + 232);
      sub_100232D40(a1 + 200, 1);
      v134 = *(void *)(a1 + 240);
    }

    while (v134 > 0x100);
  }

  v135 = *(void *)(a1 + 288);
  if (v135 >= 0x23)
  {
    do
    {
      ++*(void *)(a1 + 280);
      *(void *)(a1 + 288) = v135 - 1;
      sub_100232D40(a1 + 248, 1);
      v135 = *(void *)(a1 + 288);
    }

    while (v135 > 0x22);
  }

  v136 = *(void *)(a1 + 384);
  if (v136 >= 0x23)
  {
    do
    {
      ++*(void *)(a1 + 376);
      *(void *)(a1 + 384) = v136 - 1;
      sub_1002327A8(a1 + 344, 1);
      v136 = *(void *)(a1 + 384);
    }

    while (v136 > 0x22);
  }

  v137 = *(void *)(a1 + 2656);
  if (v137 >= 0x441)
  {
    do
    {
      v138 = *(void *)(a1 + 2648);
      *(void *)(a1 + 2656) = v137 - 1;
      *(void *)(a1 + 2648) = v138 + 1;
      sub_1005AAC90(a1 + 2616, 1);
      v137 = *(void *)(a1 + 2656);
    }

    while (v137 > 0x440);
  }

  __int128 v19 = *(void *)(v5 + 104);
  if (!v19) {
    __int128 v19 = *(void *)(qword_1019A11B8 + 104);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v19,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }

  uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
  if (v27 >= 0x80)
  {
    uint64_t v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
    uint64_t v3 = a1[20];
  }

  else
  {
    uint64_t v28 = 2;
  }

  uint64_t v4 = (v28 + v4);
  if ((v3 & 0x1000) == 0)
  {
LABEL_53:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_78;
  }

  uint64_t v32 = *(_DWORD *)(a2 + 96);
  a1[37] |= 0x400000u;
  a1[24] = v32;
  unint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x800000) != 0)
  {
LABEL_32:
    std::string::size_type v8 = *(_DWORD *)(a2 + 100);
    a1[37] |= 0x800000u;
    a1[25] = v8;
    unint64_t v5 = *(_DWORD *)(a2 + 148);
  }

  uint64_t v68 = sub_1006E27E8();
  sub_100413284(v68, buf);
  uint64_t v69 = (uint64_t *)(a1 + 384);
  v70 = sub_1002A82BC(*(uint64_t *)&buf[0], "HRR_MaxAllowedEstimate", (void *)(a1 + 384));
  int v71 = v70;
  uint64_t v72 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_74;
  }
  v73 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    uint64_t v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if (!v71) {
      return a1;
    }
  }

  else
  {
LABEL_74:
    if (!v70) {
      return a1;
    }
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  uint64_t v75 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v76 = *v69;
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v76;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Estimator,fMaxAllowedEstimate overridden (%{public}f)",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    double v96 = *v69;
    v100 = 134349056;
    v101 = v96;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,fMaxAllowedEstimate overridden (%{public}f)",  &v100,  v99);
    v98 = (char *)v97;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRR ecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)",  "%s\n",  v97);
  }

  return a1;
}

  (*(void (**)(uint64_t))(*(void *)v46 + 24LL))(v46);
  return v9;
}

      v6 += 96LL;
      if (v6 == v5) {
        goto LABEL_104;
      }
    }

    if (v20 == -1.0) {
      goto LABEL_54;
    }
    if (v19 >= v20) {
      __int128 v20 = *(double *)(v8 + 72);
    }
LABEL_53:
    *(double *)(v8 + 72) = v20;
    goto LABEL_54;
  }

      v49 = (uint64_t *)v69;
      v48 = v70;
      if (a5 > ((char *)v70 - (_BYTE *)v69) >> 3 || a4 > 0x63 || ((char *)v61 - (_BYTE *)v60) >> 3 < a5)
      {
        if (v69 != v70)
        {
          unsigned int v51 = v61;
          if (v60 != v61)
          {
            while (1)
            {
              uint8_t v52 = (uint64_t *)v60;
              if (v60 != v51) {
                break;
              }
LABEL_87:
              if (++v49 == v48) {
                goto LABEL_88;
              }
            }

            while ((sub_10084CBD8(a6, *v49, *v52) & 1) != 0)
            {
              if (++v52 == v61)
              {
                v48 = v70;
                unsigned int v51 = v52;
                goto LABEL_87;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_10084E2F8(v75, (uint64_t **)&v69, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

      uint64_t v50 = (uint64_t *)v70;
      v49 = v71;
      if (a5 > ((char *)v71 - (_BYTE *)v70) >> 3 || a4 > 0x63 || ((char *)v62 - (_BYTE *)v61) >> 3 < a5)
      {
        if (v70 != v71)
        {
          uint8_t v52 = v62;
          if (v61 != v62)
          {
            while (1)
            {
              char v53 = (uint64_t *)v61;
              if (v61 != v52) {
                break;
              }
LABEL_87:
              if (++v50 == v49) {
                goto LABEL_88;
              }
            }

            while ((sub_10084CBD8(a6, *v50, *v53) & 1) != 0)
            {
              if (++v53 == v62)
              {
                v49 = v71;
                uint8_t v52 = v53;
                goto LABEL_87;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_10084DB1C(v76, &v70, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

      v49 = (double **)v69;
      v48 = v70;
      if (a5 > ((char *)v70 - (_BYTE *)v69) >> 3 || a4 > 0x63 || ((char *)v61 - (_BYTE *)v60) >> 3 < a5)
      {
        if (v69 != v70)
        {
          unsigned int v51 = v61;
          if (v60 != v61)
          {
            while (1)
            {
              uint8_t v52 = (double **)v60;
              if (v60 != v51) {
                break;
              }
LABEL_87:
              if (++v49 == v48) {
                goto LABEL_88;
              }
            }

            while ((sub_10085A3D8(a6, *v49, *v52) & 1) != 0)
            {
              if (++v52 == v61)
              {
                v48 = v70;
                unsigned int v51 = v52;
                goto LABEL_87;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_10085A614(v75, (uint64_t **)&v69, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

      uint64_t v50 = (double **)v70;
      v49 = v71;
      if (a5 > ((char *)v71 - (_BYTE *)v70) >> 3 || a4 > 0x63 || ((char *)v62 - (_BYTE *)v61) >> 3 < a5)
      {
        if (v70 != v71)
        {
          uint8_t v52 = v62;
          if (v61 != v62)
          {
            while (1)
            {
              char v53 = (double **)v61;
              if (v61 != v52) {
                break;
              }
LABEL_87:
              if (++v50 == v49) {
                goto LABEL_88;
              }
            }

            while ((sub_10085A3D8(a6, *v50, *v53) & 1) != 0)
            {
              if (++v53 == v62)
              {
                v49 = v71;
                uint8_t v52 = v53;
                goto LABEL_87;
              }
            }

            goto LABEL_95;
          }
        }
      }

      else if ((sub_100859BFC(v76, &v70, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }

                if (v16 != (id)++v19) {
                  continue;
                }
                uint64_t v36 = [obj countByEnumeratingWithState:&v43 objects:v47 count:16];
                uint64_t v16 = v36;
                uint64_t v37 = v40;
                char v18 = v40;
                if (!v36) {
                  goto LABEL_78;
                }
                goto LABEL_13;
            }
          }

          break;
        }

        uint64_t v37 = v41 + v19;
      }

      else
      {
        uint64_t v37 = 0;
      }

  (*(void (**)(uint64_t))(*(void *)v45 + 24LL))(v45);
  return v9;
}

  *(_DWORD *)(a1 + 184) |= 0x400u;
  uint64_t v25 = *(void **)(a1 + 80);
  if (!v25)
  {
    uint64_t v25 = operator new(0x20uLL);
    uint64_t *v25 = &off_101871960;
    v25[1] = 0LL;
    v25[2] = 0LL;
    v25[3] = 0LL;
    *(void *)(a1 + 80) = v25;
  }

  uint64_t v26 = *(void *)(a2 + 80);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_1019A1CE8 + 80);
  }
  sub_100B284E8((uint64_t)v25, v26);
  unint64_t v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x800) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_80;
  }

  __int128 v22 = *(void *)(v5 + 128);
  if (!v22) {
    __int128 v22 = *(void *)(qword_1019A1CE8 + 128);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v22,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_76;
  }

  char v18 = *(void *)(v5 + 112);
  if (!v18) {
    char v18 = *(void *)(qword_1019A1D38 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v18,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_76;
  }

  *(_DWORD *)(a1 + 224) |= 0x800u;
  uint64_t v26 = *(void **)(a1 + 88);
  if (!v26)
  {
    uint64_t v26 = operator new(0x20uLL);
    sub_100501150((uint64_t)v26);
    *(void *)(a1 + 88) = v26;
  }

  uint64_t v27 = *(void *)(a2 + 88);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_1019A1D48 + 88);
  }
  sub_100506078((uint64_t)v26, v27);
  unint64_t v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x1000) == 0)
  {
LABEL_51:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_52;
    }
LABEL_77:
    uint64_t v29 = *(_DWORD *)(a2 + 100);
    if (!sub_100501188(v29)) {
      sub_101264DF8();
    }
    *(_DWORD *)(a1 + 224) |= 0x2000u;
    *(_DWORD *)(a1 + 100) = v29;
    unint64_t v5 = *(_DWORD *)(a2 + 224);
    if ((v5 & 0x4000) == 0)
    {
LABEL_53:
      if ((v5 & 0x8000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_84;
    }

    goto LABEL_79;
  }

  char v18 = *(void *)(v5 + 120);
  if (!v18) {
    char v18 = *(void *)(qword_1019A1D48 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19,  v18,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_76;
  }

  uint64_t v63 = v120;
  uint64_t v64 = v121;
  if (v120 == v121)
  {
    uint64_t v67 = 0LL;
  }

  else
  {
    uint64_t v65 = *(double *)(v1 + 160) * 1000000.0;
    unint64_t v66 = v120;
    do
    {
      *(void *)(v66 + 12) -= (unint64_t)v65;
      v66 += 20;
    }

    while (v66 != v64);
    uint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - v63) >> 2);
    uint64_t v68 = *(void *)(v1 + 176) + (int)v67;
    ++*(void *)(v1 + 168);
    *(void *)(v1 + 176) = v68;
    uint64_t v69 = v114;
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_101878D20);
    }
    v70 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
    {
      int v71 = v118;
      uint64_t v72 = *(void *)(v120 + 12);
      v73 = *((void *)v121 - 1);
      uint64_t v74 = *(void *)(v1 + 168);
      uint64_t v75 = *(void *)(v1 + 176);
      v131 = 136448258;
      v132 = v71;
      v133 = 2050;
      *(void *)v134 = v72;
      *(_WORD *)&v134[8] = 2050;
      *(void *)&v134[10] = v73;
      *(_WORD *)&v134[18] = 2050;
      *(double *)&v134[20] = (double)v72 * 0.000000999999997;
      *(_WORD *)&v134[28] = 2050;
      *(double *)&v134[30] = (double)v73 * 0.000000999999997;
      *(_WORD *)&v134[38] = 1026;
      *(_DWORD *)&v134[40] = v69;
      *(_WORD *)&v134[44] = 1026;
      *(_DWORD *)&v134[46] = v67;
      *(_WORD *)&v134[50] = 2050;
      *(void *)&v134[52] = v74;
      v135[0] = 2050;
      *(void *)&v135[1] = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public }d to %{public}d, batch num %{public}llu, sample num %{public}llu",  (uint8_t *)&v131,  0x54u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v131, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_101878D20);
      }
      v101 = v118;
      v102 = *(void *)(v120 + 12);
      __int16 v103 = *((void *)v121 - 1);
      BOOL v104 = *(void *)(v1 + 168);
      v105 = *(void *)(v1 + 176);
      v123 = 136448258;
      v124 = v101;
      v125 = 2050;
      *(void *)v126 = v102;
      *(_WORD *)&v126[8] = 2050;
      *(void *)&v126[10] = v103;
      *(_WORD *)&v126[18] = 2050;
      *(double *)&v126[20] = (double)v102 * 0.000000999999997;
      *(_WORD *)&v126[28] = 2050;
      *(double *)&v126[30] = (double)v103 * 0.000000999999997;
      *(_WORD *)&v126[38] = 1026;
      *(_DWORD *)&v126[40] = v69;
      *(_WORD *)&v126[44] = 1026;
      *(_DWORD *)&v126[46] = v67;
      *(_WORD *)&v126[50] = 2050;
      *(void *)&v126[52] = v104;
      v127[0] = 2050;
      *(void *)&v127[1] = v105;
      LODWORD(v112) = 84;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v131,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public }d to %{public}d, batch num %{public}llu, sample num %{public}llu",  &v123,  v112);
      char v107 = (int *)v106;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v106);
      if (v107 != &v131) {
        free(v107);
      }
    }

    uint64_t v76 = ((double)*(unint64_t *)(v120 + 12) - *(double *)(v1 + 184)) / 1000000.0;
    if (v76 > v8 * 1.5)
    {
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_101878D20);
      }
      v77 = (os_log_s *)qword_1019347C8;
      if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v78 = v118;
        unint64_t v79 = *(double *)(v1 + 184) * 0.000001;
        uint64_t v80 = (double)*((unint64_t *)v121 - 1) * 0.000001;
        v131 = 136446978;
        v132 = v78;
        v133 = 2050;
        *(double *)v134 = v76;
        *(_WORD *)&v134[8] = 2050;
        *(double *)&v134[10] = v79;
        *(_WORD *)&v134[18] = 2050;
        *(double *)&v134[20] = v80;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f",  (uint8_t *)&v131,  0x2Au);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v131, 0x65CuLL);
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_101878D20);
        }
        v108 = *(double *)(v1 + 184) * 0.000001;
        v109 = (double)*((unint64_t *)v121 - 1) * 0.000001;
        v123 = 136446978;
        v124 = v118;
        v125 = 2050;
        *(double *)v126 = v76;
        *(_WORD *)&v126[8] = 2050;
        *(double *)&v126[10] = v108;
        *(_WORD *)&v126[18] = 2050;
        *(double *)&v126[20] = v109;
        LODWORD(v112) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v131,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f",  &v123,  v112);
        v111 = (int *)v110;
        sub_10029211C("Generic", 1LL, 0, 0LL, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v110);
        if (v111 != &v131) {
          free(v111);
        }
      }
    }

    *(double *)(v1 + 184) = (double)*((unint64_t *)v121 - 1);
  }

  v131 = v67;
  v81 = *(void *)(v1 + 216);
  if (!v81) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t, char **, int *))(*(void *)v81 + 48LL))(v81, &v120, &v131);
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }

  return v67;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  BOOL v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 132));
  unint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x20u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }

  uint64_t v28 = *(void *)(a2 + 40);
  v5 |= 0x10uLL;
  void *v2 = v5;
  *(void *)(a1 + 40) = v28;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_28:
    if ((v4 & 0x400) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "impactCanceledBecauseOfExistingAlert", *(void *)(a1 + 184));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 80), 0x41u);
  unint64_t v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }

  uint64_t v26 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 40) = v26;
  BOOL v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 132));
  unint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x21u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "hasMotionBeforeImpact", *(_BYTE *)(a1 + 394));
  unsigned int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 304), 0x18u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_72;
  }

  uint64_t result = *(float *)(a2 + 36);
  v3 |= 0x10uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 36) = result;
  BOOL v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 96));
  unint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x14u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "triggerPathBitmap", *(_DWORD *)(a1 + 192));
  uint64_t v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v16 & 0x4000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x1Eu);
  unint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200) == 0)
  {
LABEL_39:
    if ((v14 & 0x40) == 0) {
      goto LABEL_40;
    }
    goto LABEL_72;
  }

  uint64_t v13 = *(_BYTE *)(a2 + 157);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 157) = v13;
  BOOL v2 = *(void *)(a2 + 172);
  if ((v2 & 0x1000000000LL) == 0)
  {
LABEL_27:
    if ((v2 & 0x40000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "kMaxSaturationRO", *(float *)(a1 + 80));
  unint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 159), 0x6Eu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x40000000000LL) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_72;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 36) = v13;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x1000000000LL) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 128));
  unint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 161), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }

  uint64_t v31 = *(_DWORD *)(a2 + 112);
  v3 |= 0x4000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 112) = v31;
  BOOL v2 = *(void *)(a2 + 212);
  if ((v2 & 0x10) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "rolloverMaxEnergy", *(float *)(a1 + 176));
  unint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }

  uint64_t v56 = *(void *)(a2 + 184);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 244) = v6;
  *(void *)(a1 + 184) = v56;
  if ((*(_DWORD *)(a2 + 244) & 0x200000) != 0)
  {
LABEL_21:
    unint64_t v14 = *(_BYTE *)(a2 + 237);
    v6 |= 0x200000u;
    *(_DWORD *)(a1 + 244) = v6;
    *(_BYTE *)(a1 + 237) = v14;
  }

  __int128 v20 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 60) = v20;
  BOOL v2 = *(void *)(a2 + 184);
  if ((v2 & 0x2000000000LL) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist", *(_DWORD *)(a1 + 96));
  unint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0x18u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "vectorMagnitude", *(float *)(a1 + 156));
  unint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_72;
  }

  __int128 v21 = *(_DWORD *)(a2 + 136);
  v3 |= 0x80000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 136) = v21;
  BOOL v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "horizontalRotationSimilarityThreshold", *(float *)(a1 + 76));
  unint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_72;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_72;
  }

  PB::TextFormatter::format(this, "vHat_X", *(float *)(a1 + 140));
  uint64_t v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x100000) != 0) {
    goto LABEL_71;
  }
LABEL_38:
  if ((v13 & 0x200000) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(this, "vHat_Z", *(float *)(a1 + 148));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x20u);
  unsigned int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_39:
    if ((v11 & 0x20000) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x22u);
  }

  uint64_t result = *(double *)(a2 + 80);
  v3 |= 0x200uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 80) = result;
  BOOL v2 = *(void *)(a2 + 224);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x400) == 0) {
      return result;
    }
LABEL_72:
    uint64_t result = *(double *)(a2 + 88);
    *(void *)(a1 + 224) = v3 | 0x400;
    *(double *)(a1 + 88) = result;
    return result;
  }

  PB::TextFormatter::format(this, "verticalOscillationIsValid", *(_BYTE *)(a1 + 221));
  unint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10000000) != 0) {
    goto LABEL_71;
  }
LABEL_35:
  if ((v5 & 0x400000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(this, "verticalOscillationUnsmoothed", *(double *)(a1 + 184));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176), 0x22u);
  if ((*(void *)(v3 + 224) & 0x400) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 88), 0x23u);
  }
  return result;
}

void sub_100061060( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char *a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  a41 = &a28;
  sub_10001A350((void ***)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_100061214(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006124C(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }

  sub_100019CEC(a1 + 120);
  sub_100019CEC(a1 + 80);
  sub_10001AA60(a1 + 16);
  return a1;
}

void sub_100061298( uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(_BYTE *)(a4 + 24))
  {
    sub_100060440(a3, a2, __p);
    if (!*(_BYTE *)(a4 + 24)) {
      sub_100036CD8();
    }
    sub_100026F04(a1, (uint64_t)__p, *(void *)(a4 + 8), *(void *)(a4 + 16), a5, a6);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A418);
    }
    int v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "CLMicroLocationClientUtils, requireServiceLabelEntries, cannot load label entries for unknown LOI",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A418);
      }
      v12[0] = 0;
      unsigned int v11 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "CLMicroLocationClientUtils, requireServiceLabelEntries, cannot load label entries for unknown LOI",  v12,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationClientUtils::requireServiceLabelEntries(C LMicroLocationDatabase &, const CLMiLoService::ServiceUuid &, const std::string &, const std::optional<CLMiLoSer vice::MiLoLocation> &, cl::chrono::CFAbsoluteTimeClock::time_point)",  "%s\n",  (const char *)v11);
      if (v11 != __p) {
        free(v11);
      }
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

void sub_100061494( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1000614B8(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1000614E4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *a2;
  sub_10001AD40(a1 + 16, a3);
  __int128 v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a1 + 72) = *(void *)(a3 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  sub_10001B204(a1 + 80, a3 + 64);
  sub_10001B494(a1 + 120, a3 + 104);
  __int128 v6 = *(_OWORD *)(a3 + 144);
  int v7 = *(_DWORD *)(a3 + 160);
  *(void *)(a1 + 184) = 0LL;
  *(_DWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  sub_10001B72C( (void *)(a1 + 184),  *(const void **)(a3 + 168),  *(void *)(a3 + 176),  (uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 2);
  return a1;
}

void sub_10006158C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000615C0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000615F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100061634((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_100061634(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }

  sub_100019CEC(a1 + 120);
  sub_100019CEC(a1 + 80);
  return sub_10001AA60(a1 + 16);
}

void *sub_100061678(void *a1, uint64_t a2)
{
  v6[0] = &off_101818E08;
  v6[1] = a2;
  int v7 = v6;
  sub_10006171C(v6, a1);
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void *sub_10006171C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    __int128 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100061884(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void *sub_100061898()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_10181A448;
  return result;
}

void sub_1000618BC(uint64_t a1, void *a2)
{
  *a2 = &off_10181A448;
}

uint64_t sub_1000618D4()
{
  return 0LL;
}

uint64_t sub_1000618DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100061918()
{
}

uint64_t sub_100061924(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    __int128 v6 = a2;
    do
    {
      sub_10001D548(a1, v4, v6);
      v6 += 15;
      uint64_t v4 = v12 + 240;
      v12 += 240LL;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_1000619CC((uint64_t)v9);
  return v4;
}

void sub_1000619B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000619CC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100061A00((uint64_t *)a1);
  }
  return a1;
}

void sub_100061A00(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 240LL;
      sub_10001A3D4(v5, v3);
    }

    while (v3 != v4);
  }

void *sub_100061A50(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
    }

    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }

    char v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v3) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v14 = a1 + 16;
  unsigned int v15 = operator new(0xE0uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  void *v15 = 0LL;
  v15[1] = v6;
  sub_100061CDC((uint64_t)(v15 + 2), a3);
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1LL;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }
  }

  __int128 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }

      else
      {
        v23 &= v8 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t v11 = (void *)v25[0];
  v25[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100061D64((uint64_t)v25, 0LL);
  return v11;
}

void sub_100061CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100061CDC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001B9CC(a1 + 16, (uint64_t *)(a2 + 16));
  __int128 v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  sub_10001B9CC(a1 + 80, (uint64_t *)(a2 + 80));
  sub_10001B9CC(a1 + 120, (uint64_t *)(a2 + 120));
  __int128 v5 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v5;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0LL;
  *(void *)(a2 + 192) = 0LL;
  *(void *)(a2 + 200) = 0LL;
  return a1;
}

void sub_100061D64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100061634((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

uint64_t sub_100061DA8()
{
  if (qword_1019A07E0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A07E0 + 8LL))(qword_1019A07E0);
  }
  if (qword_1019A07E8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A07E8 + 8LL))(qword_1019A07E8);
  }
  if (qword_1019A07F0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A07F0 + 8LL))(qword_1019A07F0);
  }
  if (qword_1019A07F8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A07F8 + 8LL))(qword_1019A07F8);
  }
  if (qword_1019A0800) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0800 + 8LL))(qword_1019A0800);
  }
  if (qword_1019A0808) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0808 + 8LL))(qword_1019A0808);
  }
  if (qword_1019A0810) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0810 + 8LL))(qword_1019A0810);
  }
  if (qword_1019A0818) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0818 + 8LL))(qword_1019A0818);
  }
  if (qword_1019A0820) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0820 + 8LL))(qword_1019A0820);
  }
  if (qword_1019A0828) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0828 + 8LL))(qword_1019A0828);
  }
  if (qword_1019A0830) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0830 + 8LL))(qword_1019A0830);
  }
  if (qword_1019A0838) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0838 + 8LL))(qword_1019A0838);
  }
  if (qword_1019A0840) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0840 + 8LL))(qword_1019A0840);
  }
  if (qword_1019A0848) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0848 + 8LL))(qword_1019A0848);
  }
  if (qword_1019A0850) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0850 + 8LL))(qword_1019A0850);
  }
  if (qword_1019A0858) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0858 + 8LL))(qword_1019A0858);
  }
  if (qword_1019A0860) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0860 + 8LL))(qword_1019A0860);
  }
  if (qword_1019A0868) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0868 + 8LL))(qword_1019A0868);
  }
  if (qword_1019A0870) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0870 + 8LL))(qword_1019A0870);
  }
  if (qword_1019A0878) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0878 + 8LL))(qword_1019A0878);
  }
  if (qword_1019A0880) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0880 + 8LL))(qword_1019A0880);
  }
  if (qword_1019A0888) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0888 + 8LL))(qword_1019A0888);
  }
  if (qword_1019A0890) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0890 + 8LL))(qword_1019A0890);
  }
  if (qword_1019A0898) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0898 + 8LL))(qword_1019A0898);
  }
  if (qword_1019A08A0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08A0 + 8LL))(qword_1019A08A0);
  }
  if (qword_1019A08A8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08A8 + 8LL))(qword_1019A08A8);
  }
  if (qword_1019A08B0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08B0 + 8LL))(qword_1019A08B0);
  }
  if (qword_1019A08B8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08B8 + 8LL))(qword_1019A08B8);
  }
  if (qword_1019A08C0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08C0 + 8LL))(qword_1019A08C0);
  }
  if (qword_1019A08C8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08C8 + 8LL))(qword_1019A08C8);
  }
  if (qword_1019A08D0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08D0 + 8LL))(qword_1019A08D0);
  }
  if (qword_1019A08D8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08D8 + 8LL))(qword_1019A08D8);
  }
  if (qword_1019A08E0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08E0 + 8LL))(qword_1019A08E0);
  }
  if (qword_1019A08E8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08E8 + 8LL))(qword_1019A08E8);
  }
  if (qword_1019A08F0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08F0 + 8LL))(qword_1019A08F0);
  }
  if (qword_1019A08F8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A08F8 + 8LL))(qword_1019A08F8);
  }
  if (qword_1019A0900) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0900 + 8LL))(qword_1019A0900);
  }
  if (qword_1019A0908) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0908 + 8LL))(qword_1019A0908);
  }
  if (qword_1019A0910) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0910 + 8LL))(qword_1019A0910);
  }
  if (qword_1019A0918) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0918 + 8LL))(qword_1019A0918);
  }
  if (qword_1019A0920) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0920 + 8LL))(qword_1019A0920);
  }
  if (qword_1019A0928) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0928 + 8LL))(qword_1019A0928);
  }
  if (qword_1019A0930) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0930 + 8LL))(qword_1019A0930);
  }
  if (qword_1019A0938) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0938 + 8LL))(qword_1019A0938);
  }
  if (qword_1019A0940) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0940 + 8LL))(qword_1019A0940);
  }
  if (qword_1019A0948) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0948 + 8LL))(qword_1019A0948);
  }
  if (qword_1019A0950) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0950 + 8LL))(qword_1019A0950);
  }
  if (qword_1019A0958) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0958 + 8LL))(qword_1019A0958);
  }
  if (qword_1019A0960) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0960 + 8LL))(qword_1019A0960);
  }
  if (qword_1019A0968) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0968 + 8LL))(qword_1019A0968);
  }
  if (qword_1019A0970) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0970 + 8LL))(qword_1019A0970);
  }
  if (qword_1019A0978) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0978 + 8LL))(qword_1019A0978);
  }
  if (qword_1019A0980) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0980 + 8LL))(qword_1019A0980);
  }
  if (qword_1019A0988) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0988 + 8LL))(qword_1019A0988);
  }
  if (qword_1019A0990) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0990 + 8LL))(qword_1019A0990);
  }
  if (qword_1019A0998) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A0998 + 8LL))(qword_1019A0998);
  }
  if (qword_1019A09A0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09A0 + 8LL))(qword_1019A09A0);
  }
  if (qword_1019A09A8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09A8 + 8LL))(qword_1019A09A8);
  }
  if (qword_1019A09B0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09B0 + 8LL))(qword_1019A09B0);
  }
  if (qword_1019A09B8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09B8 + 8LL))(qword_1019A09B8);
  }
  if (qword_1019A09C0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09C0 + 8LL))(qword_1019A09C0);
  }
  if (qword_1019A09C8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09C8 + 8LL))(qword_1019A09C8);
  }
  if (qword_1019A09D0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09D0 + 8LL))(qword_1019A09D0);
  }
  if (qword_1019A09D8) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09D8 + 8LL))(qword_1019A09D8);
  }
  if (qword_1019A09E0) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A09E0 + 8LL))(qword_1019A09E0);
  }
  uint64_t result = qword_1019A09E8;
  if (qword_1019A09E8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)qword_1019A09E8 + 8LL))(qword_1019A09E8);
  }
  return result;
}

void sub_1000623EC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_101993A40 & 1) == 0)
  {
    byte_101993A40 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  a4);
    __int128 v4 = operator new(0x48uLL);
    void *v4 = off_10181A4C8;
    v4[1] = 0LL;
    v4[2] = 5LL;
    v4[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v4[7] = 0LL;
    v4[4] = 0LL;
    v4[5] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v4[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v4 + 16) = 0;
    qword_1019A07E0 = (uint64_t)v4;
    __int128 v5 = (char *)operator new(0x30uLL);
    *((_DWORD *)v5 + 4) = 1;
    *(void *)__int128 v5 = off_10181A540;
    *((void *)v5 + 1) = 0LL;
    *(void *)(v5 + 36) = 0LL;
    *(void *)(v5 + 28) = 0LL;
    *(void *)(v5 + 20) = 0LL;
    qword_1019A07E8 = (uint64_t)v5;
    unint64_t v6 = operator new(0x20uLL);
    v6[1] = 0LL;
    v6[2] = 0LL;
    void *v6 = off_10181A5B8;
    *((_DWORD *)v6 + 6) = 0;
    qword_1019A07F0 = (uint64_t)v6;
    int v7 = operator new(0x40uLL);
    void *v7 = off_10181A630;
    v7[1] = 0LL;
    _DWORD v7[2] = 6LL;
    v7[3] = 0LL;
    v7[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v7 + 11) = 0;
    *((_DWORD *)v7 + 12) = 0;
    *((_DWORD *)v7 + 10) = 1;
    *(void *)((char *)v7 + 52) = 0LL;
    qword_1019A07F8 = (uint64_t)v7;
    unint64_t v8 = operator new(0x30uLL);
    void *v8 = off_10181A6A8;
    v8[1] = 0LL;
    *((_DWORD *)v8 + 8) = 0;
    v8[2] = 2LL;
    v8[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *(void *)((char *)v8 + 36) = 0LL;
    qword_1019A0800 = (uint64_t)v8;
    uint8x8_t v9 = operator new(0x30uLL);
    *uint8x8_t v9 = off_10181A720;
    v9[1] = 0LL;
    v9[2] = 3LL;
    void v9[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_OWORD *)v9 + 2) = 0u;
    qword_1019A0808 = (uint64_t)v9;
    char v10 = operator new(0x30uLL);
    *char v10 = off_10181A798;
    v10[1] = 0LL;
    v10[2] = 4LL;
    v10[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_OWORD *)v10 + 2) = xmmword_1012CA3D0;
    qword_1019A0810 = (uint64_t)v10;
    uint64_t v11 = (char *)operator new(0x50uLL);
    *(void *)uint64_t v11 = off_10181A810;
    *((void *)v11 + 8) = 1LL;
    *((_DWORD *)v11 + 18) = 0;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((void *)v11 + 7) = 0LL;
    qword_1019A0818 = (uint64_t)v11;
    unint64_t v12 = operator new(0x20uLL);
    void *v12 = off_10181A888;
    v12[1] = 0LL;
    v12[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v12[3] = 0LL;
    qword_1019A0820 = (uint64_t)v12;
    uint64_t v13 = operator new(0x28uLL);
    void *v13 = &off_10181A900;
    v13[1] = 0LL;
    v13[2] = 1LL;
    v13[3] = 0LL;
    v13[4] = 0LL;
    qword_1019A0828 = (uint64_t)v13;
    uint64_t v14 = operator new(0x70uLL);
    v14[1] = 0LL;
    v14[2] = 0LL;
    void *v14 = off_10181A978;
    *((_DWORD *)v14 + 6) = 0;
    v14[9] = 0LL;
    v14[10] = 0LL;
    *((_DWORD *)v14 + 22) = 0;
    v14[4] = 0LL;
    v14[5] = 0LL;
    v14[6] = 0LL;
    v14[7] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v14[8] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_WORD *)v14 + 48) = 0;
    *(void *)((char *)v14 + 100) = 0LL;
    qword_1019A0830 = (uint64_t)v14;
    unsigned int v15 = operator new(0x30uLL);
    v15[2] = 0LL;
    v15[3] = 0LL;
    *((_DWORD *)v15 + 8) = 0;
    void *v15 = off_10181A9F0;
    v15[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v15[5] = 0LL;
    qword_1019A0838 = (uint64_t)v15;
    float v16 = operator new(0x38uLL);
    v16[1] = 0LL;
    v16[2] = 0LL;
    *float v16 = off_10181AA68;
    *((_DWORD *)v16 + 6) = 1;
    *((_WORD *)v16 + 14) = 0;
    v16[5] = 1LL;
    v16[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v16 + 12) = 0;
    qword_1019A0840 = (uint64_t)v16;
    float v17 = operator new(0x30uLL);
    v17[4] = 0LL;
    *float v17 = off_10181AAE0;
    v17[1] = 0LL;
    v17[2] = 0LL;
    v17[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v17 + 10) = 0;
    qword_1019A0848 = (uint64_t)v17;
    BOOL v18 = operator new(0x28uLL);
    v18[1] = 0LL;
    v18[2] = 0LL;
    *BOOL v18 = off_10181AB58;
    *((_DWORD *)v18 + 6) = 0;
    v18[4] = 0LL;
    qword_1019A0850 = (uint64_t)v18;
    unint64_t v19 = operator new(0x28uLL);
    *unint64_t v19 = off_10181ABD0;
    v19[1] = 0LL;
    v19[2] = 0LL;
    v19[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v19[4] = 0LL;
    qword_1019A0858 = (uint64_t)v19;
    unint64_t v20 = operator new(0x30uLL);
    v20[1] = 0LL;
    v20[2] = 0LL;
    *unint64_t v20 = off_10181AC48;
    *((_DWORD *)v20 + 6) = 0;
    v20[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v20[5] = 0LL;
    qword_1019A0860 = (uint64_t)v20;
    size_t v21 = operator new(0x28uLL);
    v21[1] = 0LL;
    v21[2] = 0LL;
    *size_t v21 = off_10181ACC0;
    *((_DWORD *)v21 + 6) = 0;
    v21[4] = 0LL;
    qword_1019A0868 = (uint64_t)v21;
    __int128 v22 = operator new(0x28uLL);
    v22[3] = 0LL;
    v22[4] = 0LL;
    v22[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v22[2] = 0LL;
    void *v22 = off_10181AD38;
    qword_1019A0870 = (uint64_t)v22;
    unint64_t v23 = operator new(0x50uLL);
    v23[1] = 0LL;
    v23[2] = 0LL;
    *unint64_t v23 = off_10181ADB0;
    *((_DWORD *)v23 + 6) = 0;
    v23[4] = 0LL;
    v23[5] = 0LL;
    *((_DWORD *)v23 + 12) = 0;
    v23[8] = 0LL;
    v23[9] = 0LL;
    v23[7] = 0LL;
    qword_1019A0878 = (uint64_t)v23;
    uint64_t v24 = (char *)operator new(0xC8uLL);
    *((void *)v24 + 1) = 0LL;
    *((void *)v24 + 2) = 0LL;
    *(void *)uint64_t v24 = off_10181AE28;
    *((_DWORD *)v24 + 6) = 0;
    *((void *)v24 + 10) = 0LL;
    *((void *)v24 + 11) = 0LL;
    *((_DWORD *)v24 + 24) = 0;
    v24[104] = 0;
    *((void *)v24 + 23) = 0LL;
    *((_OWORD *)v24 + 2) = 0u;
    *((_OWORD *)v24 + 3) = 0u;
    *(_OWORD *)(v24 + 60) = 0u;
    *(_OWORD *)(v24 + 108) = 0u;
    *(_OWORD *)(v24 + 124) = 0u;
    *(_OWORD *)(v24 + 140) = 0u;
    *(_OWORD *)(v24 + 156) = 0u;
    *((_DWORD *)v24 + 43) = 0;
    *((void *)v24 + 22) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v24 + 48) = 0;
    qword_1019A0880 = (uint64_t)v24;
    uint64_t v25 = (char *)operator new(0x18uLL);
    *(void *)uint64_t v25 = off_10181AEA0;
    *((_WORD *)v25 + 4) = 0;
    *(void *)(v25 + 12) = 0LL;
    qword_1019A0888 = (uint64_t)v25;
    char v26 = operator new(0x30uLL);
    void *v26 = off_10181AF18;
    v26[1] = 0x100000001LL;
    v26[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v26[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v26[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v26[5] = 0LL;
    qword_1019A0890 = (uint64_t)v26;
    uint64_t v27 = operator new(0x30uLL);
    *uint64_t v27 = off_10181AF90;
    v27[1] = 0x10000000DLL;
    v27[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v27[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v27[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v27[5] = 0LL;
    qword_1019A0898 = (uint64_t)v27;
    uint64_t v28 = operator new(0x30uLL);
    v28[4] = 2LL;
    void *v28 = off_10181B008;
    v28[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v28[2] = 0LL;
    v28[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v28 + 10) = 0;
    qword_1019A08A0 = (uint64_t)v28;
    uint64_t v29 = operator new(0x20uLL);
    v29[2] = 4LL;
    void *v29 = off_10181B080;
    v29[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v29 + 6) = 0;
    qword_1019A08A8 = (uint64_t)v29;
    unint64_t v30 = operator new(0x18uLL);
    *unint64_t v30 = off_10181B0F8;
    v30[1] = 5LL;
    *((_DWORD *)v30 + 4) = 0;
    qword_1019A08B0 = (uint64_t)v30;
    uint64_t v31 = operator new(0x30uLL);
    v31[4] = 14LL;
    *uint64_t v31 = off_10181B170;
    v31[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v31[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v31[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v31 + 10) = 0;
    qword_1019A08B8 = (uint64_t)v31;
    uint64_t v32 = operator new(0x18uLL);
    *uint64_t v32 = off_10181B1E8;
    v32[1] = 7LL;
    *((_DWORD *)v32 + 4) = 0;
    qword_1019A08C0 = (uint64_t)v32;
    uint64_t v33 = operator new(0x78uLL);
    v33[16] = 9;
    *(void *)uint64_t v33 = off_10181B260;
    *((void *)v33 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 10) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_WORD *)v33 + 34) = 0;
    *((void *)v33 + 11) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 12) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 13) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v33 + 14) = 0LL;
    qword_1019A08C8 = (uint64_t)v33;
    uint64_t v34 = operator new(0x58uLL);
    v34[12] = 10;
    *(void *)uint64_t v34 = off_10181B2D8;
    *((void *)v34 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v34 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v34 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v34 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v34 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v34 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v34 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_WORD *)v34 + 26) = 0;
    *((void *)v34 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v34 + 10) = 0LL;
    qword_1019A08D0 = (uint64_t)v34;
    uint64_t v35 = operator new(0x20uLL);
    *uint64_t v35 = off_10181B350;
    v35[1] = 0LL;
    v35[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v35[3] = 0LL;
    qword_1019A08D8 = (uint64_t)v35;
    uint64_t v36 = operator new(0x48uLL);
    v36[4] = 0LL;
    v36[5] = 0LL;
    *((_DWORD *)v36 + 12) = 0;
    *uint64_t v36 = off_10181B3C8;
    v36[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v36[2] = 12LL;
    v36[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v36[7] = 0LL;
    v36[8] = 0LL;
    qword_1019A08E0 = (uint64_t)v36;
    uint64_t v37 = operator new(0x18uLL);
    void *v37 = off_10181B440;
    v37[1] = 31LL;
    *((_DWORD *)v37 + 4) = 0;
    qword_1019A08E8 = (uint64_t)v37;
    unint64_t v38 = operator new(0x18uLL);
    *unint64_t v38 = off_10181B4B8;
    v38[1] = 32LL;
    *((_DWORD *)v38 + 4) = 0;
    qword_1019A08F0 = (uint64_t)v38;
    uint64_t v39 = operator new(0x18uLL);
    void *v39 = off_10181B530;
    v39[1] = 33LL;
    *((_DWORD *)v39 + 4) = 0;
    qword_1019A08F8 = (uint64_t)v39;
    __int128 v40 = operator new(0x18uLL);
    *__int128 v40 = off_10181B5A8;
    v40[1] = 34LL;
    *((_DWORD *)v40 + 4) = 0;
    qword_1019A0900 = (uint64_t)v40;
    uint64_t v41 = operator new(0x18uLL);
    void *v41 = off_10181B620;
    v41[1] = 35LL;
    *((_DWORD *)v41 + 4) = 0;
    qword_1019A0908 = (uint64_t)v41;
    uint64_t v42 = operator new(0x28uLL);
    v42[3] = 36LL;
    void *v42 = off_10181B698;
    v42[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v42[2] = 0LL;
    *((_DWORD *)v42 + 8) = 0;
    qword_1019A0910 = (uint64_t)v42;
    char v43 = operator new(0x28uLL);
    v43[3] = 37LL;
    void *v43 = off_10181B710;
    v43[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v43[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v43 + 8) = 0;
    qword_1019A0918 = (uint64_t)v43;
    uint64_t v44 = operator new(0x28uLL);
    v44[3] = 38LL;
    *uint64_t v44 = off_10181B788;
    v44[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v44[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v44 + 8) = 0;
    qword_1019A0920 = (uint64_t)v44;
    uint64_t v45 = operator new(0x28uLL);
    v45[3] = 39LL;
    *uint64_t v45 = off_10181B800;
    v45[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v45[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v45 + 8) = 0;
    qword_1019A0928 = (uint64_t)v45;
    char v46 = operator new(0x28uLL);
    v46[4] = 40;
    *(void *)char v46 = off_10181B878;
    *((void *)v46 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v46 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_BYTE *)v46 + 20) = 0;
    *((void *)v46 + 4) = 0LL;
    qword_1019A0930 = (uint64_t)v46;
    unsigned int v47 = operator new(0x28uLL);
    void v47[3] = 41LL;
    *unsigned int v47 = off_10181B8F0;
    v47[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v47[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v47 + 8) = 0;
    qword_1019A0938 = (uint64_t)v47;
    v48 = operator new(0x38uLL);
    v48[5] = 42LL;
    void *v48 = off_10181B968;
    v48[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v48[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v48[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v48[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v48 + 12) = 0;
    qword_1019A0940 = (uint64_t)v48;
    v49 = operator new(0x30uLL);
    v49[4] = 43LL;
    void *v49 = off_10181B9E0;
    v49[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v49[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    void v49[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v49 + 10) = 0;
    qword_1019A0948 = (uint64_t)v49;
    uint64_t v50 = operator new(0x20uLL);
    v50[2] = 44LL;
    void *v50 = off_10181BA58;
    v50[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v50 + 6) = 0;
    qword_1019A0950 = (uint64_t)v50;
    unsigned int v51 = operator new(0x30uLL);
    void *v51 = off_10181BAD0;
    v51[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v51[2] = 45LL;
    void v51[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_OWORD *)v51 + 2) = 0u;
    qword_1019A0958 = (uint64_t)v51;
    uint8_t v52 = operator new(0x20uLL);
    v52[2] = 46LL;
    *uint8_t v52 = off_10181BB48;
    v52[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v52 + 6) = 0;
    qword_1019A0960 = (uint64_t)v52;
    char v53 = operator new(0x38uLL);
    *char v53 = off_10181BBC0;
    v53[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v53[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v53[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v53[3] = 0x10000002FLL;
    *((_BYTE *)v53 + 40) = 0;
    *(void *)((char *)v53 + 44) = 0LL;
    qword_1019A0968 = (uint64_t)v53;
    uint64_t v54 = operator new(0x20uLL);
    v54[2] = 55LL;
    void *v54 = off_10181BC38;
    v54[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v54 + 6) = 0;
    qword_1019A0970 = (uint64_t)v54;
    uint64_t v55 = (char *)operator new(0x130uLL);
    *(void *)uint64_t v55 = off_10181BCB0;
    *(_OWORD *)(v55 + 24) = 0u;
    *(_OWORD *)(v55 + 40) = 0u;
    *(_OWORD *)(v55 + 56) = 0u;
    *(_OWORD *)(v55 + 72) = 0u;
    *(_OWORD *)(v55 + 88) = 0u;
    *(_OWORD *)(v55 + 104) = 0u;
    *(_OWORD *)(v55 + 120) = 0u;
    *(_OWORD *)(v55 + 136) = 0u;
    *(_OWORD *)(v55 + 152) = 0u;
    *(_OWORD *)(v55 + 168) = 0u;
    *(_OWORD *)(v55 + 184) = 0u;
    *(_OWORD *)(v55 + 200) = 0u;
    *(_OWORD *)(v55 + 216) = 0u;
    *(_OWORD *)(v55 + 232) = 0u;
    *(_OWORD *)(v55 + 248) = 0u;
    *((_DWORD *)v55 + 74) = 0;
    qword_1019A0978 = (uint64_t)v55;
    *(_OWORD *)(v55 + 8) = 0u;
    v55 += 8;
    *((_OWORD *)v55 + 16) = 0u;
    *((_OWORD *)v55 + 17) = 0u;
    uint64_t v56 = (char *)operator new(0x88uLL);
    *(void *)uint64_t v56 = off_10181BD28;
    *((void *)v56 + 13) = 0LL;
    *((void *)v56 + 14) = 0LL;
    *((_DWORD *)v56 + 18) = 1;
    *((_WORD *)v56 + 38) = 0;
    *((void *)v56 + 15) = 0LL;
    *((_DWORD *)v56 + 32) = 0;
    *(_OWORD *)(v56 + 8) = 0u;
    *(_OWORD *)(v56 + 24) = 0u;
    *(_OWORD *)(v56 + 40) = 0u;
    *(_OWORD *)(v56 + 56) = 0u;
    *((void *)v56 + 10) = 0LL;
    *((void *)v56 + 11) = 0LL;
    *((void *)v56 + 12) = 0LL;
    qword_1019A0980 = (uint64_t)v56;
    uint64_t v57 = operator new(0x58uLL);
    v57[6] = 48;
    *(void *)uint64_t v57 = off_10181BDA0;
    *((void *)v57 + 1) = 0LL;
    *((_WORD *)v57 + 14) = 0;
    *((void *)v57 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v57 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v57 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v57 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v57 + 7) = 0LL;
    *((void *)v57 + 9) = 0LL;
    *((void *)v57 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v57[20] = 0;
    qword_1019A0988 = (uint64_t)v57;
    uint64_t v58 = (char *)operator new(0x18uLL);
    *(void *)uint64_t v58 = off_10181BE18;
    *(_OWORD *)(v58 + 8) = xmmword_1012CA3E0;
    qword_1019A0990 = (uint64_t)v58;
    unint64_t v59 = operator new(0x18uLL);
    *(void *)unint64_t v59 = off_10181BE90;
    v59[2] = 50;
    *((_BYTE *)v59 + 12) = 0;
    *((void *)v59 + 2) = 0LL;
    qword_1019A0998 = (uint64_t)v59;
    uint64_t v60 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v60 = off_10181BF08;
    *(void *)(v60 + 20) = 0LL;
    *((_DWORD *)v60 + 2) = 51;
    *((_DWORD *)v60 + 3) = 0;
    *((_WORD *)v60 + 8) = 0;
    qword_1019A09A0 = (uint64_t)v60;
    __int128 v61 = operator new(0x18uLL);
    *(void *)__int128 v61 = off_10181BF80;
    v61[2] = 52;
    *((_BYTE *)v61 + 12) = 0;
    *((void *)v61 + 2) = 0LL;
    qword_1019A09A8 = (uint64_t)v61;
    char v62 = operator new(0x18uLL);
    *char v62 = off_10181BFF8;
    v62[1] = 53LL;
    *((_DWORD *)v62 + 4) = 0;
    qword_1019A09B0 = (uint64_t)v62;
    uint64_t v63 = operator new(0x18uLL);
    void *v63 = off_10181C070;
    v63[1] = 54LL;
    *((_DWORD *)v63 + 4) = 0;
    qword_1019A09B8 = (uint64_t)v63;
    uint64_t v64 = operator new(0x20uLL);
    void *v64 = off_10181C0E8;
    v64[1] = 0LL;
    v64[2] = 0LL;
    *((_DWORD *)v64 + 6) = 0;
    qword_1019A09C0 = (uint64_t)v64;
    uint64_t v65 = operator new(0x30uLL);
    *uint64_t v65 = off_10181C160;
    v65[1] = 0LL;
    v65[2] = 0LL;
    *((_DWORD *)v65 + 6) = 0;
    v65[4] = 0LL;
    *((_DWORD *)v65 + 10) = 0;
    qword_1019A09C8 = (uint64_t)v65;
    unint64_t v66 = operator new(0x20uLL);
    v66[2] = 1LL;
    *unint64_t v66 = &off_10181C1D8;
    v66[1] = 0LL;
    *((_DWORD *)v66 + 6) = 0;
    qword_1019A09D0 = (uint64_t)v66;
    uint64_t v67 = operator new(0x28uLL);
    v67[3] = 2LL;
    void *v67 = off_10181C250;
    v67[1] = 0LL;
    v67[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v67 + 8) = 0;
    qword_1019A09D8 = (uint64_t)v67;
    uint64_t v68 = (char *)operator new(0x38uLL);
    *(void *)uint64_t v68 = off_10181C2C8;
    *(_OWORD *)(v68 + 8) = 0u;
    *(_OWORD *)(v68 + 24) = 0u;
    *(_OWORD *)(v68 + 36) = 0u;
    qword_1019A09E0 = (uint64_t)v68;
    uint64_t v69 = operator new(0x20uLL);
    *uint64_t v69 = off_10181C340;
    v69[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v69[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v69[3] = 0LL;
    qword_1019A09E8 = (uint64_t)v69;
    uint64_t v70 = qword_1019A07F8;
    uint64_t v71 = qword_1019A07F0;
    if (!qword_1019A07F0)
    {
      ((void (*)(void))sub_1000623EC)();
      uint64_t v71 = qword_1019A07F0;
    }

    *(void *)(v70 + 24) = v71;
    uint64_t v72 = sub_100063C04(qword_1019A0818);
    uint64_t v73 = qword_1019A0828;
    uint64_t v74 = qword_1019A0820;
    if (!qword_1019A0820)
    {
      uint64_t v72 = sub_1000623EC(v72);
      uint64_t v74 = qword_1019A0820;
    }

    *(void *)(v73 + 24) = v74;
    uint64_t v75 = qword_1019A0880;
    uint64_t v76 = qword_1019A0850;
    if (!qword_1019A0850)
    {
      uint64_t v72 = sub_1000623EC(v72);
      uint64_t v76 = qword_1019A0850;
    }

    *(void *)(v75 + 112) = v76;
    uint64_t v77 = qword_1019A0878;
    if (!qword_1019A0878)
    {
      uint64_t v72 = sub_1000623EC(v72);
      uint64_t v77 = qword_1019A0878;
    }

    *(void *)(v75 + 120) = v77;
    uint64_t v78 = qword_1019A08A0;
    uint64_t v79 = qword_1019A0888;
    if (qword_1019A0888)
    {
      *(void *)(qword_1019A08A0 + 16) = qword_1019A0888;
      uint64_t v80 = qword_1019A08E0;
    }

    else
    {
      uint64_t v81 = sub_1000623EC(v72);
      uint64_t v79 = qword_1019A0888;
      *(void *)(v78 + 16) = qword_1019A0888;
      uint64_t v80 = qword_1019A08E0;
      if (!v79)
      {
        sub_1000623EC(v81);
        uint64_t v79 = qword_1019A0888;
      }
    }

    *(void *)(v80 + 56) = v79;
    sub_100063CB0(qword_1019A0978);
    uint64_t v82 = sub_100064014(qword_1019A0980);
    uint64_t v84 = qword_1019A09D0;
    uint64_t v85 = qword_1019A0850;
    if (!qword_1019A0850)
    {
      uint64_t v82 = sub_1000623EC(v82);
      uint64_t v85 = qword_1019A0850;
    }

    *(void *)(v84 + 8) = v85;
    uint64_t v86 = qword_1019A09D8;
    uint64_t v87 = qword_1019A0868;
    if (!qword_1019A0868)
    {
      uint64_t v82 = sub_1000623EC(v82);
      uint64_t v87 = qword_1019A0868;
    }

    *(void *)(v86 + 8) = v87;
    v88 = (void *)qword_1019A09E0;
    uint64_t v89 = qword_1019A09C8;
    if (!qword_1019A09C8)
    {
      uint64_t v82 = sub_1000623EC(v82);
      uint64_t v89 = qword_1019A09C8;
    }

    v88[2] = v89;
    uint64_t v90 = qword_1019A09D0;
    if (!qword_1019A09D0)
    {
      uint64_t v82 = sub_1000623EC(v82);
      uint64_t v90 = qword_1019A09D0;
    }

    v88[3] = v90;
    uint64_t v91 = qword_1019A09D8;
    if (!qword_1019A09D8)
    {
      sub_1000623EC(v82);
      uint64_t v91 = qword_1019A09D8;
    }

    v88[4] = v91;
    wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_100061DA8,  v83);
  }

uint64_t sub_1000632A8(uint64_t result)
{
  *(void *)uint64_t result = off_10181A4C8;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 5LL;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 56) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_1000632D4(uint64_t result)
{
  *(_DWORD *)(result + 16) = 1;
  *(void *)uint64_t result = off_10181A540;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 28) = 0LL;
  *(void *)(result + 20) = 0LL;
  return result;
}

uint64_t sub_1000632F8(uint64_t result)
{
  *(void *)uint64_t result = off_10181A630;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 6LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 1LL;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 48) = 0LL;
  return result;
}

double sub_10006332C(uint64_t a1)
{
  *(void *)a1 = off_10181A810;
  *(void *)(a1 + 64) = 1LL;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  return result;
}

void *sub_100063360(void *result)
{
  *double result = off_10181A888;
  result[1] = 0LL;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0LL;
  return result;
}

void *sub_10006337C(void *result)
{
  *double result = &off_10181A900;
  result[1] = 0LL;
  result[2] = 1LL;
  result[3] = 0LL;
  result[4] = 0LL;
  return result;
}

uint64_t sub_100063398(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = off_10181A978;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 80) = 0LL;
  *(_DWORD *)(result + 88) = 0;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = 0LL;
  *(void *)(result + 48) = 0LL;
  *(void *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 72) = 0LL;
  *(_WORD *)(result + 96) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t sub_1000633D4(uint64_t result)
{
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  *(void *)double result = off_10181A9F0;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 0LL;
  return result;
}

uint64_t sub_1000633F8(uint64_t result)
{
  *(void *)(result + 32) = 0LL;
  *(void *)double result = off_10181AAE0;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10006341C(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = off_10181AB58;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  return result;
}

void *sub_100063438(void *result)
{
  *double result = off_10181ABD0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0LL;
  return result;
}

uint64_t sub_100063458(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = off_10181AC48;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 0LL;
  return result;
}

uint64_t sub_10006347C(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = off_10181ACC0;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  return result;
}

void *sub_100063498(void *result)
{
  result[3] = 0LL;
  result[4] = 0LL;
  result[2] = 0LL;
  *double result = off_10181AD38;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  return result;
}

uint64_t sub_1000634B8(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = off_10181ADB0;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = 0LL;
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 64) = 0LL;
  *(void *)(result + 72) = 0LL;
  *(void *)(result + 56) = 0LL;
  return result;
}

double sub_1000634E0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_10181AE28;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(void *)(a1 + 184) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 176) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t sub_100063538(uint64_t result)
{
  *(void *)double result = off_10181AEA0;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

double sub_100063550(void *a1)
{
  *a1 = off_10181AF18;
  *(void *)&double result = 0x100000001LL;
  a1[1] = 0x100000001LL;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[5] = 0LL;
  return result;
}

double sub_100063578(void *a1)
{
  *a1 = off_10181AF90;
  *(void *)&double result = 0x10000000DLL;
  a1[1] = 0x10000000DLL;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[5] = 0LL;
  return result;
}

double sub_1000635A4(uint64_t a1)
{
  *(void *)&double result = 2LL;
  *(void *)(a1 + 32) = 2LL;
  *(void *)a1 = off_10181B008;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_1000635D0(uint64_t a1)
{
  *(void *)&double result = 4LL;
  *(void *)(a1 + 16) = 4LL;
  *(void *)a1 = off_10181B080;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1000635F8(uint64_t a1)
{
  *(void *)a1 = off_10181B0F8;
  *(void *)&double result = 5LL;
  *(void *)(a1 + 8) = 5LL;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_100063618(uint64_t a1)
{
  *(void *)&double result = 14LL;
  *(void *)(a1 + 32) = 14LL;
  *(void *)a1 = off_10181B170;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_100063644(uint64_t a1)
{
  *(void *)a1 = off_10181B1E8;
  *(void *)&double result = 7LL;
  *(void *)(a1 + 8) = 7LL;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_100063664(uint64_t result)
{
  *(_DWORD *)(result + 64) = 9;
  *(void *)double result = off_10181B260;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 80) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_WORD *)(result + 68) = 0;
  *(void *)(result + 88) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 96) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 104) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 112) = 0LL;
  return result;
}

uint64_t sub_1000636A0(uint64_t result)
{
  *(_DWORD *)(result + 48) = 10;
  *(void *)double result = off_10181B2D8;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_WORD *)(result + 52) = 0;
  *(void *)(result + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 80) = 0LL;
  return result;
}

double sub_1000636D4(void *a1)
{
  *a1 = off_10181B350;
  double result = 0.0;
  a1[1] = 0LL;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = 0LL;
  return result;
}

double sub_1000636FC(uint64_t a1)
{
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = off_10181B3C8;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 12LL;
  *(void *)(a1 + 16) = 12LL;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  return result;
}

double sub_100063730(uint64_t a1)
{
  *(void *)a1 = off_10181B440;
  *(void *)&double result = 31LL;
  *(void *)(a1 + 8) = 31LL;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_100063750(uint64_t a1)
{
  *(void *)a1 = off_10181B4B8;
  *(void *)&double result = 32LL;
  *(void *)(a1 + 8) = 32LL;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_100063770(uint64_t a1)
{
  *(void *)a1 = off_10181B530;
  *(void *)&double result = 33LL;
  *(void *)(a1 + 8) = 33LL;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_100063790(uint64_t a1)
{
  *(void *)a1 = off_10181B5A8;
  *(void *)&double result = 34LL;
  *(void *)(a1 + 8) = 34LL;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1000637B0(uint64_t a1)
{
  *(void *)a1 = off_10181B620;
  *(void *)&double result = 35LL;
  *(void *)(a1 + 8) = 35LL;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_1000637D0(uint64_t a1)
{
  *(void *)&double result = 36LL;
  *(void *)(a1 + 24) = 36LL;
  *(void *)a1 = off_10181B698;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1000637FC(uint64_t a1)
{
  *(void *)&double result = 37LL;
  *(void *)(a1 + 24) = 37LL;
  *(void *)a1 = off_10181B710;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_100063828(uint64_t a1)
{
  *(void *)&double result = 38LL;
  *(void *)(a1 + 24) = 38LL;
  *(void *)a1 = off_10181B788;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_100063854(uint64_t a1)
{
  *(void *)&double result = 39LL;
  *(void *)(a1 + 24) = 39LL;
  *(void *)a1 = off_10181B800;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_100063880(uint64_t result)
{
  *(_DWORD *)(result + 16) = 40;
  *(void *)double result = off_10181B878;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 32) = 0LL;
  *(_BYTE *)(result + 20) = 0;
  return result;
}

double sub_1000638A8(uint64_t a1)
{
  *(void *)&double result = 41LL;
  *(void *)(a1 + 24) = 41LL;
  *(void *)a1 = off_10181B8F0;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1000638D4(uint64_t a1)
{
  *(void *)&double result = 42LL;
  *(void *)(a1 + 40) = 42LL;
  *(void *)a1 = off_10181B968;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

double sub_100063904(uint64_t a1)
{
  *(void *)&double result = 43LL;
  *(void *)(a1 + 32) = 43LL;
  *(void *)a1 = off_10181B9E0;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_100063930(uint64_t a1)
{
  *(void *)&double result = 44LL;
  *(void *)(a1 + 16) = 44LL;
  *(void *)a1 = off_10181BA58;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_100063958(void *a1)
{
  *a1 = off_10181BAD0;
  a1[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 45LL;
  a1[2] = 45LL;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = 0LL;
  a1[5] = 0LL;
  return result;
}

double sub_100063984(uint64_t a1)
{
  *(void *)&double result = 46LL;
  *(void *)(a1 + 16) = 46LL;
  *(void *)a1 = off_10181BB48;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_1000639AC(uint64_t a1)
{
  *(void *)a1 = off_10181BBC0;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 0x10000002FLL;
  *(void *)(a1 + 24) = 0x10000002FLL;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

double sub_1000639E0(uint64_t a1)
{
  *(void *)&double result = 55LL;
  *(void *)(a1 + 16) = 55LL;
  *(void *)a1 = off_10181BC38;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_100063A08(uint64_t a1)
{
  *(void *)a1 = off_10181BCB0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

double sub_100063A68(uint64_t a1)
{
  *(void *)a1 = off_10181BD28;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(_DWORD *)(a1 + 72) = 1;
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  return result;
}

double sub_100063AA8(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 48;
  *(void *)a1 = off_10181BDA0;
  *(void *)(a1 + 8) = 0LL;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  double result = 0.0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

double sub_100063AEC(uint64_t a1)
{
  *(void *)a1 = off_10181BE18;
  *(void *)&double result = 0x100000031LL;
  *(_OWORD *)(a1 + 8) = xmmword_1012CA3E0;
  return result;
}

uint64_t sub_100063B08(uint64_t result)
{
  *(void *)double result = off_10181BE90;
  *(_DWORD *)(result + 8) = 50;
  *(_BYTE *)(result + 12) = 0;
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t sub_100063B28(uint64_t result)
{
  *(void *)double result = off_10181BF08;
  *(void *)(result + 8) = 51LL;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_WORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100063B44(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = off_10181C0E8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100063B5C(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = off_10181C160;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

double sub_100063B7C(uint64_t a1)
{
  *(void *)&double result = 1LL;
  *(void *)(a1 + 16) = 1LL;
  *(void *)a1 = &off_10181C1D8;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_100063B9C(uint64_t a1)
{
  *(void *)&double result = 2LL;
  *(void *)(a1 + 24) = 2LL;
  *(void *)a1 = off_10181C250;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_100063BC8(uint64_t a1)
{
  *(void *)a1 = off_10181C2C8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

void *sub_100063BE8(void *result)
{
  *double result = off_10181C340;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100063C04(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A07E8;
  if (!qword_1019A07E8)
  {
    double result = sub_1000623EC();
    uint64_t v2 = qword_1019A07E8;
  }

  v1[2] = v2;
  uint64_t v3 = qword_1019A0800;
  if (!qword_1019A0800)
  {
    double result = sub_1000623EC();
    uint64_t v3 = qword_1019A0800;
  }

  v1[3] = v3;
  uint64_t v4 = qword_1019A0808;
  if (!qword_1019A0808)
  {
    double result = sub_1000623EC();
    uint64_t v4 = qword_1019A0808;
  }

  v1[4] = v4;
  uint64_t v5 = qword_1019A0810;
  if (!qword_1019A0810)
  {
    double result = sub_1000623EC();
    uint64_t v5 = qword_1019A0810;
  }

  v1[5] = v5;
  uint64_t v6 = qword_1019A07E0;
  if (!qword_1019A07E0)
  {
    double result = sub_1000623EC();
    uint64_t v6 = qword_1019A07E0;
  }

  v1[6] = v6;
  uint64_t v7 = qword_1019A07F8;
  if (!qword_1019A07F8)
  {
    double result = sub_1000623EC();
    uint64_t v7 = qword_1019A07F8;
  }

  v1[7] = v7;
  return result;
}

uint64_t sub_100063CB0(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A0890;
  if (!qword_1019A0890)
  {
    double result = sub_1000623EC();
    uint64_t v2 = qword_1019A0890;
  }

  v1[1] = v2;
  uint64_t v3 = qword_1019A08A0;
  if (!qword_1019A08A0)
  {
    double result = sub_1000623EC();
    uint64_t v3 = qword_1019A08A0;
  }

  v1[2] = v3;
  uint64_t v4 = qword_1019A08A8;
  if (!qword_1019A08A8)
  {
    double result = sub_1000623EC();
    uint64_t v4 = qword_1019A08A8;
  }

  v1[3] = v4;
  uint64_t v5 = qword_1019A08B0;
  if (!qword_1019A08B0)
  {
    double result = sub_1000623EC();
    uint64_t v5 = qword_1019A08B0;
  }

  v1[4] = v5;
  uint64_t v6 = qword_1019A08C0;
  if (!qword_1019A08C0)
  {
    double result = sub_1000623EC();
    uint64_t v6 = qword_1019A08C0;
  }

  v1[5] = v6;
  uint64_t v7 = qword_1019A08C8;
  if (!qword_1019A08C8)
  {
    double result = sub_1000623EC();
    uint64_t v7 = qword_1019A08C8;
  }

  v1[6] = v7;
  uint64_t v8 = qword_1019A08D0;
  if (!qword_1019A08D0)
  {
    double result = sub_1000623EC();
    uint64_t v8 = qword_1019A08D0;
  }

  v1[7] = v8;
  uint64_t v9 = qword_1019A08E0;
  if (!qword_1019A08E0)
  {
    double result = sub_1000623EC();
    uint64_t v9 = qword_1019A08E0;
  }

  v1[8] = v9;
  uint64_t v10 = qword_1019A0898;
  if (!qword_1019A0898)
  {
    double result = sub_1000623EC();
    uint64_t v10 = qword_1019A0898;
  }

  v1[9] = v10;
  uint64_t v11 = qword_1019A08B8;
  if (!qword_1019A08B8)
  {
    double result = sub_1000623EC();
    uint64_t v11 = qword_1019A08B8;
  }

  v1[10] = v11;
  uint64_t v12 = qword_1019A08E8;
  if (!qword_1019A08E8)
  {
    double result = sub_1000623EC();
    uint64_t v12 = qword_1019A08E8;
  }

  v1[11] = v12;
  uint64_t v13 = qword_1019A08F0;
  if (!qword_1019A08F0)
  {
    double result = sub_1000623EC();
    uint64_t v13 = qword_1019A08F0;
  }

  v1[12] = v13;
  uint64_t v14 = qword_1019A08F8;
  if (!qword_1019A08F8)
  {
    double result = sub_1000623EC();
    uint64_t v14 = qword_1019A08F8;
  }

  v1[13] = v14;
  uint64_t v15 = qword_1019A0900;
  if (!qword_1019A0900)
  {
    double result = sub_1000623EC();
    uint64_t v15 = qword_1019A0900;
  }

  v1[14] = v15;
  uint64_t v16 = qword_1019A0908;
  if (!qword_1019A0908)
  {
    double result = sub_1000623EC();
    uint64_t v16 = qword_1019A0908;
  }

  v1[15] = v16;
  uint64_t v17 = qword_1019A0910;
  if (!qword_1019A0910)
  {
    double result = sub_1000623EC();
    uint64_t v17 = qword_1019A0910;
  }

  v1[16] = v17;
  uint64_t v18 = qword_1019A0918;
  if (!qword_1019A0918)
  {
    double result = sub_1000623EC();
    uint64_t v18 = qword_1019A0918;
  }

  v1[17] = v18;
  uint64_t v19 = qword_1019A0920;
  if (!qword_1019A0920)
  {
    double result = sub_1000623EC();
    uint64_t v19 = qword_1019A0920;
  }

  v1[18] = v19;
  uint64_t v20 = qword_1019A0928;
  if (!qword_1019A0928)
  {
    double result = sub_1000623EC();
    uint64_t v20 = qword_1019A0928;
  }

  v1[19] = v20;
  uint64_t v21 = qword_1019A0930;
  if (!qword_1019A0930)
  {
    double result = sub_1000623EC();
    uint64_t v21 = qword_1019A0930;
  }

  v1[20] = v21;
  uint64_t v22 = qword_1019A0938;
  if (!qword_1019A0938)
  {
    double result = sub_1000623EC();
    uint64_t v22 = qword_1019A0938;
  }

  v1[21] = v22;
  uint64_t v23 = qword_1019A0940;
  if (!qword_1019A0940)
  {
    double result = sub_1000623EC();
    uint64_t v23 = qword_1019A0940;
  }

  v1[22] = v23;
  uint64_t v24 = qword_1019A0948;
  if (!qword_1019A0948)
  {
    double result = sub_1000623EC();
    uint64_t v24 = qword_1019A0948;
  }

  v1[23] = v24;
  uint64_t v25 = qword_1019A0950;
  if (!qword_1019A0950)
  {
    double result = sub_1000623EC();
    uint64_t v25 = qword_1019A0950;
  }

  v1[24] = v25;
  uint64_t v26 = qword_1019A0958;
  if (!qword_1019A0958)
  {
    double result = sub_1000623EC();
    uint64_t v26 = qword_1019A0958;
  }

  v1[25] = v26;
  uint64_t v27 = qword_1019A0960;
  if (!qword_1019A0960)
  {
    double result = sub_1000623EC();
    uint64_t v27 = qword_1019A0960;
  }

  v1[26] = v27;
  uint64_t v28 = qword_1019A0968;
  if (!qword_1019A0968)
  {
    double result = sub_1000623EC();
    uint64_t v28 = qword_1019A0968;
  }

  v1[27] = v28;
  uint64_t v29 = qword_1019A0988;
  if (!qword_1019A0988)
  {
    double result = sub_1000623EC();
    uint64_t v29 = qword_1019A0988;
  }

  v1[28] = v29;
  uint64_t v30 = qword_1019A0990;
  if (!qword_1019A0990)
  {
    double result = sub_1000623EC();
    uint64_t v30 = qword_1019A0990;
  }

  v1[29] = v30;
  uint64_t v31 = qword_1019A0998;
  if (!qword_1019A0998)
  {
    double result = sub_1000623EC();
    uint64_t v31 = qword_1019A0998;
  }

  v1[30] = v31;
  uint64_t v32 = qword_1019A09A0;
  if (!qword_1019A09A0)
  {
    double result = sub_1000623EC();
    uint64_t v32 = qword_1019A09A0;
  }

  v1[31] = v32;
  uint64_t v33 = qword_1019A09A8;
  if (!qword_1019A09A8)
  {
    double result = sub_1000623EC();
    uint64_t v33 = qword_1019A09A8;
  }

  v1[32] = v33;
  uint64_t v34 = qword_1019A09B0;
  if (!qword_1019A09B0)
  {
    double result = sub_1000623EC();
    uint64_t v34 = qword_1019A09B0;
  }

  v1[33] = v34;
  uint64_t v35 = qword_1019A09B8;
  if (!qword_1019A09B8)
  {
    double result = sub_1000623EC();
    uint64_t v35 = qword_1019A09B8;
  }

  v1[34] = v35;
  uint64_t v36 = qword_1019A0970;
  if (!qword_1019A0970)
  {
    double result = sub_1000623EC();
    uint64_t v36 = qword_1019A0970;
  }

  v1[35] = v36;
  return result;
}

uint64_t sub_100064014(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1019A0890;
  if (!qword_1019A0890)
  {
    double result = sub_1000623EC();
    uint64_t v2 = qword_1019A0890;
  }

  v1[2] = v2;
  uint64_t v3 = qword_1019A08A0;
  if (!qword_1019A08A0)
  {
    double result = sub_1000623EC();
    uint64_t v3 = qword_1019A08A0;
  }

  v1[3] = v3;
  uint64_t v4 = qword_1019A08A8;
  if (!qword_1019A08A8)
  {
    double result = sub_1000623EC();
    uint64_t v4 = qword_1019A08A8;
  }

  v1[4] = v4;
  uint64_t v5 = qword_1019A08B0;
  if (!qword_1019A08B0)
  {
    double result = sub_1000623EC();
    uint64_t v5 = qword_1019A08B0;
  }

  v1[5] = v5;
  uint64_t v6 = qword_1019A08C0;
  if (!qword_1019A08C0)
  {
    double result = sub_1000623EC();
    uint64_t v6 = qword_1019A08C0;
  }

  v1[6] = v6;
  uint64_t v7 = qword_1019A08C8;
  if (!qword_1019A08C8)
  {
    double result = sub_1000623EC();
    uint64_t v7 = qword_1019A08C8;
  }

  v1[7] = v7;
  uint64_t v8 = qword_1019A08D0;
  if (!qword_1019A08D0)
  {
    double result = sub_1000623EC();
    uint64_t v8 = qword_1019A08D0;
  }

  v1[8] = v8;
  uint64_t v9 = qword_1019A08E0;
  if (!qword_1019A08E0)
  {
    double result = sub_1000623EC();
    uint64_t v9 = qword_1019A08E0;
  }

  v1[10] = v9;
  uint64_t v10 = qword_1019A0898;
  if (!qword_1019A0898)
  {
    double result = sub_1000623EC();
    uint64_t v10 = qword_1019A0898;
  }

  v1[11] = v10;
  uint64_t v11 = qword_1019A08B8;
  if (!qword_1019A08B8)
  {
    double result = sub_1000623EC();
    uint64_t v11 = qword_1019A08B8;
  }

  v1[12] = v11;
  return result;
}

BOOL sub_100064120(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_100064130(unsigned int a1)
{
  return (a1 < 0x10) & (0x800Fu >> a1);
}

BOOL sub_100064148(unsigned int a1)
{
  return a1 < 8;
}

BOOL sub_100064154(unsigned int a1)
{
  return a1 < 9;
}

uint64_t sub_100064160(unsigned int a1)
{
  return (a1 < 0x38) & (0xFFFFFF800076B6uLL >> a1);
}

BOOL sub_10006417C(int a1)
{
  return (a1 - 1) < 4;
}

BOOL sub_10006418C(int a1)
{
  return (a1 - 1) < 2;
}

BOOL sub_10006419C(unsigned int a1)
{
  return a1 < 2;
}

BOOL sub_1000641A8(unsigned int a1)
{
  return a1 < 6;
}

BOOL sub_1000641B4(int a1)
{
  return (a1 - 1) < 0xB;
}

BOOL sub_1000641C4(int a1)
{
  return (a1 - 1) < 2 || a1 == 255;
}

BOOL sub_1000641E0(unsigned int a1)
{
  return a1 < 3;
}

uint64_t sub_1000641EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10181A4C8;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 5LL;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 64) = 0;
  sub_10006424C(a1, a2);
  return a1;
}

void sub_100064238(_Unwind_Exception *a1)
{
}

void sub_10006424C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v18,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  835LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v18,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 64);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    int v5 = *(_DWORD *)(a2 + 64);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(void *)(a1 + 8) = v7;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }

  int v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v8;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }

LABEL_20:
  int v11 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 56) = v11;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if ((v5 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_22:
  uint64_t v13 = *(const std::string **)(a2 + 40);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  uint64_t v14 = *(std::string **)(a1 + 40);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 40) = v14;
  }

  std::string::operator=(v14, v13);
  if ((*(_DWORD *)(a2 + 64) & 0x80) != 0)
  {
LABEL_25:
    uint64_t v15 = *(const std::string **)(a2 + 48);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    uint64_t v16 = *(std::string **)(a1 + 48);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v16 = (std::string *)operator new(0x18uLL);
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      v16->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 48) = v16;
    }

    std::string::operator=(v16, v15);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 56), a2);
  if ((*(_DWORD *)(v5 + 104) & 0x20) != 0) {
LABEL_9:
  }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(6LL, *(void *)(v5 + 64), a2);
LABEL_10:
  if (*(int *)(v5 + 80) >= 1)
  {
    int v8 = 0LL;
    do
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(void *)(*(void *)(v5 + 72) + 8 * v8++),  a2,  a4);
    while (v8 < *(int *)(v5 + 80));
  }

  uint64_t v9 = *(_DWORD *)(v5 + 104);
  if ((v9 & 0x80) != 0)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 96),  (BOOL)a2,  a4);
    uint64_t v9 = *(_DWORD *)(v5 + 104);
  }

  if ((v9 & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 97),  (BOOL)a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(8LL, *(void *)(v5 + 64), a2);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(7LL, *(void *)(v5 + 48), a2);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

    *a3 = v4;
    return a2;
  }

  int v6 = *a2;
  if ((double *)*a1 == a2)
  {
    int v8 = a2;
  }

  else
  {
    if (v6 == 0.0)
    {
      uint64_t v9 = a2;
      do
      {
        int v8 = (double *)*((void *)v9 + 2);
        uint64_t v10 = *(void *)v8 == (void)v9;
        uint64_t v9 = v8;
      }

      while (v10);
    }

    else
    {
      uint64_t v7 = *a2;
      do
      {
        int v8 = *(double **)&v7;
        uint64_t v7 = *(double *)(*(void *)&v7 + 8LL);
      }

      while (v7 != 0.0);
    }

    if (*a4 < v8[4])
    {
      while (1)
      {
        int v11 = *(void *)v4;
        a2 = v4;
        if (!*(void *)v4) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v4 = (double *)v11;
          int v11 = *(void *)(v11 + 8);
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }

  if (v6 == 0.0)
  {
    *a3 = a2;
  }

  else
  {
    *a3 = v8;
    return v8 + 1;
  }

  return a2;
}

  *a2 = v6;
  return result;
}

  *a2 = v6;
  return result;
}

    uint64_t v19 = a5[23];
    if ((v19 & 0x80u) == 0LL) {
      uint64_t v20 = a5[23];
    }
    else {
      uint64_t v20 = *((void *)a5 + 1);
    }
    uint64_t v21 = v30;
    if ((v30 & 0x80u) != 0) {
      uint64_t v21 = v29[1];
    }
    if (v20 == v21)
    {
      if ((v30 & 0x80u) == 0) {
        uint64_t v22 = (unsigned __int8 *)v29;
      }
      else {
        uint64_t v22 = (unsigned __int8 *)v29[0];
      }
      if ((v19 & 0x80) == 0)
      {
        if (a5[23])
        {
          while (*a5 == *v22)
          {
            ++a5;
            ++v22;
            if (!--v19) {
              goto LABEL_37;
            }
          }

          goto LABEL_35;
        }

      *a3 = v4;
      return a2;
    }
  }

  uint64_t v7 = *a2;
  if ((double *)*a1 == a2)
  {
    uint64_t v9 = a2;
  }

  else
  {
    if (v7 == 0.0)
    {
      uint64_t v10 = a2;
      do
      {
        uint64_t v9 = (double *)*((void *)v10 + 2);
        int v11 = *(void *)v9 == (void)v10;
        uint64_t v10 = v9;
      }

      while (v11);
    }

    else
    {
      int v8 = *a2;
      do
      {
        uint64_t v9 = *(double **)&v8;
        int v8 = *(double *)(*(void *)&v8 + 8LL);
      }

      while (v8 != 0.0);
    }

    uint64_t v12 = *(double *)(a4 + 8);
    if (v12 < v9[5])
    {
      while (1)
      {
        uint64_t v13 = *(void *)v4;
        a2 = v4;
        if (!*(void *)v4) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v4 = (double *)v13;
          uint64_t v13 = *(void *)(v13 + 8);
          if (!v13)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }

  if (v7 == 0.0)
  {
    *a3 = a2;
  }

  else
  {
    *a3 = v9;
    return v9 + 1;
  }

  return a2;
}

  int v11 = *(void *)(v5 + 40);
  if (!v11) {
    int v11 = *(void *)(qword_1019A0AA8 + 40);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v11,  a2,  a4);
  if ((*(_DWORD *)(v5 + 60) & 0x20) != 0)
  {
LABEL_23:
    uint64_t v12 = *(void *)(v5 + 48);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_1019A0AA8 + 48);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v12,  a2,  a4);
  }

  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

    double result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(double *)(a1 + 40) = result;
    if ((*(_DWORD *)(a2 + 60) & 0x20) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(double *)(a1 + 48) = result;
  }

  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(void **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = operator new(0x60uLL);
      v25[1] = 0LL;
      void v25[2] = 0LL;
      char *v25 = off_101828648;
      *(void *)((char *)v25 + 22) = 0LL;
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      *((_OWORD *)v25 + 4) = 0u;
      *((_OWORD *)v25 + 5) = 0u;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(char **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v25 = &off_101828738;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(char **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v25 = off_1018288A0;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 36) = 0u;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  a2,  *(float *)(v5 + 36),  a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(char **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = (char *)operator new(0x40uLL);
      *(void *)uint64_t v25 = off_101828A08;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *((_DWORD *)v25 + 14) = 0;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  LODWORD(v5) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) |= 8u;
  *(_DWORD *)(a1 + 32) = LODWORD(v5);
  int v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_22:
    LODWORD(v5) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x20u;
    *(_DWORD *)(a1 + 40) = LODWORD(v5);
    if ((*(_DWORD *)(a2 + 52) & 0x40) != 0) {
      goto LABEL_11;
    }
    return *(float *)&v5;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(char **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = (char *)operator new(0x68uLL);
      *(void *)uint64_t v25 = &off_101828BE8;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_OWORD *)(v25 + 72) = 0u;
      *(_OWORD *)(v25 + 84) = 0u;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    uint64_t v10 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(void *)(a1 + 24) = v10;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(char **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v25 = &off_101828CD8;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 36) = 0u;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(char **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = (char *)operator new(0x80uLL);
      *(void *)uint64_t v25 = &off_101828DC8;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(void *)(v25 + 69) = 0LL;
      *((_OWORD *)v25 + 5) = 0u;
      *((_OWORD *)v25 + 6) = 0u;
      *((_OWORD *)v25 + 7) = 0u;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A0CB0 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

    uint64_t v13 = a2[14];
    *(_DWORD *)(a1 + 20) |= 0x40u;
    *(_BYTE *)(a1 + 14) = v13;
    if ((*((_DWORD *)a2 + 5) & 0x80) == 0) {
      return;
    }
LABEL_12:
    int v6 = a2[15];
    *(_DWORD *)(a1 + 20) |= 0x80u;
    *(_BYTE *)(a1 + 15) = v6;
  }

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
LABEL_32:
      if ((unint64_t)v13 >= v12 || *v13 < 0)
      {
        double result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = v33;
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        uint64_t v12 = *((void *)this + 2);
      }

      else
      {
        uint64_t v22 = *v13;
        uint64_t v23 = v13 + 1;
        *((void *)this + 1) = v23;
      }

      *(_DWORD *)(a1 + 24) = v22;
      uint64_t v9 = *(_DWORD *)(a1 + 32) | 2;
      *(_DWORD *)(a1 + 32) = v9;
    }

    while ((unint64_t)v23 >= v12 || *v23 != 26);
    *((void *)this + 1) = v23 + 1;
LABEL_40:
    *(_DWORD *)(a1 + 32) = v9 | 4;
    uint64_t v25 = *(char **)(a1 + 16);
    if (!v25)
    {
      uint64_t v25 = (char *)operator new(0x98uLL);
      *(void *)uint64_t v25 = off_1018294D0;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_OWORD *)(v25 + 72) = 0u;
      *((void *)v25 + 11) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_WORD *)v25 + 48) = 0;
      *((void *)v25 + 18) = 0LL;
      *(_OWORD *)(v25 + 100) = 0u;
      *(_OWORD *)(v25 + 116) = 0u;
      *((_OWORD *)v25 + 8) = 0u;
      *(void *)(a1 + 16) = v25;
    }

    uint64_t v26 = (char *)*((void *)this + 1);
    if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
    {
    }

    else
    {
      uint64_t v35 = *v26;
      *((void *)this + 1) = v26 + 1;
    }

    uint64_t v27 = *((_DWORD *)this + 14);
    uint64_t v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    uint64_t v31 = *((_DWORD *)this + 14);
    uint64_t v19 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (v32 < 0 == v19) {
      *((_DWORD *)this + 14) = v32;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      double result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 28),  a3);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0D28 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 44),  a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 48),  a2,  a4);
  }
  return result;
}

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A0D70 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 68) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 68) & 8) == 0) {
      return result;
    }
LABEL_16:
    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 68) |= 8u;
    *(double *)(a1 + 32) = result;
  }

  return result;
}

    uint64_t v9 = *(_DWORD *)(a2 + 24);
    if (v9 >= 3) {
      sub_10123047C();
    }
    *(_DWORD *)(a1 + 56) |= 4u;
    *(_DWORD *)(a1 + 24) = v9;
    int v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
      {
LABEL_10:
        if ((v6 & 0x20) != 0)
        {
          uint64_t v7 = *(_DWORD *)(a2 + 40);
          if (v7 >= 4) {
            sub_10123042C();
          }
          *(_DWORD *)(a1 + 56) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v7;
          int v6 = *(_DWORD *)(a2 + 56);
        }

        if ((v6 & 0x40) != 0)
        {
          int v8 = *(_BYTE *)(a2 + 44);
          *(_DWORD *)(a1 + 56) |= 0x40u;
          *(_BYTE *)(a1 + 44) = v8;
          int v6 = *(_DWORD *)(a2 + 56);
        }

        if ((v6 & 0x80) != 0)
        {
          LODWORD(v5) = *(_DWORD *)(a2 + 48);
          *(_DWORD *)(a1 + 56) |= 0x80u;
          *(_DWORD *)(a1 + 48) = v5;
        }

        return *(float *)&v5;
      }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_workoutType),  @"workoutType");
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  PBDataWriterWriteDoubleField(a3, 4LL, self->_durationInSeconds);
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  *((void *)a3 + 1) = *(void *)&self->_durationInSeconds;
  *((_WORD *)a3 + 52) |= 1u;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  *((_DWORD *)result + 24) = self->_workoutType;
  *((_WORD *)result + 52) |= 0x1000u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  self->_durationInSeconds = *((double *)a3 + 1);
  *(_WORD *)&self->_has |= 1u;
  uint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x20) == 0)
  {
LABEL_6:
    if ((v3 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  *(double *)(a1 + 136) = a3;
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  if (*(_BYTE *)(a1 + 216)) {
    *(_BYTE *)(a1 + 216) = 0;
  }
  int v5 = 1;
LABEL_23:
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10182B748);
  }
  int v8 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 104);
    v10[0] = 68289538;
    v10[1] = 0;
    int v11 = 2082;
    uint64_t v12 = "";
    uint64_t v13 = 2050;
    uint64_t v14 = v9;
    uint64_t v15 = 1026;
    uint64_t v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Workout change, currentWorkout:%{public}ld, workoutStarted:%{public}hhd}",  (uint8_t *)v10,  0x22u);
  }

  *((void *)result + 2) = *(void *)&self->_startTime;
  *((_WORD *)result + 30) |= 2u;
  if ((*(_WORD *)&self->_has & 0x100) == 0) {
    return result;
  }
LABEL_11:
  *((_BYTE *)result + 57) = self->_isVehicleConnected;
  *((_WORD *)result + 30) |= 0x100u;
  return result;
}

        -[CLKeychainItemWrapper initializeKeychainItemWithIdentifier:keyType:]( v6,  "initializeKeychainItemWithIdentifier:keyType:",  a3,  a4);
        goto LABEL_21;
      }

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10182FC88);
      }
      uint64_t v15 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        uint64_t v21 = 0;
        uint64_t v22 = 2082;
        uint64_t v23 = "";
        uint64_t v24 = 1026;
        LODWORD(v25) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Initial query to CLKeychainItemWrapper failed, error:%{public}d}",  buf,  0x18u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10182FC88);
        }
      }

      uint64_t v16 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        uint64_t v21 = 0;
        uint64_t v22 = 2082;
        uint64_t v23 = "";
        uint64_t v24 = 1026;
        LODWORD(v25) = v11;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Initial query to CLKeychainItemWrapper failed",  "{msg%{public}.0s:Initial query to CLKeychainItemWrapper failed, error:%{public}d}",  buf,  0x18u);
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10182FC88);
      }
      uint64_t v13 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "nil identifier given to CLKeychainItemWrapper",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10182FC88);
        }
        LOWORD(result[0]) = 0;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "nil identifier given to CLKeychainItemWrapper",  result,  2);
        sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLKeychainItemWrapper initWithIdentifier:keyType:]", "%s\n", v14);
      }
    }

    return 0LL;
  }

  return v6;
}

  *(void *)((char *)v18
  uint64_t v19 = v16;
  std::streambuf::~streambuf(&v20);
  std::ios::~ios(v21);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

    uint64_t v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 20) = v10;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }

  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

  objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_radius),  @"radius");
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_10:
    if ((has & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PBDataWriterWriteUint32Field(a3, self->_serviceMaskOperator, 9LL);
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_11:
    if ((has & 0x200) == 0) {
      return;
    }
LABEL_22:
    PBDataWriterWriteBOOLField(a3, self->_clearClient, 11LL);
    return;
  }

  *((_DWORD *)a3 + 11) = self->_serviceMaskOperator;
  *((_WORD *)a3 + 36) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_10:
    if ((has & 0x200) == 0) {
      return;
    }
    goto LABEL_11;
  }

  *((_DWORD *)v5 + 11) = self->_serviceMaskOperator;
  *((_WORD *)v5 + 36) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((has & 0x200) != 0)
  {
LABEL_11:
    *((_BYTE *)v5 + 68) = self->_clearClient;
    *((_WORD *)v5 + 36) |= 0x200u;
  }

  return v5;
}

  self->_radius = *((double *)a3 + 3);
  *(_WORD *)&self->_has |= 4u;
  int v5 = *((_WORD *)a3 + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

    *(_DWORD *)(a1 + 72) = 4;
    uint64_t v9 = *a2;
    uint64_t v19 = 4;
    uint64_t v20 = &v19;
    double result = (uint64_t)sub_10044BD34((uint64_t **)(a1 + 48), &v19, (uint64_t)&unk_1012CF090, &v20);
    goto LABEL_38;
  }

  if ((int)a3[1] < 1)
  {
    *(_DWORD *)(a1 + 72) = 3;
    uint64_t v9 = *a2;
    uint64_t v19 = 3;
    uint64_t v20 = &v19;
    double result = (uint64_t)sub_10044BD34((uint64_t **)(a1 + 48), &v19, (uint64_t)&unk_1012CF090, &v20);
    goto LABEL_38;
  }

  isTypeRunning = CLMotionActivity::isTypeRunning(*a3, v13);
  int v8 = (uint64_t **)(a1 + 48);
  if (isTypeRunning)
  {
    *(_DWORD *)(a1 + 72) = 5;
    uint64_t v9 = *a2;
    uint64_t v19 = 5;
  }

  else
  {
    *(_DWORD *)(a1 + 72) = 3;
    uint64_t v9 = *a2;
    uint64_t v19 = 3;
  }

        if (v19)
        {
          v7 += 16;
          if (v7 - (_BYTE *)*v6 == 4096)
          {
            uint64_t v22 = (char *)v6[1];
            ++v6;
            uint64_t v7 = v22;
          }
        }

        if (v10 != 1.79769313e308) {
          goto LABEL_33;
        }
        goto LABEL_27;
      }
    }
  }

  *(double *)&int v11 = 1.79769313e308;
LABEL_27:
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10183BC80);
  }
  uint64_t v23 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "pressure too far from reference data", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10183BC80);
    }
    v29[0] = 0;
    uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  2LL,  "pressure too far from reference data",  v29,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibrationBiasEstimator getClosestEntryToRefTime:inPressureQueue:]",  "%s\n",  v28);
  }

  uint64_t v12 = 1.79769313e308;
LABEL_33:
  uint64_t v24 = 1.79769313e308;
  uint64_t v25 = v12;
  uint64_t v26 = *(double *)&v11;
  uint64_t v27 = 1.79769313e308;
  result.var3 = v27;
  result.var2 = v24;
  result.var1 = v26;
  result.var0 = v25;
  return result;
}

    dispatch_once(&qword_101934A70, &stru_10183D310);
    goto LABEL_18;
  }

  uint64_t v16 = v11 + (float)(v12 * v13);
  char v17 = v16 * *v14;
  *a1 = (float)(*a3 * (float)(1.0 / v15)) * *a1;
  uint64_t v18 = v15 + (float)(v16 * v17);
  if (v18 > 0.0)
  {
    uint64_t v19 = a1[2];
    a1[1] = (float)(v15 * (float)(1.0 / v18)) * a1[1];
    a1[2] = v19 + (float)(v10 * (float)-(float)(v16 * (float)(1.0 / v15)));
    uint64_t v20 = v10 + (float)(v17 * v19);
    uint64_t v21 = (float)(1.0 / v18) * *a4;
    uint64_t v22 = (float *)sub_1004E2C54((uint64_t)&v27, 0LL);
    void *v22 = *v22 + (float)(v21 * v20);
    uint64_t v23 = (float *)sub_1004E2C54((uint64_t)&v27, 1uLL);
    *uint64_t v23 = *v23 + (float)(v21 * v17);
    return;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10183D310);
  }
  uint64_t v25 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    uint64_t v31 = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%zu: alpha <= 0, matrix ! positive definite",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  uint64_t v12 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(void *)(a1 + 24) = v12;
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(void *)(a1 + 40) = v14;
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(void *)(a1 + 48) = v6;
    int v5 = *(_DWORD *)(a2 + 72);
  }

    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v10 = *(char **)(a1 + 24);
    if (!v10)
    {
      uint64_t v10 = (char *)operator new(0x40uLL);
      *(void *)uint64_t v10 = off_10183DE40;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *((void *)v10 + 7) = 0LL;
      *(void *)(a1 + 24) = v10;
    }

    int v11 = *(void *)(a2 + 24);
    if (!v11) {
      int v11 = *(void *)(qword_1019A1100 + 24);
    }
    sub_100501D74((uint64_t)v10, v11);
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
LABEL_26:
      uint64_t v13 = *(_DWORD *)(a2 + 40);
      if (v13 >= 5) {
        sub_10123C310();
      }
      *(_DWORD *)(a1 + 48) |= 0x10u;
      *(_DWORD *)(a1 + 40) = v13;
      return;
    }

  if (qword_101934740 != -1) {
    dispatch_once(&qword_101934740, &stru_101841208);
  }
  uint64_t v14 = (os_log_s *)qword_101934748;
  if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *(double *)(a1 + 2592);
    uint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
    *(_DWORD *)uint64_t buf = 134218752;
    uint64_t v33 = v15;
    uint64_t v34 = 2048;
    uint64_t v35 = v12;
    uint64_t v36 = 1026;
    uint64_t v37 = v6;
    unint64_t v38 = 2050;
    uint64_t v39 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[FormModels] StrideLengthCalibration,prevStrideLengthBiasOffset,%.2f,newStrideLengthBiasOffset,%.2f,validCalibrati onsCount,%{public}d,totalCalibrationTracks,%{public}lu,",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_101841208);
    }
    uint64_t v19 = *(void *)(a1 + 2592);
    uint64_t v20 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
    uint64_t v24 = 134218752;
    uint64_t v25 = v19;
    uint64_t v26 = 2048;
    uint64_t v27 = v12;
    uint64_t v28 = 1026;
    uint64_t v29 = v6;
    uint64_t v30 = 2050;
    uint64_t v31 = v20;
    LODWORD(v23) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormModels] StrideLengthCalibration,prevStrideLengthBiasOffset,%.2f,newStrideLengthBiasOffset,%.2f,validCalibrati onsCount,%{public}d,totalCalibrationTracks,%{public}lu,",  &v24,  v23);
    uint64_t v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormModels::feedCalibrationTracks(const std::vector<CLStrideCalEntry> &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  *(double *)(a1 + 2592) = v12;
}

      p_fStepsBuffer = &self->fStepsBuffer;
      if (-[CMStrideCalibrationStepCountBuffer stepsInWindow](self->fStepsBuffer, "stepsInWindow") <= 0x63)
      {
        -[CMStrideCalLocationFSM requestTransitionToLocationState:]( self->fStrideCalLocationFSM,  "requestTransitionToLocationState:",  2LL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101843B48);
        }
        uint64_t v15 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = -[CMStrideCalibrationStepCountBuffer stepsInWindow](*p_fStepsBuffer, "stepsInWindow");
          *(_DWORD *)uint64_t buf = 67109120;
          LODWORD(v32) = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "TrackClose,Pass,ForcedNotSufficientSteps,Steps,%d",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_101843B48);
          }
          uint64_t v24 = qword_101934518;
          uint64_t v25 = -[CMStrideCalibrationStepCountBuffer stepsInWindow](*p_fStepsBuffer, "stepsInWindow");
          uint64_t v29 = 67109120;
          LODWORD(v30) = v25;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  2LL,  "TrackClose,Pass,ForcedNotSufficientSteps,Steps,%d",  &v29);
          uint64_t v27 = (uint8_t *)v26;
          sub_10029211C("Generic", 1LL, 0, 2LL, "-[CMStrideCalibrator fsm:didUpdateLocationAtTime:]", "%s\n", v26);
          if (v27 != buf) {
            free(v27);
          }
        }

        int v8 = 1;
      }

      if (-[CMStrideCalibrationStepCountBuffer stepsInWindow](*p_fStepsBuffer, "stepsInWindow") >= 0xA)
      {
        if (!v8) {
          return;
        }
        goto LABEL_38;
      }

    v5 += 64LL;
    if (v5 == v6) {
      goto LABEL_31;
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_generationTimeSecs),  @"generationTimeSecs");
  if ((*(_BYTE *)&self->_has & 2) != 0) {
LABEL_6:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_expirationAgeSecs),  @"expirationAgeSecs");
LABEL_7:
  if (-[NSMutableArray count](self->_macs, "count"))
  {
    int v5 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[NSMutableArray count](self->_macs, "count"));
    uint64_t v12 = 0u;
    uint64_t v13 = 0u;
    uint64_t v14 = 0u;
    uint64_t v15 = 0u;
    macs = self->_macs;
    uint64_t v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( macs,  "countByEnumeratingWithState:objects:count:",  &v12,  v16,  16LL);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(macs);
          }
          -[NSMutableArray addObject:]( v5,  "addObject:",  [*(id *)(*((void *)&v12 + 1) + 8 * (void)i) dictionaryRepresentation]);
        }

        int v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( macs,  "countByEnumeratingWithState:objects:count:",  &v12,  v16,  16LL);
      }

      while (v8);
    }

    [v3 setObject:v5 forKey:@"macs"];
  }

  return v3;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  if ((v5[13] & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[11],  a2,  a4);
  }
  return result;
}

        if (v8 != 4)
        {
          continue;
        }

        return 1LL;
      default:
        int v8 = TagFallback & 7;
        goto LABEL_20;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 38),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 39),  (BOOL)a2,  a4);
  }
  return result;
}

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    int v11 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 104) |= 0x100u;
    *(void *)(a1 + 56) = v11;
    int v5 = *(_DWORD *)(a2 + 104);
    if ((v5 & 0x200) == 0)
    {
LABEL_23:
      if ((v5 & 0x400) == 0) {
        goto LABEL_24;
      }
      goto LABEL_32;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_23;
  }

  uint64_t v12 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 104) |= 0x200u;
  *(void *)(a1 + 64) = v12;
  int v5 = *(_DWORD *)(a2 + 104);
  if ((v5 & 0x400) == 0)
  {
LABEL_24:
    if ((v5 & 0x800) == 0) {
      goto LABEL_25;
    }
    goto LABEL_33;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

    uint64_t v12 = *(_DWORD *)(a2 + 20);
    if (v12 >= 4) {
      sub_10124173C();
    }
    *(_DWORD *)(a1 + 40) |= 8u;
    *(_DWORD *)(a1 + 20) = v12;
    int v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    int v6 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v6;
    int v5 = *(_DWORD *)(a2 + 40);
LABEL_10:
    if ((v5 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 0x20u;
      uint64_t v7 = *(void **)(a1 + 24);
      if (!v7)
      {
        uint64_t v7 = operator new(0x20uLL);
        v7[1] = 0LL;
        _DWORD v7[2] = 0LL;
        void *v7 = off_101844F18;
        *((_DWORD *)v7 + 6) = 0;
        *(void *)(a1 + 24) = v7;
      }

      int v8 = *(void *)(a2 + 24);
      if (!v8) {
        int v8 = *(void *)(qword_1019A12B0 + 24);
      }
      sub_1006232CC(v7, v8);
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 32),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

    int v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }

    uint64_t v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v12;
    if ((*(_DWORD *)(a2 + 40) & 0x20) == 0) {
      return;
    }
LABEL_10:
    int v6 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v6;
  }

  uint64_t v12 = a2[6];
  if (v12 >= 6) {
    sub_101241854();
  }
  a1[12] |= 0x10u;
  a1[6] = v12;
  int v5 = a2[12];
  if ((v5 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_23:
  uint64_t v14 = a2[8];
  a1[12] |= 0x40u;
  a1[8] = v14;
  int v5 = a2[12];
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = a2[9];
    a1[12] |= 0x80u;
    a1[9] = v6;
    int v5 = a2[12];
  }

  uint64_t v12 = a2[6];
  a1[12] |= 0x10u;
  a1[6] = v12;
  int v5 = a2[12];
  if ((v5 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = a2[8];
  if (v14 >= 6) {
    sub_1012418CC();
  }
  a1[12] |= 0x40u;
  a1[8] = v14;
  int v5 = a2[12];
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = a2[9];
    a1[12] |= 0x80u;
    a1[9] = v6;
    int v5 = a2[12];
  }

  if ((v13 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 0x100u;
    uint64_t v15 = *(void **)(a1 + 64);
    if (!v15)
    {
      uint64_t v15 = operator new(0x20uLL);
      v15[1] = 0LL;
      v15[2] = 0LL;
      const std::string *v15 = off_101844F18;
      *((_DWORD *)v15 + 6) = 0;
      *(void *)(a1 + 64) = v15;
    }

    uint64_t v16 = *(void *)(a2 + 64);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_1019A1398 + 64);
    }
    sub_1006232CC(v15, v16);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 40),  a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 44),  (BOOL)a2,  a4);
  }
  return result;
}

    char v17 = *(_DWORD *)(a2 + 16);
    a1[13] |= 4u;
    a1[4] = v17;
    if ((*(_DWORD *)(a2 + 52) & 8) == 0) {
      return;
    }
LABEL_16:
    uint64_t v14 = *(_DWORD *)(a2 + 20);
    a1[13] |= 8u;
    a1[5] = v14;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 56),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 68) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 60),  a2,  a4);
  }
  return result;
}

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  int v6 = v5[17];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  int v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 56),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 68) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 60),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 56),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 44),  (BOOL)a2,  a4);
  }
  return result;
}

    *a3 = v4;
    return a2;
  }

  int v6 = *(void *)a2;
  if ((float *)*a1 == a2)
  {
    int v8 = a2;
  }

  else
  {
    if (v6)
    {
      uint64_t v7 = *(void *)a2;
      do
      {
        int v8 = (float *)v7;
        uint64_t v7 = *(void *)(v7 + 8);
      }

      while (v7);
    }

    else
    {
      uint64_t v9 = a2;
      do
      {
        int v8 = (float *)*((void *)v9 + 2);
        uint64_t v10 = *(void *)v8 == (void)v9;
        uint64_t v9 = v8;
      }

      while (v10);
    }

    if (*a4 < v8[8])
    {
      while (1)
      {
        int v11 = *(void *)v4;
        a2 = v4;
        if (!*(void *)v4) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v4 = (float *)v11;
          int v11 = *(void *)(v11 + 8);
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 2;
            goto LABEL_20;
          }
        }
      }
    }
  }

  if (v6)
  {
    *a3 = v8;
    return v8 + 2;
  }

  else
  {
    *a3 = a2;
  }

  return a2;
}

  uint64_t v23 = sub_1006E27E8();
  sub_100413284(v23, buf);
  uint64_t v24 = (uint64_t *)(a1 + 336);
  uint64_t v25 = sub_1002A82BC(*(uint64_t *)&buf[0], "HRR_MaxDiffSteadyStateHRMinRecoveryHR", (void *)(a1 + 336));
  uint64_t v26 = v25;
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_24;
  }
  uint64_t v28 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    uint64_t v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v26) {
      goto LABEL_30;
    }
  }

  else
  {
LABEL_24:
    if (!v25) {
      goto LABEL_30;
    }
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  uint64_t v30 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *v24;
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Estimator,fMaxDiffSteadyStateHRMinRecoveryHR overridden (%{public}f)",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    uint64_t v81 = *v24;
    v100 = 134349056;
    v101 = v81;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,fMaxDiffSteadyStateHRMinRecoveryHR overridden (%{public}f)",  &v100,  v99);
    v83 = (char *)v82;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRR ecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)",  "%s\n",  v82);
  }

  uint64_t v12 = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 24) |= 0x10u;
  *(_BYTE *)(a1 + 12) = v12;
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = *(_BYTE *)(a2 + 14);
  *(_DWORD *)(a1 + 24) |= 0x40u;
  *(_BYTE *)(a1 + 14) = v14;
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(_BYTE *)(a2 + 15);
    *(_DWORD *)(a1 + 24) |= 0x80u;
    *(_BYTE *)(a1 + 15) = v6;
    int v5 = *(_DWORD *)(a2 + 24);
  }

  int v11 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 80) |= 8u;
  *(void *)(a1 + 32) = v11;
  int v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_22:
    uint64_t v13 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 80) |= 0x20u;
    *(void *)(a1 + 48) = v13;
    int v5 = *(_DWORD *)(a2 + 80);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }

    goto LABEL_23;
  }

  int v8 = *(_DWORD *)(v2 + 52) != 0;
  uint64_t v9 = *(unsigned __int8 *)(v2 + 40);
  if (qword_101934550 != -1) {
    dispatch_once(&qword_101934550, &stru_10184B208);
  }
  uint64_t v10 = (os_log_s *)qword_101934558;
  if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(v2 + 52);
    uint64_t v12 = *(unsigned __int8 *)(v2 + 40);
    *(_DWORD *)uint64_t buf = 67240704;
    uint64_t v37 = v11;
    unint64_t v38 = 1026;
    uint64_t v39 = v12;
    __int128 v40 = 1026;
    uint64_t v41 = v9 != v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[CLSPUMagicMountControl] Number of clients,%{public}u, enabled,%{public}d, shouldConfigure,%{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10184B208);
    }
    char v17 = *(_DWORD *)(v2 + 52);
    uint64_t v18 = *(unsigned __int8 *)(v2 + 40);
    LODWORD(v31) = 67240704;
    HIDWORD(v31) = v17;
    uint64_t v32 = 1026;
    uint64_t v33 = v18;
    uint64_t v34 = 1026;
    uint64_t v35 = v9 != v8;
    LODWORD(v30) = 20;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  0LL,  "[CLSPUMagicMountControl] Number of clients,%{public}u, enabled,%{public}d, shouldConfigure,%{public}d",  &v31,  v30);
    uint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  if (sub_1006E4468(v2) && !sub_1006E47C4(v2))
  {
    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10184B208);
    }
    uint64_t v13 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[CLMagicMountControl] APWakesAllowed command failed",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10184B208);
      }
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  16LL,  "[CLMagicMountControl] APWakesAllowed command failed",  &v31,  v30);
      uint64_t v26 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }
  }

  if (v9 == v8)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      HIBYTE(v30) = 5;
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10184B208);
      }
      uint64_t v14 = (os_log_s *)qword_101934558;
      if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[CLMagicMountControl] Querying current MagicMount state",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934550 != -1) {
          dispatch_once(&qword_101934550, &stru_10184B208);
        }
        LOWORD(v31) = 0;
        LODWORD(v30) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  0LL,  "[CLMagicMountControl] Querying current MagicMount state",  &v31,  v30);
        uint64_t v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke",  "%s\n",  v23);
        if (v24 != buf) {
          free(v24);
        }
      }

      if (!sub_100CD5940(v2, (uint64_t)&v30 + 7, (char *)1))
      {
        if (qword_101934550 != -1) {
          dispatch_once(&qword_101934550, &stru_10184B208);
        }
        uint64_t v15 = (os_log_s *)qword_101934558;
        if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[CLMagicMountControl] Query failed",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934550 != -1) {
            dispatch_once(&qword_101934550, &stru_10184B208);
          }
          LOWORD(v31) = 0;
          LODWORD(v30) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  16LL,  "[CLMagicMountControl] Query failed",  &v31,  v30);
          uint64_t v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }
      }
    }

    if (qword_101934550 != -1) {
      dispatch_once(&qword_101934550, &stru_10184B208);
    }
    uint64_t v16 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "[CLSPUMagicMountControl] No configure needed.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10184B208);
      }
      LOWORD(v31) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  2LL,  "[CLSPUMagicMountControl] No configure needed.",  &v31,  v30);
      uint64_t v22 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSPUMagicMountControl::setMagicMountDetectionEnabled(BOOL)_block_invoke",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

  else
  {
    *(_BYTE *)(v2 + 40) = v8;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_100CD59E8(v2);
  }

  if (sub_1006E4468(v2))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1006E47C4(v2);
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
    {
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10184B208);
      }
      int v8 = (os_log_s *)qword_101934558;
      if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[CLMagicMountControl] APWakesAllowed command failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934550 != -1) {
          dispatch_once(&qword_101934550, &stru_10184B208);
        }
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934558,  16LL,  "[CLMagicMountControl] APWakesAllowed command failed",  v13,  v12);
        uint64_t v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSPUMagicMountControl::setAPWakesAllowed(BOOL)_block_invoke",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[9],  v4,  a4);
  int v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[9],  v4,  a4);
  int v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

  uint64_t v9 = *(void **)(a1 + 48);
  if (!v9) {
    goto LABEL_23;
  }
  if (((*(uint64_t (**)(void *, __int128 *, double))(*v9 + 24LL))(v9, &v50, *(double *)(a1 + 104)) & 1) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 48);
LABEL_23:
    uint64_t v77 = 0u;
    uint64_t v78 = 0u;
    memset(v66, 0, sizeof(v66));
    if (sub_1007B8264(v9, (uint64_t)&v77, v66, *(double *)(a1 + 104)))
    {
      uint64_t v13 = *((void *)&v78 + 1);
      if (*((void *)&v78 + 1) == *(void *)v78) {
        uint64_t v13 = *(void *)(v78 - 8) + 4032LL;
      }
      uint64_t v14 = *(_OWORD *)(v13 - 192);
      uint64_t v15 = *(_OWORD *)(v13 - 176);
      uint64_t v16 = *(_OWORD *)(v13 - 144);
      uint8_t v52 = *(_OWORD *)(v13 - 160);
      char v53 = v16;
      uint64_t v50 = v14;
      unsigned int v51 = v15;
      char v17 = *(_OWORD *)(v13 - 128);
      uint64_t v18 = *(_OWORD *)(v13 - 112);
      uint64_t v19 = *(_OWORD *)(v13 - 80);
      uint64_t v56 = *(_OWORD *)(v13 - 96);
      uint64_t v57 = v19;
      uint64_t v54 = v17;
      uint64_t v55 = v18;
      uint64_t v10 = *(_OWORD *)(v13 - 64);
      int v11 = *(_OWORD *)(v13 - 48);
      uint64_t v12 = *(_OWORD *)(v13 - 32);
      uint64_t v20 = *(_OWORD *)(v13 - 16);
      uint64_t v60 = v12;
      __int128 v61 = v20;
      uint64_t v58 = v10;
      unint64_t v59 = v11;
    }

    else
    {
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_101859F20);
      }
      uint64_t v21 = (os_log_s *)qword_101934668;
      if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "last odometer entry not found", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934660 != -1) {
          dispatch_once(&qword_101934660, &stru_101859F20);
        }
        LOWORD(v48) = 0;
        LODWORD(v47) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  2LL,  "last odometer entry not found",  &v48,  *(void *)&v47);
        char v46 = (uint8_t *)v45;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::finalizeRun()", "%s\n", v45);
        if (v46 != buf) {
          free(v46);
        }
      }
    }
  }

  LODWORD(sub_10005F90C(v11, v10) = DWORD1(v63);
  LODWORD(v11) = v63;
  *(double *)&uint64_t v22 = (double)(unint64_t)v11;
  uint64_t v23 = (double)(unint64_t)v10 - *(double *)&v22;
  LODWORD(v22) = *(_DWORD *)(a1 + 268);
  LODWORD(v12) = *(_DWORD *)(a1 + 264);
  uint64_t v24 = (v23 + (double)(unint64_t)v12 - (double)v22) / 100.0;
  uint64_t v25 = fabs(v24);
  *(double *)&int v11 = *(double *)&v53 - *(double *)(a1 + 360);
  uint64_t v26 = sqrt(*(double *)&v11 * *(double *)&v11 + v24 * v24);
  uint64_t v27 = *(double *)(a1 + 104);
  uint64_t v28 = *(double *)(a1 + 1520);
  if (v27 - v28 == 0.0) {
    uint64_t v29 = 0.0;
  }
  else {
    uint64_t v29 = v26 / (v27 - v28);
  }
  uint64_t v79 = 0LL;
  uint64_t v77 = 0u;
  uint64_t v78 = 0u;
  uint64_t v80 = v28;
  uint64_t v81 = v27;
  uint64_t v82 = v26;
  v83 = v29;
  uint64_t v84 = *(double *)(a1 + 1536);
  uint64_t v30 = v84;
  uint64_t v31 = atan2(v25, *(double *)&v11);
  uint64_t v85 = v31;
  uint64_t v86 = v25;
  uint64_t v32 = v30 < 4.5 && v26 < 75.0;
  if (v32 || v24 == 0.0 || vabdd_f64(v27, v28) < 3.0)
  {
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    uint64_t v35 = (os_log_s *)qword_101934668;
    if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134219008;
      v88 = v28;
      uint64_t v89 = 2048;
      uint64_t v90 = v27;
      uint64_t v91 = 2048;
      v92 = v26;
      v93 = 2048;
      unint64_t v94 = v30;
      double v95 = 2048;
      double v96 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Suppressing run,startTime,%f,endTime,%f,distance,%f,maxSpeed,%f,elevation,%f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_101859F20);
      }
      LODWORD(v66[0]) = 134219008;
      *(double *)((char *)v66 + 4) = v28;
      WORD6(v66[0]) = 2048;
      *(double *)((char *)v66 + 14) = v27;
      WORD3(v66[1]) = 2048;
      *((double *)&v66[1] + 1) = v26;
      uint64_t v67 = 2048;
      uint64_t v68 = v30;
      uint64_t v69 = 2048;
      uint64_t v70 = v25;
      LODWORD(v47) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "Suppressing run,startTime,%f,endTime,%f,distance,%f,maxSpeed,%f,elevation,%f",  COERCE_DOUBLE(v66),  v47,  v48,  v49,  *(double *)&v50);
      uint64_t v42 = (uint8_t *)v41;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::finalizeRun()", "%s\n", v41);
      if (v42 != buf) {
        free(v42);
      }
    }

    sub_100F45B84(a1 + 504);
  }

  else
  {
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    uint64_t v33 = (os_log_s *)qword_101934668;
    if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = *(void *)(a1 + 1528);
      *(_DWORD *)uint64_t buf = 134219776;
      v88 = v28;
      uint64_t v89 = 2048;
      uint64_t v90 = v27;
      uint64_t v91 = 2048;
      v92 = v26;
      v93 = 2048;
      unint64_t v94 = v25;
      double v95 = 2048;
      double v96 = v29;
      v97 = 2048;
      v98 = v30;
      v99 = 2048;
      v100 = v31;
      v101 = 2048;
      v102 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "End of run stats,startTime,%lf,endTime,%lf,runDistance,%f,runElevationDescent,%f,runAvgSpeed,%f,runMaxSpeed,%f,r unSlope,%f,runMaxFilteredSpeed,%f",  buf,  0x52u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_101859F20);
      }
      unint64_t v38 = *(void *)(a1 + 1528);
      LODWORD(v66[0]) = 134219776;
      *(double *)((char *)v66 + 4) = v28;
      WORD6(v66[0]) = 2048;
      *(double *)((char *)v66 + 14) = v27;
      WORD3(v66[1]) = 2048;
      *((double *)&v66[1] + 1) = v26;
      uint64_t v67 = 2048;
      uint64_t v68 = v25;
      uint64_t v69 = 2048;
      uint64_t v70 = v29;
      uint64_t v71 = 2048;
      uint64_t v72 = v30;
      uint64_t v73 = 2048;
      uint64_t v74 = v31;
      uint64_t v75 = 2048;
      uint64_t v76 = v38;
      LODWORD(v47) = 82;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "End of run stats,startTime,%lf,endTime,%lf,runDistance,%f,runElevationDescent,%f,runAvgSpeed,%f,runMaxSpeed,%f,r unSlope,%f,runMaxFilteredSpeed,%f",  COERCE_DOUBLE(v66),  v47,  v48,  v49,  *(double *)&v50,  *((double *)&v50 + 1),  *(double *)&v51,  *((double *)&v51 + 1));
      __int128 v40 = (uint8_t *)v39;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::finalizeRun()", "%s\n", v39);
      if (v40 != buf) {
        free(v40);
      }
    }

    sub_1005318F4(*(void *)(a1 + 32), (uint64_t)&v77);
    sub_100F45634(a1 + 504, (uint64_t)&v77, 1);
  }

  sub_100831224(a1);
}

  uint64_t v28 = *((_OWORD *)v10 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v10;
  *((_OWORD *)a2 + 1) = v28;
  a1[3].i8[0] = 1;
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10185A520);
  }
  uint64_t v29 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v30 = *((void *)a2 + 2);
    uint64_t v31 = *((void *)a2 + 3);
    uint64_t v32 = *a2;
    uint64_t v33 = *((void *)a2 + 1);
    uint64_t v34 = a1[2].u64[1];
    uint64_t v35 = a1[3].u8[0];
    if (v34 >= 2) {
      uint64_t v36 = *(void *)(*(void *)(a1->i64[1] + (((unint64_t)(a1[2].i64[0] + 1) >> 4) & 0xFFFFFFFFFFFFFF8LL))
    }
                      + 32 * ((a1[2].i64[0] + 1) & 0x7F)
                      + 8);
    else {
      uint64_t v36 = 0LL;
    }
    *(_DWORD *)uint64_t buf = 134285569;
    uint64_t v67 = v31;
    uint64_t v68 = 1026;
    uint64_t v69 = v32;
    uint64_t v70 = 2050;
    uint64_t v71 = v30;
    uint64_t v72 = 2050;
    uint64_t v73 = v33;
    uint64_t v74 = 2050;
    uint64_t v75 = a3;
    uint64_t v76 = 2050;
    uint64_t v77 = v12;
    uint64_t v78 = 1026;
    uint64_t v79 = v34;
    uint64_t v80 = 1026;
    uint64_t v81 = v35;
    uint64_t v82 = 2050;
    v83 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "HRSelected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,time,%{public}f,oldestTime,%{publ ic}f,bufSize,%{public}d,fOldestHRUsed,%{public}d,secondSampleTime,%{public}f\n",  buf,  0x50u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185A520);
    }
    uint64_t v37 = *((void *)a2 + 2);
    unint64_t v38 = *((void *)a2 + 3);
    uint64_t v39 = *a2;
    __int128 v40 = *((void *)a2 + 1);
    uint64_t v41 = a1[2].u64[1];
    uint64_t v42 = a1[3].u8[0];
    if (v41 >= 2) {
      char v43 = *(void *)(*(void *)(a1->i64[1] + (((unint64_t)(a1[2].i64[0] + 1) >> 4) & 0xFFFFFFFFFFFFFF8LL))
    }
                      + 32 * ((a1[2].i64[0] + 1) & 0x7F)
                      + 8);
    else {
      char v43 = 0LL;
    }
    v48 = 134285569;
    v49 = v38;
    uint64_t v50 = 1026;
    unsigned int v51 = v39;
    uint8_t v52 = 2050;
    char v53 = v37;
    uint64_t v54 = 2050;
    uint64_t v55 = v40;
    uint64_t v56 = 2050;
    uint64_t v57 = a3;
    uint64_t v58 = 2050;
    unint64_t v59 = v12;
    uint64_t v60 = 1026;
    __int128 v61 = v41;
    char v62 = 1026;
    uint64_t v63 = v42;
    uint64_t v64 = 2050;
    uint64_t v65 = v43;
    LODWORD(v46) = 80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "HRSelected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,time,%{public}f,oldestTime,%{publ ic}f,bufSize,%{public}d,fOldestHRUsed,%{public}d,secondSampleTime,%{public}f\n",  &v48,  v46);
    uint64_t v45 = (uint8_t *)v44;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLVO2MaxInputCollector::getMostRecentHRSample(CFAbsoluteTime, HRSample &)",  "%s\n",  v44);
    if (v45 != buf) {
      free(v45);
    }
  }

  return 1LL;
}

  uint64_t v23 = *(void *)(v12 + 48);
  uint64_t v24 = *(void *)(a4 + 48);
  if (v23 == v24)
  {
    uint64_t v25 = *(void *)(v12 + 56);
    uint64_t v26 = *(void *)(a4 + 56);
    uint64_t v27 = v25 < v26;
    if (v25 == v26)
    {
      uint64_t v28 = *(void *)(v12 + 64);
      uint64_t v29 = *(void *)(a4 + 64);
      uint64_t v27 = v28 < v29;
      if (v28 == v29) {
        uint64_t v27 = *(_OWORD *)(v12 + 72) < *(_OWORD *)(a4 + 72);
      }
    }

    if (v27) {
      return result;
    }
    if (*(void *)(v12 + 72) == *(void *)(a4 + 72) && *(void *)(v12 + 64) == *(void *)(a4 + 64))
    {
      uint64_t v30 = v25 == v26 && *(void *)(v12 + 80) == *(void *)(a4 + 80);
      if (v30 && (sub_10085DFAC(v12, a4, a3) & 1) != 0) {
        return result;
      }
    }
  }

  else if (v23 < v24)
  {
    return result;
  }

  uint64_t v31 = *(_OWORD *)(a4 + 176);
  uint64_t v89 = *(_OWORD *)(a4 + 160);
  uint64_t v90 = v31;
  uint64_t v91 = *(void *)(a4 + 192);
  uint64_t v32 = *(_OWORD *)(a4 + 112);
  uint64_t v85 = *(_OWORD *)(a4 + 96);
  uint64_t v86 = v32;
  uint64_t v33 = *(__n128 *)(a4 + 144);
  uint64_t v87 = *(_OWORD *)(a4 + 128);
  v88 = v33;
  uint64_t v34 = *(_OWORD *)(a4 + 48);
  uint64_t v81 = *(_OWORD *)(a4 + 32);
  uint64_t v82 = v34;
  uint64_t v35 = *(_OWORD *)(a4 + 80);
  v83 = *(_OWORD *)(a4 + 64);
  uint64_t v84 = v35;
  uint64_t v36 = *(_OWORD *)(a4 + 16);
  uint64_t v79 = *(_OWORD *)a4;
  uint64_t v80 = v36;
  *(_OWORD *)a4 = *(_OWORD *)v12;
  uint64_t v37 = *(_OWORD *)(v12 + 16);
  unint64_t v38 = *(_OWORD *)(v12 + 32);
  uint64_t v39 = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(a4 + 64) = v39;
  *(_OWORD *)(a4 + 16) = v37;
  *(_OWORD *)(a4 + 32) = v38;
  __int128 v40 = *(_OWORD *)(v12 + 80);
  uint64_t v41 = *(_OWORD *)(v12 + 96);
  uint64_t v42 = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(a4 + 112) = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(a4 + 128) = v42;
  *(_OWORD *)(a4 + 80) = v40;
  *(_OWORD *)(a4 + 96) = v41;
  char v43 = *(_OWORD *)(v12 + 144);
  uint64_t v44 = *(_OWORD *)(v12 + 160);
  uint64_t v45 = *(_OWORD *)(v12 + 176);
  *(void *)(a4 + 192) = *(void *)(v12 + 192);
  *(_OWORD *)(a4 + 160) = v44;
  *(_OWORD *)(a4 + 176) = v45;
  *(_OWORD *)(a4 + 144) = v43;
  if (v9 < v11) {
    goto LABEL_70;
  }
  while (1)
  {
    char v46 = v12;
    unsigned int v47 = 2 * v11;
    int v11 = (2 * v11) | 1;
    uint64_t v12 = a1 + 200 * v11;
    v48 = v47 + 2;
    if (v47 + 2 >= a3) {
      goto LABEL_53;
    }
    v49 = *(void *)(a1 + 200 * v11 + 48);
    uint64_t v50 = *(void *)(v12 + 248);
    if (v49 != v50)
    {
      if (v49 >= v50) {
        goto LABEL_53;
      }
LABEL_52:
      v12 += 200LL;
      int v11 = v48;
      goto LABEL_53;
    }

    unsigned int v51 = *(void *)(a1 + 200 * v11 + 56);
    uint8_t v52 = *(void *)(v12 + 256);
    char v53 = v51 < v52;
    if (v51 == v52)
    {
      uint64_t v54 = *(void *)(a1 + 200 * v11 + 64);
      uint64_t v55 = *(void *)(v12 + 264);
      char v53 = v54 < v55;
      if (v54 == v55) {
        char v53 = *(_OWORD *)(a1 + 200 * v11 + 72) < *(_OWORD *)(v12 + 272);
      }
    }

    if (v53) {
      goto LABEL_52;
    }
    if (*(void *)(a1 + 200 * v11 + 72) == *(void *)(v12 + 272)
      && *(void *)(a1 + 200 * v11 + 64) == *(void *)(v12 + 264))
    {
      uint64_t v56 = v51 == v52 && *(void *)(a1 + 200 * v11 + 80) == *(void *)(v12 + 280);
    }

  uint64_t v23 = *(void *)(v12 + 128);
  uint64_t v24 = *(void *)(a4 + 128);
  if (v23 == v24)
  {
    uint64_t v25 = *(void *)(v12 + 136);
    uint64_t v26 = *(void *)(a4 + 136);
    uint64_t v27 = v25 < v26;
    if (v25 == v26)
    {
      uint64_t v28 = *(void *)(v12 + 144);
      uint64_t v29 = *(void *)(a4 + 144);
      uint64_t v27 = v28 < v29;
      if (v28 == v29) {
        uint64_t v27 = *(_OWORD *)(v12 + 152) < *(_OWORD *)(a4 + 152);
      }
    }

    if (v27) {
      return result;
    }
    if (*(void *)(v12 + 152) == *(void *)(a4 + 152) && *(void *)(v12 + 144) == *(void *)(a4 + 144))
    {
      uint64_t v30 = v25 == v26 && *(void *)(v12 + 160) == *(void *)(a4 + 160);
      if (v30 && (sub_100862154(v12, a4, a3) & 1) != 0) {
        return result;
      }
    }
  }

  else if (v23 < v24)
  {
    return result;
  }

  uint64_t v31 = *(_OWORD *)(a4 + 176);
  uint64_t v89 = *(_OWORD *)(a4 + 160);
  uint64_t v90 = v31;
  uint64_t v91 = *(void *)(a4 + 192);
  uint64_t v32 = *(_OWORD *)(a4 + 112);
  uint64_t v85 = *(_OWORD *)(a4 + 96);
  uint64_t v86 = v32;
  uint64_t v33 = *(__n128 *)(a4 + 144);
  uint64_t v87 = *(_OWORD *)(a4 + 128);
  v88 = v33;
  uint64_t v34 = *(_OWORD *)(a4 + 48);
  uint64_t v81 = *(_OWORD *)(a4 + 32);
  uint64_t v82 = v34;
  uint64_t v35 = *(_OWORD *)(a4 + 80);
  v83 = *(_OWORD *)(a4 + 64);
  uint64_t v84 = v35;
  uint64_t v36 = *(_OWORD *)(a4 + 16);
  uint64_t v79 = *(_OWORD *)a4;
  uint64_t v80 = v36;
  *(_OWORD *)a4 = *(_OWORD *)v12;
  uint64_t v37 = *(_OWORD *)(v12 + 16);
  unint64_t v38 = *(_OWORD *)(v12 + 32);
  uint64_t v39 = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(a4 + 64) = v39;
  *(_OWORD *)(a4 + 16) = v37;
  *(_OWORD *)(a4 + 32) = v38;
  __int128 v40 = *(_OWORD *)(v12 + 80);
  uint64_t v41 = *(_OWORD *)(v12 + 96);
  uint64_t v42 = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(a4 + 112) = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(a4 + 128) = v42;
  *(_OWORD *)(a4 + 80) = v40;
  *(_OWORD *)(a4 + 96) = v41;
  char v43 = *(_OWORD *)(v12 + 144);
  uint64_t v44 = *(_OWORD *)(v12 + 160);
  uint64_t v45 = *(_OWORD *)(v12 + 176);
  *(void *)(a4 + 192) = *(void *)(v12 + 192);
  *(_OWORD *)(a4 + 160) = v44;
  *(_OWORD *)(a4 + 176) = v45;
  *(_OWORD *)(a4 + 144) = v43;
  if (v9 < v11) {
    goto LABEL_70;
  }
  while (1)
  {
    char v46 = v12;
    unsigned int v47 = 2 * v11;
    int v11 = (2 * v11) | 1;
    uint64_t v12 = a1 + 200 * v11;
    v48 = v47 + 2;
    if (v47 + 2 >= a3) {
      goto LABEL_53;
    }
    v49 = *(void *)(a1 + 200 * v11 + 128);
    uint64_t v50 = *(void *)(v12 + 328);
    if (v49 != v50)
    {
      if (v49 >= v50) {
        goto LABEL_53;
      }
LABEL_52:
      v12 += 200LL;
      int v11 = v48;
      goto LABEL_53;
    }

    unsigned int v51 = *(void *)(a1 + 200 * v11 + 136);
    uint8_t v52 = *(void *)(v12 + 336);
    char v53 = v51 < v52;
    if (v51 == v52)
    {
      uint64_t v54 = *(void *)(a1 + 200 * v11 + 144);
      uint64_t v55 = *(void *)(v12 + 344);
      char v53 = v54 < v55;
      if (v54 == v55) {
        char v53 = *(_OWORD *)(a1 + 200 * v11 + 152) < *(_OWORD *)(v12 + 352);
      }
    }

    if (v53) {
      goto LABEL_52;
    }
    if (*(void *)(a1 + 200 * v11 + 152) == *(void *)(v12 + 352)
      && *(void *)(a1 + 200 * v11 + 144) == *(void *)(v12 + 344))
    {
      uint64_t v56 = v51 == v52 && *(void *)(a1 + 200 * v11 + 160) == *(void *)(v12 + 360);
    }

  uint64_t v23 = v31;
  if (v31)
  {
    uint64_t v24 = (unint64_t *)&v31->__shared_owners_;
    do
      uint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  *(float *)&uint64_t v4 = self->_hr;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  @"hr");
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_6:
    if ((has & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  PBDataWriterWriteFloatField(a3, 5LL, self->_hrConfidence);
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_7:
    if ((has & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

  *((_DWORD *)a3 + 14) = LODWORD(self->_hrConfidence);
  *((_WORD *)a3 + 38) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_7:
    if ((has & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

  *((_DWORD *)result + 13) = LODWORD(self->_hr);
  *((_WORD *)result + 38) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_6:
    if ((has & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  self->_hrConfidence = *((float *)a3 + 14);
  *(_WORD *)&self->_has |= 0x80u;
  uint64_t v3 = *((_WORD *)a3 + 38);
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

  if (!*(_BYTE *)(a1 + 53)) {
    goto LABEL_40;
  }
  int v8 = *(_DWORD *)(v2 + 84);
  if (*(_BYTE *)(a1 + 52))
  {
    if (v8 != -1)
    {
      uint64_t v9 = v8 + 1;
LABEL_26:
      *(_DWORD *)(v2 + 84) = v9;
      goto LABEL_40;
    }

    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101868000);
    }
    uint64_t v10 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[CLSPUEclipseControl] Invalid Always On View Obstructed client count. Not increasing.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_101868000);
      }
      LOWORD(v53) = 0;
      LODWORD(v52) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  16LL,  "[CLSPUEclipseControl] Invalid Always On View Obstructed client count. Not increasing.",  &v53,  v52,  v53);
LABEL_103:
      unsigned int v51 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSPUEclipseControl::setSuppressionEnabled(BOOL, int, BOOL)_block_invoke",  "%s\n",  v11);
      if (v51 != buf) {
        free(v51);
      }
    }
  }

  else
  {
    if (v8)
    {
      uint64_t v9 = v8 - 1;
      goto LABEL_26;
    }

    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101868000);
    }
    uint64_t v12 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[CLSPUEclipseControl] Invalid Always On View Obstructed count. Not decreasing.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_101868000);
      }
      LOWORD(v53) = 0;
      LODWORD(v52) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  16LL,  "[CLSPUEclipseControl] Invalid Always On View Obstructed count. Not decreasing.",  &v53,  v52,  v53);
      goto LABEL_103;
    }
  }

    int v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_DWORD *)(a1 + 24) = v11;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 24) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  }
  return result;
}

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1A48 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  double result = *(float *)(a2 + 28);
  *(_DWORD *)(a1 + 52) |= 0x10u;
  *(float *)(a1 + 28) = result;
  int v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  double result = *(float *)(a2 + 36);
  *(_DWORD *)(a1 + 52) |= 0x40u;
  *(float *)(a1 + 36) = result;
  int v6 = *(_DWORD *)(a2 + 52);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    double result = *(float *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x80u;
    *(float *)(a1 + 40) = result;
    int v6 = *(_DWORD *)(a2 + 52);
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

  double result = sub_10081A7F0(this, v5);
  if ((_DWORD)result) {
    goto LABEL_55;
  }
  return result;
}

  uint64_t v10 = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_BYTE *)(a1 + 25) = v10;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0) {
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v12 = *(_BYTE *)(a2 + 27);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_BYTE *)(a1 + 27) = v12;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_16:
      if ((v5 & 0x80) == 0) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }

    goto LABEL_23;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 25),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 27),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

  uint64_t v12 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 8u;
  uint64_t v13 = *(std::string **)(a1 + 32);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v13 = (std::string *)operator new(0x18uLL);
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 32) = v13;
  }

  std::string::operator=(v13, v12);
  int v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) != 0) {
    goto LABEL_23;
  }
LABEL_10:
  if ((v5 & 0x20) == 0) {
    goto LABEL_11;
  }
LABEL_24:
  uint64_t v15 = *(_DWORD *)(a2 + 44);
  if (v15 >= 0x32) {
    sub_10125FA90();
  }
  *(_DWORD *)(a1 + 56) |= 0x20u;
  *(_DWORD *)(a1 + 44) = v15;
  if ((*(_DWORD *)(a2 + 56) & 0x40) != 0)
  {
LABEL_12:
    uint64_t v7 = *(_BYTE *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    *(_BYTE *)(a1 + 48) = v7;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 48),  a2,  a4);
  if ((*(_DWORD *)(v5 + 60) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 52),  a2,  a4);
  }
  return result;
}

  ++*(_DWORD *)(a2 + 404);
  *(float *)(a2 + 412) = v3 + *(float *)(a2 + 412);
LABEL_24:
  *(_BYTE *)(a2 + 392) = v2;
  return result;
}

  uint64_t v24 = *(double *)(a1 + 72);
  uint64_t v25 = *(double *)(a2 + 128);
  uint64_t v26 = v25 - *(double *)(a2 + 120);
  if (v24 + v26 >= 60.0)
  {
    uint64_t v33 = v24 + v26 + -60.0;
    if (v26 == 0.0)
    {
      uint64_t v35 = 0.0;
      uint64_t v34 = 0.0;
    }

    else
    {
      uint64_t v34 = v33 / v26 * (double)v4;
      uint64_t v35 = (double)v4 - v34;
    }

    if (*(_BYTE *)(a1 + 48))
    {
      *(double *)uint64_t buf = v25 - v24;
      *(double *)uint64_t v84 = v25;
      HIDWORD(v83) = 1;
      sub_100B6BEDC(a1, (double *)buf, v84, (int *)&v83 + 1, *(_BYTE *)(a2 + 352));
      int v11 = 1;
      uint64_t v12 = 0.0;
    }

    else
    {
      uint64_t v12 = v35 + *(double *)(a1 + 80);
      if (v12 <= 42.0)
      {
        unsigned int v51 = *(void *)(a1 + 184);
        uint8_t v52 = *(void *)(a1 + 160);
        char v53 = *(void *)(a1 + 168);
        uint64_t v54 = (void *)(v52 + 8 * (v51 >> 8));
        if (v53 == v52) {
          uint64_t v55 = 0LL;
        }
        else {
          uint64_t v55 = *v54 + 16LL * v51;
        }
        uint64_t v56 = *(void *)(a1 + 192) + v51;
        uint64_t v57 = v56 >> 8;
        uint64_t v58 = 0.0;
        unint64_t v59 = 0.0;
LABEL_49:
        uint64_t v60 = (double *)v55;
        while (1)
        {
          __int128 v61 = v53 == v52 ? 0LL : *(void *)(v52 + 8 * v57) + 16LL * v56;
          char v62 = v55 - *v54;
          uint64_t v63 = v62 >> 4;
          if (v62 < -15) {
            uint64_t v64 = v54[-((unint64_t)(254 - v63) >> 8)] + 16LL * ~(-2 - v63);
          }
          else {
          if (v53 == v52) {
            uint64_t v65 = 0LL;
          }
          else {
            uint64_t v65 = *(void *)(v52 + 8 * v57) + 16LL * v56;
          }
          if (v64 == v65) {
            unint64_t v66 = v35;
          }
          else {
            unint64_t v66 = -0.0;
          }
          uint64_t v67 = v58 + v66;
          if (v64 == v65) {
            uint64_t v68 = v26 - v33;
          }
          else {
            uint64_t v68 = -0.0;
          }
          uint64_t v69 = v59 + v68;
          uint64_t v70 = *v60;
          unint64_t v59 = *v60 + v69;
          if (v59 >= 20.0)
          {
            unint64_t v59 = v59 + -20.0;
            if (v70 == 0.0)
            {
              uint64_t v58 = 0.0;
              uint64_t v72 = 0.0;
            }

            else
            {
              uint64_t v71 = v60[1];
              uint64_t v58 = v59 / v70 * v71;
              uint64_t v72 = v71 - v58;
            }

            if (v67 + v72 < 8.0) {
              goto LABEL_75;
            }
          }

          else
          {
            uint64_t v58 = v67 + v60[1];
          }

          v60 += 2;
          v55 += 16LL;
          if (v55 - *v54 == 4096)
          {
            uint64_t v73 = v54[1];
            ++v54;
            uint64_t v55 = v73;
            goto LABEL_49;
          }
        }

        if (v12 < 32.0)
        {
LABEL_75:
          int v5 = v35 + *(double *)(a1 + 80);
          goto LABEL_21;
        }

        *(double *)uint64_t buf = v25 - v24;
        *(double *)uint64_t v84 = v25;
        HIDWORD(v83) = 2;
        sub_100B6BEDC(a1, (double *)buf, v84, (int *)&v83 + 1, *(_BYTE *)(a2 + 352));
        int v11 = 2;
        int v5 = v12;
        goto LABEL_33;
      }

      *(double *)uint64_t buf = v25 - v24;
      *(double *)uint64_t v84 = v25;
      HIDWORD(v83) = 0;
      sub_100B6BEDC(a1, (double *)buf, v84, (int *)&v83 + 1, *(_BYTE *)(a2 + 352));
      int v11 = 0;
    }

    int v5 = 0.0;
LABEL_33:
    *(double *)uint64_t buf = v33;
    *(double *)&uint8_t buf[8] = v34;
    uint64_t v36 = sub_100B6BD3C((void *)(a1 + 104), buf);
    *(double *)(a1 + 56) = sub_100B6BDF8(v36, (void *)(a1 + 104));
    *(double *)(a1 + 64) = sub_100B6BE5C(v37, (void *)(a1 + 104));
    *(double *)uint64_t buf = v33;
    *(double *)&uint8_t buf[8] = v34;
    unint64_t v38 = sub_100B6BD3C((void *)(a1 + 152), buf);
    *(double *)(a1 + 72) = sub_100B6BDF8(v38, (void *)(a1 + 152));
    *(double *)(a1 + 80) = sub_100B6BE5C(v39, (void *)(a1 + 152));
    goto LABEL_34;
  }

    sub_100036CD8();
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v4,  *(double *)(v5 + 40),  a3);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 36),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

    uint64_t v22 = 0LL;
    if (!v15) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  uint64_t v22 = 1LL;
  if (v15) {
LABEL_21:
  }
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
LABEL_22:
  *(void *)((char *)v49
  uint64_t v50 = v23;
  std::streambuf::~streambuf(&v51);
  std::ios::~ios(&v52);
  return v22;
}
  }

  char v17 = sub_100C82600(a1, &v37, (_BYTE *)(a2 + 24));
  *(_BYTE *)(a1 + 1548) = v17;
  if (v17)
  {
    uuid_copy((unsigned __int8 *)&v52[4] + 8, (const unsigned __int8 *)(a1 + 56));
    uint64_t v18 = sub_100D74AD8();
    sub_100D74DAC(v18, (uint64_t)v52);
    uint64_t v19 = sub_1002F8DDC();
    buf[0] = 1;
    sub_1002AB464(v19, @"ActiveJacksonCalibration", buf);
    uint64_t v20 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v20 + 944LL))(v20);
    uuid_copy((unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56));
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    uint64_t v21 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 1600);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a1 + 16);
      *(_DWORD *)uint64_t buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = v37;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v22;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v23;
      *(_WORD *)&buf[28] = 2050;
      *(void *)&buf[30] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "VO2Max,Failure to estimate,status,%{public}d,workout duration,%{public}.3f,estimate,%f,workout mode,%{public}ld",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187AE98);
      }
      uint64_t v31 = *(void *)(a1 + 1600);
      uint64_t v32 = *(void *)(a2 + 16);
      uint64_t v33 = *(void *)(a1 + 16);
      v45[0] = 67240960;
      v45[1] = v37;
      char v46 = 2050;
      unsigned int v47 = v31;
      v48 = 2048;
      v49 = v32;
      uint64_t v50 = 2050;
      unsigned int v51 = v33;
      LODWORD(v36) = 38;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "VO2Max,Failure to estimate,status,%{public}d,workout duration,%{public}.3f,estimate,%f,workout mode,%{public}ld",  v45,  *(void *)&v36);
      uint64_t v35 = (char *)v34;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "VO2MaxEstimationStatus CLVO2MaxEstimator::estimateVO2Max(CFAbsoluteTime, VO2MaxResult &)",  "%s\n",  v34);
      if (v35 != buf) {
        free(v35);
      }
    }

    *(void *)a2 = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0xBFF0000000000000LL;
  }

  if (*(void *)(a1 + 16) != 1LL)
  {
    uint64_t v25 = *(void *)a1;
    if (*(_DWORD *)(a1 + 1608) == 3)
    {
      if (v25 != 15) {
        goto LABEL_35;
      }
LABEL_34:
      *(double *)(a2 + 48) = v8;
      goto LABEL_35;
    }

    if (v25 <= 0x18 && ((1LL << v25) & 0x1028000) != 0) {
      goto LABEL_34;
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_groundAltitude),  @"groundAltitude");
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_9:
    if ((has & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  PBDataWriterWriteDoubleField(a3, 8LL, self->_groundAltitudeUncertainty);
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_10:
    if ((has & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  *((void *)a3 + 4) = *(void *)&self->_groundAltitudeUncertainty;
  *((_WORD *)a3 + 44) |= 8u;
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_10:
    if ((has & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  *((void *)result + 3) = *(void *)&self->_groundAltitude;
  *((_WORD *)result + 44) |= 4u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_9:
    if ((has & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  self->_groundAltitudeUncertainty = *((double *)a3 + 4);
  *(_WORD *)&self->_has |= 8u;
  uint64_t v3 = *((_WORD *)a3 + 44);
  if ((v3 & 0x400) == 0)
  {
LABEL_10:
    if ((v3 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  uint64_t v13 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(unsigned int *)(a1 + 120);
    uint64_t v15 = *(unsigned __int8 *)(a1 + 89);
    if (*(_BYTE *)(a1 + 89)) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 90);
    }
    *(_DWORD *)uint64_t buf = 68289538;
    uint64_t v23 = 0;
    uint64_t v24 = 2082;
    uint64_t v25 = "";
    uint64_t v26 = 2050;
    uint64_t v27 = v14;
    uint64_t v28 = 1026;
    uint64_t v29 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:release process assertion, fProcessAssertionReason:%{public, location:CLClientProcess AssertionReasons}lld, backgroundLocationDesired:%{public}hhd}",  buf,  0x22u);
  }

  if (!*(_DWORD *)(a1 + 120) || !*(_BYTE *)(a1 + 89) || !*(_BYTE *)(a1 + 90))
  {
    uint64_t v16 = *(void *)(a1 + 112);
    char v17 = *(void *)(a1 + 24);
    *(void *)(a1 + 112) = 0LL;
    uint64_t v18 = *(_DWORD *)(a1 + 44);
    uint64_t v19 = [*(id *)(a1 + 8) silo];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100DB9C94;
    v20[3] = &unk_101862178;
    uint64_t v21 = v18;
    v20[4] = v16;
    v20[5] = v17;
    [v19 afterInterval:v20 async:1.0];
  }

  uint64_t v26 = v22 + v21 + v23;
  if (a3 >= a4)
  {
    if (v26 != ((v25 & 0x10) == 0)) {
      return;
    }
    goto LABEL_33;
  }

  if (v26 == 1)
  {
    *(_DWORD *)uint64_t buf = sub_100DDA8C0(v20);
    sub_100DDC658((uint64_t)a1, (int *)buf);
  }

  if (!*(void *)(a1[9] + 56LL))
  {
    sub_101270BC4();
    goto LABEL_25;
  }

  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A20E0 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 21),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
}

      if (v8 == 4) {
        return 1LL;
      }
    }

    int v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_20;
    }
LABEL_32:
    *(_DWORD *)(a1 + 36) |= 2u;
    uint64_t v19 = *(void **)(a1 + 16);
    if (!v19)
    {
      uint64_t v19 = operator new(0xD8uLL);
      v19[5] = 0LL;
      v19[6] = 0LL;
      v19[8] = 0LL;
      v19[9] = 0LL;
      v19[11] = 0LL;
      v19[12] = 0LL;
      *((_DWORD *)v19 + 26) = 0;
      v19[14] = 0LL;
      v19[15] = 0LL;
      *((_DWORD *)v19 + 32) = 0;
      v19[17] = 0LL;
      v19[18] = 0LL;
      *((_DWORD *)v19 + 38) = 0;
      *((_DWORD *)v19 + 44) = 0;
      v19[20] = 0LL;
      v19[21] = 0LL;
      *((_DWORD *)v19 + 50) = 0;
      v19[23] = 0LL;
      v19[24] = 0LL;
      v19[26] = 0LL;
      *uint64_t v19 = off_10188E020;
      v19[1] = 0LL;
      v19[2] = 0LL;
      v19[3] = 0LL;
      *(void *)(a1 + 16) = v19;
    }

    uint64_t v20 = (char *)*((void *)this + 1);
    if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
    {
    }

    else
    {
      uint64_t v31 = *v20;
      *((void *)this + 1) = v20 + 1;
    }

    uint64_t v21 = *((_DWORD *)this + 14);
    uint64_t v22 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v21 + 1;
    if (v21 >= v22) {
      return 0LL;
    }
    uint64_t v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
    uint64_t v25 = *((_DWORD *)this + 14);
    uint64_t v16 = __OFSUB__(v25, 1);
    uint64_t v26 = v25 - 1;
    if (v26 < 0 == v16) {
      *((_DWORD *)this + 14) = v26;
    }
    uint64_t v27 = (_BYTE *)*((void *)this + 1);
    if ((unint64_t)v27 < *((void *)this + 2) && *v27 == 26)
    {
      *((void *)this + 1) = v27 + 1;
LABEL_46:
      *(_DWORD *)(a1 + 36) |= 4u;
      uint64_t v28 = *(void **)(a1 + 24);
      if (v28 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v28 = operator new(0x18uLL);
        v28[1] = 0LL;
        v28[2] = 0LL;
        void *v28 = 0LL;
        *(void *)(a1 + 24) = v28;
      }

      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v28);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        double result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 48) & 0x20) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(double *)(a1 + 32) = result;
  }

  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v4,  *(float *)(v5 + 28),  a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

    if (v10 == 4) {
      return 1LL;
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0LL;
}

    if (v11 == 4) {
      return 1LL;
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0LL;
}

        uint64_t v15 = *(_DWORD *)(v14 + 4);
LABEL_21:
        *(_DWORD *)(a1 + 120) = v15;
      }
    }
  }

  *(_BYTE *)(a1 + 592) = 1;
  *(void *)uint64_t v23 = &buf;
  sub_1005C8A94((void ***)v23);
}

  sub_1002A5590(v23);
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  unsigned int v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_87:
                uint64_t v2 = v47 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)(a1 + 156) |= 1uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_196;
            case 2u:
              *(void *)(a1 + 156) |= 4uLL;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }

                  __int128 v61 = v21++;
                  char v62 = *(_BYTE *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_205:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_206;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_205;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_206:
              *(void *)(a1 + 24) = v25;
              goto LABEL_197;
            case 3u:
              *(void *)(a1 + 156) |= 2uLL;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }

                  uint64_t v65 = v27++;
                  unint64_t v66 = *(_BYTE *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_210:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_211;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_210;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_211;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_211:
              *(void *)(a1 + 16) = v31;
              goto LABEL_197;
            case 4u:
              *(void *)(a1 + 156) |= 0x40uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 5u:
              *(void *)(a1 + 156) |= 0x20uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 6u:
              *(void *)(a1 + 156) |= 0x20000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 7u:
              *(void *)(a1 + 156) |= 0x2000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 8u:
              *(void *)(a1 + 156) |= 0x10000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 9u:
              *(void *)(a1 + 156) |= 0x80000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xAu:
              *(void *)(a1 + 156) |= 0x10uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xBu:
              *(void *)(a1 + 156) |= 0x8000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xCu:
              *(void *)(a1 + 156) |= 0x4000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xDu:
              *(void *)(a1 + 156) |= 0x4000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xEu:
              *(void *)(a1 + 156) |= 0x10000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xFu:
              *(void *)(a1 + 156) |= 0x40000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x10u:
              *(void *)(a1 + 156) |= 0x20000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x11u:
              *(void *)(a1 + 156) |= 0x80uLL;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_216;
                  }

                  uint64_t v69 = v33++;
                  uint64_t v70 = *(_BYTE *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_215:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_216;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_215;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_216;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_197;
            case 0x12u:
              *(void *)(a1 + 156) |= 0x8000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x13u:
              *(void *)(a1 + 156) |= 0x200000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 152) = v40;
              goto LABEL_197;
            case 0x14u:
              *(void *)(a1 + 156) |= (unint64_t)&_mh_execute_header;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_221;
                  }

                  uint64_t v73 = v41++;
                  uint64_t v74 = *(_BYTE *)(v42 + v73);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_220:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_221;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_220;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_221;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_221:
              *(_DWORD *)(a1 + 148) = v45;
              goto LABEL_197;
            case 0x15u:
              *(void *)(a1 + 156) |= 0x80000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x16u:
              *(void *)(a1 + 156) |= 0x400uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x17u:
              *(void *)(a1 + 156) |= 0x800uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x18u:
              *(void *)(a1 + 156) |= 0x1000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x19u:
              *(void *)(a1 + 156) |= 0x400000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v48 = v47 != 0;
              }

              *(_BYTE *)(a1 + 153) = v48;
              goto LABEL_197;
            case 0x1Au:
              *(void *)(a1 + 156) |= 0x800000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Bu:
              *(void *)(a1 + 156) |= 0x400000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Cu:
              *(void *)(a1 + 156) |= 0x1000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Du:
              *(void *)(a1 + 156) |= 0x200000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Eu:
              *(void *)(a1 + 156) |= 0x1000000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v50 = v49 != 0;
              }

              *(_BYTE *)(a1 + 155) = v50;
              goto LABEL_197;
            case 0x1Fu:
              *(void *)(a1 + 156) |= 0x100000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x20u:
              *(void *)(a1 + 156) |= 0x2000000uLL;
              unsigned int v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint8_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                uint64_t v55 = 0LL;
                if (v2 <= v51) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_226;
                  }

                  uint64_t v77 = v51++;
                  uint64_t v78 = *(_BYTE *)(v52 + v77);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_225:
                    uint64_t v2 = v77 + 1;
                    goto LABEL_226;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_225;
              }

              char v53 = 0;
              uint64_t v54 = 0;
              uint64_t v55 = 0LL;
              do
              {
                uint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                uint64_t v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_226;
                }
                v53 += 7;
                unsigned int v51 = v2;
                uint64_t v14 = v54++ > 8;
              }

              while (!v14);
              LODWORD(v55) = 0;
LABEL_226:
              *(_DWORD *)(a1 + 120) = v55;
LABEL_197:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x21u:
              *(void *)(a1 + 156) |= 0x200uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x22u:
              *(void *)(a1 + 156) |= 0x100uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x23u:
              *(void *)(a1 + 156) |= 0x800000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v58 = v57 != 0;
              }

              *(_BYTE *)(a1 + 154) = v58;
              goto LABEL_197;
            case 0x24u:
              *(void *)(a1 + 156) |= 0x40000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x25u:
              *(void *)(a1 + 156) |= 8uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_195:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_196:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_150:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_197;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_197;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v28 = v27 != 0;
        }

        *(_BYTE *)(a1 + 16) = v28;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v3)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v25 = 0LL;
          if (v3 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }

            uint64_t v32 = v21++;
            uint64_t v33 = *(_BYTE *)(v22 + v32);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            uint64_t v14 = v31++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              goto LABEL_47;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v25 = 0LL;
          }
LABEL_47:
          uint64_t v2 = v32 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              break;
            }
          }
        }

  int v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 40) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "droppedRecovery", *(_BYTE *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 52) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_151;
            case 2u:
              *(_WORD *)(a1 + 52) |= 4u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }

                  uint64_t v67 = v20++;
                  uint64_t v68 = *(_BYTE *)(v21 + v67);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
LABEL_129:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_130;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
                goto LABEL_129;
              }

              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0LL;
              do
              {
                uint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                uint64_t v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v22 += 7;
                uint64_t v20 = v2;
                uint64_t v14 = v23++ > 8;
              }

              while (!v14);
              uint64_t v24 = 0LL;
LABEL_130:
              *(void *)(a1 + 24) = v24;
              goto LABEL_151;
            case 3u:
              *(_WORD *)(a1 + 52) |= 1u;
              uint64_t v26 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5LL || v26 + 10 > v2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                uint64_t v30 = 0LL;
                if (v2 <= v26) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }

                  uint64_t v71 = v26++;
                  uint64_t v72 = *(_BYTE *)(v27 + v71);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0LL;
LABEL_134:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_135;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v30 = 0LL;
                }
                goto LABEL_134;
              }

              uint64_t v28 = 0;
              uint64_t v29 = 0;
              uint64_t v30 = 0LL;
              do
              {
                uint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                uint64_t v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v28 += 7;
                uint64_t v26 = v2;
                uint64_t v14 = v29++ > 8;
              }

              while (!v14);
              uint64_t v30 = 0LL;
LABEL_135:
              *(void *)(a1 + 8) = v30;
              goto LABEL_151;
            case 4u:
              *(_WORD *)(a1 + 52) |= 8u;
              uint64_t v32 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v33 = *(void *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5LL || v32 + 10 > v2)
              {
                uint64_t v73 = 0;
                uint64_t v74 = 0;
                uint64_t v36 = 0LL;
                if (v2 <= v32) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }

                  uint64_t v75 = v32++;
                  uint64_t v76 = *(_BYTE *)(v33 + v75);
                  *((void *)this + 1) = v32;
                  v36 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  uint64_t v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_139:
                    uint64_t v2 = v75 + 1;
                    goto LABEL_140;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_139;
              }

              uint64_t v34 = 0;
              uint64_t v35 = 0;
              uint64_t v36 = 0LL;
              do
              {
                uint64_t v2 = v32 + 1;
                *((void *)this + 1) = v32 + 1;
                uint64_t v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v34 += 7;
                uint64_t v32 = v2;
                uint64_t v14 = v35++ > 8;
              }

              while (!v14);
              LODWORD(v36) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 32) = v36;
              goto LABEL_151;
            case 5u:
              *(_WORD *)(a1 + 52) |= 0x20u;
              unint64_t v38 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v39 = *(void *)this;
              if (v38 > 0xFFFFFFFFFFFFFFF5LL || v38 + 10 > v2)
              {
                uint64_t v77 = 0;
                uint64_t v78 = 0;
                uint64_t v42 = 0LL;
                if (v2 <= v38) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v38)
                  {
                    LODWORD(v42) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }

                  uint64_t v79 = v38++;
                  uint64_t v80 = *(_BYTE *)(v39 + v79);
                  *((void *)this + 1) = v38;
                  v42 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  uint64_t v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v42) = 0;
LABEL_144:
                    uint64_t v2 = v79 + 1;
                    goto LABEL_145;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v42) = 0;
                }
                goto LABEL_144;
              }

              __int128 v40 = 0;
              uint64_t v41 = 0;
              uint64_t v42 = 0LL;
              do
              {
                uint64_t v2 = v38 + 1;
                *((void *)this + 1) = v38 + 1;
                char v43 = *(_BYTE *)(v39 + v38);
                v42 |= (unint64_t)(v43 & 0x7F) << v40;
                if ((v43 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v40 += 7;
                unint64_t v38 = v2;
                uint64_t v14 = v41++ > 8;
              }

              while (!v14);
              LODWORD(v42) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 40) = v42;
              goto LABEL_151;
            case 6u:
              *(_WORD *)(a1 + 52) |= 0x10u;
              uint64_t v44 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v45 = *(void *)this;
              if (v44 > 0xFFFFFFFFFFFFFFF5LL || v44 + 10 > v2)
              {
                uint64_t v81 = 0;
                uint64_t v82 = 0;
                v48 = 0LL;
                if (v2 <= v44) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v44)
                  {
                    LODWORD(v48) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }

                  v83 = v44++;
                  uint64_t v84 = *(_BYTE *)(v45 + v83);
                  *((void *)this + 1) = v44;
                  v48 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  uint64_t v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v48) = 0;
LABEL_149:
                    uint64_t v2 = v83 + 1;
                    goto LABEL_150;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v48) = 0;
                }
                goto LABEL_149;
              }

              char v46 = 0;
              unsigned int v47 = 0;
              v48 = 0LL;
              do
              {
                uint64_t v2 = v44 + 1;
                *((void *)this + 1) = v44 + 1;
                v49 = *(_BYTE *)(v45 + v44);
                v48 |= (unint64_t)(v49 & 0x7F) << v46;
                if ((v49 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v46 += 7;
                uint64_t v44 = v2;
                uint64_t v14 = v47++ > 8;
              }

              while (!v14);
              LODWORD(v48) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 36) = v48;
LABEL_151:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 7u:
              *(_WORD *)(a1 + 52) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                unsigned int v51 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v50 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                unsigned int v51 = v50 != 0;
              }

              *(_BYTE *)(a1 + 50) = v51;
              goto LABEL_151;
            case 0xBu:
              *(_WORD *)(a1 + 52) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v54 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v53 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v54 = v53 != 0;
              }

              *(_BYTE *)(a1 + 44) = v54;
              goto LABEL_151;
            case 0xCu:
              *(_WORD *)(a1 + 52) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v56 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v55 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v56 = v55 != 0;
              }

              *(_BYTE *)(a1 + 45) = v56;
              goto LABEL_151;
            case 0xDu:
              *(_WORD *)(a1 + 52) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v58 = v57 != 0;
              }

              *(_BYTE *)(a1 + 46) = v58;
              goto LABEL_151;
            case 0x15u:
              *(_WORD *)(a1 + 52) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v60 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v59 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v60 = v59 != 0;
              }

              *(_BYTE *)(a1 + 47) = v60;
              goto LABEL_151;
            case 0x16u:
              *(_WORD *)(a1 + 52) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v62 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                __int128 v61 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v62 = v61 != 0;
              }

              *(_BYTE *)(a1 + 48) = v62;
              goto LABEL_151;
            case 0x17u:
              *(_WORD *)(a1 + 52) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v64 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v63 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v64 = v63 != 0;
              }

              *(_BYTE *)(a1 + 49) = v64;
              goto LABEL_151;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_151;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 156) |= 4uLL;
          uint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v20);
          goto LABEL_364;
        case 2u:
          *(void *)(a1 + 156) |= 8uLL;
          uint64_t v22 = *((void *)this + 1);
          uint64_t v23 = *((void *)this + 2);
          uint64_t v24 = *(void *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5LL && v22 + 10 <= v23)
          {
            uint64_t v25 = 0;
            uint64_t v26 = 0;
            uint64_t v27 = 0LL;
            do
            {
              uint64_t v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              uint64_t v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_368;
              }
              v25 += 7;
              uint64_t v22 = v28;
              uint64_t v14 = v26++ > 8;
            }

            while (!v14);
LABEL_221:
            uint64_t v27 = 0LL;
            goto LABEL_368;
          }

          v211 = 0;
          v212 = 0;
          uint64_t v27 = 0LL;
          if (v23 <= v22) {
            uint64_t v23 = *((void *)this + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              uint64_t v27 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v213 = v22 + 1;
              v214 = *(_BYTE *)(v24 + v22);
              *((void *)this + 1) = v213;
              v27 |= (unint64_t)(v214 & 0x7F) << v211;
              if (v214 < 0)
              {
                v211 += 7;
                uint64_t v22 = v213;
                uint64_t v14 = v212++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v27 = 0LL;
              }
            }

            break;
          }

  uint64_t v10 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 72) = v3;
  *(void *)(a1 + 8) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "startTimestampOfLastInspectedWindow", *(void *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 68));
  return PB::TextFormatter::endObject(this);
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_122;
            case 2u:
              *(_WORD *)(a1 + 72) |= 8u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }

                  unint64_t v59 = v20++;
                  uint64_t v60 = *(_BYTE *)(v21 + v59);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
LABEL_126:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
                goto LABEL_126;
              }

              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0LL;
              do
              {
                uint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                uint64_t v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v22 += 7;
                uint64_t v20 = v2;
                uint64_t v14 = v23++ > 8;
              }

              while (!v14);
              uint64_t v24 = 0LL;
LABEL_127:
              *(void *)(a1 + 32) = v24;
              goto LABEL_153;
            case 3u:
              *(_WORD *)(a1 + 72) |= 2u;
              uint64_t v26 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5LL || v26 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                uint64_t v30 = 0LL;
                if (v2 <= v26) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }

                  uint64_t v63 = v26++;
                  uint64_t v64 = *(_BYTE *)(v27 + v63);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0LL;
LABEL_131:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v30 = 0LL;
                }
                goto LABEL_131;
              }

              uint64_t v28 = 0;
              uint64_t v29 = 0;
              uint64_t v30 = 0LL;
              do
              {
                uint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                uint64_t v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v28 += 7;
                uint64_t v26 = v2;
                uint64_t v14 = v29++ > 8;
              }

              while (!v14);
              uint64_t v30 = 0LL;
LABEL_132:
              *(void *)(a1 + 16) = v30;
              goto LABEL_153;
            case 4u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              uint64_t v32 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v33 = *(void *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5LL || v32 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                uint64_t v36 = 0LL;
                if (v2 <= v32) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }

                  uint64_t v67 = v32++;
                  uint64_t v68 = *(_BYTE *)(v33 + v67);
                  *((void *)this + 1) = v32;
                  v36 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_136:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_136;
              }

              uint64_t v34 = 0;
              uint64_t v35 = 0;
              uint64_t v36 = 0LL;
              do
              {
                uint64_t v2 = v32 + 1;
                *((void *)this + 1) = v32 + 1;
                uint64_t v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v34 += 7;
                uint64_t v32 = v2;
                uint64_t v14 = v35++ > 8;
              }

              while (!v14);
              LODWORD(v36) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 68) = v36;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_121;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x10u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    char v43 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }

                  uint64_t v71 = v39++;
                  uint64_t v72 = *(_BYTE *)(v40 + v71);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    char v43 = 0LL;
LABEL_141:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  char v43 = 0LL;
                }
                goto LABEL_141;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              char v43 = 0LL;
LABEL_142:
              *(void *)(a1 + 40) = v43;
              goto LABEL_153;
            case 0xCu:
              *(_WORD *)(a1 + 72) |= 0x20u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v73 = 0;
                uint64_t v74 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }

                  uint64_t v75 = v45++;
                  uint64_t v76 = *(_BYTE *)(v46 + v75);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  uint64_t v14 = v74++ > 8;
                  if (v14)
                  {
                    v49 = 0LL;
LABEL_146:
                    uint64_t v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  v49 = 0LL;
                }
                goto LABEL_146;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              v49 = 0LL;
LABEL_147:
              *(void *)(a1 + 48) = v49;
              goto LABEL_153;
            case 0xDu:
              *(_WORD *)(a1 + 72) |= 1u;
              unsigned int v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint8_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                uint64_t v77 = 0;
                uint64_t v78 = 0;
                uint64_t v55 = 0LL;
                if (v2 <= v51) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    uint64_t v55 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }

                  uint64_t v79 = v51++;
                  uint64_t v80 = *(_BYTE *)(v52 + v79);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  uint64_t v14 = v78++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0LL;
LABEL_151:
                    uint64_t v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v55 = 0LL;
                }
                goto LABEL_151;
              }

              char v53 = 0;
              uint64_t v54 = 0;
              uint64_t v55 = 0LL;
              do
              {
                uint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                uint64_t v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v53 += 7;
                unsigned int v51 = v2;
                uint64_t v14 = v54++ > 8;
              }

              while (!v14);
              uint64_t v55 = 0LL;
LABEL_152:
              *(void *)(a1 + 8) = v55;
LABEL_153:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x14u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_121;
            case 0x15u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
LABEL_121:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_122:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_153;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_153;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 60), 0x14u);
  if ((*(_WORD *)(v3 + 72) & 0x40) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 56), 0x15u);
  }
  return result;
}

  int v8 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 72) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 4u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }

                  uint64_t v77 = v20++;
                  uint64_t v78 = *(_BYTE *)(v21 + v77);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_167;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_167:
                uint64_t v2 = v77 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_168;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  double result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 72) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_131;
                  }

                  char v53 = v20++;
                  uint64_t v54 = *(_BYTE *)(v21 + v53);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_130;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_130:
                uint64_t v2 = v53 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_131;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 2u:
        *(_BYTE *)(a1 + 128) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v21 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v21)
        {
          unsigned int v47 = 0;
          v48 = 0;
          uint64_t v25 = 0LL;
          if (v21 <= v20) {
            uint64_t v21 = *((void *)this + 1);
          }
          do
          {
            if (v21 == v20)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_77;
            }

            v49 = v20 + 1;
            uint64_t v50 = *(_BYTE *)(v22 + v20);
            *((void *)this + 1) = v49;
            v25 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24)) {
                uint64_t v25 = 0LL;
              }
              goto LABEL_77;
            }

            v47 += 7;
            uint64_t v20 = v49;
            uint64_t v14 = v48++ > 8;
          }

          while (!v14);
LABEL_73:
          uint64_t v25 = 0LL;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v26 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v20 = v26;
            uint64_t v14 = v24++ > 8;
            if (v14) {
              goto LABEL_73;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 2u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v3 = *((void *)this + 1);
                }
                else {
                  uint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }

                  uint64_t v67 = v20++;
                  uint64_t v68 = *(_BYTE *)(v21 + v67);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_136;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_136:
                uint64_t v3 = v67 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_137;
                  }
                  v22 += 7;
                  uint64_t v20 = v3;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 216) |= 0x80000000uLL;
          uint64_t v20 = *((void *)this + 1);
          uint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v21)
          {
            v147 = 0;
            v148 = 0;
            uint64_t v25 = 0LL;
            if (v21 <= v20) {
              uint64_t v21 = *((void *)this + 1);
            }
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_302;
              }

              v149 = v20 + 1;
              v150 = *(_BYTE *)(v22 + v20);
              *((void *)this + 1) = v149;
              v25 |= (unint64_t)(v150 & 0x7F) << v147;
              if ((v150 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_302;
              }

              v147 += 7;
              uint64_t v20 = v149;
              uint64_t v14 = v148++ > 8;
            }

            while (!v14);
LABEL_221:
            LODWORD(v25) = 0;
          }

          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0LL;
            while (1)
            {
              uint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              uint64_t v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              uint64_t v20 = v26;
              uint64_t v14 = v24++ > 8;
              if (v14) {
                goto LABEL_221;
              }
            }
          }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_51:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_57;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 176) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 2u:
              *(_DWORD *)(a1 + 176) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 3u:
              *(_DWORD *)(a1 + 176) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 4u:
              *(_DWORD *)(a1 + 176) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 5u:
              *(_DWORD *)(a1 + 176) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 6u:
              *(_DWORD *)(a1 + 176) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 7u:
              *(_DWORD *)(a1 + 176) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 8u:
              *(_DWORD *)(a1 + 176) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 9u:
              *(_DWORD *)(a1 + 176) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0xAu:
              *(_DWORD *)(a1 + 176) |= 0x10000u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }

                  char v53 = v21++;
                  uint64_t v54 = *(_BYTE *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_155:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_156;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_155;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_156:
              *(void *)(a1 + 136) = v25;
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 176) |= 0x20000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }

                  uint64_t v57 = v27++;
                  uint64_t v58 = *(_BYTE *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_160:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_161;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_160;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_161:
              *(void *)(a1 + 144) = v31;
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 176) |= 0x40000u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }

                  __int128 v61 = v33++;
                  char v62 = *(_BYTE *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0LL;
LABEL_165:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_166;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v37 = 0LL;
                }
                goto LABEL_165;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              uint64_t v37 = 0LL;
LABEL_166:
              *(void *)(a1 + 152) = v37;
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 176) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0xEu:
              *(_DWORD *)(a1 + 176) |= 0x100000u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_171;
                  }

                  uint64_t v65 = v39++;
                  unint64_t v66 = *(_BYTE *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_170:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_171;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_170;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_171;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 168) = v43;
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 176) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x10u:
              *(_DWORD *)(a1 + 176) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x11u:
              *(_DWORD *)(a1 + 176) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x12u:
              *(_DWORD *)(a1 + 176) |= 0x200000u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }

                  uint64_t v69 = v45++;
                  uint64_t v70 = *(_BYTE *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_175:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_176;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_175;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 172) = v49;
LABEL_147:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 176) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x14u:
              *(_DWORD *)(a1 + 176) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x15u:
              *(_DWORD *)(a1 + 176) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x16u:
              *(_DWORD *)(a1 + 176) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
LABEL_146:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_109:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_147;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_147;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_33:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_118;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_128;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_127:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_128;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_127;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_128;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_128:
              *(_DWORD *)(a1 + 64) = v25;
              goto LABEL_119;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x100000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_133;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_132:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_133;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_132;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_133;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_133:
              *(_DWORD *)(a1 + 100) = v31;
LABEL_119:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x14u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x15u:
              *(_DWORD *)(a1 + 112) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x16u:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x17u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_117:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_118:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_101:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_119;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x38uLL);
        sub_1010F837C((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_153;
                  }

                  __int128 v61 = v20++;
                  char v62 = *(_BYTE *)(v21 + v61);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_152;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_152:
                uint64_t v2 = v61 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_153;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_173;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 114) = v22;
              goto LABEL_209;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 113) = v24;
              goto LABEL_209;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 115) = v26;
              goto LABEL_209;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 112) = v28;
              goto LABEL_209;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 4u;
              uint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    uint64_t v33 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }

                  uint64_t v73 = v29++;
                  uint64_t v74 = *(_BYTE *)(v30 + v73);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v33 = 0LL;
LABEL_177:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_178;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v33 = 0LL;
                }
                goto LABEL_177;
              }

              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v31 += 7;
                uint64_t v29 = v2;
                uint64_t v14 = v32++ > 8;
              }

              while (!v14);
              uint64_t v33 = 0LL;
LABEL_178:
              *(void *)(a1 + 24) = v33;
              goto LABEL_209;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 2u;
              uint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                uint64_t v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    uint64_t v39 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }

                  uint64_t v77 = v35++;
                  uint64_t v78 = *(_BYTE *)(v36 + v77);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v39 = 0LL;
LABEL_182:
                    uint64_t v2 = v77 + 1;
                    goto LABEL_183;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v39 = 0LL;
                }
                goto LABEL_182;
              }

              uint64_t v37 = 0;
              unint64_t v38 = 0;
              uint64_t v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                __int128 v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v37 += 7;
                uint64_t v35 = v2;
                uint64_t v14 = v38++ > 8;
              }

              while (!v14);
              uint64_t v39 = 0LL;
LABEL_183:
              *(void *)(a1 + 16) = v39;
              goto LABEL_209;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 1u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_188;
                  }

                  uint64_t v81 = v41++;
                  uint64_t v82 = *(_BYTE *)(v42 + v81);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  uint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0LL;
LABEL_187:
                    uint64_t v2 = v81 + 1;
                    goto LABEL_188;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v45 = 0LL;
                }
                goto LABEL_187;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              uint64_t v45 = 0LL;
LABEL_188:
              *(void *)(a1 + 8) = v45;
              goto LABEL_209;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              unsigned int v47 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                v83 = 0;
                uint64_t v84 = 0;
                unsigned int v51 = 0LL;
                if (v2 <= v47) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    unsigned int v51 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_193;
                  }

                  uint64_t v85 = v47++;
                  uint64_t v86 = *(_BYTE *)(v48 + v85);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  uint64_t v14 = v84++ > 8;
                  if (v14)
                  {
                    unsigned int v51 = 0LL;
LABEL_192:
                    uint64_t v2 = v85 + 1;
                    goto LABEL_193;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  unsigned int v51 = 0LL;
                }
                goto LABEL_192;
              }

              v49 = 0;
              uint64_t v50 = 0;
              unsigned int v51 = 0LL;
              do
              {
                uint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                uint8_t v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v49 += 7;
                unsigned int v47 = v2;
                uint64_t v14 = v50++ > 8;
              }

              while (!v14);
              unsigned int v51 = 0LL;
LABEL_193:
              *(void *)(a1 + 48) = v51;
              goto LABEL_209;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              char v53 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                uint64_t v87 = 0;
                v88 = 0;
                uint64_t v57 = 0LL;
                if (v2 <= v53) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_198;
                  }

                  uint64_t v89 = v53++;
                  uint64_t v90 = *(_BYTE *)(v54 + v89);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  uint64_t v14 = v88++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0LL;
LABEL_197:
                    uint64_t v2 = v89 + 1;
                    goto LABEL_198;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v57 = 0LL;
                }
                goto LABEL_197;
              }

              uint64_t v55 = 0;
              uint64_t v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                uint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                uint64_t v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v55 += 7;
                char v53 = v2;
                uint64_t v14 = v56++ > 8;
              }

              while (!v14);
              uint64_t v57 = 0LL;
LABEL_198:
              *(void *)(a1 + 56) = v57;
              goto LABEL_209;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
LABEL_172:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_173:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_99:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_209;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 8u;
              unint64_t v59 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v60 = *(void *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5LL || v59 + 10 > v2)
              {
                uint64_t v91 = 0;
                v92 = 0;
                uint64_t v63 = 0LL;
                if (v2 <= v59) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    uint64_t v63 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_203;
                  }

                  v93 = v59++;
                  unint64_t v94 = *(_BYTE *)(v60 + v93);
                  *((void *)this + 1) = v59;
                  v63 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  uint64_t v14 = v92++ > 8;
                  if (v14)
                  {
                    uint64_t v63 = 0LL;
LABEL_202:
                    uint64_t v2 = v93 + 1;
                    goto LABEL_203;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v63 = 0LL;
                }
                goto LABEL_202;
              }

              __int128 v61 = 0;
              char v62 = 0;
              uint64_t v63 = 0LL;
              do
              {
                uint64_t v2 = v59 + 1;
                *((void *)this + 1) = v59 + 1;
                uint64_t v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v61 += 7;
                unint64_t v59 = v2;
                uint64_t v14 = v62++ > 8;
              }

              while (!v14);
              uint64_t v63 = 0LL;
LABEL_203:
              *(void *)(a1 + 32) = v63;
              goto LABEL_209;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              uint64_t v65 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v66 = *(void *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5LL || v65 + 10 > v2)
              {
                double v95 = 0;
                double v96 = 0;
                uint64_t v69 = 0LL;
                if (v2 <= v65) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v65)
                  {
                    uint64_t v69 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_208;
                  }

                  v97 = v65++;
                  v98 = *(_BYTE *)(v66 + v97);
                  *((void *)this + 1) = v65;
                  v69 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  uint64_t v14 = v96++ > 8;
                  if (v14)
                  {
                    uint64_t v69 = 0LL;
LABEL_207:
                    uint64_t v2 = v97 + 1;
                    goto LABEL_208;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v69 = 0LL;
                }
                goto LABEL_207;
              }

              uint64_t v67 = 0;
              uint64_t v68 = 0;
              uint64_t v69 = 0LL;
              do
              {
                uint64_t v2 = v65 + 1;
                *((void *)this + 1) = v65 + 1;
                uint64_t v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v67 += 7;
                uint64_t v65 = v2;
                uint64_t v14 = v68++ > 8;
              }

              while (!v14);
              uint64_t v69 = 0LL;
LABEL_208:
              *(void *)(a1 + 40) = v69;
LABEL_209:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_209;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  int v5 = *(_BYTE *)(a2 + 73);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 76) = v3;
  *(_BYTE *)(a1 + 73) = v5;
  uint64_t v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_22:
    double result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 76) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "rightGroundContactTimePercentage", *(double *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x80) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 2u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 3u:
          *(_WORD *)(a1 + 76) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 5u:
          *(_WORD *)(a1 + 76) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v21 = v20 != 0;
          }

          *(_BYTE *)(a1 + 73) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v24 = v23 != 0;
          }

          *(_BYTE *)(a1 + 72) = v24;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_49:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_57:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 72), 9u);
  if ((*(_WORD *)(v3 + 76) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  }
  return result;
}

  PB::TextFormatter::format(this, "isSuccessful", *(_BYTE *)(a1 + 84));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v21 = v20 != 0;
              }

              *(_BYTE *)(a1 + 84) = v21;
              goto LABEL_119;
            case 2u:
              *(_WORD *)(a1 + 88) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }

                  unsigned int v47 = v23++;
                  v48 = *(_BYTE *)(v24 + v47);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_107:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_107;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v27;
              goto LABEL_119;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 85) = v30;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v32 = v31 != 0;
              }

              *(_BYTE *)(a1 + 86) = v32;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }

                  unsigned int v51 = v33++;
                  uint8_t v52 = *(_BYTE *)(v34 + v51);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_112;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 80) = v37;
              goto LABEL_119;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x100u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }

                  uint64_t v55 = v39++;
                  uint64_t v56 = *(_BYTE *)(v40 + v55);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_117;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 72) = v43;
LABEL_119:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_103:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_119;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v21 = v20 != 0;
              }

              *(_BYTE *)(a1 + 44) = v21;
              goto LABEL_61;
            case 2u:
              *(_BYTE *)(a1 + 48) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 48) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 48) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 5u:
              *(_BYTE *)(a1 + 48) |= 0x10u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_60;
                  }

                  uint64_t v31 = v23++;
                  uint64_t v32 = *(_BYTE *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_59:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_60;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_59;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 40) = v27;
LABEL_61:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_BYTE *)(a1 + 48) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_55:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_44:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_61;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_61;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = *(float *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 48) = result;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "longitude", *(float *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 52) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 52) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 52) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_58:
            uint64_t v2 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_54:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_59;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_64;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_63;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_64;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_70;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_69;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_68;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = v31;
LABEL_70:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_59:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_70;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_40:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_41:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v26 = *((void *)this + 1);
        if (v26 >= *((void *)this + 2))
        {
          uint64_t v29 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v27 = v26 + 1;
          uint64_t v28 = *(unsigned __int8 *)(*(void *)this + v26);
          *((void *)this + 1) = v27;
          uint64_t v29 = v28 != 0;
        }

        *(_BYTE *)(a1 + 16) = v29;
      }

      else if ((_DWORD)v20 == 1)
      {
        uint64_t v21 = operator new(0xA8uLL);
        uint64_t v24 = sub_1010F1358((uint64_t)v21);
        uint64_t v25 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v21;
        if (v25)
        {
          (*(void (**)(uint64_t, double))(*(void *)v25 + 8LL))(v25, v24);
          uint64_t v21 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v31, v22, v23)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v31);
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 44) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_88;
            case 2u:
              *(_WORD *)(a1 + 44) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_87;
            case 3u:
              *(_WORD *)(a1 + 44) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_87;
            case 4u:
              *(_WORD *)(a1 + 44) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_87:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_88:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 44) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v45 = v21++;
                  char v46 = *(_BYTE *)(v22 + v45);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 6u:
              *(_WORD *)(a1 + 44) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  v49 = v27++;
                  uint64_t v50 = *(_BYTE *)(v28 + v49);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_97:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 7u:
              *(_WORD *)(a1 + 44) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 40) = v34;
              goto LABEL_104;
            case 8u:
              *(_WORD *)(a1 + 44) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 41) = v36;
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 44) |= 2u;
              uint64_t v37 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v41 = 0LL;
                if (v2 <= v37) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  char v53 = v37++;
                  uint64_t v54 = *(_BYTE *)(v38 + v53);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_102:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v39 = 0;
              __int128 v40 = 0;
              uint64_t v41 = 0LL;
              do
              {
                uint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                uint64_t v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v39 += 7;
                uint64_t v37 = v2;
                uint64_t v14 = v40++ > 8;
              }

              while (!v14);
              LODWORD(v41) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v41;
LABEL_104:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_57:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_41:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_63;
            case 7u:
              *(_BYTE *)(a1 + 36) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_62;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_61:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_62;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_61;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_62;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_62:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_63:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_63;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v26 = *((void *)this + 1);
        uint64_t v27 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5LL || v26 + 10 > v27)
        {
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          uint64_t v31 = 0LL;
          if (v27 <= v26) {
            uint64_t v27 = *((void *)this + 1);
          }
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v37 = v26 + 1;
            unint64_t v38 = *(_BYTE *)(v28 + v26);
            *((void *)this + 1) = v37;
            v31 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            uint64_t v26 = v37;
            uint64_t v14 = v36++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v31) = 0;
              goto LABEL_47;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v32 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            uint64_t v33 = *(_BYTE *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v26 = v32;
            uint64_t v14 = v30++ > 8;
            if (v14) {
              goto LABEL_43;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 24) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 24) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 24) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 24) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v25 = *((void *)this + 1);
        if (v25 <= 0xFFFFFFFFFFFFFFF7LL && v25 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v25);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        uint64_t v23 = operator new(0x20uLL);
        *(void *)uint64_t v23 = &off_101898ED0;
        v23[6] = 0;
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          uint64_t v23 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v27, v21, v22)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v23 + 16LL))(v23, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v27);
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 36));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_73;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_72;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_72:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_73:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_56:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_79;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_78;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_77:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_78;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_77;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_78;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_78:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_79:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_79;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 24) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 24) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 24) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 24) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_38:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_56;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_55:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_56:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_62;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_61;
                  }

                  uint64_t v31 = v21++;
                  uint64_t v32 = *(_BYTE *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_60:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_61;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_60;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_61;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_61:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_62:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 32) = v28;
              goto LABEL_62;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_62;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_65;
                  }

                  uint64_t v29 = v20++;
                  uint64_t v30 = *(_BYTE *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_64;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_64:
                uint64_t v2 = v29 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_65;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }

    if ((v11 & 7) == 4)
    {
      uint64_t i = 0;
      return i == 0;
    }

    uint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 32) |= 2u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_47:
        uint64_t v2 = *((void *)this + 1) + 8LL;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }

    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v21 = *((void *)this + 1);
          uint64_t v2 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
          {
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v25 = 0LL;
            if (v2 <= v21) {
              uint64_t v2 = *((void *)this + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                uint64_t v25 = 0LL;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_52;
              }

              uint64_t v30 = v21++;
              uint64_t v31 = *(_BYTE *)(v22 + v30);
              *((void *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              uint64_t v14 = v29++ > 8;
              if (v14)
              {
                uint64_t v25 = 0LL;
                goto LABEL_51;
              }
            }

            if (*((_BYTE *)this + 24)) {
              uint64_t v25 = 0LL;
            }
LABEL_51:
            uint64_t v2 = v30 + 1;
          }

          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0LL;
            while (1)
            {
              uint64_t v2 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              uint64_t v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              uint64_t v21 = v2;
              uint64_t v14 = v24++ > 8;
              if (v14)
              {
                uint64_t v25 = 0LL;
                break;
              }
            }
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x28uLL);
        sub_1010DF2B4((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_125:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_126;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_125;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_117:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x1000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x2000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x17u:
              *(_DWORD *)(a1 + 128) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_97:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_116;
            case 0x18u:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x19u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_106;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_115;
            case 0x1Au:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
LABEL_115:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_116:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_117;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_117;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 56) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
          goto LABEL_51;
        }
        *(void *)(a1 + 32) = *(void *)(*(void *)this + v20);
        uint64_t v21 = *((void *)this + 1) + 8LL;
        goto LABEL_61;
      case 2u:
        *(_BYTE *)(a1 + 56) |= 8u;
        uint64_t v23 = *((void *)this + 1);
        uint64_t v24 = *((void *)this + 2);
        uint64_t v25 = *(void *)this;
        if (v23 <= 0xFFFFFFFFFFFFFFF5LL && v23 + 10 <= v24)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0LL;
          do
          {
            uint64_t v29 = v23 + 1;
            *((void *)this + 1) = v23 + 1;
            uint64_t v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_65;
            }
            v26 += 7;
            uint64_t v23 = v29;
            uint64_t v14 = v27++ > 8;
          }

          while (!v14);
LABEL_58:
          LODWORD(v28) = 0;
          goto LABEL_65;
        }

        __int128 v40 = 0;
        uint64_t v41 = 0;
        uint64_t v28 = 0LL;
        if (v24 <= v23) {
          uint64_t v24 = *((void *)this + 1);
        }
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v42 = v23 + 1;
            char v43 = *(_BYTE *)(v25 + v23);
            *((void *)this + 1) = v42;
            v28 |= (unint64_t)(v43 & 0x7F) << v40;
            if (v43 < 0)
            {
              v40 += 7;
              uint64_t v23 = v42;
              uint64_t v14 = v41++ > 8;
              if (v14) {
                goto LABEL_58;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v28) = 0;
            }
          }

          break;
        }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_WORD *)(a1 + 48) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7LL && v20 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v20);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_89;
      case 2u:
        *(_WORD *)(a1 + 48) |= 2u;
        uint64_t v22 = *((void *)this + 1);
        uint64_t v23 = *((void *)this + 2);
        uint64_t v24 = *(void *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5LL && v22 + 10 <= v23)
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0LL;
          do
          {
            uint64_t v28 = v22 + 1;
            *((void *)this + 1) = v22 + 1;
            uint64_t v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_88;
            }
            v25 += 7;
            uint64_t v22 = v28;
            uint64_t v14 = v26++ > 8;
          }

          while (!v14);
LABEL_65:
          LODWORD(v27) = 0;
          goto LABEL_88;
        }

        uint64_t v71 = 0;
        uint64_t v72 = 0;
        uint64_t v27 = 0LL;
        if (v23 <= v22) {
          uint64_t v23 = *((void *)this + 1);
        }
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v73 = v22 + 1;
            uint64_t v74 = *(_BYTE *)(v24 + v22);
            *((void *)this + 1) = v73;
            v27 |= (unint64_t)(v74 & 0x7F) << v71;
            if (v74 < 0)
            {
              v71 += 7;
              uint64_t v22 = v73;
              uint64_t v14 = v72++ > 8;
              if (v14) {
                goto LABEL_65;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v27) = 0;
            }
          }

          break;
        }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 44) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7LL && v20 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v20);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_55;
      case 2u:
        *(_BYTE *)(a1 + 44) |= 2u;
        uint64_t v22 = *((void *)this + 1);
        uint64_t v23 = *((void *)this + 2);
        uint64_t v24 = *(void *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5LL && v22 + 10 <= v23)
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0LL;
          do
          {
            uint64_t v28 = v22 + 1;
            *((void *)this + 1) = v22 + 1;
            uint64_t v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_54;
            }
            v25 += 7;
            uint64_t v22 = v28;
            uint64_t v14 = v26++ > 8;
          }

          while (!v14);
LABEL_49:
          LODWORD(v27) = 0;
          goto LABEL_54;
        }

        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v27 = 0LL;
        if (v23 <= v22) {
          uint64_t v23 = *((void *)this + 1);
        }
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v38 = v22 + 1;
            uint64_t v39 = *(_BYTE *)(v24 + v22);
            *((void *)this + 1) = v38;
            v27 |= (unint64_t)(v39 & 0x7F) << v36;
            if (v39 < 0)
            {
              v36 += 7;
              uint64_t v22 = v38;
              uint64_t v14 = v37++ > 8;
              if (v14) {
                goto LABEL_49;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v27) = 0;
            }
          }

          break;
        }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 32) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v21 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v21)
        {
          uint64_t v42 = 0;
          char v43 = 0;
          uint64_t v25 = 0LL;
          if (v21 <= v20) {
            uint64_t v21 = *((void *)this + 1);
          }
          do
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }

            uint64_t v44 = v20 + 1;
            uint64_t v45 = *(_BYTE *)(v22 + v20);
            *((void *)this + 1) = v44;
            v25 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24)) {
                LODWORD(v25) = 0;
              }
              goto LABEL_62;
            }

            v42 += 7;
            uint64_t v20 = v44;
            uint64_t v14 = v43++ > 8;
          }

          while (!v14);
LABEL_51:
          LODWORD(v25) = 0;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v26 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v20 = v26;
            uint64_t v14 = v24++ > 8;
            if (v14) {
              goto LABEL_51;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  unsigned int v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_87:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_88;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_87;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_88;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_88:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  unsigned int v51 = v27++;
                  uint8_t v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v55 = v33++;
                  uint64_t v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  unint64_t v59 = v39++;
                  uint64_t v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v43;
LABEL_104:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  PB::TextFormatter::format(this, "deltaVelocityX", *(float *)(a1 + 28));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_91;
            case 2u:
              *(_WORD *)(a1 + 68) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 3u:
              *(_WORD *)(a1 + 68) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 4u:
              *(_WORD *)(a1 + 68) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_56;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_90;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_90:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_91:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_56:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_102;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x800u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }

                  uint64_t v37 = v21++;
                  unint64_t v38 = *(_BYTE *)(v22 + v37);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  uint64_t v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_95:
                    uint64_t v2 = v37 + 1;
                    goto LABEL_96;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_95;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_102;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }

                  uint64_t v41 = v27++;
                  uint64_t v42 = *(_BYTE *)(v28 + v41);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_100:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_101;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_100;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 60) = v31;
LABEL_102:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 68) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 64) = v34;
              goto LABEL_102;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_102;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x28uLL);
        sub_1010E1C20((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }

            uint64_t v36 = v21++;
            uint64_t v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          uint64_t v2 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x98uLL);
        uint64_t v23 = sub_1010F9B7C((uint64_t)v20);
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t, double))(*(void *)v24 + 8LL))(v24, v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v26, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v26);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x20uLL);
        sub_1010FAC88((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 4u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_179;
                  }

                  uint64_t v73 = v20++;
                  uint64_t v74 = *(_BYTE *)(v21 + v73);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_178;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_178:
                uint64_t v2 = v73 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_179;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_53;
                  }

                  uint64_t v29 = v20++;
                  uint64_t v30 = *(_BYTE *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_52;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_52:
                uint64_t v2 = v29 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_53;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 108) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v21 = v20 != 0;
              }

              *(_BYTE *)(a1 + 100) = v21;
              goto LABEL_159;
            case 2u:
              *(_DWORD *)(a1 + 108) |= 0x80000u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }

                  uint64_t v57 = v23++;
                  uint64_t v58 = *(_BYTE *)(v24 + v57);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_167:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_168;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_167;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_168;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_168:
              *(_DWORD *)(a1 + 84) = v27;
              goto LABEL_159;
            case 3u:
              *(_DWORD *)(a1 + 108) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 4u:
              *(_DWORD *)(a1 + 108) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 5u:
              *(_DWORD *)(a1 + 108) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 6u:
              *(_DWORD *)(a1 + 108) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 7u:
              *(_DWORD *)(a1 + 108) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 8u:
              *(_DWORD *)(a1 + 108) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 9u:
              *(_DWORD *)(a1 + 108) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xAu:
              *(_DWORD *)(a1 + 108) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xBu:
              *(_DWORD *)(a1 + 108) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xCu:
              *(_DWORD *)(a1 + 108) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0xDu:
              *(_DWORD *)(a1 + 108) |= 0x4000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 103) = v30;
              goto LABEL_159;
            case 0xEu:
              *(_DWORD *)(a1 + 108) |= 0x2000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v32 = v31 != 0;
              }

              *(_BYTE *)(a1 + 102) = v32;
              goto LABEL_159;
            case 0xFu:
              *(_DWORD *)(a1 + 108) |= 0x1000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 101) = v34;
              goto LABEL_159;
            case 0x10u:
              *(_DWORD *)(a1 + 108) |= 0x8000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 104) = v36;
              goto LABEL_159;
            case 0x11u:
              *(_DWORD *)(a1 + 108) |= 2u;
              uint64_t v37 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v41 = 0LL;
                if (v2 <= v37) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_173;
                  }

                  __int128 v61 = v37++;
                  char v62 = *(_BYTE *)(v38 + v61);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_172:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_173;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_172;
              }

              uint64_t v39 = 0;
              __int128 v40 = 0;
              uint64_t v41 = 0LL;
              do
              {
                uint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                uint64_t v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_173;
                }
                v39 += 7;
                uint64_t v37 = v2;
                uint64_t v14 = v40++ > 8;
              }

              while (!v14);
              LODWORD(v41) = 0;
LABEL_173:
              *(_DWORD *)(a1 + 12) = v41;
              goto LABEL_159;
            case 0x12u:
              *(_DWORD *)(a1 + 108) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x13u:
              *(_DWORD *)(a1 + 108) |= 0x100u;
              char v43 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v44 = *(void *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5LL || v43 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                unsigned int v47 = 0LL;
                if (v2 <= v43) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }

                  uint64_t v65 = v43++;
                  unint64_t v66 = *(_BYTE *)(v44 + v65);
                  *((void *)this + 1) = v43;
                  v47 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_177:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_178;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v47) = 0;
                }
                goto LABEL_177;
              }

              uint64_t v45 = 0;
              char v46 = 0;
              unsigned int v47 = 0LL;
              do
              {
                uint64_t v2 = v43 + 1;
                *((void *)this + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v45 += 7;
                char v43 = v2;
                uint64_t v14 = v46++ > 8;
              }

              while (!v14);
              LODWORD(v47) = 0;
LABEL_178:
              *(_DWORD *)(a1 + 40) = v47;
              goto LABEL_159;
            case 0x14u:
              *(_DWORD *)(a1 + 108) |= 0x80u;
              v49 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v50 = *(void *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5LL || v49 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                char v53 = 0LL;
                if (v2 <= v49) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }

                  uint64_t v69 = v49++;
                  uint64_t v70 = *(_BYTE *)(v50 + v69);
                  *((void *)this + 1) = v49;
                  v53 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_182:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_183;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v53) = 0;
                }
                goto LABEL_182;
              }

              unsigned int v51 = 0;
              uint8_t v52 = 0;
              char v53 = 0LL;
              do
              {
                uint64_t v2 = v49 + 1;
                *((void *)this + 1) = v49 + 1;
                uint64_t v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v51 += 7;
                v49 = v2;
                uint64_t v14 = v52++ > 8;
              }

              while (!v14);
              LODWORD(v53) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 36) = v53;
LABEL_159:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x15u:
              *(_DWORD *)(a1 + 108) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x16u:
              *(_DWORD *)(a1 + 108) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x17u:
              *(_DWORD *)(a1 + 108) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x18u:
              *(_DWORD *)(a1 + 108) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x19u:
              *(_DWORD *)(a1 + 108) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x1Au:
              *(_DWORD *)(a1 + 108) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x1Bu:
              *(_DWORD *)(a1 + 108) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_118;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_158;
            case 0x1Cu:
              *(_DWORD *)(a1 + 108) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_158:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_118:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_159;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_159;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 152) |= 0x20000000u;
          uint64_t v20 = *((void *)this + 1);
          if (v20 >= *((void *)this + 2))
          {
            uint64_t v23 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v21 = v20 + 1;
            uint64_t v22 = *(unsigned __int8 *)(*(void *)this + v20);
            *((void *)this + 1) = v21;
            uint64_t v23 = v22 != 0;
          }

          *(_BYTE *)(a1 + 148) = v23;
          goto LABEL_238;
        case 2u:
          *(_DWORD *)(a1 + 152) |= 0x200000u;
          uint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_237;
        case 3u:
          *(_DWORD *)(a1 + 152) |= 4u;
          uint64_t v26 = *((void *)this + 1);
          uint64_t v27 = *((void *)this + 2);
          uint64_t v28 = *(void *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5LL && v26 + 10 <= v27)
          {
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v31 = 0LL;
            do
            {
              uint64_t v32 = v26 + 1;
              *((void *)this + 1) = v26 + 1;
              uint64_t v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_246;
              }
              v29 += 7;
              uint64_t v26 = v32;
              uint64_t v14 = v30++ > 8;
            }

            while (!v14);
LABEL_165:
            uint64_t v31 = 0LL;
            goto LABEL_246;
          }

          v131 = 0;
          v132 = 0;
          uint64_t v31 = 0LL;
          if (v27 <= v26) {
            uint64_t v27 = *((void *)this + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              uint64_t v31 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v133 = v26 + 1;
              v134 = *(_BYTE *)(v28 + v26);
              *((void *)this + 1) = v133;
              v31 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                uint64_t v26 = v133;
                uint64_t v14 = v132++ > 8;
                if (v14) {
                  goto LABEL_165;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v31 = 0LL;
              }
            }

            break;
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 200)
      {
        switch((int)v20)
        {
          case 201:
            *(_DWORD *)(a1 + 132) |= 8u;
            uint64_t v23 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v24 = *(void *)this;
            if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
            {
              uint64_t v74 = 0;
              uint64_t v75 = 0;
              uint64_t v27 = 0LL;
              if (v2 <= v23) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v23)
                {
                  uint64_t v27 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_208;
                }

                uint64_t v76 = v23++;
                uint64_t v77 = *(_BYTE *)(v24 + v76);
                *((void *)this + 1) = v23;
                v27 |= (unint64_t)(v77 & 0x7F) << v74;
                if ((v77 & 0x80) == 0) {
                  break;
                }
                v74 += 7;
                uint64_t v14 = v75++ > 8;
                if (v14)
                {
                  uint64_t v27 = 0LL;
LABEL_207:
                  uint64_t v2 = v76 + 1;
                  goto LABEL_208;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v27 = 0LL;
              }
              goto LABEL_207;
            }

            uint64_t v25 = 0;
            uint64_t v26 = 0;
            uint64_t v27 = 0LL;
            do
            {
              uint64_t v2 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              uint64_t v28 = *(_BYTE *)(v24 + v23);
              v27 |= (unint64_t)(v28 & 0x7F) << v25;
              if ((v28 & 0x80) == 0) {
                goto LABEL_208;
              }
              v25 += 7;
              uint64_t v23 = v2;
              uint64_t v14 = v26++ > 8;
            }

            while (!v14);
            uint64_t v27 = 0LL;
LABEL_208:
            *(void *)(a1 + 32) = v27;
            break;
          case 202:
            *(_DWORD *)(a1 + 132) |= 0x1000000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              uint64_t v44 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v43 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              uint64_t v44 = v43 != 0;
            }

            *(_BYTE *)(a1 + 124) = v44;
            break;
          case 203:
            *(_DWORD *)(a1 + 132) |= 0x8000u;
            uint64_t v45 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            char v46 = *(void *)this;
            if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
            {
              uint64_t v86 = 0;
              uint64_t v87 = 0;
              v49 = 0LL;
              if (v2 <= v45) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v45)
                {
                  LODWORD(v49) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_223;
                }

                v88 = v45++;
                uint64_t v89 = *(_BYTE *)(v46 + v88);
                *((void *)this + 1) = v45;
                v49 |= (unint64_t)(v89 & 0x7F) << v86;
                if ((v89 & 0x80) == 0) {
                  break;
                }
                v86 += 7;
                uint64_t v14 = v87++ > 8;
                if (v14)
                {
                  LODWORD(v49) = 0;
LABEL_222:
                  uint64_t v2 = v88 + 1;
                  goto LABEL_223;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v49) = 0;
              }
              goto LABEL_222;
            }

            unsigned int v47 = 0;
            v48 = 0;
            v49 = 0LL;
            do
            {
              uint64_t v2 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              uint64_t v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0) {
                goto LABEL_223;
              }
              v47 += 7;
              uint64_t v45 = v2;
              uint64_t v14 = v48++ > 8;
            }

            while (!v14);
            LODWORD(v49) = 0;
LABEL_223:
            *(_DWORD *)(a1 + 88) = v49;
            break;
          case 204:
            *(_DWORD *)(a1 + 132) |= 0x10u;
            unsigned int v51 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint8_t v52 = *(void *)this;
            if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
            {
              uint64_t v90 = 0;
              uint64_t v91 = 0;
              uint64_t v55 = 0LL;
              if (v2 <= v51) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v51)
                {
                  uint64_t v55 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_228;
                }

                v92 = v51++;
                v93 = *(_BYTE *)(v52 + v92);
                *((void *)this + 1) = v51;
                v55 |= (unint64_t)(v93 & 0x7F) << v90;
                if ((v93 & 0x80) == 0) {
                  break;
                }
                v90 += 7;
                uint64_t v14 = v91++ > 8;
                if (v14)
                {
                  uint64_t v55 = 0LL;
LABEL_227:
                  uint64_t v2 = v92 + 1;
                  goto LABEL_228;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v55 = 0LL;
              }
              goto LABEL_227;
            }

            char v53 = 0;
            uint64_t v54 = 0;
            uint64_t v55 = 0LL;
            do
            {
              uint64_t v2 = v51 + 1;
              *((void *)this + 1) = v51 + 1;
              uint64_t v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0) {
                goto LABEL_228;
              }
              v53 += 7;
              unsigned int v51 = v2;
              uint64_t v14 = v54++ > 8;
            }

            while (!v14);
            uint64_t v55 = 0LL;
LABEL_228:
            *(void *)(a1 + 40) = v55;
            break;
          case 205:
            *(_DWORD *)(a1 + 132) |= 0x400000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 206:
            *(_DWORD *)(a1 + 132) |= 4u;
            uint64_t v57 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v58 = *(void *)this;
            if (v57 > 0xFFFFFFFFFFFFFFF5LL || v57 + 10 > v2)
            {
              unint64_t v94 = 0;
              double v95 = 0;
              __int128 v61 = 0LL;
              if (v2 <= v57) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v57)
                {
                  __int128 v61 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_233;
                }

                double v96 = v57++;
                v97 = *(_BYTE *)(v58 + v96);
                *((void *)this + 1) = v57;
                v61 |= (unint64_t)(v97 & 0x7F) << v94;
                if ((v97 & 0x80) == 0) {
                  break;
                }
                v94 += 7;
                uint64_t v14 = v95++ > 8;
                if (v14)
                {
                  __int128 v61 = 0LL;
LABEL_232:
                  uint64_t v2 = v96 + 1;
                  goto LABEL_233;
                }
              }

              if (*((_BYTE *)this + 24)) {
                __int128 v61 = 0LL;
              }
              goto LABEL_232;
            }

            unint64_t v59 = 0;
            uint64_t v60 = 0;
            __int128 v61 = 0LL;
            do
            {
              uint64_t v2 = v57 + 1;
              *((void *)this + 1) = v57 + 1;
              char v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0) {
                goto LABEL_233;
              }
              v59 += 7;
              uint64_t v57 = v2;
              uint64_t v14 = v60++ > 8;
            }

            while (!v14);
            __int128 v61 = 0LL;
LABEL_233:
            *(void *)(a1 + 24) = v61;
            break;
          case 207:
            *(_DWORD *)(a1 + 132) |= 0x2000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 208:
            *(_DWORD *)(a1 + 132) |= 2u;
            uint64_t v63 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v64 = *(void *)this;
            if (v63 > 0xFFFFFFFFFFFFFFF5LL || v63 + 10 > v2)
            {
              v98 = 0;
              v99 = 0;
              uint64_t v67 = 0LL;
              if (v2 <= v63) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v63)
                {
                  uint64_t v67 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_238;
                }

                v100 = v63++;
                v101 = *(_BYTE *)(v64 + v100);
                *((void *)this + 1) = v63;
                v67 |= (unint64_t)(v101 & 0x7F) << v98;
                if ((v101 & 0x80) == 0) {
                  break;
                }
                v98 += 7;
                uint64_t v14 = v99++ > 8;
                if (v14)
                {
                  uint64_t v67 = 0LL;
LABEL_237:
                  uint64_t v2 = v100 + 1;
                  goto LABEL_238;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v67 = 0LL;
              }
              goto LABEL_237;
            }

            uint64_t v65 = 0;
            unint64_t v66 = 0;
            uint64_t v67 = 0LL;
            do
            {
              uint64_t v2 = v63 + 1;
              *((void *)this + 1) = v63 + 1;
              uint64_t v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0) {
                goto LABEL_238;
              }
              v65 += 7;
              uint64_t v63 = v2;
              uint64_t v14 = v66++ > 8;
            }

            while (!v14);
            uint64_t v67 = 0LL;
LABEL_238:
            *(void *)(a1 + 16) = v67;
            break;
          case 209:
            *(_DWORD *)(a1 + 132) |= 0x1000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
            {
LABEL_137:
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
LABEL_198:
              uint64_t v2 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v2;
            }

            break;
          default:
            switch((int)v20)
            {
              case 301:
                *(_DWORD *)(a1 + 132) |= 1u;
                uint64_t v29 = *((void *)this + 1);
                uint64_t v2 = *((void *)this + 2);
                uint64_t v30 = *(void *)this;
                if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
                {
                  uint64_t v78 = 0;
                  uint64_t v79 = 0;
                  uint64_t v33 = 0LL;
                  if (v2 <= v29) {
                    uint64_t v2 = *((void *)this + 1);
                  }
                  while (1)
                  {
                    if (v2 == v29)
                    {
                      uint64_t v33 = 0LL;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_213;
                    }

                    uint64_t v80 = v29++;
                    uint64_t v81 = *(_BYTE *)(v30 + v80);
                    *((void *)this + 1) = v29;
                    v33 |= (unint64_t)(v81 & 0x7F) << v78;
                    if ((v81 & 0x80) == 0) {
                      break;
                    }
                    v78 += 7;
                    uint64_t v14 = v79++ > 8;
                    if (v14)
                    {
                      uint64_t v33 = 0LL;
LABEL_212:
                      uint64_t v2 = v80 + 1;
                      goto LABEL_213;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    uint64_t v33 = 0LL;
                  }
                  goto LABEL_212;
                }

                uint64_t v31 = 0;
                uint64_t v32 = 0;
                uint64_t v33 = 0LL;
                do
                {
                  uint64_t v2 = v29 + 1;
                  *((void *)this + 1) = v29 + 1;
                  uint64_t v34 = *(_BYTE *)(v30 + v29);
                  v33 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    goto LABEL_213;
                  }
                  v31 += 7;
                  uint64_t v29 = v2;
                  uint64_t v14 = v32++ > 8;
                }

                while (!v14);
                uint64_t v33 = 0LL;
LABEL_213:
                *(void *)(a1 + 8) = v33;
                break;
              case 302:
                *(_DWORD *)(a1 + 132) |= 0x200u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
                goto LABEL_198;
              case 303:
                *(_DWORD *)(a1 + 132) |= 0x400u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
                goto LABEL_198;
              case 304:
                *(_DWORD *)(a1 + 132) |= 0x10000000u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 >= *((void *)this + 2))
                {
                  uint64_t v70 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  uint64_t v69 = *(unsigned __int8 *)(*(void *)this + v2++);
                  *((void *)this + 1) = v2;
                  uint64_t v70 = v69 != 0;
                }

                *(_BYTE *)(a1 + 128) = v70;
                goto LABEL_199;
              case 305:
                *(_DWORD *)(a1 + 132) |= 0x2000000u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 >= *((void *)this + 2))
                {
                  uint64_t v72 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  uint64_t v71 = *(unsigned __int8 *)(*(void *)this + v2++);
                  *((void *)this + 1) = v2;
                  uint64_t v72 = v71 != 0;
                }

                *(_BYTE *)(a1 + 125) = v72;
                goto LABEL_199;
              default:
LABEL_127:
                double result = PB::Reader::skip(this, v20, v11 & 7, 0);
                if (!(_DWORD)result) {
                  return result;
                }
                uint64_t v2 = *((void *)this + 1);
                goto LABEL_199;
            }

            break;
        }
      }

      else
      {
        switch((int)v20)
        {
          case 1:
            *(_DWORD *)(a1 + 132) |= 0x4000000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              uint64_t v22 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              uint64_t v22 = v21 != 0;
            }

            *(_BYTE *)(a1 + 126) = v22;
            break;
          case 2:
            *(_DWORD *)(a1 + 132) |= 0x8000000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              uint64_t v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              uint64_t v36 = v35 != 0;
            }

            *(_BYTE *)(a1 + 127) = v36;
            break;
          case 3:
            *(_DWORD *)(a1 + 132) |= 0x80000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 4:
            *(_DWORD *)(a1 + 132) |= 0x800000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 5:
            *(_DWORD *)(a1 + 132) |= 0x100000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 6:
            *(_DWORD *)(a1 + 132) |= 0x20000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 7:
            *(_DWORD *)(a1 + 132) |= 0x10000u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 8:
            *(_DWORD *)(a1 + 132) |= 0x100u;
            uint64_t v37 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            unint64_t v38 = *(void *)this;
            if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v2)
            {
              uint64_t v82 = 0;
              v83 = 0;
              uint64_t v41 = 0LL;
              if (v2 <= v37) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_218;
                }

                uint64_t v84 = v37++;
                uint64_t v85 = *(_BYTE *)(v38 + v84);
                *((void *)this + 1) = v37;
                v41 |= (unint64_t)(v85 & 0x7F) << v82;
                if ((v85 & 0x80) == 0) {
                  break;
                }
                v82 += 7;
                uint64_t v14 = v83++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_217:
                  uint64_t v2 = v84 + 1;
                  goto LABEL_218;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v41) = 0;
              }
              goto LABEL_217;
            }

            uint64_t v39 = 0;
            __int128 v40 = 0;
            uint64_t v41 = 0LL;
            do
            {
              uint64_t v2 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              uint64_t v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0) {
                goto LABEL_218;
              }
              v39 += 7;
              uint64_t v37 = v2;
              uint64_t v14 = v40++ > 8;
            }

            while (!v14);
            LODWORD(v41) = 0;
LABEL_218:
            *(_DWORD *)(a1 + 60) = v41;
            break;
          case 9:
            *(_DWORD *)(a1 + 132) |= 0x80u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 10:
            *(_DWORD *)(a1 + 132) |= 0x40u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          case 11:
            *(_DWORD *)(a1 + 132) |= 0x20u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_137;
            }
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_198;
          default:
            switch((int)v20)
            {
              case 'e':
                *(_DWORD *)(a1 + 132) |= 0x800u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
                break;
              case 'f':
                *(_DWORD *)(a1 + 132) |= 0x4000u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
                break;
              case 'g':
                *(_DWORD *)(a1 + 132) |= 0x200000u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
                break;
              case 'h':
                *(_DWORD *)(a1 + 132) |= 0x40000u;
                uint64_t v2 = *((void *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                  goto LABEL_137;
                }
                *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
                break;
              default:
                goto LABEL_127;
            }

            goto LABEL_198;
        }
      }

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1000F9040( v6,  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  return a1;
}

        if ((v11 & 7) != 4)
        {
          uint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)(a1 + 164) |= (unint64_t)&_mh_execute_header;
              uint64_t v21 = *((void *)this + 1);
              if (v21 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v22 = v21 + 1;
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v21);
                *((void *)this + 1) = v22;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 160) = v24;
              goto LABEL_282;
            case 2u:
              *(void *)(a1 + 164) |= 0x100000uLL;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v34 = *((void *)this + 2);
              uint64_t v35 = *(void *)this;
              if (v33 <= 0xFFFFFFFFFFFFFFF5LL && v33 + 10 <= v34)
              {
                uint64_t v36 = 0;
                uint64_t v37 = 0;
                unint64_t v38 = 0LL;
                do
                {
                  uint64_t v39 = v33 + 1;
                  *((void *)this + 1) = v33 + 1;
                  __int128 v40 = *(_BYTE *)(v35 + v33);
                  v38 |= (unint64_t)(v40 & 0x7F) << v36;
                  if ((v40 & 0x80) == 0) {
                    goto LABEL_294;
                  }
                  v36 += 7;
                  uint64_t v33 = v39;
                  uint64_t v14 = v37++ > 8;
                }

                while (!v14);
LABEL_195:
                LODWORD(v38) = 0;
                goto LABEL_294;
              }

              v160 = 0;
              v161 = 0;
              unint64_t v38 = 0LL;
              if (v34 <= v33) {
                uint64_t v34 = *((void *)this + 1);
              }
              while (2)
              {
                if (v34 == v33)
                {
                  LODWORD(v38) = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  v162 = v33 + 1;
                  v163 = *(_BYTE *)(v35 + v33);
                  *((void *)this + 1) = v162;
                  v38 |= (unint64_t)(v163 & 0x7F) << v160;
                  if (v163 < 0)
                  {
                    v160 += 7;
                    uint64_t v33 = v162;
                    uint64_t v14 = v161++ > 8;
                    if (v14) {
                      goto LABEL_195;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v38) = 0;
                  }
                }

                break;
              }

  uint64_t v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "peakTimestamp", *(void *)(a1 + 24));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v21 = v20 != 0;
              }

              *(_BYTE *)(a1 + 64) = v21;
              goto LABEL_156;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }

                  __int128 v61 = v23++;
                  char v62 = *(_BYTE *)(v24 + v61);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_129:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_130;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_129;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_130:
              *(_DWORD *)(a1 + 52) = v27;
              goto LABEL_156;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_72;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_72;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_125;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_72;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 4u;
              uint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    uint64_t v33 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }

                  uint64_t v65 = v29++;
                  unint64_t v66 = *(_BYTE *)(v30 + v65);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v33 = 0LL;
LABEL_134:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_135;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v33 = 0LL;
                }
                goto LABEL_134;
              }

              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v31 += 7;
                uint64_t v29 = v2;
                uint64_t v14 = v32++ > 8;
              }

              while (!v14);
              uint64_t v33 = 0LL;
LABEL_135:
              *(void *)(a1 + 24) = v33;
              goto LABEL_156;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              uint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }

                  uint64_t v69 = v35++;
                  uint64_t v70 = *(_BYTE *)(v36 + v69);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_139:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_140;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_139;
              }

              uint64_t v37 = 0;
              unint64_t v38 = 0;
              uint64_t v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                __int128 v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v37 += 7;
                uint64_t v35 = v2;
                uint64_t v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 40) = v39;
              goto LABEL_156;
            case 8u:
              *(_WORD *)(a1 + 68) |= 1u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }

                  uint64_t v73 = v41++;
                  uint64_t v74 = *(_BYTE *)(v42 + v73);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0LL;
LABEL_144:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_145;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v45 = 0LL;
                }
                goto LABEL_144;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              uint64_t v45 = 0LL;
LABEL_145:
              *(void *)(a1 + 8) = v45;
              goto LABEL_156;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              unsigned int v47 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                unsigned int v51 = 0LL;
                if (v2 <= v47) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    unsigned int v51 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }

                  uint64_t v77 = v47++;
                  uint64_t v78 = *(_BYTE *)(v48 + v77);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    unsigned int v51 = 0LL;
LABEL_149:
                    uint64_t v2 = v77 + 1;
                    goto LABEL_150;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  unsigned int v51 = 0LL;
                }
                goto LABEL_149;
              }

              v49 = 0;
              uint64_t v50 = 0;
              unsigned int v51 = 0LL;
              do
              {
                uint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                uint8_t v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v49 += 7;
                unsigned int v47 = v2;
                uint64_t v14 = v50++ > 8;
              }

              while (!v14);
              unsigned int v51 = 0LL;
LABEL_150:
              *(void *)(a1 + 16) = v51;
              goto LABEL_156;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_125:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_72:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_156;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 8u;
              char v53 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                uint64_t v57 = 0LL;
                if (v2 <= v53) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }

                  uint64_t v81 = v53++;
                  uint64_t v82 = *(_BYTE *)(v54 + v81);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  uint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0LL;
LABEL_154:
                    uint64_t v2 = v81 + 1;
                    goto LABEL_155;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v57 = 0LL;
                }
                goto LABEL_154;
              }

              uint64_t v55 = 0;
              uint64_t v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                uint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                uint64_t v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v55 += 7;
                char v53 = v2;
                uint64_t v14 = v56++ > 8;
              }

              while (!v14);
              uint64_t v57 = 0LL;
LABEL_155:
              *(void *)(a1 + 32) = v57;
LABEL_156:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_156;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_66;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_67;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
LABEL_62:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_73;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_66;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_67;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
LABEL_62:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_73;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

    if ((v11 & 7) == 4)
    {
      uint64_t i = 0;
      return i == 0;
    }

    uint64_t v20 = v11 >> 3;
    if ((int)(v11 >> 3) > 200)
    {
      switch((int)v20)
      {
        case 301:
          *(_DWORD *)(a1 + 68) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v28 = v27 != 0;
          }

          *(_BYTE *)(a1 + 63) = v28;
          break;
        case 302:
          *(_DWORD *)(a1 + 68) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v79 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v78 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v79 = v78 != 0;
          }

          *(_BYTE *)(a1 + 61) = v79;
          break;
        case 303:
          *(_DWORD *)(a1 + 68) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v81 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v80 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v81 = v80 != 0;
          }

          *(_BYTE *)(a1 + 58) = v81;
          break;
        case 304:
          *(_DWORD *)(a1 + 68) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            v83 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v82 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            v83 = v82 != 0;
          }

          *(_BYTE *)(a1 + 57) = v83;
          break;
        case 305:
          *(_DWORD *)(a1 + 68) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v85 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v84 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v85 = v84 != 0;
          }

          *(_BYTE *)(a1 + 62) = v85;
          break;
        case 306:
          *(_DWORD *)(a1 + 68) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v86 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v87 = v86 != 0;
          }

          *(_BYTE *)(a1 + 59) = v87;
          break;
        case 307:
          *(_DWORD *)(a1 + 68) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v89 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v88 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v89 = v88 != 0;
          }

          *(_BYTE *)(a1 + 60) = v89;
          break;
        default:
          switch((int)v20)
          {
            case 401:
              *(_DWORD *)(a1 + 68) |= 0x400u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unint64_t v94 = 0;
                double v95 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_207;
                  }

                  double v96 = v21++;
                  v97 = *(_BYTE *)(v22 + v96);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v97 & 0x7F) << v94;
                  if ((v97 & 0x80) == 0) {
                    break;
                  }
                  v94 += 7;
                  uint64_t v14 = v95++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_206;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
LABEL_206:
                uint64_t v2 = v96 + 1;
              }

              else
              {
                uint64_t v23 = 0;
                uint64_t v24 = 0;
                uint64_t v25 = 0LL;
                while (1)
                {
                  uint64_t v2 = v21 + 1;
                  *((void *)this + 1) = v21 + 1;
                  uint64_t v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    break;
                  }
                  v23 += 7;
                  uint64_t v21 = v2;
                  uint64_t v14 = v24++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    break;
                  }
                }
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_66;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_67;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
LABEL_62:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_73;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          uint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *(_DWORD *)(a1 + 92) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v80 = 0;
                uint64_t v81 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }

                  uint64_t v82 = v27++;
                  v83 = *(_BYTE *)(v28 + v82);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0) {
                    break;
                  }
                  v80 += 7;
                  uint64_t v14 = v81++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_185:
                    uint64_t v2 = v82 + 1;
                    goto LABEL_186;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_185;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_186;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_186:
              *(void *)(a1 + 24) = v31;
              goto LABEL_217;
            case 'f':
              *(_DWORD *)(a1 + 92) |= 8u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                v88 = 0;
                uint64_t v89 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_196;
                  }

                  uint64_t v90 = v41++;
                  uint64_t v91 = *(_BYTE *)(v42 + v90);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v91 & 0x7F) << v88;
                  if ((v91 & 0x80) == 0) {
                    break;
                  }
                  v88 += 7;
                  uint64_t v14 = v89++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0LL;
LABEL_195:
                    uint64_t v2 = v90 + 1;
                    goto LABEL_196;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v45 = 0LL;
                }
                goto LABEL_195;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_196;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              uint64_t v45 = 0LL;
LABEL_196:
              *(void *)(a1 + 32) = v45;
              goto LABEL_217;
            case 'g':
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              unsigned int v47 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                unsigned int v51 = 0LL;
                if (v2 <= v47) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_201;
                  }

                  unint64_t v94 = v47++;
                  double v95 = *(_BYTE *)(v48 + v94);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0) {
                    break;
                  }
                  v92 += 7;
                  uint64_t v14 = v93++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_200:
                    uint64_t v2 = v94 + 1;
                    goto LABEL_201;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_200;
              }

              v49 = 0;
              uint64_t v50 = 0;
              unsigned int v51 = 0LL;
              do
              {
                uint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                uint8_t v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_201;
                }
                v49 += 7;
                unsigned int v47 = v2;
                uint64_t v14 = v50++ > 8;
              }

              while (!v14);
              LODWORD(v51) = 0;
LABEL_201:
              *(_DWORD *)(a1 + 76) = v51;
              goto LABEL_217;
            case 'h':
              *(_DWORD *)(a1 + 92) |= 0x100u;
              char v53 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                double v96 = 0;
                v97 = 0;
                uint64_t v57 = 0LL;
                if (v2 <= v53) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }

                  v98 = v53++;
                  v99 = *(_BYTE *)(v54 + v98);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v99 & 0x7F) << v96;
                  if ((v99 & 0x80) == 0) {
                    break;
                  }
                  v96 += 7;
                  uint64_t v14 = v97++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_205:
                    uint64_t v2 = v98 + 1;
                    goto LABEL_206;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_205;
              }

              uint64_t v55 = 0;
              uint64_t v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                uint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                uint64_t v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v55 += 7;
                char v53 = v2;
                uint64_t v14 = v56++ > 8;
              }

              while (!v14);
              LODWORD(v57) = 0;
LABEL_206:
              *(_DWORD *)(a1 + 56) = v57;
              goto LABEL_217;
            case 'i':
              *(_DWORD *)(a1 + 92) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v60 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v59 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v60 = v59 != 0;
              }

              *(_BYTE *)(a1 + 90) = v60;
              goto LABEL_217;
            case 'j':
              *(_DWORD *)(a1 + 92) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v62 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                __int128 v61 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v62 = v61 != 0;
              }

              *(_BYTE *)(a1 + 89) = v62;
              goto LABEL_217;
            case 'k':
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              uint64_t v63 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v64 = *(void *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5LL || v63 + 10 > v2)
              {
                v100 = 0;
                v101 = 0;
                uint64_t v67 = 0LL;
                if (v2 <= v63) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }

                  v102 = v63++;
                  __int16 v103 = *(_BYTE *)(v64 + v102);
                  *((void *)this + 1) = v63;
                  v67 |= (unint64_t)(v103 & 0x7F) << v100;
                  if ((v103 & 0x80) == 0) {
                    break;
                  }
                  v100 += 7;
                  uint64_t v14 = v101++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_210:
                    uint64_t v2 = v102 + 1;
                    goto LABEL_211;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v67) = 0;
                }
                goto LABEL_210;
              }

              uint64_t v65 = 0;
              unint64_t v66 = 0;
              uint64_t v67 = 0LL;
              do
              {
                uint64_t v2 = v63 + 1;
                *((void *)this + 1) = v63 + 1;
                uint64_t v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_211;
                }
                v65 += 7;
                uint64_t v63 = v2;
                uint64_t v14 = v66++ > 8;
              }

              while (!v14);
              LODWORD(v67) = 0;
LABEL_211:
              *(_DWORD *)(a1 + 72) = v67;
              goto LABEL_217;
            case 'l':
              *(_DWORD *)(a1 + 92) |= 0x800u;
              uint64_t v69 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v70 = *(void *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5LL || v69 + 10 > v2)
              {
                BOOL v104 = 0;
                v105 = 0;
                uint64_t v73 = 0LL;
                if (v2 <= v69) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_216;
                  }

                  __int128 v106 = v69++;
                  char v107 = *(_BYTE *)(v70 + v106);
                  *((void *)this + 1) = v69;
                  v73 |= (unint64_t)(v107 & 0x7F) << v104;
                  if ((v107 & 0x80) == 0) {
                    break;
                  }
                  v104 += 7;
                  uint64_t v14 = v105++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_215:
                    uint64_t v2 = v106 + 1;
                    goto LABEL_216;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v73) = 0;
                }
                goto LABEL_215;
              }

              uint64_t v71 = 0;
              uint64_t v72 = 0;
              uint64_t v73 = 0LL;
              do
              {
                uint64_t v2 = v69 + 1;
                *((void *)this + 1) = v69 + 1;
                uint64_t v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0) {
                  goto LABEL_216;
                }
                v71 += 7;
                uint64_t v69 = v2;
                uint64_t v14 = v72++ > 8;
              }

              while (!v14);
              LODWORD(v73) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 68) = v73;
              goto LABEL_217;
            default:
              switch((int)v20)
              {
                case 201:
                  *(_DWORD *)(a1 + 92) |= 2u;
                  uint64_t v21 = *((void *)this + 1);
                  uint64_t v2 = *((void *)this + 2);
                  uint64_t v22 = *(void *)this;
                  if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
                  {
                    uint64_t v76 = 0;
                    uint64_t v77 = 0;
                    uint64_t v25 = 0LL;
                    if (v2 <= v21) {
                      uint64_t v2 = *((void *)this + 1);
                    }
                    while (1)
                    {
                      if (v2 == v21)
                      {
                        uint64_t v25 = 0LL;
                        *((_BYTE *)this + 24) = 1;
                        goto LABEL_181;
                      }

                      uint64_t v78 = v21++;
                      uint64_t v79 = *(_BYTE *)(v22 + v78);
                      *((void *)this + 1) = v21;
                      v25 |= (unint64_t)(v79 & 0x7F) << v76;
                      if ((v79 & 0x80) == 0) {
                        break;
                      }
                      v76 += 7;
                      uint64_t v14 = v77++ > 8;
                      if (v14)
                      {
                        uint64_t v25 = 0LL;
LABEL_180:
                        uint64_t v2 = v78 + 1;
                        goto LABEL_181;
                      }
                    }

                    if (*((_BYTE *)this + 24)) {
                      uint64_t v25 = 0LL;
                    }
                    goto LABEL_180;
                  }

                  uint64_t v23 = 0;
                  uint64_t v24 = 0;
                  uint64_t v25 = 0LL;
                  do
                  {
                    uint64_t v2 = v21 + 1;
                    *((void *)this + 1) = v21 + 1;
                    uint64_t v26 = *(_BYTE *)(v22 + v21);
                    v25 |= (unint64_t)(v26 & 0x7F) << v23;
                    if ((v26 & 0x80) == 0) {
                      goto LABEL_181;
                    }
                    v23 += 7;
                    uint64_t v21 = v2;
                    uint64_t v14 = v24++ > 8;
                  }

                  while (!v14);
                  uint64_t v25 = 0LL;
LABEL_181:
                  *(void *)(a1 + 16) = v25;
                  goto LABEL_217;
                case 202:
                  *(_DWORD *)(a1 + 92) |= 1u;
                  uint64_t v33 = *((void *)this + 1);
                  uint64_t v2 = *((void *)this + 2);
                  uint64_t v34 = *(void *)this;
                  if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
                  {
                    uint64_t v84 = 0;
                    uint64_t v85 = 0;
                    uint64_t v37 = 0LL;
                    if (v2 <= v33) {
                      uint64_t v2 = *((void *)this + 1);
                    }
                    while (1)
                    {
                      if (v2 == v33)
                      {
                        uint64_t v37 = 0LL;
                        *((_BYTE *)this + 24) = 1;
                        goto LABEL_191;
                      }

                      uint64_t v86 = v33++;
                      uint64_t v87 = *(_BYTE *)(v34 + v86);
                      *((void *)this + 1) = v33;
                      v37 |= (unint64_t)(v87 & 0x7F) << v84;
                      if ((v87 & 0x80) == 0) {
                        break;
                      }
                      v84 += 7;
                      uint64_t v14 = v85++ > 8;
                      if (v14)
                      {
                        uint64_t v37 = 0LL;
LABEL_190:
                        uint64_t v2 = v86 + 1;
                        goto LABEL_191;
                      }
                    }

                    if (*((_BYTE *)this + 24)) {
                      uint64_t v37 = 0LL;
                    }
                    goto LABEL_190;
                  }

                  uint64_t v35 = 0;
                  uint64_t v36 = 0;
                  uint64_t v37 = 0LL;
                  do
                  {
                    uint64_t v2 = v33 + 1;
                    *((void *)this + 1) = v33 + 1;
                    unint64_t v38 = *(_BYTE *)(v34 + v33);
                    v37 |= (unint64_t)(v38 & 0x7F) << v35;
                    if ((v38 & 0x80) == 0) {
                      goto LABEL_191;
                    }
                    v35 += 7;
                    uint64_t v33 = v2;
                    uint64_t v14 = v36++ > 8;
                  }

                  while (!v14);
                  uint64_t v37 = 0LL;
LABEL_191:
                  *(void *)(a1 + 8) = v37;
LABEL_217:
                  uint64_t v3 = *((void *)this + 2);
                  uint64_t v4 = *((unsigned __int8 *)this + 24);
                  if (v2 >= v3 || v4 != 0) {
                    return v4 == 0;
                  }
                  continue;
                case 203:
                  *(_DWORD *)(a1 + 92) |= 0x10u;
                  uint64_t v2 = *((void *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                    goto LABEL_112;
                  }
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
                  goto LABEL_176;
                case 204:
                  *(_DWORD *)(a1 + 92) |= 0x40u;
                  uint64_t v2 = *((void *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                    goto LABEL_112;
                  }
                  *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
                  goto LABEL_176;
                case 205:
                  *(_DWORD *)(a1 + 92) |= 0x80u;
                  uint64_t v2 = *((void *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                    goto LABEL_112;
                  }
                  *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
                  goto LABEL_176;
                case 206:
                  *(_DWORD *)(a1 + 92) |= 0x20u;
                  uint64_t v2 = *((void *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
                  {
LABEL_112:
                    *((_BYTE *)this + 24) = 1;
                  }

                  else
                  {
                    *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_176:
                    uint64_t v2 = *((void *)this + 1) + 4LL;
                    *((void *)this + 1) = v2;
                  }

                  goto LABEL_217;
                case 207:
                  *(_DWORD *)(a1 + 92) |= 0x10000u;
                  uint64_t v2 = *((void *)this + 1);
                  if (v2 >= *((void *)this + 2))
                  {
                    __int128 v40 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }

                  else
                  {
                    uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                    *((void *)this + 1) = v2;
                    __int128 v40 = v39 != 0;
                  }

                  *(_BYTE *)(a1 + 88) = v40;
                  goto LABEL_217;
                default:
                  switch((int)v20)
                  {
                    case 1:
                      *(_DWORD *)(a1 + 92) |= 0x200u;
                      uint64_t v2 = *((void *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                        goto LABEL_112;
                      }
                      *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
                      goto LABEL_176;
                    case 2:
                      *(_DWORD *)(a1 + 92) |= 0x4000u;
                      uint64_t v2 = *((void *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                        goto LABEL_112;
                      }
                      *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
                      goto LABEL_176;
                    case 3:
                      *(_DWORD *)(a1 + 92) |= 0x400u;
                      uint64_t v2 = *((void *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                        goto LABEL_112;
                      }
                      *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
                      goto LABEL_176;
                    case 4:
                      *(_DWORD *)(a1 + 92) |= 0x8000u;
                      uint64_t v2 = *((void *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                        goto LABEL_112;
                      }
                      *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
                      goto LABEL_176;
                    default:
                      double result = PB::Reader::skip(this, v20, v11 & 7, 0);
                      if (!(_DWORD)result) {
                        return result;
                      }
                      uint64_t v2 = *((void *)this + 1);
                      break;
                  }

                  goto LABEL_217;
              }
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      switch((v11 >> 3))
      {
        case 'e':
          *(void *)(a1 + 172) |= 0x100000000000uLL;
          uint64_t v22 = *((void *)this + 1);
          if (v22 >= *((void *)this + 2))
          {
            uint64_t v25 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v23 = v22 + 1;
            uint64_t v24 = *(unsigned __int8 *)(*(void *)this + v22);
            *((void *)this + 1) = v23;
            uint64_t v25 = v24 != 0;
          }

          *(_BYTE *)(a1 + 167) = v25;
          goto LABEL_279;
        case 'f':
          *(void *)(a1 + 172) |= 0x800000uLL;
          uint64_t v71 = *((void *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
            goto LABEL_187;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v71);
          goto LABEL_278;
        case 'g':
          *(void *)(a1 + 172) |= 0x400000uLL;
          uint64_t v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
            goto LABEL_187;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v72);
          goto LABEL_278;
        case 'h':
          *(void *)(a1 + 172) |= 0x200000uLL;
          uint64_t v73 = *((void *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
            goto LABEL_187;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v73);
          goto LABEL_278;
        case 'i':
          *(void *)(a1 + 172) |= 0x1000000uLL;
          uint64_t v74 = *((void *)this + 1);
          if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((void *)this + 2)) {
            goto LABEL_187;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v74);
          goto LABEL_278;
        case 'j':
          *(void *)(a1 + 172) |= 0x2000000000uLL;
          uint64_t v75 = *((void *)this + 1);
          if (v75 >= *((void *)this + 2))
          {
            uint64_t v78 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v76 = v75 + 1;
            uint64_t v77 = *(unsigned __int8 *)(*(void *)this + v75);
            *((void *)this + 1) = v76;
            uint64_t v78 = v77 != 0;
          }

          *(_BYTE *)(a1 + 160) = v78;
          goto LABEL_279;
        case 'k':
          *(void *)(a1 + 172) |= 0x200000000uLL;
          uint64_t v79 = *((void *)this + 1);
          if (v79 >= *((void *)this + 2))
          {
            uint64_t v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v80 = v79 + 1;
            uint64_t v81 = *(unsigned __int8 *)(*(void *)this + v79);
            *((void *)this + 1) = v80;
            uint64_t v82 = v81 != 0;
          }

          *(_BYTE *)(a1 + 156) = v82;
          goto LABEL_279;
        case 'l':
          *(void *)(a1 + 172) |= 0x200000000000uLL;
          v83 = *((void *)this + 1);
          if (v83 >= *((void *)this + 2))
          {
            uint64_t v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v84 = v83 + 1;
            uint64_t v85 = *(unsigned __int8 *)(*(void *)this + v83);
            *((void *)this + 1) = v84;
            uint64_t v86 = v85 != 0;
          }

          *(_BYTE *)(a1 + 168) = v86;
          goto LABEL_279;
        case 'm':
          *(void *)(a1 + 172) |= 0x400000000uLL;
          uint64_t v87 = *((void *)this + 1);
          if (v87 >= *((void *)this + 2))
          {
            uint64_t v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v88 = v87 + 1;
            uint64_t v89 = *(unsigned __int8 *)(*(void *)this + v87);
            *((void *)this + 1) = v88;
            uint64_t v90 = v89 != 0;
          }

          *(_BYTE *)(a1 + 157) = v90;
          goto LABEL_279;
        case 'n':
          *(void *)(a1 + 172) |= 0x1000000000uLL;
          uint64_t v91 = *((void *)this + 1);
          if (v91 >= *((void *)this + 2))
          {
            unint64_t v94 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v92 = v91 + 1;
            v93 = *(unsigned __int8 *)(*(void *)this + v91);
            *((void *)this + 1) = v92;
            unint64_t v94 = v93 != 0;
          }

          *(_BYTE *)(a1 + 159) = v94;
          goto LABEL_279;
        case 'o':
          *(void *)(a1 + 172) |= 0x40000000000uLL;
          double v95 = *((void *)this + 1);
          if (v95 >= *((void *)this + 2))
          {
            v98 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            double v96 = v95 + 1;
            v97 = *(unsigned __int8 *)(*(void *)this + v95);
            *((void *)this + 1) = v96;
            v98 = v97 != 0;
          }

          *(_BYTE *)(a1 + 165) = v98;
          goto LABEL_279;
        case 'p':
          *(void *)(a1 + 172) |= 0x2000uLL;
          v99 = *((void *)this + 1);
          if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)this + 2)) {
            goto LABEL_187;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v99);
          goto LABEL_278;
        case 'q':
          *(void *)(a1 + 172) |= 0x1000uLL;
          v100 = *((void *)this + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)this + 2)) {
            goto LABEL_187;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v100);
          goto LABEL_278;
        case 'r':
          *(void *)(a1 + 172) |= 0x4000uLL;
          v101 = *((void *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)this + 2))
          {
LABEL_187:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v101);
LABEL_278:
            *((void *)this + 1) += 4LL;
          }

          goto LABEL_279;
        case 's':
          *(void *)(a1 + 172) |= 0x20000000000uLL;
          v102 = *((void *)this + 1);
          if (v102 >= *((void *)this + 2))
          {
            v105 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            __int16 v103 = v102 + 1;
            BOOL v104 = *(unsigned __int8 *)(*(void *)this + v102);
            *((void *)this + 1) = v103;
            v105 = v104 != 0;
          }

          *(_BYTE *)(a1 + 164) = v105;
          goto LABEL_279;
        case 't':
          *(void *)(a1 + 172) |= 0x4000000000uLL;
          __int128 v106 = *((void *)this + 1);
          if (v106 >= *((void *)this + 2))
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            char v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(void *)this + v106);
            *((void *)this + 1) = v107;
            v109 = v108 != 0;
          }

          *(_BYTE *)(a1 + 161) = v109;
          goto LABEL_279;
        case 'u':
          *(void *)(a1 + 172) |= 0x80000000000uLL;
          v110 = *((void *)this + 1);
          if (v110 >= *((void *)this + 2))
          {
            v113 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v111 = v110 + 1;
            v112 = *(unsigned __int8 *)(*(void *)this + v110);
            *((void *)this + 1) = v111;
            v113 = v112 != 0;
          }

          *(_BYTE *)(a1 + 166) = v113;
          goto LABEL_279;
        case 'v':
          *(void *)(a1 + 172) |= 0x8000000000uLL;
          v114 = *((void *)this + 1);
          if (v114 >= *((void *)this + 2))
          {
            v117 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v115 = v114 + 1;
            v116 = *(unsigned __int8 *)(*(void *)this + v114);
            *((void *)this + 1) = v115;
            v117 = v116 != 0;
          }

          *(_BYTE *)(a1 + 162) = v117;
          goto LABEL_279;
        case 'w':
          *(void *)(a1 + 172) |= 0x10000000000uLL;
          v118 = *((void *)this + 1);
          if (v118 >= *((void *)this + 2))
          {
            v121 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v119 = v118 + 1;
            v120 = *(unsigned __int8 *)(*(void *)this + v118);
            *((void *)this + 1) = v119;
            v121 = v120 != 0;
          }

          *(_BYTE *)(a1 + 163) = v121;
          goto LABEL_279;
        default:
          switch((int)v20)
          {
            case 201:
              *(void *)(a1 + 172) |= 0x800000000uLL;
              uint64_t v26 = *((void *)this + 1);
              if (v26 >= *((void *)this + 2))
              {
                uint64_t v29 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = v26 + 1;
                uint64_t v28 = *(unsigned __int8 *)(*(void *)this + v26);
                *((void *)this + 1) = v27;
                uint64_t v29 = v28 != 0;
              }

              *(_BYTE *)(a1 + 158) = v29;
              goto LABEL_279;
            case 202:
              *(void *)(a1 + 172) |= 0x10000000uLL;
              v122 = *((void *)this + 1);
              v123 = *((void *)this + 2);
              v124 = *(void *)this;
              if (v122 <= 0xFFFFFFFFFFFFFFF5LL && v122 + 10 <= v123)
              {
                v125 = 0;
                v126 = 0;
                v127 = 0LL;
                do
                {
                  v128 = v122 + 1;
                  *((void *)this + 1) = v122 + 1;
                  v129 = *(_BYTE *)(v124 + v122);
                  v127 |= (unint64_t)(v129 & 0x7F) << v125;
                  if ((v129 & 0x80) == 0) {
                    goto LABEL_303;
                  }
                  v125 += 7;
                  v122 = v128;
                  uint64_t v14 = v126++ > 8;
                }

                while (!v14);
LABEL_248:
                LODWORD(v127) = 0;
                goto LABEL_303;
              }

              v186 = 0;
              v187 = 0;
              v127 = 0LL;
              if (v123 <= v122) {
                v123 = *((void *)this + 1);
              }
              while (2)
              {
                if (v123 == v122)
                {
                  LODWORD(v127) = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  v188 = v122 + 1;
                  v189 = *(_BYTE *)(v124 + v122);
                  *((void *)this + 1) = v188;
                  v127 |= (unint64_t)(v189 & 0x7F) << v186;
                  if (v189 < 0)
                  {
                    v186 += 7;
                    v122 = v188;
                    uint64_t v14 = v187++ > 8;
                    if (v14) {
                      goto LABEL_248;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v127) = 0;
                  }
                }

                break;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0LL;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v24 = 0LL;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0LL;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 0x100u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }

                  uint64_t v35 = v20++;
                  uint64_t v36 = *(_BYTE *)(v21 + v35);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_78;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_78:
                uint64_t v2 = v35 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_79;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 72) = result;
  uint64_t v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "inertialAccelY", *(double *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 104) |= 0x800u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  uint64_t v35 = v20++;
                  uint64_t v36 = *(_BYTE *)(v21 + v35);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_87:
                uint64_t v2 = v35 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  double result = PB::Writer::write(this, *(double *)(v3 + 80), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }

                  uint64_t v73 = v20++;
                  uint64_t v74 = *(_BYTE *)(v21 + v73);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_175;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_175:
                uint64_t v2 = v73 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_176;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          uint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *(_WORD *)(a1 + 60) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v54 = 0;
                uint64_t v55 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }

                  uint64_t v56 = v21++;
                  uint64_t v57 = *(_BYTE *)(v22 + v56);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v57 & 0x7F) << v54;
                  if ((v57 & 0x80) == 0) {
                    break;
                  }
                  v54 += 7;
                  uint64_t v14 = v55++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
                    goto LABEL_114;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
LABEL_114:
                uint64_t v2 = v56 + 1;
              }

              else
              {
                uint64_t v23 = 0;
                uint64_t v24 = 0;
                uint64_t v25 = 0LL;
                do
                {
                  uint64_t v2 = v21 + 1;
                  *((void *)this + 1) = v21 + 1;
                  uint64_t v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    goto LABEL_115;
                  }
                  v23 += 7;
                  uint64_t v21 = v2;
                  uint64_t v14 = v24++ > 8;
                }

                while (!v14);
                uint64_t v25 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  unsigned int v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_87:
                uint64_t v2 = v47 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  uint64_t v9 = *(_BYTE *)(a2 + 61);
  v3 |= 0x800u;
  *(_WORD *)(result + 64) = v3;
  *(_BYTE *)(result + 61) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 202)
      {
        switch((int)v20)
        {
          case 301:
            *(_WORD *)(a1 + 64) |= 1u;
            uint64_t v27 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v28 = *(void *)this;
            if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
            {
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              uint64_t v31 = 0LL;
              if (v2 <= v27) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v27)
                {
                  uint64_t v31 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_155;
                }

                uint64_t v74 = v27++;
                uint64_t v75 = *(_BYTE *)(v28 + v74);
                *((void *)this + 1) = v27;
                v31 |= (unint64_t)(v75 & 0x7F) << v72;
                if ((v75 & 0x80) == 0) {
                  break;
                }
                v72 += 7;
                uint64_t v14 = v73++ > 8;
                if (v14)
                {
                  uint64_t v31 = 0LL;
LABEL_154:
                  uint64_t v2 = v74 + 1;
                  goto LABEL_155;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v31 = 0LL;
              }
              goto LABEL_154;
            }

            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v31 = 0LL;
            do
            {
              uint64_t v2 = v27 + 1;
              *((void *)this + 1) = v27 + 1;
              uint64_t v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0) {
                goto LABEL_155;
              }
              v29 += 7;
              uint64_t v27 = v2;
              uint64_t v14 = v30++ > 8;
            }

            while (!v14);
            uint64_t v31 = 0LL;
LABEL_155:
            *(void *)(a1 + 8) = v31;
            break;
          case 302:
            *(_WORD *)(a1 + 64) |= 2u;
            char v43 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v44 = *(void *)this;
            if (v43 > 0xFFFFFFFFFFFFFFF5LL || v43 + 10 > v2)
            {
              uint64_t v80 = 0;
              uint64_t v81 = 0;
              unsigned int v47 = 0LL;
              if (v2 <= v43) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v43)
                {
                  unsigned int v47 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_165;
                }

                uint64_t v82 = v43++;
                v83 = *(_BYTE *)(v44 + v82);
                *((void *)this + 1) = v43;
                v47 |= (unint64_t)(v83 & 0x7F) << v80;
                if ((v83 & 0x80) == 0) {
                  break;
                }
                v80 += 7;
                uint64_t v14 = v81++ > 8;
                if (v14)
                {
                  unsigned int v47 = 0LL;
LABEL_164:
                  uint64_t v2 = v82 + 1;
                  goto LABEL_165;
                }
              }

              if (*((_BYTE *)this + 24)) {
                unsigned int v47 = 0LL;
              }
              goto LABEL_164;
            }

            uint64_t v45 = 0;
            char v46 = 0;
            unsigned int v47 = 0LL;
            do
            {
              uint64_t v2 = v43 + 1;
              *((void *)this + 1) = v43 + 1;
              v48 = *(_BYTE *)(v44 + v43);
              v47 |= (unint64_t)(v48 & 0x7F) << v45;
              if ((v48 & 0x80) == 0) {
                goto LABEL_165;
              }
              v45 += 7;
              char v43 = v2;
              uint64_t v14 = v46++ > 8;
            }

            while (!v14);
            unsigned int v47 = 0LL;
LABEL_165:
            *(void *)(a1 + 16) = v47;
            break;
          case 303:
            *(_WORD *)(a1 + 64) |= 0x200u;
            v49 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v50 = *(void *)this;
            if (v49 > 0xFFFFFFFFFFFFFFF5LL || v49 + 10 > v2)
            {
              uint64_t v84 = 0;
              uint64_t v85 = 0;
              char v53 = 0LL;
              if (v2 <= v49) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v49)
                {
                  LODWORD(v53) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_170;
                }

                uint64_t v86 = v49++;
                uint64_t v87 = *(_BYTE *)(v50 + v86);
                *((void *)this + 1) = v49;
                v53 |= (unint64_t)(v87 & 0x7F) << v84;
                if ((v87 & 0x80) == 0) {
                  break;
                }
                v84 += 7;
                uint64_t v14 = v85++ > 8;
                if (v14)
                {
                  LODWORD(v53) = 0;
LABEL_169:
                  uint64_t v2 = v86 + 1;
                  goto LABEL_170;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v53) = 0;
              }
              goto LABEL_169;
            }

            unsigned int v51 = 0;
            uint8_t v52 = 0;
            char v53 = 0LL;
            do
            {
              uint64_t v2 = v49 + 1;
              *((void *)this + 1) = v49 + 1;
              uint64_t v54 = *(_BYTE *)(v50 + v49);
              v53 |= (unint64_t)(v54 & 0x7F) << v51;
              if ((v54 & 0x80) == 0) {
                goto LABEL_170;
              }
              v51 += 7;
              v49 = v2;
              uint64_t v14 = v52++ > 8;
            }

            while (!v14);
            LODWORD(v53) = 0;
LABEL_170:
            *(_DWORD *)(a1 + 56) = v53;
            break;
          case 304:
            *(_WORD *)(a1 + 64) |= 0x100u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
            {
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
LABEL_145:
              uint64_t v2 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v2;
            }

            else
            {
LABEL_74:
              *((_BYTE *)this + 24) = 1;
            }

            break;
          case 305:
            *(_WORD *)(a1 + 64) |= 0x80u;
            uint64_t v55 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v56 = *(void *)this;
            if (v55 > 0xFFFFFFFFFFFFFFF5LL || v55 + 10 > v2)
            {
              v88 = 0;
              uint64_t v89 = 0;
              unint64_t v59 = 0LL;
              if (v2 <= v55) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v55)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_175;
                }

                uint64_t v90 = v55++;
                uint64_t v91 = *(_BYTE *)(v56 + v90);
                *((void *)this + 1) = v55;
                v59 |= (unint64_t)(v91 & 0x7F) << v88;
                if ((v91 & 0x80) == 0) {
                  break;
                }
                v88 += 7;
                uint64_t v14 = v89++ > 8;
                if (v14)
                {
                  LODWORD(v59) = 0;
LABEL_174:
                  uint64_t v2 = v90 + 1;
                  goto LABEL_175;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v59) = 0;
              }
              goto LABEL_174;
            }

            uint64_t v57 = 0;
            uint64_t v58 = 0;
            unint64_t v59 = 0LL;
            do
            {
              uint64_t v2 = v55 + 1;
              *((void *)this + 1) = v55 + 1;
              uint64_t v60 = *(_BYTE *)(v56 + v55);
              v59 |= (unint64_t)(v60 & 0x7F) << v57;
              if ((v60 & 0x80) == 0) {
                goto LABEL_175;
              }
              v57 += 7;
              uint64_t v55 = v2;
              uint64_t v14 = v58++ > 8;
            }

            while (!v14);
            LODWORD(v59) = 0;
LABEL_175:
            *(_DWORD *)(a1 + 48) = v59;
            break;
          default:
            if ((_DWORD)v20 != 203) {
              goto LABEL_89;
            }
            *(_WORD *)(a1 + 64) |= 0x400u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              uint64_t v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              uint64_t v36 = v35 != 0;
            }

            *(_BYTE *)(a1 + 60) = v36;
            break;
        }
      }

      else
      {
        switch((int)v20)
        {
          case 'e':
            *(_WORD *)(a1 + 64) |= 0x40u;
            uint64_t v21 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v22 = *(void *)this;
            if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
            {
              uint64_t v68 = 0;
              uint64_t v69 = 0;
              uint64_t v25 = 0LL;
              if (v2 <= v21) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v21)
                {
                  LODWORD(v25) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_150;
                }

                uint64_t v70 = v21++;
                uint64_t v71 = *(_BYTE *)(v22 + v70);
                *((void *)this + 1) = v21;
                v25 |= (unint64_t)(v71 & 0x7F) << v68;
                if ((v71 & 0x80) == 0) {
                  break;
                }
                v68 += 7;
                uint64_t v14 = v69++ > 8;
                if (v14)
                {
                  LODWORD(v25) = 0;
LABEL_149:
                  uint64_t v2 = v70 + 1;
                  goto LABEL_150;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v25) = 0;
              }
              goto LABEL_149;
            }

            uint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0LL;
            do
            {
              uint64_t v2 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              uint64_t v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                goto LABEL_150;
              }
              v23 += 7;
              uint64_t v21 = v2;
              uint64_t v14 = v24++ > 8;
            }

            while (!v14);
            LODWORD(v25) = 0;
LABEL_150:
            *(_DWORD *)(a1 + 44) = v25;
            break;
          case 'f':
            *(_WORD *)(a1 + 64) |= 0x10u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_74;
            }
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_145;
          case 'g':
            *(_WORD *)(a1 + 64) |= 0x20u;
            uint64_t v37 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            unint64_t v38 = *(void *)this;
            if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v2)
            {
              uint64_t v76 = 0;
              uint64_t v77 = 0;
              uint64_t v41 = 0LL;
              if (v2 <= v37) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_160;
                }

                uint64_t v78 = v37++;
                uint64_t v79 = *(_BYTE *)(v38 + v78);
                *((void *)this + 1) = v37;
                v41 |= (unint64_t)(v79 & 0x7F) << v76;
                if ((v79 & 0x80) == 0) {
                  break;
                }
                v76 += 7;
                uint64_t v14 = v77++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_159:
                  uint64_t v2 = v78 + 1;
                  goto LABEL_160;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v41) = 0;
              }
              goto LABEL_159;
            }

            uint64_t v39 = 0;
            __int128 v40 = 0;
            uint64_t v41 = 0LL;
            do
            {
              uint64_t v2 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              uint64_t v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0) {
                goto LABEL_160;
              }
              v39 += 7;
              uint64_t v37 = v2;
              uint64_t v14 = v40++ > 8;
            }

            while (!v14);
            LODWORD(v41) = 0;
LABEL_160:
            *(_DWORD *)(a1 + 40) = v41;
            break;
          case 'h':
            *(_WORD *)(a1 + 64) |= 8u;
            uint64_t v2 = *((void *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
              goto LABEL_74;
            }
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
            goto LABEL_145;
          default:
            if ((_DWORD)v20 == 201)
            {
              *(_WORD *)(a1 + 64) |= 4u;
              __int128 v61 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v62 = *(void *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5LL || v61 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                uint64_t v65 = 0LL;
                if (v2 <= v61) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v61)
                  {
                    uint64_t v65 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_180;
                  }

                  unint64_t v94 = v61++;
                  double v95 = *(_BYTE *)(v62 + v94);
                  *((void *)this + 1) = v61;
                  v65 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0) {
                    break;
                  }
                  v92 += 7;
                  uint64_t v14 = v93++ > 8;
                  if (v14)
                  {
                    uint64_t v65 = 0LL;
                    goto LABEL_179;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v65 = 0LL;
                }
LABEL_179:
                uint64_t v2 = v94 + 1;
              }

              else
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                uint64_t v65 = 0LL;
                while (1)
                {
                  uint64_t v2 = v61 + 1;
                  *((void *)this + 1) = v61 + 1;
                  unint64_t v66 = *(_BYTE *)(v62 + v61);
                  v65 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  __int128 v61 = v2;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v65 = 0LL;
                    break;
                  }
                }
              }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0xCBu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_62;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_WORD *)(a1 + 52) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_WORD *)(a1 + 52) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_50;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_43:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_63;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v21 = v20 != 0;
          }

          *(_BYTE *)(a1 + 48) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v26 = v25 != 0;
          }

          *(_BYTE *)(a1 + 49) = v26;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v23 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v22 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v23 = v22 != 0;
          }

          *(_BYTE *)(a1 + 50) = v23;
          break;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_62:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_63:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_50:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 48), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "triggerTimeLastHighElevationGainTimestamp", *(void *)(a1 + 64));
  uint64_t v9 = *(_WORD *)(a1 + 104);
  if ((v9 & 4) == 0)
  {
LABEL_11:
    if ((v9 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  unsigned int v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_87:
                uint64_t v2 = v47 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  uint64_t v10 = *(_DWORD *)(a2 + 152);
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_24;
    }
LABEL_41:
    uint64_t v26 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 152) |= 2u;
    *(void *)(a1 + 64) = v26;
    if ((*(_DWORD *)(a2 + 152) & 0x20000) == 0) {
      return a1;
    }
    goto LABEL_25;
  }

  uint64_t v25 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 152) |= 1u;
  *(void *)(a1 + 56) = v25;
  uint64_t v10 = *(_DWORD *)(a2 + 152);
  if ((v10 & 2) != 0) {
    goto LABEL_41;
  }
LABEL_24:
  if ((v10 & 0x20000) != 0)
  {
LABEL_25:
    int v11 = *(_BYTE *)(a2 + 149);
    *(_DWORD *)(a1 + 152) |= 0x20000u;
    *(_BYTE *)(a1 + 149) = v11;
  }

  return a1;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_74;
                  }

                  uint64_t v41 = v20++;
                  uint64_t v42 = *(_BYTE *)(v21 + v41);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_73;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_73:
                uint64_t v2 = v41 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_74;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

    if ((v11 & 7) == 4)
    {
      uint64_t i = 0;
      return i == 0;
    }

    uint64_t v20 = v11 >> 3;
    if ((int)(v11 >> 3) <= 103)
    {
      if ((_DWORD)v20 == 101)
      {
        *(_BYTE *)(a1 + 40) |= 4u;
        uint64_t v39 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        __int128 v40 = *(void *)this;
        if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
        {
          uint64_t v58 = 0;
          unint64_t v59 = 0;
          char v43 = 0LL;
          if (v2 <= v39) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              char v43 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_108;
            }

            uint64_t v60 = v39++;
            __int128 v61 = *(_BYTE *)(v40 + v60);
            *((void *)this + 1) = v39;
            v43 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            uint64_t v14 = v59++ > 8;
            if (v14)
            {
              char v43 = 0LL;
              goto LABEL_107;
            }
          }

          if (*((_BYTE *)this + 24)) {
            char v43 = 0LL;
          }
LABEL_107:
          uint64_t v2 = v60 + 1;
        }

        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          char v43 = 0LL;
          while (1)
          {
            uint64_t v2 = v39 + 1;
            *((void *)this + 1) = v39 + 1;
            uint64_t v44 = *(_BYTE *)(v40 + v39);
            v43 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0) {
              break;
            }
            v41 += 7;
            uint64_t v39 = v2;
            uint64_t v14 = v42++ > 8;
            if (v14)
            {
              char v43 = 0LL;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 300)
      {
        switch((int)v20)
        {
          case 301:
            *(_WORD *)(a1 + 96) |= 8u;
            uint64_t v27 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v28 = *(void *)this;
            if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
            {
              BOOL v104 = 0;
              v105 = 0;
              uint64_t v31 = 0LL;
              if (v2 <= v27) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v27)
                {
                  uint64_t v31 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_223;
                }

                __int128 v106 = v27++;
                char v107 = *(_BYTE *)(v28 + v106);
                *((void *)this + 1) = v27;
                v31 |= (unint64_t)(v107 & 0x7F) << v104;
                if ((v107 & 0x80) == 0) {
                  break;
                }
                v104 += 7;
                uint64_t v14 = v105++ > 8;
                if (v14)
                {
                  uint64_t v31 = 0LL;
LABEL_222:
                  uint64_t v2 = v106 + 1;
                  goto LABEL_223;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v31 = 0LL;
              }
              goto LABEL_222;
            }

            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v31 = 0LL;
            do
            {
              uint64_t v2 = v27 + 1;
              *((void *)this + 1) = v27 + 1;
              uint64_t v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0) {
                goto LABEL_223;
              }
              v29 += 7;
              uint64_t v27 = v2;
              uint64_t v14 = v30++ > 8;
            }

            while (!v14);
            uint64_t v31 = 0LL;
LABEL_223:
            *(void *)(a1 + 32) = v31;
            break;
          case 302:
            *(_WORD *)(a1 + 96) |= 0x10u;
            uint64_t v45 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            char v46 = *(void *)this;
            if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
            {
              v112 = 0;
              v113 = 0;
              v49 = 0LL;
              if (v2 <= v45) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v45)
                {
                  v49 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_233;
                }

                v114 = v45++;
                v115 = *(_BYTE *)(v46 + v114);
                *((void *)this + 1) = v45;
                v49 |= (unint64_t)(v115 & 0x7F) << v112;
                if ((v115 & 0x80) == 0) {
                  break;
                }
                v112 += 7;
                uint64_t v14 = v113++ > 8;
                if (v14)
                {
                  v49 = 0LL;
LABEL_232:
                  uint64_t v2 = v114 + 1;
                  goto LABEL_233;
                }
              }

              if (*((_BYTE *)this + 24)) {
                v49 = 0LL;
              }
              goto LABEL_232;
            }

            unsigned int v47 = 0;
            v48 = 0;
            v49 = 0LL;
            do
            {
              uint64_t v2 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              uint64_t v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0) {
                goto LABEL_233;
              }
              v47 += 7;
              uint64_t v45 = v2;
              uint64_t v14 = v48++ > 8;
            }

            while (!v14);
            v49 = 0LL;
LABEL_233:
            *(void *)(a1 + 40) = v49;
            break;
          case 303:
            *(_WORD *)(a1 + 96) |= 0x20u;
            unsigned int v51 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint8_t v52 = *(void *)this;
            if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
            {
              v116 = 0;
              v117 = 0;
              uint64_t v55 = 0LL;
              if (v2 <= v51) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v51)
                {
                  uint64_t v55 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_238;
                }

                v118 = v51++;
                v119 = *(_BYTE *)(v52 + v118);
                *((void *)this + 1) = v51;
                v55 |= (unint64_t)(v119 & 0x7F) << v116;
                if ((v119 & 0x80) == 0) {
                  break;
                }
                v116 += 7;
                uint64_t v14 = v117++ > 8;
                if (v14)
                {
                  uint64_t v55 = 0LL;
LABEL_237:
                  uint64_t v2 = v118 + 1;
                  goto LABEL_238;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v55 = 0LL;
              }
              goto LABEL_237;
            }

            char v53 = 0;
            uint64_t v54 = 0;
            uint64_t v55 = 0LL;
            do
            {
              uint64_t v2 = v51 + 1;
              *((void *)this + 1) = v51 + 1;
              uint64_t v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0) {
                goto LABEL_238;
              }
              v53 += 7;
              unsigned int v51 = v2;
              uint64_t v14 = v54++ > 8;
            }

            while (!v14);
            uint64_t v55 = 0LL;
LABEL_238:
            *(void *)(a1 + 48) = v55;
            break;
          case 304:
            *(_WORD *)(a1 + 96) |= 0x40u;
            uint64_t v57 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v58 = *(void *)this;
            if (v57 > 0xFFFFFFFFFFFFFFF5LL || v57 + 10 > v2)
            {
              v120 = 0;
              v121 = 0;
              __int128 v61 = 0LL;
              if (v2 <= v57) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v57)
                {
                  __int128 v61 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_243;
                }

                v122 = v57++;
                v123 = *(_BYTE *)(v58 + v122);
                *((void *)this + 1) = v57;
                v61 |= (unint64_t)(v123 & 0x7F) << v120;
                if ((v123 & 0x80) == 0) {
                  break;
                }
                v120 += 7;
                uint64_t v14 = v121++ > 8;
                if (v14)
                {
                  __int128 v61 = 0LL;
LABEL_242:
                  uint64_t v2 = v122 + 1;
                  goto LABEL_243;
                }
              }

              if (*((_BYTE *)this + 24)) {
                __int128 v61 = 0LL;
              }
              goto LABEL_242;
            }

            unint64_t v59 = 0;
            uint64_t v60 = 0;
            __int128 v61 = 0LL;
            do
            {
              uint64_t v2 = v57 + 1;
              *((void *)this + 1) = v57 + 1;
              char v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0) {
                goto LABEL_243;
              }
              v59 += 7;
              uint64_t v57 = v2;
              uint64_t v14 = v60++ > 8;
            }

            while (!v14);
            __int128 v61 = 0LL;
LABEL_243:
            *(void *)(a1 + 56) = v61;
            break;
          case 305:
            *(_WORD *)(a1 + 96) |= 1u;
            uint64_t v63 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v64 = *(void *)this;
            if (v63 > 0xFFFFFFFFFFFFFFF5LL || v63 + 10 > v2)
            {
              v124 = 0;
              v125 = 0;
              uint64_t v67 = 0LL;
              if (v2 <= v63) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v63)
                {
                  uint64_t v67 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_248;
                }

                v126 = v63++;
                v127 = *(_BYTE *)(v64 + v126);
                *((void *)this + 1) = v63;
                v67 |= (unint64_t)(v127 & 0x7F) << v124;
                if ((v127 & 0x80) == 0) {
                  break;
                }
                v124 += 7;
                uint64_t v14 = v125++ > 8;
                if (v14)
                {
                  uint64_t v67 = 0LL;
LABEL_247:
                  uint64_t v2 = v126 + 1;
                  goto LABEL_248;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v67 = 0LL;
              }
              goto LABEL_247;
            }

            uint64_t v65 = 0;
            unint64_t v66 = 0;
            uint64_t v67 = 0LL;
            do
            {
              uint64_t v2 = v63 + 1;
              *((void *)this + 1) = v63 + 1;
              uint64_t v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0) {
                goto LABEL_248;
              }
              v65 += 7;
              uint64_t v63 = v2;
              uint64_t v14 = v66++ > 8;
            }

            while (!v14);
            uint64_t v67 = 0LL;
LABEL_248:
            *(void *)(a1 + 8) = v67;
            break;
          case 306:
            *(_WORD *)(a1 + 96) |= 0x400u;
            uint64_t v69 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v70 = *(void *)this;
            if (v69 > 0xFFFFFFFFFFFFFFF5LL || v69 + 10 > v2)
            {
              v128 = 0;
              v129 = 0;
              uint64_t v73 = 0LL;
              if (v2 <= v69) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v69)
                {
                  LODWORD(v73) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_253;
                }

                v130 = v69++;
                v131 = *(_BYTE *)(v70 + v130);
                *((void *)this + 1) = v69;
                v73 |= (unint64_t)(v131 & 0x7F) << v128;
                if ((v131 & 0x80) == 0) {
                  break;
                }
                v128 += 7;
                uint64_t v14 = v129++ > 8;
                if (v14)
                {
                  LODWORD(v73) = 0;
LABEL_252:
                  uint64_t v2 = v130 + 1;
                  goto LABEL_253;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v73) = 0;
              }
              goto LABEL_252;
            }

            uint64_t v71 = 0;
            uint64_t v72 = 0;
            uint64_t v73 = 0LL;
            do
            {
              uint64_t v2 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              uint64_t v74 = *(_BYTE *)(v70 + v69);
              v73 |= (unint64_t)(v74 & 0x7F) << v71;
              if ((v74 & 0x80) == 0) {
                goto LABEL_253;
              }
              v71 += 7;
              uint64_t v69 = v2;
              uint64_t v14 = v72++ > 8;
            }

            while (!v14);
            LODWORD(v73) = 0;
LABEL_253:
            *(_DWORD *)(a1 + 80) = v73;
            break;
          case 307:
            *(_WORD *)(a1 + 96) |= 0x200u;
            uint64_t v75 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v76 = *(void *)this;
            if (v75 > 0xFFFFFFFFFFFFFFF5LL || v75 + 10 > v2)
            {
              v132 = 0;
              v133 = 0;
              uint64_t v79 = 0LL;
              if (v2 <= v75) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v75)
                {
                  LODWORD(v79) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_258;
                }

                v134 = v75++;
                v135 = *(_BYTE *)(v76 + v134);
                *((void *)this + 1) = v75;
                v79 |= (unint64_t)(v135 & 0x7F) << v132;
                if ((v135 & 0x80) == 0) {
                  break;
                }
                v132 += 7;
                uint64_t v14 = v133++ > 8;
                if (v14)
                {
                  LODWORD(v79) = 0;
LABEL_257:
                  uint64_t v2 = v134 + 1;
                  goto LABEL_258;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v79) = 0;
              }
              goto LABEL_257;
            }

            uint64_t v77 = 0;
            uint64_t v78 = 0;
            uint64_t v79 = 0LL;
            do
            {
              uint64_t v2 = v75 + 1;
              *((void *)this + 1) = v75 + 1;
              uint64_t v80 = *(_BYTE *)(v76 + v75);
              v79 |= (unint64_t)(v80 & 0x7F) << v77;
              if ((v80 & 0x80) == 0) {
                goto LABEL_258;
              }
              v77 += 7;
              uint64_t v75 = v2;
              uint64_t v14 = v78++ > 8;
            }

            while (!v14);
            LODWORD(v79) = 0;
LABEL_258:
            *(_DWORD *)(a1 + 76) = v79;
            break;
          case 308:
            *(_WORD *)(a1 + 96) |= 4u;
            uint64_t v81 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            uint64_t v82 = *(void *)this;
            if (v81 > 0xFFFFFFFFFFFFFFF5LL || v81 + 10 > v2)
            {
              v136 = 0;
              v137 = 0;
              uint64_t v85 = 0LL;
              if (v2 <= v81) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v81)
                {
                  uint64_t v85 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_263;
                }

                v138 = v81++;
                v139 = *(_BYTE *)(v82 + v138);
                *((void *)this + 1) = v81;
                v85 |= (unint64_t)(v139 & 0x7F) << v136;
                if ((v139 & 0x80) == 0) {
                  break;
                }
                v136 += 7;
                uint64_t v14 = v137++ > 8;
                if (v14)
                {
                  uint64_t v85 = 0LL;
LABEL_262:
                  uint64_t v2 = v138 + 1;
                  goto LABEL_263;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v85 = 0LL;
              }
              goto LABEL_262;
            }

            v83 = 0;
            uint64_t v84 = 0;
            uint64_t v85 = 0LL;
            do
            {
              uint64_t v2 = v81 + 1;
              *((void *)this + 1) = v81 + 1;
              uint64_t v86 = *(_BYTE *)(v82 + v81);
              v85 |= (unint64_t)(v86 & 0x7F) << v83;
              if ((v86 & 0x80) == 0) {
                goto LABEL_263;
              }
              v83 += 7;
              uint64_t v81 = v2;
              uint64_t v14 = v84++ > 8;
            }

            while (!v14);
            uint64_t v85 = 0LL;
LABEL_263:
            *(void *)(a1 + 24) = v85;
            break;
          default:
            goto LABEL_121;
        }
      }

      else if ((int)v20 <= 200)
      {
        switch((_DWORD)v20)
        {
          case 'e':
            *(_WORD *)(a1 + 96) |= 0x1000u;
            uint64_t v87 = *((void *)this + 1);
            uint64_t v2 = *((void *)this + 2);
            v88 = *(void *)this;
            if (v87 > 0xFFFFFFFFFFFFFFF5LL || v87 + 10 > v2)
            {
              v140 = 0;
              v141 = 0;
              uint64_t v91 = 0LL;
              if (v2 <= v87) {
                uint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v87)
                {
                  LODWORD(v91) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_268;
                }

                v142 = v87++;
                v143 = *(_BYTE *)(v88 + v142);
                *((void *)this + 1) = v87;
                v91 |= (unint64_t)(v143 & 0x7F) << v140;
                if ((v143 & 0x80) == 0) {
                  break;
                }
                v140 += 7;
                uint64_t v14 = v141++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  goto LABEL_267;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v91) = 0;
              }
LABEL_267:
              uint64_t v2 = v142 + 1;
            }

            else
            {
              uint64_t v89 = 0;
              uint64_t v90 = 0;
              uint64_t v91 = 0LL;
              while (1)
              {
                uint64_t v2 = v87 + 1;
                *((void *)this + 1) = v87 + 1;
                v92 = *(_BYTE *)(v88 + v87);
                v91 |= (unint64_t)(v92 & 0x7F) << v89;
                if ((v92 & 0x80) == 0) {
                  break;
                }
                v89 += 7;
                uint64_t v87 = v2;
                uint64_t v14 = v90++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  break;
                }
              }
            }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 0x67u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_38:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_101;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }

                  char v53 = v21++;
                  uint64_t v54 = *(_BYTE *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_105:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_106;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_105;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 16) = v25;
              goto LABEL_127;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }

                  uint64_t v57 = v27++;
                  uint64_t v58 = *(_BYTE *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_111;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_110;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_127;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }

                  __int128 v61 = v33++;
                  char v62 = *(_BYTE *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_116;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_115;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_127;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_121;
                  }

                  uint64_t v65 = v39++;
                  unint64_t v66 = *(_BYTE *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_121;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_120;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_121;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *(_DWORD *)(a1 + 28) = v43;
              goto LABEL_127;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }

                  uint64_t v69 = v45++;
                  uint64_t v70 = *(_BYTE *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_126;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_125;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 32) = v49;
LABEL_127:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_101:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_127;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_127;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_39;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_36;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_39;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_39;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_36;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_39;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_36:
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_42;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_41:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_42:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_39:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

    if ((v11 & 7) == 4)
    {
      uint64_t i = 0;
      return i == 0;
    }

    uint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }

    else
    {
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_51:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v25 = 0LL;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_52;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_51:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_52:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_57;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_56;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_57;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_58:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_58;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x28uLL);
        *(void *)uint64_t v22 = &off_10189AD28;
        v22[8] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_52;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_51:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_52:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_57;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_56;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_57;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_58:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_58;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x28uLL);
        *(void *)uint64_t v22 = &off_10189AD28;
        v22[8] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_38:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x28uLL);
        *(void *)uint64_t v22 = &off_10189AD28;
        v22[8] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 4u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 32) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_37;
        }

        *(_BYTE *)(a1 + 32) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
        {
LABEL_32:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_37;
        }

        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }

      uint64_t v2 = *((void *)this + 1) + 8LL;
      *((void *)this + 1) = v2;
LABEL_37:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          uint64_t v22 = operator new(0x28uLL);
          *(void *)uint64_t v22 = &off_10189AD28;
          v22[8] = 0;
          uint64_t v23 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
            uint64_t v22 = *(_DWORD **)(a1 + 8);
          }

          if (PB::Reader::placeMark(this, v62, v20, v21)
            && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) != 0)
          {
            PB::Reader::recallMark(this, v62);
            goto LABEL_83;
          }

          return 0LL;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v25 = *((void *)this + 1);
          uint64_t v26 = *((void *)this + 2);
          uint64_t v27 = *(void *)this;
          if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
          {
            v49 = 0;
            uint64_t v50 = 0;
            uint64_t v30 = 0LL;
            if (v26 <= v25) {
              uint64_t v26 = *((void *)this + 1);
            }
            do
            {
              if (v26 == v25)
              {
                LODWORD(v30) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_76;
              }

              unsigned int v51 = v25 + 1;
              uint8_t v52 = *(_BYTE *)(v27 + v25);
              *((void *)this + 1) = v51;
              v30 |= (unint64_t)(v52 & 0x7F) << v49;
              if ((v52 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  LODWORD(v30) = 0;
                }
                goto LABEL_76;
              }

              v49 += 7;
              uint64_t v25 = v51;
              uint64_t v14 = v50++ > 8;
            }

            while (!v14);
LABEL_56:
            LODWORD(v30) = 0;
          }

          else
          {
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v30 = 0LL;
            while (1)
            {
              uint64_t v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              uint64_t v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              uint64_t v25 = v31;
              uint64_t v14 = v29++ > 8;
              if (v14) {
                goto LABEL_56;
              }
            }
          }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }

                  uint64_t v45 = v20++;
                  char v46 = *(_BYTE *)(v21 + v45);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_81;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_81:
                uint64_t v2 = v45 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_82;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v3 = *((void *)this + 1);
                }
                else {
                  uint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  unsigned int v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_87:
                uint64_t v3 = v47 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  uint64_t v20 = v3;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v25 = *((void *)this + 1);
        uint64_t v26 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
        {
          uint64_t v42 = 0;
          char v43 = 0;
          uint64_t v30 = 0LL;
          if (v26 <= v25) {
            uint64_t v26 = *((void *)this + 1);
          }
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_63;
            }

            uint64_t v44 = v25 + 1;
            uint64_t v45 = *(_BYTE *)(v27 + v25);
            *((void *)this + 1) = v44;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            uint64_t v25 = v44;
            uint64_t v14 = v43++ > 8;
            if (v14)
            {
LABEL_51:
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v30) = 0;
          }
        }

        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0LL;
          while (1)
          {
            uint64_t v31 = v25 + 1;
            *((void *)this + 1) = v25 + 1;
            uint64_t v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v25 = v31;
            uint64_t v14 = v29++ > 8;
            if (v14) {
              goto LABEL_51;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          uint64_t v20 = operator new(0x30uLL);
          sub_101082AAC((uint64_t)v20);
          uint64_t v23 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v20;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
            uint64_t v20 = *(void **)(a1 + 8);
          }

          if (PB::Reader::placeMark(this, v63, v21, v22)
            && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) != 0)
          {
            PB::Reader::recallMark(this, v63);
            goto LABEL_87;
          }

          return 0LL;
        case 2u:
          *(_BYTE *)(a1 + 36) |= 2u;
          uint64_t v25 = *((void *)this + 1);
          uint64_t v26 = *((void *)this + 2);
          uint64_t v27 = *(void *)this;
          if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
          {
            uint64_t v50 = 0;
            unsigned int v51 = 0;
            uint64_t v30 = 0LL;
            if (v26 <= v25) {
              uint64_t v26 = *((void *)this + 1);
            }
            do
            {
              if (v26 == v25)
              {
                LODWORD(v30) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_80;
              }

              uint8_t v52 = v25 + 1;
              char v53 = *(_BYTE *)(v27 + v25);
              *((void *)this + 1) = v52;
              v30 |= (unint64_t)(v53 & 0x7F) << v50;
              if ((v53 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  LODWORD(v30) = 0;
                }
                goto LABEL_80;
              }

              v50 += 7;
              uint64_t v25 = v52;
              uint64_t v14 = v51++ > 8;
            }

            while (!v14);
LABEL_59:
            LODWORD(v30) = 0;
          }

          else
          {
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v30 = 0LL;
            while (1)
            {
              uint64_t v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              uint64_t v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              uint64_t v25 = v31;
              uint64_t v14 = v29++ > 8;
              if (v14) {
                goto LABEL_59;
              }
            }
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x28uLL);
        void *v22 = &off_10189AFC8;
        v22[1] = 0LL;
        v22[2] = 0LL;
        v22[3] = 0LL;
        *((_DWORD *)v22 + 8) = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_68;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_67:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_68;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_67;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_68;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_68:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_74;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_63;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_62:
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_63:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_74;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_73;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_72:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_73;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_72;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_73;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_73:
              *(_DWORD *)(a1 + 32) = v31;
LABEL_74:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_74;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          uint64_t v20 = operator new(0x28uLL);
          sub_101174A28((uint64_t)v20);
          uint64_t v23 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v20;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
            uint64_t v20 = *(void **)(a1 + 8);
          }

          if (PB::Reader::placeMark(this, v62, v21, v22)
            && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) != 0)
          {
            PB::Reader::recallMark(this, v62);
            goto LABEL_83;
          }

          return 0LL;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v25 = *((void *)this + 1);
          uint64_t v26 = *((void *)this + 2);
          uint64_t v27 = *(void *)this;
          if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
          {
            v49 = 0;
            uint64_t v50 = 0;
            uint64_t v30 = 0LL;
            if (v26 <= v25) {
              uint64_t v26 = *((void *)this + 1);
            }
            do
            {
              if (v26 == v25)
              {
                LODWORD(v30) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_76;
              }

              unsigned int v51 = v25 + 1;
              uint8_t v52 = *(_BYTE *)(v27 + v25);
              *((void *)this + 1) = v51;
              v30 |= (unint64_t)(v52 & 0x7F) << v49;
              if ((v52 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  LODWORD(v30) = 0;
                }
                goto LABEL_76;
              }

              v49 += 7;
              uint64_t v25 = v51;
              uint64_t v14 = v50++ > 8;
            }

            while (!v14);
LABEL_56:
            LODWORD(v30) = 0;
          }

          else
          {
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v30 = 0LL;
            while (1)
            {
              uint64_t v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              uint64_t v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              uint64_t v25 = v31;
              uint64_t v14 = v29++ > 8;
              if (v14) {
                goto LABEL_56;
              }
            }
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x28uLL);
        void *v22 = &off_10189AFC8;
        v22[1] = 0LL;
        v22[2] = 0LL;
        v22[3] = 0LL;
        *((_DWORD *)v22 + 8) = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  int v11 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 56) = v3;
  *(_DWORD *)(result + 40) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_22:
    uint64_t v13 = *(_DWORD *)(a2 + 28);
    *(_WORD *)(result + 56) = v3 | 8;
    *(_DWORD *)(result + 28) = v13;
    return result;
  }

  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x200) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 2) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 56) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_WORD *)(a1 + 56) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_WORD *)(a1 + 56) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_122;
            case 4u:
              *(_WORD *)(a1 + 56) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }

                  unint64_t v59 = v21++;
                  uint64_t v60 = *(_BYTE *)(v22 + v59);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_126:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_126;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_153;
            case 5u:
              *(_WORD *)(a1 + 56) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_122:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_153;
            case 6u:
              *(_WORD *)(a1 + 56) |= 0x100u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }

                  uint64_t v63 = v27++;
                  uint64_t v64 = *(_BYTE *)(v28 + v63);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_131:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_131;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 48) = v31;
              goto LABEL_153;
            case 7u:
              *(_WORD *)(a1 + 56) |= 0x80u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }

                  uint64_t v67 = v33++;
                  uint64_t v68 = *(_BYTE *)(v34 + v67);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_136:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_136;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 44) = v37;
              goto LABEL_153;
            case 8u:
              *(_WORD *)(a1 + 56) |= 0x40u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }

                  uint64_t v71 = v39++;
                  uint64_t v72 = *(_BYTE *)(v40 + v71);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_141:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_141;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_142:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_153;
            case 9u:
              *(_WORD *)(a1 + 56) |= 0x10u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v73 = 0;
                uint64_t v74 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }

                  uint64_t v75 = v45++;
                  uint64_t v76 = *(_BYTE *)(v46 + v75);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  uint64_t v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_146:
                    uint64_t v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_146;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 32) = v49;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 56) |= 1u;
              unsigned int v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint8_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                uint64_t v77 = 0;
                uint64_t v78 = 0;
                uint64_t v55 = 0LL;
                if (v2 <= v51) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    uint64_t v55 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }

                  uint64_t v79 = v51++;
                  uint64_t v80 = *(_BYTE *)(v52 + v79);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  uint64_t v14 = v78++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0LL;
LABEL_151:
                    uint64_t v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v55 = 0LL;
                }
                goto LABEL_151;
              }

              char v53 = 0;
              uint64_t v54 = 0;
              uint64_t v55 = 0LL;
              do
              {
                uint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                uint64_t v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v53 += 7;
                unsigned int v51 = v2;
                uint64_t v14 = v54++ > 8;
              }

              while (!v14);
              uint64_t v55 = 0LL;
LABEL_152:
              *(void *)(a1 + 8) = v55;
LABEL_153:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_153;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 9u);
  if ((*(_WORD *)(v3 + 56) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xAu);
  }
  return result;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_146;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_120;
                  }

                  __int128 v61 = v21++;
                  char v62 = *(_BYTE *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_119:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_119;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_120;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 20) = v25;
              goto LABEL_146;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 40) = v28;
              goto LABEL_146;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_125;
                  }

                  uint64_t v65 = v29++;
                  unint64_t v66 = *(_BYTE *)(v30 + v65);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_124:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_125;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_124;
              }

              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_125;
                }
                v31 += 7;
                uint64_t v29 = v2;
                uint64_t v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_125:
              *(_DWORD *)(a1 + 28) = v33;
              goto LABEL_146;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }

                  uint64_t v69 = v35++;
                  uint64_t v70 = *(_BYTE *)(v36 + v69);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_129:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_130;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_129;
              }

              uint64_t v37 = 0;
              unint64_t v38 = 0;
              uint64_t v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                __int128 v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v37 += 7;
                uint64_t v35 = v2;
                uint64_t v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_130:
              *(_DWORD *)(a1 + 24) = v39;
              goto LABEL_146;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }

                  uint64_t v73 = v41++;
                  uint64_t v74 = *(_BYTE *)(v42 + v73);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_134:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_135;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_134;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_135:
              *(_DWORD *)(a1 + 36) = v45;
              goto LABEL_146;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 2u;
              unsigned int v47 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                unsigned int v51 = 0LL;
                if (v2 <= v47) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }

                  uint64_t v77 = v47++;
                  uint64_t v78 = *(_BYTE *)(v48 + v77);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_139:
                    uint64_t v2 = v77 + 1;
                    goto LABEL_140;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_139;
              }

              v49 = 0;
              uint64_t v50 = 0;
              unsigned int v51 = 0LL;
              do
              {
                uint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                uint8_t v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v49 += 7;
                unsigned int v47 = v2;
                uint64_t v14 = v50++ > 8;
              }

              while (!v14);
              LODWORD(v51) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 16) = v51;
              goto LABEL_146;
            case 8u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              char v53 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                uint64_t v57 = 0LL;
                if (v2 <= v53) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }

                  uint64_t v81 = v53++;
                  uint64_t v82 = *(_BYTE *)(v54 + v81);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  uint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_144:
                    uint64_t v2 = v81 + 1;
                    goto LABEL_145;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_144;
              }

              uint64_t v55 = 0;
              uint64_t v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                uint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                uint64_t v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v55 += 7;
                char v53 = v2;
                uint64_t v14 = v56++ > 8;
              }

              while (!v14);
              LODWORD(v57) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 32) = v57;
LABEL_146:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_146;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }

                  uint64_t v45 = v20++;
                  char v46 = *(_BYTE *)(v21 + v45);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_81;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_81:
                uint64_t v2 = v45 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_82;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v3 = *((void *)this + 1);
                }
                else {
                  uint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  unsigned int v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_87:
                uint64_t v3 = v47 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  uint64_t v20 = v3;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 60) |= 4u;
        uint64_t v20 = *((void *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
          goto LABEL_46;
        }
        *(void *)(a1 + 32) = *(void *)(*(void *)this + v20);
        goto LABEL_73;
      case 2u:
        *(_BYTE *)(a1 + 60) |= 0x10u;
        uint64_t v22 = *((void *)this + 1);
        uint64_t v23 = *((void *)this + 2);
        uint64_t v24 = *(void *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5LL && v22 + 10 <= v23)
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0LL;
          do
          {
            uint64_t v28 = v22 + 1;
            *((void *)this + 1) = v22 + 1;
            uint64_t v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_77;
            }
            v25 += 7;
            uint64_t v22 = v28;
            uint64_t v14 = v26++ > 8;
          }

          while (!v14);
LABEL_62:
          LODWORD(v27) = 0;
          goto LABEL_77;
        }

        v49 = 0;
        uint64_t v50 = 0;
        uint64_t v27 = 0LL;
        if (v23 <= v22) {
          uint64_t v23 = *((void *)this + 1);
        }
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unsigned int v51 = v22 + 1;
            uint8_t v52 = *(_BYTE *)(v24 + v22);
            *((void *)this + 1) = v51;
            v27 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              uint64_t v22 = v51;
              uint64_t v14 = v50++ > 8;
              if (v14) {
                goto LABEL_62;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v27) = 0;
            }
          }

          break;
        }

  uint64_t v12 = *(_DWORD *)(a2 + 164);
  *(_WORD *)(a1 + 192) |= 4u;
  *(_DWORD *)(a1 + 164) = v12;
  int v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }

            uint64_t v36 = v21++;
            uint64_t v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          uint64_t v2 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v9 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 16) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "inertialCompPressure", *(float *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 64) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 64) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 64) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_89;
                  }

                  uint64_t v37 = v21++;
                  unint64_t v38 = *(_BYTE *)(v22 + v37);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  uint64_t v14 = v36++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_88:
                    uint64_t v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_88;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_89;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_89:
              *(void *)(a1 + 16) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 64) |= 1u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }

                  uint64_t v41 = v27++;
                  uint64_t v42 = *(_BYTE *)(v28 + v41);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_93:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_93;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_94:
              *(void *)(a1 + 8) = v31;
LABEL_95:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_84;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_84:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 60) = v34;
              goto LABEL_95;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_95;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v25 = *((void *)this + 1);
        if (v25 <= 0xFFFFFFFFFFFFFFF7LL && v25 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v25);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        uint64_t v23 = (char *)operator new(0xA8uLL);
        *(void *)uint64_t v23 = &off_10189C148;
        *((_DWORD *)v23 + 40) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *(_OWORD *)(v23 + 88) = 0u;
        *(_OWORD *)(v23 + 104) = 0u;
        *(_OWORD *)(v23 + 120) = 0u;
        *(_OWORD *)(v23 + 136) = 0u;
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          uint64_t v23 = *(char **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v27, v21, v22)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v23 + 16LL))(v23, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v27);
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_37;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_37;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_37;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_41;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v22 = v21 != 0;
          }

          *(_BYTE *)(a1 + 40) = v22;
          break;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_41:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_37:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = (char *)operator new(0x60uLL);
        *(void *)uint64_t v22 = &off_10189BC08;
        *((_DWORD *)v22 + 22) = 0;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 40) = 0u;
        *(_OWORD *)(v22 + 56) = 0u;
        *((void *)v22 + 9) = 0LL;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(char **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
        uint64_t v2 = *((void *)this + 1) + 4LL;
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }

        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }

        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        uint64_t v2 = *((void *)this + 1) + 8LL;
      }

      *((void *)this + 1) = v2;
LABEL_33:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 24) = v22;
        goto LABEL_38;
      }

      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_31;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_38;
        }

        *(_BYTE *)(a1 + 28) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
        {
LABEL_31:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_38;
        }

        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }

      uint64_t v2 = *((void *)this + 1) + 8LL;
      *((void *)this + 1) = v2;
LABEL_38:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_70;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }

                  uint64_t v37 = v21++;
                  unint64_t v38 = *(_BYTE *)(v22 + v37);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  uint64_t v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    uint64_t v2 = v37 + 1;
                    goto LABEL_64;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_63;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_64;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 20) = v25;
              goto LABEL_70;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 24) = v28;
              goto LABEL_70;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }

                  uint64_t v41 = v29++;
                  uint64_t v42 = *(_BYTE *)(v30 + v41);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_68:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_68;
              }

              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v31 += 7;
                uint64_t v29 = v2;
                uint64_t v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 16) = v33;
LABEL_70:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v10 = *(_BYTE *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 48) = v3;
  *(_BYTE *)(result + 44) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "rapidGradientChange", *(_BYTE *)(a1 + 47));
  int v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_WORD *)(a1 + 48) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_75;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_74;
            case 4u:
              *(_WORD *)(a1 + 48) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 48) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 47) = v22;
              goto LABEL_81;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 45) = v24;
              goto LABEL_81;
            case 7u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 44) = v26;
              goto LABEL_81;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_80;
                  }

                  uint64_t v37 = v27++;
                  unint64_t v38 = *(_BYTE *)(v28 + v37);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  uint64_t v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_79:
                    uint64_t v2 = v37 + 1;
                    goto LABEL_80;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_79;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_80;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_80:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_81:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_74:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_75:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_81;
            case 0xBu:
              *(_WORD *)(a1 + 48) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 46) = v34;
              goto LABEL_81;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_81;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v3 = *((void *)this + 1);
                }
                else {
                  uint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  char v53 = v20++;
                  uint64_t v54 = *(_BYTE *)(v21 + v53);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_102;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_102:
                uint64_t v3 = v53 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_103;
                  }
                  v22 += 7;
                  uint64_t v20 = v3;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v31 = 0;
                uint64_t v32 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_58;
                  }

                  uint64_t v33 = v20++;
                  uint64_t v34 = *(_BYTE *)(v21 + v33);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  uint64_t v14 = v32++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_57;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_57:
                uint64_t v2 = v33 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_58;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v25 = *((void *)this + 1);
        uint64_t v26 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v30 = 0LL;
          if (v26 <= v25) {
            uint64_t v26 = *((void *)this + 1);
          }
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v36 = v25 + 1;
            uint64_t v37 = *(_BYTE *)(v27 + v25);
            *((void *)this + 1) = v36;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v25 = v36;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v30) = 0;
              goto LABEL_47;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v30) = 0;
          }
        }

        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0LL;
          while (1)
          {
            uint64_t v31 = v25 + 1;
            *((void *)this + 1) = v25 + 1;
            uint64_t v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v25 = v31;
            uint64_t v14 = v29++ > 8;
            if (v14) {
              goto LABEL_43;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v21 = v20 != 0;
        }

        *(_BYTE *)(a1 + 8) = v21;
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_78;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 24) = v22;
              goto LABEL_78;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 25) = v24;
              goto LABEL_78;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v25 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v26 = *(void *)this;
              if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v29 = 0LL;
                if (v2 <= v25) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v25)
                  {
                    LODWORD(v29) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }

                  uint64_t v41 = v25++;
                  uint64_t v42 = *(_BYTE *)(v26 + v41);
                  *((void *)this + 1) = v25;
                  v29 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v29) = 0;
LABEL_71:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_72;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v29) = 0;
                }
                goto LABEL_71;
              }

              uint64_t v27 = 0;
              uint64_t v28 = 0;
              uint64_t v29 = 0LL;
              do
              {
                uint64_t v2 = v25 + 1;
                *((void *)this + 1) = v25 + 1;
                uint64_t v30 = *(_BYTE *)(v26 + v25);
                v29 |= (unint64_t)(v30 & 0x7F) << v27;
                if ((v30 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v27 += 7;
                uint64_t v25 = v2;
                uint64_t v14 = v28++ > 8;
              }

              while (!v14);
              LODWORD(v29) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 20) = v29;
              goto LABEL_78;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v32 = v31 != 0;
              }

              *(_BYTE *)(a1 + 26) = v32;
              goto LABEL_78;
            case 6u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_77;
                  }

                  uint64_t v45 = v33++;
                  char v46 = *(_BYTE *)(v34 + v45);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_76:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_77;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_76;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_77;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_77:
              *(_DWORD *)(a1 + 16) = v37;
LABEL_78:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_78;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x38uLL);
        void *v22 = &off_10189B850;
        v22[1] = 0LL;
        v22[2] = 0LL;
        v22[3] = 0LL;
        v22[5] = 0LL;
        *((_DWORD *)v22 + 13) = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_40:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 20) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_40;
            case 2u:
              *(_BYTE *)(a1 + 20) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 16) = v22;
              goto LABEL_40;
            case 3u:
              *(_BYTE *)(a1 + 20) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 17) = v24;
              goto LABEL_40;
            case 4u:
              *(_BYTE *)(a1 + 20) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 18) = v26;
              goto LABEL_40;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
LABEL_40:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        uint64_t v26 = *((void *)this + 1);
        uint64_t v27 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5LL || v26 + 10 > v27)
        {
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v31 = 0LL;
          if (v27 <= v26) {
            uint64_t v27 = *((void *)this + 1);
          }
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }

            unint64_t v38 = v26 + 1;
            uint64_t v39 = *(_BYTE *)(v28 + v26);
            *((void *)this + 1) = v38;
            v31 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            uint64_t v26 = v38;
            uint64_t v14 = v37++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v31) = 0;
              goto LABEL_52;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v32 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            uint64_t v33 = *(_BYTE *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v26 = v32;
            uint64_t v14 = v30++ > 8;
            if (v14) {
              goto LABEL_47;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x38uLL);
        sub_1011A1124((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v25 = *((void *)this + 1);
        if (v25 >= *((void *)this + 2))
        {
          uint64_t v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v26 = v25 + 1;
          uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v25);
          *((void *)this + 1) = v26;
          uint64_t v28 = v27 != 0;
        }

        *(_BYTE *)(a1 + 16) = v28;
      }

      else if ((_DWORD)v20 == 1)
      {
        uint64_t v23 = (char *)operator new(0xA8uLL);
        *(void *)uint64_t v23 = &off_10189C148;
        *((_DWORD *)v23 + 40) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *(_OWORD *)(v23 + 88) = 0u;
        *(_OWORD *)(v23 + 104) = 0u;
        *(_OWORD *)(v23 + 120) = 0u;
        *(_OWORD *)(v23 + 136) = 0u;
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          uint64_t v23 = *(char **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v30, v21, v22)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v23 + 16LL))(v23, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v30);
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  PB::TextFormatter::format(this, "biologicalSex", *(_DWORD *)(a1 + 16));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }

                  char v43 = v20++;
                  uint64_t v44 = *(_BYTE *)(v21 + v43);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  uint64_t v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_105:
                uint64_t v2 = v43 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_106;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

  double result = PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_51:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_57;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          uint64_t v2 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v2 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v2;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_36:
        uint64_t v2 = *((void *)this + 1) + 8LL;
        goto LABEL_37;
      }

      if ((_DWORD)v20 != 1)
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }

      *(_BYTE *)(a1 + 28) |= 4u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }

      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
      uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 28) |= 1u;
    uint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
    goto LABEL_36;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 164) |= 0x2000000uLL;
          uint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v20);
          goto LABEL_241;
        case 2u:
          *(void *)(a1 + 164) |= 0x80uLL;
          uint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v22);
          goto LABEL_241;
        case 3u:
          *(void *)(a1 + 164) |= 0x10000uLL;
          uint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v23);
          goto LABEL_241;
        case 4u:
          *(void *)(a1 + 164) |= 8uLL;
          uint64_t v24 = *((void *)this + 1);
          uint64_t v25 = *((void *)this + 2);
          uint64_t v26 = *(void *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5LL && v24 + 10 <= v25)
          {
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            uint64_t v29 = 0LL;
            do
            {
              uint64_t v30 = v24 + 1;
              *((void *)this + 1) = v24 + 1;
              uint64_t v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_251;
              }
              v27 += 7;
              uint64_t v24 = v30;
              uint64_t v14 = v28++ > 8;
            }

            while (!v14);
LABEL_177:
            LODWORD(v29) = 0;
            goto LABEL_251;
          }

          v132 = 0;
          v133 = 0;
          uint64_t v29 = 0LL;
          if (v25 <= v24) {
            uint64_t v25 = *((void *)this + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v134 = v24 + 1;
              v135 = *(_BYTE *)(v26 + v24);
              *((void *)this + 1) = v134;
              v29 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                uint64_t v24 = v134;
                uint64_t v14 = v133++ > 8;
                if (v14) {
                  goto LABEL_177;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v29) = 0;
              }
            }

            break;
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v21 = v20 != 0;
        }

        *(_BYTE *)(a1 + 8) = v21;
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_48;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_48;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_48:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_53;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_52:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_53;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_52;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_53;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_53:
              *(_DWORD *)(a1 + 32) = v25;
LABEL_54:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_54;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v15 = *(_DWORD *)(a2 + 48);
  v5 |= 0x10u;
  *(_BYTE *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 48) = v15;
  uint64_t v4 = *(_BYTE *)(a2 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_11:
  if ((v4 & 0x40) != 0)
  {
LABEL_12:
    int v8 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = v5 | 0x40;
    *(_DWORD *)(a1 + 56) = v8;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_80;
            }

            char v46 = v27++;
            unsigned int v47 = *(_BYTE *)(v28 + v46);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            uint64_t v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_79:
          uint64_t v3 = v46 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }

        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }

        *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
      }

      uint64_t v2 = *((void *)this + 1) + 4LL;
      *((void *)this + 1) = v2;
LABEL_33:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 28));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_79;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_83:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_84;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_83;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 32) = v25;
LABEL_85:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_78;
            case 0xEu:
              *(_WORD *)(a1 + 68) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_78:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_79:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_69:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_85;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_85;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_93;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_79;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_92;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v31 = 0;
                uint64_t v32 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v33 = v21++;
                  uint64_t v34 = *(_BYTE *)(v22 + v33);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  uint64_t v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    uint64_t v2 = v33 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_99:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 77) = v28;
              goto LABEL_99;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 76) = v30;
              goto LABEL_99;
            case 0x12u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_92:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_93:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_79:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_99;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_99;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_89;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 76) = v22;
              goto LABEL_95;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_88;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }

                  uint64_t v31 = v23++;
                  uint64_t v32 = *(_BYTE *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_93:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_94;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_93;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 44) = v27;
LABEL_95:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
LABEL_88:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_89:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_95;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_95;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = (char *)operator new(0xA8uLL);
        *(void *)uint64_t v22 = &off_10189C148;
        *((_DWORD *)v22 + 40) = 0;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 40) = 0u;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 88) = 0u;
        *(_OWORD *)(v22 + 104) = 0u;
        *(_OWORD *)(v22 + 120) = 0u;
        *(_OWORD *)(v22 + 136) = 0u;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(char **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_29;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_39:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_29:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_40;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 25) = v22;
              goto LABEL_40;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 24) = v24;
              goto LABEL_40;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
LABEL_40:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x20uLL);
        void *v22 = off_10189B9A0;
        v22[1] = 0LL;
        *((_DWORD *)v22 + 7) = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = (char *)operator new(0x98uLL);
        *(void *)uint64_t v22 = &off_10189B968;
        *((_DWORD *)v22 + 36) = 0;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 40) = 0u;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 88) = 0u;
        *(_OWORD *)(v22 + 104) = 0u;
        *((void *)v22 + 15) = 0LL;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(char **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 92) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_189;
                  }

                  uint64_t v77 = v20++;
                  uint64_t v78 = *(_BYTE *)(v21 + v77);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_188;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_188:
                uint64_t v2 = v77 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_189;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
        uint64_t v2 = *((void *)this + 1) + 4LL;
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }

        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }

        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        uint64_t v2 = *((void *)this + 1) + 8LL;
      }

      *((void *)this + 1) = v2;
LABEL_33:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = (char *)operator new(0xA8uLL);
        *(void *)uint64_t v22 = &off_10189C148;
        *((_DWORD *)v22 + 40) = 0;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 40) = 0u;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 88) = 0u;
        *(_OWORD *)(v22 + 104) = 0u;
        *(_OWORD *)(v22 + 120) = 0u;
        *(_OWORD *)(v22 + 136) = 0u;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(char **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(char *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 124) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 124) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 124) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 124) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 124) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_39:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_155;
            case 6u:
              *(_DWORD *)(a1 + 124) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 7u:
              *(_DWORD *)(a1 + 124) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 8u:
              *(_DWORD *)(a1 + 124) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 9u:
              *(_DWORD *)(a1 + 124) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xAu:
              *(_DWORD *)(a1 + 124) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xBu:
              *(_DWORD *)(a1 + 124) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xCu:
              *(_DWORD *)(a1 + 124) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xDu:
              *(_DWORD *)(a1 + 124) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xEu:
              *(_DWORD *)(a1 + 124) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xFu:
              *(_DWORD *)(a1 + 124) |= 0x80u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_165;
                  }

                  uint64_t v55 = v21++;
                  uint64_t v56 = *(_BYTE *)(v22 + v55);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_164:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_165;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_164;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_165;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_156;
            case 0x10u:
              *(_DWORD *)(a1 + 124) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0x11u:
              *(_DWORD *)(a1 + 124) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0x12u:
              *(_DWORD *)(a1 + 124) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0x13u:
              *(_DWORD *)(a1 + 124) |= 0x1000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_170;
                  }

                  unint64_t v59 = v27++;
                  uint64_t v60 = *(_BYTE *)(v28 + v59);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_169:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_170;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_169;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_170;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 76) = v31;
              goto LABEL_156;
            case 0x14u:
              *(_DWORD *)(a1 + 124) |= 0x40u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_175;
                  }

                  uint64_t v63 = v33++;
                  uint64_t v64 = *(_BYTE *)(v34 + v63);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_174:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_175;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_174;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_175;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_156;
            case 0x15u:
              *(_DWORD *)(a1 + 124) |= 0x10000u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_180;
                  }

                  uint64_t v67 = v39++;
                  uint64_t v68 = *(_BYTE *)(v40 + v67);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_179:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_180;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_179;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_180;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_180:
              *(_DWORD *)(a1 + 92) = v43;
              goto LABEL_156;
            case 0x16u:
              *(_DWORD *)(a1 + 124) |= 0x200000u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_185;
                  }

                  uint64_t v71 = v45++;
                  uint64_t v72 = *(_BYTE *)(v46 + v71);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_184:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_185;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_184;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_185;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_185:
              *(_DWORD *)(a1 + 112) = v49;
LABEL_156:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 124) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint8_t v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint8_t v52 = v51 != 0;
              }

              *(_BYTE *)(a1 + 120) = v52;
              goto LABEL_156;
            case 0x18u:
              *(_DWORD *)(a1 + 124) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
LABEL_154:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_155:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_115:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_156;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_156;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v25 = *((void *)this + 1);
        if (v25 >= *((void *)this + 2))
        {
          uint64_t v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v26 = v25 + 1;
          uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v25);
          *((void *)this + 1) = v26;
          uint64_t v28 = v27 != 0;
        }

        *(_BYTE *)(a1 + 17) = v28;
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v29 = *((void *)this + 1);
        if (v29 >= *((void *)this + 2))
        {
          uint64_t v32 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v30 = v29 + 1;
          uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v29);
          *((void *)this + 1) = v30;
          uint64_t v32 = v31 != 0;
        }

        *(_BYTE *)(a1 + 16) = v32;
      }

      else if ((_DWORD)v20 == 1)
      {
        uint64_t v23 = operator new(0x80uLL);
        *(void *)uint64_t v23 = &off_10189C0D8;
        v23[31] = 0;
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          uint64_t v23 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v34, v21, v22)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v23 + 16LL))(v23, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v34);
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
        uint64_t v2 = *((void *)this + 1) + 4LL;
      }

      else
      {
        if ((_DWORD)v20 == 2)
        {
          *(_BYTE *)(a1 + 28) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_32;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        }

        else
        {
          if ((_DWORD)v20 != 1)
          {
            double result = PB::Reader::skip(this, v20, v11 & 7, 0);
            if (!(_DWORD)result) {
              return result;
            }
            uint64_t v2 = *((void *)this + 1);
            goto LABEL_38;
          }

          *(_BYTE *)(a1 + 28) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_32:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_38;
          }

          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        }

        uint64_t v2 = *((void *)this + 1) + 8LL;
      }

      *((void *)this + 1) = v2;
LABEL_38:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v21 = v20 != 0;
        }

        *(_BYTE *)(a1 + 8) = v21;
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 120) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_151;
            case 2u:
              *(_DWORD *)(a1 + 120) |= 0x1000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 3u:
              *(_DWORD *)(a1 + 120) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 4u:
              *(_DWORD *)(a1 + 120) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 5u:
              *(_DWORD *)(a1 + 120) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 6u:
              *(_DWORD *)(a1 + 120) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 7u:
              *(_DWORD *)(a1 + 120) |= 0x2000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 8u:
              *(_DWORD *)(a1 + 120) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 9u:
              *(_DWORD *)(a1 + 120) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xAu:
              *(_DWORD *)(a1 + 120) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xBu:
              *(_DWORD *)(a1 + 120) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xCu:
              *(_DWORD *)(a1 + 120) |= 0x10000u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }

                  unsigned int v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_160:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_161;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_160;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_152;
            case 0xDu:
              *(_DWORD *)(a1 + 120) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xEu:
              *(_DWORD *)(a1 + 120) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xFu:
              *(_DWORD *)(a1 + 120) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x10u:
              *(_DWORD *)(a1 + 120) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x11u:
              *(_DWORD *)(a1 + 120) |= 0x1000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }

                  unsigned int v51 = v27++;
                  uint8_t v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_165:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_166;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_165;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 60) = v31;
              goto LABEL_152;
            case 0x12u:
              *(_DWORD *)(a1 + 120) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x13u:
              *(_DWORD *)(a1 + 120) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x14u:
              *(_DWORD *)(a1 + 120) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x15u:
              *(_DWORD *)(a1 + 120) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x16u:
              *(_DWORD *)(a1 + 120) |= 0x80u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_171;
                  }

                  uint64_t v55 = v33++;
                  uint64_t v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_170:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_171;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_170;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_171;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 40) = v37;
              goto LABEL_152;
            case 0x17u:
              *(_DWORD *)(a1 + 120) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x18u:
              *(_DWORD *)(a1 + 120) |= 0x4000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x19u:
              *(_DWORD *)(a1 + 120) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x1Au:
              *(_DWORD *)(a1 + 120) |= 4u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }

                  unint64_t v59 = v39++;
                  uint64_t v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_175:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_176;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_175;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_152:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x1Bu:
              *(_DWORD *)(a1 + 120) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
LABEL_150:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_151:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_120:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_152;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_152;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }

            uint64_t v36 = v21++;
            uint64_t v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          uint64_t v2 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 164) |= 0x10uLL;
          uint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v20);
          uint64_t v21 = *((void *)this + 1) + 8LL;
          goto LABEL_392;
        case 2u:
          *(void *)(a1 + 164) |= 0x80000uLL;
          uint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v23);
          goto LABEL_391;
        case 3u:
          *(void *)(a1 + 164) |= 0x20000000uLL;
          uint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v24);
          goto LABEL_391;
        case 4u:
          *(void *)(a1 + 164) |= 0x20uLL;
          uint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_391;
        case 5u:
          *(void *)(a1 + 164) |= 0x40000000uLL;
          uint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_391;
        case 6u:
          *(void *)(a1 + 164) |= 0x40uLL;
          uint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_391;
        case 7u:
          *(void *)(a1 + 164) |= (unint64_t)&_mh_execute_header;
          uint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_391;
        case 8u:
          *(void *)(a1 + 164) |= 0x2000uLL;
          uint64_t v29 = *((void *)this + 1);
          uint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0LL;
            do
            {
              uint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              uint64_t v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_396;
              }
              v32 += 7;
              uint64_t v29 = v35;
              uint64_t v14 = v33++ > 8;
            }

            while (!v14);
LABEL_228:
            LODWORD(v34) = 0;
            goto LABEL_396;
          }

          v224 = 0;
          v225 = 0;
          uint64_t v34 = 0LL;
          if (v30 <= v29) {
            uint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v226 = v29 + 1;
              v227 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v226;
              v34 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                uint64_t v29 = v226;
                uint64_t v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }

            break;
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_86;
            case 2u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }

                  uint64_t v41 = v21++;
                  uint64_t v42 = *(_BYTE *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_90:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_91;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_90;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v25;
              goto LABEL_102;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }

                  uint64_t v45 = v27++;
                  char v46 = *(_BYTE *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_95:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_96;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_95;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_102;
            case 4u:
              *(_WORD *)(a1 + 48) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 5u:
              *(_WORD *)(a1 + 48) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 7u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_85:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_86:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_102;
            case 9u:
              *(_WORD *)(a1 + 48) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }

                  v49 = v33++;
                  uint64_t v50 = *(_BYTE *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_100:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_101;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_100;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 24) = v37;
LABEL_102:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_102;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 40) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "pressureFailureState", *(_DWORD *)(a1 + 44));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_78;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_WORD *)(a1 + 60) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_78;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_127;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }

                  __int128 v61 = v21++;
                  char v62 = *(_BYTE *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_131:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_131;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_158;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }

                  uint64_t v65 = v27++;
                  unint64_t v66 = *(_BYTE *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_136:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_137;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_136;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_158;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }

                  uint64_t v69 = v33++;
                  uint64_t v70 = *(_BYTE *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_141:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_142;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_141;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_142:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_158;
            case 6u:
              *(_WORD *)(a1 + 60) |= 8u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }

                  uint64_t v73 = v39++;
                  uint64_t v74 = *(_BYTE *)(v40 + v73);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_146:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_147;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_146;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 28) = v43;
              goto LABEL_158;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_78;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }

                  uint64_t v77 = v45++;
                  uint64_t v78 = *(_BYTE *)(v46 + v77);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_151:
                    uint64_t v2 = v77 + 1;
                    goto LABEL_152;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_151;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_158;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              unsigned int v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint8_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                uint64_t v55 = 0LL;
                if (v2 <= v51) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }

                  uint64_t v81 = v51++;
                  uint64_t v82 = *(_BYTE *)(v52 + v81);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  uint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_156:
                    uint64_t v2 = v81 + 1;
                    goto LABEL_157;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_156;
              }

              char v53 = 0;
              uint64_t v54 = 0;
              uint64_t v55 = 0LL;
              do
              {
                uint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                uint64_t v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v53 += 7;
                unsigned int v51 = v2;
                uint64_t v14 = v54++ > 8;
              }

              while (!v14);
              LODWORD(v55) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 44) = v55;
LABEL_158:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_126:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_127:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_78:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_158;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v58 = v57 != 0;
              }

              *(_BYTE *)(a1 + 56) = v58;
              goto LABEL_158;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_158;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 92) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_81;
            case 2u:
              *(_DWORD *)(a1 + 92) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }

                  unsigned int v51 = v21++;
                  uint8_t v52 = *(_BYTE *)(v22 + v51);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_128:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_129;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_128;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_129:
              *(void *)(a1 + 16) = v25;
              goto LABEL_145;
            case 3u:
              *(_DWORD *)(a1 + 92) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_134;
                  }

                  uint64_t v55 = v27++;
                  uint64_t v56 = *(_BYTE *)(v28 + v55);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_133:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_134;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_133;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_134;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_134:
              *(void *)(a1 + 24) = v31;
              goto LABEL_145;
            case 4u:
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_139;
                  }

                  unint64_t v59 = v33++;
                  uint64_t v60 = *(_BYTE *)(v34 + v59);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_138:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_139;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_138;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_139;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_139:
              *(_DWORD *)(a1 + 76) = v37;
              goto LABEL_145;
            case 5u:
              *(_DWORD *)(a1 + 92) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 6u:
              *(_DWORD *)(a1 + 92) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 7u:
              *(_DWORD *)(a1 + 92) |= 0x100u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_144;
                  }

                  uint64_t v63 = v39++;
                  uint64_t v64 = *(_BYTE *)(v40 + v63);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_143:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_144;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_143;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_144;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_144:
              *(_DWORD *)(a1 + 60) = v43;
LABEL_145:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *(_DWORD *)(a1 + 92) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 9u:
              *(_DWORD *)(a1 + 92) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v46 = v45 != 0;
              }

              *(_BYTE *)(a1 + 88) = v46;
              goto LABEL_145;
            case 0xAu:
              *(_DWORD *)(a1 + 92) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0xBu:
              *(_DWORD *)(a1 + 92) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_81;
            case 0xCu:
              *(_DWORD *)(a1 + 92) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0xDu:
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0xEu:
              *(_DWORD *)(a1 + 92) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_81:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_124;
            case 0xFu:
              *(_DWORD *)(a1 + 92) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0x10u:
              *(_DWORD *)(a1 + 92) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_123:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_124:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_87:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_145;
            case 0x11u:
              *(_DWORD *)(a1 + 92) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v48 = v47 != 0;
              }

              *(_BYTE *)(a1 + 89) = v48;
              goto LABEL_145;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_145;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 96) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 96) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 96) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 96) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 96) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_39:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_105;
            case 6u:
              *(_DWORD *)(a1 + 96) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 7u:
              *(_DWORD *)(a1 + 96) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 8u:
              *(_DWORD *)(a1 + 96) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_DWORD *)(a1 + 96) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_DWORD *)(a1 + 96) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xBu:
              *(_DWORD *)(a1 + 96) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xCu:
              *(_DWORD *)(a1 + 96) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xDu:
              *(_DWORD *)(a1 + 96) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xEu:
              *(_DWORD *)(a1 + 96) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
LABEL_104:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_105:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_116;
            case 0xFu:
              *(_DWORD *)(a1 + 96) |= 0x20u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }

                  uint64_t v39 = v21++;
                  __int128 v40 = *(_BYTE *)(v22 + v39);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_109:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_110;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_109;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_116;
            case 0x10u:
              *(_DWORD *)(a1 + 96) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 92) = v28;
              goto LABEL_116;
            case 0x11u:
              *(_DWORD *)(a1 + 96) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 93) = v30;
              goto LABEL_116;
            case 0x12u:
              *(_DWORD *)(a1 + 96) |= 0x8000u;
              uint64_t v31 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5LL || v31 + 10 > v2)
              {
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                uint64_t v35 = 0LL;
                if (v2 <= v31) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }

                  char v43 = v31++;
                  uint64_t v44 = *(_BYTE *)(v32 + v43);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  uint64_t v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_114:
                    uint64_t v2 = v43 + 1;
                    goto LABEL_115;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_114;
              }

              uint64_t v33 = 0;
              uint64_t v34 = 0;
              uint64_t v35 = 0LL;
              do
              {
                uint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                uint64_t v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v33 += 7;
                uint64_t v31 = v2;
                uint64_t v14 = v34++ > 8;
              }

              while (!v14);
              LODWORD(v35) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 88) = v35;
LABEL_116:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_116;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v14 = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 96) |= 0x20u;
  *(_DWORD *)(a1 + 84) = v14;
  int v6 = *(_WORD *)(a2 + 96);
  if ((v6 & 0x40) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if ((v6 & 1) != 0)
  {
LABEL_13:
    uint64_t v7 = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 96) |= 1u;
    *(void *)(a1 + 56) = v7;
  }

  return a1;
}

  PB::TextFormatter::format(this, "isFaceDown", *(_BYTE *)(a1 + 92));
  int v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 6u);
  uint64_t v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x100) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x2000000u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }

                  unsigned int v51 = v21++;
                  uint8_t v52 = *(_BYTE *)(v22 + v51);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_175:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_176;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_175;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 116) = v25;
              goto LABEL_167;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_181;
                  }

                  uint64_t v55 = v27++;
                  uint64_t v56 = *(_BYTE *)(v28 + v55);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_180:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_181;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_180;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_181;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_181:
              *(_DWORD *)(a1 + 80) = v31;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x4000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 0x8000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x10000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x20000u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }

                  unint64_t v59 = v33++;
                  uint64_t v60 = *(_BYTE *)(v34 + v59);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_185:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_186;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_185;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_186;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_186:
              *(_DWORD *)(a1 + 84) = v37;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_191;
                  }

                  uint64_t v63 = v39++;
                  uint64_t v64 = *(_BYTE *)(v40 + v63);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_190:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_191;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_190;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_191;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_191:
              *(_DWORD *)(a1 + 40) = v43;
LABEL_167:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x12u:
              *(_DWORD *)(a1 + 136) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_94:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_166;
            case 0x13u:
              *(_DWORD *)(a1 + 136) |= 0x40000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v46 = v45 != 0;
              }

              *(_BYTE *)(a1 + 133) = v46;
              goto LABEL_167;
            case 0x14u:
              *(_DWORD *)(a1 + 136) |= 0x20000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v48 = v47 != 0;
              }

              *(_BYTE *)(a1 + 132) = v48;
              goto LABEL_167;
            case 0x15u:
              *(_DWORD *)(a1 + 136) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x16u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x17u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x18u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x19u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Au:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Bu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Cu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Du:
              *(_DWORD *)(a1 + 136) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Eu:
              *(_DWORD *)(a1 + 136) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Fu:
              *(_DWORD *)(a1 + 136) |= 0x1000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
LABEL_165:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_166:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_131:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_167;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_167;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        uint64_t v24 = operator new(0x90uLL);
        *(void *)uint64_t v24 = &off_10189C5E0;
        v24[34] = 0;
        uint64_t v25 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v24;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
          uint64_t v24 = *(_DWORD **)(a1 + 24);
        }

        if (!PB::Reader::placeMark(this, v28, v22, v23)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v24 + 16LL))(v24, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v28);
      }

      else
      {
        if ((_DWORD)v20 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_34;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v26);
        }

        else
        {
          if ((_DWORD)v20 != 1)
          {
            double result = PB::Reader::skip(this, v20, v11 & 7, 0);
            if (!(_DWORD)result) {
              return result;
            }
            goto LABEL_39;
          }

          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v21 = *((void *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7LL || v21 + 8 > *((void *)this + 2))
          {
LABEL_34:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_39;
          }

          *(void *)(a1 + 16) = *(void *)(*(void *)this + v21);
        }

        *((void *)this + 1) += 8LL;
      }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 208) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 2u:
          *(_DWORD *)(a1 + 208) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 3u:
          *(_DWORD *)(a1 + 208) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 4u:
          *(_DWORD *)(a1 + 208) |= 0x800000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 5u:
          *(_DWORD *)(a1 + 208) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 6u:
          *(_DWORD *)(a1 + 208) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 7u:
          *(_DWORD *)(a1 + 208) |= 0x1000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 8u:
          *(_DWORD *)(a1 + 208) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 9u:
          *(_DWORD *)(a1 + 208) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xAu:
          *(_DWORD *)(a1 + 208) |= 0x100000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xBu:
          *(_DWORD *)(a1 + 208) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xCu:
          *(_DWORD *)(a1 + 208) |= 0x200000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xDu:
          *(_DWORD *)(a1 + 208) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xEu:
          *(_DWORD *)(a1 + 208) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xFu:
          *(_DWORD *)(a1 + 208) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x10u:
          *(_DWORD *)(a1 + 208) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x11u:
          *(_DWORD *)(a1 + 208) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x12u:
          *(_DWORD *)(a1 + 208) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x13u:
          *(_DWORD *)(a1 + 208) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x14u:
          *(_DWORD *)(a1 + 208) |= 0x80000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x15u:
          *(_DWORD *)(a1 + 208) |= 0x400000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x16u:
          *(_DWORD *)(a1 + 208) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x17u:
          *(_DWORD *)(a1 + 208) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x18u:
          *(_DWORD *)(a1 + 208) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x19u:
          *(_DWORD *)(a1 + 208) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_100:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_96:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x80uLL);
        sub_1010E4324((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0xC8uLL);
        sub_101181418(v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_80;
            }

            char v46 = v27++;
            unsigned int v47 = *(_BYTE *)(v28 + v46);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            uint64_t v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_79:
          uint64_t v3 = v46 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          uint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *(_BYTE *)(a1 + 52) |= 0x20u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v64 = 0;
                uint64_t v65 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v3 = *((void *)this + 1);
                }
                else {
                  uint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }

                  unint64_t v66 = v21++;
                  uint64_t v67 = *(_BYTE *)(v22 + v66);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0) {
                    break;
                  }
                  v64 += 7;
                  uint64_t v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
LABEL_134:
                uint64_t v3 = v66 + 1;
              }

              else
              {
                uint64_t v23 = 0;
                uint64_t v24 = 0;
                uint64_t v25 = 0LL;
                do
                {
                  uint64_t v3 = v21 + 1;
                  *((void *)this + 1) = v21 + 1;
                  uint64_t v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    goto LABEL_135;
                  }
                  v23 += 7;
                  uint64_t v21 = v3;
                  uint64_t v14 = v24++ > 8;
                }

                while (!v14);
                LODWORD(v25) = 0;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 212) |= 0x800uLL;
          uint64_t v20 = *((void *)this + 1);
          uint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v21)
          {
            v172 = 0;
            v173 = 0;
            uint64_t v25 = 0LL;
            if (v21 <= v20) {
              uint64_t v21 = *((void *)this + 1);
            }
            do
            {
              if (v21 == v20)
              {
                uint64_t v25 = 0LL;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_321;
              }

              v174 = v20 + 1;
              v175 = *(_BYTE *)(v22 + v20);
              *((void *)this + 1) = v174;
              v25 |= (unint64_t)(v175 & 0x7F) << v172;
              if ((v175 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_321;
              }

              v172 += 7;
              uint64_t v20 = v174;
              uint64_t v14 = v173++ > 8;
            }

            while (!v14);
LABEL_208:
            uint64_t v25 = 0LL;
          }

          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0LL;
            while (1)
            {
              uint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              uint64_t v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              uint64_t v20 = v26;
              uint64_t v14 = v24++ > 8;
              if (v14) {
                goto LABEL_208;
              }
            }
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_37;
        }

        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
        {
LABEL_32:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_37;
        }

        *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
      }

      uint64_t v2 = *((void *)this + 1) + 4LL;
      *((void *)this + 1) = v2;
LABEL_37:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        uint64_t v31 = operator new(0x10uLL);
        *(void *)uint64_t v31 = &off_10189D640;
        v31[3] = 0;
        uint64_t v32 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v31;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
          uint64_t v31 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v39, v29, v30)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v31 + 16LL))(v31, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v39);
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v22 = *((void *)this + 2);
        uint64_t v23 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v22)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v26 = 0LL;
          if (v22 <= v21) {
            uint64_t v22 = *((void *)this + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              uint64_t v26 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v36 = v21 + 1;
            uint64_t v37 = *(_BYTE *)(v23 + v21);
            *((void *)this + 1) = v36;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v21 = v36;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
LABEL_43:
              uint64_t v26 = 0LL;
              goto LABEL_47;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v26 = 0LL;
          }
        }

        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0LL;
          while (1)
          {
            uint64_t v27 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            uint64_t v21 = v27;
            uint64_t v14 = v25++ > 8;
            if (v14) {
              goto LABEL_43;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 6u:
          *(_BYTE *)(a1 + 44) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 7u:
          *(_BYTE *)(a1 + 44) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 8u:
          *(_BYTE *)(a1 + 44) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_49:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_50:
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_38:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_38:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v25 = 0LL;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

  uint64_t v10 = *(_BYTE *)(a2 + 54);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 54) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }

                  uint64_t v39 = v21++;
                  __int128 v40 = *(_BYTE *)(v22 + v39);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_79;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_78;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 48) = v25;
LABEL_80:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 55) = v28;
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 56) = v30;
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v32 = v31 != 0;
              }

              *(_BYTE *)(a1 + 52) = v32;
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 53) = v34;
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 54) = v36;
              goto LABEL_80;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 60) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_74:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_80;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_80;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 176) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 176) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 3u:
          *(_DWORD *)(a1 + 176) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 4u:
          *(_DWORD *)(a1 + 176) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 5u:
          *(_DWORD *)(a1 + 176) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 6u:
          *(_DWORD *)(a1 + 176) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 7u:
          *(_DWORD *)(a1 + 176) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 8u:
          *(_DWORD *)(a1 + 176) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 9u:
          *(_DWORD *)(a1 + 176) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xAu:
          *(_DWORD *)(a1 + 176) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xBu:
          *(_DWORD *)(a1 + 176) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xCu:
          *(_DWORD *)(a1 + 176) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xDu:
          *(_DWORD *)(a1 + 176) |= 0x80000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xEu:
          *(_DWORD *)(a1 + 176) |= 0x100000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xFu:
          *(_DWORD *)(a1 + 176) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x10u:
          *(_DWORD *)(a1 + 176) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x11u:
          *(_DWORD *)(a1 + 176) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x12u:
          *(_DWORD *)(a1 + 176) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x13u:
          *(_DWORD *)(a1 + 176) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x14u:
          *(_DWORD *)(a1 + 176) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x15u:
          *(_DWORD *)(a1 + 176) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_86:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
LABEL_88:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_22:
    double result = *(double *)(a2 + 48);
    *(_WORD *)(a1 + 88) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }

  PB::TextFormatter::format(this, "stepLengthMedian", *(double *)(a1 + 64));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "walkingSpeedMedian", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 88) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 88) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 88) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 88) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 88) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 88) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 7u:
          *(_WORD *)(a1 + 88) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 8u:
          *(_WORD *)(a1 + 88) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 9u:
          *(_WORD *)(a1 + 88) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 0xAu:
          *(_WORD *)(a1 + 88) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
LABEL_55:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_53:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 9u);
  if ((*(_WORD *)(v3 + 88) & 0x20) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xAu);
  }
  return result;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 248) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 2u:
          *(_DWORD *)(a1 + 248) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 3u:
          *(_DWORD *)(a1 + 248) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 4u:
          *(_DWORD *)(a1 + 248) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 5u:
          *(_DWORD *)(a1 + 248) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 6u:
          *(_DWORD *)(a1 + 248) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 248) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 8u:
          *(_DWORD *)(a1 + 248) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 9u:
          *(_DWORD *)(a1 + 248) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xAu:
          *(_DWORD *)(a1 + 248) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xBu:
          *(_DWORD *)(a1 + 248) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xCu:
          *(_DWORD *)(a1 + 248) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xDu:
          *(_DWORD *)(a1 + 248) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xEu:
          *(_DWORD *)(a1 + 248) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xFu:
          *(_DWORD *)(a1 + 248) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x10u:
          *(_DWORD *)(a1 + 248) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x11u:
          *(_DWORD *)(a1 + 248) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x12u:
          *(_DWORD *)(a1 + 248) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x13u:
          *(_DWORD *)(a1 + 248) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x14u:
          *(_DWORD *)(a1 + 248) |= 0x80000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 248) |= 0x100000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 248) |= 0x200000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x17u:
          *(_DWORD *)(a1 + 248) |= 0x400000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x18u:
          *(_DWORD *)(a1 + 248) |= 0x800000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x19u:
          *(_DWORD *)(a1 + 248) |= 0x1000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Au:
          *(_DWORD *)(a1 + 248) |= 0x4000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 216) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Bu:
          *(_DWORD *)(a1 + 248) |= 0x8000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 224) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Cu:
          *(_DWORD *)(a1 + 248) |= 0x10000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 232) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Du:
          *(_DWORD *)(a1 + 248) |= 0x20000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 240) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Eu:
          *(_DWORD *)(a1 + 248) |= 0x2000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_113:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 208) = *(void *)(*(void *)this + v2);
LABEL_115:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 52) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 52) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 52) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_104:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_130;
            case 4u:
              *(_BYTE *)(a1 + 52) |= 0x80u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }

                  char v53 = v21++;
                  uint64_t v54 = *(_BYTE *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_130;
            case 5u:
              *(_BYTE *)(a1 + 52) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }

                  uint64_t v57 = v27++;
                  uint64_t v58 = *(_BYTE *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_113:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_113;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_130;
            case 6u:
              *(_BYTE *)(a1 + 52) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }

                  __int128 v61 = v33++;
                  char v62 = *(_BYTE *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_118:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_118;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 32) = v37;
              goto LABEL_130;
            case 7u:
              *(_BYTE *)(a1 + 52) |= 0x40u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }

                  uint64_t v65 = v39++;
                  unint64_t v66 = *(_BYTE *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_123:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_123;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 44) = v43;
              goto LABEL_130;
            case 8u:
              *(_BYTE *)(a1 + 52) |= 0x20u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }

                  uint64_t v69 = v45++;
                  uint64_t v70 = *(_BYTE *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_128;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 40) = v49;
LABEL_130:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_130;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 216) |= 0x80000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 2u:
          *(_DWORD *)(a1 + 216) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 3u:
          *(_DWORD *)(a1 + 216) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 4u:
          *(_DWORD *)(a1 + 216) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 5u:
          *(_DWORD *)(a1 + 216) |= 0x100000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 6u:
          *(_DWORD *)(a1 + 216) |= 0x400000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 7u:
          *(_DWORD *)(a1 + 216) |= 0x200000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 8u:
          *(_DWORD *)(a1 + 216) |= 0x800000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 9u:
          *(_DWORD *)(a1 + 216) |= 0x2000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 208) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xAu:
          *(_DWORD *)(a1 + 216) |= 0x1000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xBu:
          *(_DWORD *)(a1 + 216) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xCu:
          *(_DWORD *)(a1 + 216) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xDu:
          *(_DWORD *)(a1 + 216) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xEu:
          *(_DWORD *)(a1 + 216) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xFu:
          *(_DWORD *)(a1 + 216) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x10u:
          *(_DWORD *)(a1 + 216) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x11u:
          *(_DWORD *)(a1 + 216) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x12u:
          *(_DWORD *)(a1 + 216) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x13u:
          *(_DWORD *)(a1 + 216) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x14u:
          *(_DWORD *)(a1 + 216) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x15u:
          *(_DWORD *)(a1 + 216) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x16u:
          *(_DWORD *)(a1 + 216) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x17u:
          *(_DWORD *)(a1 + 216) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x18u:
          *(_DWORD *)(a1 + 216) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x19u:
          *(_DWORD *)(a1 + 216) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x1Au:
          *(_DWORD *)(a1 + 216) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_101:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
LABEL_103:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 8u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }

                  uint64_t v35 = v20++;
                  uint64_t v36 = *(_BYTE *)(v21 + v35);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_66:
                uint64_t v2 = v35 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_67;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

  uint64_t v10 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 8) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 2u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_77;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_76:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_77;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_76;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_77;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_77:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_78:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *(_WORD *)(a1 + 72) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 72) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 69) = v28;
              goto LABEL_78;
            case 7u:
              *(_WORD *)(a1 + 72) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 70) = v30;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_72:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_78;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v32 = v31 != 0;
              }

              *(_BYTE *)(a1 + 68) = v32;
              goto LABEL_78;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_78;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "odometerQuality", *(_DWORD *)(a1 + 88));
  uint64_t v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        uint64_t v22 = operator new(0xA0uLL);
        void *v22 = &off_10189DB48;
        v22[1] = 0LL;
        v22[7] = 0LL;
        v22[9] = 0LL;
        *((_DWORD *)v22 + 38) = 0;
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 16);
        }

        goto LABEL_28;
      case 2u:
        uint64_t v22 = operator new(0x50uLL);
        void *v22 = &off_10189DB80;
        *((_DWORD *)v22 + 18) = 0;
        uint64_t v25 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
          uint64_t v22 = *(void **)(a1 + 8);
        }

  double result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  int v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 40) = result;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "likelihoodRatio", *(double *)(a1 + 56));
  int v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 96) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 96) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 96) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_58:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_54:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x48uLL);
        sub_101189528((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x48uLL);
        sub_101189528((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 8u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }

                  uint64_t v35 = v20++;
                  uint64_t v36 = *(_BYTE *)(v21 + v35);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_66:
                uint64_t v2 = v35 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_67;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

  uint64_t v9 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 88) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "percentGrade", *(double *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_WORD *)(a1 + 92) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_WORD *)(a1 + 92) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_WORD *)(a1 + 92) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_99;
                  }

                  uint64_t v41 = v21++;
                  uint64_t v42 = *(_BYTE *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_98:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_99;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_98;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_99;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_99:
              *(_DWORD *)(a1 + 88) = v25;
              goto LABEL_110;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x400u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }

                  uint64_t v45 = v27++;
                  char v46 = *(_BYTE *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_103:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_104;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_103;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_104;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 84) = v31;
              goto LABEL_110;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
LABEL_94:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_110;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }

                  v49 = v33++;
                  uint64_t v50 = *(_BYTE *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_108:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_109;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_108;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 80) = v37;
LABEL_110:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_110;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  double result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 40) = result;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "slopeNxCorr", *(float *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 56) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }

                  v49 = v20++;
                  uint64_t v50 = *(_BYTE *)(v21 + v49);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_107;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_107:
                uint64_t v2 = v49 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_108;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 52), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_30;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_30:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }

                  uint64_t v41 = v21++;
                  uint64_t v42 = *(_BYTE *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_85:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_86;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_85;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_97;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }

                  uint64_t v45 = v27++;
                  char v46 = *(_BYTE *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_90:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_91;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_90;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_97;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_47;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_47:
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_81;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_80:
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_81:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_50:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_97;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }

                  v49 = v33++;
                  uint64_t v50 = *(_BYTE *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_95:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_96;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_95;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_97:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_97;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v9 = *(_DWORD *)(a2 + 52);
  v4 |= 0x200u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 52) = v9;
  uint64_t v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x800) == 0)
  {
LABEL_11:
    if ((v3 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 44));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_139;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }

                  uint64_t v65 = v21++;
                  unint64_t v66 = *(_BYTE *)(v22 + v65);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_144:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_145;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_144;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 36) = v25;
              goto LABEL_176;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }

                  uint64_t v69 = v27++;
                  uint64_t v70 = *(_BYTE *)(v28 + v69);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_149:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_150;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_149;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_176;
            case 4u:
              *(_WORD *)(a1 + 64) |= 4u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }

                  uint64_t v73 = v33++;
                  uint64_t v74 = *(_BYTE *)(v34 + v73);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_154:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_155;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_154;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_155:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_176;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_160;
                  }

                  uint64_t v77 = v39++;
                  uint64_t v78 = *(_BYTE *)(v40 + v77);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_159:
                    uint64_t v2 = v77 + 1;
                    goto LABEL_160;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_159;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_160;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_160:
              *(_DWORD *)(a1 + 32) = v43;
              goto LABEL_176;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_165;
                  }

                  uint64_t v81 = v45++;
                  uint64_t v82 = *(_BYTE *)(v46 + v81);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  uint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_164:
                    uint64_t v2 = v81 + 1;
                    goto LABEL_165;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_164;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_165;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 52) = v49;
              goto LABEL_176;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              unsigned int v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint8_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                v83 = 0;
                uint64_t v84 = 0;
                uint64_t v55 = 0LL;
                if (v2 <= v51) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_170;
                  }

                  uint64_t v85 = v51++;
                  uint64_t v86 = *(_BYTE *)(v52 + v85);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  uint64_t v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_169:
                    uint64_t v2 = v85 + 1;
                    goto LABEL_170;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_169;
              }

              char v53 = 0;
              uint64_t v54 = 0;
              uint64_t v55 = 0LL;
              do
              {
                uint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                uint64_t v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_170;
                }
                v53 += 7;
                unsigned int v51 = v2;
                uint64_t v14 = v54++ > 8;
              }

              while (!v14);
              LODWORD(v55) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_176;
            case 8u:
              *(_WORD *)(a1 + 64) |= 8u;
              uint64_t v57 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5LL || v57 + 10 > v2)
              {
                uint64_t v87 = 0;
                v88 = 0;
                __int128 v61 = 0LL;
                if (v2 <= v57) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_175;
                  }

                  uint64_t v89 = v57++;
                  uint64_t v90 = *(_BYTE *)(v58 + v89);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  uint64_t v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_174:
                    uint64_t v2 = v89 + 1;
                    goto LABEL_175;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_174;
              }

              unint64_t v59 = 0;
              uint64_t v60 = 0;
              __int128 v61 = 0LL;
              do
              {
                uint64_t v2 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                char v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_175;
                }
                v59 += 7;
                uint64_t v57 = v2;
                uint64_t v14 = v60++ > 8;
              }

              while (!v14);
              LODWORD(v61) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_176:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_85:
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_140;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_139:
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_140:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_88:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_176;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_176;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

  uint64_t v14 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 104) |= 0x100u;
  *(_DWORD *)(a1 + 96) = v14;
  uint64_t v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 0x200) == 0)
  {
LABEL_10:
    if ((v9 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 100), 6u);
  int v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "inBTZ", *(_BYTE *)(a1 + 92));
  int v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              uint64_t v31 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              uint64_t v31 = 0LL;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v31 = 0LL;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              uint64_t v31 = 0LL;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }

                  uint64_t v55 = v20++;
                  uint64_t v56 = *(_BYTE *)(v21 + v55);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_105:
                uint64_t v2 = v55 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_106;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 56) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_49;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_65;
            case 2u:
              *(_BYTE *)(a1 + 56) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_49;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_65;
            case 3u:
              *(_BYTE *)(a1 + 56) |= 1u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_70;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_69:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_70;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_69;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_70;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_70:
              *(void *)(a1 + 8) = v25;
              goto LABEL_76;
            case 4u:
              *(_BYTE *)(a1 + 56) |= 2u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_75;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_74:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_75;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_74;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_75;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_75:
              *(void *)(a1 + 16) = v31;
LABEL_76:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 56) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_49;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_65;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
LABEL_65:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_49:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_76;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_76;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v25 = *((void *)this + 1);
        uint64_t v26 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v30 = 0LL;
          if (v26 <= v25) {
            uint64_t v26 = *((void *)this + 1);
          }
          while (1)
          {
            if (v26 == v25)
            {
              uint64_t v30 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v36 = v25 + 1;
            uint64_t v37 = *(_BYTE *)(v27 + v25);
            *((void *)this + 1) = v36;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v25 = v36;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
LABEL_43:
              uint64_t v30 = 0LL;
              goto LABEL_47;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v30 = 0LL;
          }
        }

        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0LL;
          while (1)
          {
            uint64_t v31 = v25 + 1;
            *((void *)this + 1) = v25 + 1;
            uint64_t v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v25 = v31;
            uint64_t v14 = v29++ > 8;
            if (v14) {
              goto LABEL_43;
            }
          }
        }

  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 64));
  int v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "hasGps", *(_BYTE *)(a1 + 84));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }

                  unsigned int v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_107:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_107;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_119;
            case 4u:
              *(_WORD *)(a1 + 88) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }

                  unsigned int v51 = v27++;
                  uint8_t v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_112;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_119;
            case 8u:
              *(_WORD *)(a1 + 88) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 84) = v34;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 85) = v36;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              uint64_t v37 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v41 = 0LL;
                if (v2 <= v37) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }

                  uint64_t v55 = v37++;
                  uint64_t v56 = *(_BYTE *)(v38 + v55);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_117:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_117;
              }

              uint64_t v39 = 0;
              __int128 v40 = 0;
              uint64_t v41 = 0LL;
              do
              {
                uint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                uint64_t v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v39 += 7;
                uint64_t v37 = v2;
                uint64_t v14 = v40++ > 8;
              }

              while (!v14);
              LODWORD(v41) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 80) = v41;
LABEL_119:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v44 = v43 != 0;
              }

              *(_BYTE *)(a1 + 86) = v44;
              goto LABEL_119;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_103:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_119;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 72) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 3u:
              *(_WORD *)(a1 + 72) |= 0x100u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_79;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_78;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_85;
            case 4u:
              *(_WORD *)(a1 + 72) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 72) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 7u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 8u:
              *(_WORD *)(a1 + 72) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_74:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_85;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_83:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_83;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 64) = v31;
LABEL_85:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_85;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 20) |= 0x10u;
              uint64_t v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                uint64_t v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                uint64_t v21 = v20 != 0;
              }

              *(_BYTE *)(a1 + 15) = v21;
              goto LABEL_64;
            case 2u:
              *(_BYTE *)(a1 + 20) |= 8u;
              uint64_t v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 14) = v24;
              goto LABEL_64;
            case 3u:
              *(_BYTE *)(a1 + 20) |= 2u;
              uint64_t v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 12) = v26;
              goto LABEL_64;
            case 4u:
              *(_BYTE *)(a1 + 20) |= 0x20u;
              uint64_t v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 16) = v28;
              goto LABEL_64;
            case 5u:
              *(_BYTE *)(a1 + 20) |= 4u;
              uint64_t v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 13) = v30;
              goto LABEL_64;
            case 6u:
              *(_BYTE *)(a1 + 20) |= 1u;
              uint64_t v31 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5LL || v31 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v35 = 0LL;
                if (v2 <= v31) {
                  uint64_t v3 = *((void *)this + 1);
                }
                else {
                  uint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_63;
                  }

                  uint64_t v39 = v31++;
                  __int128 v40 = *(_BYTE *)(v32 + v39);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_62:
                    uint64_t v3 = v39 + 1;
                    goto LABEL_63;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_62;
              }

              uint64_t v33 = 0;
              uint64_t v34 = 0;
              uint64_t v35 = 0LL;
              do
              {
                uint64_t v3 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                uint64_t v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_63;
                }
                v33 += 7;
                uint64_t v31 = v3;
                uint64_t v14 = v34++ > 8;
              }

              while (!v14);
              LODWORD(v35) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 8) = v35;
LABEL_64:
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              goto LABEL_64;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_92;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_45:
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_93;
            case 8u:
              *(_WORD *)(a1 + 60) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v41 = v21++;
                  uint64_t v42 = *(_BYTE *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_109;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  uint64_t v45 = v27++;
                  char v46 = *(_BYTE *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_102:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_109;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }

                  v49 = v33++;
                  uint64_t v50 = *(_BYTE *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_107:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_108;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_107;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_109:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_92:
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_93:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_69:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_109;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_109;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v21 = v20 != 0;
        }

        *(_BYTE *)(a1 + 8) = v21;
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v28 = v27 != 0;
        }

        *(_BYTE *)(a1 + 16) = v28;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v3)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v25 = 0LL;
          if (v3 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }

            uint64_t v32 = v21++;
            uint64_t v33 = *(_BYTE *)(v22 + v32);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            uint64_t v14 = v31++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              goto LABEL_47;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v25 = 0LL;
          }
LABEL_47:
          uint64_t v2 = v32 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }

                  uint64_t v29 = v20++;
                  uint64_t v30 = *(_BYTE *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_123;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_123:
                uint64_t v2 = v29 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_124;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  double result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 36) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "inHandObstructed", *(float *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_80;
                  }

                  uint64_t v29 = v20++;
                  uint64_t v30 = *(_BYTE *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_79;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_79:
                uint64_t v2 = v29 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_80;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_144;
                  }

                  uint64_t v57 = v20++;
                  uint64_t v58 = *(_BYTE *)(v21 + v57);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_143;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_143:
                uint64_t v2 = v57 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_144;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0xA8uLL);
        uint64_t v23 = sub_1010F1358((uint64_t)v20);
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t, double))(*(void *)v24 + 8LL))(v24, v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v26, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v26);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }

                  char v43 = v21++;
                  uint64_t v44 = *(_BYTE *)(v22 + v43);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  uint64_t v14 = v42++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_81:
                    uint64_t v2 = v43 + 1;
                    goto LABEL_82;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_81;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_82;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_82:
              *(void *)(a1 + 24) = v25;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }

                  unsigned int v47 = v27++;
                  v48 = *(_BYTE *)(v28 + v47);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_86:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_86;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_87;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }

                  unsigned int v51 = v33++;
                  uint8_t v52 = *(_BYTE *)(v34 + v51);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_91:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_92;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_91;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_92;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_93:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 40) = v40;
              goto LABEL_93;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_77:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_52:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_93;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_93;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }

                  uint64_t v67 = v21++;
                  uint64_t v68 = *(_BYTE *)(v22 + v67);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_145:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_146;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_145;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }

                  uint64_t v71 = v27++;
                  uint64_t v72 = *(_BYTE *)(v28 + v71);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_150:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_151;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_150;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_167;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 76) = v34;
              goto LABEL_167;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 81) = v36;
              goto LABEL_167;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                unint64_t v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                unint64_t v38 = v37 != 0;
              }

              *(_BYTE *)(a1 + 79) = v38;
              goto LABEL_167;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 80) = v40;
              goto LABEL_167;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v42 = v41 != 0;
              }

              *(_BYTE *)(a1 + 78) = v42;
              goto LABEL_167;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v44 = v43 != 0;
              }

              *(_BYTE *)(a1 + 82) = v44;
              goto LABEL_167;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v46 = v45 != 0;
              }

              *(_BYTE *)(a1 + 77) = v46;
              goto LABEL_167;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              unsigned int v47 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                uint64_t v73 = 0;
                uint64_t v74 = 0;
                unsigned int v51 = 0LL;
                if (v2 <= v47) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }

                  uint64_t v75 = v47++;
                  uint64_t v76 = *(_BYTE *)(v48 + v75);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  uint64_t v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_155:
                    uint64_t v2 = v75 + 1;
                    goto LABEL_156;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_155;
              }

              v49 = 0;
              uint64_t v50 = 0;
              unsigned int v51 = 0LL;
              do
              {
                uint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                uint8_t v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v49 += 7;
                unsigned int v47 = v2;
                uint64_t v14 = v50++ > 8;
              }

              while (!v14);
              LODWORD(v51) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 60) = v51;
              goto LABEL_167;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              char v53 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                uint64_t v77 = 0;
                uint64_t v78 = 0;
                uint64_t v57 = 0LL;
                if (v2 <= v53) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }

                  uint64_t v79 = v53++;
                  uint64_t v80 = *(_BYTE *)(v54 + v79);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  uint64_t v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_160:
                    uint64_t v2 = v79 + 1;
                    goto LABEL_161;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_160;
              }

              uint64_t v55 = 0;
              uint64_t v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                uint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                uint64_t v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v55 += 7;
                char v53 = v2;
                uint64_t v14 = v56++ > 8;
              }

              while (!v14);
              LODWORD(v57) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 64) = v57;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_141:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_167;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              unint64_t v59 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v60 = *(void *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5LL || v59 + 10 > v2)
              {
                uint64_t v81 = 0;
                uint64_t v82 = 0;
                uint64_t v63 = 0LL;
                if (v2 <= v59) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    LODWORD(v63) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }

                  v83 = v59++;
                  uint64_t v84 = *(_BYTE *)(v60 + v83);
                  *((void *)this + 1) = v59;
                  v63 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  uint64_t v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v63) = 0;
LABEL_165:
                    uint64_t v2 = v83 + 1;
                    goto LABEL_166;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v63) = 0;
                }
                goto LABEL_165;
              }

              __int128 v61 = 0;
              char v62 = 0;
              uint64_t v63 = 0LL;
              do
              {
                uint64_t v2 = v59 + 1;
                *((void *)this + 1) = v59 + 1;
                uint64_t v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v61 += 7;
                unint64_t v59 = v2;
                uint64_t v14 = v62++ > 8;
              }

              while (!v14);
              LODWORD(v63) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 56) = v63;
LABEL_167:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_167;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  PB::TextFormatter::format(this, "isMissingSamples", *(_BYTE *)(a1 + 57));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 59) = v22;
              goto LABEL_107;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 58) = v24;
              goto LABEL_107;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 57) = v26;
              goto LABEL_107;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 1u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }

                  char v43 = v27++;
                  uint64_t v44 = *(_BYTE *)(v28 + v43);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  uint64_t v14 = v42++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_100:
                    uint64_t v2 = v43 + 1;
                    goto LABEL_101;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_100;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_101:
              *(void *)(a1 + 8) = v31;
              goto LABEL_107;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 56) = v34;
              goto LABEL_107;
            case 0xDu:
              *(_WORD *)(a1 + 60) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 0xEu:
              *(_WORD *)(a1 + 60) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_96:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_65:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_107;
            case 0xFu:
              *(_WORD *)(a1 + 60) |= 0x80u;
              uint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }

                  unsigned int v47 = v35++;
                  v48 = *(_BYTE *)(v36 + v47);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_105:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_106;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_105;
              }

              uint64_t v37 = 0;
              unint64_t v38 = 0;
              uint64_t v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                __int128 v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v37 += 7;
                uint64_t v35 = v2;
                uint64_t v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 40) = v39;
LABEL_107:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_107;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 244) |= 0x100u;
        uint64_t v20 = *((void *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
          goto LABEL_134;
        }
        *(void *)(a1 + 80) = *(void *)(*(void *)this + v20);
        goto LABEL_185;
      case 2u:
        *(_DWORD *)(a1 + 244) |= 0x80u;
        uint64_t v21 = *((void *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7LL || v21 + 8 > *((void *)this + 2)) {
          goto LABEL_134;
        }
        *(void *)(a1 + 72) = *(void *)(*(void *)this + v21);
        goto LABEL_185;
      case 4u:
        *(_DWORD *)(a1 + 244) |= 0x10000u;
        uint64_t v23 = *((void *)this + 1);
        uint64_t v24 = *((void *)this + 2);
        uint64_t v25 = *(void *)this;
        if (v23 <= 0xFFFFFFFFFFFFFFF5LL && v23 + 10 <= v24)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0LL;
          do
          {
            uint64_t v29 = v23 + 1;
            *((void *)this + 1) = v23 + 1;
            uint64_t v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_190;
            }
            v26 += 7;
            uint64_t v23 = v29;
            uint64_t v14 = v27++ > 8;
          }

          while (!v14);
LABEL_148:
          LODWORD(v28) = 0;
          goto LABEL_190;
        }

        v113 = 0;
        v114 = 0;
        uint64_t v28 = 0LL;
        if (v24 <= v23) {
          uint64_t v24 = *((void *)this + 1);
        }
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v115 = v23 + 1;
            v116 = *(_BYTE *)(v25 + v23);
            *((void *)this + 1) = v115;
            v28 |= (unint64_t)(v116 & 0x7F) << v113;
            if (v116 < 0)
            {
              v113 += 7;
              uint64_t v23 = v115;
              uint64_t v14 = v114++ > 8;
              if (v14) {
                goto LABEL_148;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v28) = 0;
            }
          }

          break;
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_36:
        uint64_t v2 = *((void *)this + 1) + 8LL;
        goto LABEL_37;
      }

      if ((_DWORD)v20 != 1)
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }

      *(_BYTE *)(a1 + 28) |= 4u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }

      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
      uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 28) |= 1u;
    uint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
    goto LABEL_36;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_36:
        uint64_t v2 = *((void *)this + 1) + 8LL;
        goto LABEL_37;
      }

      if ((_DWORD)v20 != 1)
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }

      *(_BYTE *)(a1 + 28) |= 4u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }

      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
      uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 28) |= 1u;
    uint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
    goto LABEL_36;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v25 = 0LL;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        uint64_t v22 = operator new(0x48uLL);
        sub_101189528((uint64_t)v22);
        uint64_t v25 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v22;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
          uint64_t v22 = *(void **)(a1 + 24);
        }

        if (!PB::Reader::placeMark(this, v28, v23, v24)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v28);
      }

      else
      {
        if ((_DWORD)v20 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_34;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v26);
        }

        else
        {
          if ((_DWORD)v20 != 1)
          {
            double result = PB::Reader::skip(this, v20, v11 & 7, 0);
            if (!(_DWORD)result) {
              return result;
            }
            goto LABEL_39;
          }

          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v21 = *((void *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7LL || v21 + 8 > *((void *)this + 2))
          {
LABEL_34:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_39;
          }

          *(void *)(a1 + 16) = *(void *)(*(void *)this + v21);
        }

        *((void *)this + 1) += 8LL;
      }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_116;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_100;
                  }

                  char v53 = v21++;
                  uint64_t v54 = *(_BYTE *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_99:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_100;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_99;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_100;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_100:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_116;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_105;
                  }

                  uint64_t v57 = v27++;
                  uint64_t v58 = *(_BYTE *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_104:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_105;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_104;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_105;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_105:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_116;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }

                  __int128 v61 = v33++;
                  char v62 = *(_BYTE *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_109:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_110;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_109;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 28) = v37;
              goto LABEL_116;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 37) = v40;
              goto LABEL_116;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v42 = v41 != 0;
              }

              *(_BYTE *)(a1 + 36) = v42;
              goto LABEL_116;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v44 = v43 != 0;
              }

              *(_BYTE *)(a1 + 38) = v44;
              goto LABEL_116;
            case 8u:
              *(_BYTE *)(a1 + 40) |= 2u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }

                  uint64_t v65 = v45++;
                  unint64_t v66 = *(_BYTE *)(v46 + v65);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    v49 = 0LL;
LABEL_114:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_115;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  v49 = 0LL;
                }
                goto LABEL_114;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              v49 = 0LL;
LABEL_115:
              *(void *)(a1 + 16) = v49;
LABEL_116:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_116;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }

                  uint64_t v37 = v20++;
                  unint64_t v38 = *(_BYTE *)(v21 + v37);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  uint64_t v14 = v36++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_63;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_63:
                uint64_t v2 = v37 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_64;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

  int v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_22:
    uint64_t v13 = *(_DWORD *)(a2 + 44);
    *(_WORD *)(result + 64) = v3 | 0x20;
    *(_DWORD *)(result + 44) = v13;
    return result;
  }

  PB::TextFormatter::format(this, "workoutLocationType", *(_DWORD *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }

                  unint64_t v59 = v20++;
                  uint64_t v60 = *(_BYTE *)(v21 + v59);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_125;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_125:
                uint64_t v2 = v59 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_126;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 9u);
  if ((*(_WORD *)(v3 + 64) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xAu);
  }
  return result;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }

                  unsigned int v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_87:
                uint64_t v2 = v47 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x10uLL);
        sub_1010DDCA0((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x28uLL);
        sub_1010DF2B4((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x28uLL);
        sub_1010DF2B4((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x18uLL);
        sub_1010F41C0((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x48uLL);
        sub_1010FB910((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x58uLL);
        sub_101105000((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x40uLL);
        sub_1011157D0((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x18uLL);
        sub_1011193C4((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0xB8uLL);
        sub_101086610((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

    if ((v11 & 7) == 4)
    {
      uint64_t i = 0;
      return i == 0;
    }

    uint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_47:
        uint64_t v2 = *((void *)this + 1) + 8LL;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }

    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *(_BYTE *)(a1 + 28) |= 4u;
          uint64_t v21 = *((void *)this + 1);
          uint64_t v2 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
          {
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v25 = 0LL;
            if (v2 <= v21) {
              uint64_t v2 = *((void *)this + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_52;
              }

              uint64_t v30 = v21++;
              uint64_t v31 = *(_BYTE *)(v22 + v30);
              *((void *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              uint64_t v14 = v29++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_51;
              }
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v25) = 0;
            }
LABEL_51:
            uint64_t v2 = v30 + 1;
          }

          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0LL;
            while (1)
            {
              uint64_t v2 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              uint64_t v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              uint64_t v21 = v2;
              uint64_t v14 = v24++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                break;
              }
            }
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x48uLL);
        sub_101189528((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x28uLL);
        sub_101174A28((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x58uLL);
        sub_101188CD4((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x20uLL);
        sub_10119F358((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x20uLL);
        sub_1011AA9C0((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x30uLL);
        *(void *)uint64_t v22 = &off_10189E558;
        v22[10] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x18uLL);
        *(void *)uint64_t v22 = &off_10189E590;
        v22[4] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x20uLL);
        void *v22 = off_10189E600;
        v22[1] = 0LL;
        v22[2] = 0LL;
        v22[3] = 0LL;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x48uLL);
        *(void *)uint64_t v22 = &off_10189E670;
        v22[16] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x20uLL);
        void *v22 = off_10189EB40;
        v22[1] = 0LL;
        v22[2] = 0LL;
        v22[3] = 0LL;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0xA8uLL);
        uint64_t v23 = sub_1010F1358((uint64_t)v20);
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t, double))(*(void *)v24 + 8LL))(v24, v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v26, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v26);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

    if ((v11 & 7) == 4)
    {
      uint64_t i = 0;
      return i == 0;
    }

    uint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }

    else
    {
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_51:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

  int v8 = *(_BYTE *)(a2 + 61);
  v3 |= 0x1000u;
  *(_WORD *)(result + 64) = v3;
  *(_BYTE *)(result + 61) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "intervalWakeBeginToWakeDetected", *(float *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 60) = v22;
              goto LABEL_117;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }

                  uint64_t v45 = v23++;
                  char v46 = *(_BYTE *)(v24 + v45);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_105:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_106;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_105;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 56) = v27;
              goto LABEL_117;
            case 4u:
              *(_WORD *)(a1 + 64) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_39:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 61) = v30;
              goto LABEL_117;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 9u:
              *(_WORD *)(a1 + 64) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_100:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_101:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_117;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 4u;
              uint64_t v31 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5LL || v31 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v35 = 0LL;
                if (v2 <= v31) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }

                  v49 = v31++;
                  uint64_t v50 = *(_BYTE *)(v32 + v49);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_110:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_111;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_110;
              }

              uint64_t v33 = 0;
              uint64_t v34 = 0;
              uint64_t v35 = 0LL;
              do
              {
                uint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                uint64_t v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v33 += 7;
                uint64_t v31 = v2;
                uint64_t v14 = v34++ > 8;
              }

              while (!v14);
              LODWORD(v35) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 24) = v35;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x200u;
              uint64_t v37 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v41 = 0LL;
                if (v2 <= v37) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }

                  char v53 = v37++;
                  uint64_t v54 = *(_BYTE *)(v38 + v53);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_115:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_116;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_115;
              }

              uint64_t v39 = 0;
              __int128 v40 = 0;
              uint64_t v41 = 0LL;
              do
              {
                uint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                uint64_t v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v39 += 7;
                uint64_t v37 = v2;
                uint64_t v14 = v40++ > 8;
              }

              while (!v14);
              LODWORD(v41) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 52) = v41;
LABEL_117:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_117;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

  int v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 40) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }

                  uint64_t v41 = v21++;
                  uint64_t v42 = *(_BYTE *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_102;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_101;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 96) = v25;
              goto LABEL_113;
            case 3u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 100) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 100) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_97:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_60:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_113;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }

                  uint64_t v45 = v27++;
                  char v46 = *(_BYTE *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_106:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_107;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_106;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_107;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_113;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_112;
                  }

                  v49 = v33++;
                  uint64_t v50 = *(_BYTE *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_111:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_112;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_111;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_112;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_112:
              *(_DWORD *)(a1 + 92) = v37;
LABEL_113:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_113;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v21 = v20 != 0;
        }

        *(_BYTE *)(a1 + 8) = v21;
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x38uLL);
        sub_1010F837C((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
        {
          unint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v31 = 0LL;
          if (v2 <= v27) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }

            __int128 v40 = v27++;
            uint64_t v41 = *(_BYTE *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            uint64_t v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          uint64_t v3 = v40 + 1;
        }

        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          while (1)
          {
            uint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            uint64_t v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            uint64_t v27 = v3;
            uint64_t v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v21 = v20 != 0;
        }

        *(_BYTE *)(a1 + 8) = v21;
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_55;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_54;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_54;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_54:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_55:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_61;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_60;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_59:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_60;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_59;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_61:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_61;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_97;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 2u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v45 = 0;
                char v46 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }

                  unsigned int v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_85:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_86;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_85;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_86:
              *(void *)(a1 + 16) = v25;
              goto LABEL_97;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }

                  unsigned int v51 = v27++;
                  uint8_t v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_90:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_91;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_90;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_91:
              *(void *)(a1 + 8) = v31;
              goto LABEL_97;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }

                  uint64_t v55 = v33++;
                  uint64_t v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0LL;
LABEL_95:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_96;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v37 = 0LL;
                }
                goto LABEL_95;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              uint64_t v37 = 0LL;
LABEL_96:
              *(void *)(a1 + 32) = v37;
LABEL_97:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 42) = v40;
              goto LABEL_97;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v42 = v41 != 0;
              }

              *(_BYTE *)(a1 + 40) = v42;
              goto LABEL_97;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v44 = v43 != 0;
              }

              *(_BYTE *)(a1 + 41) = v44;
              goto LABEL_97;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_97;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 20) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v21 = v20 != 0;
              }

              *(_BYTE *)(a1 + 15) = v21;
              goto LABEL_60;
            case 2u:
              *(_WORD *)(a1 + 20) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 9) = v24;
              goto LABEL_60;
            case 3u:
              *(_WORD *)(a1 + 20) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 11) = v26;
              goto LABEL_60;
            case 4u:
              *(_WORD *)(a1 + 20) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 13) = v28;
              goto LABEL_60;
            case 5u:
              *(_WORD *)(a1 + 20) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 14) = v30;
              goto LABEL_60;
            case 6u:
              *(_WORD *)(a1 + 20) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v32 = v31 != 0;
              }

              *(_BYTE *)(a1 + 12) = v32;
              goto LABEL_60;
            case 7u:
              *(_WORD *)(a1 + 20) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 16) = v34;
              goto LABEL_60;
            case 8u:
              *(_WORD *)(a1 + 20) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 10) = v36;
              goto LABEL_60;
            case 9u:
              *(_WORD *)(a1 + 20) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                unint64_t v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                unint64_t v38 = v37 != 0;
              }

              *(_BYTE *)(a1 + 8) = v38;
              goto LABEL_60;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              uint64_t v3 = *((void *)this + 2);
LABEL_60:
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_57:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
LABEL_51:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_42:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_57;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_57;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 184) |= 4uLL;
          uint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v20);
          goto LABEL_62;
        case 2u:
          *(void *)(a1 + 184) |= 1uLL;
          uint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7LL || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v22);
          goto LABEL_62;
        case 3u:
          *(void *)(a1 + 184) |= 0x200000uLL;
          uint64_t v23 = *((void *)this + 1);
          uint64_t v24 = *((void *)this + 2);
          uint64_t v25 = *(void *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5LL && v23 + 10 <= v24)
          {
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            uint64_t v28 = 0LL;
            do
            {
              uint64_t v29 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              uint64_t v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_364;
              }
              v26 += 7;
              uint64_t v23 = v29;
              uint64_t v14 = v27++ > 8;
            }

            while (!v14);
LABEL_228:
            LODWORD(v28) = 0;
            goto LABEL_364;
          }

          v204 = 0;
          v205 = 0;
          uint64_t v28 = 0LL;
          if (v24 <= v23) {
            uint64_t v24 = *((void *)this + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v206 = v23 + 1;
              v207 = *(_BYTE *)(v25 + v23);
              *((void *)this + 1) = v206;
              v28 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                uint64_t v23 = v206;
                uint64_t v14 = v205++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v28) = 0;
              }
            }

            break;
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_46:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_47:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v20 = operator new(0x38uLL);
        sub_1010F837C((uint64_t)v20);
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v20 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v21, v22)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v20 + 16LL))(v20, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 116) |= 0x10000u;
          uint64_t v20 = *((void *)this + 1);
          uint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v21)
          {
            v154 = 0;
            v155 = 0;
            uint64_t v25 = 0LL;
            if (v21 <= v20) {
              uint64_t v21 = *((void *)this + 1);
            }
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_251;
              }

              v156 = v20 + 1;
              v157 = *(_BYTE *)(v22 + v20);
              *((void *)this + 1) = v156;
              v25 |= (unint64_t)(v157 & 0x7F) << v154;
              if ((v157 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_251;
              }

              v154 += 7;
              uint64_t v20 = v156;
              uint64_t v14 = v155++ > 8;
            }

            while (!v14);
LABEL_153:
            LODWORD(v25) = 0;
          }

          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = 0LL;
            while (1)
            {
              uint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              uint64_t v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              uint64_t v20 = v26;
              uint64_t v14 = v24++ > 8;
              if (v14) {
                goto LABEL_153;
              }
            }
          }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 36) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_120;
            case 2u:
              *(_WORD *)(a1 + 36) |= 0x10u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }

                  uint64_t v55 = v20++;
                  uint64_t v56 = *(_BYTE *)(v21 + v55);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
LABEL_103:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_104;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
                goto LABEL_103;
              }

              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0LL;
              do
              {
                uint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                uint64_t v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_104;
                }
                v22 += 7;
                uint64_t v20 = v2;
                uint64_t v14 = v23++ > 8;
              }

              while (!v14);
              LODWORD(v24) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_120;
            case 3u:
              *(_WORD *)(a1 + 36) |= 8u;
              uint64_t v26 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5LL || v26 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v30 = 0LL;
                if (v2 <= v26) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    LODWORD(v30) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }

                  unint64_t v59 = v26++;
                  uint64_t v60 = *(_BYTE *)(v27 + v59);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v30) = 0;
LABEL_108:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_109;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v30) = 0;
                }
                goto LABEL_108;
              }

              uint64_t v28 = 0;
              uint64_t v29 = 0;
              uint64_t v30 = 0LL;
              do
              {
                uint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                uint64_t v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v28 += 7;
                uint64_t v26 = v2;
                uint64_t v14 = v29++ > 8;
              }

              while (!v14);
              LODWORD(v30) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 24) = v30;
              goto LABEL_120;
            case 0xAu:
              *(_WORD *)(a1 + 36) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 34) = v34;
              goto LABEL_120;
            case 0xBu:
              *(_WORD *)(a1 + 36) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 35) = v36;
              goto LABEL_120;
            case 0xCu:
              *(_WORD *)(a1 + 36) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                unint64_t v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                unint64_t v38 = v37 != 0;
              }

              *(_BYTE *)(a1 + 32) = v38;
              goto LABEL_120;
            case 0xDu:
              *(_WORD *)(a1 + 36) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 33) = v40;
              goto LABEL_120;
            case 0x15u:
              *(_WORD *)(a1 + 36) |= 2u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }

                  uint64_t v63 = v41++;
                  uint64_t v64 = *(_BYTE *)(v42 + v63);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_113:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_114;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_113;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 16) = v45;
              goto LABEL_120;
            case 0x16u:
              *(_WORD *)(a1 + 36) |= 4u;
              unsigned int v47 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                unsigned int v51 = 0LL;
                if (v2 <= v47) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }

                  uint64_t v67 = v47++;
                  uint64_t v68 = *(_BYTE *)(v48 + v67);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_118:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_119;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_118;
              }

              v49 = 0;
              uint64_t v50 = 0;
              unsigned int v51 = 0LL;
              do
              {
                uint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                uint8_t v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v49 += 7;
                unsigned int v47 = v2;
                uint64_t v14 = v50++ > 8;
              }

              while (!v14);
              LODWORD(v51) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 20) = v51;
LABEL_120:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_120;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        uint64_t v31 = operator new(0x18uLL);
        *(void *)uint64_t v31 = &off_1018A00D8;
        v31[5] = 0;
        uint64_t v32 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v31;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
          uint64_t v31 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v40, v29, v30)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v31 + 16LL))(v31, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v40);
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        uint64_t v33 = *((void *)this + 1);
        if (v33 <= 0xFFFFFFFFFFFFFFF7LL && v33 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v33);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v22 = *((void *)this + 2);
        uint64_t v23 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v22)
        {
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          uint64_t v26 = 0LL;
          if (v22 <= v21) {
            uint64_t v22 = *((void *)this + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }

            uint64_t v37 = v21 + 1;
            unint64_t v38 = *(_BYTE *)(v23 + v21);
            *((void *)this + 1) = v37;
            v26 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            uint64_t v21 = v37;
            uint64_t v14 = v36++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v26) = 0;
              goto LABEL_52;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v26) = 0;
          }
        }

        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0LL;
          while (1)
          {
            uint64_t v27 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            uint64_t v21 = v27;
            uint64_t v14 = v25++ > 8;
            if (v14) {
              goto LABEL_47;
            }
          }
        }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 180) |= 0x800u;
        uint64_t v20 = *((void *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 96) = *(void *)(*(void *)this + v20);
        goto LABEL_92;
      case 2u:
        *(_DWORD *)(a1 + 180) |= 0x40u;
        uint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7LL || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v22);
        goto LABEL_92;
      case 3u:
        *(_DWORD *)(a1 + 180) |= 0x80u;
        uint64_t v23 = *((void *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7LL || v23 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 64) = *(void *)(*(void *)this + v23);
        goto LABEL_92;
      case 4u:
        *(_DWORD *)(a1 + 180) |= 0x200u;
        uint64_t v24 = *((void *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7LL || v24 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 80) = *(void *)(*(void *)this + v24);
        goto LABEL_92;
      case 5u:
        *(_DWORD *)(a1 + 180) |= 0x400u;
        uint64_t v25 = *((void *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 88) = *(void *)(*(void *)this + v25);
        goto LABEL_92;
      case 6u:
        *(_DWORD *)(a1 + 180) |= 0x20u;
        uint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 48) = *(void *)(*(void *)this + v26);
        goto LABEL_92;
      case 7u:
        *(_DWORD *)(a1 + 180) |= 2u;
        uint64_t v27 = *((void *)this + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v27);
        goto LABEL_92;
      case 8u:
        *(_DWORD *)(a1 + 180) |= 4u;
        uint64_t v28 = *((void *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 24) = *(void *)(*(void *)this + v28);
        goto LABEL_92;
      case 9u:
        *(_DWORD *)(a1 + 180) |= 1u;
        uint64_t v29 = *((void *)this + 1);
        if (v29 > 0xFFFFFFFFFFFFFFF7LL || v29 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v29);
        goto LABEL_92;
      case 0xAu:
        *(_DWORD *)(a1 + 180) |= 0x2000u;
        uint64_t v30 = *((void *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7LL || v30 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 120) = *(void *)(*(void *)this + v30);
        goto LABEL_92;
      case 0xBu:
        *(_DWORD *)(a1 + 180) |= 0x800000u;
        uint64_t v31 = *((void *)this + 1);
        uint64_t v32 = *((void *)this + 2);
        uint64_t v33 = *(void *)this;
        if (v31 <= 0xFFFFFFFFFFFFFFF5LL && v31 + 10 <= v32)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v36 = 0LL;
          do
          {
            uint64_t v37 = v31 + 1;
            *((void *)this + 1) = v31 + 1;
            unint64_t v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0) {
              goto LABEL_217;
            }
            v34 += 7;
            uint64_t v31 = v37;
            uint64_t v14 = v35++ > 8;
          }

          while (!v14);
LABEL_149:
          LODWORD(v36) = 0;
          goto LABEL_217;
        }

        v109 = 0;
        v110 = 0;
        uint64_t v36 = 0LL;
        if (v32 <= v31) {
          uint64_t v32 = *((void *)this + 1);
        }
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v111 = v31 + 1;
            v112 = *(_BYTE *)(v33 + v31);
            *((void *)this + 1) = v111;
            v36 |= (unint64_t)(v112 & 0x7F) << v109;
            if (v112 < 0)
            {
              v109 += 7;
              uint64_t v31 = v111;
              uint64_t v14 = v110++ > 8;
              if (v14) {
                goto LABEL_149;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v36) = 0;
            }
          }

          break;
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }

            uint64_t v36 = v21++;
            uint64_t v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          uint64_t v2 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 220) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 2u:
              *(_DWORD *)(a1 + 220) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 3u:
              *(_DWORD *)(a1 + 220) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 4u:
              *(_DWORD *)(a1 + 220) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 5u:
              *(_DWORD *)(a1 + 220) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 6u:
              *(_DWORD *)(a1 + 220) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 7u:
              *(_DWORD *)(a1 + 220) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 8u:
              *(_DWORD *)(a1 + 220) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 9u:
              *(_DWORD *)(a1 + 220) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0xAu:
              *(_DWORD *)(a1 + 220) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0xBu:
              *(_DWORD *)(a1 + 220) |= 0x10000000u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_200;
                  }

                  __int128 v61 = v21++;
                  char v62 = *(_BYTE *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_199:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_200;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_199;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_200;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_200:
              *(_DWORD *)(a1 + 204) = v25;
              goto LABEL_191;
            case 0xCu:
              *(_DWORD *)(a1 + 220) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0xDu:
              *(_DWORD *)(a1 + 220) |= 0x20000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_83;
            case 0xEu:
              *(_DWORD *)(a1 + 220) |= 0x40000000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_205;
                  }

                  uint64_t v65 = v27++;
                  unint64_t v66 = *(_BYTE *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_204:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_205;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_204;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_205;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_205:
              *(_DWORD *)(a1 + 212) = v31;
              goto LABEL_191;
            case 0xFu:
              *(_DWORD *)(a1 + 220) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_83;
            case 0x10u:
              *(_DWORD *)(a1 + 220) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_83;
            case 0x11u:
              *(_DWORD *)(a1 + 220) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v2);
LABEL_83:
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_190;
            case 0x12u:
              *(_DWORD *)(a1 + 220) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x13u:
              *(_DWORD *)(a1 + 220) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x14u:
              *(_DWORD *)(a1 + 220) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x15u:
              *(_DWORD *)(a1 + 220) |= 0x2000000u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_210;
                  }

                  uint64_t v69 = v33++;
                  uint64_t v70 = *(_BYTE *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_209:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_210;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_209;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_210;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_210:
              *(_DWORD *)(a1 + 192) = v37;
              goto LABEL_191;
            case 0x16u:
              *(_DWORD *)(a1 + 220) |= 0x8000000u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_215;
                  }

                  uint64_t v73 = v39++;
                  uint64_t v74 = *(_BYTE *)(v40 + v73);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  uint64_t v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_214:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_215;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_214;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_215;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_215:
              *(_DWORD *)(a1 + 200) = v43;
              goto LABEL_191;
            case 0x17u:
              *(_DWORD *)(a1 + 220) |= 0x1000000u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v75 = 0;
                uint64_t v76 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_220;
                  }

                  uint64_t v77 = v45++;
                  uint64_t v78 = *(_BYTE *)(v46 + v77);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  uint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_219:
                    uint64_t v2 = v77 + 1;
                    goto LABEL_220;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_219;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_220;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_220:
              *(_DWORD *)(a1 + 188) = v49;
              goto LABEL_191;
            case 0x18u:
              *(_DWORD *)(a1 + 220) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x19u:
              *(_DWORD *)(a1 + 220) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Au:
              *(_DWORD *)(a1 + 220) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Bu:
              *(_DWORD *)(a1 + 220) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Cu:
              *(_DWORD *)(a1 + 220) |= 0x80000000;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint8_t v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint8_t v52 = v51 != 0;
              }

              *(_BYTE *)(a1 + 216) = v52;
              goto LABEL_191;
            case 0x1Du:
              *(_DWORD *)(a1 + 220) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Eu:
              *(_DWORD *)(a1 + 220) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Fu:
              *(_DWORD *)(a1 + 220) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
LABEL_189:
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_190:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_136:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_191;
            case 0x20u:
              *(_DWORD *)(a1 + 220) |= 0x4000000u;
              char v53 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                uint64_t v57 = 0LL;
                if (v2 <= v53) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_225;
                  }

                  uint64_t v81 = v53++;
                  uint64_t v82 = *(_BYTE *)(v54 + v81);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  uint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_224:
                    uint64_t v2 = v81 + 1;
                    goto LABEL_225;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_224;
              }

              uint64_t v55 = 0;
              uint64_t v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                uint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                uint64_t v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_225;
                }
                v55 += 7;
                char v53 = v2;
                uint64_t v14 = v56++ > 8;
              }

              while (!v14);
              LODWORD(v57) = 0;
LABEL_225:
              *(_DWORD *)(a1 + 196) = v57;
LABEL_191:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_191;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 80) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "hashedLatLong", *(_BYTE *)(a1 + 88));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 92) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 92) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x200u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_89;
                  }

                  uint64_t v37 = v21++;
                  unint64_t v38 = *(_BYTE *)(v22 + v37);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  uint64_t v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_88:
                    uint64_t v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_88;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_89;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_89:
              *(_DWORD *)(a1 + 80) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 92) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }

                  uint64_t v41 = v27++;
                  uint64_t v42 = *(_BYTE *)(v28 + v41);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_93:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_93;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 84) = v31;
LABEL_95:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_84:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 88) = v34;
              goto LABEL_95;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_95;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 72), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(void *)(a1 + 192) |= 0x8000uLL;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v21 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v21)
        {
          v239 = 0;
          v240 = 0;
          uint64_t v25 = 0LL;
          if (v21 <= v20) {
            uint64_t v21 = *((void *)this + 1);
          }
          do
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_449;
            }

            v241 = v20 + 1;
            v242 = *(_BYTE *)(v22 + v20);
            *((void *)this + 1) = v241;
            v25 |= (unint64_t)(v242 & 0x7F) << v239;
            if ((v242 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24)) {
                LODWORD(v25) = 0;
              }
              goto LABEL_449;
            }

            v239 += 7;
            uint64_t v20 = v241;
            uint64_t v14 = v240++ > 8;
          }

          while (!v14);
LABEL_250:
          LODWORD(v25) = 0;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v26 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v20 = v26;
            uint64_t v14 = v24++ > 8;
            if (v14) {
              goto LABEL_250;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          uint64_t v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v21 = v20 != 0;
        }

        *(_BYTE *)(a1 + 8) = v21;
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0xB8uLL);
        void *v22 = off_10189FA48;
        v22[14] = 0LL;
        *((_DWORD *)v22 + 45) = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_46:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_47:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 56) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "isStanding", *(_BYTE *)(a1 + 65));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }

                  unsigned int v51 = v21++;
                  uint8_t v52 = *(_BYTE *)(v22 + v51);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_109;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_125;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 65) = v28;
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              uint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }

                  uint64_t v55 = v29++;
                  uint64_t v56 = *(_BYTE *)(v30 + v55);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_113:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_114;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_113;
              }

              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v31 += 7;
                uint64_t v29 = v2;
                uint64_t v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 52) = v33;
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              uint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }

                  unint64_t v59 = v35++;
                  uint64_t v60 = *(_BYTE *)(v36 + v59);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_118:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_119;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_118;
              }

              uint64_t v37 = 0;
              unint64_t v38 = 0;
              uint64_t v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                __int128 v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v37 += 7;
                uint64_t v35 = v2;
                uint64_t v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_125;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }

                  uint64_t v63 = v41++;
                  uint64_t v64 = *(_BYTE *)(v42 + v63);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_123:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_124;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_123;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 56) = v45;
LABEL_125:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_104:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_68:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_125;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v48 = v47 != 0;
              }

              *(_BYTE *)(a1 + 64) = v48;
              goto LABEL_125;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_125;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "gpsAltitude", *(double *)(a1 + 24));
  int v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 2u:
              *(_WORD *)(a1 + 100) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 3u:
              *(_WORD *)(a1 + 100) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 4u:
              *(_WORD *)(a1 + 100) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 7u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 8u:
              *(_WORD *)(a1 + 100) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
LABEL_112:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_50:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_133;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_117;
                  }

                  v49 = v21++;
                  uint64_t v50 = *(_BYTE *)(v22 + v49);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_116;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_117;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_133;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_122;
                  }

                  char v53 = v27++;
                  uint64_t v54 = *(_BYTE *)(v28 + v53);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_121;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_122;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_133;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }

                  uint64_t v57 = v33++;
                  uint64_t v58 = *(_BYTE *)(v34 + v57);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_126;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 92) = v37;
              goto LABEL_133;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x200u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }

                  __int128 v61 = v39++;
                  char v62 = *(_BYTE *)(v40 + v61);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_131;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 80) = v43;
LABEL_133:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 100) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v46 = v45 != 0;
              }

              *(_BYTE *)(a1 + 96) = v46;
              goto LABEL_133;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_133;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              uint64_t v22 = operator new(0x68uLL);
              *(void *)uint64_t v22 = &off_10189FD58;
              v22[25] = 0;
              uint64_t v23 = *(void *)(a1 + 72);
              *(void *)(a1 + 72) = v22;
              if (v23)
              {
                (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
                uint64_t v22 = *(_DWORD **)(a1 + 72);
              }

              if (PB::Reader::placeMark(this, v33, v20, v21)
                && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) != 0)
              {
                PB::Reader::recallMark(this, v33);
                goto LABEL_55;
              }

              return 0LL;
            case 2u:
              *(_BYTE *)(a1 + 80) |= 4u;
              uint64_t v25 = *((void *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v25);
              goto LABEL_54;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 8u;
              uint64_t v26 = *((void *)this + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v26);
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 80) |= 0x40u;
              uint64_t v27 = *((void *)this + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v27);
              goto LABEL_54;
            case 5u:
              *(_BYTE *)(a1 + 80) |= 0x80u;
              uint64_t v28 = *((void *)this + 1);
              if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v28);
              goto LABEL_54;
            case 6u:
              *(_BYTE *)(a1 + 80) |= 2u;
              uint64_t v29 = *((void *)this + 1);
              if (v29 > 0xFFFFFFFFFFFFFFF7LL || v29 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v29);
              goto LABEL_54;
            case 7u:
              *(_BYTE *)(a1 + 80) |= 1u;
              uint64_t v30 = *((void *)this + 1);
              if (v30 > 0xFFFFFFFFFFFFFFF7LL || v30 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v30);
              goto LABEL_54;
            case 8u:
              *(_BYTE *)(a1 + 80) |= 0x20u;
              uint64_t v31 = *((void *)this + 1);
              if (v31 > 0xFFFFFFFFFFFFFFF7LL || v31 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v31);
              goto LABEL_54;
            case 9u:
              *(_BYTE *)(a1 + 80) |= 0x10u;
              uint64_t v32 = *((void *)this + 1);
              if (v32 <= 0xFFFFFFFFFFFFFFF7LL && v32 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v32);
LABEL_54:
                *((void *)this + 1) += 8LL;
              }

              else
              {
LABEL_52:
                *((_BYTE *)this + 24) = 1;
              }

  int v11 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 24) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_22:
    uint64_t v13 = *(_DWORD *)(a2 + 48);
    *(_WORD *)(result + 68) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v13;
    return result;
  }

  PB::TextFormatter::format(this, "sinceLastGood", *(double *)(a1 + 24));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_105;
                  }

                  v49 = v20++;
                  uint64_t v50 = *(_BYTE *)(v21 + v49);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_104:
                uint64_t v2 = v49 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_105;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 9u);
  if ((*(_WORD *)(v3 + 68) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xAu);
  }
  return result;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_46:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_47:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 108) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 108) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 3u:
          *(_DWORD *)(a1 + 108) |= 0x100000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 4u:
          *(_DWORD *)(a1 + 108) |= 0x80000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 5u:
          *(_DWORD *)(a1 + 108) |= 0x200000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 6u:
          *(_DWORD *)(a1 + 108) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 7u:
          *(_DWORD *)(a1 + 108) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 8u:
          *(_DWORD *)(a1 + 108) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 9u:
          *(_DWORD *)(a1 + 108) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xAu:
          *(_DWORD *)(a1 + 108) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xBu:
          *(_DWORD *)(a1 + 108) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xCu:
          *(_DWORD *)(a1 + 108) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xDu:
          *(_DWORD *)(a1 + 108) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xEu:
          *(_DWORD *)(a1 + 108) |= 0x400000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xFu:
          *(_DWORD *)(a1 + 108) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x10u:
          *(_DWORD *)(a1 + 108) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x11u:
          *(_DWORD *)(a1 + 108) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x12u:
          *(_DWORD *)(a1 + 108) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x13u:
          *(_DWORD *)(a1 + 108) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x14u:
          *(_DWORD *)(a1 + 108) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x15u:
          *(_DWORD *)(a1 + 108) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x16u:
          *(_DWORD *)(a1 + 108) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
LABEL_95:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_96;
        case 0x17u:
          *(_DWORD *)(a1 + 108) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_93:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_88:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_96:
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
        uint64_t v2 = *((void *)this + 1) + 4LL;
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }

        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }

        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        uint64_t v2 = *((void *)this + 1) + 8LL;
      }

      *((void *)this + 1) = v2;
LABEL_33:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

  int v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "positionRefZ", *(float *)(a1 + 36));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_50;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 64) = v22;
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_50:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_77:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_78:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 4u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }

                  uint64_t v31 = v23++;
                  uint64_t v32 = *(_BYTE *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_84:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_84;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 44), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_39:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_50:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_51;
        case 8u:
          *(_BYTE *)(a1 + 48) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_48:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_43:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_51:
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        uint64_t v23 = operator new(0x10uLL);
        sub_101140A00(v23);
        uint64_t v25 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
          uint64_t v23 = *(_DWORD **)(a1 + 8);
        }
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_31;
        }

        uint64_t v23 = operator new(0x68uLL);
        *(void *)uint64_t v23 = &off_10189F690;
        v23[25] = 0;
        uint64_t v24 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          uint64_t v23 = *(_DWORD **)(a1 + 16);
        }
      }

      if (!PB::Reader::placeMark(this, v27, v21, v22)
        || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v23 + 16LL))(v23, this) & 1) == 0)
      {
        return 0LL;
      }

      PB::Reader::recallMark(this, v27);
LABEL_31:
      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

    if ((v11 & 7) == 4)
    {
      uint64_t v4 = 0;
      return v4 == 0;
    }

    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 64) |= 0x20u;
        uint64_t v20 = *((void *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
          goto LABEL_41;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v20);
        goto LABEL_48;
      case 2u:
        *(_BYTE *)(a1 + 64) |= 8u;
        uint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7LL || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_41;
        }
        *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
        goto LABEL_48;
      case 3u:
        *(_BYTE *)(a1 + 64) |= 0x10u;
        uint64_t v23 = *((void *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7LL || v23 + 8 > *((void *)this + 2)) {
          goto LABEL_41;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v23);
        goto LABEL_48;
      case 4u:
        *(_BYTE *)(a1 + 64) |= 4u;
        uint64_t v24 = *((void *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7LL || v24 + 8 > *((void *)this + 2)) {
          goto LABEL_41;
        }
        *(void *)(a1 + 24) = *(void *)(*(void *)this + v24);
        goto LABEL_48;
      case 5u:
        *(_BYTE *)(a1 + 64) |= 1u;
        uint64_t v25 = *((void *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2)) {
          goto LABEL_41;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v25);
        goto LABEL_48;
      case 6u:
        *(_BYTE *)(a1 + 64) |= 2u;
        uint64_t v26 = *((void *)this + 1);
        if (v26 <= 0xFFFFFFFFFFFFFFF7LL && v26 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v26);
LABEL_48:
          *((void *)this + 1) += 8LL;
        }

        else
        {
LABEL_41:
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_49;
      case 7u:
        uint64_t v27 = operator new(0x10uLL);
        sub_101140A00(v27);
        uint64_t v30 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = v27;
        if (v30)
        {
          (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
          uint64_t v27 = *(void **)(a1 + 48);
        }

        if (PB::Reader::placeMark(this, v31, v28, v29)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*v27 + 16LL))(v27, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v31);
LABEL_49:
          uint64_t v2 = *((void *)this + 1);
          uint64_t v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24)) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      default:
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_49;
    }
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x48uLL);
        void *v22 = off_1018A0260;
        v22[6] = 0LL;
        *((_DWORD *)v22 + 16) = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x48uLL);
        void *v22 = off_1018A0260;
        v22[6] = 0LL;
        *((_DWORD *)v22 + 16) = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 56) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 2u:
              *(_BYTE *)(a1 + 56) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 3u:
              *(_BYTE *)(a1 + 56) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 4u:
              *(_BYTE *)(a1 + 56) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 56) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_58:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_64;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 52) = v22;
              goto LABEL_64;
            case 7u:
              *(_BYTE *)(a1 + 56) |= 0x20u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_63;
                  }

                  uint64_t v31 = v23++;
                  uint64_t v32 = *(_BYTE *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_62;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_63;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 48) = v27;
LABEL_64:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_64;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 116) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 116) |= 0x2000u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }

                  uint64_t v39 = v21++;
                  __int128 v40 = *(_BYTE *)(v22 + v39);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_101;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 108) = v25;
              goto LABEL_108;
            case 3u:
              *(_WORD *)(a1 + 116) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 116) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 116) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 116) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 116) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 116) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 116) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 116) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 116) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xCu:
              *(_WORD *)(a1 + 116) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xDu:
              *(_WORD *)(a1 + 116) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
LABEL_97:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_108;
            case 0xEu:
              *(_WORD *)(a1 + 116) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *(_WORD *)(a1 + 116) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *(_WORD *)(a1 + 116) |= 0x1000u;
              uint64_t v31 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5LL || v31 + 10 > v2)
              {
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                uint64_t v35 = 0LL;
                if (v2 <= v31) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }

                  char v43 = v31++;
                  uint64_t v44 = *(_BYTE *)(v32 + v43);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  uint64_t v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    uint64_t v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_106;
              }

              uint64_t v33 = 0;
              uint64_t v34 = 0;
              uint64_t v35 = 0LL;
              do
              {
                uint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                uint64_t v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_107;
                }
                v33 += 7;
                uint64_t v31 = v2;
                uint64_t v14 = v34++ > 8;
              }

              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 104) = v35;
LABEL_108:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_108;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_33;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_33;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_49;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_49:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_33:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }

                  uint64_t v29 = v21++;
                  uint64_t v30 = *(_BYTE *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  uint64_t v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    uint64_t v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_53;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_55:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_55;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 56) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 56) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 56) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 56) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_43:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 64) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 64) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 64) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_104:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_130;
            case 4u:
              *(_BYTE *)(a1 + 64) |= 0x40u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                unsigned int v51 = 0;
                uint8_t v52 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }

                  char v53 = v21++;
                  uint64_t v54 = *(_BYTE *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  uint64_t v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_130;
            case 5u:
              *(_BYTE *)(a1 + 64) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v55 = 0;
                uint64_t v56 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }

                  uint64_t v57 = v27++;
                  uint64_t v58 = *(_BYTE *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  uint64_t v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_113:
                    uint64_t v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_113;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_114:
              *(void *)(a1 + 40) = v31;
              goto LABEL_130;
            case 6u:
              *(_BYTE *)(a1 + 64) |= 1u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }

                  __int128 v61 = v33++;
                  char v62 = *(_BYTE *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  uint64_t v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0LL;
LABEL_118:
                    uint64_t v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v37 = 0LL;
                }
                goto LABEL_118;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              uint64_t v37 = 0LL;
LABEL_119:
              *(void *)(a1 + 8) = v37;
              goto LABEL_130;
            case 7u:
              *(_BYTE *)(a1 + 64) |= 2u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    char v43 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }

                  uint64_t v65 = v39++;
                  unint64_t v66 = *(_BYTE *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v14 = v64++ > 8;
                  if (v14)
                  {
                    char v43 = 0LL;
LABEL_123:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  char v43 = 0LL;
                }
                goto LABEL_123;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              char v43 = 0LL;
LABEL_124:
              *(void *)(a1 + 16) = v43;
              goto LABEL_130;
            case 8u:
              *(_BYTE *)(a1 + 64) |= 0x80u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }

                  uint64_t v69 = v45++;
                  uint64_t v70 = *(_BYTE *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  uint64_t v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_128;
              }

              unsigned int v47 = 0;
              v48 = 0;
              v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                uint64_t v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 60) = v49;
LABEL_130:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_130;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 76) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 2u:
              *(_WORD *)(a1 + 76) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 3u:
              *(_WORD *)(a1 + 76) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 4u:
              *(_WORD *)(a1 + 76) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 5u:
              *(_WORD *)(a1 + 76) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 6u:
              *(_WORD *)(a1 + 76) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 7u:
              *(_WORD *)(a1 + 76) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_64:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_44:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 76) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }

                  uint64_t v31 = v21++;
                  uint64_t v32 = *(_BYTE *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0LL;
LABEL_68:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v25 = 0LL;
                }
                goto LABEL_68;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              uint64_t v25 = 0LL;
LABEL_69:
              *(void *)(a1 + 24) = v25;
LABEL_70:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 76) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 72) = v28;
              goto LABEL_70;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_49;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 28) = v22;
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }

                  uint64_t v31 = v23++;
                  uint64_t v32 = *(_BYTE *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_53;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_55:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_49:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_55;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_55;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }

        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }

        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }

      uint64_t v2 = *((void *)this + 1) + 8LL;
      *((void *)this + 1) = v2;
LABEL_33:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

  int v5 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 84) = v5;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "positionConfidence", *(double *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 88) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 88) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x400u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_85;
                  }

                  uint64_t v35 = v21++;
                  uint64_t v36 = *(_BYTE *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  uint64_t v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    uint64_t v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_84;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_85;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_91;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_90;
                  }

                  uint64_t v39 = v27++;
                  __int128 v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_89;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_90;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *(_DWORD *)(a1 + 80) = v31;
LABEL_91:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 88) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_80:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_91;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_91;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

    if ((v11 & 7) == 4)
    {
      uint64_t i = 0;
      return i == 0;
    }

    uint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 4u;
      uint64_t v21 = *((void *)this + 1);
      uint64_t v2 = *((void *)this + 2);
      uint64_t v22 = *(void *)this;
      if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v25 = 0LL;
        if (v2 <= v21) {
          uint64_t v2 = *((void *)this + 1);
        }
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_52;
          }

          uint64_t v30 = v21++;
          uint64_t v31 = *(_BYTE *)(v22 + v30);
          *((void *)this + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            break;
          }
          v28 += 7;
          uint64_t v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }

        if (*((_BYTE *)this + 24)) {
          LODWORD(v25) = 0;
        }
LABEL_51:
        uint64_t v2 = v30 + 1;
      }

      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0LL;
        while (1)
        {
          uint64_t v2 = v21 + 1;
          *((void *)this + 1) = v21 + 1;
          uint64_t v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            break;
          }
          v23 += 7;
          uint64_t v21 = v2;
          uint64_t v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_76;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_76;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_76:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_92;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v39 = 0;
                __int128 v40 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_81;
                  }

                  uint64_t v41 = v21++;
                  uint64_t v42 = *(_BYTE *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  uint64_t v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_80;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_81;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_92;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }

                  uint64_t v45 = v27++;
                  char v46 = *(_BYTE *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_85;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_92;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                unsigned int v47 = 0;
                v48 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }

                  v49 = v33++;
                  uint64_t v50 = *(_BYTE *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_90;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_92:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_92;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 8) = result;
  uint64_t v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "intensityCalDelta", *(double *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 84) |= 0x200u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_76;
                  }

                  uint64_t v31 = v20++;
                  uint64_t v32 = *(_BYTE *)(v21 + v31);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_75:
                uint64_t v2 = v31 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_76;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 80), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        uint64_t v20 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v24 = 0LL;
          if (v3 <= v20) {
            uint64_t v2 = *((void *)this + 1);
          }
          else {
            uint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }

            uint64_t v29 = v20++;
            uint64_t v30 = *(_BYTE *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            uint64_t v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0LL;
              goto LABEL_42;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v24 = 0LL;
          }
LABEL_42:
          uint64_t v2 = v29 + 1;
        }

        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0LL;
          while (1)
          {
            uint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            uint64_t v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            uint64_t v20 = v2;
            uint64_t v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0LL;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }

      else
      {
        if ((_DWORD)v20 != 1)
        {
          double result = PB::Reader::skip(this, v20, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }

        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }

        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }

      uint64_t v2 = *((void *)this + 1) + 8LL;
      *((void *)this + 1) = v2;
LABEL_33:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              uint64_t v2 = *((void *)this + 1) + 8LL;
              goto LABEL_61;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 4u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v31 = 0;
                uint64_t v32 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_66;
                  }

                  uint64_t v33 = v21++;
                  uint64_t v34 = *(_BYTE *)(v22 + v33);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  uint64_t v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    uint64_t v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_65;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_66;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_67:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_60:
                uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_61:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_67;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 36) = v28;
              goto LABEL_67;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 37) = v30;
              goto LABEL_67;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_67;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          uint64_t v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          uint64_t v22 = v21 != 0;
        }

        *(_BYTE *)(a1 + 16) = v22;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "isConverged", *(_BYTE *)(a1 + 88));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 92) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 92) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 92) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 92) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v31 = 0;
                uint64_t v32 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }

                  uint64_t v33 = v23++;
                  uint64_t v34 = *(_BYTE *)(v24 + v33);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  uint64_t v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    uint64_t v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 84) = v27;
LABEL_84:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_78;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 92) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
LABEL_77:
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_78:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_84;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_84;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 6u:
          *(_BYTE *)(a1 + 44) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 7u:
          *(_BYTE *)(a1 + 44) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 8u:
          *(_BYTE *)(a1 + 44) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_49:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_50:
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 60) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 60) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 60) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_55:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_43:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        case 7u:
          *(_WORD *)(a1 + 60) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v24 = v23 != 0;
          }

          *(_BYTE *)(a1 + 58) = v24;
          break;
        case 8u:
          *(_WORD *)(a1 + 60) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v21 = v20 != 0;
          }

          *(_BYTE *)(a1 + 56) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 60) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v26 = v25 != 0;
          }

          *(_BYTE *)(a1 + 57) = v26;
          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  PB::TextFormatter::format(this, "qStartX", *(float *)(a1 + 36));
  int v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 80) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_65;
        case 2u:
          *(_WORD *)(a1 + 80) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_65;
        case 3u:
          *(_WORD *)(a1 + 80) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 4u:
          *(_WORD *)(a1 + 80) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 5u:
          *(_WORD *)(a1 + 80) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 6u:
          *(_WORD *)(a1 + 80) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 7u:
          *(_WORD *)(a1 + 80) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 8u:
          *(_WORD *)(a1 + 80) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 9u:
          *(_WORD *)(a1 + 80) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xAu:
          *(_WORD *)(a1 + 80) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xBu:
          *(_WORD *)(a1 + 80) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xCu:
          *(_WORD *)(a1 + 80) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xDu:
          *(_WORD *)(a1 + 80) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_72:
          uint64_t v2 = *((void *)this + 1) + 4LL;
          goto LABEL_73;
        case 0xEu:
          *(_WORD *)(a1 + 80) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v22 = v21 != 0;
          }

          *(_BYTE *)(a1 + 76) = v22;
          break;
        case 0xFu:
          *(_WORD *)(a1 + 80) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_68:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_65:
            uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_73:
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_36:
        uint64_t v2 = *((void *)this + 1) + 4LL;
        goto LABEL_37;
      }

      if ((_DWORD)v20 != 1)
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }

      *(_BYTE *)(a1 + 24) |= 1u;
      uint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }

      *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 24) |= 4u;
    uint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
    goto LABEL_36;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 32) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_43:
            uint64_t v2 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x20uLL);
        *(void *)uint64_t v22 = &off_1018A0960;
        v22[6] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x20uLL);
        *(void *)uint64_t v22 = &off_1018A0960;
        v22[6] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        uint64_t v24 = operator new(0x18uLL);
        *(void *)uint64_t v24 = &off_1018A0A78;
        v24[5] = 0;
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v24;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
          uint64_t v24 = *(_DWORD **)(a1 + 16);
        }

        if (!PB::Reader::placeMark(this, v27, v22, v23)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v24 + 16LL))(v24, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v27);
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7LL && v21 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v21);
          *((void *)this + 1) += 8LL;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v25 = 0LL;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              break;
            }
          }
        }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x20uLL);
        *(void *)uint64_t v22 = &off_1018A0960;
        v22[6] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      if ((v11 >> 3) == 1)
      {
        uint64_t v22 = operator new(0x20uLL);
        *(void *)uint64_t v22 = &off_1018A0960;
        v22[6] = 0;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v22 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v25, v20, v21)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v25);
      }

      else
      {
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }

            uint64_t v30 = v21++;
            uint64_t v31 = *(_BYTE *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            uint64_t v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          uint64_t v2 = v30 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 88) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }

                  uint64_t v31 = v20++;
                  uint64_t v32 = *(_BYTE *)(v21 + v31);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_103:
                uint64_t v2 = v31 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_104;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  int v11 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 40) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      return result;
    }
LABEL_22:
    uint64_t v13 = *(_BYTE *)(a2 + 44);
    *(_WORD *)(result + 48) = v3 | 0x100;
    *(_BYTE *)(result + 44) = v13;
    return result;
  }

  PB::TextFormatter::format(this, "rxNtcC", *(float *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 1) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                uint64_t v31 = 0;
                uint64_t v32 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_73;
                  }

                  uint64_t v33 = v20++;
                  uint64_t v34 = *(_BYTE *)(v21 + v33);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  uint64_t v14 = v32++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0LL;
                    goto LABEL_72;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v24 = 0LL;
                }
LABEL_72:
                uint64_t v2 = v33 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_73;
                  }
                  v22 += 7;
                  uint64_t v20 = v2;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                uint64_t v24 = 0LL;
              }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 45), 9u);
  if ((*(_WORD *)(v3 + 48) & 0x100) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 0xAu);
  }
  return result;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 188) |= 1uLL;
          uint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7LL || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v20);
          uint64_t v21 = *((void *)this + 1) + 8LL;
          goto LABEL_206;
        case 2u:
          *(void *)(a1 + 188) |= 0x800000uLL;
          uint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v23);
          goto LABEL_205;
        case 3u:
          *(void *)(a1 + 188) |= 0x1000000uLL;
          uint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v24);
          goto LABEL_205;
        case 4u:
          *(void *)(a1 + 188) |= 0x2000000uLL;
          uint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_205;
        case 5u:
          *(void *)(a1 + 188) |= 8uLL;
          uint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_205;
        case 6u:
          *(void *)(a1 + 188) |= 0x10uLL;
          uint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_205;
        case 7u:
          *(void *)(a1 + 188) |= 0x20uLL;
          uint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_205;
        case 8u:
          *(void *)(a1 + 188) |= 0x40000000uLL;
          uint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_205;
        case 9u:
          *(void *)(a1 + 188) |= 0x200uLL;
          uint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_205;
        case 0xAu:
          *(void *)(a1 + 188) |= 0x200000uLL;
          uint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_205;
        case 0xBu:
          *(void *)(a1 + 188) |= 2uLL;
          uint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_205;
        case 0xCu:
          *(void *)(a1 + 188) |= 0x4000000uLL;
          uint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_205;
        case 0xDu:
          *(void *)(a1 + 188) |= 0x8000000uLL;
          uint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_205;
        case 0xEu:
          *(void *)(a1 + 188) |= 0x10000000uLL;
          uint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_205;
        case 0xFu:
          *(void *)(a1 + 188) |= 0x40uLL;
          uint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_205;
        case 0x10u:
          *(void *)(a1 + 188) |= 0x80uLL;
          uint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_205;
        case 0x11u:
          *(void *)(a1 + 188) |= 0x100uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_205;
        case 0x12u:
          *(void *)(a1 + 188) |= 0x80000000uLL;
          uint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_205;
        case 0x13u:
          *(void *)(a1 + 188) |= 0x400uLL;
          __int128 v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_205;
        case 0x14u:
          *(void *)(a1 + 188) |= 0x400000uLL;
          uint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v41);
          goto LABEL_205;
        case 0x15u:
          *(void *)(a1 + 188) |= 4uLL;
          uint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v42);
          goto LABEL_205;
        case 0x16u:
          *(void *)(a1 + 188) |= 0x400000000uLL;
          char v43 = *((void *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v43);
          goto LABEL_205;
        case 0x17u:
          *(void *)(a1 + 188) |= 0x4000uLL;
          uint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_205;
        case 0x18u:
          *(void *)(a1 + 188) |= 0x2000000000uLL;
          uint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_205;
        case 0x19u:
          *(void *)(a1 + 188) |= 0x20000uLL;
          char v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v46);
          goto LABEL_205;
        case 0x1Au:
          *(void *)(a1 + 188) |= 0x800000000uLL;
          unsigned int v47 = *((void *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(void *)(a1 + 188) |= 0x8000uLL;
          v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(void *)(a1 + 188) |= 0x4000000000uLL;
          v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_205;
        case 0x1Du:
          *(void *)(a1 + 188) |= 0x40000uLL;
          uint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(void *)(a1 + 188) |= 0x1000000000uLL;
          unsigned int v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(void *)(a1 + 188) |= 0x10000uLL;
          uint8_t v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v52);
          goto LABEL_205;
        case 0x20u:
          *(void *)(a1 + 188) |= 0x8000000000uLL;
          char v53 = *((void *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v53);
          goto LABEL_205;
        case 0x21u:
          *(void *)(a1 + 188) |= 0x80000uLL;
          uint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v54);
          goto LABEL_205;
        case 0x22u:
          *(void *)(a1 + 188) |= 0x200000000000uLL;
          uint64_t v55 = *((void *)this + 1);
          if (v55 >= *((void *)this + 2))
          {
            uint64_t v58 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v56 = v55 + 1;
            uint64_t v57 = *(unsigned __int8 *)(*(void *)this + v55);
            *((void *)this + 1) = v56;
            uint64_t v58 = v57 != 0;
          }

          *(_BYTE *)(a1 + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(void *)(a1 + 188) |= 0x800uLL;
          unint64_t v59 = *((void *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v59);
          goto LABEL_205;
        case 0x24u:
          *(void *)(a1 + 188) |= 0x1000uLL;
          uint64_t v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_205;
        case 0x25u:
          *(void *)(a1 + 188) |= 0x100000000000uLL;
          __int128 v61 = *((void *)this + 1);
          if (v61 >= *((void *)this + 2))
          {
            uint64_t v64 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            char v62 = v61 + 1;
            uint64_t v63 = *(unsigned __int8 *)(*(void *)this + v61);
            *((void *)this + 1) = v62;
            uint64_t v64 = v63 != 0;
          }

          *(_BYTE *)(a1 + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(void *)(a1 + 188) |= 0x400000000000uLL;
          uint64_t v65 = *((void *)this + 1);
          if (v65 >= *((void *)this + 2))
          {
            uint64_t v68 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v66 = v65 + 1;
            uint64_t v67 = *(unsigned __int8 *)(*(void *)this + v65);
            *((void *)this + 1) = v66;
            uint64_t v68 = v67 != 0;
          }

          *(_BYTE *)(a1 + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(void *)(a1 + 188) |= 0x2000uLL;
          uint64_t v69 = *((void *)this + 1);
          uint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5LL && v69 + 10 <= v70)
          {
            uint64_t v72 = 0;
            uint64_t v73 = 0;
            uint64_t v74 = 0LL;
            do
            {
              uint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              uint64_t v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_219;
              }
              v72 += 7;
              uint64_t v69 = v75;
              uint64_t v14 = v73++ > 8;
            }

            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }

          v110 = 0;
          v111 = 0;
          uint64_t v74 = 0LL;
          if (v70 <= v69) {
            uint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v112 = v69 + 1;
              v113 = *(_BYTE *)(v71 + v69);
              *((void *)this + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                uint64_t v69 = v112;
                uint64_t v14 = v111++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }

            break;
          }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 128) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_102;
        case 2u:
          *(_DWORD *)(a1 + 128) |= 0x100000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 3u:
          *(_DWORD *)(a1 + 128) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 4u:
          *(_DWORD *)(a1 + 128) |= 0x80000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 5u:
          *(_DWORD *)(a1 + 128) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 6u:
          *(_DWORD *)(a1 + 128) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 7u:
          *(_DWORD *)(a1 + 128) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 8u:
          *(_DWORD *)(a1 + 128) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 9u:
          *(_DWORD *)(a1 + 128) |= 0x800000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0xAu:
          *(_DWORD *)(a1 + 128) |= 0x20000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v22 = v21 != 0;
          }

          *(_BYTE *)(a1 + 124) = v22;
          break;
        case 0xBu:
          *(_DWORD *)(a1 + 128) |= 0x2000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v24 = v23 != 0;
          }

          *(_BYTE *)(a1 + 120) = v24;
          break;
        case 0xCu:
          *(_DWORD *)(a1 + 128) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0xDu:
          *(_DWORD *)(a1 + 128) |= 0x10000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v26 = v25 != 0;
          }

          *(_BYTE *)(a1 + 123) = v26;
          break;
        case 0xEu:
          *(_DWORD *)(a1 + 128) |= 0x40000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v28 = v27 != 0;
          }

          *(_BYTE *)(a1 + 125) = v28;
          break;
        case 0xFu:
          *(_DWORD *)(a1 + 128) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x10u:
          *(_DWORD *)(a1 + 128) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x11u:
          *(_DWORD *)(a1 + 128) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x12u:
          *(_DWORD *)(a1 + 128) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x13u:
          *(_DWORD *)(a1 + 128) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x14u:
          *(_DWORD *)(a1 + 128) |= 0x400000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x15u:
          *(_DWORD *)(a1 + 128) |= 0x80000000;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v30 = v29 != 0;
          }

          *(_BYTE *)(a1 + 126) = v30;
          break;
        case 0x16u:
          *(_DWORD *)(a1 + 128) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x17u:
          *(_DWORD *)(a1 + 128) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x18u:
          *(_DWORD *)(a1 + 128) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x19u:
          *(_DWORD *)(a1 + 128) |= 0x200000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Au:
          *(_DWORD *)(a1 + 128) |= 0x4000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v32 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v31 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v32 = v31 != 0;
          }

          *(_BYTE *)(a1 + 121) = v32;
          break;
        case 0x1Bu:
          *(_DWORD *)(a1 + 128) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Cu:
          *(_DWORD *)(a1 + 128) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_102;
        case 0x1Du:
          *(_DWORD *)(a1 + 128) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_102:
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_130;
        case 0x1Eu:
          *(_DWORD *)(a1 + 128) |= 0x1000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Fu:
          *(_DWORD *)(a1 + 128) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_113:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
LABEL_129:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_130:
            *((void *)this + 1) = v2;
          }

          break;
        case 0x20u:
          *(_DWORD *)(a1 + 128) |= 0x8000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v34 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v34 = v33 != 0;
          }

          *(_BYTE *)(a1 + 122) = v34;
          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 48) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_54;
        case 2u:
          *(_WORD *)(a1 + 48) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 3u:
          *(_WORD *)(a1 + 48) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 4u:
          *(_WORD *)(a1 + 48) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 5u:
          *(_WORD *)(a1 + 48) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 6u:
          *(_WORD *)(a1 + 48) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 7u:
          *(_WORD *)(a1 + 48) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v21 = v20 != 0;
          }

          *(_BYTE *)(a1 + 44) = v21;
          break;
        case 8u:
          *(_WORD *)(a1 + 48) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 9u:
          *(_WORD *)(a1 + 48) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_53:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_54:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      uint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v26 = *((void *)this + 1);
        if (v26 >= *((void *)this + 2))
        {
          uint64_t v29 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v27 = v26 + 1;
          uint64_t v28 = *(unsigned __int8 *)(*(void *)this + v26);
          *((void *)this + 1) = v27;
          uint64_t v29 = v28 != 0;
        }

        *(_BYTE *)(a1 + 16) = v29;
      }

      else if ((_DWORD)v20 == 1)
      {
        uint64_t v21 = operator new(0xA8uLL);
        uint64_t v24 = sub_1010F1358((uint64_t)v21);
        uint64_t v25 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v21;
        if (v25)
        {
          (*(void (**)(uint64_t, double))(*(void *)v25 + 8LL))(v25, v24);
          uint64_t v21 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v31, v22, v23)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v31);
      }

      else
      {
        double result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 24) |= 2u;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5LL || v20 + 10 > v2)
              {
                char v43 = 0;
                uint64_t v44 = 0;
                uint64_t v24 = 0LL;
                if (v2 <= v20) {
                  uint64_t v3 = *((void *)this + 1);
                }
                else {
                  uint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_81;
                  }

                  uint64_t v45 = v20++;
                  char v46 = *(_BYTE *)(v21 + v45);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_80;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_80:
                uint64_t v3 = v45 + 1;
              }

              else
              {
                uint64_t v22 = 0;
                uint64_t v23 = 0;
                uint64_t v24 = 0LL;
                do
                {
                  uint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  uint64_t v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_81;
                  }
                  v22 += 7;
                  uint64_t v20 = v3;
                  uint64_t v14 = v23++ > 8;
                }

                while (!v14);
                LODWORD(v24) = 0;
              }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 4LL;
LABEL_38:
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 64) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 64) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 64) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 64) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 64) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 8u:
          *(_BYTE *)(a1 + 64) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_46:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  PB::TextFormatter::format(this, "centripetalAccelX", *(double *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 3u:
          *(_WORD *)(a1 + 120) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 4u:
          *(_WORD *)(a1 + 120) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 5u:
          *(_WORD *)(a1 + 120) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 6u:
          *(_WORD *)(a1 + 120) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 9u:
          *(_WORD *)(a1 + 120) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xDu:
          *(_WORD *)(a1 + 120) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xEu:
          *(_WORD *)(a1 + 120) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_65:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_67:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 104), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)(a1 + 224) |= 0x40uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 2u:
              *(void *)(a1 + 224) |= 0x80uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 3u:
              *(void *)(a1 + 224) |= 0x200000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 220) = v22;
              goto LABEL_203;
            case 4u:
              *(void *)(a1 + 224) |= 2uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 5u:
              *(void *)(a1 + 224) |= 0x40000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 217) = v24;
              goto LABEL_203;
            case 6u:
              *(void *)(a1 + 224) |= 0x80000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 7u:
              *(void *)(a1 + 224) |= 0x400000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 221) = v26;
              goto LABEL_203;
            case 8u:
              *(void *)(a1 + 224) |= 1uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 9u:
              *(void *)(a1 + 224) |= 0x20000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 216) = v28;
              goto LABEL_203;
            case 0xAu:
              *(void *)(a1 + 224) |= 0x80000000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 218) = v30;
              goto LABEL_203;
            case 0xBu:
              *(void *)(a1 + 224) |= 0x8000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xCu:
              *(void *)(a1 + 224) |= 0x40000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xDu:
              *(void *)(a1 + 224) |= 0x4000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xEu:
              *(void *)(a1 + 224) |= 0x8000000uLL;
              uint64_t v31 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5LL || v31 + 10 > v2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                uint64_t v35 = 0LL;
                if (v2 <= v31) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_212;
                  }

                  uint64_t v71 = v31++;
                  uint64_t v72 = *(_BYTE *)(v32 + v71);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_211:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_212;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_211;
              }

              uint64_t v33 = 0;
              uint64_t v34 = 0;
              uint64_t v35 = 0LL;
              do
              {
                uint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                uint64_t v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_212;
                }
                v33 += 7;
                uint64_t v31 = v2;
                uint64_t v14 = v34++ > 8;
              }

              while (!v14);
              LODWORD(v35) = 0;
LABEL_212:
              *(_DWORD *)(a1 + 208) = v35;
              goto LABEL_203;
            case 0xFu:
              *(void *)(a1 + 224) |= 0x4000000uLL;
              uint64_t v37 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v2)
              {
                uint64_t v73 = 0;
                uint64_t v74 = 0;
                uint64_t v41 = 0LL;
                if (v2 <= v37) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_217;
                  }

                  uint64_t v75 = v37++;
                  uint64_t v76 = *(_BYTE *)(v38 + v75);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  uint64_t v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_216:
                    uint64_t v2 = v75 + 1;
                    goto LABEL_217;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_216;
              }

              uint64_t v39 = 0;
              __int128 v40 = 0;
              uint64_t v41 = 0LL;
              do
              {
                uint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                uint64_t v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_217;
                }
                v39 += 7;
                uint64_t v37 = v2;
                uint64_t v14 = v40++ > 8;
              }

              while (!v14);
              LODWORD(v41) = 0;
LABEL_217:
              *(_DWORD *)(a1 + 204) = v41;
              goto LABEL_203;
            case 0x10u:
              *(void *)(a1 + 224) |= 0x10000000uLL;
              char v43 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v44 = *(void *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5LL || v43 + 10 > v2)
              {
                uint64_t v77 = 0;
                uint64_t v78 = 0;
                unsigned int v47 = 0LL;
                if (v2 <= v43) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_222;
                  }

                  uint64_t v79 = v43++;
                  uint64_t v80 = *(_BYTE *)(v44 + v79);
                  *((void *)this + 1) = v43;
                  v47 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  uint64_t v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_221:
                    uint64_t v2 = v79 + 1;
                    goto LABEL_222;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v47) = 0;
                }
                goto LABEL_221;
              }

              uint64_t v45 = 0;
              char v46 = 0;
              unsigned int v47 = 0LL;
              do
              {
                uint64_t v2 = v43 + 1;
                *((void *)this + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0) {
                  goto LABEL_222;
                }
                v45 += 7;
                char v43 = v2;
                uint64_t v14 = v46++ > 8;
              }

              while (!v14);
              LODWORD(v47) = 0;
LABEL_222:
              *(_DWORD *)(a1 + 212) = v47;
              goto LABEL_203;
            case 0x11u:
              *(void *)(a1 + 224) |= 0x800000uLL;
              v49 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v50 = *(void *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5LL || v49 + 10 > v2)
              {
                uint64_t v81 = 0;
                uint64_t v82 = 0;
                char v53 = 0LL;
                if (v2 <= v49) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_227;
                  }

                  v83 = v49++;
                  uint64_t v84 = *(_BYTE *)(v50 + v83);
                  *((void *)this + 1) = v49;
                  v53 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  uint64_t v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_226:
                    uint64_t v2 = v83 + 1;
                    goto LABEL_227;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v53) = 0;
                }
                goto LABEL_226;
              }

              unsigned int v51 = 0;
              uint8_t v52 = 0;
              char v53 = 0LL;
              do
              {
                uint64_t v2 = v49 + 1;
                *((void *)this + 1) = v49 + 1;
                uint64_t v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_227;
                }
                v51 += 7;
                v49 = v2;
                uint64_t v14 = v52++ > 8;
              }

              while (!v14);
              LODWORD(v53) = 0;
LABEL_227:
              *(_DWORD *)(a1 + 192) = v53;
              goto LABEL_203;
            case 0x12u:
              *(void *)(a1 + 224) |= 0x1000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x13u:
              *(void *)(a1 + 224) |= 0x2000000uLL;
              uint64_t v55 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v56 = *(void *)this;
              if (v55 > 0xFFFFFFFFFFFFFFF5LL || v55 + 10 > v2)
              {
                uint64_t v85 = 0;
                uint64_t v86 = 0;
                unint64_t v59 = 0LL;
                if (v2 <= v55) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v55)
                  {
                    LODWORD(v59) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_232;
                  }

                  uint64_t v87 = v55++;
                  v88 = *(_BYTE *)(v56 + v87);
                  *((void *)this + 1) = v55;
                  v59 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0) {
                    break;
                  }
                  v85 += 7;
                  uint64_t v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v59) = 0;
LABEL_231:
                    uint64_t v2 = v87 + 1;
                    goto LABEL_232;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v59) = 0;
                }
                goto LABEL_231;
              }

              uint64_t v57 = 0;
              uint64_t v58 = 0;
              unint64_t v59 = 0LL;
              do
              {
                uint64_t v2 = v55 + 1;
                *((void *)this + 1) = v55 + 1;
                uint64_t v60 = *(_BYTE *)(v56 + v55);
                v59 |= (unint64_t)(v60 & 0x7F) << v57;
                if ((v60 & 0x80) == 0) {
                  goto LABEL_232;
                }
                v57 += 7;
                uint64_t v55 = v2;
                uint64_t v14 = v58++ > 8;
              }

              while (!v14);
              LODWORD(v59) = 0;
LABEL_232:
              *(_DWORD *)(a1 + 200) = v59;
              goto LABEL_203;
            case 0x14u:
              *(void *)(a1 + 224) |= 0x1000000uLL;
              __int128 v61 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              char v62 = *(void *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5LL || v61 + 10 > v2)
              {
                uint64_t v89 = 0;
                uint64_t v90 = 0;
                uint64_t v65 = 0LL;
                if (v2 <= v61) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v61)
                  {
                    LODWORD(v65) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_237;
                  }

                  uint64_t v91 = v61++;
                  v92 = *(_BYTE *)(v62 + v91);
                  *((void *)this + 1) = v61;
                  v65 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0) {
                    break;
                  }
                  v89 += 7;
                  uint64_t v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v65) = 0;
LABEL_236:
                    uint64_t v2 = v91 + 1;
                    goto LABEL_237;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v65) = 0;
                }
                goto LABEL_236;
              }

              uint64_t v63 = 0;
              uint64_t v64 = 0;
              uint64_t v65 = 0LL;
              do
              {
                uint64_t v2 = v61 + 1;
                *((void *)this + 1) = v61 + 1;
                unint64_t v66 = *(_BYTE *)(v62 + v61);
                v65 |= (unint64_t)(v66 & 0x7F) << v63;
                if ((v66 & 0x80) == 0) {
                  goto LABEL_237;
                }
                v63 += 7;
                __int128 v61 = v2;
                uint64_t v14 = v64++ > 8;
              }

              while (!v14);
              LODWORD(v65) = 0;
LABEL_237:
              *(_DWORD *)(a1 + 196) = v65;
LABEL_203:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x15u:
              *(void *)(a1 + 224) |= 8uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x16u:
              *(void *)(a1 + 224) |= 4uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x17u:
              *(void *)(a1 + 224) |= 0x10uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x18u:
              *(void *)(a1 + 224) |= (unint64_t)&_mh_execute_header;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v68 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v67 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v68 = v67 != 0;
              }

              *(_BYTE *)(a1 + 219) = v68;
              goto LABEL_203;
            case 0x19u:
              *(void *)(a1 + 224) |= 0x100uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Au:
              *(void *)(a1 + 224) |= 0x800uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Bu:
              *(void *)(a1 + 224) |= 0x10000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Cu:
              *(void *)(a1 + 224) |= 0x20000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Du:
              *(void *)(a1 + 224) |= 0x20uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Eu:
              *(void *)(a1 + 224) |= 0x400000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Fu:
              *(void *)(a1 + 224) |= 0x2000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x20u:
              *(void *)(a1 + 224) |= 0x100000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x21u:
              *(void *)(a1 + 224) |= 0x200uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x22u:
              *(void *)(a1 + 224) |= 0x200000uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x23u:
              *(void *)(a1 + 224) |= 0x400uLL;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
LABEL_202:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_146:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_203;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_203;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 124) = v22;
              goto LABEL_162;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              uint64_t v23 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5LL || v23 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                uint64_t v27 = 0LL;
                if (v2 <= v23) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }

                  unint64_t v59 = v23++;
                  uint64_t v60 = *(_BYTE *)(v24 + v59);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_145:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_146;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_145;
              }

              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                uint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                uint64_t v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v25 += 7;
                uint64_t v23 = v2;
                uint64_t v14 = v26++ > 8;
              }

              while (!v14);
              LODWORD(v27) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 108) = v27;
              goto LABEL_162;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              uint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                __int128 v61 = 0;
                char v62 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }

                  uint64_t v63 = v29++;
                  uint64_t v64 = *(_BYTE *)(v30 + v63);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_150:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_151;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_150;
              }

              uint64_t v31 = 0;
              uint64_t v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v31 += 7;
                uint64_t v29 = v2;
                uint64_t v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 104) = v33;
              goto LABEL_162;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v36 = v35 != 0;
              }

              *(_BYTE *)(a1 + 123) = v36;
              goto LABEL_162;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_141:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_162;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                unint64_t v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                unint64_t v38 = v37 != 0;
              }

              *(_BYTE *)(a1 + 125) = v38;
              goto LABEL_162;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                __int128 v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                __int128 v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 121) = v40;
              goto LABEL_162;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }

                  uint64_t v67 = v41++;
                  uint64_t v68 = *(_BYTE *)(v42 + v67);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_155:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_156;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_155;
              }

              char v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 116) = v45;
              goto LABEL_162;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v48 = v47 != 0;
              }

              *(_BYTE *)(a1 + 120) = v48;
              goto LABEL_162;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v50 = v49 != 0;
              }

              *(_BYTE *)(a1 + 122) = v50;
              goto LABEL_162;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              unsigned int v51 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint8_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5LL || v51 + 10 > v2)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                uint64_t v55 = 0LL;
                if (v2 <= v51) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }

                  uint64_t v71 = v51++;
                  uint64_t v72 = *(_BYTE *)(v52 + v71);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_160:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_161;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_160;
              }

              char v53 = 0;
              uint64_t v54 = 0;
              uint64_t v55 = 0LL;
              do
              {
                uint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                uint64_t v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v53 += 7;
                unsigned int v51 = v2;
                uint64_t v14 = v54++ > 8;
              }

              while (!v14);
              LODWORD(v55) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 112) = v55;
LABEL_162:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_162;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_40:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 188) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 188) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 188) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 188) |= 0x8000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v22 = v21 != 0;
              }

              *(_BYTE *)(a1 + 184) = v22;
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 188) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 6u:
              *(_DWORD *)(a1 + 188) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 7u:
              *(_DWORD *)(a1 + 188) |= 0x2000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v24 = v23 != 0;
              }

              *(_BYTE *)(a1 + 182) = v24;
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 188) |= 0x4000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v26 = v25 != 0;
              }

              *(_BYTE *)(a1 + 183) = v26;
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 188) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xAu:
              *(_DWORD *)(a1 + 188) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 188) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 188) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 188) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xEu:
              *(_DWORD *)(a1 + 188) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 188) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x10u:
              *(_DWORD *)(a1 + 188) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 188) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 188) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x13u:
              *(_DWORD *)(a1 + 188) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x14u:
              *(_DWORD *)(a1 + 188) |= 0x400000u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                v49 = 0;
                uint64_t v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }

                  unsigned int v51 = v27++;
                  uint8_t v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_156:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_157;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_156;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 176) = v31;
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 188) |= 0x100000u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                char v53 = 0;
                uint64_t v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_162;
                  }

                  uint64_t v55 = v33++;
                  uint64_t v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  uint64_t v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_161:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_162;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_161;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                unint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 168) = v37;
              goto LABEL_148;
            case 0x16u:
              *(_DWORD *)(a1 + 188) |= 0x200000u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              __int128 v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                uint64_t v58 = 0;
                char v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_167;
                  }

                  unint64_t v59 = v39++;
                  uint64_t v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_166:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_167;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_166;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              char v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                uint64_t v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_167;
                }
                v41 += 7;
                uint64_t v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 172) = v43;
LABEL_148:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 188) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v46 = v45 != 0;
              }

              *(_BYTE *)(a1 + 180) = v46;
              goto LABEL_148;
            case 0x18u:
              *(_DWORD *)(a1 + 188) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x19u:
              *(_DWORD *)(a1 + 188) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x1Au:
              *(_DWORD *)(a1 + 188) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x1Bu:
              *(_DWORD *)(a1 + 188) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
LABEL_147:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_148;
            case 0x1Cu:
              *(_DWORD *)(a1 + 188) |= 0x1000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v48 = v47 != 0;
              }

              *(_BYTE *)(a1 + 181) = v48;
              goto LABEL_148;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_148;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              uint64_t v21 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
              {
                uint64_t v29 = 0;
                uint64_t v30 = 0;
                uint64_t v25 = 0LL;
                if (v2 <= v21) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v31 = v21++;
                  uint64_t v32 = *(_BYTE *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  uint64_t v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    uint64_t v2 = v31 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0LL;
              do
              {
                uint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                uint64_t v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                uint64_t v21 = v2;
                uint64_t v14 = v24++ > 8;
              }

              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 128) = v25;
LABEL_94:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 132) = v28;
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_88:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_94;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_94;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_37:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }

          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

      if ((v11 & 7) == 4)
      {
        uint64_t v4 = 0;
        return v4 == 0;
      }

      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 0x40000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 2u:
          *(_DWORD *)(a1 + 212) |= 0x4000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 3u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 4u:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 5u:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 6u:
          *(_DWORD *)(a1 + 212) |= 2u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x1000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x100000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xCu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xEu:
          *(_DWORD *)(a1 + 212) |= 0x20u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 8u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x10u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x12u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x13u:
          *(_DWORD *)(a1 + 212) |= 0x100u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x14u:
          *(_DWORD *)(a1 + 212) |= 0x10000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x15u:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 4u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 1u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2))
          {
LABEL_100:
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
LABEL_104:
            uint64_t v2 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v2;
          }

          break;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          uint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            uint64_t v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            uint64_t v21 = v20 != 0;
          }

          *(_BYTE *)(a1 + 208) = v21;
          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v2 = *((void *)this + 1);
          break;
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      char v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  uint64_t v21 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)uint64_t v42 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    uint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
    uint64_t v35 = 134349056;
    *(void *)uint64_t v36 = v26;
    LODWORD(v34) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu",  &v35,  v34);
    uint64_t v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

void sub_100064454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100064470(void *a1)
{
  uint64_t v2 = a1[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[5];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[6];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

void sub_100064520(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A4C8;
  sub_100064470(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100064550(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A4C8;
  sub_100064470(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100064584()
{
  double result = operator new(0x48uLL);
  *double result = off_10181A4C8;
  result[1] = 0LL;
  result[2] = 5LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[7] = 0LL;
  result[4] = 0LL;
  result[5] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 16) = 0;
  return result;
}

uint64_t sub_1000645C4(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 64);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 5LL;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 56) = 0;
    *(void *)(result + 32) = 0LL;
    if ((*(_BYTE *)(result + 64) & 0x40) != 0)
    {
      uint64_t v3 = *(void *)(result + 40);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 64) & 0x80) != 0)
    {
      uint64_t v4 = *(void *)(result + 48);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_100064684( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 32);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v28);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v28[0];
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 64) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }

        char v17 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_36;
        }

        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_26;
        }
LABEL_36:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v28) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v28;
        *(_DWORD *)(a1 + 64) |= 2u;
        uint64_t v18 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v18 + 1;
LABEL_40:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v28) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v28[0];
          int v11 = *(_DWORD *)(a1 + 64) | 4;
          *(_DWORD *)(a1 + 64) = v11;
          uint64_t v19 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v19 < *((void *)this + 2) && *v19 == 34)
          {
            *((void *)this + 1) = v19 + 1;
LABEL_44:
            *(_DWORD *)(a1 + 64) = v11 | 8;
            uint64_t v20 = *(void **)(a1 + 24);
            if (v20 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              uint64_t v20 = operator new(0x18uLL);
              v20[1] = 0LL;
              v20[2] = 0LL;
              *uint64_t v20 = 0LL;
              *(void *)(a1 + 24) = v20;
            }

            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v20);
            if (!(_DWORD)result) {
              return result;
            }
            uint64_t v21 = (_BYTE *)*((void *)this + 1);
            unint64_t v12 = *((void *)this + 2);
            if ((unint64_t)v21 < v12 && *v21 == 40)
            {
              uint64_t v13 = v21 + 1;
              *((void *)this + 1) = v13;
LABEL_50:
              if ((unint64_t)v13 >= v12 || *v13 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v28);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v22 = v28[0];
                uint64_t v23 = (_BYTE *)*((void *)this + 1);
                unint64_t v12 = *((void *)this + 2);
              }

              else
              {
                unsigned int v22 = *v13;
                uint64_t v23 = v13 + 1;
                *((void *)this + 1) = v23;
              }

              *(_DWORD *)(a1 + 56) = v22;
              *(_DWORD *)(a1 + 64) |= 0x10u;
              if ((unint64_t)v23 < v12 && *v23 == 48)
              {
                uint64_t v14 = v23 + 1;
                *((void *)this + 1) = v14;
LABEL_58:
                if ((unint64_t)v14 >= v12 || *v14 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  uint64_t v24 = (_BYTE *)*((void *)this + 1);
                  unint64_t v12 = *((void *)this + 2);
                }

                else
                {
                  unint64_t *v5 = *v14;
                  uint64_t v24 = v14 + 1;
                  *((void *)this + 1) = v24;
                }

                int v15 = *(_DWORD *)(a1 + 64) | 0x20;
                *(_DWORD *)(a1 + 64) = v15;
                if ((unint64_t)v24 < v12 && *v24 == 58)
                {
                  *((void *)this + 1) = v24 + 1;
LABEL_66:
                  *(_DWORD *)(a1 + 64) = v15 | 0x40;
                  uint64_t v25 = *(void **)(a1 + 40);
                  if (v25 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
                  {
                    uint64_t v25 = operator new(0x18uLL);
                    v25[1] = 0LL;
                    void v25[2] = 0LL;
                    void *v25 = 0LL;
                    *(void *)(a1 + 40) = v25;
                  }

                  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v25);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  uint64_t v26 = (_BYTE *)*((void *)this + 1);
                  if ((unint64_t)v26 < *((void *)this + 2) && *v26 == 66)
                  {
                    *((void *)this + 1) = v26 + 1;
LABEL_72:
                    *(_DWORD *)(a1 + 64) |= 0x80u;
                    uint64_t v27 = *(void **)(a1 + 48);
                    if (v27 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
                    {
                      uint64_t v27 = operator new(0x18uLL);
                      v27[1] = 0LL;
                      v27[2] = 0LL;
                      *uint64_t v27 = 0LL;
                      *(void *)(a1 + 48) = v27;
                    }

                    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v27);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    if (*((void *)this + 1) == *((void *)this + 2)
                      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      uint64_t result = 1LL;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_40;
        }
        goto LABEL_26;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v11 = *(_DWORD *)(a1 + 64);
        goto LABEL_44;
      case 5u:
        int v8 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_50;
      case 6u:
        int v8 = TagFallback & 7;
        uint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_58;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v15 = *(_DWORD *)(a1 + 64);
        goto LABEL_66;
      case 8u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        goto LABEL_72;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100064AB8( uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 20),  a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }
  return result;
}

  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A0818 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 28),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 28),  a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 40),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 14),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A09E0 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(v5 + 32);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A09E0 + 32);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
  }

  return result;
}

          char v17 = sub_10009263C(v9, a2);
          if ((v18 & 1) == 0) {
            goto LABEL_15;
          }
          uint64_t v19 = sub_1000926F0(v9, v17);
          uint64_t v9 = v17 + 1;
          uint64_t result = (unint64_t *)sub_1000926F0(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            unsigned int v10 = v11 + 1;
            if (v19) {
              continue;
            }
LABEL_15:
            uint64_t result = (unint64_t *)sub_100092094(v8, v17, a3, -v11, a5 & 1);
            uint64_t v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v17;
          if (v19) {
            return result;
          }
          goto LABEL_2;
        }

        __int128 v61 = v9 + 1;
        uint64_t v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            uint64_t v64 = 0LL;
            uint64_t v65 = v9;
            do
            {
              uint64_t v67 = *v65;
              unint64_t v66 = v65[1];
              uint64_t v65 = v61;
              if (v66 > v67)
              {
                uint64_t v68 = v64;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v68 + 8) = v67;
                  if (!v68) {
                    break;
                  }
                  uint64_t v67 = *(unint64_t *)((char *)v9 + v68 - 8);
                  v68 -= 8LL;
                  if (v66 <= v67)
                  {
                    uint64_t v69 = (unint64_t *)((char *)v9 + v68 + 8);
                    goto LABEL_123;
                  }
                }

                uint64_t v69 = v9;
LABEL_123:
                *uint64_t v69 = v66;
              }

              __int128 v61 = v65 + 1;
              v64 += 8LL;
            }

            while (v65 + 1 != a2);
          }
        }

        else if (!v63)
        {
          do
          {
            uint64_t v71 = *v8;
            uint64_t v70 = v8[1];
            int v8 = v61;
            if (v70 > v71)
            {
              do
              {
                *__int128 v61 = v71;
                uint64_t v71 = *(v61 - 2);
                --v61;
              }

              while (v70 > v71);
              *__int128 v61 = v70;
            }

            __int128 v61 = v8 + 1;
          }

          while (v8 + 1 != a2);
        }

        return result;
    }
  }

          char v17 = sub_100093104(v9, a2);
          if ((v18 & 1) == 0) {
            goto LABEL_15;
          }
          uint64_t v19 = sub_1000931B8(v9, v17);
          uint64_t v9 = v17 + 1;
          uint64_t result = sub_1000931B8(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            unsigned int v10 = v11 + 1;
            if (v19) {
              continue;
            }
LABEL_15:
            uint64_t result = sub_100092C34(v8, v17, a3, -v11, a5 & 1);
            uint64_t v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v17;
          if (v19) {
            return result;
          }
          goto LABEL_2;
        }

        unsigned int v22 = v9 + 1;
        uint64_t v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            uint64_t v25 = 0LL;
            uint64_t v26 = v9;
            do
            {
              uint64_t v28 = *v26;
              uint64_t v27 = v26[1];
              uint64_t v26 = v22;
              if (v27 < v28)
              {
                uint64_t v29 = v25;
                while (1)
                {
                  *(int *)((char *)v9 + v29 + 4) = v28;
                  if (!v29) {
                    break;
                  }
                  uint64_t v28 = *(int *)((char *)v9 + v29 - 4);
                  v29 -= 4LL;
                  if (v27 >= v28)
                  {
                    uint64_t v30 = (int *)((char *)v9 + v29 + 4);
                    goto LABEL_42;
                  }
                }

                uint64_t v30 = v9;
LABEL_42:
                *uint64_t v30 = v27;
              }

              unsigned int v22 = v26 + 1;
              v25 += 4LL;
            }

            while (v26 + 1 != a2);
          }
        }

        else if (!v24)
        {
          do
          {
            uint64_t v32 = *v8;
            uint64_t v31 = v8[1];
            int v8 = v22;
            if (v31 < v32)
            {
              do
              {
                void *v22 = v32;
                uint64_t v32 = *(v22 - 2);
                --v22;
              }

              while (v31 < v32);
              void *v22 = v31;
            }

            unsigned int v22 = v8 + 1;
          }

          while (v8 + 1 != a2);
        }

        return result;
    }
  }

      char v17 = 0;
LABEL_13:
      if (v10 == v11) {
        uint64_t v18 = a3 ^ 1;
      }
      else {
        uint64_t v18 = 1;
      }
      if ((v18 & 1) != 0 || v17)
      {
        if (*((char *)v9 + 23) < 0)
        {
          sub_1010DD48C(__dst, *(void **)v9, *((void *)v9 + 1));
        }

        else
        {
          uint64_t v19 = *(_OWORD *)v9;
          uint64_t v27 = *((void *)v9 + 2);
          *(_OWORD *)__dst = v19;
        }

        else {
          uint64_t v28 = v29;
        }
        if (SHIBYTE(v27) < 0)
        {
          sub_1010DD48C(v22, __dst[0], (unint64_t)__dst[1]);
        }

        else
        {
          *(_OWORD *)unsigned int v22 = *(_OWORD *)__dst;
          uint64_t v23 = v27;
        }

        else {
          std::string __p = v28;
        }
        uint64_t v25 = *((void *)v9 + 3);
        sub_1000A5728(a4, (__int128 *)v22);
        if (SHIBYTE(v23) < 0) {
          operator delete(v22[0]);
        }
        if (SHIBYTE(v27) < 0) {
          operator delete(__dst[0]);
        }
      }

      uint64_t v21 = v9 + 28;
      v9 += 44;
    }

    while (v21 != v8);
  }

  v22[0] = &v30;
  sub_1000AA544((void ***)v22);
  v22[0] = &v32;
  sub_1000129D4((void ***)v22);
}

          char v17 = sub_1000EE420(v9, a2, a3);
          if ((v18 & 1) == 0) {
            goto LABEL_15;
          }
          uint64_t v19 = sub_1000EE538(v9, v17, (unsigned int (**)(void))a3);
          uint64_t v9 = v17 + 1;
          uint64_t result = sub_1000EE538(v17 + 1, a2, (unsigned int (**)(void))a3);
          if (!(_DWORD)result)
          {
            unsigned int v10 = v11 + 1;
            if (v19) {
              continue;
            }
LABEL_15:
            uint64_t result = sub_1000EDD94(v8, v17, a3, -v11, a5 & 1);
            uint64_t v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v17;
          if (v19) {
            return result;
          }
          goto LABEL_2;
        }

        if (v9 != a2) {
          return (uint64_t)sub_1000EE864((char *)v9, (char *)a2, a2, a3);
        }
        return result;
    }
  }

  int v11 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v12 = (char *)operator new(0x28uLL);
    *(void *)(v12 + 29) = 0LL;
    *(_OWORD *)unint64_t v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    sub_10000AE6C((uint64_t)(a1 + 1), v12);
    uint64_t v13 = (char *)operator new(0x28uLL);
    *(void *)(v13 + 29) = 0LL;
    *(_OWORD *)uint64_t v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    sub_10000AE6C((uint64_t)a2, v13);
    uint64_t v14 = *((unsigned __int8 *)a1 + 368);
    if (*((_BYTE *)a1 + 368))
    {
      int v15 = (char *)operator new(0x28uLL);
      *(void *)(v15 + 29) = 0LL;
      *(_OWORD *)int v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      sub_10000AE6C((uint64_t)(a1 + 44), v15);
    }

    else
    {
      int v15 = "None";
    }

    uint64_t v19 = *((_DWORD *)a1 + 22);
    uint64_t v20 = *((unsigned __int8 *)a1 + 457);
    if (*((_BYTE *)a1 + 457)) {
      uint64_t v20 = *((unsigned __int8 *)a1 + 456);
    }
    uint64_t v21 = *((unsigned __int8 *)a1 + 296);
    *(void *)uint64_t v25 = 68291330LL;
    *(_WORD *)&v25[8] = 2082;
    *(void *)&v25[10] = "";
    uint64_t v26 = 2082;
    uint64_t v27 = v12;
    uint64_t v28 = 2082;
    uint64_t v29 = v13;
    uint64_t v30 = 2082;
    uint64_t v31 = v15;
    uint64_t v32 = 1026;
    uint64_t v33 = v19;
    uint64_t v34 = 1026;
    uint64_t v35 = v8;
    uint64_t v36 = 1026;
    uint64_t v37 = a4;
    unint64_t v38 = 1026;
    uint64_t v39 = v20;
    __int128 v40 = 1026;
    uint64_t v41 = v21;
    uint64_t v42 = 1026;
    char v43 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoService received prediction request: , ServiceId:%{public, location:escape_only }s, RequestId:%{public, location:escape_only}s, LocalizationId:%{public, location:escape_only}s, State :%{public}u, force verdict:%{public}hhd, isForcedRequest:%{public}hhd, Is low latency:%{public}hhd,  Has valid cache:%{public}hhd, Success:%{public}hhd}",  v25,  0x54u);
    if (v14) {
      operator delete(v15);
    }
    operator delete(v13);
    operator delete(v12);
  }

  return v10;
}

  sub_1001014F0(*(uint64_t ***)(v7 + 16), buf);
  if (buf[16])
  {
    sub_100139138((uint64_t)&v16, buf);
  }

  else
  {
    unint64_t v12 = *(void *)(a1 + 24);
    if (!v12) {
      unint64_t v12 = *(void *)(qword_1019A0828 + 24);
    }
    sub_10013C0B0((uint64_t)&v16, &v16, *(std::string **)(v12 + 16));
  }

  unint64_t *v5 = *(_OWORD *)(a2 + 40);
  uint64_t v9 = *(unsigned int *)(a2 + 16);
  if ((int)v9 < 1)
  {
    unint64_t v12 = *(int *)(a2 + 80);
    if ((_DWORD)v12)
    {
      uint64_t v13 = *(uint64_t **)(a2 + 72);
      uint64_t v14 = 8 * v12;
      do
      {
        sub_10013917C(*v13, (uint64_t)&buf);
        sub_10013C368(a1, (uint64_t)&buf, &buf);
        sub_10001AAD4((uint64_t)v20);
        ++v13;
        v14 -= 8LL;
      }

      while (v14);
    }
  }

  else
  {
    unsigned int v10 = *(uint64_t **)(a2 + 8);
    int v11 = 8 * v9;
    do
    {
      sub_100138EA4(*v10, (uint64_t)&buf);
      sub_10013C368(a1, (uint64_t)&buf, &buf);
      sub_10001AAD4((uint64_t)v20);
      ++v10;
      v11 -= 8LL;
    }

    while (v11);
  }

  for (uint64_t i = (void *)(a1 + 16); ; sub_100139794(a1, i + 2))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }

  if (*(_BYTE *)(a2 + 96)) {
    *v4 |= 0x20uLL;
  }
  if (*(_BYTE *)(a2 + 97)) {
    *v4 |= 0x40uLL;
  }
  return a1;
}

          char v17 = sub_10013CBA0(v9, a2);
          if ((v18 & 1) == 0) {
            goto LABEL_15;
          }
          uint64_t v19 = sub_10013CC54(v9, v17);
          uint64_t v9 = v17 + 1;
          uint64_t result = (float *)sub_10013CC54(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            unsigned int v10 = v11 + 1;
            if (v19) {
              continue;
            }
LABEL_15:
            uint64_t result = (float *)sub_10013C5F8(v8, v17, a3, -v11, a5 & 1);
            uint64_t v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v17;
          if (v19) {
            return result;
          }
          goto LABEL_2;
        }

        __int128 v61 = v9 + 1;
        uint64_t v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            uint64_t v64 = 0LL;
            uint64_t v65 = v9;
            do
            {
              uint64_t v67 = *v65;
              unint64_t v66 = v65[1];
              uint64_t v65 = v61;
              if (v66 > v67)
              {
                uint64_t v68 = v64;
                while (1)
                {
                  *(float *)((char *)v9 + v68 + 4) = v67;
                  if (!v68) {
                    break;
                  }
                  uint64_t v67 = *(float *)((char *)v9 + v68 - 4);
                  v68 -= 4LL;
                  if (v66 <= v67)
                  {
                    uint64_t v69 = (float *)((char *)v9 + v68 + 4);
                    goto LABEL_117;
                  }
                }

                uint64_t v69 = v9;
LABEL_117:
                *uint64_t v69 = v66;
              }

              __int128 v61 = v65 + 1;
              v64 += 4LL;
            }

            while (v65 + 1 != a2);
          }
        }

        else if (!v63)
        {
          do
          {
            uint64_t v71 = *v8;
            uint64_t v70 = v8[1];
            int v8 = v61;
            if (v70 > v71)
            {
              uint64_t v72 = v61;
              do
              {
                *uint64_t v72 = v71;
                uint64_t v71 = *(v72 - 2);
                --v72;
              }

              while (v70 > v71);
              *uint64_t v72 = v70;
            }

            ++v61;
          }

          while (v8 + 1 != a2);
        }

        return result;
    }
  }

          char v17 = sub_10014F870(v9, a2);
          if ((v18 & 1) == 0) {
            goto LABEL_15;
          }
          uint64_t v19 = sub_10014F92C(v9, v17);
          uint64_t v9 = v17 + 1;
          uint64_t result = sub_10014F92C(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            unsigned int v10 = v11 + 1;
            if (v19) {
              continue;
            }
LABEL_15:
            uint64_t result = sub_10014F398(v8, v17, a3, -v11, a5 & 1);
            uint64_t v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v17;
          if (v19) {
            return result;
          }
          goto LABEL_2;
        }

        unsigned int v22 = v9 + 1;
        uint64_t v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            uint64_t v25 = 0LL;
            uint64_t v26 = v9;
            do
            {
              uint64_t v28 = *v26;
              uint64_t v27 = v26[1];
              uint64_t v26 = v22;
              if (v28 < v27)
              {
                uint64_t v29 = v25;
                while (1)
                {
                  *(double *)((char *)v9 + v29 + 8) = v28;
                  if (!v29) {
                    break;
                  }
                  uint64_t v28 = *(double *)((char *)v9 + v29 - 8);
                  v29 -= 8LL;
                  if (v28 >= v27)
                  {
                    uint64_t v30 = (double *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }

                uint64_t v30 = v9;
LABEL_42:
                *uint64_t v30 = v27;
              }

              unsigned int v22 = v26 + 1;
              v25 += 8LL;
            }

            while (v26 + 1 != a2);
          }
        }

        else if (!v24)
        {
          do
          {
            uint64_t v32 = *v8;
            uint64_t v31 = v8[1];
            int v8 = v22;
            if (v32 < v31)
            {
              uint64_t v33 = v22;
              do
              {
                *uint64_t v33 = v32;
                uint64_t v32 = *(v33 - 2);
                --v33;
              }

              while (v32 < v31);
              *uint64_t v33 = v31;
            }

            ++v22;
          }

          while (v8 + 1 != a2);
        }

        return result;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

    uint64_t v9 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = *(_BYTE *)(a2 + 25);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_BYTE *)(a1 + 25) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 18),  a2,  a4);
  if ((*(_DWORD *)(v5 + 32) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 24),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  if ((*(_DWORD *)(v5 + 68) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
LABEL_6:
  if (*(int *)(v5 + 48) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(*(void *)(v5 + 40) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 48));
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  *(float *)&uint64_t v4 = self->_verticalSpeed;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  @"verticalSpeed");
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 8) == 0) {
      return v3;
    }
    goto LABEL_17;
  }

  PBDataWriterWriteBOOLField(a3, self->_isVehicular, 6LL);
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  *((_BYTE *)a3 + 41) = self->_isVehicular;
  *((_BYTE *)a3 + 44) |= 0x40u;
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  *((_DWORD *)result + 8) = self->_turn;
  *((_BYTE *)result + 44) |= 0x10u;
  has = (char)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  self->_isVehicular = *((_BYTE *)a3 + 41);
  *(_BYTE *)&self->_has |= 0x40u;
  uint64_t v3 = *((_BYTE *)a3 + 44);
  if ((v3 & 0x20) == 0)
  {
LABEL_6:
    if ((v3 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  uint64_t v7 = 0LL;
  if (v5) {
LABEL_13:
  }
    free(v5);
  return v7;
}

  int v6 = 0LL;
  if ((*(_BYTE *)&self->_has & 4) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v7 = 2654435761u * self->_securityKey;
  if ((*(_BYTE *)&self->_has & 1) == 0) {
    goto LABEL_14;
  }
LABEL_6:
  generationTimeSecs = self->_generationTimeSecs;
  uint64_t v9 = -generationTimeSecs;
  if (generationTimeSecs >= 0.0) {
    uint64_t v9 = self->_generationTimeSecs;
  }
  unsigned int v10 = floor(v9 + 0.5);
  int v11 = (v9 - v10) * 1.84467441e19;
  unint64_t v12 = 2654435761u * (unint64_t)fmod(v10, 1.84467441e19);
  if (v11 >= 0.0)
  {
    if (v11 > 0.0) {
      v12 += (unint64_t)v11;
    }
  }

  else
  {
    v12 -= (unint64_t)fabs(v11);
  }

  *(void *)((char *)v13
  uint64_t v14 = v11;
  std::streambuf::~streambuf(&v15);
  std::ios::~ios(v16);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

  Current = CFAbsoluteTimeGetCurrent();
  sub_100F7CF98(*(void *)(a1 + 672), a2);
  sub_1004BD370(a2, Current, a1, (uint64_t **)(a1 + 168));
  sub_1004BD5D4(a2, Current, a1, (uint64_t **)(a1 + 208));
  sub_1004BD838(a2, Current, a1, (uint64_t **)(a1 + 248));
  sub_1004BDAA8(a2, Current, a1, (uint64_t **)(a1 + 288));
  sub_1004BDD0C(a2, Current, a1, (uint64_t **)(a1 + 328));
  sub_1004BDF70(a2, Current, a1, (uint64_t **)(a1 + 416));
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(v4 + 40),  a3);
  if ((*(_DWORD *)(v4 + 60) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(double *)(v4 + 48),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(v5 + 40),  (unint64_t)a2,  a4);
  }
  return result;
}

    uint64_t result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t result = *(float *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 24) = result;
  }

  return result;
}

    int v8 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(void *)(a1 + 24) = v8;
    uint64_t v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
LABEL_14:
      unsigned int v10 = *(_DWORD *)(a2 + 40);
      if (v10 >= 2) {
        sub_10123C360();
      }
      *(_DWORD *)(a1 + 48) |= 0x10u;
      *(_DWORD *)(a1 + 40) = v10;
      return;
    }

  (*(void (**)(void *))(*a1 + 24LL))(a1);
  return v7;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 22),  a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 23),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  int v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  a2,  a4);
  if ((v5[9] & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  (int)a2,  a4);
  }
  return result;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  if ((v5[9] & 0x20) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  a2,  a4);
  if ((v5[9] & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  a2,  a4);
  int v6 = v5[10];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

    uint64_t v9 = *(_DWORD *)(a2 + 16);
    a1[7] |= 4u;
    a1[4] = v9;
    if ((*(_DWORD *)(a2 + 28) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = *(_DWORD *)(a2 + 20);
    a1[7] |= 8u;
    a1[5] = v6;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  if ((v5[9] & 0x20) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  }
  return result;
}

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1358 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
  {
LABEL_15:
    unsigned int v10 = *(void *)(v5 + 32);
    if (!v10) {
      unsigned int v10 = *(void *)(qword_1019A1358 + 32);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  }

  return result;
}

  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1368 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(*(void *)(v5 + 24) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 32));
  }

  return result;
}

    uint64_t v9 = *(_DWORD *)(a2 + 16);
    a1[7] |= 4u;
    a1[4] = v9;
    if ((*(_DWORD *)(a2 + 28) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = *(_DWORD *)(a2 + 20);
    a1[7] |= 8u;
    a1[5] = v6;
  }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A13E8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(v5 + 32);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A13E8 + 32);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v9,  a2,  a4);
  }

  return result;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  int v6 = v5[10];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }
  return result;
}

  uint64_t v9 = v6;
  unsigned int v10 = a2[v9];
  int v11 = a1[v9];
  unint64_t v12 = (a2[v7] - v10) / (a1[v7] - v11);
  uint64_t result = v10 - v12 * v11 + a3 * v12;
  if (result <= a4) {
    uint64_t result = a4;
  }
  if (result >= a5) {
    return a5;
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  }
  return result;
}

    unint64_t v12 = *result;
    *((_BYTE *)v6 + 8) = *((_BYTE *)result + 8);
    char *v6 = v12;
  }

  while (v3 <= v5);
  return result;
}

      int v6 = -1;
LABEL_13:
      unsigned int v10 = *(int *)(a3 + 40);
      if (v10 <= 5)
      {
        int v11 = *(_DWORD *)&v8[4 * v10];
        return v6 < v11;
      }

      int v6 = -1;
LABEL_13:
      unsigned int v10 = *(int *)(a3 + 120);
      if (v10 <= 5)
      {
        int v11 = *(_DWORD *)&v8[4 * v10];
        return v6 < v11;
      }

        CFRelease(v8);
      }
    }
  }

  return sub_1002A5590(v29);
}

  _Block_object_dispose(v30, 8);
}

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 16) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = a2[11];
    *(_DWORD *)(a1 + 16) |= 8u;
    *(_BYTE *)(a1 + 11) = v6;
  }

    uint64_t v9 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = *(_BYTE *)(a2 + 25);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_BYTE *)(a1 + 25) = v6;
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }

  return result;
}

  int v8 = *(void *)(v5 + 16);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1B28 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
}
}
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 32), a2);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_verticalAccuracy),  @"verticalAccuracy");
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PBDataWriterWriteInt32Field(a3, self->_confidence, 7LL);
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  *((_DWORD *)a3 + 8) = self->_confidence;
  *((_BYTE *)a3 + 56) |= 2u;
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  *((_DWORD *)result + 13) = self->_verticalAccuracy;
  *((_BYTE *)result + 56) |= 0x40u;
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  self->_confidence = *((_DWORD *)a3 + 8);
  *(_BYTE *)&self->_has |= 2u;
  uint64_t v3 = *((_BYTE *)a3 + 56);
  if ((v3 & 0x20) == 0)
  {
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  *((_DWORD *)v7 + 16) = self->_technology;
  *((_BYTE *)v7 + 80) |= 4u;
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    if ((*((_BYTE *)a3 + 80) & 1) == 0 || self->_numberOfSurroundingWifis != *((_DWORD *)a3 + 14)) {
      goto LABEL_40;
    }
  }

  else if ((*((_BYTE *)a3 + 80) & 1) != 0)
  {
    goto LABEL_40;
  }

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    if ((*((_BYTE *)a3 + 80) & 4) == 0 || self->_technology != *((_DWORD *)a3 + 16)) {
      goto LABEL_40;
    }
  }

  else if ((*((_BYTE *)a3 + 80) & 4) != 0)
  {
    goto LABEL_40;
  }

  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
    if ((*((_BYTE *)a3 + 80) & 0x10) == 0 || self->_wifiGranularity != *((_DWORD *)a3 + 18)) {
      goto LABEL_40;
    }
  }

  else if ((*((_BYTE *)a3 + 80) & 0x10) != 0)
  {
    goto LABEL_40;
  }

  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
    if ((*((_BYTE *)a3 + 80) & 2) == 0 || self->_radius != *((_DWORD *)a3 + 15)) {
      goto LABEL_40;
    }
  }

  else if ((*((_BYTE *)a3 + 80) & 2) != 0)
  {
    goto LABEL_40;
  }

  IsEqual = PBRepeatedInt32IsEqual(&self->_wifiBands, (char *)a3 + 8);
  if (IsEqual)
  {
    if ((*(_BYTE *)&self->_has & 8) != 0)
    {
      if ((*((_BYTE *)a3 + 80) & 8) == 0 || self->_wifiAltitudeScale != *((_DWORD *)a3 + 17)) {
        goto LABEL_40;
      }
    }

    else if ((*((_BYTE *)a3 + 80) & 8) != 0)
    {
      goto LABEL_40;
    }

    meta = self->_meta;
    else {
      LOBYTE(IsEqual) = 1;
    }
  }

  return IsEqual;
}

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }

  return result;
}

    uint64_t v9 = *(_BYTE *)(a2 + 18);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(_BYTE *)(a1 + 18) = v9;
    if ((*(_DWORD *)(a2 + 24) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 24) |= 8u;
    *(void *)(a1 + 8) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  if ((*(_DWORD *)(v5 + 20) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  }
  return result;
}

    uint64_t v9 = *(_BYTE *)(a2 + 13);
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 13) = v9;
    if ((*(_DWORD *)(a2 + 20) & 8) == 0) {
      return;
    }
LABEL_8:
    int v6 = *(_BYTE *)(a2 + 14);
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 14) = v6;
  }

  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1E40 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  int v8 = *(void *)(v5 + 32);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1E88 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(v5 + 40);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1E88 + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v9,  a2,  a4);
  }

  return result;
}

        uint64_t v18 = sub_100CFD5A0(v24, v7, (uint64_t (**)(void))a3);
        if ((v19 & 1) == 0) {
          goto LABEL_19;
        }
        uint64_t v20 = sub_100CFD720(v24, v18, a3);
        int v8 = v18 + 112;
        uint64_t result = sub_100CFD720(v18 + 112, v7, a3);
        if (!(_DWORD)result)
        {
          if (v20)
          {
            uint64_t v24 = v18 + 112;
            goto LABEL_18;
          }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_hardwareType),  @"hardwareType");
  has = (char)self->_has;
  if ((has & 0x20) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((has & 8) != 0) {
LABEL_7:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_algorithmVersion),  @"algorithmVersion");
  return v3;
}

  PBDataWriterWriteBOOLField(a3, self->_betaBlockerUse, 5LL);
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    goto LABEL_13;
  }
}

  *((_BYTE *)a3 + 40) = self->_betaBlockerUse;
  *((_BYTE *)a3 + 44) |= 0x20u;
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    goto LABEL_13;
  }
}

  *((_DWORD *)result + 9) = self->_hardwareType;
  *((_BYTE *)result + 44) |= 0x10u;
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 8) == 0) {
      return result;
    }
    goto LABEL_7;
  }

  self->_betaBlockerUse = *((_BYTE *)a3 + 40);
  *(_BYTE *)&self->_has |= 0x20u;
  if ((*((_BYTE *)a3 + 44) & 8) != 0) {
    goto LABEL_13;
  }
}

          uint64_t v19 = sub_100D09AF8(v9, a2);
          if ((v20 & 1) == 0) {
            goto LABEL_15;
          }
          uint64_t v21 = sub_100D09BC4(v9, v19);
          uint64_t v9 = v19 + 1;
          uint64_t result = (double *)sub_100D09BC4(v19 + 1, a2);
          if (!(_DWORD)result)
          {
            unsigned int v10 = v11 + 1;
            if (v21) {
              continue;
            }
LABEL_15:
            uint64_t result = (double *)sub_100D093B8(v8, v19, a3, -v11, a5 & 1);
            uint64_t v9 = v19 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v19;
          if (v21) {
            return result;
          }
          goto LABEL_2;
        }

        if ((a5 & 1) != 0) {
          return sub_100D0990C(v9, a2);
        }
        if (v9 != a2)
        {
          while (v8 + 1 != a2)
          {
            unint64_t v66 = *v8;
            uint64_t v65 = v8[1];
            uint64_t v64 = ++v8;
            uint64_t v67 = v65;
            uint64_t v68 = v66;
            if (v67 > v68)
            {
              do
              {
                void *v64 = v66;
                unint64_t v66 = *(v64 - 2);
                uint64_t v69 = v66;
                --v64;
              }

              while (v67 > v69);
              void *v64 = v65;
            }
          }
        }

        return result;
    }
  }

    uint64_t v34 = 0LL;
    goto LABEL_13;
  }

  uint64_t v34 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[12] - *(double *)(a1 + 184));
LABEL_13:
  uint64_t v14 = -[CMOdometerData initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitude:groundAltitudeUncertainty:originDevice:slope:maxAbsSlope:]( objc_alloc(&OBJC_CLASS___CMOdometerData),  "initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitude:gr oundAltitudeUncertainty:originDevice:slope:maxAbsSlope:",  0LL,  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  *a4),  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[2]),  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[5]),  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[7]),  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[8]),  a4[1],  v34,  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[13]),  v35,  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[18]),  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[19]));
  -[CMOdometerData setCurrentSpeed:]( v14,  "setCurrentSpeed:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[4]));
  -[CMOdometerData setAverageSpeed:](v14, "setAverageSpeed:", 0LL);
  -[CMOdometerData setGpsAltitude:]( v14,  "setGpsAltitude:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[3]));
  -[CMOdometerData setOdometer:]( v14,  "setOdometer:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[6]));
  -[CMOdometerData setGroundAltitude:]( v14,  "setGroundAltitude:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[12]));
  -[CMOdometerData setSmoothedGPSAltitude:]( v14,  "setSmoothedGPSAltitude:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[14]));
  -[CMOdometerData setSmoothedGPSAltitudeUncertainty:]( v14,  "setSmoothedGPSAltitudeUncertainty:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[15]));
  -[CMOdometerData setGpsCourseRadians:]( v14,  "setGpsCourseRadians:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[16]));
  -[CMOdometerData setGpsCourseAccuracy:]( v14,  "setGpsCourseAccuracy:",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4[17]));
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187F808);
  }
  int v15 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 138412802;
    *(void *)&uint8_t buf[4] = v14;
    char v46 = 2112;
    unsigned int v47 = v16;
    v48 = 2048;
    v49 = a1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%@, %@, %p", buf, 0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187F808);
    }
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t v39 = 138412802;
    __int128 v40 = v14;
    uint64_t v41 = 2112;
    uint64_t v42 = v26;
    char v43 = 2048;
    uint64_t v44 = a1;
    LODWORD(v33) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "%@, %@, %p",  &v39,  v33);
    uint64_t v28 = (char *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOdometerSubscription::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometer Notifier_Type::NotificationData &)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  uint64_t v37 = CMOdometerDataObject;
  unint64_t v38 = v14;
  *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL);

  sub_100D0C838(a1, buf);
  char v17 = *(_OWORD *)a4;
  uint64_t v18 = *((_OWORD *)a4 + 1);
  uint64_t v19 = *((_OWORD *)a4 + 3);
  *(_OWORD *)(v9 + 32) = *((_OWORD *)a4 + 2);
  *(_OWORD *)(v9 + 48) = v19;
  *(_OWORD *)uint64_t v9 = v17;
  *(_OWORD *)(v9 + 16) = v18;
  uint64_t v20 = *((_OWORD *)a4 + 4);
  uint64_t v21 = *((_OWORD *)a4 + 5);
  unsigned int v22 = *((_OWORD *)a4 + 7);
  *(_OWORD *)(v9 + 96) = *((_OWORD *)a4 + 6);
  *(_OWORD *)(v9 + 112) = v22;
  *(_OWORD *)(v9 + 64) = v20;
  *(_OWORD *)(v9 + 80) = v21;
  uint64_t v23 = *((_OWORD *)a4 + 8);
  uint64_t v24 = *((_OWORD *)a4 + 9);
  uint64_t v25 = *((_OWORD *)a4 + 11);
  *(_OWORD *)(v9 + 160) = *((_OWORD *)a4 + 10);
  *(_OWORD *)(v9 + 176) = v25;
  *(_OWORD *)(v9 + 128) = v23;
  *(_OWORD *)(v9 + 144) = v24;
}

    uint64_t v9 = -1.0;
    goto LABEL_13;
  }

  uint64_t v9 = sub_101171C7C(v8 - v7);
  unsigned int v10 = *(void *)(v2 + 8);
  int v11 = *(void *)(v2 + 104);
  unint64_t v12 = -1.0;
  uint64_t v13 = v10 - v11;
  if (v10 > v11) {
LABEL_10:
  }
    unint64_t v12 = sub_101171C7C(v13);
LABEL_13:
  int v15 = (const __CFString *)[*(id *)(v2 + 16) clientAnchorWithType];
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = &stru_1018A4B00;
  }
  char v17 = (const __CFString *)[*(id *)(v2 + 16) subIdentityIdWithType];
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = &stru_1018A4B00;
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018817F0);
  }
  uint64_t v19 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 68291074;
    uint64_t v25 = 0;
    uint64_t v26 = 2082;
    uint64_t v27 = "";
    uint64_t v28 = 2114;
    uint64_t v29 = v16;
    uint64_t v30 = 2114;
    uint64_t v31 = v18;
    uint64_t v32 = 1026;
    uint64_t v33 = v20;
    uint64_t v34 = 2050;
    uint64_t v35 = v9;
    uint64_t v36 = 2050;
    uint64_t v37 = v12;
    unint64_t v38 = 2050;
    uint64_t v39 = v5;
    __int128 v40 = 2050;
    uint64_t v41 = v6;
    uint64_t v42 = 2050;
    char v43 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#dic sending event to coreanalytics, Anchor:%{public, location:escape_only}@, SubId entity:%{public, location:escape_only}@, DICType:%{public}d, StingDelay:%{public}.6f, EatDelay: %{public}.6f, DisconnectToDeathDelay:%{public}.6f, TotalDuration:%{public}.6f, this:%{public}p}",  buf,  0x5Eu);
  }

  v23[0] = v16;
  v23[1] = v18;
  v23[2] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 40),  @"Anchor",  @"SubIdentity",  @"DICType");
  v22[3] = @"StingDelay";
  v23[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v9);
  v22[4] = @"EatDelay";
  v23[4] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v12);
  v22[5] = @"DisconnectToDeathDelay";
  v23[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v5);
  v22[6] = @"TotalDuration";
  v23[6] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v6);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  v22,  7LL);
}

    int v6 = 1LL;
    goto LABEL_25;
  }

  sub_1010DDBC0(__p, "");
  sub_100D8AF38(a1, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (sub_100D8A930(a1)) {
    goto LABEL_12;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101882168);
  }
  uint64_t v7 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
  {
    int v8 = (void *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 68289282;
    char v17 = 0;
    uint64_t v18 = 2082;
    uint64_t v19 = "";
    uint64_t v20 = 2082;
    uint64_t v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!,  name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101882168);
    }
  }

  uint64_t v9 = (os_log_s *)qword_1019344B8;
  if (os_signpost_enabled((os_log_t)qword_1019344B8))
  {
    unsigned int v10 = (void *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 68289282;
    char v17 = 0;
    uint64_t v18 = 2082;
    uint64_t v19 = "";
    uint64_t v20 = 2082;
    uint64_t v21 = v10;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!,  name:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  int v6 = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  return v6;
}

  *(void *)uint64_t buf = &v22;
  sub_100E002BC((void ***)buf);
  sub_100603B94((uint64_t)v24, (char *)v24[1]);
}

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t v7 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(void *)(a1 + 32) = v7;
  }

  return result;
}

  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    LODWORD(__p[0]) = 0;
    uint64_t v4 = *(void *)(v3 + 64);
    if (!v4) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 48LL))(v4, __p);
    uint64_t v5 = (const std::string::value_type *)-[__CFString UTF8String]((id)sub_100BF5BD8(), "UTF8String");
    std::string::assign((std::string *)a1, v5);
    if (sub_1004FAACC())
    {
      int v6 = *(void *)(a1 + 64);
      LODWORD(__p[0]) = 1;
      uint64_t v7 = *(void *)(v6 + 64);
      if (!v7) {
        sub_100008BDC();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v7 + 48LL))(v7, __p);
      int v8 = (const std::string::value_type *)-[__CFString UTF8String]((id)sub_100BF5BD8(), "UTF8String");
      std::string::assign((std::string *)(a1 + 24), v8);
    }

    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    unsigned int v10 = a1;
    -[NSMutableDictionary setValue:forKey:]( v9,  "setValue:forKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10),  @"simCountry1");
    int v11 = (void *)(a1 + 24);
    -[NSMutableDictionary setValue:forKey:]( v9,  "setValue:forKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11),  @"simCountry2");
    -[NSMutableDictionary setValue:forKey:]( v9,  "setValue:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48)),  @"numContacts");
    -[NSMutableDictionary setValue:forKey:]( v9,  "setValue:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 60)),  @"numValidContacts");
    -[NSMutableDictionary setValue:forKey:]( v9,  "setValue:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 52)),  @"numiMessageContacts");
    -[NSMutableDictionary setValue:forKey:]( v9,  "setValue:forKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56)),  @"numAppleContacts");
    AnalyticsSendEvent(@"com.apple.locationd.emergency_contacts", v9);

    unint64_t v12 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(**(id **)(a1 + 64), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100EF3A20;
    block[3] = &unk_10181D3D0;
    block[4] = a1;
    dispatch_async(v12, block);
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10188BAB8);
    }
    uint64_t v13 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "#ADR,submitIDSQueryCAStats,adr pointer is nil",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10188BAB8);
      }
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#ADR,submitIDSQueryCAStats,adr pointer is nil",  v17,  2);
      int v15 = (void **)v14;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLEmergencyADR::EmergencyContactsMetric::submitIDSQueryCAStats()",  "%s\n",  v14);
      if (v15 != __p) {
        free(v15);
      }
    }
  }

  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }

    ;
  }

  if (qword_1019348F0 != -1) {
    dispatch_once(&qword_1019348F0, &stru_10188CF68);
  }
  char v17 = (os_log_s *)qword_1019348F8;
  if (os_log_type_enabled((os_log_t)qword_1019348F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = -[NSMutableArray count]( -[CLTransitMacMonitor observedTransitAccessPointsCache](v6, "observedTransitAccessPointsCache"),  "count");
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = i;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "#TransitMacMonitor: added %{public}d new access point scans, total cache size, %{public}lu",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348F0 != -1) {
      dispatch_once(&qword_1019348F0, &stru_10188CF68);
    }
    uint64_t v63 = qword_1019348F8;
    uint64_t v64 = -[NSMutableArray count]( -[CLTransitMacMonitor observedTransitAccessPointsCache](v6, "observedTransitAccessPointsCache"),  "count");
    uint64_t v90 = 67240448;
    *(_DWORD *)uint64_t v91 = i;
    *(_WORD *)&v91[4] = 2050;
    *(void *)&v91[6] = v64;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v63,  1LL,  "#TransitMacMonitor: added %{public}d new access point scans, total cache size, %{public}lu",  &v90,  18);
    unint64_t v66 = (char *)v65;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLTransitMacMonitor processNewAccessPoints:transitTileResults:]",  "%s\n",  v65);
    if (v66 != buf) {
      free(v66);
    }
  }

  if (!-[NSMutableArray count]( -[CLTransitMacMonitor observedTransitAccessPointsCache](v6, "observedTransitAccessPointsCache"),  "count"))
  {
    if (qword_1019348F0 != -1) {
      dispatch_once(&qword_1019348F0, &stru_10188CF68);
    }
    unint64_t v38 = (os_log_s *)qword_1019348F8;
    if (os_log_type_enabled((os_log_t)qword_1019348F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "#TransitMacMonitor: no scan history", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_72;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348F0 != -1) {
      dispatch_once(&qword_1019348F0, &stru_10188CF68);
    }
    LOWORD(v90) = 0;
    LODWORD(v71) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348F8,  1LL,  "#TransitMacMonitor: no scan history",  &v90,  v71);
LABEL_49:
    uint64_t v39 = (char *)v37;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLTransitMacMonitor processNewAccessPoints:transitTileResults:]",  "%s\n",  v37);
    if (v39 != buf) {
      free(v39);
    }
    goto LABEL_72;
  }

  uint64_t v19 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend( -[NSMutableArray objectAtIndexedSubscript:]( -[CLTransitMacMonitor observedTransitAccessPointsCache](v6, "observedTransitAccessPointsCache"),  "objectAtIndexedSubscript:",  0),  "timestamp");
  uint64_t v21 = v20;
  objc_msgSend( -[NSMutableArray objectAtIndexedSubscript:]( -[CLTransitMacMonitor observedTransitAccessPointsCache](v6, "observedTransitAccessPointsCache"),  "objectAtIndexedSubscript:",  0),  "timestamp");
  uint64_t v23 = v22;
  uint64_t v81 = 0u;
  uint64_t v82 = 0u;
  v83 = 0u;
  uint64_t v84 = 0u;
  uint64_t v24 = -[CLTransitMacMonitor observedTransitAccessPointsCache](v6, "observedTransitAccessPointsCache");
  uint64_t v25 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v81,  v96,  16LL);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)v82;
    do
    {
      for (k = 0LL; k != v26; k = (char *)k + 1)
      {
        if (*(void *)v82 != v27) {
          objc_enumerationMutation(v24);
        }
        uint64_t v29 = *(void **)(*((void *)&v81 + 1) + 8LL * (void)k);
        uint64_t v30 = objc_msgSend( v19,  "objectForKeyedSubscript:",  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  objc_msgSend(v29, "macAddress")));
        if (!v30)
        {
          uint64_t v30 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
          objc_msgSend( v19,  "setObject:forKeyedSubscript:",  v30,  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  objc_msgSend(v29, "macAddress")));
        }

        [v30 addObject:v29];
        [v29 timestamp];
        if (v31 < v21)
        {
          [v29 timestamp];
          uint64_t v21 = v32;
        }

        [v29 timestamp];
        if (v33 > v23)
        {
          [v29 timestamp];
          uint64_t v23 = v34;
        }
      }

      uint64_t v26 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v81,  v96,  16LL);
    }

    while (v26);
  }

  uint64_t v35 = v23 - v21;
  if (v35 < 180.0)
  {
    if (qword_1019348F0 != -1) {
      dispatch_once(&qword_1019348F0, &stru_10188CF68);
    }
    uint64_t v36 = (os_log_s *)qword_1019348F8;
    if (os_log_type_enabled((os_log_t)qword_1019348F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(double *)&uint8_t buf[4] = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "#TransitMacMonitor: not enough scan history, length, %{public}f",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_72;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348F0 != -1) {
      dispatch_once(&qword_1019348F0, &stru_10188CF68);
    }
    uint64_t v90 = 134349056;
    *(double *)uint64_t v91 = v35;
    LODWORD(v71) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348F8,  1LL,  "#TransitMacMonitor: not enough scan history, length, %{public}f",  &v90,  v71);
    goto LABEL_49;
  }

  uint64_t v79 = 0u;
  uint64_t v80 = 0u;
  uint64_t v77 = 0u;
  uint64_t v78 = 0u;
  __int128 v40 = [v19 countByEnumeratingWithState:&v77 objects:v95 count:16];
  if (!v40)
  {
LABEL_72:
    uint64_t v60 = 0LL;
    goto LABEL_73;
  }

  uint64_t v41 = v40;
  uint64_t v42 = *(void *)v78;
  while (2)
  {
    for (m = 0LL; m != v41; m = (char *)m + 1)
    {
      if (*(void *)v78 != v42) {
        objc_enumerationMutation(v19);
      }
      uint64_t v44 = *(void *)(*((void *)&v77 + 1) + 8LL * (void)m);
      uint64_t v45 = [v19 objectForKeyedSubscript:v44];
      if ((unint64_t)[v45 count] >= 3)
      {
        objc_msgSend(objc_msgSend(v45, "objectAtIndexedSubscript:", 0), "timestamp");
        unsigned int v47 = v46;
        objc_msgSend(objc_msgSend(v45, "objectAtIndexedSubscript:", 0), "timestamp");
        v49 = v48;
        uint64_t v73 = 0u;
        uint64_t v74 = 0u;
        uint64_t v75 = 0u;
        uint64_t v76 = 0u;
        uint64_t v50 = [v45 countByEnumeratingWithState:&v73 objects:v94 count:16];
        if (v50)
        {
          unsigned int v51 = v50;
          uint8_t v52 = *(void *)v74;
          do
          {
            for (n = 0LL; n != v51; n = (char *)n + 1)
            {
              if (*(void *)v74 != v52) {
                objc_enumerationMutation(v45);
              }
              uint64_t v54 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)n);
              [v54 timestamp];
              if (v55 < v47)
              {
                [v54 timestamp];
                unsigned int v47 = v56;
              }

              [v54 timestamp];
              if (v57 > v49)
              {
                [v54 timestamp];
                v49 = v58;
              }
            }

            unsigned int v51 = [v45 countByEnumeratingWithState:&v73 objects:v94 count:16];
          }

          while (v51);
        }

        unint64_t v59 = v49 - v47;
        if (v59 >= 180.0)
        {
          if (qword_1019348F0 != -1) {
            dispatch_once(&qword_1019348F0, &stru_10188CF68);
          }
          __int128 v61 = (os_log_s *)qword_1019348F8;
          if (os_log_type_enabled((os_log_t)qword_1019348F8, OS_LOG_TYPE_INFO))
          {
            char v62 = [v45 count];
            *(_DWORD *)uint64_t buf = 138478339;
            *(void *)&uint8_t buf[4] = v44;
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = v62;
            v98 = 2050;
            v99 = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_INFO,  "#TransitMacMonitor: transit state, on transit, based on mac, %{private}@, history count, %{public}lu, inte rval, %{public}f",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348F0 != -1) {
              dispatch_once(&qword_1019348F0, &stru_10188CF68);
            }
            uint64_t v67 = qword_1019348F8;
            uint64_t v68 = [v45 count];
            uint64_t v90 = 138478339;
            *(void *)uint64_t v91 = v44;
            *(_WORD *)&v91[8] = 2050;
            *(void *)&v91[10] = v68;
            v92 = 2050;
            v93 = v59;
            LODWORD(v71) = 32;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v67,  1LL,  "#TransitMacMonitor: transit state, on transit, based on mac, %{private}@, history count, %{public}lu, inte rval, %{public}f",  &v90,  v71);
            uint64_t v70 = (char *)v69;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLTransitMacMonitor processNewAccessPoints:transitTileResults:]",  "%s\n",  v69);
            if (v70 != buf) {
              free(v70);
            }
          }

          uint64_t v60 = 1LL;
          goto LABEL_73;
        }
      }
    }

    uint64_t v41 = [v19 countByEnumeratingWithState:&v77 objects:v95 count:16];
    uint64_t v60 = 0LL;
    if (v41) {
      continue;
    }
    break;
  }

  for (j = 0LL; j != v15; ++j)
  {
    uint64_t v18 = v13 + v18;
    *(float *)(a3 + 200 + 4 * j) = v18;
  }

  uint64_t v20 = v15 + 1;
  if ((v15 + 1) > 6)
  {
LABEL_17:
    uint64_t v25 = 0LL;
    do
    {
      uint64_t v26 = *(float *)(a3 + 196 + 4 * v25) - v11;
      uint64_t v27 = v25 + 1;
      uint64_t v28 = v11 + *(float *)(a3 + 196 + 4 * (v25 + 1));
      uint64_t v30 = *a1;
      uint64_t v29 = a1[1];
      if (v29 == *a1)
      {
        uint64_t v37 = a1[1];
      }

      else
      {
        uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)*a1) >> 3);
        do
        {
          uint64_t v32 = v31 >> 1;
          uint64_t v33 = &v30[6 * (v31 >> 1)];
          uint64_t v35 = *v33;
          uint64_t v34 = v33 + 6;
          v31 += ~(v31 >> 1);
          if (v35 < v26) {
            uint64_t v30 = v34;
          }
          else {
            uint64_t v31 = v32;
          }
        }

        while (v31);
        if (v29 == v30)
        {
          uint64_t v37 = a1[1];
        }

        else
        {
          uint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
          uint64_t v37 = v30;
          do
          {
            unint64_t v38 = v36 >> 1;
            uint64_t v39 = &v37[6 * (v36 >> 1)];
            uint64_t v41 = *v39;
            __int128 v40 = v39 + 6;
            v36 += ~(v36 >> 1);
            if (v41 > v28) {
              uint64_t v36 = v38;
            }
            else {
              uint64_t v37 = v40;
            }
          }

          while (v36);
        }

        uint64_t v29 = v30;
      }

      sub_10078B390(v29, v37, 0LL, 0LL, (float *)&v44);
      uint64_t v42 = a3 + 24 * v27;
      unsigned int v22 = *(double *)&v44;
      *(_OWORD *)(v42 + 4) = v44;
      *(void *)(v42 + 20) = v45;
      if (!v25) {
        sub_10078B7C0(a3 + 16, a3 + 28, v26);
      }
      if (v15 - 1 == v25) {
        sub_10078B7C0(a3 + 16 + 24 * v15 + 24, v42 + 4, v28);
      }
      ++v25;
    }

    while (v27 != v15);
    goto LABEL_39;
  }

  uint64_t v21 = 0;
LABEL_16:
  memset_pattern16((void *)(a3 + (4 * v20 + 196)), &unk_101365820, 4LL * (6 - v20) + 4);
  if ((v21 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_39:
  if (v43) {
    return sub_100F30B5C(a1, a3, v22, v23, v24);
  }
  else {
    return sub_100F30B04(a1, a3);
  }
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  if (!sub_1002921D0(115, 2)) {
    return;
  }
  bzero(buf, 0x65CuLL);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10188E1B8);
  }
  int v11 = *(int **)(a1 + 88);
  unsigned int v10 = *(int **)(a1 + 96);
  unint64_t v12 = (char *)v10 - (char *)v11;
  if (v10 == v11)
  {
    uint64_t v13 = -1;
  }

  else
  {
    uint64_t v13 = *v11;
    if (v12 >= 5)
    {
      uint64_t v14 = v11[1];
      goto LABEL_21;
    }
  }

  uint64_t v14 = -1;
LABEL_21:
  v16[0] = 67109376;
  v16[1] = v13;
  char v17 = 1024;
  uint64_t v18 = v14;
  int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: set derivedMcc, derivedMcc, %d, %d",  v16,  14);
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCell::setDerivedMCC(const CLTelephonyService_Type::DerivedMccVector &)",  "%s\n",  v15);
}

  PBDataWriterWriteInt64Field(a3, self->_cellID, 3LL);
  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
LABEL_5:
  }
    PBDataWriterWriteInt32Field(a3, self->_tacID, 4LL);
LABEL_6:
  location = self->_location;
  if (location) {
    PBDataWriterWriteSubmessage(a3, location, 5LL);
  }
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    PBDataWriterWriteInt32Field(a3, self->_nrarfcn, 6LL);
  }
}

        uint64_t v4 = (uint64_t *)*v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_18;
        }
      }

      int v11 = *(unsigned __int16 *)((char *)v9 + 27);
      if (v7 != v11)
      {
        if (v7 >= v11)
        {
          if (v11 >= v7) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }

        goto LABEL_12;
      }

      unint64_t v12 = *(_DWORD *)((char *)v9 + 29);
      if (v8 < v12) {
        goto LABEL_12;
      }
      if (v12 >= v8) {
        goto LABEL_18;
      }
LABEL_15:
      uint64_t result = v9 + 1;
      uint64_t v4 = (uint64_t *)v9[1];
      if (!v4) {
        goto LABEL_18;
      }
    }
  }

  uint64_t v9 = result;
LABEL_18:
  *a2 = v9;
  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "stepSide", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 48) & 8) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 32), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 16));
  uint64_t v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  uint64_t v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0x10) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  if ((*(_BYTE *)(v3 + 36) & 0x20) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 32), 6u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  int v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 0x10) != 0)
  {
    uint64_t v9 = *(_DWORD *)(a2 + 84);
    *(_WORD *)(a1 + 104) |= 0x10u;
    *(_DWORD *)(a1 + 84) = v9;
    int v8 = *(_WORD *)(a2 + 104);
  }

  if ((v8 & 8) != 0)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 80);
    *(_WORD *)(a1 + 104) |= 8u;
    *(_DWORD *)(a1 + 80) = v10;
  }

  return a1;
}

  PB::TextFormatter::format(this, "ch2", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 44));
  int v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v8 & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 52));
  return PB::TextFormatter::endObject(this);
}

  unsigned int v10 = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 116) |= 8u;
  *(void *)(a1 + 104) = v10;
  uint64_t v5 = *(_BYTE *)(a2 + 116);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v5 & 4) != 0)
  {
LABEL_8:
    int v6 = *(void *)(a2 + 96);
    *(_BYTE *)(a1 + 116) |= 4u;
    *(void *)(a1 + 96) = v6;
  }

  return a1;
}

  PB::TextFormatter::format(this, "rawConfidence", *(float *)(a1 + 20));
  uint64_t v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "rawConfidence", *(float *)(a1 + 20));
  uint64_t v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "connected", *(_BYTE *)(a1 + 25));
  uint64_t v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "wasConnected", *(_BYTE *)(a1 + 26));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 26), 5u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "epochTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "minAngleBetweenThighAndShinDeg", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "numDaysWithDataLast30Days", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "estimatedLaneNumber", *(_DWORD *)(a1 + 20));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "rssi", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "motionHint", *(_BYTE *)(a1 + 15));
  uint64_t v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "wifiHint", *(_BYTE *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 13), 5u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "receivedTime", *(double *)(a1 + 16));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "timestampPossible", *(void *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  }
  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 5u);
  if ((*(_BYTE *)(v3 + 36) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "shiftInSaturation", *(_BYTE *)(a1 + 42));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "sample", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "dotErrorEstimate", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  unsigned int v10 = *(_WORD *)(a2 + 124);
  if ((v10 & 8) != 0)
  {
    char v17 = *(_DWORD *)(a2 + 96);
    *(_WORD *)(a1 + 124) |= 8u;
    *(_DWORD *)(a1 + 96) = v17;
    unsigned int v10 = *(_WORD *)(a2 + 124);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_WORD *)(a2 + 124) & 0x100) == 0)
  {
    goto LABEL_16;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 116);
  *(_WORD *)(a1 + 124) |= 0x100u;
  *(_DWORD *)(a1 + 116) = v18;
  if ((*(_WORD *)(a2 + 124) & 4) != 0)
  {
LABEL_17:
    int v11 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 124) |= 4u;
    *(_DWORD *)(a1 + 92) = v11;
  }

  PB::TextFormatter::format(this, "distPed", *(double *)(a1 + 16));
  uint64_t v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "walkPercentage", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 5u);
  if ((*(_BYTE *)(v3 + 56) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 5u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "isValidMeasurement", *(_BYTE *)(a1 + 37));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "noiseVelocityY", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  PB::TextFormatter::format(this, "maxTemp", *(float *)(a1 + 20));
  uint64_t v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((v5 & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "medianToc", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 6u);
  }
  return result;
}

  PB::TextFormatter::format(this, "swingAccelX", *(double *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

  uint64_t result = std::string::append(this, " kCFRunLoopAfterWaiting");
  if (a1 < 0) {
    return std::string::append(this, " kCFRunLoopExit");
  }
  return result;
}

LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 56),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

    uint64_t v9 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 8u;
    *(_DWORD *)(a1 + 32) = v9;
    if ((*(_DWORD *)(a2 + 40) & 0x10) == 0) {
      return;
    }
    goto LABEL_15;
  }

  int v8 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 4u;
  *(_DWORD *)(a1 + 24) = v8;
  uint64_t v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    unsigned int v10 = *(_BYTE *)(a2 + 29);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 29) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_20;
    }

    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 40),  a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7LL, *(void *)(v5 + 32), a2);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 24) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  }
  return result;
}

  if (!**(_BYTE **)(a1 + 448))
  {
    unsigned int v22 = a3 + 3;
    uint64_t v21 = a3[3];
    uint64_t v23 = (char *)a3[2];
    if ((unint64_t)v23 >= v21)
    {
      uint64_t v30 = (char *)*v6;
      uint64_t v31 = (v23 - (_BYTE *)*v6) >> 3;
      uint64_t v32 = v31 + 1;
      uint64_t v33 = v21 - (void)v30;
      if (v33 >> 2 > v32) {
        uint64_t v32 = v33 >> 2;
      }
      else {
        uint64_t v34 = v32;
      }
      if (v34)
      {
        uint64_t v35 = (char *)sub_1000071BC((uint64_t)(a3 + 3), v34);
        uint64_t v30 = (char *)a3[1];
        uint64_t v23 = (char *)a3[2];
      }

      else
      {
        uint64_t v35 = 0LL;
      }

      uint64_t v39 = &v35[8 * v31];
      __int128 v40 = &v35[8 * v34];
      *(void *)uint64_t v39 = 4LL;
      uint64_t v24 = v39 + 8;
      while (v23 != v30)
      {
        uint64_t v41 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v39 - 1) = v41;
        v39 -= 8;
      }

      a3[1] = (uint64_t)v39;
      a3[2] = (uint64_t)v24;
      a3[3] = (uint64_t)v40;
      if (v30) {
        operator delete(v30);
      }
    }

    else
    {
      *(void *)uint64_t v23 = 4LL;
      uint64_t v24 = v23 + 8;
    }

    a3[2] = (uint64_t)v24;
    if (*(_BYTE *)(*(void *)(a1 + 448) + 1LL))
    {
      if ((unint64_t)v24 >= *v22)
      {
        char v43 = (char *)*v6;
        uint64_t v44 = (v24 - (_BYTE *)*v6) >> 3;
        uint64_t v45 = v44 + 1;
        char v46 = *v22 - (void)v43;
        if (v46 >> 2 > v45) {
          uint64_t v45 = v46 >> 2;
        }
        else {
          unsigned int v47 = v45;
        }
        if (v47)
        {
          v48 = (char *)sub_1000071BC((uint64_t)(a3 + 3), v47);
          char v43 = (char *)a3[1];
          uint64_t v24 = (char *)a3[2];
        }

        else
        {
          v48 = 0LL;
        }

        v49 = &v48[8 * v44];
        uint64_t v50 = &v48[8 * v47];
        *(void *)v49 = 2LL;
        uint64_t v42 = v49 + 8;
        while (v24 != v43)
        {
          unsigned int v51 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v49 - 1) = v51;
          v49 -= 8;
        }

        a3[1] = (uint64_t)v49;
        a3[2] = (uint64_t)v42;
        a3[3] = (uint64_t)v50;
        if (v43) {
          operator delete(v43);
        }
      }

      else
      {
        *(void *)uint64_t v24 = 2LL;
        uint64_t v42 = v24 + 8;
      }

      a3[2] = (uint64_t)v42;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181F1A0);
    }
    uint8_t v52 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      char v53 = operator new(0x28uLL);
      std::string __p = v53;
      v139 = xmmword_1012C8460;
      *char v53 = 0u;
      v53[1] = 0u;
      *(void *)((char *)v53 + 29) = 0LL;
      sub_10000AE6C(a1 + 8, v53);
      p_p = &__p;
      if (v139 < 0) {
        p_p = __p;
      }
      uint64_t v55 = *a3;
      uint64_t v56 = *(unsigned __int8 **)(a1 + 448);
      uint64_t v57 = *v56;
      LODWORD(v56) = v56[1];
      *(_DWORD *)uint64_t buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = p_p;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v55;
      v186 = 1026;
      v187 = v57;
      v188 = 1026;
      v189 = (int)v56;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoService send status to client, MiLo Unavailable: , ServiceId:%{public, locati on:escape_only}s, State:%{public}u, isMiLoEnabled:%{public}hhd, isLowPowerMode:%{public}hhd}",  buf,  0x2Eu);
      if (SHIBYTE(v139) < 0) {
        operator delete(__p);
      }
    }
  }

  if (*a3)
  {
    if (*a3 == 1 && a3[1] == a3[2])
    {
      sub_10122C1F0(buf);
LABEL_176:
      uint64_t result = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm",  *(_DWORD *)buf,  "getCurrentStatus");
      __break(1u);
      return result;
    }
  }

  else if (a3[1] != a3[2])
  {
    sub_10122C080(buf);
    goto LABEL_176;
  }

  uint64_t v58 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)a3 + 2) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)a3 + 3) = v58;
  a3[9] = 0LL;
  sub_1000F9040((char *)a3 + 80, 0LL, 0LL, 0LL);
  unint64_t v59 = *(void *)(a1 + 96);
  if (v59)
  {
    uint64_t v60 = sub_100095788(v59);
    __int128 v61 = sub_100095790(*(void *)(a1 + 96));
    char v62 = sub_1000F4970(v60, v61);
    a3[9] = v62;
    if (v62 <= 0xA)
    {
      uint64_t v63 = a3[12];
      uint64_t v64 = (char *)a3[11];
      if ((unint64_t)v64 >= v63)
      {
        unint64_t v66 = (char *)*v9;
        uint64_t v67 = (v64 - (_BYTE *)*v9) >> 3;
        uint64_t v68 = v67 + 1;
        uint64_t v69 = v63 - (void)v66;
        if (v69 >> 2 > v68) {
          uint64_t v68 = v69 >> 2;
        }
        else {
          uint64_t v70 = v68;
        }
        if (v70)
        {
          uint64_t v71 = (char *)sub_1000071BC((uint64_t)(a3 + 12), v70);
          unint64_t v66 = (char *)a3[10];
          uint64_t v64 = (char *)a3[11];
        }

        else
        {
          uint64_t v71 = 0LL;
        }

        uint64_t v72 = &v71[8 * v67];
        uint64_t v73 = &v71[8 * v70];
        *(void *)uint64_t v72 = 3LL;
        uint64_t v65 = v72 + 8;
        while (v64 != v66)
        {
          uint64_t v74 = *((void *)v64 - 1);
          v64 -= 8;
          *((void *)v72 - 1) = v74;
          v72 -= 8;
        }

        a3[10] = (uint64_t)v72;
        a3[11] = (uint64_t)v65;
        a3[12] = (uint64_t)v73;
        if (v66) {
          operator delete(v66);
        }
      }

      else
      {
        *(void *)uint64_t v64 = 3LL;
        uint64_t v65 = v64 + 8;
      }

      a3[11] = (uint64_t)v65;
      uint64_t v75 = (void *)sub_100095798(*(void *)(a1 + 96));
      if (v75[1] != *v75)
      {
        uint64_t v76 = sub_100095798(*(void *)(a1 + 96));
        uint64_t v77 = *(_DWORD **)v76;
        uint64_t v78 = *(_DWORD **)(v76 + 8);
        *(void *)uint64_t buf = a3 + 10;
        while (v77 != v78)
        {
          uint64_t v79 = (*v77 - 1);
          else {
            uint64_t v80 = 0LL;
          }
          std::string __p = v80;
          sub_1000BBDB4((uint64_t *)buf, &__p);
          ++v77;
        }
      }
    }

    *((_DWORD *)a3 + 40) = sub_1000954B4(*(void *)(a1 + 96));
    uint64_t v81 = *(void *)(a1 + 96);
    *((_DWORD *)a3 + 42) = *(_DWORD *)(v81 + 204);
    *((_DWORD *)a3 + 45) = sub_100096B20(v81);
    uint64_t v82 = *(void *)(a1 + 96);
    *((_DWORD *)a3 + 46) = (*(void *)(v82 + 240) - *(void *)(v82 + 232)) >> 5;
    *(uint64_t *)((char *)a3 + 188) = *(void *)(v82 + 216);
    *((_DWORD *)a3 + 49) = *(_DWORD *)(v82 + 224);
    *((_DWORD *)a3 + 41) = *(_DWORD *)(v82 + 200);
    *(uint64_t *)((char *)a3 + 172) = *(void *)(v82 + 208);
  }

  *((_OWORD *)a3 + 8) = *a2;
  *(_OWORD *)((char *)a3 + 137) = *(_OWORD *)((char *)a2 + 9);
  sub_10000CE18((uint64_t)buf);
  v83 = (uint64_t *)a3[1];
  for (uint64_t i = (uint64_t *)a3[2]; v83 != i; ++v83)
  {
    sub_1000F7124(*v83, &__p);
    if (v139 >= 0) {
      uint64_t v85 = &__p;
    }
    else {
      uint64_t v85 = __p;
    }
    if (v139 >= 0) {
      uint64_t v86 = HIBYTE(v139);
    }
    else {
      uint64_t v86 = v139;
    }
    uint64_t v87 = sub_10000CF44(&buf[16], (uint64_t)v85, v86);
    sub_10000CF44(v87, (uint64_t)" ", 1LL);
    if (SHIBYTE(v139) < 0) {
      operator delete(__p);
    }
  }

  std::stringbuf::str(&v142, (const std::stringbuf *)&buf[24]);
  sub_10000CE18((uint64_t)&__p);
  v88 = (uint64_t *)a3[10];
  for (j = (uint64_t *)a3[11]; v88 != j; ++v88)
  {
    sub_1000F7138(*v88, v143);
    if (SBYTE3(v146) >= 0) {
      uint64_t v90 = v143;
    }
    else {
      uint64_t v90 = *(uint8_t **)v143;
    }
    if (SBYTE3(v146) >= 0) {
      uint64_t v91 = BYTE3(v146);
    }
    else {
      uint64_t v91 = *(void *)v144;
    }
    v92 = sub_10000CF44((void *)&v139 + 1, (uint64_t)v90, v91);
    sub_10000CF44(v92, (uint64_t)" ", 1LL);
    if (SBYTE3(v146) < 0) {
      operator delete(*(void **)v143);
    }
  }

  std::stringbuf::str(&v137, &v140);
  if (*((_BYTE *)a3 + 152))
  {
    v93 = operator new(0x28uLL);
    v135 = v93;
    v136 = xmmword_1012C8460;
    char *v93 = 0u;
    v93[1] = 0u;
    *(void *)((char *)v93 + 29) = 0LL;
    sub_10000AE6C((uint64_t)(a3 + 17), v93);
  }

  else
  {
    sub_1010DDBC0(&v135, "None");
  }

  if (*((_BYTE *)a3 + 152)) {
    sub_1000F714C(a3[16], v133);
  }
  else {
    sub_1010DDBC0(v133, "None");
  }
  if (*(_BYTE *)(a1 + 457))
  {
    if (*(_BYTE *)(a1 + 456)) {
      unint64_t v94 = "low latency";
    }
    else {
      unint64_t v94 = "not low latency";
    }
  }

  else
  {
    unint64_t v94 = "stopped";
  }

  sub_1010DDBC0(v131, v94);
  if (qword_1019348E0 != -1) {
    dispatch_once(&qword_1019348E0, &stru_10181F1C0);
  }
  double v95 = (os_log_s *)qword_1019348E8;
  if (os_log_type_enabled((os_log_t)qword_1019348E8, OS_LOG_TYPE_DEFAULT))
  {
    double v96 = operator new(0x28uLL);
    v129 = v96;
    v130 = xmmword_1012C8460;
    *double v96 = 0u;
    v96[1] = 0u;
    *(void *)((char *)v96 + 29) = 0LL;
    sub_10000AE6C(a1 + 8, v96);
    if (v130 >= 0) {
      v97 = &v129;
    }
    else {
      v97 = v129;
    }
    v98 = (void *)(a1 + 40);
    v99 = *(_DWORD *)(a1 + 24);
    sub_1010DDBC0(v127, (&off_10181F250)[*a3]);
    v100 = v128;
    v101 = (void **)v127[0];
    int64_t size = (char)v142.__r_.__value_.__s.__size_;
    __int16 v103 = v142.__r_.__value_.__r.__words[0];
    sub_1000F7190(a3[9], v125);
    BOOL v104 = &v142;
    if (size < 0) {
      BOOL v104 = (std::stringbuf::string_type *)v103;
    }
    v105 = (void **)v125[0];
    __int128 v106 = v127;
    if (v100 < 0) {
      __int128 v106 = v101;
    }
    char v107 = (std::stringbuf::string_type *)v137.__r_.__value_.__r.__words[0];
    if (v126 >= 0) {
      v105 = v125;
    }
    if ((v137.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v107 = &v137;
    }
    v108 = &v135;
    if (v136 < 0) {
      v108 = v135;
    }
    v109 = (void **)v133[0];
    if (v134 >= 0) {
      v109 = v133;
    }
    v110 = v131;
    if (v132 < 0) {
      v110 = (void **)v131[0];
    }
    v111 = *((_DWORD *)a3 + 40);
    v112 = *((_DWORD *)a3 + 41);
    v114 = *((_DWORD *)a3 + 42);
    v113 = *((_DWORD *)a3 + 43);
    v115 = *((_DWORD *)a3 + 44);
    v116 = *((_DWORD *)a3 + 45);
    v117 = *((_DWORD *)a3 + 46);
    v118 = *((_DWORD *)a3 + 47);
    v119 = *((_DWORD *)a3 + 48);
    v120 = *((_DWORD *)a3 + 49);
    *(_DWORD *)v143 = 68294147;
    *(_DWORD *)&v143[4] = 0;
    *(_WORD *)v144 = 2082;
    *(void *)&v144[2] = "";
    v145 = 2082;
    v146 = v97;
    v147 = 2082;
    v148 = v98;
    v149 = 1026;
    v150 = v99;
    v151 = 2082;
    v152 = v106;
    v153 = 2082;
    v154 = v104;
    v155 = 2082;
    v156 = v105;
    v157 = 2082;
    v158 = v107;
    v159 = 2081;
    v160 = v108;
    v161 = 2081;
    v162 = v109;
    v163 = 2082;
    v164 = v110;
    v165 = 1026;
    v166 = v111;
    v167 = 1026;
    v168 = v112;
    v169 = 1026;
    v170 = v114;
    v171 = 1026;
    v172 = v115;
    v173 = 1026;
    v174 = v113;
    v175 = 1026;
    v176 = v116;
    v177 = 1026;
    v178 = v117;
    v179 = 1026;
    v180 = v118;
    v181 = 1026;
    v182 = v119;
    v183 = 1026;
    v184 = v120;
    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoService send status to client: , ServiceId:%{public, location:escape_only}s,  ClientId:%{public, location:escape_only}s, Service Type:%{public}u, State:%{public, location:escape_only }s, Suspend Reasons:%{public, location:escape_only}s, Quality:%{public, location:escape_only}s, Quality Reasons:%{public, location:escape_only}s, Current LOI ID:%{private, location:escape_only}s, Current LOI Ty pe:%{private, location:escape_only}s, Updates Status::%{public, location:escape_only}s, Number of clusters learned in model:%{public}u, Number of Recording triggers at current LOI:%{public}u, Number of Input Vali d Fingerprints:%{public}u, Number of Input Valid Fingerprints Labeled:%{public}u, Number of Input Valid Fi ngerprints Unlabeled:%{public}u, Number of Fingerprints Before Pruning:%{public}u, Number of Fingerprints After Pruning:%{public}u, Number of WiFi Access Points:%{public}u, Number of Ble Sources:%{public}u, N umber of Uwb Sources:%{public}u}",  v143,  0xAEu);
    if (v126 < 0) {
      operator delete(v125[0]);
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    if (SHIBYTE(v130) < 0) {
      operator delete(v129);
    }
  }

  if (v132 < 0) {
    operator delete(v131[0]);
  }
  if (v134 < 0) {
    operator delete(v133[0]);
  }
  if (SHIBYTE(v136) < 0) {
    operator delete(v135);
  }
  *(void **)((char *)&__p
  *((void *)&v139 + 1) = v122;
  std::streambuf::~streambuf(&v140);
  std::ios::~ios(&v141);
  *(void *)uint64_t buf = v121;
  *(void *)&buf[*(void *)(v121 - 24)] = v123;
  *(void *)&buf[16] = v122;
  if (v191 < 0) {
    operator delete(v190);
  }
  std::streambuf::~streambuf(&buf[24]);
  return std::ios::~ios(&v192);
}

  ++result[3];
  return result;
}

    *(void *)uint64_t buf = *(void *)(v7 + 8);
    sub_1001390F8((uint64_t)&v16, buf);
    goto LABEL_15;
  }

  int v8 = *(_DWORD *)(v7 + 28);
  if ((v8 & 1) != 0) {
    goto LABEL_14;
  }
  if ((v8 & 2) == 0)
  {
LABEL_4:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820920);
    }
    uint64_t v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unknown device id", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820920);
      }
      v15[0] = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Unknown device id",  v15,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static CLMicroLocationFingerprint::Measurement CLMicroLocationFingerprint::Measurement::fromProtobuf(const CLMic roLocationProto::FingerprintMeasurement &)",  "%s\n",  v13);
    }

    sub_10013C2C0((uint64_t)&v16, &v16, "Unknown");
    goto LABEL_15;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0AA8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 40),  a3);
  if ((*(_DWORD *)(v5 + 60) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 48),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(float *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0C20 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
  {
LABEL_17:
    unsigned int v10 = *(void *)(v5 + 32);
    if (!v10) {
      unsigned int v10 = *(void *)(qword_1019A0C20 + 32);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(double *)(a1 + 32) = result;
    if ((*(_DWORD *)(a2 + 52) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    uint64_t result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(double *)(a1 + 40) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 28),  a3);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 32),  (BOOL)a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
    if ((*(_DWORD *)(v5 + 76) & 0x80) == 0) {
      return result;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 80),  (BOOL)a2,  a4);
  uint64_t v7 = *(_DWORD *)(v5 + 88);
  if ((v7 & 0x10) == 0)
  {
LABEL_8:
    if ((v7 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 24),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  if (v8 == *a4)
  {
LABEL_19:
    uint64_t v16 = (__int128 *)a4[1];
    while ((__int128 *)v8 != v16)
    {
      if (*(_DWORD *)(v8 + 40) != a2)
      {
        if ((__int128 *)v8 != v16)
        {
          for (j = (__int128 *)(v8 + 112); j != v16; j += 7)
          {
            if (*((_DWORD *)j + 10) == a2)
            {
              uint64_t v18 = *j;
              uint64_t v19 = j[2];
              *(_OWORD *)(v8 + 16) = j[1];
              *(_OWORD *)(v8 + 32) = v19;
              *(_OWORD *)int v8 = v18;
              uint64_t v20 = j[3];
              uint64_t v21 = j[4];
              unsigned int v22 = j[6];
              *(_OWORD *)(v8 + 80) = j[5];
              *(_OWORD *)(v8 + 96) = v22;
              *(_OWORD *)(v8 + 48) = v20;
              *(_OWORD *)(v8 + 64) = v21;
              v8 += 112LL;
            }
          }
        }

        goto LABEL_16;
      }

      v8 += 112LL;
    }
  }

  else
  {
    uint64_t v16 = (__int128 *)a4[1];
LABEL_16:
  }

  return result;
}

  PBDataWriterWriteInt32Field(a3, self->_exitState, 8LL);
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    goto LABEL_15;
  }
}

  *((_DWORD *)a3 + 5) = self->_exitState;
  *((_BYTE *)a3 + 44) |= 2u;
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    goto LABEL_15;
  }
}

  *((_BYTE *)result + 40) = self->_isMoving;
  *((_BYTE *)result + 44) |= 0x20u;
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_7:
    if ((has & 1) == 0) {
      return result;
    }
    goto LABEL_8;
  }

  self->_exitState = *((_DWORD *)a3 + 5);
  *(_BYTE *)&self->_has |= 2u;
  if ((*((_BYTE *)a3 + 44) & 1) != 0) {
    goto LABEL_15;
  }
}

  PBDataWriterWriteInt32Field(a3, self->_mountedConfidence, 4LL);
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  *((_DWORD *)a3 + 10) = self->_mountedConfidence;
  *((_WORD *)a3 + 30) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  self->_mountedConfidence = *((_DWORD *)a3 + 10);
  *(_WORD *)&self->_has |= 0x10u;
  uint64_t v3 = *((_WORD *)a3 + 30);
  if ((v3 & 0x80) == 0)
  {
LABEL_5:
    if ((v3 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  v5[3] = (id)self->_securityKey;
  *((_BYTE *)v5 + 68) |= 4u;
  has = (char)self->_has;
  if ((has & 1) == 0)
  {
LABEL_6:
    if ((has & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  self->_securityKey = *((void *)a3 + 3);
  *(_BYTE *)&self->_has |= 4u;
  uint64_t v5 = *((_BYTE *)a3 + 68);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

        uint64_t v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }

      uint64_t v7 = v4[3];
LABEL_6:
      for (j = i; ; j -= 2)
      {
        uint64_t v9 = *j;
        j[1] = v6;
        j[2] = v9;
        int v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2))) {
          break;
        }
      }

      *(j - 1) = v5;
      void *j = v7;
      goto LABEL_14;
    }
  }

  return result;
}

    ++v2;
  }

  while (v2 < *(unsigned __int16 *)(a1 + 2146));
  if (v3 > 18)
  {
    uint64_t v9 = a1;
    unsigned int v10 = 3;
    goto LABEL_31;
  }

  if (v4 >= 19)
  {
    uint64_t v9 = a1;
    unsigned int v10 = 5;
    goto LABEL_31;
  }

  if (v5 >= 19)
  {
    uint64_t v9 = a1;
    unsigned int v10 = 4;
    goto LABEL_31;
  }

  if (v7 < 13)
  {
    if (*(_BYTE *)(a1 + 8440) && v6 >= 19)
    {
      uint64_t v9 = a1;
      unsigned int v10 = 2;
      goto LABEL_31;
    }
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10183BA18);
    }
    int v11 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Tier2Smoother attemped de-escalating due to Unknown calls in Tier 2 Classifier",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10183BA18);
      }
      v16[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Tier2Smoother attemped de-escalating due to Unknown calls in Tier 2 Classifier",  v16,  2);
      int v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictorTier2Smoother::evaluateTier2ClassifierBuffer()",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    uint64_t v9 = a1;
    unsigned int v10 = 8;
LABEL_31:
    sub_100CCCC8C(v9, v10, (uint64_t)buf);
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(double *)(a1 + 24) = result;
    int v6 = *(_DWORD *)(a2 + 60);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 64),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(v5 + 24),  (unint64_t)a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
  }
  return result;
}

    unsigned int v10 = *(_DWORD *)(a2 + 20);
    a1[8] |= 8u;
    a1[5] = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = *(_DWORD *)(a2 + 24);
    a1[8] |= 0x10u;
    a1[6] = v6;
  }

  DWORD1(v71) = 2;
LABEL_15:
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101843788);
  }
  uint64_t v18 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(_DWORD *)a3;
    uint64_t v20 = *((_DWORD *)a3 + 1);
    *(_DWORD *)uint64_t buf = 67241216;
    *(_DWORD *)&uint8_t buf[4] = v19;
    uint64_t v81 = 1026;
    *(_DWORD *)uint64_t v82 = v20;
    *(_WORD *)&v82[4] = 1026;
    *(_DWORD *)&v82[6] = v17;
    LOWORD(v83) = 1026;
    *(_DWORD *)((char *)&v83 + 2) = DWORD1(v71);
    HIWORD(v83) = 1026;
    LODWORD(v84) = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "In vehicle detected Adjusting motion state,type,%{public}d,confidence,%{public}d,to type,%{public}d,confidence,%{p ublic}d,isSpeedZero,%{public}d",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101843788);
    }
    uint64_t v21 = *(_DWORD *)a3;
    unsigned int v22 = *((_DWORD *)a3 + 1);
    uint64_t v63 = 67241216;
    uint64_t v64 = v21;
    uint64_t v65 = 1026;
    *(_DWORD *)unint64_t v66 = v22;
    *(_WORD *)&v66[4] = 1026;
    *(_DWORD *)&v66[6] = v17;
    LOWORD(v67) = 1026;
    *(_DWORD *)((char *)&v67 + 2) = DWORD1(v71);
    HIWORD(v67) = 1026;
    LODWORD(v68) = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "In vehicle detected Adjusting motion state,type,%{public}d,confidence,%{public}d,to type,%{public}d,confidence,%{p ublic}d,isSpeedZero,%{public}d",  &v63,  32);
    uint64_t v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLLocationControllerFusion::feedMotionNotification(const CLMotionState_Type::Notification &, const CL MotionState_Type::NotificationData &)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
  }

    -[CLUsageSyncManager client:didChangeUsageDataInternal:](self, "client:didChangeUsageDataInternal:", a3, a4);
    return;
  }

  if (!sub_1004F7500()) {
    goto LABEL_14;
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018441C0);
  }
  int v8 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = 68289026;
    int v11 = 0;
    unint64_t v12 = 2082;
    uint64_t v13 = "";
    uint64_t v9 = "{msg%{public}.0s:#didChangeUsageData dropping companion usage data change}";
    goto LABEL_12;
  }

  *((_DWORD *)a3 + 9) = self->_tileY;
  *((_BYTE *)a3 + 44) |= 8u;
  has = (char)self->_has;
  if ((has & 1) != 0) {
    goto LABEL_15;
  }
LABEL_5:
  if ((has & 2) != 0)
  {
LABEL_6:
    *((_DWORD *)a3 + 4) = self->_expirationAgeSecs;
    *((_BYTE *)a3 + 44) |= 2u;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  int v6 = v5[13];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

    unsigned int v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 20) = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_DWORD *)(a1 + 24) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  int v6 = v5[11];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

    unsigned int v10 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 20) = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_DWORD *)(a1 + 24) = v6;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1240 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0)
  {
LABEL_17:
    unsigned int v10 = *(void *)(v5 + 32);
    if (!v10) {
      unsigned int v10 = *(void *)(qword_1019A1240 + 32);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  }

  return result;
}

  if ((v5 & 0x100) != 0)
  {
    int v8 = *(_BYTE *)(a2 + 39);
    *(_DWORD *)(a1 + 52) |= 0x100u;
    *(_BYTE *)(a1 + 39) = v8;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 16), a2);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 60);
    }

    else
    {
      unsigned int v10 = 1;
    }

    uint64_t v4 = (v4 + v10 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 60);
  }

  else
  {
    unint64_t v12 = 1;
  }

  uint64_t v4 = (v4 + v12 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  a2,  a4);
  int v6 = v5[11];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  a2,  a4);
  if ((v5[10] & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[8],  a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

    uint64_t v9 = *(_DWORD *)(a2 + 16);
    a1[9] |= 4u;
    a1[4] = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 36),  a2,  a4);
    if ((*(_DWORD *)(v5 + 52) & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A13A0 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0) {
LABEL_6:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  a2,  a4);
LABEL_7:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(*(void *)(v5 + 24) + 4 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 32));
  }

  return result;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  if ((v5[10] & 0x40) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

    unsigned int v10 = *(_DWORD *)(a2 + 20);
    a1[8] |= 8u;
    a1[5] = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = *(_DWORD *)(a2 + 24);
    a1[8] |= 0x10u;
    a1[6] = v6;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
    if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      uint64_t v3 = a1[17];
    }

    else
    {
      unsigned int v10 = 1;
    }

    uint64_t v4 = (v4 + v10 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    uint64_t v3 = a1[17];
  }

  else
  {
    unint64_t v12 = 1;
  }

  uint64_t v4 = (v4 + v12 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
    if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      uint64_t v3 = a1[16];
    }

    else
    {
      unsigned int v10 = 1;
    }

    uint64_t v4 = (v4 + v10 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    uint64_t v3 = a1[16];
  }

  else
  {
    unint64_t v12 = 1;
  }

  uint64_t v4 = (v4 + v12 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1470 + 16);
    }
    unsigned int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10063C3B4(v9, a2);
    int v11 = (int)v10;
    else {
      unint64_t v12 = 1;
    }
    v4 += v11 + v12 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 68);
    if ((v3 & 0x10) == 0)
    {
LABEL_16:
      if ((v3 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_30;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_16;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 68);
  }

  else
  {
    uint64_t v14 = 2;
  }

  v4 += v14;
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 48),  a2,  a4);
  if ((*(_DWORD *)(v5 + 60) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 52),  a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      unsigned int v10 = 1;
    }

    LODWORD(v4) = v4 + v10 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_27;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    unint64_t v12 = 2;
  }

  LODWORD(v4) = v12 + v4;
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A14B8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

    uint64_t v9 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_BYTE *)(a1 + 24) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 44) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(double *)(a1 + 32) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

    v3 += 152LL;
  }

  while (v3 != v4);
  uint64_t v2 = v49;
  if (*v49 != v49[1])
  {
    uuid_unparse((const unsigned __int8 *)(*v49 + 24LL), out);
    uuid_unparse((const unsigned __int8 *)(*v49 + 8LL), (char *)out_34 + 3);
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1818 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_20:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(float *)(v5 + 48),  a3);
    if ((*(_DWORD *)(v5 + 56) & 0x20) == 0) {
      return result;
    }
    goto LABEL_21;
  }

      uint64_t v24 = 0;
LABEL_16:
      uint64_t v25 = *a2;
      uint64_t v26 = a2[2];
      if (v26 - *a2 < 360.0 && v18 < 360.0)
      {
        uint64_t v27 = vabdd_f64(v16, v25);
        uint64_t v28 = 180.0;
        if (v27 == 180.0) {
          goto LABEL_19;
        }
        uint64_t v29 = v16 - v25;
        if (COERCE__INT64(fabs(v16 - v25)) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_73;
        }
        unsigned int v47 = fabs(v27 + -180.0);
        if (v27 < 180.0) {
          uint64_t v27 = 180.0;
        }
        v48 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
        uint64_t v42 = v47 > v48;
        uint64_t v28 = 180.0;
        if (v42)
        {
LABEL_73:
          if (v29 <= 180.0)
          {
            if (v29 < -180.0)
            {
              uint64_t v28 = fmod(v29 + -180.0, 360.0) + 180.0;
              goto LABEL_19;
            }
          }

          else
          {
            uint64_t v29 = fmod(v29 + 180.0, 360.0) + -180.0;
            uint64_t v28 = 180.0;
            if (v29 == -180.0) {
              goto LABEL_19;
            }
            v49 = ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
               && (*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v49 || *(void *)&v29 == 0LL)
            {
              unsigned int v51 = fabs(v29 + 180.0);
              uint8_t v52 = fabs(v29);
              if (v52 < 180.0) {
                uint8_t v52 = 180.0;
              }
              char v53 = v52 >= 1.0 ? v52 * 2.22044605e-16 : 2.22044605e-16;
              uint64_t v42 = v51 > v53;
              uint64_t v28 = 180.0;
              if (!v42) {
                goto LABEL_19;
              }
            }
          }
        }

        else
        {
LABEL_19:
          uint64_t v29 = v28;
        }

        if (v29 < 0.0) {
          uint64_t v29 = v29 + 360.0;
        }
        uint64_t v30 = v25 + v29;
        uint64_t v31 = v18 + v25 + v29 + -360.0;
        if (vabdd_f64(v31, v17) < 180.0) {
          uint64_t v31 = v17;
        }
        if (v30 > v26 && v31 < v25) {
          goto LABEL_28;
        }
      }

      if (a2[3] >= *(double *)(v13 + 40) && a2[1] <= *(double *)(v13 + 56))
      {
        if (v24)
        {
          uint64_t v55 = a6[1];
          uint64_t v54 = (unint64_t)a6[2];
          if ((unint64_t)v55 >= v54)
          {
            uint64_t v64 = ((char *)v55 - (_BYTE *)*a6) >> 3;
            uint64_t v65 = v54 - (void)*a6;
            unint64_t v66 = v65 >> 2;
            else {
              uint64_t v67 = v66;
            }
            if (v67)
            {
              uint64_t v68 = (char *)sub_1000071BC(v82, v67);
              uint64_t v13 = *v6;
            }

            else
            {
              uint64_t v68 = 0LL;
            }

            uint64_t v74 = &v68[8 * v64];
            *(void *)uint64_t v74 = v13;
            uint64_t v56 = v74 + 8;
            uint64_t v76 = (char *)*a6;
            uint64_t v75 = (char *)a6[1];
            if (v75 != *a6)
            {
              do
              {
                uint64_t v77 = *((void *)v75 - 1);
                v75 -= 8;
                *((void *)v74 - 1) = v77;
                v74 -= 8;
              }

              while (v75 != v76);
              uint64_t v75 = (char *)*a6;
            }

            *a6 = v74;
            a6[1] = v56;
            a6[2] = &v68[8 * v67];
            if (v75) {
              operator delete(v75);
            }
          }

          else
          {
            *uint64_t v55 = v13;
            uint64_t v56 = v55 + 1;
          }

          a6[1] = v56;
        }

        else
        {
          uint64_t v58 = a5[1];
          uint64_t v57 = (unint64_t)a5[2];
          if ((unint64_t)v58 >= v57)
          {
            uint64_t v69 = ((char *)v58 - (_BYTE *)*a5) >> 3;
            uint64_t v70 = v57 - (void)*a5;
            uint64_t v71 = v70 >> 2;
            else {
              uint64_t v72 = v71;
            }
            if (v72)
            {
              uint64_t v73 = (char *)sub_1000071BC(v83, v72);
              uint64_t v13 = *v6;
            }

            else
            {
              uint64_t v73 = 0LL;
            }

            uint64_t v78 = &v73[8 * v69];
            *(void *)uint64_t v78 = v13;
            unint64_t v59 = v78 + 8;
            uint64_t v80 = (char *)*a5;
            uint64_t v79 = (char *)a5[1];
            if (v79 != *a5)
            {
              do
              {
                uint64_t v81 = *((void *)v79 - 1);
                v79 -= 8;
                *((void *)v78 - 1) = v81;
                v78 -= 8;
              }

              while (v79 != v80);
              uint64_t v79 = (char *)*a5;
            }

            *a5 = v78;
            a5[1] = v59;
            a5[2] = &v73[8 * v72];
            if (v79) {
              operator delete(v79);
            }
          }

          else
          {
            *uint64_t v58 = v13;
            unint64_t v59 = v58 + 1;
          }

          a5[1] = v59;
        }

        goto LABEL_103;
      }

  uint64_t v21 = 1LL;
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  return v21;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 24),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

    unsigned int v10 = a2[11];
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 11) = v10;
    if ((*((_DWORD *)a2 + 5) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = a2[12];
    *(_DWORD *)(a1 + 20) |= 0x10u;
    *(_BYTE *)(a1 + 12) = v6;
  }

    unsigned int v10 = a2[11];
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 11) = v10;
    if ((*((_DWORD *)a2 + 5) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = a2[12];
    *(_DWORD *)(a1 + 20) |= 0x10u;
    *(_BYTE *)(a1 + 12) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(double *)(a1 + 32) = result;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    uint64_t v7 = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 40) = v7;
  }

  return result;
}

    uint64_t result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    uint64_t v7 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_BYTE *)(a1 + 24) = v7;
  }

  return result;
}

    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(double *)(a1 + 32) = result;
    if ((*(_DWORD *)(a2 + 52) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    uint64_t result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(double *)(a1 + 40) = result;
  }

  return result;
}

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 8u;
    *(double *)(a1 + 24) = result;
    if ((*(_DWORD *)(a2 + 40) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    LODWORD(result) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 32) = LODWORD(result);
  }

  return result;
}

    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(void *)(a1 + 32) = v9;
    if ((*(_DWORD *)(a2 + 44) & 0x10) == 0) {
      return;
    }
    goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v4,  *(float *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

    dispatch_once(&qword_1019344E0, &stru_10186A848);
    goto LABEL_7;
  }

  int v8 = *(void *)(v5 + 16);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1BF0 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 44),  a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 48),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_score),  @"score");
  has = (char)self->_has;
  if ((has & 0x10) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((has & 4) != 0) {
LABEL_8:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_infoMask),  @"infoMask");
  return v3;
}

  PBDataWriterWriteInt32Field(a3, self->_reach, 12LL);
  if ((*(_BYTE *)&self->_has & 4) != 0) {
    goto LABEL_15;
  }
}

  *((_DWORD *)a3 + 11) = self->_reach;
  *((_BYTE *)a3 + 56) |= 0x10u;
  if ((*(_BYTE *)&self->_has & 4) != 0) {
    goto LABEL_15;
  }
}

  *((_DWORD *)result + 12) = self->_score;
  *((_BYTE *)result + 56) |= 0x20u;
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      return result;
    }
    goto LABEL_8;
  }

  self->_reach = *((_DWORD *)a3 + 11);
  *(_BYTE *)&self->_has |= 0x10u;
  if ((*((_BYTE *)a3 + 56) & 4) != 0) {
    goto LABEL_15;
  }
}

  uint64_t result = fmin(v8 * v7, 0.3);
  a1[8] = v12;
  return result;
}

  PBDataWriterWriteInt32Field(a3, self->_cellID, 3LL);
  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
LABEL_5:
  }
    PBDataWriterWriteInt32Field(a3, self->_tacID, 4LL);
LABEL_6:
  location = self->_location;
  if (location) {
    PBDataWriterWriteSubmessage(a3, location, 5LL);
  }
  uint64_t v7 = (char)self->_has;
  if ((v7 & 0x20) != 0)
  {
    PBDataWriterWriteInt32Field(a3, self->_uarfcn, 6LL);
    uint64_t v7 = (char)self->_has;
  }

  if ((v7 & 8) != 0) {
    PBDataWriterWriteInt32Field(a3, self->_pid, 7LL);
  }
}

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    uint64_t v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }

  int v8 = *(_DWORD *)(a2 + 48);
  if (v8 >= 5) {
    sub_101264D30();
  }
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_DWORD *)(a1 + 48) = v8;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_21:
    *(_DWORD *)(a1 + 56) |= 0x10u;
    int v11 = *(char **)(a1 + 24);
    if (!v11)
    {
      int v11 = (char *)operator new(0x38uLL);
      *(void *)int v11 = &off_101876248;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_OWORD *)(v11 + 40) = 0u;
      *(void *)(a1 + 24) = v11;
    }

    unint64_t v12 = *(void *)(a2 + 24);
    if (!v12) {
      unint64_t v12 = *(void *)(qword_1019A1E40 + 24);
    }
    sub_100BC5B14((uint64_t)v11, v12);
    uint64_t v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_31;
    }

    goto LABEL_26;
  }

  if ((v3 & 4) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v7 = 11;
    }

    else if (v6 >= 0x80)
    {
      uint64_t v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }

    else
    {
      uint64_t v7 = 2;
    }

    uint64_t v4 = (v7 + v4);
  }

    unsigned int v10 = *(_BYTE *)(a2 + 25);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_BYTE *)(a1 + 25) = v10;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = *(_BYTE *)(a2 + 26);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_BYTE *)(a1 + 26) = v6;
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }

    goto LABEL_49;
  }

  if ((_DWORD)v5 == 34 || (_DWORD)v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  uint64_t v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    uint64_t v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      uint64_t v9 = a2[2];
      unsigned int v10 = v9 & 0xF8;
      int v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        uint64_t v7 = v11;
      }
      goto LABEL_39;
    }
  }

  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    sub_10111FBF0(a1, v7);
  }
  return v8;
}

  *a3 = v18;
  return 1LL;
}

  *(_WORD *)(a1 + 8) = 2;
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10187FBE0);
  }
  uint64_t v14 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(unsigned __int16 *)(a1 + 8);
    char v17 = 68289538;
    uint64_t v18 = 0;
    uint64_t v19 = 2082;
    uint64_t v20 = "";
    uint64_t v21 = 1026;
    LODWORD(v22[0]) = v15;
    WORD2(v22[0]) = 1026;
    *(_DWORD *)((char *)v22 + 6) = (v13.__d_.__rep_ - v6.__d_.__rep_) / 1000000;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Activity runner: activity finished, State:%{public}u, Time elapsed (ms):%{public}u}",  (uint8_t *)&v17,  0x1Eu);
  }

  return a1;
}

      *(_OWORD *)(a1 + 1744) = 0u;
      *(_OWORD *)(a1 + 1728) = 0u;
      *(_OWORD *)(a1 + 1712) = 0u;
      *(_OWORD *)(a1 + 1696) = 0u;
      *(_OWORD *)(a1 + 1680) = 0u;
      *(_OWORD *)(a1 + 1664) = 0u;
      *(_OWORD *)(a1 + 1648) = 0u;
      *(_OWORD *)(a1 + 1632) = 0u;
      *(_OWORD *)(a1 + 1616) = 0u;
      *(_OWORD *)(a1 + 1600) = 0u;
      *(_OWORD *)(a1 + 1584) = 0u;
      *(_OWORD *)(a1 + 1568) = 0u;
      *(_OWORD *)(a1 + 1552) = 0u;
      *(_OWORD *)(a1 + 1536) = 0u;
      *(_OWORD *)(a1 + 1520) = 0u;
      *(_OWORD *)(a1 + 1504) = 0u;
      goto LABEL_15;
    }

        uint64_t v23 = &qword_1019A2000;
        *(void *)(v29 + 8) = v19;
        *(void *)(qword_1019A2128 + 8) = v19;
        uint64_t v30 = qword_1019A2130;
        goto LABEL_15;
      }
    }

    *(void *)(v28 + 8) = v19;
    *(void *)(qword_1019A2118 + 8) = v19;
    uint64_t v29 = qword_1019A2120;
    goto LABEL_14;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

    sub_100EED3F0(a1);
    return;
  }

  if ((sub_1004F7000() & 1) != 0
    || ((sub_1004F2598(), int v6 = sub_1001B9A1C(), byte_1019A4098) ? (v7 = v6) : (v7 = 0), (v7 & 1) != 0))
  {
    int v8 = (char *)operator new(0xB8uLL);
    sub_100EF2E38(v8, a1);
    sub_100EEEFFC((uint64_t *)(a1 + 192), (uint64_t)v8);
    return;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10188BAB8);
  }
  unsigned int v10 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#ADR,issueIDSBatchQuery,the device is neither a phone nor a tinker supported watch",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10188BAB8);
    }
    v15[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#ADR,issueIDSBatchQuery,the device is neither a phone nor a tinker supported watch",  v15,  2);
    uint64_t v14 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyADR::issueIDSBatchIDQuery()", "%s\n", v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  sub_1004F2598();
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 24),  a3);
  if ((*(_DWORD *)(v5 + 48) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 32),  a3);
  }
  return result;
}

  if (*(int *)(v5 + 40) >= 1)
  {
    unsigned int v10 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(*(void *)(v5 + 32) + 8 * v10++),  a2,  a4);
    while (v10 < *(int *)(v5 + 40));
  }

  int v11 = *(_DWORD *)(v5 + 72);
  if ((v11 & 0x10) == 0)
  {
    if ((v11 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(float *)(v5 + 64),  a3);
  }

  unint64_t v12 = *(void *)(v5 + 56);
  if (!v12) {
    unint64_t v12 = *(void *)(qword_1019A40C0 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v12,  a2,  a4);
  if ((*(_DWORD *)(v5 + 72) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(float *)(v5 + 64),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  if ((unint64_t)a3 | (unint64_t)a4)
  {
    if (a3 || !a4)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101892BF0);
      }
      uint64_t v9 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "synchronizing clientInfo to CLCAC with invalid combination of arguments",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101892BF0);
        }
        v21[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "synchronizing clientInfo to CLCAC with invalid combination of arguments",  v21,  2);
        uint64_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLClientAuthorizationCache setPersistentStoreDictionary:forClient:]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }
    }

    else
    {
      -[NSMutableDictionary removeObjectForKey:]( -[CLClientAuthorizationCache clientKeyToClientInfoMap](self, "clientKeyToClientInfoMap"),  "removeObjectForKey:",  a4);
    }
  }

  else
  {
    -[NSMutableDictionary removeAllObjects]( -[CLClientAuthorizationCache clientKeyToClientInfoMap](self, "clientKeyToClientInfoMap"),  "removeAllObjects");
  }

  *(float *)&uint64_t v4 = self->_speed;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  @"speed");
  if ((*(_BYTE *)&self->_has & 0x40) != 0)
  {
LABEL_6:
    *(float *)&uint64_t v4 = self->_rawSpeed;
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  @"rawSpeed");
  }

  PBDataWriterWriteFloatField(a3, 4LL, self->_speed);
  if ((*(_BYTE *)&self->_has & 0x40) != 0) {
LABEL_6:
  }
    PBDataWriterWriteFloatField(a3, 5LL, self->_rawSpeed);
LABEL_7:
  PBDataWriterWriteFloatField(a3, 6LL, self->_odometer);
  int v6 = (char)self->_has;
  if ((v6 & 0x10) != 0)
  {
    PBDataWriterWriteFloatField(a3, 7LL, self->_gpsSpeedAccuracy);
    int v6 = (char)self->_has;
    if ((v6 & 1) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        return;
      }
LABEL_18:
      PBDataWriterWriteInt32Field(a3, self->_quality, 9LL);
      return;
    }
  }

  else if ((*(_BYTE *)&self->_has & 1) == 0)
  {
    goto LABEL_9;
  }

  PBDataWriterWriteDoubleField(a3, 8LL, self->_timestampGps);
  if ((*(_BYTE *)&self->_has & 0x20) != 0) {
    goto LABEL_18;
  }
}

  *((_DWORD *)a3 + 11) = LODWORD(self->_speed);
  *((_BYTE *)a3 + 48) |= 0x80u;
  if ((*(_BYTE *)&self->_has & 0x40) != 0)
  {
LABEL_6:
    *((_DWORD *)a3 + 10) = LODWORD(self->_rawSpeed);
    *((_BYTE *)a3 + 48) |= 0x40u;
  }

  *((_DWORD *)result + 6) = LODWORD(self->_gpsAltitude);
  *((_BYTE *)result + 48) |= 8u;
  has = (char)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  self->_speed = *((float *)a3 + 11);
  *(_BYTE *)&self->_has |= 0x80u;
  if ((*((_BYTE *)a3 + 48) & 0x40) != 0)
  {
LABEL_6:
    self->_rawSpeed = *((float *)a3 + 10);
    *(_BYTE *)&self->_has |= 0x40u;
  }

      uint64_t v13 = (uint64_t *)*a2;
      if (*a1 == a2)
      {
        int v15 = a2;
      }

      else
      {
        if (v13)
        {
          uint64_t v14 = (uint64_t *)*a2;
          do
          {
            int v15 = v14;
            uint64_t v14 = (uint64_t *)v14[1];
          }

          while (v14);
        }

        else
        {
          uint64_t v16 = a2;
          do
          {
            int v15 = (uint64_t *)v16[2];
            char v17 = *v15 == (void)v16;
            uint64_t v16 = v15;
          }

          while (v17);
        }

        uint64_t v18 = *(unsigned __int16 *)((char *)v15 + 25);
        uint64_t v19 = *a5;
        uint64_t v20 = v18 >= v19;
        if (v18 == v19 && (v21 = *(unsigned __int16 *)((char *)v15 + 27), v22 = a5[1], uint64_t v20 = v21 >= v22, v21 == v22))
        {
        }

        else if (v20)
        {
          return sub_10101A47C((uint64_t)a1, a3, a5);
        }
      }

      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v7 < v8) {
      goto LABEL_14;
    }
    if (v8 < v7) {
      goto LABEL_9;
    }
  }

  else
  {
    if (v5 < v6) {
      goto LABEL_14;
    }
    if (v6 < v5) {
      goto LABEL_9;
    }
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "isFall", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 44), 6u);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 7u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "subType", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  int v8 = *(_DWORD *)(a2 + 28);
  v3 |= 0x20u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 28) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_16:
    unsigned int v10 = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(result + 36) = v3 | 8;
    *(_DWORD *)(result + 20) = v10;
    return result;
  }

  PB::TextFormatter::format(this, "varianceX", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x20) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "varianceZ", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
  if ((*(_BYTE *)(v3 + 36) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "inertialAccelY", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x68u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  int v8 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "ch4", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 1) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "pwrState", *(_DWORD *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 104),  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
    sub_10004C5F8( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  }

  return a1;
}

  PB::TextFormatter::format(this, "doubleTapCounter", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }

    goto LABEL_49;
  }

  if ((_DWORD)v5 == 34 || (_DWORD)v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  uint64_t v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    uint64_t v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      uint64_t v9 = a2[2];
      unsigned int v10 = v9 & 0xF8;
      int v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        uint64_t v7 = v11;
      }
      goto LABEL_39;
    }
  }

  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    sub_10111FBF0(a1, v7);
  }
  return v8;
}

    sub_100BFB804( (char **)a4,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3),  (__int128 *)(a4 + 24));
    if (sub_1011242B8(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(void *)(a4 + 8) == *(void *)a4) {
        unsigned int v10 = (uint64_t *)(a4 + 24);
      }
      else {
        unsigned int v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
  }

  uint64_t result = 0LL;
  *(void *)(a4 + 8) = *(void *)a4;
  return result;
}

  int v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 52) = v3;
  *(void *)(result + 8) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_16:
    unsigned int v10 = *(void *)(a2 + 16);
    *(_BYTE *)(result + 52) = v3 | 2;
    *(void *)(result + 16) = v10;
    return result;
  }

  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 8) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "sessionNumber", *(_DWORD *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x64u);
  if ((*(_BYTE *)(v3 + 52) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x65u);
  }
  return result;
}

  PB::TextFormatter::format(this, "timeToReachMaxThighAndShinAngleThreshold", *(float *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 44) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
LABEL_17:
    PB::TextFormatter::format(this, "vm", *(float *)(a1 + 40));
    return PB::TextFormatter::endObject(this);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "numValidBouts28Days", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 52) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
LABEL_17:
    PB::TextFormatter::format(this, "rejectionStatus", *(_DWORD *)(a1 + 48));
    return PB::TextFormatter::endObject(this);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  int v8 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 28) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_16:
    unsigned int v10 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 44) = v3 | 0x40;
    *(_DWORD *)(result + 40) = v10;
    return result;
  }

  PB::TextFormatter::format(this, "tapAcceptStatus", *(_DWORD *)(a1 + 36));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 7u);
  }
  return result;
}

  int v8 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 32) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_16:
    unsigned int v10 = *(_BYTE *)(a2 + 36);
    *(_BYTE *)(result + 40) = v3 | 0x40;
    *(_BYTE *)(result + 36) = v10;
    return result;
  }

  PB::TextFormatter::format(this, "laneNumber", *(_DWORD *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 0x20) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "trackProximity", *(_DWORD *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 36), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "filteredVo2Max", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "isWristDetectionEnabled", *(_BYTE *)(a1 + 38));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 37), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  int v8 = *(_BYTE *)(a2 + 42);
  v3 |= 0x40u;
  *(_BYTE *)(result + 44) = v3;
  *(_BYTE *)(result + 42) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_16:
    unsigned int v10 = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_BYTE *)(result + 41) = v10;
    return result;
  }

  PB::TextFormatter::format(this, "timeSinceLastRemagTrigger", *(void *)(a1 + 16));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 8) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "triggerCount", *(void *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 6u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 41), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "isBicycleRoutingActive", *(_BYTE *)(a1 + 10));
  uint64_t v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 13), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "outdoorCyclingStateMachineTo", *(_DWORD *)(a1 + 20));
  uint64_t v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 34), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "verticalRotationRateFiltered", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "walkSpeedFilteredSample", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 28), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  uint64_t v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "headingDeltaBufferVar", *(float *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 1) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 48) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
LABEL_17:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
    return PB::TextFormatter::endObject(this);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  if ((*(_BYTE *)(v3 + 64) & 2) != 0) {
LABEL_7:
  }
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
LABEL_8:
  uint64_t v5 = *(const PB::Base **)(v3 + 48);
  if (v5) {
    return PB::Writer::writeSubmessage(this, v5, 7u);
  }
  return result;
}

  int v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 56) = v3;
  *(void *)(result + 40) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_16:
    unsigned int v10 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(result + 56) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v10;
    return result;
  }

  PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "uncOdom", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 52), 6u);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "medianNorthAlignmentEstimateRad", *(double *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "estimated", *(_BYTE *)(a1 + 72));
  uint64_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  int v8 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 28) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_16:
    unsigned int v10 = *(_BYTE *)(a2 + 37);
    *(_BYTE *)(result + 40) = v3 | 0x40;
    *(_BYTE *)(result + 37) = v10;
    return result;
  }

  PB::TextFormatter::format(this, "rangeFrequency", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 36), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 37), 7u);
  }
  return result;
}

  PB::TextFormatter::format(this, "speedUncertainty", *(float *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 44) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
LABEL_17:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    return PB::TextFormatter::endObject(this);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "isAboveBelow", *(_BYTE *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "historicalQuiescenceDuration", *(float *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 64) = v3;
  *(double *)(a1 + 40) = result;
  uint64_t v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_16:
    uint64_t result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 64) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }

  PB::TextFormatter::format(this, "swingAccelY", *(double *)(a1 + 40));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x20) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v5 & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 7u);
  if ((*(_BYTE *)(v3 + 64) & 8) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 32), 8u);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(double *)(v5 + 40),  a3);
  if ((*(_DWORD *)(v5 + 64) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(double *)(v5 + 48),  a3);
  }
  return result;
}

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      unsigned int v10 = 11;
    }

    else if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 76);
    }

    else
    {
      unsigned int v10 = 2;
    }

    v4 += v10;
    if ((v3 & 8) == 0) {
      goto LABEL_32;
    }
LABEL_23:
    int v11 = *(void *)(a1 + 24);
    unint64_t v12 = *(unsigned __int8 *)(v11 + 23);
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v11 + 8);
    if ((v12 & 0x80u) == 0) {
      int v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      int v15 = v14;
    }
    if (v15 >= 0x80)
    {
      uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15,  a2);
      unint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v3 = *(_DWORD *)(a1 + 76);
      uint64_t v13 = *(_BYTE *)(v11 + 23);
    }

    else
    {
      uint64_t v16 = 1;
    }

    if (v13 < 0) {
      unint64_t v12 = v14;
    }
    v4 += v16 + v12 + 1;
    goto LABEL_32;
  }

  if ((v3 & 8) != 0) {
    goto LABEL_23;
  }
LABEL_32:
  char v17 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    char v17 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t v3 = v17 + 9;
  }
  else {
    uint64_t v3 = v17;
  }
LABEL_37:
  uint64_t v18 = *(_DWORD *)(a1 + 56);
  uint64_t v19 = (v18 + v3);
  if (v18 >= 1)
  {
    uint64_t v20 = 0LL;
    do
    {
      uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011B34DC( *(void *)(*(void *)(a1 + 48) + 8 * v20),  a2);
      unsigned int v22 = (int)v21;
      else {
        uint64_t v23 = 1;
      }
      uint64_t v19 = (v22 + v19 + v23);
      ++v20;
    }

    while (v20 < *(int *)(a1 + 56));
  }

  *(_DWORD *)(a1 + 72) = v19;
  return v19;
}

LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(void *)(v5 + 32),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(8LL, *(void *)(v5 + 48), a2);
  }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A0818 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

  if (!v6) {
    uint64_t v7 = 1LL;
  }
LABEL_25:
  uint64_t v20 = v7 > a3;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EDA0);
  }
  uint64_t v21 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68290050;
    *(_WORD *)uint64_t v27 = 2082;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&v27[2] = "";
    uint64_t v28 = 2050;
    uint64_t v29 = a2;
    uint64_t v30 = 2050;
    uint64_t v31 = v7;
    uint64_t v32 = 2050;
    uint64_t v33 = a3;
    uint64_t v34 = 1026;
    uint64_t v35 = v7 > a3;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::isNewServiceAllowed, ServiceType:%{public}lu, Allowed:%{pub lic}lu, AlreadyCreated:%{public}lu, Verdict:%{public}hhd}",  buf,  0x36u);
  }

  return v20;
}

  if (sub_1000F0F50(a1) != 2) {
    goto LABEL_25;
  }
  uint64_t v9 = sub_1000F0EEC(a1);
  unsigned int v10 = *(char *)(v9 + 23);
  if (v10 < 0)
  {
    if (*(void *)(v9 + 8) != 10LL) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)v9;
  }

  else if (v10 != 10)
  {
    goto LABEL_25;
  }

  if (*(void *)v9 != 0x6F6D2D7375636F66LL || *(_WORD *)(v9 + 8) != 25956)
  {
LABEL_25:
    if (sub_1000F0F50(a1) != 4) {
      goto LABEL_96;
    }
    uint64_t v13 = a4[1];
    unint64_t v12 = a4[2];
    *(void *)&uint64_t v68 = v13;
    *((void *)&v68 + 1) = v12;
    sub_1000289F0(a2, 2u, v13, v12, &v89);
    sub_1010DDBC0(&v62, "");
    if ((_BYTE)v13)
    {
LABEL_27:
      uint64_t v14 = (char *)operator new(0x28uLL);
      *(void *)(v14 + 29) = 0LL;
      *(_OWORD *)uint64_t v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      sub_10000AE6C((uint64_t)&v68, v14);
      if (SHIBYTE(v63) < 0) {
        operator delete(v62);
      }
      char v62 = v14;
      uint64_t v63 = xmmword_1012C8460;
    }

    else
    {
      int v15 = 1LL;
      while (v15 != 16)
      {
        if (*((unsigned __int8 *)&v68 + v15++))
        {
          break;
        }
      }
    }

    if (v97)
    {
      sub_1000F61C4(a1, (std::string *)__p);
      if (!v97) {
        sub_100036CD8();
      }
      if (v96[0])
      {
        if (SHIBYTE(v95) < 0) {
          operator delete((void *)v94);
        }
        unint64_t v94 = *(_OWORD *)__p;
        double v95 = *(void *)&__p[16];
      }

      else
      {
        unint64_t v94 = *(_OWORD *)__p;
        double v95 = *(void *)&__p[16];
        v96[0] = 1;
      }

      if (v97)
      {
        if (v92)
        {
          sub_10006E674(v92);
          v93 &= ~0x400u;
          if (!v97) {
            sub_100036CD8();
          }
        }

        else
        {
          v93 &= ~0x400u;
        }

        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
        *(_DWORD *)std::string __p = 0;
        sub_100018E34((int *)__p);
        char v17 = sub_100017338((ssize_t)__p);
        if (!v97) {
          sub_100036CD8();
        }
        v89.__r_.__value_.__r.__words[0] = v17;
        v89.__r_.__value_.__l.__size_ = v18;
        sub_100019D7C((unsigned int *)__p);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181EDA0);
        }
        uint64_t v19 = (os_log_s *)qword_1019348D8;
        if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_93;
        }
        sub_1000F61C4(a1, v57);
        if ((v57[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v20 = v57;
        }
        else {
          uint64_t v20 = (std::string *)v57[0].__r_.__value_.__r.__words[0];
        }
        if (!v97 || !v96[0]) {
          sub_100036CD8();
        }
        if (v95 >= 0) {
          uint64_t v21 = (char *)&v94;
        }
        else {
          uint64_t v21 = (char *)v94;
        }
        unsigned int v22 = (char *)operator new(0x28uLL);
        *(void *)(v22 + 29) = 0LL;
        *(_OWORD *)unsigned int v22 = 0u;
        *((_OWORD *)v22 + 1) = 0u;
        sub_10000AE6C((uint64_t)&v61, v22);
        if (!v97) {
          sub_100036CD8();
        }
        uint64_t v23 = (char *)operator new(0x28uLL);
        *(void *)(v23 + 29) = 0LL;
        *(_OWORD *)uint64_t v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        sub_10000AE6C((uint64_t)&v89, v23);
        uint64_t v24 = &v62;
        if (v63 < 0) {
          uint64_t v24 = v62;
        }
        *(void *)std::string __p = 68290562LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2082;
        *(void *)&__p[20] = "LSL";
        uint64_t v71 = 2082;
        uint64_t v72 = v20;
        uint64_t v73 = 2082;
        uint64_t v74 = v21;
        uint64_t v75 = 2082;
        uint64_t v76 = (std::string *)v22;
        uint64_t v77 = 2082;
        uint64_t v78 = v23;
        uint64_t v79 = 2082;
        uint64_t v80 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::findInstantModelForServiceOfTypeLSL, new LSL service looking for unsupervised model, FoundModelType:%{public, location:escape_only}s, ServiceId:%{public, location:es cape_only}s, UsingModelOf:%{public, location:escape_only}s, OriginalLSLModelUUID:%{public, location:es cape_only}s, UsedModelUUID:%{public, location:escape_only}s, AtLoi:%{public, location:escape_only}s}",  __p,  0x4Eu);
        operator delete(v23);
        uint64_t v25 = v22;
        goto LABEL_91;
      }
    }

    else
    {
      sub_1000289F0(a2, 0, v68, *((uint64_t *)&v68 + 1), __p);
      sub_1000A88B8((uint64_t)&v89, (uint64_t)__p);
      sub_100019D34((uint64_t)__p);
      if (!v97)
      {
LABEL_93:
        if (SHIBYTE(v63) < 0) {
          operator delete(v62);
        }
        sub_1000A88B8((uint64_t)&v102, (uint64_t)&v89);
        sub_100019D34((uint64_t)&v89);
        goto LABEL_96;
      }

      sub_1000F61C4(a1, (std::string *)__p);
      if (!v97) {
        sub_100036CD8();
      }
      if (v96[0])
      {
        if (SHIBYTE(v95) < 0) {
          operator delete((void *)v94);
        }
        unint64_t v94 = *(_OWORD *)__p;
        double v95 = *(void *)&__p[16];
      }

      else
      {
        unint64_t v94 = *(_OWORD *)__p;
        double v95 = *(void *)&__p[16];
        v96[0] = 1;
      }

      if (v97)
      {
        uint64_t v90 = 2;
        if (!sub_10006ED58(2u)) {
          __assert_rtn( "set_modeltype",  "microlocation.pb.h",  12283,  "::CLMicroLocationProto::Model_ModelType_IsValid(value)");
        }
        v93 |= 0x10u;
        uint64_t v91 = 2;
        if (!v97) {
          sub_100036CD8();
        }
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
        *(_DWORD *)std::string __p = 0;
        sub_100018E34((int *)__p);
        uint64_t v26 = sub_100017338((ssize_t)__p);
        if (!v97) {
          sub_100036CD8();
        }
        v89.__r_.__value_.__r.__words[0] = v26;
        v89.__r_.__value_.__l.__size_ = v27;
        sub_100019D7C((unsigned int *)__p);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181EDA0);
        }
        uint64_t v28 = (os_log_s *)qword_1019348D8;
        if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_93;
        }
        uint64_t v29 = v57;
        sub_1000F61C4(a1, v57);
        if ((v57[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v29 = (std::string *)v57[0].__r_.__value_.__r.__words[0];
        }
        uint64_t v30 = (char *)operator new(0x28uLL);
        *(void *)(v30 + 29) = 0LL;
        *(_OWORD *)uint64_t v30 = 0u;
        *((_OWORD *)v30 + 1) = 0u;
        sub_10000AE6C((uint64_t)&v61, v30);
        if (!v97) {
          sub_100036CD8();
        }
        uint64_t v31 = (char *)operator new(0x28uLL);
        *(void *)(v31 + 29) = 0LL;
        *(_OWORD *)uint64_t v31 = 0u;
        *((_OWORD *)v31 + 1) = 0u;
        sub_10000AE6C((uint64_t)&v89, v31);
        uint64_t v32 = (char *)&v62;
        if (v63 < 0) {
          uint64_t v32 = (char *)v62;
        }
        *(void *)std::string __p = 68290306LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2082;
        *(void *)&__p[20] = "unsupervised";
        uint64_t v71 = 2082;
        uint64_t v72 = v29;
        uint64_t v73 = 2082;
        uint64_t v74 = v30;
        uint64_t v75 = 2082;
        uint64_t v76 = (std::string *)v31;
        uint64_t v77 = 2082;
        uint64_t v78 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::findInstantModelForServiceOfTypeLSL, new LSL service looking for unsupervised model, FoundModelType:%{public, location:escape_only}s, ServiceId:%{public, location:es cape_only}s, OriginalUnsupervisedModelUUID:%{public, location:escape_only}s, UsedModelUUID:%{public, l ocation:escape_only}s, AtLoi:%{public, location:escape_only}s}",  __p,  0x44u);
        operator delete(v31);
        uint64_t v25 = v30;
LABEL_91:
        operator delete(v25);
        goto LABEL_93;
      }
    }

    sub_100036CD8();
  }

  sub_1010DDBC0(&v89, "focus-mode");
  sub_1000292D0(a2, (uint64_t)&v89, a4[1], a4[2], __p);
  sub_1000A88B8((uint64_t)&v102, (uint64_t)__p);
  sub_100019D34((uint64_t)__p);
  if (!v109) {
    goto LABEL_130;
  }
  sub_1000F61C4(a1, (std::string *)__p);
  if (!v109) {
    sub_100036CD8();
  }
  if (v107)
  {
    __int128 v106 = *(std::string *)__p;
  }

  else
  {
    __int128 v106 = *(std::string *)__p;
    char v107 = 1;
  }

  if (!v109) {
    sub_100036CD8();
  }
  sub_1000A83A0(__p, &v102);
  memset(&v89, 0, sizeof(v89));
  char v62 = &v89;
  LOBYTE(v63) = 0;
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x118uLL);
  v89.__r_.__value_.__l.__size_ = v89.__r_.__value_.__r.__words[0];
  v89.__r_.__value_.__l.__cap_ = v89.__r_.__value_.__r.__words[0] + 280;
  v89.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1000A841C( (uint64_t)&v89.__r_.__value_.__l.__cap_,  (__int128 *)__p,  &v84,  v89.__r_.__value_.__l.__data_);
  sub_1000A7EA8(a2, (uint64_t *)&v89);
  char v62 = &v89;
  sub_1000A8578((void ***)&v62);
  if (v83[0] && v82 < 0) {
    operator delete(v81);
  }
  sub_10006F50C((char *)&v72 + 2);
LABEL_96:
  if (v109) {
    goto LABEL_97;
  }
LABEL_130:
  sub_100094E18(&v89);
  uint64_t v42 = sub_1000F0F50(a1);
  HIDWORD(v89.__r_.__value_.__r.__words[0]) = sub_1000F4C1C(v42, *a4);
  char v43 = sub_1000F0F50(a1);
  LODWORD(v89.__r_.__value_.__l.__data_) = sub_1000F4C64(v43, *a4);
  LODWORD(v68) = 0;
  sub_100018E34((int *)&v68);
  uint64_t v44 = sub_100017338((ssize_t)&v68);
  char v46 = v45;
  sub_1000F0F40(a1, &v62);
  unsigned int v47 = a4[1];
  v48 = a4[2];
  sub_1000F0BB8(a1, (uint64_t)v57);
  Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_1000EA240((uint64_t)__p, (unsigned int *)&v89, v44, v46, (__int128 *)&v62, v47, v48, (__int128 *)v57, Current_1);
  if (SHIBYTE(v63) < 0) {
    operator delete(v62);
  }
  sub_100019D7C((unsigned int *)&v68);
  uint64_t v58 = 0;
  sub_100018E34(&v58);
  uint64_t v50 = sub_100017338((ssize_t)&v58);
  uint8_t v52 = v51;
  char v53 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100094E1C((uint64_t)__p, (uint64_t)v57);
  sub_1000F0F40(a1, &v61);
  else {
    __dst = v61;
  }
  uint64_t v56 = 1;
  sub_100151464((uint64_t)&v62, v50, v52, (uint64_t)v57, &__dst, a4[1], a4[2], v53);
  uint64_t v68 = 0uLL;
  uint64_t v69 = 0LL;
  unint64_t v59 = (void **)&v68;
  uint64_t v60 = 0;
  *(void *)&uint64_t v68 = operator new(0x118uLL);
  *((void *)&v68 + 1) = v68;
  uint64_t v69 = v68 + 280;
  *((void *)&v68 + 1) = sub_1000A841C((uint64_t)&v69, (__int128 *)&v62, &v68, (_OWORD *)v68);
  sub_1000A7EA8(a2, (uint64_t *)&v68);
  unint64_t v59 = (void **)&v68;
  sub_1000A8578(&v59);
  if (v67 && v66 < 0) {
    operator delete(v65);
  }
  sub_10006F50C(&v64);
  sub_10006F50C(v57);
  sub_100019D7C((unsigned int *)&v58);
  sub_1000EBAEC((uint64_t)__p, a5);
  sub_1000EA944((uint64_t)__p);
  if (v101 < 0) {
    operator delete(v100);
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }

  uint64_t v39 = &v89;
  sub_100019B90((uint64_t)v96);
  *(void *)std::string __p = &v94;
  __int128 v40 = (void ***)__p;
LABEL_129:
  sub_100019C0C(v40);
  sub_100019C7C((uint64_t)&v39[3]);
  sub_100019CEC((uint64_t)&v39->__r_.__value_.__l.__cap_);
  return sub_100019D34((uint64_t)&v102);
}

      unint64_t v12 = *((_DWORD *)v9 + 8);
    }

    while (v12 > 3);
  }

  while (v12 != 3);
  LODWORD(v23) = 2;
  uint64_t v13 = *(double *)sub_10000C6DC(v3, (int *)&v23);
  LODWORD(v23) = 3;
  uint64_t result = sub_10000C6DC(v3, (int *)&v23);
  int v15 = *(double *)result;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v16 = *(uint64_t **)(a1 + 16);
  if (v16)
  {
    char v17 = (double)v7;
    do
    {
      if (~*((_OWORD *)v16 + 1) == 0LL) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = v13;
      }
      sub_100114EF8((void **)v16 + 4, v18);
      uint64_t v20 = v19;
      uint64_t v21 = v16[6];
      uint64_t v23 = v16 + 2;
      uint64_t result = sub_10001D174(a3, v16 + 2, (uint64_t)&unk_1012CF090, &v23);
      result[4] = v20;
      *((double *)result + 5) = (double)v21 / v17;
      uint64_t v16 = (uint64_t *)*v16;
    }

    while (v16);
  }

  return result;
}

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  uint64_t v13 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = (char *)operator new(0x28uLL);
    *(void *)(v14 + 29) = 0LL;
    *(_OWORD *)uint64_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    sub_10000AE6C((uint64_t)a2, v14);
    *(_DWORD *)uint64_t buf = 68289539;
    uint64_t v19 = 0;
    uint64_t v20 = 2082;
    uint64_t v21 = "";
    unsigned int v22 = 2081;
    uint64_t v23 = v14;
    uint64_t v24 = 1025;
    uint64_t v25 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Adding Low Latency policy to trigger manager, :%{private, location:escape_only}s, S uccess:%{private}hhd}",  buf,  0x22u);
    operator delete(v14);
  }

  return v6;
}

  sub_10001B0AC((uint64_t)v14, (uint64_t)&v16);
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  sub_10013B7FC(a2 + 16, (uint64_t)v14);
  sub_10001AAD4((uint64_t)v14);
  return sub_10001AAD4((uint64_t)&v16);
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(float *)(v5 + 28),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 33),  a2,  a4);
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      uint64_t result = *(float *)(a2 + 40);
      *(_DWORD *)(a1 + 56) |= 0x100u;
      *(float *)(a1 + 40) = result;
      int v6 = *(_DWORD *)(a2 + 56);
    }

    if ((v6 & 0x200) != 0)
    {
      int v8 = *(_DWORD *)(a2 + 44);
      if (v8 >= 8) {
        sub_10122FEDC();
      }
      *(_DWORD *)(a1 + 56) |= 0x200u;
      *(_DWORD *)(a1 + 44) = v8;
      int v6 = *(_DWORD *)(a2 + 56);
    }

    if ((v6 & 0x400) != 0)
    {
      uint64_t result = *(float *)(a2 + 48);
      *(_DWORD *)(a1 + 56) |= 0x400u;
      *(float *)(a1 + 48) = result;
    }
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(float *)(v5 + 36),  a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 44),  (int)a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

    unsigned int v10 = *(_BYTE *)(a2 + 17);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 17) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }

    if (v7 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 15),  a2,  a4);
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 76) |= 4u;
    *(double *)(a1 + 24) = result;
    int v6 = *(_DWORD *)(a2 + 76);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return result;
  }
LABEL_17:
  uint64_t v7 = *(void *)(v5 + 64);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A0D48 + 64);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v7,  a2,  a4);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

        if (v7 == 4) {
          return 1LL;
        }
      }

      uint64_t v7 = TagFallback & 7;
      unsigned int v10 = (char *)*((void *)this + 1);
      uint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if (!(_DWORD)result) {
          return result;
        }
        int v11 = v23;
        unint64_t v12 = (_BYTE *)*((void *)this + 1);
        uint64_t v9 = *((void *)this + 2);
      }

      else
      {
        int v11 = *v10;
        unint64_t v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }

      *(_BYTE *)(a1 + 16) = v11 != 0;
      int v8 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v8;
    }

    while ((unint64_t)v12 >= v9 || *v12 != 18);
    *((void *)this + 1) = v12 + 1;
LABEL_23:
    *(_DWORD *)(a1 + 24) = v8 | 2;
    uint64_t v14 = *(void **)(a1 + 8);
    if (!v14)
    {
      uint64_t v14 = operator new(0x40uLL);
      char *v14 = off_101829AE8;
      v14[1] = 0LL;
      *((_DWORD *)v14 + 14) = 0;
      v14[6] = 0LL;
      *((_DWORD *)v14 + 11) = 0;
      v14[3] = 0LL;
      v14[4] = 0LL;
      v14[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_WORD *)v14 + 20) = 0;
      *(void *)(a1 + 8) = v14;
    }

    int v15 = (char *)*((void *)this + 1);
    if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
    {
    }

    else
    {
      uint64_t v24 = *v15;
      *((void *)this + 1) = v15 + 1;
    }

    uint64_t v16 = *((_DWORD *)this + 14);
    char v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17) {
      return 0LL;
    }
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    uint64_t v20 = *((_DWORD *)this + 14);
    uint64_t v21 = __OFSUB__(v20, 1);
    unsigned int v22 = v20 - 1;
    if (v22 < 0 == v21) {
      *((_DWORD *)this + 14) = v22;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 48),  a3);
  uint64_t v7 = *(_DWORD *)(v5 + 88);
  if ((v7 & 0x20) == 0)
  {
LABEL_9:
    if ((v7 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 28),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 30),  (BOOL)a2,  a4);
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0DE8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 40),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  a2,  *(float *)(v5 + 48),  a3);
  }

    uint64_t v7 = 0;
    goto LABEL_16;
  }

  if (v6 >= 6) {
    goto LABEL_15;
  }
  int v8 = *(float *)(a2 + 4);
  uint64_t v7 = v8 < 1.5;
LABEL_17:
  if (v8 >= 5.0 || *(_DWORD *)(a2 + 60) || *(float *)(a2 + 56) <= 0.5 || *(float *)(a2 + 64) >= 20.0)
  {
  }

  else
  {
    ++*(_DWORD *)(a1 + 108);
  }

  return v7 || *(_DWORD *)(a1 + 108) > 17;
}

  *((_DWORD *)result + 5) = self->_exitState;
  *((_BYTE *)result + 44) |= 2u;
  if ((*(_BYTE *)&self->_has & 1) == 0) {
    return result;
  }
LABEL_8:
  *((void *)result + 1) = self->_startTime;
  *((_BYTE *)result + 44) |= 1u;
  return result;
}

  PBDataWriterWriteBOOLField(a3, self->_isStanding, 5LL);
  if ((*(_WORD *)&self->_has & 0x40) != 0) {
LABEL_6:
  }
    PBDataWriterWriteFloatField(a3, 6LL, self->_tilt);
LABEL_7:
  PBDataWriterWriteDoubleField(a3, 7LL, self->_timestamp);
  int v6 = (__int16)self->_has;
  if ((v6 & 8) != 0)
  {
    PBDataWriterWriteInt32Field(a3, self->_exitState, 8LL);
    int v6 = (__int16)self->_has;
    if ((v6 & 1) == 0)
    {
LABEL_9:
      if ((v6 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }

  else if ((v6 & 1) == 0)
  {
    goto LABEL_9;
  }

  PBDataWriterWriteDoubleField(a3, 9LL, self->_estExitTime);
  int v6 = (__int16)self->_has;
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 0x100) == 0) {
      return;
    }
LABEL_20:
    PBDataWriterWriteBOOLField(a3, self->_isVehicleConnected, 11LL);
    return;
  }

  *((_BYTE *)a3 + 56) = self->_isStanding;
  *((_WORD *)a3 + 30) |= 0x80u;
  if ((*(_WORD *)&self->_has & 0x40) != 0)
  {
LABEL_6:
    *((_DWORD *)a3 + 12) = LODWORD(self->_tilt);
    *((_WORD *)a3 + 30) |= 0x40u;
  }

  *((_DWORD *)result + 10) = self->_mountedConfidence;
  *((_WORD *)result + 30) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  self->_isStanding = *((_BYTE *)a3 + 56);
  *(_WORD *)&self->_has |= 0x80u;
  if ((*((_WORD *)a3 + 30) & 0x40) != 0)
  {
LABEL_6:
    self->_tilt = *((float *)a3 + 12);
    *(_WORD *)&self->_has |= 0x40u;
  }

  v5[1] = *(id *)&self->_generationTimeSecs;
  *((_BYTE *)v5 + 68) |= 1u;
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_7:
    *((_DWORD *)v5 + 10) = self->_expirationAgeSecs;
    *((_BYTE *)v5 + 68) |= 8u;
  }

  self->_generationTimeSecs = *((double *)a3 + 1);
  *(_BYTE *)&self->_has |= 1u;
  if ((*((_BYTE *)a3 + 68) & 8) != 0)
  {
LABEL_7:
    self->_expirationAgeSecs = *((_DWORD *)a3 + 10);
    *(_BYTE *)&self->_has |= 8u;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  PBDataWriterWriteUint32Field(a3, self->_zoneType, 4LL);
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_6:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  *((_DWORD *)a3 + 16) = self->_zoneType;
  *((_WORD *)a3 + 36) |= 0x100u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  *((_DWORD *)v5 + 16) = self->_zoneType;
  *((_WORD *)v5 + 36) |= 0x100u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  if ((has & 2) != 0)
  {
    longitude = self->_longitude;
    int v15 = -longitude;
    if (longitude >= 0.0) {
      int v15 = self->_longitude;
    }
    uint64_t v16 = floor(v15 + 0.5);
    char v17 = (v15 - v16) * 1.84467441e19;
    uint64_t v13 = 2654435761u * (unint64_t)fmod(v16, 1.84467441e19);
    if (v17 >= 0.0)
    {
      if (v17 > 0.0) {
        v13 += (unint64_t)v17;
      }
    }

    else
    {
      v13 -= (unint64_t)fabs(v17);
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  if ((has & 4) != 0)
  {
    radius = self->_radius;
    uint64_t v20 = -radius;
    if (radius >= 0.0) {
      uint64_t v20 = self->_radius;
    }
    uint64_t v21 = floor(v20 + 0.5);
    unsigned int v22 = (v20 - v21) * 1.84467441e19;
    uint64_t v18 = 2654435761u * (unint64_t)fmod(v21, 1.84467441e19);
    if (v22 >= 0.0)
    {
      if (v22 > 0.0) {
        v18 += (unint64_t)v22;
      }
    }

    else
    {
      v18 -= (unint64_t)fabs(v22);
    }
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  if ((has & 0x80) != 0)
  {
    uint64_t v23 = 2654435761LL * self->_phenolicLocation;
    if ((has & 0x40) != 0)
    {
LABEL_33:
      uint64_t v24 = 2654435761LL * self->_serviceMaskOperator;
      if ((has & 0x20) != 0) {
        goto LABEL_34;
      }
LABEL_38:
      uint64_t v25 = 0LL;
      if ((has & 0x200) != 0) {
        goto LABEL_35;
      }
LABEL_39:
      uint64_t v26 = 0LL;
      return v5 ^ v3 ^ v6 ^ v7 ^ v12 ^ v13 ^ v18 ^ v23 ^ v24 ^ v25 ^ v26;
    }
  }

  else
  {
    uint64_t v23 = 0LL;
    if ((has & 0x40) != 0) {
      goto LABEL_33;
    }
  }

  uint64_t v24 = 0LL;
  if ((has & 0x20) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v25 = 2654435761LL * self->_provenance;
  if ((has & 0x200) == 0) {
    goto LABEL_39;
  }
LABEL_35:
  uint64_t v26 = 2654435761LL * self->_clearClient;
  return v5 ^ v3 ^ v6 ^ v7 ^ v12 ^ v13 ^ v18 ^ v23 ^ v24 ^ v25 ^ v26;
}

  uint64_t v13 = sub_1004A1844(a1);
  *(double *)uint64_t buf = a2;
  sub_100400BE0(*(void *)(v13 + 32), (double *)buf);
  uint64_t v14 = sub_1004A18A8(a1);
  *(double *)uint64_t buf = a2;
  sub_100400BE0(*(void *)(v14 + 32), (double *)buf);
  if ((v5 & 0x40000) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v5 & 0x4000000) != 0)
  {
LABEL_11:
    int v6 = sub_1004A19DC(a1);
    *(double *)uint64_t buf = a2;
    sub_100400BE0(*(void *)(v6 + 32), (double *)buf);
    uint64_t v7 = sub_1004A1A44(a1);
    *(double *)uint64_t buf = a2;
    sub_100400BE0(*(void *)(v7 + 32), (double *)buf);
  }

    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(double *)(a1 + 32) = result;
    int v6 = *(_DWORD *)(a2 + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        return result;
      }
      goto LABEL_10;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(v5 + 24),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  int v11 = sub_100AE067C(v4, 0);
  if (v11 == v7)
  {
    int v11 = v7;
  }

  else
  {
    unint64_t v12 = (sub_100AE00C4(v4) & 6) == 0 || sub_1002958AC() != 1;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    uint64_t v13 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      std::string __p = (void *)68290306;
      *(_WORD *)char v17 = 2082;
      *(void *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2114;
      *(void *)&v17[12] = v3;
      uint64_t v18 = 2050;
      uint64_t v19 = v9;
      uint64_t v20 = 2050;
      uint64_t v21 = v7;
      unsigned int v22 = 2050;
      uint64_t v23 = v11;
      uint64_t v24 = 1026;
      uint64_t v25 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#sbim client arrow state changed, Client:%{public, location:escape_only}@, entity Class:%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, oldArrowState:%{public, location:CL LocationDictionaryUtilitiesArrowState}lld, newArrowState:%{public, location:CLLocationDictionaryUtilitiesArr owState}lld, dueToDeauthorization:%{public}hhd}",  (uint8_t *)&__p,  0x40u);
    }

    sub_1005592F0(a1, v9, v11, 1, v12);
    sub_1005592F0(a1, v9, v7, 0, v12);
  }

  if (v11)
  {
    if (v3)
    {
      [v3 cppClientKey];
    }

    else
    {
      std::string __p = 0LL;
      *(void *)char v17 = 0LL;
      *(void *)&v17[8] = 0LL;
    }

    p_p = &__p;
    uint64_t v14 = sub_100589248(a1 + 1264, (unsigned __int8 *)&__p, (uint64_t)&unk_1012CF090, (__int128 **)&p_p);
    v14[5] = v11;
    *((_DWORD *)v14 + 12) = v9;
  }

  else
  {
    if (v3)
    {
      [v3 cppClientKey];
    }

    else
    {
      std::string __p = 0LL;
      *(void *)char v17 = 0LL;
      *(void *)&v17[8] = 0LL;
    }

    sub_100588F4C((void *)(a1 + 1264), (unsigned __int8 *)&__p);
  }

  if ((v17[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
}

  sub_10057E760(*v7);
  sub_10057D1B4((uint64_t *)v7, 0LL);
}

        if (v8 == (id)++v10)
        {
          uint64_t v25 = [v5 countByEnumeratingWithState:&v34 objects:v44 count:16];
          int v8 = v25;
          if (!v25) {
            return v28;
          }
          goto LABEL_6;
        }
      }
    }
  }

  return 0LL;
}

    if ((v7 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  int v11 = sub_1002F8DDC();
  if ((sub_1002A82BC(v11, "lastBluetoothImproveAccuracyNotification", v4) & 1) == 0) {
    void *v4 = 0xBFF0000000000000LL;
  }
  sub_1002F0B04(buf);
  uint64_t v7 = sub_1002A82BC(*(uint64_t *)buf, "BluetoothImproveAccuracyNotificationInterval", v5);
  int v8 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_15;
  }
  unint64_t v12 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    unsigned int v10 = __ldaxr(v12);
  while (__stlxr(v10 - 1, v12));
LABEL_14:
  if (v10) {
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if ((v7 & 1) == 0) {
LABEL_16:
  }
    unint64_t *v5 = 0x4122750000000000LL;
LABEL_17:
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  uint64_t v13 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = "Unknown";
    if (a2 == 1) {
      uint64_t v14 = "Bluetooth";
    }
    if (a2) {
      int v15 = (char *)v14;
    }
    else {
      int v15 = "Wifi";
    }
    sub_1010DDBC0(__p, v15);
    if (v34 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = *(_BYTE **)__p;
    }
    char v17 = *v4;
    uint64_t v18 = *v5;
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v17;
    uint64_t v37 = 2048;
    unint64_t v38 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "last improve accuracy notification for %s, %f, retry interval, %f",  buf,  0x20u);
    if (SHIBYTE(v34) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    uint64_t v20 = qword_101934988;
    uint64_t v21 = "Unknown";
    if (a2 == 1) {
      uint64_t v21 = "Bluetooth";
    }
    if (a2) {
      unsigned int v22 = (char *)v21;
    }
    else {
      unsigned int v22 = "Wifi";
    }
    sub_1010DDBC0(v29, v22);
    if (v30 >= 0) {
      uint64_t v23 = v29;
    }
    else {
      uint64_t v23 = (void **)v29[0];
    }
    uint64_t v24 = *v4;
    uint64_t v25 = *v5;
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v23;
    uint64_t v32 = 2048;
    uint64_t v33 = v24;
    uint64_t v34 = 2048;
    uint64_t v35 = v25;
    LODWORD(v27) = 32;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  2LL,  "last improve accuracy notification for %s, %f, retry interval, %f",  __p,  v27,  v28);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLClientManager::ImproveAccuracyNotification::ImproveAccuracyNotification(CLClientManagerTechnology)",  "%s\n",  v26);
    if (v26 != buf) {
      free(v26);
    }
  }

  return a1;
}

  if ((_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync") & 1) == 0)
  {
    if (*a3 || *a4 != 3)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      char v17 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        uint64_t v18 = *a3;
        uint64_t v19 = *a4;
        uint64_t v42 = 68289538LL;
        char v43 = 2082;
        *(void *)uint64_t v44 = "";
        *(_WORD *)&v44[8] = 2050;
        *(void *)&v44[10] = v18;
        uint64_t v45 = 2050;
        char v46 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#sbim unsupported system system service notification for entity, notification:%{p ublic, location:CLStatusBarIconManager_Type::Notification}lld, entityClass:%{public, location:CLStatusBarI conManager_Type::EntityClass}lld}",  (uint8_t *)&v42,  0x26u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
      }

      uint64_t v20 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        uint64_t v21 = *a3;
        unsigned int v22 = *a4;
        uint64_t v42 = 68289538LL;
        char v43 = 2082;
        *(void *)uint64_t v44 = "";
        *(_WORD *)&v44[8] = 2050;
        *(void *)&v44[10] = v21;
        uint64_t v45 = 2050;
        char v46 = v22;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#sbim unsupported system system service notification for entity",  "{msg%{public}.0s:#sbim unsupported system system service notification for entity, notification:%{p ublic, location:CLStatusBarIconManager_Type::Notification}lld, entityClass:%{public, location:CLStatusBarI conManager_Type::EntityClass}lld}",  (uint8_t *)&v42,  0x26u);
      }
    }

    else
    {
      int v11 = *(unsigned __int8 *)(a1 + 998);
      unint64_t v12 = *((unsigned __int8 *)a4 + 4);
      *(_BYTE *)(a1 + 998) = v12;
      if (v11 != v12)
      {
        sub_10058A534((uint64_t)&v42, a1 + 1424);
        memset(v25, 0, sizeof(v25));
        uint64_t v26 = 1065353216;
        memset(v23, 0, sizeof(v23));
        uint64_t v24 = 1065353216;
        uint64_t v13 = *(const void ***)(a1 + 1440);
        uint64_t v33 = 0LL;
        uint64_t v34 = *(void *)&v44[6];
        uint64_t v31 = 0LL;
        uint64_t v32 = v13;
        uint64_t v29 = v25;
        uint64_t v30 = 0LL;
        sub_10058A5A8((unsigned __int8 *)&v34, &v33, &v32, &v31, (uint64_t *)&v29, (uint64_t)&v28, &buf);
        uint64_t v14 = *(void *)(a1 + 1440);
        uint64_t v33 = 0LL;
        uint64_t v34 = v14;
        uint64_t v31 = 0LL;
        uint64_t v32 = *(const void ***)&v44[6];
        uint64_t v29 = v23;
        uint64_t v30 = 0LL;
        sub_10058A5A8((unsigned __int8 *)&v34, &v33, &v32, &v31, (uint64_t *)&v29, (uint64_t)&v28, &buf);
        sub_1005811E0(a1, (uint64_t)v25);
        sub_100581260((id)a1, (uint64_t)v23);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        int v15 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(unsigned __int8 *)(a1 + 998);
          uint64_t buf = (const void **)68289538;
          uint64_t v36 = 2082;
          uint64_t v37 = "";
          unint64_t v38 = 1026;
          uint64_t v39 = v11;
          __int128 v40 = 1026;
          uint64_t v41 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#sbim system service switch state changed, from:%{public}hhd, to:%{public}hhd}",  (uint8_t *)&buf,  0x1Eu);
        }

        sub_10004AD90((uint64_t)v23);
        sub_10004AD90((uint64_t)v25);
        sub_10004AD90((uint64_t)&v42);
      }
    }
  }

  if ((has & 2) != 0) {
    unint64_t v12 = 2654435761LL * self->_expirationAgeSecs;
  }
  else {
    unint64_t v12 = 0LL;
  }
  return v5 ^ v4 ^ v6 ^ v11 ^ v12 ^ (unint64_t)-[NSMutableArray hash](self->_macs, "hash");
}

    int v8 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 124) |= 4u;
    *(void *)(a1 + 24) = v8;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  int v6 = v5[13];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  int v6 = v5[11];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  }

    unsigned int v10 = *(_BYTE *)(a2 + 17);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 17) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

    if (v7 == 4) {
      return 1LL;
    }
  }

  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1248 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }

    uint64_t v9 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(void *)(a1 + 24) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  a2,  a4);
  int v6 = v5[11];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[9],  a2,  a4);
  }

    unsigned int v10 = *(_DWORD *)(a2 + 20);
    a1[9] |= 8u;
    a1[5] = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return;
      }
      goto LABEL_10;
    }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1368 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1388 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return result;
  }
LABEL_19:
  int v8 = *(void *)(v5 + 40);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1388 + 40);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v8,  a2,  a4);
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

    unsigned int v10 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 16) = v10;
    int v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 8) == 0)
    {
LABEL_10:
      if ((v6 & 0x10) == 0) {
        return;
      }
      goto LABEL_11;
    }

    uint64_t v9 = *(_DWORD *)(a2 + 16);
    a1[10] |= 4u;
    a1[4] = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 68);
    }

    else
    {
      unsigned int v10 = 2;
    }

    v4 += v10;
    if ((v3 & 8) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_17;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 68);
  }

  else
  {
    unint64_t v12 = 2;
  }

  v4 += v12;
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

    sub_101242830();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLWifiTileBlobsTable.mm",  377,  "findMacAddresses");
    __break(1u);
LABEL_17:
    dispatch_once(&qword_101934860, &stru_101848BB8);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

        if (v7 == 4) {
          return 1LL;
        }
      }

      uint64_t v7 = TagFallback & 7;
      unsigned int v10 = (char *)*((void *)this + 1);
      uint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if (!(_DWORD)result) {
          return result;
        }
        int v11 = v23;
        unint64_t v12 = (_BYTE *)*((void *)this + 1);
        uint64_t v9 = *((void *)this + 2);
      }

      else
      {
        int v11 = *v10;
        unint64_t v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }

      *(_BYTE *)(a1 + 16) = v11 != 0;
      int v8 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v8;
    }

    while ((unint64_t)v12 >= v9 || *v12 != 18);
    *((void *)this + 1) = v12 + 1;
LABEL_23:
    *(_DWORD *)(a1 + 24) = v8 | 2;
    uint64_t v14 = *(char **)(a1 + 8);
    if (!v14)
    {
      uint64_t v14 = (char *)operator new(0x58uLL);
      *(void *)uint64_t v14 = off_101849DB0;
      *((void *)v14 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v14 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v14 + 19) = 0;
      *((_DWORD *)v14 + 20) = 0;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *((_WORD *)v14 + 36) = 0;
      *(void *)(a1 + 8) = v14;
    }

    int v15 = (char *)*((void *)this + 1);
    if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
    {
    }

    else
    {
      uint64_t v24 = *v15;
      *((void *)this + 1) = v15 + 1;
    }

    uint64_t v16 = *((_DWORD *)this + 14);
    char v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17) {
      return 0LL;
    }
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    uint64_t v20 = *((_DWORD *)this + 14);
    uint64_t v21 = __OFSUB__(v20, 1);
    unsigned int v22 = v20 - 1;
    if (v22 < 0 == v21) {
      *((_DWORD *)this + 14) = v22;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    unsigned int v10 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) |= 8u;
    *(_DWORD *)(a1 + 28) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return;
      }
      goto LABEL_10;
    }

    if (v7 == 4) {
      return 1LL;
    }
  }

      *(_WORD *)a3 = *(_WORD *)(a1 + 112);
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 8) = 0LL;
      sub_1006099EC( (void *)(a3 + 8),  *(const void **)(a1 + 120),  *(void *)(a1 + 128),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3));
      return;
    case 15LL:
      *(_BYTE *)(a1 + 112) = 1;
      sub_100703D60(a1, v9 == 4, *(double *)(a2 + 8));
      *(_WORD *)a3 = *(_WORD *)(a1 + 112);
      uint64_t v14 = *(const void **)(a1 + 120);
      int v15 = *(void *)(a1 + 128);
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 8) = 0LL;
      sub_1006099EC((void *)(a3 + 8), v14, v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (uint64_t)v14) >> 3));
      *(_WORD *)(a1 + 112) = 0;
      uint64_t v16 = *(void **)(a1 + 120);
      if (v16)
      {
        *(void *)(a1 + 128) = v16;
        operator delete(v16);
      }

      *(void *)(a1 + 120) = 0LL;
      *(void *)(a1 + 128) = 0LL;
      *(void *)(a1 + 136) = 0LL;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(void *)(a1 + 176) = 0LL;
      return;
    default:
      if (v9 == 4 && v6 == 2)
      {
        *(_BYTE *)(a1 + 184) = 1;
      }

      else if (v9 == 4 && v6 == 3)
      {
        *(_BYTE *)(a1 + 184) = 0;
      }

      goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(5LL, *(void *)(v5 + 32), a2);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 44),  (int)a2,  a4);
  }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v3 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2 unexpected error code",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2 unexpected error code",  v6,  2);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual uint32_t CLEmergencyEED2::getErrorCodePriority(Emergency::SessionErrorCode)",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t result = 1LL;
    switch(a2)
    {
      case 0:
        return result;
      case 2:
        uint64_t result = 5LL;
        break;
      case 3:
      case 12:
        return 2LL;
      case 10:
      case 14:
        uint64_t result = 4294967293LL;
        break;
      case 16:
        uint64_t result = 4LL;
        break;
      default:
        goto LABEL_15;
    }
  }

  return result;
}

  if (*(_BYTE *)(a1 + 628))
  {
LABEL_16:
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 628) = 1;
  }

      sub_1010DDBC0(v9, "empty");
      sub_1010DDBC0(v14, " ");
      uint64_t v5 = (void *)sub_1007EB9E0((uint64_t *)v9, (uint64_t *)v14);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
LABEL_20:
      if (SHIBYTE(v10) < 0) {
        operator delete(v9[0]);
      }
      return v5;
    }
  }

  for (uint64_t i = 0LL; i != 12; ++i)
  {
    if (*(char *)(v2 + i) < 0 || (_DefaultRuneLocale.__runetype[*(unsigned __int8 *)(v2 + i)] & 0x10000) == 0)
    {
      sub_1010DDBC0(v9, "nonhex");
      uint64_t v7 = sub_1007EB9E0((uint64_t *)v9, (uint64_t *)a1);
      goto LABEL_19;
    }
  }

  sub_100292A34((void (__cdecl ***)(std::basic_stringstream<char> *__hidden))v9, a1, 24);
  *(_DWORD *)((char *)&v9[1] + *((void *)v9[0] - 3)) = *(_DWORD *)((_BYTE *)&v9[1] + *((void *)v9[0] - 3)) & 0xFFFFFFB5 | 8;
  std::istream::operator>>(v9, v14);
  uint64_t v5 = v14[0];
  *(void **)((char *)v9
  unsigned int v10 = v6;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf(v11);
  std::ios::~ios(&v13);
  return v5;
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

    int v8 = 0LL;
LABEL_18:
    sub_100865384(&v17);
    return v8;
  }

  return 0LL;
}

  uint64_t v20 = (unint64_t)a1 + v5;
  uint64_t v21 = (unint64_t)a1 + v5 + 200;
  if (v5)
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        unsigned int v22 = a2[6];
        if (v22 == (void)v102) {
          break;
        }
      }

      uint64_t v23 = a2[7];
      uint64_t v25 = __OFSUB__(v23, *((void *)&v102 + 1));
      uint64_t v24 = v23 - *((void *)&v102 + 1) < 0;
      if (v23 == *((void *)&v102 + 1))
      {
        uint64_t v26 = a2[8];
        uint64_t v25 = __OFSUB__(v26, (void)v103);
        uint64_t v24 = v26 - (uint64_t)v103 < 0;
        if (v26 == (void)v103)
        {
          uint64_t v27 = a2[10];
          uint64_t v25 = __OFSUB__(v27, (void)v104);
          uint64_t v24 = v27 - (uint64_t)v104 < 0;
          if (v27 == (void)v104)
          {
            uint64_t v28 = a2[9];
            uint64_t v25 = __OFSUB__(v28, *((void *)&v103 + 1));
            uint64_t v24 = v28 - *((void *)&v103 + 1) < 0;
          }
        }
      }
    }

    while (v24 == v25
         && (*((_OWORD *)a2 + 4) != v103
          || v23 != *((void *)&v102 + 1)
          || a2[10] != (void)v104
          || !sub_10085DFAC((uint64_t)a2, (uint64_t)&v99, a3)));
  }

  else
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        uint64_t v29 = a2[6];
        if (v29 == (void)v102) {
          break;
        }
      }

      uint64_t v31 = a2[7];
      uint64_t v33 = __OFSUB__(v31, *((void *)&v102 + 1));
      uint64_t v32 = v31 - *((void *)&v102 + 1) < 0;
      if (v31 == *((void *)&v102 + 1))
      {
        uint64_t v34 = a2[8];
        uint64_t v33 = __OFSUB__(v34, (void)v103);
        uint64_t v32 = v34 - (uint64_t)v103 < 0;
        if (v34 == (void)v103)
        {
          uint64_t v35 = a2[10];
          uint64_t v33 = __OFSUB__(v35, (void)v104);
          uint64_t v32 = v35 - (uint64_t)v104 < 0;
          if (v35 == (void)v104)
          {
            uint64_t v36 = a2[9];
            uint64_t v33 = __OFSUB__(v36, *((void *)&v103 + 1));
            uint64_t v32 = v36 - *((void *)&v103 + 1) < 0;
          }
        }
      }
    }

    while (v32 == v33
         && (*((_OWORD *)a2 + 4) != v103
          || v31 != *((void *)&v102 + 1)
          || a2[10] != (void)v104
          || (sub_10085DFAC((uint64_t)a2, (uint64_t)&v99, a3) & 1) == 0));
  }

  uint64_t v20 = (unint64_t)a1 + v5;
  uint64_t v21 = (unint64_t)a1 + v5 + 200;
  if (v5)
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        unsigned int v22 = a2[16];
        if (v22 == (void)v107) {
          break;
        }
      }

      uint64_t v23 = a2[17];
      uint64_t v25 = __OFSUB__(v23, *((void *)&v107 + 1));
      uint64_t v24 = v23 - *((void *)&v107 + 1) < 0;
      if (v23 == *((void *)&v107 + 1))
      {
        uint64_t v26 = a2[18];
        uint64_t v25 = __OFSUB__(v26, (void)v108);
        uint64_t v24 = v26 - (uint64_t)v108 < 0;
        if (v26 == (void)v108)
        {
          uint64_t v27 = a2[20];
          uint64_t v25 = __OFSUB__(v27, (void)v109);
          uint64_t v24 = v27 - (uint64_t)v109 < 0;
          if (v27 == (void)v109)
          {
            uint64_t v28 = a2[19];
            uint64_t v25 = __OFSUB__(v28, *((void *)&v108 + 1));
            uint64_t v24 = v28 - *((void *)&v108 + 1) < 0;
          }
        }
      }
    }

    while (v24 == v25
         && (*((_OWORD *)a2 + 9) != v108
          || v23 != *((void *)&v107 + 1)
          || a2[20] != (void)v109
          || !sub_100862154((uint64_t)a2, (uint64_t)&v99, a3)));
  }

  else
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        uint64_t v29 = a2[16];
        if (v29 == (void)v107) {
          break;
        }
      }

      uint64_t v31 = a2[17];
      uint64_t v33 = __OFSUB__(v31, *((void *)&v107 + 1));
      uint64_t v32 = v31 - *((void *)&v107 + 1) < 0;
      if (v31 == *((void *)&v107 + 1))
      {
        uint64_t v34 = a2[18];
        uint64_t v33 = __OFSUB__(v34, (void)v108);
        uint64_t v32 = v34 - (uint64_t)v108 < 0;
        if (v34 == (void)v108)
        {
          uint64_t v35 = a2[20];
          uint64_t v33 = __OFSUB__(v35, (void)v109);
          uint64_t v32 = v35 - (uint64_t)v109 < 0;
          if (v35 == (void)v109)
          {
            uint64_t v36 = a2[19];
            uint64_t v33 = __OFSUB__(v36, *((void *)&v108 + 1));
            uint64_t v32 = v36 - *((void *)&v108 + 1) < 0;
          }
        }
      }
    }

    while (v32 == v33
         && (*((_OWORD *)a2 + 9) != v108
          || v31 != *((void *)&v107 + 1)
          || a2[20] != (void)v109
          || (sub_100862154((uint64_t)a2, (uint64_t)&v99, a3) & 1) == 0));
  }

        uint64_t v5 = v7 + 1;
        uint64_t v4 = v7[1];
        if (!v4) {
          goto LABEL_18;
        }
      }
    }

    if (!v9 && *a3 >= *(void *)(v4 + 32))
    {
LABEL_14:
      if (v7[4] >= *a3) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }

    goto LABEL_11;
  }

  uint64_t v7 = (void *)(a1 + 8);
LABEL_18:
  *a2 = v7;
  return v5;
}

  *a2 = v8;
  return result;
}

        if (v7 == 4) {
          return 1LL;
        }
      }

      uint64_t v7 = TagFallback & 7;
      unsigned int v10 = (char *)*((void *)this + 1);
      uint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if (!(_DWORD)result) {
          return result;
        }
        int v11 = v23;
        unint64_t v12 = (_BYTE *)*((void *)this + 1);
        uint64_t v9 = *((void *)this + 2);
      }

      else
      {
        int v11 = *v10;
        unint64_t v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }

      *(_DWORD *)(a1 + 16) = v11;
      int v8 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v8;
    }

    while ((unint64_t)v12 >= v9 || *v12 != 18);
    *((void *)this + 1) = v12 + 1;
LABEL_23:
    *(_DWORD *)(a1 + 24) = v8 | 2;
    uint64_t v14 = *(unsigned int **)(a1 + 8);
    if (!v14)
    {
      uint64_t v14 = (unsigned int *)operator new(0x18uLL);
      *((void *)v14 + 1) = 0LL;
      *((void *)v14 + 2) = 0LL;
      *(void *)uint64_t v14 = off_101868948;
      *(void *)(a1 + 8) = v14;
    }

    int v15 = (char *)*((void *)this + 1);
    if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
    {
    }

    else
    {
      uint64_t v24 = *v15;
      *((void *)this + 1) = v15 + 1;
    }

    uint64_t v16 = *((_DWORD *)this + 14);
    char v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17) {
      return 0LL;
    }
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    uint64_t v20 = *((_DWORD *)this + 14);
    uint64_t v21 = __OFSUB__(v20, 1);
    unsigned int v22 = v20 - 1;
    if (v22 < 0 == v21) {
      *((_DWORD *)this + 14) = v22;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 28),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1B28 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    goto LABEL_21;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v4,  *(float *)(v5 + 28),  a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  a1[3].__m_.__sig = v6;
  std::mutex::unlock(a1);
}

      if (++v8 == v7) {
        return 1LL;
      }
    }

    sub_100CBEAEC(*(void *)(a2 + 800), v8, (uint64_t)&v67);
    uint64_t v55 = v71;
    if (v71 > 0.0) {
      goto LABEL_18;
    }
    if (v60 <= 0.0)
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v31 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "#fusion,setWiFiLocationBatched,skipped wsb location with no valid timestamps",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      v54[0].n128_u16[0] = 0;
      LODWORD(v49) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,setWiFiLocationBatched,skipped wsb location with no valid timestamps",  v54,  v49);
      uint64_t v33 = (uint8_t *)v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v32);
    }

    else
    {
      uint64_t v30 = (__n128 *)sub_10080E94C();
      sub_10080ED44(v30, v54);
      char v53 = 0.0;
      if ((sub_1007B8DE8((uint64_t)v54, &v53) & 1) != 0)
      {
        uint64_t v55 = v60 - v53;
LABEL_18:
        uint64_t v16 = (char *)operator new(0xD0uLL);
        *((void *)v16 + 1) = 0LL;
        *((void *)v16 + 2) = 0LL;
        *(void *)uint64_t v16 = off_10186D3B0;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 6) = 0u;
        *((_OWORD *)v16 + 7) = 0u;
        *((_OWORD *)v16 + 8) = 0u;
        *((_OWORD *)v16 + 9) = 0u;
        *((_OWORD *)v16 + 10) = 0u;
        *((_OWORD *)v16 + 11) = 0u;
        *((_OWORD *)v16 + 12) = 0u;
        *((_OWORD *)v16 + 2) = v50;
        *((_OWORD *)v16 + 3) = 0u;
        *((void *)v16 + 8) = 0xBFF0000000000000LL;
        *((void *)v16 + 10) = 0xBFF0000000000000LL;
        *(_OWORD *)(v16 + 104) = v50;
        *(_OWORD *)(v16 + 120) = v50;
        *((void *)v16 + 3) = &off_10186D400;
        *((void *)v16 + 17) = 0xBFF0000000000000LL;
        *((void *)v16 + 22) = 0xBFF0000000000000LL;
        *((_DWORD *)v16 + 49) = 0xFFFF;
        *(void *)uint64_t buf = v16 + 24;
        *(void *)&uint8_t buf[8] = v16;
        sub_100FB9E24((uint64_t)(v16 + 24), (uint64_t)&v56, v59);
        char v17 = *(void *)buf;
        *(void *)(*(void *)buf + 152LL) = v63;
        uint64_t v18 = v56;
        *(_DWORD *)(v17 + 160) = v64;
        uint64_t v19 = v65;
        *(_DWORD *)(v17 + 172) = v18;
        *(_DWORD *)(v17 + 176) = v19;
        *(void *)(v17 + 164) = v66;
        *(_OWORD *)(v17 + 136) = v62;
        *(double *)(v17 + 16) = v55;
        *(double *)(v17 + 64) = v70;
        *(_DWORD *)(v17 + 72) = v69;
        *(_BYTE *)(v17 + 124) = v73;
        v54[0].n128_u64[0] = (unint64_t)&v61;
        uint64_t v20 = sub_100ABF1B8(v51, &v61, (uint64_t)&unk_1012CF090, v54);
        uint64_t v21 = v20[5];
        unsigned int v22 = (char *)operator new(0x18uLL);
        uint64_t v23 = *(_OWORD *)buf;
        *(void *)unsigned int v22 = v21;
        *(_OWORD *)(v22 + 8) = v23;
        if (*((void *)&v23 + 1))
        {
          uint64_t v24 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
          do
            uint64_t v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }

        v20[5] = (uint64_t *)v22;
        v54[0].n128_u64[0] = (unint64_t)&v55;
        uint64_t v26 = sub_100ABF2E0(v4, &v55, (uint64_t)&unk_1012CF090, (uint64_t **)v54);
        sub_1000F2F30(v26 + 5, (uint64_t *)buf);
        uint64_t v27 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          uint64_t v28 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            uint64_t v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }

    if (v7 == 4) {
      return 1LL;
    }
  }

    int v8 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(void *)(a1 + 24) = v8;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 32),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v3 == v4)
    {
LABEL_17:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101872968);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "CLWorkoutSessionMetrics, no VO2Max records found at start of workout session",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101872968);
        }
        uint64_t v16 = 0;
        int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "CLWorkoutSessionMetrics, no VO2Max records found at start of workout session",  &v16,  2);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutSessionMetrics::queryVO2Max()_block_invoke", "%s\n", v15);
      }
    }

    else
    {
      *(_DWORD *)(v1 + 332) = (int)*((double *)v4 - 14);
    }

    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }

  *((_DWORD *)v7 + 9) = self->_nid;
  *((_BYTE *)v7 + 52) |= 0x10u;
  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
LABEL_5:
    *((_DWORD *)v7 + 3) = self->_bsid;
    *((_BYTE *)v7 + 52) |= 2u;
  }

  *((_DWORD *)result + 11) = self->_reach;
  *((_BYTE *)result + 56) |= 0x10u;
  if ((*(_BYTE *)&self->_has & 4) == 0) {
    return result;
  }
LABEL_8:
  *((_DWORD *)result + 9) = self->_infoMask;
  *((_BYTE *)result + 56) |= 4u;
  return result;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_cellID),  @"cellID");
  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
LABEL_5:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_tacID),  @"tacID");
LABEL_6:
  location = self->_location;
  if (location) {
    objc_msgSend( v3,  "setObject:forKey:",  -[ALSLocation dictionaryRepresentation](location, "dictionaryRepresentation"),  @"location");
  }
  int v6 = (char)self->_has;
  if ((v6 & 0x20) != 0)
  {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_uarfcn),  @"uarfcn");
    int v6 = (char)self->_has;
  }

  if ((v6 & 8) != 0) {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_pid),  @"pid");
  }
  return v3;
}

  *((_DWORD *)a3 + 2) = self->_cellID;
  *((_BYTE *)a3 + 44) |= 1u;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_5:
    *((_DWORD *)a3 + 9) = self->_tacID;
    *((_BYTE *)a3 + 44) |= 0x10u;
  }

    sub_100036CD8();
  }

  if (!v21) {
    goto LABEL_15;
  }
  char v17 = -1LL;
  return sub_100BA2360(a1, &v20, v17, a8);
}

    unsigned int v10 = a2[11];
    *(_DWORD *)(a1 + 20) |= 8u;
    *(_BYTE *)(a1 + 11) = v10;
    uint64_t v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return;
      }
      goto LABEL_10;
    }

    if (v7 == 4) {
      return 1LL;
    }
  }

    if (v7 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  int v8 = *(void *)(v5 + 24);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1E40 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    goto LABEL_21;
  }

  int v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      int v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return sub_1001BA1BC(v15);
}

  char v17 = 0LL;
LABEL_16:
  if (v25 < 0) {
    operator delete(v24);
  }
  return v17;
}

  PBDataWriterWriteDoubleField(a3, 3LL, self->_deltaDistanceAccuracy);
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  *((void *)a3 + 2) = *(void *)&self->_deltaDistanceAccuracy;
  *((_WORD *)a3 + 44) |= 2u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  self->_deltaDistanceAccuracy = *((double *)a3 + 2);
  *(_WORD *)&self->_has |= 2u;
  uint64_t v3 = *((_WORD *)a3 + 44);
  if ((v3 & 0x80) == 0)
  {
LABEL_5:
    if ((v3 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  if (!v12) {
    goto LABEL_18;
  }
  int v15 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v12, kCFURLPOSIXPathStyle, 0);
  if (!v15) {
    return 0LL;
  }
  Unique = _CFBundleCreateUnique(kCFAllocatorDefault, v15);
  CFRelease(v15);
  return Unique;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 40),  a3);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_101887AD0);
    }
    uint64_t v16 = a3;
    char v17 = qword_1019347C8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1010DD48C(v30, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)a2;
      uint64_t v31 = *(void *)(a2 + 16);
    }

    sub_100E4292C(v28, (__int128 *)a3);
    uint64_t v18 = sub_100E42A20(a1, (uint64_t)v30, (uint64_t *)v28);
    uint64_t v19 = sub_100C6ACAC(a1);
    uint64_t v20 = sub_100E43304(a1);
    uint64_t v37 = 136446978;
    unint64_t v38 = v16;
    uint64_t v39 = 1026;
    __int128 v40 = v18;
    uint64_t v41 = 1026;
    uint64_t v42 = v19;
    char v43 = 1026;
    uint64_t v44 = v20;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v17,  0LL,  "[subscription-%{public}s] toggling stream, should send data %{public}d, interested, %{public}d, in workout %{public}d",  &v37,  30);
    unsigned int v22 = v21;
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBatchedSensorSubscription::toggleStreamAsAllowed(std::string, ConnectionInfo, id<CLBatchedSensorServiceProtocol>)",  "%s\n",  v22);
  }

  if (sub_100C6ACAC(a1))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1010DD48C(v26, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)uint64_t v26 = *(_OWORD *)a2;
      uint64_t v27 = *(void *)(a2 + 16);
    }

    if (*((char *)a3 + 23) < 0)
    {
      sub_1010DD48C(v23, *a3, (unint64_t)a3[1]);
    }

    else
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)a3;
      uint64_t v24 = a3[2];
    }

    uint64_t v25 = *((_DWORD *)a3 + 6);
    uint64_t v14 = sub_100E42A20(a1, (uint64_t)v26, (uint64_t *)v23);
    if (SHIBYTE(v24) < 0) {
      operator delete(v23[0]);
    }
    if (SHIBYTE(v27) < 0)
    {
      operator delete(v26[0]);
      if ((v14 & 1) != 0) {
        return [a4 registerForData:*(void *)(a1 + 48)];
      }
    }

    else if (v14)
    {
      return [a4 registerForData:*(void *)(a1 + 48)];
    }
  }

  return [a4 unregisterForData:*(void *)(a1 + 48)];
}

  *a2 = v8;
  return result;
}

  *a2 = v7;
  return v5;
}

  *a2 = v8;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  *((_DWORD *)result + 11) = LODWORD(self->_speed);
  *((_BYTE *)result + 48) |= 0x80u;
  if ((*(_BYTE *)&self->_has & 0x40) != 0)
  {
LABEL_6:
    *((_DWORD *)result + 10) = LODWORD(self->_rawSpeed);
    *((_BYTE *)result + 48) |= 0x40u;
  }

  *a2 = v8;
  return result;
}

  PB::TextFormatter::format(this, "endTimestampOfWindow", *(void *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  int v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    PB::TextFormatter::format(this, "response", *(_DWORD *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 48) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_9;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 8u);
  }

  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x40u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 32) = v9;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0) {
    goto LABEL_16;
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 24) = result;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    PB::TextFormatter::format(this, "thetaAPDirRad", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_9;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 36), 8u);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "inertialAccelZ", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x69u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = v3 | 0x40;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  int v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 24) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    PB::TextFormatter::format(this, "valid", *(_BYTE *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_9;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 8u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "doubleTapStatus", *(_DWORD *)(a1 + 28));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 52) = v3;
  *(void *)(result + 24) = v9;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0) {
    goto LABEL_16;
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "timeToReachMinThighAndShinAngleThreshold", *(float *)(a1 + 36));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (v5 < 0) {
    goto LABEL_17;
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 32), 8u);
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 55), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "doubleSupportPercentageMedian", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  int v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 36) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "numValidBouts7Days", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (v5 < 0) {
    goto LABEL_17;
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 8u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 44) = v3;
  *(void *)(result + 8) = v9;
  if ((*(_BYTE *)(a2 + 44) & 0x40) != 0) {
    goto LABEL_16;
  }
  return result;
}

  uint64_t v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 40) = v3;
  *(void *)(result + 8) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0) {
    goto LABEL_16;
  }
  return result;
}

  PB::TextFormatter::format(this, "hrMax", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  unsigned int v10 = *(void *)(a2 + 64);
  if (v10)
  {
    int v11 = operator new(0x40uLL);
    sub_1011462A0((uint64_t)v11, v10);
    *(void *)(a1 + 64) = v12;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 244);
  if ((v13 & 0x800) != 0)
  {
    uint64_t v54 = *(void *)(a2 + 192);
    v6 |= 0x800u;
    *(_DWORD *)(a1 + 244) = v6;
    *(void *)(a1 + 192) = v54;
    uint64_t v13 = *(_DWORD *)(a2 + 244);
    if ((v13 & 0x800000) == 0)
    {
LABEL_19:
      if ((v13 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_70;
    }
  }

  else if ((v13 & 0x800000) == 0)
  {
    goto LABEL_19;
  }

  uint64_t v55 = *(_BYTE *)(a2 + 239);
  v6 |= 0x800000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_BYTE *)(a1 + 239) = v55;
  uint64_t v13 = *(_DWORD *)(a2 + 244);
  if ((v13 & 0x400) == 0)
  {
LABEL_20:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  int v8 = *(_BYTE *)(a2 + 37);
  v3 |= 0x40u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 37) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "onWrist", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    PB::TextFormatter::format(this, "onWristSensor", *(_DWORD *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_9;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 36), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 8u);
  }

  PB::TextFormatter::format(this, "eventType", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t v9 = *(_BYTE *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_BYTE *)(result + 40) = v9;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0) {
    goto LABEL_16;
  }
  return result;
}

  PB::TextFormatter::format(this, "isPedestrianRouting", *(_BYTE *)(a1 + 11));
  uint64_t v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 14), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  if ((*(_BYTE *)(a2 + 40) & 2) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = v3 | 2;
  *(_DWORD *)(a1 + 16) = v4;
  return *(float *)&v4;
}

  PB::TextFormatter::format(this, "workoutLocationType", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 35), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  if ((*(_BYTE *)(a2 + 40) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 40) = v3 | 0x10;
  *(_DWORD *)(a1 + 28) = v4;
  return *(float *)&v4;
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 65), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 5u);
  uint64_t v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "dataSource", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  if ((*(_BYTE *)(a2 + 40) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  uint64_t v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (v5 < 0) {
    goto LABEL_17;
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 8u);
  }

  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 32));
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 40));
LABEL_7:
  int v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))( v6,  this,  "signalEnvironment");
  }
  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t v9 = *(_BYTE *)(a2 + 52);
  v3 |= 0x40u;
  *(_BYTE *)(result + 56) = v3;
  *(_BYTE *)(result + 52) = v9;
  if ((*(_BYTE *)(a2 + 56) & 0x20) != 0) {
    goto LABEL_16;
  }
  return result;
}

  int v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 64) = v3;
  *(void *)(result + 40) = v8;
  uint64_t v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "newNorthAlignmentEstimateRad", *(double *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    PB::TextFormatter::format(this, "timeElapsedSinceLastUpdateMicroSeconds", *(void *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 64) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_9;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 8u);
  }

  PB::TextFormatter::format(this, "estimationUpdateIndex", *(void *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t v9 = *(_BYTE *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 36) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0) {
    goto LABEL_16;
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (v5 < 0) {
    goto LABEL_17;
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  }

  PB::TextFormatter::format(this, "isAboveBelowMessageShowing", *(_BYTE *)(a1 + 57));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "instAccelMagDiff", *(float *)(a1 + 28));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 64) = v3;
  *(double *)(a1 + 48) = result;
  if ((*(_BYTE *)(a2 + 64) & 8) != 0) {
    goto LABEL_16;
  }
  return result;
}

  if (!a1[199])
  {
    if (a1[193] && !a1[192]) {
      goto LABEL_21;
    }
LABEL_20:
    uint64_t v5 = a2[2] != 0;
    goto LABEL_22;
  }

  if (a1[198]) {
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v5 = 0;
LABEL_22:
  if ((sub_1004FD0BC() & 1) == 0)
  {
    int v6 = !v5;
    uint64_t v9 = *a2;
LABEL_34:
    uint64_t v13 = 0;
    int v15 = v9 != 0;
    uint64_t v16 = v6 | v4;
    int v11 = v16 & v15;
    if ((v16 & v15) != 0) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = 2LL;
    }
    goto LABEL_37;
  }

  int v6 = !v5;
  if (a1[201]) {
    uint64_t v7 = !v5;
  }
  else {
    uint64_t v7 = 1;
  }
  int v8 = v7 | v4;
  uint64_t v9 = *a2;
  if (v8 == 1) {
    goto LABEL_34;
  }
  unsigned int v10 = *a2 != 0;
  int v11 = v4 && v10;
  if (v4 && v10) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = 2;
  }
  uint64_t v13 = *a2 == 0;
  if (*a2) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 1LL;
  }
LABEL_37:
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2168);
  }
  char v17 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *((_DWORD *)a2 + 1);
    uint64_t v19 = *((_DWORD *)a2 + 3);
    uint64_t v20 = a2[8];
    uint64_t v21 = a2[2];
    unsigned int v22 = *a2;
    *(_DWORD *)uint64_t buf = 67176705;
    v49 = v18;
    uint64_t v50 = 1025;
    unsigned int v51 = v19;
    uint8_t v52 = 1025;
    char v53 = v20;
    uint64_t v54 = 1025;
    uint64_t v55 = v21;
    uint64_t v56 = 1025;
    uint64_t v57 = v22;
    uint64_t v58 = 1025;
    unint64_t v59 = v5;
    uint64_t v60 = 1025;
    __int128 v61 = v14;
    char v62 = 1025;
    uint64_t v63 = v13;
    uint64_t v64 = 1025;
    uint64_t v65 = v11 & 1;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "CLPG,determineProactiveGnssNextAction,thermalState,%{private}d,motionActivityState,%{private}d,isDriving,%{private }d, isOutsideVisit,%{private}d,proactiveGnssState,%{private}d,allowProactiveBasedOnDeviceState,%{private}d,proacti veGnssDerivedState,%{private}d,start,%{private}d,stop,%{private}d",  buf,  0x38u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    uint64_t v24 = *((_DWORD *)a2 + 1);
    uint64_t v25 = *((_DWORD *)a2 + 3);
    uint64_t v26 = a2[8];
    uint64_t v27 = a2[2];
    uint64_t v28 = *a2;
    v31[0] = 67176705;
    v31[1] = v24;
    uint64_t v32 = 1025;
    uint64_t v33 = v25;
    uint64_t v34 = 1025;
    uint64_t v35 = v26;
    uint64_t v36 = 1025;
    uint64_t v37 = v27;
    unint64_t v38 = 1025;
    uint64_t v39 = v28;
    __int128 v40 = 1025;
    uint64_t v41 = v5;
    uint64_t v42 = 1025;
    char v43 = v14;
    uint64_t v44 = 1025;
    uint64_t v45 = v13;
    char v46 = 1025;
    unsigned int v47 = v11 & 1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLPG,determineProactiveGnssNextAction,thermalState,%{private}d,motionActivityState,%{private}d,isDriving,%{private }d, isOutsideVisit,%{private}d,proactiveGnssState,%{private}d,allowProactiveBasedOnDeviceState,%{private}d,proacti veGnssDerivedState,%{private}d,start,%{private}d,stop,%{private}d",  v31,  56);
    uint64_t v30 = (uint8_t *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLProactiveGnss::CLProactiveGnssNextAction CLProactiveGnss::determineProactiveGnssNextAction(const CLProactiveGnss StateVariables &)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  return v14;
}

LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7LL, *(void *)(v5 + 40), a2);
  if ((*(_DWORD *)(v5 + 64) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(8LL, *(void *)(v5 + 48), a2);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

  uint64_t v9 = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 48) |= 8u;
  *(_BYTE *)(a1 + 28) = v9;
  uint64_t v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 0x10) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if ((v5 & 0x20) == 0) {
    goto LABEL_10;
  }
LABEL_18:
  int v11 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v11;
  if ((*(_DWORD *)(a2 + 48) & 0x40) != 0)
  {
LABEL_20:
    unint64_t v12 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x40u;
    uint64_t v13 = *(std::string **)(a1 + 32);
    if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v13 = (std::string *)operator new(0x18uLL);
      v13->__r_.__value_.__l.__size_ = 0LL;
      v13->__r_.__value_.__l.__cap_ = 0LL;
      v13->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 32) = v13;
    }

    std::string::operator=(v13, v12);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 28),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    uint64_t v65 = 0LL;
    unint64_t v66 = 0LL;
    uint64_t v64 = (uint64_t *)&v65;
    sub_1002F0B04(&v76);
    unsigned int v10 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsFingerprintDistanceFunctionType",  0x8000100u,  kCFAllocatorNull);
    int v11 = sub_1002A77CC(v76, (uint64_t)v10, &v81);
    CFRelease(v10);
    unint64_t v12 = v81;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v76 + 1);
    if (*((void *)&v76 + 1))
    {
      uint64_t v14 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
      do
        int v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    if (v11) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = 4;
    }
    sub_1000C7D20(v16, v63);
    sub_100019D9C((uint64_t)&v76, a1 + 16);
    uint64_t v79 = *(_OWORD *)(a1 + 56);
    uint64_t v80 = 1;
    sub_1000412CC(v16);
    if (v80) {
      sub_100019CEC((uint64_t)&v76);
    }
    sub_1002F0B04(&v76);
    char v17 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsClusterPersistenceDistanceThreshold",  0x8000100u,  kCFAllocatorNull);
    uint64_t v18 = sub_1002A832C(v76, (uint64_t)v17, __p);
    CFRelease(v17);
    uint64_t v19 = __p[0];
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v76 + 1);
    if (*((void *)&v76 + 1))
    {
      uint64_t v21 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
      do
        unsigned int v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    if (v18) {
      uint64_t v23 = *(double *)&v19;
    }
    else {
      uint64_t v23 = 0.35;
    }
    uint64_t v24 = v71;
    if (v71)
    {
      uint64_t v25 = 0.0;
      uint64_t v26 = 1.79769313e308;
      while (1)
      {
        uint64_t v27 = v68;
        uint64_t v58 = (uint64_t **)v24;
        if (v68) {
          break;
        }
        uint64_t v39 = v25;
LABEL_67:
        uint64_t v24 = *v58;
        uint64_t v25 = v39;
        if (!*v58) {
          goto LABEL_68;
        }
      }

      uint64_t v28 = v24 + 2;
      while (1)
      {
        uint64_t v29 = v27 + 2;
        uint64_t v31 = *(void **)(a1 + 232);
        uint64_t v30 = *(void **)(a1 + 240);
        if (v31 == v30)
        {
          uint64_t v32 = 0LL;
          uint64_t v33 = 0.0;
        }

        else
        {
          uint64_t v32 = 0LL;
          uint64_t v33 = 0.0;
          do
          {
            uint64_t v34 = (void *)a2[29];
            uint64_t v35 = (void *)a2[30];
            while (v34 != v35)
            {
              uint64_t v36 = v31[2] == *v28 && v31[3] == v28[1];
              if (v36 && v34[2] == *v29 && v34[3] == v27[3])
              {
                if (!*((void *)&v82 + 1)) {
                  sub_100008BDC();
                }
                ++v32;
                uint64_t v33 = v33
                    + (*(double (**)(void, void, void))(**((void **)&v82 + 1) + 48LL))( *((void *)&v82 + 1),  *v31,  *v34);
              }

              v34 += 4;
            }

            v31 += 4;
          }

          while (v31 != v30);
        }

        unint64_t v38 = v33 / (double)v32;
        __p[0] = *(void **)&v38;
        if (v38 >= v23)
        {
          if (v38 >= v26)
          {
LABEL_63:
            uint64_t v39 = v25;
            goto LABEL_64;
          }

          objc_msgSend( a3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v38),  @"minDistanceAbovePersistenceThreshold");
          uint64_t v26 = v38;
          uint64_t v39 = v25;
        }

        else
        {
          uint64_t v76 = *(_OWORD *)v28;
          uint64_t v77 = *(_OWORD *)v29;
          sub_10009BAB0(&v64, (double *)__p, &v76);
          uint64_t v39 = *(double *)__p;
          objc_msgSend( a3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)__p),  @"maxDistanceBelowPersistenceThreshold");
        }

  sub_1000E79D8((uint64_t)v4, v8, v7);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EDA0);
  }
  int v15 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = sub_1000F0EE0(a2);
    v18[1] = v16;
    char v17 = (char *)operator new(0x28uLL);
    *(_OWORD *)char v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    *(void *)(v17 + 29) = 0LL;
    sub_10000AE6C((uint64_t)v18, v17);
    *(_DWORD *)uint64_t buf = 68289795;
    uint64_t v20 = 0;
    uint64_t v21 = 2082;
    unsigned int v22 = "";
    uint64_t v23 = 2081;
    uint64_t v24 = v17;
    uint64_t v25 = 2050;
    uint64_t v26 = (v6 - v5) >> 4;
    uint64_t v27 = 2050;
    uint64_t v28 = (v13 - v14) >> 4;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::releaseModel, released model, ServiceUUID:%{private, location:e scape_only}s, NumModelsBefore:%{public}lu, NumModelsAfter:%{public}lu}",  buf,  0x30u);
    operator delete(v17);
  }

            __int128 v40 = &dword_1019A0000;
            *(void *)(v46 + 8) = v35;
            *(void *)(qword_1019A0B28 + 8) = v35;
            unsigned int v47 = qword_1019A0B30;
            goto LABEL_17;
          }
        }

        *(void *)(v45 + 8) = v35;
        *(void *)(qword_1019A0B18 + 8) = v35;
        char v46 = qword_1019A0B20;
        goto LABEL_16;
      }
    }

    uint64_t v28 = &dword_1019A0000;
    *(void *)(v31 + 8) = v25;
    uint64_t v27 = qword_1019A0AE8;
    goto LABEL_8;
  }

  unsigned int v10 = *(void *)(v5 + 32);
  if (!v10) {
    unsigned int v10 = *(void *)(qword_1019A0AB8 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_26;
  }
  if ((v5 & 0x100) != 0)
  {
    int v15 = *(void *)(a2 + 72);
    *(_DWORD *)(a1 + 152) |= 0x100u;
    *(void *)(a1 + 72) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 0x200) == 0)
    {
LABEL_19:
      if ((v5 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_48;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_19;
  }

  uint64_t v16 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 152) |= 0x200u;
  *(void *)(a1 + 80) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 32),  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 33),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(float *)(v5 + 20),  a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(float *)(v5 + 40),  a3);
  if ((*(_DWORD *)(v5 + 52) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 44),  (int)a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 40),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 60) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
LABEL_6:
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(*(void *)(v5 + 32) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 40));
  }

  return result;
}

    int v11 = *(_DWORD *)(a2 + 20);
    if (v11 >= 5) {
      sub_101230044();
    }
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 20) = v11;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    int v6 = *(_BYTE *)(a2 + 18);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_BYTE *)(a1 + 18) = v6;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
LABEL_10:
    if ((v5 & 0x20) != 0)
    {
      uint64_t v7 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 0x20u;
      *(_DWORD *)(a1 + 24) = v7;
    }
  }

    uint64_t v9 = a2[10];
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    uint64_t v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 14),  a2,  a4);
  if ((*(_DWORD *)(v5 + 20) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 15),  a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 24),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 76) |= 8u;
    *(double *)(a1 + 32) = result;
    int v6 = *(_DWORD *)(a2 + 76);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v7 = *(_DWORD *)(v5 + 88);
  if ((v7 & 0x40) == 0)
  {
LABEL_10:
    if ((v7 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 72),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 52),  a2,  a4);
  int v8 = *(_DWORD *)(v5 + 76);
  if ((v8 & 0x20) == 0)
  {
LABEL_12:
    if ((v8 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(void *)(v5 + 64),  (unint64_t)a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 29),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 30),  (BOOL)a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 44),  a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  a2,  *(float *)(v5 + 48),  a3);
  }
  return result;
}

  *((_BYTE *)result + 56) = self->_isStanding;
  *((_WORD *)result + 30) |= 0x80u;
  if ((*(_WORD *)&self->_has & 0x40) != 0)
  {
LABEL_6:
    *((_DWORD *)result + 12) = LODWORD(self->_tilt);
    *((_WORD *)result + 30) |= 0x40u;
  }

  if (cf) {
    CFRetain(cf);
  }
  if (qword_101993F90) {
    CFRelease((CFTypeRef)qword_101993F90);
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10182E260);
  }
  uint64_t v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    int v15 = cf;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLCommonSetRunLoop, %p", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182E260);
    }
    unint64_t v12 = 134217984;
    uint64_t v13 = cf;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CLCommonSetRunLoop, %p",  &v12);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLCommonSetRunLoop(CFRunLoopRef)", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  qword_101993F90 = (uint64_t)cf;
}

    uint64_t v14 = v18 + 1;
    if (v18 >= v15)
    {
      uint64_t v20 = *(unsigned __int16 *)(a6 + 18);
      if (v18 < v20 - v16)
      {
        uint64_t v21 = (v18 - v13) & ~((v18 - v13) >> 31);
        if (v18 >= v20) {
          unsigned int v22 = *(unsigned __int16 *)(a6 + 18);
        }
        else {
          unsigned int v22 = v18;
        }
        if (v21 >= v22)
        {
          uint64_t v23 = 0;
        }

        else
        {
          uint64_t v23 = 0;
          do
          {
            uint64_t v24 = *(float *)sub_100208A44(v17, v18);
            ++v21;
            uint64_t v20 = *(unsigned __int16 *)(a6 + 18);
            if (v18 >= v20) {
              uint64_t v25 = *(unsigned __int16 *)(a6 + 18);
            }
            else {
              uint64_t v25 = v18;
            }
          }

          while (v21 < v25);
        }

        uint64_t v37 = v10;
        uint64_t v26 = v14 & ~(v14 >> 31);
        uint64_t v27 = v18 + v13;
        uint64_t v28 = v20 - 1;
        if (v26 <= v28)
        {
          uint64_t v29 = 0;
          do
          {
            uint64_t v30 = *(float *)sub_100208A44(v17, v18);
            ++v26;
            uint64_t v31 = *(unsigned __int16 *)(a6 + 18) - 1;
            if (v31 >= v27) {
              uint64_t v31 = v27;
            }
          }

          while (v26 <= v31);
        }

        else
        {
          uint64_t v29 = 0;
        }

        if (v29 + v23 >= v34)
        {
          *(_DWORD *)(a7 + 4 * v37) = v18;
          uint64_t v14 = v27 + 1;
          unsigned int v10 = v37 + 1;
        }

        else
        {
          unsigned int v10 = v37;
        }

        int v15 = v35;
        uint64_t v13 = v36;
      }
    }
  }

  while (v10 < 0x1E);
  return v10;
}

  PBDataWriterWriteInt32Field(a3, self->_tileY, 3LL);
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  *((_DWORD *)a3 + 15) = self->_tileY;
  *((_BYTE *)a3 + 68) |= 0x20u;
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t v27 = *a1;
  uint64_t v28 = a1[1];
  if (*a1 == v28)
  {
    v92 = *a1;
  }

  else
  {
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    do
    {
      uint64_t v30 = sub_100D2DBDC( dbl_1019956D0,  *(double *)(a11 + 4),  *(double *)(a11 + 12),  *(double *)(v27 + 8),  *(double *)(v27 + 16),  0.0);
      uint64_t v31 = (double)*(int *)(v27 + 48);
      if (v30 - v31 - v20 <= 0.0)
      {
        sub_1003F45B4(v27, (uint64_t)v257);
        uint64_t v45 = v242;
        if ((unint64_t)v242 >= v243)
        {
          unsigned int v51 = (char *)v241;
          uint8_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
          char v53 = v52 + 1;
          if (v52 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          else {
            uint64_t v54 = v53;
          }
          if (v54)
          {
            uint64_t v55 = (char *)sub_1003F6AEC((uint64_t)&v243, v54);
            unsigned int v51 = (char *)v241;
            uint64_t v45 = v242;
          }

          else
          {
            uint64_t v55 = 0LL;
          }

          uint64_t v56 = &v55[32 * ((v242 - (_BYTE *)v241) >> 5)];
          uint64_t v57 = *(_OWORD *)&v257[16];
          *(_OWORD *)uint64_t v56 = *(_OWORD *)v257;
          *((_OWORD *)v56 + 1) = v57;
          uint64_t v58 = *(_OWORD *)v258;
          unint64_t v59 = *(_OWORD *)&v258[16];
          uint64_t v60 = v260;
          *((_OWORD *)v56 + 4) = v259;
          *((_OWORD *)v56 + 5) = v60;
          *((_OWORD *)v56 + 2) = v58;
          *((_OWORD *)v56 + 3) = v59;
          if (v45 == v51)
          {
            unint64_t v66 = &v55[96 * v52];
          }

          else
          {
            __int128 v61 = &v55[96 * v52];
            do
            {
              char v62 = *((_OWORD *)v45 - 5);
              *((_OWORD *)v61 - 6) = *((_OWORD *)v45 - 6);
              *((_OWORD *)v61 - 5) = v62;
              uint64_t v63 = *((_OWORD *)v45 - 4);
              uint64_t v64 = *((_OWORD *)v45 - 3);
              uint64_t v65 = *((_OWORD *)v45 - 2);
              unint64_t v66 = v61 - 96;
              *(_OWORD *)(v61 - 23) = *(_OWORD *)(v45 - 23);
              *((_OWORD *)v61 - 3) = v64;
              *((_OWORD *)v61 - 2) = v65;
              *((_OWORD *)v61 - 4) = v63;
              v45 -= 96;
              v61 -= 96;
            }

            while (v45 != v51);
          }

          uint64_t v50 = v56 + 96;
          v241 = v66;
          v242 = v56 + 96;
          v243 = (unint64_t)&v55[96 * v54];
          if (v51) {
            operator delete(v51);
          }
        }

        else
        {
          char v46 = *(_OWORD *)&v257[16];
          *(_OWORD *)v242 = *(_OWORD *)v257;
          *((_OWORD *)v45 + 1) = v46;
          unsigned int v47 = *(_OWORD *)v258;
          v48 = *(_OWORD *)&v258[16];
          v49 = v260;
          *((_OWORD *)v45 + 4) = v259;
          *((_OWORD *)v45 + 5) = v49;
          *((_OWORD *)v45 + 2) = v47;
          *((_OWORD *)v45 + 3) = v48;
          uint64_t v50 = v45 + 96;
        }

        v242 = v50;
      }

      else
      {
        uint64_t v32 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
        {
          Current = CFAbsoluteTimeGetCurrent();
          sub_100C39CE0(v27, (std::stringbuf::string_type *)v257, Current);
          uint64_t v34 = v257[23];
          uint64_t v35 = *(_BYTE **)v257;
          sub_100832C64(a11, &__p);
          uint64_t v36 = v257;
          if (v34 < 0) {
            uint64_t v36 = v35;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#Warning WIFI_LOC: filtered by location hint, ap, %s, hint, %s",  (uint8_t *)&buf,  0x16u);
          p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
          if ((v257[23] & 0x80000000) != 0) {
            operator delete(*(void **)v257);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(v257, 0x65CuLL);
          unint64_t v38 = qword_101934A78;
          uint64_t v39 = CFAbsoluteTimeGetCurrent();
          sub_100C39CE0(v27, &__p, v39);
          int64_t size = (char)__p.__r_.__value_.__s.__size_;
          uint64_t v41 = __p.__r_.__value_.__r.__words[0];
          sub_100832C64(a11, &buf);
          uint64_t v42 = &__p;
          if (size < 0) {
            uint64_t v42 = (std::stringbuf::string_type *)v41;
          }
          p_uint64_t buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_uint64_t buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          v253 = 136315394;
          v254 = v42;
          v255 = 2080;
          v256 = p_buf;
          LODWORD(v233) = 22;
          uint64_t v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v257,  1628LL,  &_mh_execute_header,  v38,  0LL,  "#Warning WIFI_LOC: filtered by location hint, ap, %s, hint, %s",  (const char *)&v253,  v233);
          p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigne d int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)",  "%s\n",  v44);
          if (v44 != v257) {
            free(v44);
          }
        }
      }

      v27 += 96LL;
    }

    while (v27 != v28);
    uint64_t v27 = *a1;
    v92 = a1[1];
  }

  if (0xAAAAAAAAAAAAAAABLL * ((v92 - v27) >> 5) >= *((unsigned int *)sub_100F4BF14() + 22) && v241 == v242)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101836D60);
    }
    v191 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      v192 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
      *(_DWORD *)v257 = 134218240;
      *(void *)&v257[4] = v192;
      *(_WORD *)&v257[12] = 2048;
      *(void *)&v257[14] = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
      _os_log_impl( (void *)&_mh_execute_header,  v191,  OS_LOG_TYPE_DEFAULT,  "#Warning WIFI_LOC: revert hint, %lu, %lu",  v257,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v257, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101836D60);
      }
      v231 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v231;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 0xAAAAAAAAAAAAAAABLL
                                                                                 * ((v242 - (_BYTE *)v241) >> 5);
      LODWORD(v233) = 22;
      v232 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v257,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning WIFI_LOC: revert hint, %lu, %lu",  &__p,  v233);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned in t, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDae monLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)",  "%s\n",  v232);
      if (v232 != v257) {
        free(v232);
      }
    }

    v194 = *a1;
    v193 = a1[1];
    if (*a1 != v193)
    {
      do
      {
        sub_1003F45B4(v194, (uint64_t)v257);
        v195 = v242;
        if ((unint64_t)v242 >= v243)
        {
          v201 = (char *)v241;
          v202 = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
          v203 = v202 + 1;
          if (v202 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          else {
            v204 = v203;
          }
          if (v204)
          {
            v205 = (char *)sub_1003F6AEC((uint64_t)&v243, v204);
            v201 = (char *)v241;
            v195 = v242;
          }

          else
          {
            v205 = 0LL;
          }

          v206 = &v205[32 * ((v242 - (_BYTE *)v241) >> 5)];
          v207 = *(_OWORD *)&v257[16];
          *(_OWORD *)v206 = *(_OWORD *)v257;
          *((_OWORD *)v206 + 1) = v207;
          v208 = *(_OWORD *)v258;
          v209 = *(_OWORD *)&v258[16];
          v210 = v260;
          *((_OWORD *)v206 + 4) = v259;
          *((_OWORD *)v206 + 5) = v210;
          *((_OWORD *)v206 + 2) = v208;
          *((_OWORD *)v206 + 3) = v209;
          if (v195 == v201)
          {
            v216 = &v205[96 * v202];
          }

          else
          {
            v211 = &v205[96 * v202];
            do
            {
              v212 = *((_OWORD *)v195 - 5);
              *((_OWORD *)v211 - 6) = *((_OWORD *)v195 - 6);
              *((_OWORD *)v211 - 5) = v212;
              v213 = *((_OWORD *)v195 - 4);
              v214 = *((_OWORD *)v195 - 3);
              v215 = *((_OWORD *)v195 - 2);
              v216 = v211 - 96;
              *(_OWORD *)(v211 - 23) = *(_OWORD *)(v195 - 23);
              *((_OWORD *)v211 - 3) = v214;
              *((_OWORD *)v211 - 2) = v215;
              *((_OWORD *)v211 - 4) = v213;
              v195 -= 96;
              v211 -= 96;
            }

            while (v195 != v201);
          }

          v200 = v206 + 96;
          v241 = v216;
          v242 = v206 + 96;
          v243 = (unint64_t)&v205[96 * v204];
          if (v201) {
            operator delete(v201);
          }
        }

        else
        {
          v196 = *(_OWORD *)&v257[16];
          *(_OWORD *)v242 = *(_OWORD *)v257;
          *((_OWORD *)v195 + 1) = v196;
          v197 = *(_OWORD *)v258;
          v198 = *(_OWORD *)&v258[16];
          v199 = v260;
          *((_OWORD *)v195 + 4) = v259;
          *((_OWORD *)v195 + 5) = v199;
          *((_OWORD *)v195 + 2) = v197;
          *((_OWORD *)v195 + 3) = v198;
          v200 = v195 + 96;
        }

        v242 = v200;
        v194 += 96LL;
      }

      while (v194 != v193);
    }

    goto LABEL_86;
  }

  uint64_t v91 = 1;
LABEL_91:
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
  unint64_t v94 = 126 - 2 * __clz(v93);
  if (v242 == v241) {
    double v95 = 0LL;
  }
  else {
    double v95 = v94;
  }
  sub_1003FB838((uint64_t)v241, v242, v95, 1);
  double v96 = v242;
  while (1)
  {
    v97 = sub_100F4BF14();
    v98 = 0xAAAAAAAAAAAAAAABLL * ((v96 - (_BYTE *)v241) >> 5);
    v99 = v242;
    double v96 = v242 - 96;
    v242 -= 96;
  }

  v100 = (char *)v241;
  v101 = v242 - (_BYTE *)v241;
  if (v242 == v241) {
    goto LABEL_116;
  }
  do
  {
    v102 = *((double *)v100 + 8);
    BOOL v104 = *((_DWORD *)v100 + 13);
    __int16 v103 = *((_DWORD *)v100 + 14);
    v105 = *((double *)v100 + 4);
    __int128 v106 = sub_100F4BF14();
    sub_1003EE184((double *)v106, (double)v103, (double)v104, v105, a3 - v102);
    *(float *)&char v107 = v107;
    *((_DWORD *)v100 + 20) = LODWORD(v107);
    v100 += 96;
  }

  while (v100 != v99);
  v108 = (double *)v241;
  if (v241 == v242)
  {
LABEL_116:
    v236 = 1;
  }

  else
  {
    v109 = 360.0;
    v110 = -360.0;
    do
    {
      v111 = v108[1];
      if (v111 > v110) {
        v110 = v108[1];
      }
      if (v111 < v109) {
        v109 = v108[1];
      }
      v108 += 12;
    }

    while (v108 != (double *)v242);
    v236 = 1;
    if (v110 > 179.9 && v109 < -179.9)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101836D40);
      }
      v112 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v257 = 134349312;
        *(double *)&v257[4] = v109;
        *(_WORD *)&v257[12] = 2050;
        *(double *)&v257[14] = v110;
        _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEBUG,  "WifiCalc, b360repr, min, %{public}.1lf, max, %{public}.1lf",  v257,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(v257, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101836D40);
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v109;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v110;
        LODWORD(v233) = 22;
        v230 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v257,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, b360repr, min, %{public}.1lf, max, %{public}.1lf",  &__p,  v233);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, C LDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)",  "%s\n",  v230);
        if (v230 != v257) {
          free(v230);
        }
      }

      v113 = (double *)v241;
      v114 = v242;
      if (v241 != v242)
      {
        do
        {
          v113[1] = fmod(v113[1] + 360.0, 360.0);
          v113 += 12;
        }

        while (v113 != (double *)v114);
      }

      v236 = 0;
    }
  }

  v115 = sub_100F4BF14();
  v238 = sub_10078B920((double **)&v241, v18, a4, *((unsigned __int8 *)v115 + 120));
  v116 = (v242 - (_BYTE *)v241) >> 5;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101836D40);
  }
  v117 = 0xAAAAAAAAAAAAAAABLL * (v101 >> 5);
  v118 = (os_log_s *)qword_101934858;
  v119 = 0xAAAAAAAAAAAAAAABLL * v116;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    v120 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    v121 = *(void *)(a11 + 20);
    *(_DWORD *)v257 = 134350592;
    *(void *)&v257[4] = v120;
    *(_WORD *)&v257[12] = 2050;
    *(void *)&v257[14] = v93;
    *(_WORD *)&v257[22] = 2050;
    *(void *)&v257[24] = v117;
    *(_WORD *)v258 = 2050;
    *(void *)&v258[2] = v119;
    *(_WORD *)&v258[10] = 1026;
    *(_DWORD *)&v258[12] = v238;
    *(_WORD *)&v258[16] = 2050;
    *(void *)&v258[18] = v121;
    *(_WORD *)&v258[26] = 1026;
    *(_DWORD *)&v258[28] = v91;
    _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEBUG,  "WifiCalc, counts, %{public}ld, %{public}ld, %{public}ld, %{public}ld, verified, %{public}d, hint, %{public}.1f, %{public}d",  v257,  0x40u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v257, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101836D40);
    }
    v217 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    v218 = *(void *)(a11 + 20);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134350592;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v217;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
    v245 = *(double *)&v117;
    v246 = 2050;
    v247 = *(double *)&v119;
    v248 = 1026;
    *(_DWORD *)v249 = v238;
    *(_WORD *)&v249[4] = 2050;
    *(void *)&v249[6] = v218;
    v250 = 1026;
    v251 = v91;
    LODWORD(v233) = 64;
    v219 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v257,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, counts, %{public}ld, %{public}ld, %{public}ld, %{public}ld, verified, %{public}d, hint, % {public}.1f, %{public}d",  &__p,  v233);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonL ocation &, CFAbsoluteTime, LatLonDebuggingData &, double)",  "%s\n",  v219);
    if (v219 != v257) {
      free(v219);
    }
  }

  v122 = atomic_load((unsigned __int8 *)&qword_101995728);
  if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_101995728))
  {
    sub_100D2D9A4((uint64_t)dbl_101995700);
    __cxa_guard_release(&qword_101995728);
  }

  v123 = (double *)v241;
  v124 = (v242 - (_BYTE *)v241) / 96;
  if (v242 == v241)
  {
    v126 = 0;
  }

  else
  {
    v125 = 0LL;
    v126 = 0;
    v127 = 0LL;
    v128 = v124 - 1;
    if (v124 <= 1) {
      v129 = 1LL;
    }
    else {
      v129 = (v242 - (_BYTE *)v241) / 96;
    }
    v240 = v129;
    do
    {
      v130 = v127 + 1;
      v131 = v124;
      if (v127 + 1 < v124)
      {
        v132 = v125;
        v133 = v128;
        do
        {
          v134 = sub_100D2DBDC( dbl_101995700,  v123[12 * v127],  v123[12 * v127 + 1],  *(double *)((char *)v123 + v132 + 96),  *(double *)((char *)v123 + v132 + 104),  0.0);
          v123 = (double *)v241;
          v132 += 96LL;
          --v133;
        }

        while (v133);
      }

      --v128;
      v125 += 96LL;
      ++v127;
      v124 = v131;
    }

    while (v130 != v240);
  }

  v135 = (v124 - 1) * v124;
  if (v135 >= 2) {
    v136 = (double)v126 * 100.0 / (double)(v135 >> 1);
  }
  else {
    v136 = 100.0;
  }
  v137 = a13;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101836D40);
  }
  v138 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v257 = 134283521;
    *(double *)&v257[4] = v136;
    _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEBUG,  "WifiCalc, apReachOverlapPercentage, %{private}f",  v257,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v257, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101836D40);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v136;
    LODWORD(v233) = 12;
    v220 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v257,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, apReachOverlapPercentage, %{private}f",  &__p,  v233);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void analyzeApCentroidReachOverlap(const std::vector<CLWifiAccessPoint> &)",  "%s\n",  v220);
    if (v220 != v257) {
      free(v220);
    }
  }

  HIDWORD(v139) = -1775253149 * rand() + 28633112;
  LODWORD(v139) = HIDWORD(v139);
  if ((v139 >> 2) <= 0xDA740C)
  {
    *(void *)v257 = _NSConcreteStackBlock;
    *(void *)&v257[8] = 3221225472LL;
    *(void *)&v257[16] = sub_1003F6A48;
    *(void *)&v257[24] = &unk_101827B10;
    *(double *)v258 = v136;
    *(void *)&v258[8] = v124;
    AnalyticsSendEventLazy(@"com.apple.clx.wifiloc.apreach", v257);
  }

  v140 = v242;
  if (v241 != v242)
  {
    v141 = (char *)v241 + 72;
    do
    {
      sub_1007EC360(&__p);
      v143 = v137[1];
      v142 = v137[2];
      if (v143 >= v142)
      {
        v145 = *v137;
        v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - *v137) >> 3);
        v147 = v146 + 1;
        if (v146 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v142 - v145) >> 3);
        if (2 * v148 > v147) {
          v147 = 2 * v148;
        }
        if (v148 >= 0x555555555555555LL) {
          v149 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          v149 = v147;
        }
        *(void *)v258 = a13 + 2;
        if (v149) {
          v150 = (char *)sub_10000701C((uint64_t)(a13 + 2), v149);
        }
        else {
          v150 = 0LL;
        }
        v151 = &v150[24 * v146];
        *(void *)v257 = v150;
        *(void *)&v257[8] = v151;
        *(void *)&v257[24] = &v150[24 * v149];
        v152 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v151 + 2) = __p.__r_.__value_.__l.__cap_;
        *(_OWORD *)v151 = v152;
        memset(&__p, 0, sizeof(__p));
        *(void *)&v257[16] = v151 + 24;
        sub_100013F10(a13, v257);
        v153 = a13[1];
        sub_100014098((uint64_t)v257);
        v154 = (char)__p.__r_.__value_.__s.__size_;
        a13[1] = v153;
        v137 = a13;
        if (v154 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }

      else
      {
        v144 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v143 + 16) = __p.__r_.__value_.__l.__cap_;
        *(_OWORD *)v143 = v144;
        v137[1] = v143 + 24;
      }

      if (v141[16]) {
        ++*((_DWORD *)v137 + 6);
      }
      v155 = v141 + 24;
      v141 += 96;
    }

    while (v155 != v140);
  }

  v156 = a12;
  if ((v238 & 1) != 0)
  {
    v157 = (double *)v241;
    v158 = v242;
    if (v241 == v242)
    {
      v167 = 0.0;
      v168 = 1.79769313e308;
      v166 = 0.0;
      v161 = 0.0;
    }

    else
    {
      v159 = 0.0;
      v160 = 0.0;
      v161 = 0.0;
      v162 = (char *)v241;
      do
      {
        v163 = *((float *)v162 + 20);
        v164 = *(double *)v162;
        v165 = *((double *)v162 + 1);
        v162 += 96;
        v159 = v159 + v163 * v164;
        v160 = v160 + v163 * v165;
        v161 = v161 + v163;
      }

      while (v162 != v242);
      v166 = 0.0;
      v167 = 0.0;
      if (v161 > 0.0)
      {
        v167 = v159 / v161;
        v166 = v160 / v161;
      }

      v168 = 1.79769313e308;
      if (v241 != v242)
      {
        do
        {
          if (v157[4] > 0.0)
          {
            v169 = sub_100D2DBDC(dbl_1019956D0, v167, v166, *v157, v157[1], v18);
            v170 = v157[4];
            if (v170 < v169) {
              v170 = v169;
            }
            if (v170 < v168) {
              v168 = v170;
            }
            v171 = v169 + (double)*((int *)v157 + 13);
            if (v171 >= *a10 && *a10 != -1.0) {
              v171 = *a10;
            }
            *a10 = v171;
          }

          v157 += 12;
        }

        while (v157 != (double *)v158);
        v157 = (double *)v241;
        v173 = v242;
        v156 = a12;
        goto LABEL_191;
      }
    }

    v173 = (char *)v241;
LABEL_191:
    if (v168 >= 1.79769313e308) {
      v177 = -1.0;
    }
    else {
      v177 = v168;
    }
    *(double *)(v156 + 20) = v177;
    *(double *)(v156 + 4) = v167;
    *(double *)(v156 + 12) = v166;
    *(_DWORD *)(v156 + 132) = 1;
    *a9 = -1431655765 * ((unint64_t)(v173 - (char *)v157) >> 5);
    v178 = a8;
    *a8 = 0;
    if (*a10 < v177)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101836D40);
      }
      v179 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        v180 = *a10;
        *(_DWORD *)v257 = 134349312;
        *(double *)&v257[4] = v180;
        *(_WORD *)&v257[12] = 2050;
        *(double *)&v257[14] = v177;
        _os_log_impl( (void *)&_mh_execute_header,  v179,  OS_LOG_TYPE_DEBUG,  "WifiCalc, invalid estimatedWorstCaseErrorMeters, estimatedWorstCaseErrorMeters, %{public}0.1f, hunc, %{public}0.1f, #Warning",  v257,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(v257, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101836D40);
        }
        v228 = *a10;
        LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v228;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v177;
        LODWORD(v233) = 22;
        v229 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v257,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, invalid estimatedWorstCaseErrorMeters, estimatedWorstCaseErrorMeters, %{public}0.1f, hunc, %{public}0.1f, #Warning",  &__p,  v233);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, C LDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)",  "%s\n",  v229);
        if (v229 != v257) {
          free(v229);
        }
        v178 = a8;
      }

      *a10 = -1.0;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101836D40);
    }
    v181 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      v182 = *a10;
      v183 = *a9;
      v184 = *v178;
      *(_DWORD *)v257 = 134350593;
      *(double *)&v257[4] = v161;
      *(_WORD *)&v257[12] = 2049;
      *(double *)&v257[14] = v167;
      *(_WORD *)&v257[22] = 2049;
      *(double *)&v257[24] = v166;
      *(_WORD *)v258 = 2050;
      *(double *)&v258[2] = v177;
      *(_WORD *)&v258[10] = 2050;
      *(double *)&v258[12] = v182;
      *(_WORD *)&v258[20] = 1026;
      *(_DWORD *)&v258[22] = v183;
      *(_WORD *)&v258[26] = 1026;
      *(_DWORD *)&v258[28] = v184;
      _os_log_impl( (void *)&_mh_execute_header,  v181,  OS_LOG_TYPE_DEBUG,  "WifiCalc, est, %{public}.1f, %{private}0.3f, %{private}0.3f, hunc, %{public}0.1f, estWorstError, %{public}0.1f, n, %{public}d, x, %{public}d",  v257,  0x40u);
    }

    v185 = sub_1002921D0(115, 2);
    v156 = a12;
    if (v185)
    {
      bzero(v257, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101836D40);
      }
      v224 = *a10;
      v225 = *a9;
      v226 = *v178;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134350593;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v161;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v167;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
      v245 = v166;
      v246 = 2050;
      v247 = v177;
      v248 = 2050;
      *(double *)v249 = v224;
      *(_WORD *)&v249[8] = 1026;
      *(_DWORD *)&v249[10] = v225;
      v250 = 1026;
      v251 = v226;
      LODWORD(v233) = 64;
      v227 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v257,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiCalc, est, %{public}.1f, %{private}0.3f, %{private}0.3f, hunc, %{public}0.1f, estWorstError, %{public}0.1f, n, %{public}d, x, %{public}d",  &__p,  v233);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned in t, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDae monLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)",  "%s\n",  v227);
      if (v227 != v257) {
        free(v227);
      }
      v156 = a12;
    }

    goto LABEL_206;
  }

  v174 = *a1;
  if (a1[1] - *a1 == 96)
  {
    *(_OWORD *)(a12 + 4) = *(_OWORD *)(v174 + 8);
    *(_DWORD *)(a12 + 132) = 1;
    v175 = *(double *)(v174 + 32);
    v176 = *(_DWORD *)(v174 + 48);
    *(double *)(a12 + 20) = v175;
    *a10 = (double)v176;
    *a9 = 1;
    *a8 = 1;
  }

  else
  {
    *a9 = 0;
    *a8 = 0;
  }

  PBDataWriterWriteDoubleField(a3, 5LL, self->_latitude);
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  *((void *)a3 + 1) = *(void *)&self->_latitude;
  *((_WORD *)a3 + 36) |= 1u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_6:
    if ((has & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  v5[1] = *(id *)&self->_latitude;
  *((_WORD *)v5 + 36) |= 1u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_6:
    if ((has & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

    uint64_t result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(double *)(a1 + 40) = result;
    if ((*(_DWORD *)(a2 + 60) & 0x20) == 0) {
      return result;
    }
LABEL_10:
    uint64_t result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(double *)(a1 + 48) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  }
  return result;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

    sub_1005527D4(*(void **)(a1 + 136), (uint64_t)v10, 1, a4);
    uint64_t v18 = *(_DWORD **)(a1 + 272);
    if (v18 && (*(_DWORD *)(a1 + 312) == 2 || *v18 == 1))
    {
      [*(id *)(a1 + 136) setInt:2 forKey:@"CorrectiveCompensationEnabled" atKeyPath:v10];
      [*(id *)(a1 + 136) persist];
    }

    sub_1010DDBC0(&__p, "");
    sub_100544214(a1, v10, (uint64_t)&__p);
    if (SBYTE3(v25) < 0) {
      operator delete(__p);
    }
    return;
  }

  uint64_t v19 = sub_100552064(a1, (uint64_t)v10);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  uint64_t v20 = qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    std::string __p = (void *)68289538;
    unsigned int v22 = 2082;
    uint64_t v23 = "";
    uint64_t v24 = 2114;
    uint64_t v25 = v10;
    uint64_t v26 = 1026;
    uint64_t v27 = v19;
    int v15 = "{msg%{public}.0s:#TemporaryAuth #LocationButtonUse prompting status, Client:%{public, location:esc"
          "ape_only}@, PromptingStatus:%{public}hhd}";
    uint64_t v16 = (os_log_s *)v20;
    char v17 = 34;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&__p, v17);
  }

  PBDataWriterWriteDoubleField(a3, 3LL, self->_southEastLatitude);
  if ((*(_BYTE *)&self->_has & 8) != 0) {
LABEL_5:
  }
    PBDataWriterWriteDoubleField(a3, 4LL, self->_southEastLongitude);
LABEL_6:
  uint64_t v13 = 0u;
  uint64_t v14 = 0u;
  int v11 = 0u;
  unint64_t v12 = 0u;
  tiles = self->_tiles;
  uint64_t v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( tiles,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
  if (v7)
  {
    int v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(tiles);
        }
        PBDataWriterWriteSubmessage(a3, *(void *)(*((void *)&v11 + 1) + 8LL * (void)i), 5LL);
      }

      int v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( tiles,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
    }

    while (v8);
  }

  *((void *)v5 + 3) = *(void *)&self->_southEastLatitude;
  *((_BYTE *)v5 + 48) |= 4u;
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_5:
    *((void *)v5 + 4) = *(void *)&self->_southEastLongitude;
    *((_BYTE *)v5 + 48) |= 8u;
  }

  self->_southEastLatitude = *((double *)a3 + 3);
  *(_BYTE *)&self->_has |= 4u;
  if ((*((_BYTE *)a3 + 48) & 8) != 0)
  {
LABEL_5:
    self->_southEastLongitude = *((double *)a3 + 4);
    *(_BYTE *)&self->_has |= 8u;
  }

    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 124) |= 8u;
    *(void *)(a1 + 32) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }

    unsigned int v10 = *(_BYTE *)(a2 + 20);
    *(_DWORD *)(a1 + 28) |= 4u;
    *(_BYTE *)(a1 + 20) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  int v6 = v5[13];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v9 >= 0x80)
  {
    unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    uint64_t v3 = a1[8];
  }

  else
  {
    unsigned int v10 = 2;
  }

  uint64_t v4 = (v10 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_20:
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
    else {
      unint64_t v12 = 2;
    }
    uint64_t v4 = (v12 + v4);
  }

  uint64_t v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 16) = v9;
  uint64_t v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  if ((v5[11] & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  }
  return result;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

    int v11 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(_DWORD *)(a1 + 20) = v11;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 0x10u;
    *(_DWORD *)(a1 + 24) = v6;
  }

  uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v9 >= 0x80)
  {
    unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    uint64_t v3 = a1[8];
  }

  else
  {
    unsigned int v10 = 2;
  }

  uint64_t v4 = (v10 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_20:
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
    else {
      unint64_t v12 = 2;
    }
    uint64_t v4 = (v12 + v4);
  }

    unsigned int v10 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(void *)(a1 + 32) = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }

    if (v9 == 4) {
      return 1LL;
    }
  }

    uint64_t v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
LABEL_18:
      int v11 = *(_DWORD *)(a2 + 28);
      if (v11 >= 5) {
        sub_10124164C();
      }
      *(_DWORD *)(a1 + 36) |= 0x10u;
      *(_DWORD *)(a1 + 28) = v11;
      return;
    }

  if ((v3 & 4) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v11 >= 0x80)
    {
      unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      unint64_t v12 = 2;
    }

    uint64_t v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    uint64_t v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_28:
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }

    else
    {
      uint64_t v16 = 2;
    }

    uint64_t v4 = (v16 + v4);
  }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_26;
  }
  if ((v5 & 0x100) != 0)
  {
    int v11 = a2[10];
    a1[20] |= 0x100u;
    a1[10] = v11;
    uint64_t v5 = a2[20];
    if ((v5 & 0x200) == 0)
    {
LABEL_19:
      if ((v5 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_31;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_19;
  }

  unint64_t v12 = a2[11];
  a1[20] |= 0x200u;
  a1[11] = v12;
  uint64_t v5 = a2[20];
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_32;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[4];
    if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      uint64_t v3 = a1[20];
    }

    else
    {
      unsigned int v10 = 1;
    }

    uint64_t v4 = (v4 + v10 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_31;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[5];
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    uint64_t v3 = a1[20];
  }

  else
  {
    unint64_t v12 = 1;
  }

  uint64_t v4 = (v4 + v12 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  if ((v3 & 4) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v11 >= 0x80)
    {
      unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      unint64_t v12 = 2;
    }

    uint64_t v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    uint64_t v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_28:
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    else {
      uint64_t v16 = 2;
    }
    uint64_t v4 = (v16 + v4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[8],  a2,  a4);
  if ((v5[11] & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[9],  a2,  a4);
  }
  return result;
}

  if ((v3 & 4) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v11 >= 0x80)
    {
      unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      unint64_t v12 = 2;
    }

    uint64_t v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_30;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    uint64_t v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }

  if ((v3 & 4) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v11 >= 0x80)
    {
      unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 40);
    }

    else
    {
      unint64_t v12 = 2;
    }

    uint64_t v4 = (v12 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 40);
  }

  else
  {
    uint64_t v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1328 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    int v11 = *(_DWORD *)(a2 + 24);
    a1[9] |= 0x10u;
    a1[6] = v11;
    if ((*(_DWORD *)(a2 + 36) & 0x20) == 0) {
      return;
    }
LABEL_10:
    int v6 = *(_DWORD *)(a2 + 28);
    a1[9] |= 0x20u;
    a1[7] = v6;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v9 >= 0x80)
    {
      unsigned int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 52);
    }

    else
    {
      unsigned int v10 = 2;
    }

    uint64_t v4 = (v10 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_31;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v11 >= 0x80)
  {
    unint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 52);
  }

  else
  {
    unint64_t v12 = 2;
  }

  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_19:
    if ((v3 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  int v6 = v5[12];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 76) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(*(void *)(v5 + 24) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 32));
  }

  int v8 = *(_DWORD *)(v5 + 76);
  if ((v8 & 0x20) != 0)
  {
    uint64_t v9 = *(void *)(v5 + 48);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1398 + 48);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
    int v8 = *(_DWORD *)(v5 + 76);
    if ((v8 & 0x40) == 0)
    {
LABEL_11:
      if ((v8 & 0x80) == 0) {
        goto LABEL_12;
      }
LABEL_22:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 60),  a2,  a4);
      if ((*(_DWORD *)(v5 + 76) & 0x100) == 0) {
        return result;
      }
      goto LABEL_23;
    }
  }

  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_11;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 56),  a2,  a4);
  int v8 = *(_DWORD *)(v5 + 76);
  if ((v8 & 0x80) != 0) {
    goto LABEL_22;
  }
LABEL_12:
  if ((v8 & 0x100) == 0) {
    return result;
  }
LABEL_23:
  unsigned int v10 = *(void *)(v5 + 64);
  if (!v10) {
    unsigned int v10 = *(void *)(qword_1019A1398 + 64);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v10,  a2,  a4);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 64) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(*(void *)(v5 + 24) + 4 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 32));
  }

  if (*(int *)(v5 + 48) >= 1)
  {
    int v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(*(void *)(v5 + 40) + 4 * v8++),  a2,  a4);
    while (v8 < *(int *)(v5 + 48));
  }

  if ((*(_BYTE *)(v5 + 64) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 56),  a2,  a4);
  }
  return result;
}

    if (v9 == 4) {
      return 1LL;
    }
  }

    int v11 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 20) = v11;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0) {
      return;
    }
LABEL_11:
    uint64_t v7 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_DWORD *)(a1 + 40) = v7;
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    unsigned int v10 = *(_DWORD *)(a2 + 20);
    a1[10] |= 8u;
    a1[5] = v10;
    uint64_t v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }

    if (v9 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 68) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(*(void *)(v5 + 24) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 32));
  }

  int v8 = *(_DWORD *)(v5 + 68);
  if ((v8 & 0x20) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 48),  a2,  a4);
    int v8 = *(_DWORD *)(v5 + 68);
    if ((v8 & 0x40) == 0)
    {
LABEL_11:
      if ((v8 & 0x80) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }

  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_11;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
  int v8 = *(_DWORD *)(v5 + 68);
  if ((v8 & 0x80) == 0)
  {
LABEL_12:
    if ((v8 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 60),  a2,  a4);
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

    int v11 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v11;
    if ((*(_DWORD *)(a2 + 44) & 0x20) == 0) {
      return;
    }
LABEL_10:
    int v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 44),  (int)a2,  a4);
  }
  return result;
}

    uint64_t v32 = (qword_1019A2020 - qword_1019A2018) >> 2;
    if (qword_1019A2020 != qword_1019A2018)
    {
      uint64_t v33 = 0LL;
      if (v32 <= 1) {
        uint64_t v34 = 1LL;
      }
      else {
        uint64_t v34 = (qword_1019A2020 - qword_1019A2018) >> 2;
      }
      while (v5 >= *(float *)(qword_1019A2018 + 4 * v33))
      {
        if (v34 == ++v33) {
          goto LABEL_24;
        }
      }

      LODWORD(v32) = v33;
    }

  sub_1002F0B04(buf);
  int v11 = sub_1002A6F64(*(uint64_t *)buf, "GpsConformanceTestMode", (BOOL *)&v27);
  if ((_BYTE)v27) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = (std::__shared_weak_count *)v29[0];
  if (!v29[0]) {
    goto LABEL_23;
  }
  uint64_t v14 = (unint64_t *)(v29[0] + 8LL);
  do
    int v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v12) {
      goto LABEL_29;
    }
  }

  else
  {
LABEL_23:
    if (!v12) {
      goto LABEL_29;
    }
  }

  *(_BYTE *)(a1 + 7) = 1;
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v16 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2Cfg EED2 is disabled due to conformance mode",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    v26[0] = 0;
    LODWORD(v25) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2Cfg EED2 is disabled due to conformance mode",  v26,  v25);
    uint64_t v24 = (uint8_t *)v23;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLEmergencyEED2::Config::Config()", "%s\n", v23);
    if (v24 != buf) {
      free(v24);
    }
  }

      *(double *)(a1 + 88) = v20;
    }

    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
      uint64_t v23 = *(_OWORD *)(a2 + 16);
      uint64_t v24 = *(_OWORD *)(a2 + 32);
      uint64_t v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 56) = v25;
      *(_OWORD *)(a1 + 40) = v24;
      *(_OWORD *)(a1 + 24) = v23;
      uint64_t v26 = *(_OWORD *)(a2 + 80);
      uint64_t v27 = *(_OWORD *)(a2 + 96);
      uint64_t v28 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 136) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 120) = v28;
      *(_OWORD *)(a1 + 104) = v27;
      *(_OWORD *)(a1 + 88) = v26;
    }

    uint64_t v37 = *v19;
    *(void *)(v37 + 8) = v19[1];
    *(void *)v19[1] = v37;
    *(void *)(a1 + 160) = v5 - 1;
    operator delete(v19);
    unint64_t v38 = operator new(0x98uLL);
    uint64_t v39 = *(_OWORD *)(a2 + 112);
    v38[7] = *(_OWORD *)(a2 + 96);
    v38[8] = v39;
    *((void *)v38 + 18) = *(void *)(a2 + 128);
    __int128 v40 = *(_OWORD *)(a2 + 48);
    v38[3] = *(_OWORD *)(a2 + 32);
    v38[4] = v40;
    uint64_t v41 = *(_OWORD *)(a2 + 80);
    v38[5] = *(_OWORD *)(a2 + 64);
    v38[6] = v41;
    uint64_t result = *(__n128 *)(a2 + 16);
    v38[1] = *(_OWORD *)a2;
    v38[2] = result;
    uint64_t v42 = *(void **)(a1 + 152);
    char v43 = *(void *)(a1 + 160);
    *(void *)unint64_t v38 = v4;
    *((void *)v38 + 1) = v42;
    void *v42 = v38;
    *(void *)(a1 + 152) = v38;
    *(void *)(a1 + 160) = v43 + 1;
  }

  else
  {
    int v6 = operator new(0x98uLL);
    uint64_t v7 = *(_OWORD *)(a2 + 112);
    void v6[7] = *(_OWORD *)(a2 + 96);
    v6[8] = v7;
    *((void *)v6 + 18) = *(void *)(a2 + 128);
    int v8 = *(_OWORD *)(a2 + 48);
    void v6[3] = *(_OWORD *)(a2 + 32);
    v6[4] = v8;
    uint64_t v9 = *(_OWORD *)(a2 + 80);
    v6[5] = *(_OWORD *)(a2 + 64);
    v6[6] = v9;
    unsigned int v10 = *(_OWORD *)(a2 + 16);
    v6[1] = *(_OWORD *)a2;
    v6[2] = v10;
    int v11 = *(void **)(a1 + 152);
    *(void *)int v6 = v4;
    *((void *)v6 + 1) = v11;
    char *v11 = v6;
    *(void *)(a1 + 152) = v6;
    *(void *)(a1 + 160) = v5 + 1;
    unint64_t v12 = *(_OWORD *)(a2 + 80);
    uint64_t v13 = *(_OWORD *)(a2 + 96);
    uint64_t v14 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 136) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 120) = v14;
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 88) = v12;
    int v15 = *(_OWORD *)(a2 + 16);
    uint64_t v16 = *(_OWORD *)(a2 + 32);
    char v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 56) = v17;
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 24) = v15;
    uint64_t result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  v4,  a4);
  int v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  v4,  a4);
  int v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  int v8 = *(void *)(v5 + 16);
  if (!v8) {
    int v8 = *(void *)(qword_1019A17B8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A17D0 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  uint64_t v20 = *(void *)(v17 + 48);
  uint64_t v21 = *(void *)(v15 + 48);
  if (v20 == v21)
  {
    unsigned int v22 = *(void *)(v17 + 56);
    uint64_t v23 = *(void *)(v15 + 56);
    uint64_t v24 = v22 < v23;
    if (v22 == v23)
    {
      uint64_t v25 = *(void *)(v17 + 64);
      uint64_t v26 = *(void *)(v15 + 64);
      uint64_t v24 = v25 < v26;
      if (v25 == v26) {
        uint64_t v24 = *(_OWORD *)(v17 + 72) < *(_OWORD *)(v15 + 72);
      }
    }

    if (!v24
      && (*(void *)(v17 + 72) != *(void *)(v15 + 72)
       || *(void *)(v17 + 64) != *(void *)(v15 + 64)
       || v22 != v23
       || *(void *)(v17 + 80) != *(void *)(v15 + 80)
       || !sub_10085DFAC(v17, v15, v16)))
    {
      goto LABEL_45;
    }
  }

  else if (v20 >= v21)
  {
    goto LABEL_45;
  }

  uint64_t v27 = *(_OWORD *)(v17 + 48);
  uint64_t v85 = *(_OWORD *)(v17 + 32);
  uint64_t v86 = v27;
  uint64_t v28 = *(_OWORD *)(v17 + 112);
  uint64_t v89 = *(_OWORD *)(v17 + 96);
  uint64_t v90 = v28;
  uint64_t v29 = *(_OWORD *)(v17 + 80);
  uint64_t v87 = *(_OWORD *)(v17 + 64);
  v88 = v29;
  double v95 = *(void *)(v17 + 192);
  uint64_t v30 = *(_OWORD *)(v17 + 176);
  v93 = *(_OWORD *)(v17 + 160);
  unint64_t v94 = v30;
  uint64_t v31 = *(_OWORD *)(v17 + 144);
  uint64_t v91 = *(_OWORD *)(v17 + 128);
  v92 = v31;
  uint64_t v32 = *(_OWORD *)(v17 + 16);
  v83 = *(_OWORD *)v17;
  uint64_t v84 = v32;
  uint64_t v33 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v17 + 160) = *(_OWORD *)(v15 + 160);
  *(_OWORD *)(v17 + 176) = v33;
  *(void *)(v17 + 192) = *(void *)(v15 + 192);
  uint64_t v34 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(v17 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(v17 + 112) = v34;
  uint64_t v35 = *(_OWORD *)(v15 + 144);
  *(_OWORD *)(v17 + 128) = *(_OWORD *)(v15 + 128);
  *(_OWORD *)(v17 + 144) = v35;
  uint64_t v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v17 + 48) = v36;
  uint64_t v37 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(v17 + 80) = v37;
  unint64_t v38 = *(_OWORD *)(v15 + 16);
  uint64_t v39 = a1;
  *(_OWORD *)char v17 = *(_OWORD *)v15;
  *(_OWORD *)(v17 + 16) = v38;
  if (v15 == a1) {
    goto LABEL_44;
  }
  __int128 v40 = v18;
  while (1)
  {
    uint64_t v41 = a1 + v40;
    uint64_t v42 = (_OWORD *)(a1 + v40 + 200);
    char v43 = *(void *)(a1 + v40 + 248);
    if ((void)v86 == v43)
    {
      uint64_t v44 = *(void *)(v41 + 256);
      uint64_t v45 = *((void *)&v86 + 1) < v44;
      if (*((void *)&v86 + 1) == v44)
      {
        char v46 = *(void *)(a1 + v40 + 264);
        uint64_t v45 = (uint64_t)v87 < v46;
        if ((void)v87 == v46) {
          uint64_t v45 = (__int128)__PAIR128__(v88, *((unint64_t *)&v87 + 1)) < *(_OWORD *)(a1 + v40 + 272);
        }
      }

      if (!v45)
      {
        if (v87 != *(_OWORD *)(a1 + v40 + 264)
          || *((void *)&v86 + 1) != v44
          || (void)v88 != *(void *)(a1 + v40 + 280))
        {
LABEL_43:
          uint64_t v39 = v15;
LABEL_44:
          *(_OWORD *)uint64_t v39 = v83;
          char v53 = v84;
          uint64_t v54 = v85;
          uint64_t v55 = v87;
          *(_OWORD *)(v39 + 48) = v86;
          *(_OWORD *)(v39 + 64) = v55;
          *(_OWORD *)(v39 + 16) = v53;
          *(_OWORD *)(v39 + 32) = v54;
          uint64_t v56 = v88;
          uint64_t v57 = v89;
          uint64_t v58 = v91;
          *(_OWORD *)(v39 + 112) = v90;
          *(_OWORD *)(v39 + 128) = v58;
          *(_OWORD *)(v39 + 80) = v56;
          *(_OWORD *)(v39 + 96) = v57;
          unint64_t v59 = v92;
          uint64_t v60 = v93;
          __int128 v61 = v94;
          *(void *)(v39 + 192) = v95;
          *(_OWORD *)(v39 + 160) = v60;
          *(_OWORD *)(v39 + 176) = v61;
          *(_OWORD *)(v39 + 144) = v59;
          if (++v19 == 8) {
            return v17 + 200 == a2;
          }
LABEL_45:
          int v15 = v17;
          v18 += 200LL;
          v17 += 200LL;
          if (v17 == a2) {
            return 1LL;
          }
          goto LABEL_16;
        }

        if (!sub_10085DFAC((uint64_t)&v83, a1 + v40 + 200, v16))
        {
          uint64_t v39 = a1 + v40 + 400;
          goto LABEL_44;
        }
      }
    }

    else if ((uint64_t)v86 >= v43)
    {
      goto LABEL_43;
    }

    v15 -= 200LL;
    unsigned int v47 = *(_OWORD *)(a1 + v40 + 376);
    *(_OWORD *)(v41 + 560) = *(_OWORD *)(a1 + v40 + 360);
    *(_OWORD *)(v41 + 576) = v47;
    *(void *)(v41 + 592) = *(void *)(a1 + v40 + 392);
    v48 = *(_OWORD *)(a1 + v40 + 312);
    *(_OWORD *)(v41 + 496) = *(_OWORD *)(a1 + v40 + 296);
    *(_OWORD *)(v41 + 512) = v48;
    v49 = *(_OWORD *)(a1 + v40 + 344);
    *(_OWORD *)(v41 + 528) = *(_OWORD *)(a1 + v40 + 328);
    *(_OWORD *)(v41 + 544) = v49;
    uint64_t v50 = *(_OWORD *)(a1 + v40 + 248);
    *(_OWORD *)(v41 + 432) = *(_OWORD *)(a1 + v40 + 232);
    *(_OWORD *)(v41 + 448) = v50;
    unsigned int v51 = *(_OWORD *)(a1 + v40 + 280);
    *(_OWORD *)(v41 + 464) = *(_OWORD *)(a1 + v40 + 264);
    *(_OWORD *)(v41 + 480) = v51;
    uint8_t v52 = *(_OWORD *)(a1 + v40 + 216);
    v40 -= 200LL;
    *(_OWORD *)(v41 + 400) = *v42;
    *(_OWORD *)(v41 + 416) = v52;
    if (v40 == -400)
    {
      uint64_t v39 = a1;
      goto LABEL_44;
    }
  }

  uint64_t v20 = *(void *)(v17 + 128);
  uint64_t v21 = *(void *)(v15 + 128);
  if (v20 == v21)
  {
    unsigned int v22 = *(void *)(v17 + 136);
    uint64_t v23 = *(void *)(v15 + 136);
    uint64_t v24 = v22 < v23;
    if (v22 == v23)
    {
      uint64_t v25 = *(void *)(v17 + 144);
      uint64_t v26 = *(void *)(v15 + 144);
      uint64_t v24 = v25 < v26;
      if (v25 == v26) {
        uint64_t v24 = *(_OWORD *)(v17 + 152) < *(_OWORD *)(v15 + 152);
      }
    }

    if (!v24
      && (*(void *)(v17 + 152) != *(void *)(v15 + 152)
       || *(void *)(v17 + 144) != *(void *)(v15 + 144)
       || v22 != v23
       || *(void *)(v17 + 160) != *(void *)(v15 + 160)
       || !sub_100862154(v17, v15, v16)))
    {
      goto LABEL_45;
    }
  }

  else if (v20 >= v21)
  {
    goto LABEL_45;
  }

  uint64_t v27 = *(_OWORD *)(v17 + 48);
  uint64_t v85 = *(_OWORD *)(v17 + 32);
  uint64_t v86 = v27;
  uint64_t v28 = *(_OWORD *)(v17 + 112);
  uint64_t v89 = *(_OWORD *)(v17 + 96);
  uint64_t v90 = v28;
  uint64_t v29 = *(_OWORD *)(v17 + 80);
  uint64_t v87 = *(_OWORD *)(v17 + 64);
  v88 = v29;
  double v95 = *(void *)(v17 + 192);
  uint64_t v30 = *(_OWORD *)(v17 + 176);
  v93 = *(_OWORD *)(v17 + 160);
  unint64_t v94 = v30;
  uint64_t v31 = *(_OWORD *)(v17 + 144);
  uint64_t v91 = *(_OWORD *)(v17 + 128);
  v92 = v31;
  uint64_t v32 = *(_OWORD *)(v17 + 16);
  v83 = *(_OWORD *)v17;
  uint64_t v84 = v32;
  uint64_t v33 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v17 + 160) = *(_OWORD *)(v15 + 160);
  *(_OWORD *)(v17 + 176) = v33;
  *(void *)(v17 + 192) = *(void *)(v15 + 192);
  uint64_t v34 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(v17 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(v17 + 112) = v34;
  uint64_t v35 = *(_OWORD *)(v15 + 144);
  *(_OWORD *)(v17 + 128) = *(_OWORD *)(v15 + 128);
  *(_OWORD *)(v17 + 144) = v35;
  uint64_t v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v17 + 48) = v36;
  uint64_t v37 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(v17 + 80) = v37;
  unint64_t v38 = *(_OWORD *)(v15 + 16);
  uint64_t v39 = a1;
  *(_OWORD *)char v17 = *(_OWORD *)v15;
  *(_OWORD *)(v17 + 16) = v38;
  if (v15 == a1) {
    goto LABEL_44;
  }
  __int128 v40 = v18;
  while (1)
  {
    uint64_t v41 = a1 + v40;
    uint64_t v42 = (_OWORD *)(a1 + v40 + 200);
    char v43 = *(void *)(a1 + v40 + 328);
    if ((void)v91 == v43)
    {
      uint64_t v44 = *(void *)(v41 + 336);
      uint64_t v45 = *((void *)&v91 + 1) < v44;
      if (*((void *)&v91 + 1) == v44)
      {
        char v46 = *(void *)(a1 + v40 + 344);
        uint64_t v45 = (uint64_t)v92 < v46;
        if ((void)v92 == v46) {
          uint64_t v45 = (__int128)__PAIR128__(v93, *((unint64_t *)&v92 + 1)) < *(_OWORD *)(a1 + v40 + 352);
        }
      }

      if (!v45)
      {
        if (v92 != *(_OWORD *)(a1 + v40 + 344)
          || *((void *)&v91 + 1) != v44
          || (void)v93 != *(void *)(a1 + v40 + 360))
        {
LABEL_43:
          uint64_t v39 = v15;
LABEL_44:
          *(_OWORD *)uint64_t v39 = v83;
          char v53 = v84;
          uint64_t v54 = v85;
          uint64_t v55 = v87;
          *(_OWORD *)(v39 + 48) = v86;
          *(_OWORD *)(v39 + 64) = v55;
          *(_OWORD *)(v39 + 16) = v53;
          *(_OWORD *)(v39 + 32) = v54;
          uint64_t v56 = v88;
          uint64_t v57 = v89;
          uint64_t v58 = v91;
          *(_OWORD *)(v39 + 112) = v90;
          *(_OWORD *)(v39 + 128) = v58;
          *(_OWORD *)(v39 + 80) = v56;
          *(_OWORD *)(v39 + 96) = v57;
          unint64_t v59 = v92;
          uint64_t v60 = v93;
          __int128 v61 = v94;
          *(void *)(v39 + 192) = v95;
          *(_OWORD *)(v39 + 160) = v60;
          *(_OWORD *)(v39 + 176) = v61;
          *(_OWORD *)(v39 + 144) = v59;
          if (++v19 == 8) {
            return v17 + 200 == a2;
          }
LABEL_45:
          int v15 = v17;
          v18 += 200LL;
          v17 += 200LL;
          if (v17 == a2) {
            return 1LL;
          }
          goto LABEL_16;
        }

        if (!sub_100862154((uint64_t)&v83, a1 + v40 + 200, v16))
        {
          uint64_t v39 = a1 + v40 + 400;
          goto LABEL_44;
        }
      }
    }

    else if ((uint64_t)v91 >= v43)
    {
      goto LABEL_43;
    }

    v15 -= 200LL;
    unsigned int v47 = *(_OWORD *)(a1 + v40 + 376);
    *(_OWORD *)(v41 + 560) = *(_OWORD *)(a1 + v40 + 360);
    *(_OWORD *)(v41 + 576) = v47;
    *(void *)(v41 + 592) = *(void *)(a1 + v40 + 392);
    v48 = *(_OWORD *)(a1 + v40 + 312);
    *(_OWORD *)(v41 + 496) = *(_OWORD *)(a1 + v40 + 296);
    *(_OWORD *)(v41 + 512) = v48;
    v49 = *(_OWORD *)(a1 + v40 + 344);
    *(_OWORD *)(v41 + 528) = *(_OWORD *)(a1 + v40 + 328);
    *(_OWORD *)(v41 + 544) = v49;
    uint64_t v50 = *(_OWORD *)(a1 + v40 + 248);
    *(_OWORD *)(v41 + 432) = *(_OWORD *)(a1 + v40 + 232);
    *(_OWORD *)(v41 + 448) = v50;
    unsigned int v51 = *(_OWORD *)(a1 + v40 + 280);
    *(_OWORD *)(v41 + 464) = *(_OWORD *)(a1 + v40 + 264);
    *(_OWORD *)(v41 + 480) = v51;
    uint8_t v52 = *(_OWORD *)(a1 + v40 + 216);
    v40 -= 200LL;
    *(_OWORD *)(v41 + 400) = *v42;
    *(_OWORD *)(v41 + 416) = v52;
    if (v40 == -400)
    {
      uint64_t v39 = a1;
      goto LABEL_44;
    }
  }
}

  uint64_t v21 = sub_10080E94C();
  *(_DWORD *)uint64_t buf = 0;
  *(void *)uint64_t buf = sub_10080EB58(v21, buf);
  return sub_10090BB8C(a1 + 456, (double *)buf);
}

  sub_1002F0B04(buf);
  uint64_t v7 = sub_1002A6F64(*(uint64_t *)buf, "WifiFenceCalculatorDebugVerbose", (BOOL *)&byte_1019A1880);
  int v8 = v7;
  uint64_t v9 = v22;
  if (!v22) {
    goto LABEL_20;
  }
  unsigned int v10 = (unint64_t *)&v22->__shared_owners_;
  do
    int v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8) {
      return;
    }
  }

  else
  {
LABEL_20:
    if (!v7) {
      return;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101861E70);
  }
  unint64_t v12 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = byte_1019A1880;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "FenceCal: Overriding WifiFenceCalculatorDebugVerbose =%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101861E70);
    }
    uint64_t v19 = 67109120;
    uint64_t v20 = byte_1019A1880;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "FenceCal: Overriding WifiFenceCalculatorDebugVerbose =%d",  &v19);
    uint64_t v18 = (uint8_t *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLWifiFenceCalculator::initStaticGlobals()", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  byte_101999868 = 1;
}

    dispatch_once(&qword_101934860, &stru_101867DE0);
    goto LABEL_5;
  }

  if (*a2 != 1)
  {
    sub_1012596F4();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLScheduleClientUpdateTimerPolicy.mm",  76,  "operator()");
    __break(1u);
    goto LABEL_16;
  }

  if (!*(_BYTE *)(a3 + 1961)) {
    *(_BYTE *)(a3 + 1961) = 1;
  }
}

      ;
    }

    int v6 = [a3 countByEnumeratingWithState:&v23 objects:v28 count:16];
  }

  while (v6);
  return v7;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 32),  a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }
  return result;
}

        if (v8 == 4) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      int v11 = (char *)*((void *)this + 1);
      unsigned int v10 = *((void *)this + 2);
      if ((unint64_t)v11 >= v10 || *v11 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v12 = (_BYTE *)*((void *)this + 1);
        unsigned int v10 = *((void *)this + 2);
      }

      else
      {
        unint64_t *v5 = *v11;
        unint64_t v12 = v11 + 1;
        *((void *)this + 1) = v12;
      }

      uint64_t v9 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v9;
    }

    while ((unint64_t)v12 >= v10 || *v12 != 18);
    *((void *)this + 1) = v12 + 1;
LABEL_24:
    *(_DWORD *)(a1 + 24) = v9 | 2;
    uint64_t v14 = *(char **)(a1 + 8);
    if (!v14)
    {
      uint64_t v14 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v14 = &off_101868A38;
      *(_OWORD *)(v14 + 8) = 0u;
      *(_OWORD *)(v14 + 24) = 0u;
      *((void *)v14 + 5) = 0LL;
      *(void *)(a1 + 8) = v14;
    }

    int v15 = (char *)*((void *)this + 1);
    if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
    {
    }

    else
    {
      uint64_t v23 = *v15;
      *((void *)this + 1) = v15 + 1;
    }

    uint64_t v16 = *((_DWORD *)this + 14);
    char v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17) {
      return 0LL;
    }
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    uint64_t v20 = *((_DWORD *)this + 14);
    uint64_t v21 = __OFSUB__(v20, 1);
    unsigned int v22 = v20 - 1;
    if (v22 < 0 == v21) {
      *((_DWORD *)this + 14) = v22;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  unsigned int v10 = *(void *)(v5 + 32);
  if (!v10) {
    unsigned int v10 = *(void *)(qword_1019A1B40 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0)
  {
LABEL_19:
    int v11 = *(void *)(v5 + 40);
    if (!v11) {
      int v11 = *(void *)(qword_1019A1B40 + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v11,  a2,  a4);
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v4,  *(float *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

    uint64_t v9 = *(_BYTE *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 32) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 33),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  PBDataWriterWriteInt32Field(a3, self->_nid, 4LL);
  if ((*(_BYTE *)&self->_has & 2) != 0) {
LABEL_5:
  }
    PBDataWriterWriteInt32Field(a3, self->_bsid, 5LL);
LABEL_6:
  location = self->_location;
  if (location) {
    PBDataWriterWriteSubmessage(a3, location, 6LL);
  }
  uint64_t v7 = self->_has;
  if ((*(_DWORD *)&v7 & 0x80000000) == 0)
  {
    if ((*(_BYTE *)&v7 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  PBDataWriterWriteInt32Field(a3, self->_zoneid, 7LL);
  *(_BYTE *)&uint64_t v7 = self->_has;
  if ((*(_BYTE *)&v7 & 1) != 0)
  {
LABEL_10:
    PBDataWriterWriteInt32Field(a3, self->_bandclass, 8LL);
    *(_BYTE *)&uint64_t v7 = self->_has;
  }

  PBDataWriterWriteInt32Field(a3, self->_technology, 21LL);
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  sub_100080028((wireless_diagnostics::google::protobuf::MessageLite *)v13);
}

    int v11 = a2[12];
    *(_DWORD *)(a1 + 20) |= 0x10u;
    *(_BYTE *)(a1 + 12) = v11;
    if ((*((_DWORD *)a2 + 5) & 0x20) == 0) {
      return;
    }
LABEL_10:
    int v6 = a2[13];
    *(_DWORD *)(a1 + 20) |= 0x20u;
    *(_BYTE *)(a1 + 13) = v6;
  }

  *(_DWORD *)(a1 + 56) |= 8u;
  uint64_t v9 = *(void **)(a1 + 16);
  if (!v9)
  {
    uint64_t v9 = operator new(0x40uLL);
    *uint64_t v9 = off_1018763B0;
    v9[1] = 0LL;
    v9[2] = 0LL;
    void v9[3] = 0LL;
    *((_BYTE *)v9 + 32) = 0;
    *(void *)((char *)v9 + 36) = 0LL;
    *(void *)((char *)v9 + 52) = 0LL;
    *(void *)((char *)v9 + 44) = 0LL;
    *(void *)(a1 + 16) = v9;
  }

  unsigned int v10 = *(void *)(a2 + 16);
  if (!v10) {
    unsigned int v10 = *(void *)(qword_1019A1E40 + 16);
  }
  sub_100BC6FD4((uint64_t)v9, v10);
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) != 0) {
    goto LABEL_21;
  }
LABEL_9:
  if ((v5 & 0x20) == 0) {
    goto LABEL_10;
  }
LABEL_26:
  *(_DWORD *)(a1 + 56) |= 0x20u;
  uint64_t v13 = *(char **)(a1 + 32);
  if (!v13)
  {
    uint64_t v13 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v13 = &off_1018762C0;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(void *)(a1 + 32) = v13;
  }

  uint64_t v14 = *(void *)(a2 + 32);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_1019A1E40 + 32);
  }
  sub_100BC649C((uint64_t)v13, v14);
  if ((*(_DWORD *)(a2 + 56) & 0x40) != 0)
  {
LABEL_31:
    *(_DWORD *)(a1 + 56) |= 0x40u;
    int v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      int v15 = operator new(0x18uLL);
      v15[1] = 0LL;
      v15[2] = 0LL;
      const std::string *v15 = off_101876338;
      *(void *)(a1 + 40) = v15;
    }

    uint64_t v16 = *(void *)(a2 + 40);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_1019A1E40 + 40);
    }
    sub_100BC6BAC(v15, v16);
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    if (v9 == 4) {
      return 1LL;
    }
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

    sub_100BFC724();
  }

  return v3;
}

  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (char v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if ((char)v26.__r_.__value_.__s.__size_ < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          sub_100BFE60C( v6,  v16->__r_.__value_.__s.__data_[0],  v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }

        uint64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }

    else if (v26.__r_.__value_.__s.__size_)
    {
      uint64_t v16 = &v26;
      if (v26.__r_.__value_.__s.__size_ != 1) {
        goto LABEL_40;
      }
LABEL_25:
      sub_100BFCB4C(v6, v16->__r_.__value_.__s.__data_[0]);
    }

  uint64_t v14 = 0;
LABEL_17:
  if (![a4 bundleId])
  {
    uint64_t v20 = 0;
    uint64_t v13 = 0LL;
    goto LABEL_35;
  }

  uint64_t v13 = objc_msgSend( [LSApplicationRecord alloc],  "initWithBundleIdentifier:allowPlaceholder:error:",  objc_msgSend(a4, "bundleId"),  0,  &v43);
  if (!v13)
  {
    uint64_t v20 = 0;
    goto LABEL_35;
  }

  uint64_t v16 = sub_100C67FE8(v116);
  if ((_DWORD)v16)
  {
    v110 = *(float **)&v10;
    v111 = *(_OWORD *)((char *)v114 + 4);
    v112 = *(void *)((char *)&v114[1] + 4);
    v113 = *(_DWORD *)(a1 + 32);
    sub_100C696C8(a1 + 360, (__int128 *)&v110);
    if (*(void *)(a1 + 400) >= 0x3CuLL)
    {
      v108 = 0.0;
      v109 = 0;
      v105 = 0u;
      __int128 v106 = 0u;
      memset(v107, 0, 28);
      sub_100C684C8(a1, (uint64_t *)&v105, (void *)(a1 + 360));
      *(double *)&v105 = v10;
      sub_100C69770(a1 + 408, &v105);
      char v17 = *(void ***)(a1 + 368);
      uint64_t v18 = *(void *)(a1 + 376);
      *(void *)(a1 + 400) = 0LL;
      uint64_t v19 = v18 - (void)v17;
      if (v19 >= 0x11)
      {
        do
        {
          operator delete(*v17);
          uint64_t v20 = *(void *)(a1 + 376);
          char v17 = (void **)(*(void *)(a1 + 368) + 8LL);
          *(void *)(a1 + 368) = v17;
          uint64_t v19 = v20 - (void)v17;
        }

        while (v19 > 0x10);
      }

      if (v19 >> 3 == 1)
      {
        uint64_t v21 = 51LL;
      }

      else
      {
        if (v19 >> 3 != 2) {
          goto LABEL_29;
        }
        uint64_t v21 = 102LL;
      }

      *(void *)(a1 + 392) = v21;
    }
  }

  sub_1002F0B04(buf);
  uint64_t v7 = sub_1002A82BC(*(uint64_t *)&buf[0], "WifiFenceCalculatorMinFenceRadius", &v44);
  int v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_20;
  }
  unsigned int v10 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    int v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8) {
      goto LABEL_26;
    }
  }

  else
  {
LABEL_20:
    if (!v7) {
      goto LABEL_26;
    }
  }

  qword_101990428 = v44;
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10187F748);
  }
  unint64_t v12 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "FenceCal: Overriding WifiFenceCalculatorMinFenceRadius = %5.1lf",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10187F748);
    }
    uint64_t v45 = 134217984;
    char v46 = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "FenceCal: Overriding WifiFenceCalculatorMinFenceRadius = %5.1lf",  COERCE_DOUBLE(&v45));
    uint64_t v36 = (char *)v35;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceSettings::initSettingOverrides()", "%s\n", v35);
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_deltaDistanceAccuracy),  @"deltaDistanceAccuracy");
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  PBDataWriterWriteDoubleField(a3, 4LL, self->_timestampGps);
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  *((void *)a3 + 8) = *(void *)&self->_timestampGps;
  *((_WORD *)a3 + 44) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  *((void *)result + 2) = *(void *)&self->_deltaDistanceAccuracy;
  *((_WORD *)result + 44) |= 2u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  self->_timestampGps = *((double *)a3 + 8);
  *(_WORD *)&self->_has |= 0x80u;
  uint64_t v3 = *((_WORD *)a3 + 44);
  if ((v3 & 0x40) == 0)
  {
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
}

  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 32),  a3);
  if ((*(_DWORD *)(v5 + 52) & 0x20) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 40),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 17),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

    uint64_t v5 = 0;
    uint64_t v3 = "EED2";
    uint64_t v2 = 1LL;
    if ((v6 & 1) == 0) {
      goto LABEL_32;
    }
  }

  if (!sub_1009830C8(a1 + 44))
  {
LABEL_32:
    sub_100F9AFB0(a1);
    return;
  }

  if (sub_1009830C8(a1 + 44)) {
    sub_100F9B64C(a1);
  }
}

    if (v8 == 4) {
      return 1LL;
    }
  }

    uint64_t result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0) {
      return result;
    }
LABEL_8:
    uint64_t result = *(float *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 24) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  if ((*(_DWORD *)(v5 + 64) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(float *)(*(void *)(v5 + 24) + 4 * v7++),  a3);
    while (v7 < *(int *)(v5 + 32));
  }

  if (*(int *)(v5 + 48) >= 1)
  {
    int v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(float *)(*(void *)(v5 + 40) + 4 * v8++),  a3);
    while (v8 < *(int *)(v5 + 48));
  }

  if ((*(_BYTE *)(v5 + 64) & 0x40) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(float *)(v5 + 56),  a3);
  }
  return result;
}

  PB::TextFormatter::format(this, "impactTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v9;
  uint64_t v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_18:
    int v11 = *(_BYTE *)(a2 + 44);
    *(_BYTE *)(result + 48) = v3 | 0x80;
    *(_BYTE *)(result + 44) = v11;
    return result;
  }

  PB::TextFormatter::format(this, "resolution", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) != 0) {
    goto LABEL_17;
  }
LABEL_8:
  if ((v5 & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 7u);
  if ((*(_BYTE *)(v3 + 48) & 0x80) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 8u);
  }
  return result;
}

  PB::TextFormatter::format(this, "hasValidGroundContactTime", *(_BYTE *)(a1 + 73));
  uint64_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "declination", *(float *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  int v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 24) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "triggerEnabled", *(_BYTE *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 28) = result;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_18:
    uint64_t result = *(float *)(a2 + 36);
    *(_BYTE *)(a1 + 44) = v3 | 0x40;
    *(float *)(a1 + 36) = result;
    return result;
  }

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 36));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if (v5 < 0) {
    goto LABEL_17;
  }
LABEL_8:
  if ((v5 & 1) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 36), 8u);
  }
  return result;
}

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  int v6 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 80) = v3;
  *(void *)(a1 + 8) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  int v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 40) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "hasSteps", *(_BYTE *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0x6Au);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x67u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "validX", *(_BYTE *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "jerkNorm", *(double *)(a1 + 88));
  uint64_t v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 4) != 0) {
    goto LABEL_17;
  }
LABEL_11:
  if ((v14 & 8) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "torsion", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

  PB::TextFormatter::format(this, "peak", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v9;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_18:
    int v11 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_DWORD *)(result + 32) = v11;
    return result;
  }

  PB::TextFormatter::format(this, "tragusTemp", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if (v5 < 0) {
    goto LABEL_17;
  }
LABEL_8:
  if ((v5 & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "wdtPeriod", *(_DWORD *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 8u);
  }
  return result;
}

  PB::TextFormatter::format(this, "impulseEndTime", *(double *)(a1 + 16));
  int v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 5u);
  if ((*(_BYTE *)(v3 + 60) & 0x20) != 0) {
LABEL_7:
  }
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 6u);
LABEL_8:
  uint64_t v5 = *(const PB::Base **)(v3 + 40);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 7u);
  }
  int v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    return PB::Writer::writeSubmessage(this, v6, 8u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  if (a1 != a2) {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }
  int v11 = *(_WORD *)(a2 + 116);
  if ((v11 & 4) != 0)
  {
    unint64_t v12 = *(_DWORD *)(a2 + 80);
    *(_WORD *)(a1 + 116) |= 4u;
    *(_DWORD *)(a1 + 80) = v12;
    int v11 = *(_WORD *)(a2 + 116);
  }

  if ((v11 & 0x400) != 0)
  {
    uint64_t v13 = *(_BYTE *)(a2 + 112);
    *(_WORD *)(a1 + 116) |= 0x400u;
    *(_BYTE *)(a1 + 112) = v13;
  }

  return a1;
}

  PB::TextFormatter::format(this, "blackout", *(_BYTE *)(a1 + 45));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  int v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 20) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "entropyConcha", *(float *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if ((char)v26.__r_.__value_.__s.__size_ < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          char v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          sub_100BFE60C( v6,  v17->__r_.__value_.__s.__data_[0],  v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }

        char v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }

    else if (v26.__r_.__value_.__s.__size_)
    {
      char v17 = &v26;
      if (v26.__r_.__value_.__s.__size_ != 1) {
        goto LABEL_36;
      }
LABEL_28:
      sub_100BFCB4C(v6, v17->__r_.__value_.__s.__data_[0]);
    }

  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 32), 8u);
  }
  return result;
}

  PB::TextFormatter::format(this, "isSampleRecent", *(_BYTE *)(a1 + 54));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "height", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 32) = v9;
  uint64_t v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_18:
    int v11 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 52) = v3 | 0x20;
    *(_DWORD *)(result + 40) = v11;
    return result;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 7u);
  if ((*(_BYTE *)(v3 + 52) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 8u);
  }
  return result;
}

  PB::TextFormatter::format(this, "energyIsCalibrated", *(_BYTE *)(a1 + 68));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "concavityDeltaDeg", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "maxAccel", *(float *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  int v8 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 32) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "hrMin", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "sourceZ", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t v9 = *(_BYTE *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 36) = v9;
  uint64_t v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_18:
    int v11 = *(void *)(a2 + 16);
    *(_BYTE *)(result + 40) = v3 | 2;
    *(void *)(result + 16) = v11;
    return result;
  }

  PB::TextFormatter::format(this, "onWristConfidence", *(_DWORD *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0) {
    goto LABEL_17;
  }
LABEL_8:
  if ((v5 & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 38), 7u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 8u);
  }
  return result;
}

  PB::TextFormatter::format(this, "genericWorkoutLabel", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  int v8 = *(_BYTE *)(a2 + 14);
  v3 |= 0x40u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 14) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "isPedestrianRoutingActive", *(_BYTE *)(a1 + 12));
  uint64_t v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 12), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  int v8 = *(_BYTE *)(a2 + 35);
  v3 |= 0x100u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 35) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "workoutPause", *(_BYTE *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 32), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "fGpsAvailability", *(_BYTE *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 40));
  uint64_t v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(this, "smoothedGPSAltitude", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 80) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  uint64_t v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "error", *(_BYTE *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 64), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  uint64_t v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_18:
    uint64_t result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 48) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  if ((*(_BYTE *)(v3 + 48) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 8u);
  }
  return result;
}

  uint64_t v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 64) = v3;
  *(void *)(result + 8) = v9;
  uint64_t v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_18:
    int v11 = *(_DWORD *)(a2 + 60);
    *(_BYTE *)(result + 64) = v3 | 0x80;
    *(_DWORD *)(result + 60) = v11;
    return result;
  }

  PB::TextFormatter::format(this, "numRingSensorSamples", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x10) != 0) {
    goto LABEL_17;
  }
LABEL_8:
  if ((v5 & 0x20) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 7u);
  if ((*(_BYTE *)(v3 + 64) & 0x80) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 8u);
  }
  return result;
}

  int v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 76) = v3;
  *(void *)(result + 8) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "rollAngle", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "flags", *(double *)(a1 + 16));
  uint64_t v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 7u);
  if ((*(_BYTE *)(v3 + 44) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  }
  return result;
}

  int v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 8) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "isConverged", *(_BYTE *)(a1 + 58));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "intensityBaselineDelta", *(float *)(a1 + 28));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  PB::TextFormatter::format(this, "instRotationMax", *(float *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 64) |= 4u;
    *(double *)(a1 + 24) = result;
    int v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }

uint64_t sub_100064BBC(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_55;
  }

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
    }

    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      unsigned int v4 = 2;
    }
  }

  else
  {
    unsigned int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    char v9 = v8;
    uint64_t v10 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      uint64_t v10 = *(void *)(v7 + 8);
      int v3 = *(_DWORD *)(a1 + 64);
      char v9 = *(_BYTE *)(v7 + 23);
    }

    else
    {
      int v12 = 1;
    }

    if (v9 < 0) {
      int v8 = v10;
    }
    uint64_t v5 = (v5 + v12 + v8 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v13 & 0x80000000) != 0)
  {
    int v14 = 11;
  }

  else if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    int v14 = 2;
  }

  uint64_t v5 = (v14 + v5);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }

LABEL_36:
  uint64_t v5 = v5
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32),  a2)
     + 1;
  int v3 = *(_DWORD *)(a1 + 64);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_55;
    }
    goto LABEL_46;
  }

      if (v8 == 4) {
        return 1LL;
      }
    }

    if (TagFallback >> 3 != 2)
    {
      int v8 = TagFallback & 7;
      goto LABEL_36;
    }

    int v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_36;
    }
LABEL_10:
    *(_DWORD *)(a1 + 44) |= 2u;
    char v9 = *(void **)(a1 + 32);
    if (v9 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      char v9 = operator new(0x18uLL);
      v9[1] = 0LL;
      v9[2] = 0LL;
      *char v9 = 0LL;
      *(void *)(a1 + 32) = v9;
    }

    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v9);
    if (!(_DWORD)result) {
      return result;
    }
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 48),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 192) & 0x10) != 0) {
LABEL_8:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
LABEL_9:
  if (*(int *)(v5 + 64) >= 1)
  {
    int v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(void *)(*(void *)(v5 + 56) + 8 * v8++),  a2,  a4);
    while (v8 < *(int *)(v5 + 64));
  }

  if (*(int *)(v5 + 88) >= 1)
  {
    char v9 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(void *)(*(void *)(v5 + 80) + 8 * v9++),  a2,  a4);
    while (v9 < *(int *)(v5 + 88));
  }

  uint64_t v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x80) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 104),  (BOOL)a2,  a4);
    uint64_t v10 = *(_DWORD *)(v5 + 192);
    if ((v10 & 0x100) == 0)
    {
LABEL_17:
      if ((v10 & 0x200) == 0) {
        goto LABEL_18;
      }
      goto LABEL_42;
    }
  }

  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_17;
  }

  uint64_t v13 = *(void *)(v5 + 112);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_1019A0880 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v13,  a2,  a4);
  uint64_t v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x200) == 0)
  {
LABEL_18:
    if ((v10 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  char v17 = (os_log_s *)qword_1019348D8;
  uint64_t v18 = 1LL;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    if (!buf[24]) {
      sub_100036CD8();
    }
    unint64_t v19 = buf;
    if (buf[23] < 0) {
      unint64_t v19 = *(_BYTE **)buf;
    }
    *(void *)std::string __p = 68289283LL;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = "";
    *(_WORD *)&__p[18] = 2081;
    *(void *)&__p[20] = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:State Machine: No state change requested, State:%{private, location:escape_only}s}",  __p,  0x1Cu);
  }

  uint64_t result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 160) |= 4u;
  *(double *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(v5 + 160),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 168) & 0x4000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 152),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  (int)a2,  *(double *)(v5 + 88),  a3);
  int v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A0AF0 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v15,  a2,  a4);
  if ((*(_DWORD *)(v5 + 92) & 0x200) != 0)
  {
LABEL_39:
    int v16 = *(void *)(v5 + 80);
    if (!v16) {
      int v16 = *(void *)(qword_1019A0AF0 + 80);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v16,  a2,  a4);
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 364) |= 4u;
  *(void *)(a1 + 24) = v19;
  uint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 8) == 0)
  {
LABEL_16:
    if ((v13 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  uint64_t v18 = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 96) |= 0x400u;
  *(_BYTE *)(a1 + 88) = v18;
  uint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }

  int v16 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(_DWORD *)(a1 + 40) = v16;
  int v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_39:
  uint64_t v18 = *(_BYTE *)(a2 + 45);
  *(_DWORD *)(a1 + 56) |= 0x40u;
  *(_BYTE *)(a1 + 45) = v18;
  int v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t v7 = *(_BYTE *)(a2 + 46);
    *(_DWORD *)(a1 + 56) |= 0x80u;
    *(_BYTE *)(a1 + 46) = v7;
    int v6 = *(_DWORD *)(a2 + 56);
  }

  if ((v3 & 0x10) != 0) {
    uint64_t v15 = v4 + 2;
  }
  else {
    uint64_t v15 = v4;
  }
  if ((v3 & 0x20) != 0)
  {
    int v16 = *(void *)(a1 + 24);
    if (!v16) {
      int v16 = *(void *)(qword_1019A0D70 + 24);
    }
    char v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FBEA8(v16, a2);
    uint64_t v18 = (int)v17;
    else {
      unint64_t v19 = 1;
    }
    v15 += v18 + v19 + 1;
    int v3 = *(_DWORD *)(a1 + 56);
  }

  if ((v3 & 0x40) != 0)
  {
    int v20 = *(void *)(a1 + 32);
    if (!v20) {
      int v20 = *(void *)(qword_1019A0D70 + 32);
    }
    uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FC664(v20, a2);
    char v23 = (int)v21;
    else {
      uint64_t v24 = 1;
    }
    v15 += v23 + v24 + 1;
    int v3 = *(_DWORD *)(a1 + 56);
  }

  uint64_t v5 = v15 + 2;
  if ((v3 & 0x80) == 0) {
    uint64_t v5 = v15;
  }
LABEL_55:
  unint64_t v25 = v5 + 2;
  if ((v3 & 0x100) == 0) {
    unint64_t v25 = v5;
  }
  if ((v3 & 0x200) != 0) {
    v25 += 2;
  }
  if ((v3 & 0x400) != 0) {
    v25 += 2;
  }
  if ((v3 & 0xFF00) != 0) {
    uint64_t result = v25;
  }
  else {
    uint64_t result = v5;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

    if (v11 == 4) {
      return 1LL;
    }
  }

  uint64_t v15 = v4 + 2;
  if ((v3 & 0x10) == 0) {
    uint64_t v15 = v4;
  }
  if ((v3 & 0x20) != 0) {
    v15 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v15 + 2;
  }
  else {
    uint64_t result = v15;
  }
LABEL_43:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  *(unsigned __int8 *)(v5 + 74),  a2,  a4);
  if ((*(_DWORD *)(v5 + 84) & 0x20000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(_DWORD *)(v5 + 76),  a2,  a4);
  }
  return result;
}

  char v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v17 >= 0x80)
  {
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }

  else
  {
    uint64_t v18 = 2;
  }

  unsigned int v4 = (v18 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_40:
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    else {
      int v20 = 2;
    }
    unsigned int v4 = (v20 + v4);
  }

  if (*(_BYTE *)(a1 + 696))
  {
    *(_DWORD *)uint64_t buf = 1;
    sub_10004A8FC((uint64_t **)a2, (int *)buf, buf);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101838C20);
    }
    int v16 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "GPSController indicates hardware active while client is not active",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      *(_WORD *)int v26 = 0;
      LODWORD(v25) = 2;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "GPSController indicates hardware active while client is not active",  v26,  v25);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v24);
    }
  }

  uint64_t v15 = 0;
LABEL_43:
  *(_DWORD *)uint64_t buf = 13;
  sub_10004A8FC((uint64_t **)a2, (int *)buf, buf);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101838C20);
  }
  char v17 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a2 + 16);
    unint64_t v19 = *(unsigned __int8 *)(a1 + 696);
    *(_DWORD *)uint64_t buf = 134349568;
    uint64_t v32 = v18;
    uint64_t v33 = 1026;
    uint64_t v34 = v15;
    uint64_t v35 = 1026;
    uint64_t v36 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#techstatus,enquired,sz,%{public}zu,gpsClientActive,%{public}d,gpsHwActive,%{public}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101838C20);
    }
    uint64_t v21 = *(void *)(a2 + 16);
    int v22 = *(unsigned __int8 *)(a1 + 696);
    *(_DWORD *)int v26 = 134349568;
    *(void *)&v26[4] = v21;
    uint64_t v27 = 1026;
    uint64_t v28 = v15;
    uint64_t v29 = 1026;
    uint64_t v30 = v22;
    LODWORD(v25) = 24;
    char v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#techstatus,enquired,sz,%{public}zu,gpsClientActive,%{public}d,gpsHwActive,%{public}d",  v26,  v25);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v23);
  }

  return 1LL;
}

  PBDataWriterWriteFloatField(a3, 14LL, self->_firstCatherine);
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_15:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  *((_DWORD *)a3 + 5) = LODWORD(self->_firstCatherine);
  *((_DWORD *)a3 + 26) |= 2u;
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_15:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  *((_DWORD *)result + 10) = LODWORD(self->_meanGoodCatherine);
  *((_DWORD *)result + 26) |= 0x40u;
  has = self->_has;
  if ((*(_BYTE *)&has & 2) == 0)
  {
LABEL_14:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }

  self->_firstCatherine = *((float *)a3 + 5);
  *(_DWORD *)&self->_has |= 2u;
  int v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 4) == 0)
  {
LABEL_15:
    if ((v3 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

          sub_1005FDE30((uint64_t)a1, v24, v27);
          goto LABEL_42;
        }

        uint64_t v29 = *((float *)&v66 + 1);
        if (vabdd_f64(*((float *)&v66 + 1), v25) > 2.0)
        {
          sub_1005FE28C((uint64_t)a1, v24, v29 - v25);
          *((double *)a1 + 78) = *((double *)a1 + 78) - (v29 - *((double *)a1 + 73));
          *((double *)a1 + 73) = v29;
          *((_DWORD *)a1 + 142) = 3;
        }
      }

  if ((v5 & 0xFF0000) == 0) {
    return;
  }
  if ((v5 & 0x10000) != 0)
  {
    char v23 = *(_BYTE *)(a2 + 105);
    *(_DWORD *)(a1 + 124) |= 0x10000u;
    *(_BYTE *)(a1 + 105) = v23;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x20000) == 0)
    {
LABEL_39:
      if ((v5 & 0x40000) == 0) {
        return;
      }
      goto LABEL_40;
    }
  }

  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_39;
  }

  uint64_t v24 = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 124) |= 0x20000u;
  *(void *)(a1 + 112) = v24;
  if ((*(_DWORD *)(a2 + 124) & 0x40000) != 0)
  {
LABEL_40:
    char v17 = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(a1 + 124) |= 0x40000u;
    *(_DWORD *)(a1 + 108) = v17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(unsigned __int8 *)(v5 + 104),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  *(_DWORD *)(a1 + 104) |= 0x4000u;
  char v17 = *(char **)(a1 + 80);
  if (!v17)
  {
    char v17 = (char *)operator new(0x40uLL);
    *(void *)char v17 = off_101846B38;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *((void *)v17 + 7) = 0LL;
    *(void *)(a1 + 80) = v17;
  }

  uint64_t v18 = *(void *)(a2 + 80);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_1019A1250 + 80);
  }
  sub_10061EA10((uint64_t)v17, v18);
  if ((*(_DWORD *)(a2 + 104) & 0x8000) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 104) |= 0x8000u;
    unint64_t v19 = *(void **)(a1 + 88);
    if (!v19)
    {
      unint64_t v19 = operator new(0x20uLL);
      *unint64_t v19 = off_101846BB0;
      v19[1] = 0LL;
      v19[2] = 0LL;
      v19[3] = 0LL;
      *(void *)(a1 + 88) = v19;
    }

    int v20 = *(void *)(a2 + 88);
    if (!v20) {
      int v20 = *(void *)(qword_1019A1250 + 88);
    }
    sub_10061EB78((uint64_t)v19, v20);
  }

        char v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
        if (v17 >= 0x80)
        {
          uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
          int v3 = *(_DWORD *)(a1 + 76);
        }

        else
        {
          uint64_t v18 = 2;
        }

        v4 += v18;
        if ((v3 & 0x80) == 0)
        {
LABEL_20:
          if ((v3 & 0x100) == 0) {
            goto LABEL_50;
          }
          goto LABEL_44;
        }

  char v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v17 & 0x80000000) != 0)
  {
    uint64_t v18 = 11;
  }

  else if (v17 >= 0x80)
  {
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 68);
  }

  else
  {
    uint64_t v18 = 2;
  }

  v4 += v18;
  if ((v3 & 0x80) != 0)
  {
LABEL_42:
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
    else {
      int v20 = 2;
    }
    v4 += v20;
  }

  if ((v3 & 0x10) != 0) {
    uint64_t v5 = v4 + 9;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 0x20) != 0)
  {
    int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v20 & 0x80000000) != 0)
    {
      uint64_t v21 = 11;
    }

    else if (v20 >= 0x80)
    {
      uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 72);
    }

    else
    {
      uint64_t v21 = 2;
    }

    uint64_t v5 = (v21 + v5);
    if ((v3 & 0x40) == 0)
    {
LABEL_41:
      if ((v3 & 0x80) == 0) {
        goto LABEL_61;
      }
      goto LABEL_55;
    }
  }

  else if ((v3 & 0x40) == 0)
  {
    goto LABEL_41;
  }

  int v22 = *(void *)(a1 + 48);
  if (!v22) {
    int v22 = *(void *)(qword_1019A17D0 + 48);
  }
  char v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100815254(v22);
  uint64_t v24 = (int)v23;
  else {
    unint64_t v25 = 1;
  }
  uint64_t v5 = (v5 + v24 + v25 + 1);
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
  {
LABEL_55:
    int v26 = *(void *)(a1 + 56);
    if (!v26) {
      int v26 = *(void *)(qword_1019A17D0 + 56);
    }
    uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100816E60(v26, a2);
    uint64_t v29 = (int)v27;
    else {
      uint64_t v30 = 1;
    }
    uint64_t v5 = (v5 + v29 + v30 + 1);
  }

  if ((v19 & 0xFF00) != 0)
  {
    if ((v19 & 0x100) != 0)
    {
      uint64_t v21 = *(const std::string **)(a2 + 112);
      *(_DWORD *)(a1 + 276) |= 0x100u;
      int v22 = *(std::string **)(a1 + 112);
      if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v22 = (std::string *)operator new(0x18uLL);
        v22->__r_.__value_.__l.__size_ = 0LL;
        v22->__r_.__value_.__l.__cap_ = 0LL;
        v22->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 112) = v22;
      }

      std::string::operator=(v22, v21);
      unint64_t v19 = *(_DWORD *)(a2 + 276);
    }

    if ((v19 & 0x1000) != 0)
    {
      char v23 = *(void *)(a2 + 168);
      *(_DWORD *)(a1 + 276) |= 0x1000u;
      *(void *)(a1 + 168) = v23;
    }
  }

  if ((v3 & 0x10) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 0x20) != 0)
  {
    uint64_t v21 = *(void *)(a1 + 40);
    if (!v21) {
      uint64_t v21 = *(void *)(qword_1019A1818 + 40);
    }
    int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10081B3E0(v21, a2);
    uint64_t v24 = (int)v22;
    else {
      unint64_t v25 = 1;
    }
    uint64_t v5 = (v5 + v24 + v25 + 1);
  }

    sub_100008BDC();
  }

  return v16;
}

                  uint64_t v27 = 1;
                }

                if (v17 & 1 | !v27)
                {
                  unint64_t v19 = *(void *)(v16 + 8);
                  if (!v27) {
                    goto LABEL_38;
                  }
                  goto LABEL_21;
                }

                char v17 = 1;
                sub_10095B744((id *)a1, a4, (const void **)&buf.__r_.__value_.__l.__data_, 1);
              }

              unint64_t v19 = *(void *)(v16 + 8);
LABEL_21:
              int v20 = *(void **)v16;
              v20[1] = v19;
              **(void **)(v16 + 8) = v20;
              --*(void *)(a1 + 40);
              sub_10095CC1C(a1 + 24, (void **)v16);
LABEL_38:
              int v16 = v19;
            }

            while (v19 != a1 + 24);
          }
        }
      }
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101862238);
      }
      uint64_t v30 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = *a4;
        buf.__r_.__value_.__r.__words[0] = 68289282LL;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:ALM: unable to get process handle, pid:%{public}d}",  (uint8_t *)&buf,  0x18u);
      }
    }
  }

      ;
    }

    return 1LL;
  }

  return result;
}

  sub_100607A34(a3, v5);
  a3[112] = 1;
  __p[0] = &v22;
  sub_10068CDBC((void ***)__p);
LABEL_37:
  if (v25) {
    sub_1009F0C24((uint64_t)v26);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
}

          if (qword_1019349A0 != -1) {
            dispatch_once(&qword_1019349A0, &stru_1018687E8);
          }
          uint64_t v31 = (os_log_s *)qword_1019349A8;
          if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v32 = -[NSString UTF8String](self->_metricId, "UTF8String");
            uint64_t buf = 68290051LL;
            __int128 v61 = 2082;
            char v62 = "";
            uint64_t v63 = 2081;
            uint64_t v64 = v32;
            uint64_t v65 = 2114;
            *(void *)unint64_t v66 = v13;
            *(_WORD *)&v66[8] = 1026;
            *(_DWORD *)&v66[10] = v24;
            uint64_t v67 = 1026;
            *(_DWORD *)uint64_t v68 = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#cabin intdist edgeiter, id:%{private, location:escape_only}s, deltas:%{p ublic, location:escape_only}@, edge:%{public}d, n:%{public}d}",  (uint8_t *)&buf,  0x32u);
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_intervalMetrics,  "setObject:forKeyedSubscript:",  -[NSMutableArray objectAtIndexedSubscript:]( self->_intervalDistributionStrings,  "objectAtIndexedSubscript:",  v22),  @"interval");
          -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_intervalMetrics,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v30),  @"total");
          -[CLMetricEventBins submitIntervalMetricsForEvent:](self, "submitIntervalMetricsForEvent:", v43);
          -[NSMutableArray removeObjectsInRange:](v13, "removeObjectsInRange:", 0LL, (int)v30);
          ++v22;
          char v23 = (char *)v23 + 1;
        }

        while (v23 != v44);
        uint64_t v44 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v49,  v58,  16LL);
      }

      while (v44);
      uint64_t v33 = (int)v22;
      int v12 = v40;
      uint64_t v21 = &OBJC_INSTANCE_METHODS_TRANSITPbTransitMacTile;
    }

    else
    {
      uint64_t v33 = 0LL;
    }

    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_1018687E8);
    }
    uint64_t v34 = (os_log_s *)qword_1019349A8;
    if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = -[NSString UTF8String](self->_metricId, "UTF8String");
      uint64_t v36 = -[NSMutableArray count](v13, "count");
      uint64_t buf = 68289795LL;
      __int128 v61 = 2082;
      char v62 = "";
      uint64_t v63 = 2081;
      uint64_t v64 = v35;
      uint64_t v65 = 2114;
      *(void *)unint64_t v66 = v13;
      *(_WORD *)&v66[8] = 1026;
      *(_DWORD *)&v66[10] = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#cabin intdist edgeend, id:%{private, location:escape_only}s, deltas:%{public, location:escape_only}@, n:%{public}d}",  (uint8_t *)&buf,  0x2Cu);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_intervalMetrics,  "setObject:forKeyedSubscript:",  -[NSMutableArray objectAtIndexedSubscript:](self->_intervalDistributionStrings, "objectAtIndexedSubscript:", v33),  @"interval");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_intervalMetrics,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableArray count](v13, "count")),  @"total");
    -[CLMetricEventBins submitIntervalMetricsForEvent:](self, "submitIntervalMetricsForEvent:", v43);
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_1018687E8);
    }
    uint64_t v37 = (os_log_s *)qword_1019349A8;
    if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v38 = -[NSString UTF8String](self->_metricId, "UTF8String");
      uint64_t v39 = self->_priorDistributionBin;
      uint64_t buf = *(void *)&v21[138];
      __int128 v61 = 2082;
      char v62 = "";
      uint64_t v63 = 2081;
      uint64_t v64 = v38;
      uint64_t v65 = 2114;
      *(void *)unint64_t v66 = v13;
      *(_WORD *)&v66[8] = 1026;
      *(_DWORD *)&v66[10] = v39;
      uint64_t v67 = 2114;
      *(void *)uint64_t v68 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#cabin intdist edgeend, id:%{private, location:escape_only}s, deltas:%{public, location:escape_only}@, priorBin:%{public}d, ca:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x36u);
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 52),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x50uLL);
      *char v17 = off_1018712D0;
      v17[1] = 0LL;
      *((_BYTE *)v17 + 16) = 0;
      v17[7] = 0LL;
      v17[8] = 0LL;
      *(void *)((char *)v17 + 20) = 0LL;
      *(void *)((char *)v17 + 36) = 0LL;
      *(void *)((char *)v17 + 28) = 0LL;
      v17[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v17 + 18) = 0;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      *char v17 = off_1018714B0;
      v17[1] = 0LL;
      *((_DWORD *)v17 + 4) = 0;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      *char v17 = off_101871690;
      v17[1] = 0LL;
      *((_DWORD *)v17 + 4) = 0;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(_WORD **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x20uLL);
      v17[8] = 0;
      *(void *)char v17 = &off_1018717F8;
      *((void *)v17 + 1) = 0LL;
      *((_DWORD *)v17 + 5) = 0;
      *((_DWORD *)v17 + 6) = 0;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(_BYTE **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      *(void *)char v17 = off_1018718E8;
      v17[8] = 0;
      *((_DWORD *)v17 + 3) = 0;
      *((_DWORD *)v17 + 4) = 0;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *char v17 = &off_1018719D8;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *char v17 = &off_101871AC8;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *char v17 = &off_101871BB8;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      *char v17 = off_101871D20;
      v17[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v17[2] = 0LL;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *char v17 = &off_101871F78;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *char v17 = &off_101872068;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x28uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *char v17 = off_101872158;
      *((_DWORD *)v17 + 6) = 0;
      v17[4] = 0LL;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x20uLL);
      *char v17 = off_101872248;
      v17[1] = 0LL;
      v17[2] = 0LL;
      v17[3] = 0LL;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    char v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      char v17 = operator new(0x18uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *char v17 = &off_101872338;
      *(void *)(a1 + 16) = v17;
    }

    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      uint64_t v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    unint64_t v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    char v23 = *((_DWORD *)this + 14);
    uint64_t v24 = __OFSUB__(v23, 1);
    unint64_t v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_cadenceMean),  @"cadenceMean");
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_15:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  PBDataWriterWriteDoubleField(a3, 14LL, self->_hrVariance);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  *((void *)a3 + 12) = *(void *)&self->_hrVariance;
  *((_DWORD *)a3 + 41) |= 0x800u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  *((void *)result + 1) = *(void *)&self->_cadenceMean;
  *((_DWORD *)result + 41) |= 1u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_15:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  self->_hrVariance = *((double *)a3 + 12);
  *(_DWORD *)&self->_has |= 0x800u;
  int v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x80) == 0)
  {
LABEL_16:
    if ((v3 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }

  char v17 = *(void *)(a1 + 40);
  if (!v17) {
    char v17 = *(void *)(qword_1019A1D38 + 40);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC0B88(v17, a2);
  unint64_t v19 = (int)v18;
  else {
    int v20 = 1;
  }
  v4 += v19 + v20 + 1;
  int v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0) {
      goto LABEL_54;
    }
    goto LABEL_48;
  }

            sub_10049108C(&v27);
            return 1;
          }

          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }

        else if (*v16 >= a3 && *v16 < a4)
        {
          goto LABEL_36;
        }

        v14 += 16LL;
        if (v14 - *v13 == 4096)
        {
          unint64_t v25 = v13[1];
          ++v13;
          int v14 = v25;
        }

        unint64_t v11 = v28;
        int v12 = v29;
      }

      sub_10049108C(&v27);
      if ((id)++v9 != v7) {
        continue;
      }
      break;
    }

    uint64_t v7 = [&off_1018D7198 countByEnumeratingWithState:&v32 objects:v36 count:16];
    uint64_t result = 0;
  }

  while (v7);
  return result;
}

  if (!*(void *)(v1 + 32))
  {
    uint64_t result = (void *)sub_1007C3B58();
    if ((_DWORD)result)
    {
      int v16 = operator new(0x40uLL);
      unint64_t v25 = v24;
      v22[0] = &off_101886910;
      char v23 = v22;
      v24[0] = &off_101886880;
      sub_100E2DD04(v16, (uint64_t)v24, (uint64_t)v22, (uint64_t)sub_100E2A65C, v1);
      char v17 = *(void *)(v1 + 32);
      *(void *)(v1 + 32) = v16;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
      }
      uint64_t v18 = v23;
      if (v23 == v22)
      {
        unint64_t v19 = 4LL;
        uint64_t v18 = v22;
      }

      else
      {
        if (!v23) {
          goto LABEL_45;
        }
        unint64_t v19 = 5LL;
      }

      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_45:
      uint64_t result = v25;
      if (v25 == v24)
      {
        int v20 = 4LL;
        uint64_t result = v24;
      }

      else
      {
        if (!v25)
        {
LABEL_50:
          *(_BYTE *)(v1 + 912) = 0;
          return result;
        }

        int v20 = 5LL;
      }

      uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v20))();
      goto LABEL_50;
    }
  }

  return result;
}

  fcntl((int)[v8 fileDescriptor], 50, &v50);
  if (qword_1019345F0 != -1) {
    dispatch_once(&qword_1019345F0, &stru_101889328);
  }
  uint64_t v27 = obj;
  uint64_t v28 = (os_log_s *)qword_1019345F8;
  if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v29 = -[NSMutableArray count](obj, "count");
    *(_DWORD *)uint8_t v52 = 134218498;
    char v53 = *(double *)&v29;
    uint64_t v54 = 1024;
    *(_DWORD *)uint64_t v55 = v14;
    *(_WORD *)&v55[4] = 2080;
    *(void *)&v55[6] = &v50;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "Wrote %lu meta records across %d data containers to %s",  v52,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v52, 0x65CuLL);
    if (qword_1019345F0 != -1) {
      dispatch_once(&qword_1019345F0, &stru_101889328);
    }
    uint64_t v32 = qword_1019345F8;
    uint64_t v33 = -[NSMutableArray count](obj, "count");
    uint64_t v44 = 134218498;
    uint64_t v45 = v33;
    char v46 = 1024;
    unsigned int v47 = v14;
    v48 = 2080;
    v49 = &v50;
    _os_log_send_and_compose_impl( 2LL,  0LL,  v52,  1628LL,  &_mh_execute_header,  v32,  2LL,  "Wrote %lu meta records across %d data containers to %s",  &v44,  28,  (const char *)obj);
    uint64_t v35 = (uint8_t *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbs oluteTime, CFAbsoluteTime)",  "%s\n",  v34);
    if (v35 != v52) {
      free(v35);
    }
  }

  return 1LL;
}

      ++v33;
      uint64_t v29 = *a2;
      v31 += 8LL;
      v32 += 24LL;
      if (v33 >= (a2[1] - *a2) >> 3) {
        goto LABEL_48;
      }
    }

    uint64_t v78 = v37;
    sub_1008ACEE4((uint64_t)v75, 0, v37, SHIDWORD(v37));
    sub_1006036B0((uint64_t **)&v79, (uint64_t)v75, (uint64_t)v75);
    if (v82 == (void **)sub_100F7FA0C((uint64_t)&v81, (int *)&v78))
    {
      sub_100DABB40(*(uint64_t **)(a1 + 96), (int *)&v78, (uint64_t)&v95);
      if (!v99)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10188FC08);
        }
        uint64_t v39 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 67174913;
          *(_DWORD *)&uint8_t buf[4] = v78;
          *(_WORD *)&uint8_t buf[8] = 1025;
          *(_DWORD *)&buf[10] = HIDWORD(v78);
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "tile header missing from returned mac, x, %{private}d, y, %{private}d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_10188FC08);
          }
          v92[0] = 67174913;
          v92[1] = v78;
          v93 = 1025;
          unint64_t v94 = HIDWORD(v78);
          LODWORD(v65) = 14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "tile header missing from returned mac, x, %{private}d, y, %{private}d",  v92,  v65);
          uint64_t v41 = (char *)v40;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddress es(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const",  "%s\n",  v40);
          if (v41 != buf) {
            free(v41);
          }
        }

        goto LABEL_34;
      }

      sub_100F7FA80(&v81, (int *)&v78, &v78, (__int128 *)&v95);
      ++v73;
    }

    unint64_t v38 = sub_100F7907C((uint64_t)&v81, (int *)&v78);
    sub_100BEC2CC((uint64_t)&v95, *v35, (v36 >> 12) & 0xFFF, v36 & 0xFFF, HIBYTE(v36) & 0xF, v36 >> 28);
    sub_100F790B8(v38, (uint64_t)&v95, (uint64_t)buf);
    sub_1002FAF5C((uint64_t **)a4, v35, v35, buf);
LABEL_34:
    if (v77 < 0) {
      operator delete(__p);
    }
    goto LABEL_36;
  }

  uint64_t v73 = 0;
LABEL_48:
  uint64_t v42 = a1;
  sub_100F79220(a1, &v79, (unint64_t)*(double *)&qword_101991110, v74, a5);
  LODWORD(v43) = HIDWORD(v70);
  LODWORD(a3) = v73;
  *(void *)uint64_t buf = v74;
  sub_100E002BC((void ***)buf);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10188FC08);
  }
  uint64_t v44 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    uint64_t v45 = (unint64_t)(a2[1] - *a2) >> 3;
    *(_DWORD *)uint64_t buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v45;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v73;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = HIDWORD(v70);
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "@TileSearch, wifi, results, searched, %{public}d, in_tiles, %{public}d, ALS, %{public}d",  buf,  0x14u);
  }

  p_vtable = (void **)v85;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 == -1) {
      goto LABEL_63;
    }
    goto LABEL_75;
  }

  if (v22 != v66) {
    unint64_t v66 = v22;
  }
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10188FC28);
  }
  unint64_t v25 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v71;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = ((char *)v66 - (_BYTE *)__p) >> 2;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "@WifiChannel, surroundingWifiBand, %d, # of aps on band, %lu",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10188FC28);
    }
    v80[0] = 67109376;
    v80[1] = v71;
    uint64_t v81 = 2048;
    uint64_t v82 = ((char *)v66 - (_BYTE *)__p) >> 2;
    LODWORD(v63) = 18;
    char v53 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WifiChannel, surroundingWifiBand, %d, # of aps on band, %lu",  v80,  v63);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &, const st d::vector<int> &, CLNetworkLocationRequest_Type::CLAlsWifiBand, cl::chrono::CFAbsoluteTimeClock::time_point)",  "%s\n",  v53);
    if (v53 != buf) {
      free(v53);
    }
  }

  *(void *)uint64_t buf = &v71;
  int v26 = (char *)(sub_1004C2E20((uint64_t **)(a1 + 112), &v71, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5);
  sub_100A1F1AC(*(void *)(a1 + 88), (uint64_t)v80);
  uint64_t v64 = sub_100A1F6A0(*(void *)(a1 + 88));
  uint64_t v27 = *(void *)(a1 + 40);
  if ((v27 & 0x8000000000000000LL) == 0) {
    sub_100A1F144(*(void *)(a1 + 88), v27);
  }
  uint64_t v28 = *a3;
  uint64_t v29 = a3[1];
  if (*a3 != v29)
  {
    do
    {
      uint64_t v30 = *a2;
      uint64_t v31 = a2[1];
      if (*a2 != v31)
      {
        uint64_t v32 = *v28;
        do
        {
          uint64_t v33 = *(_DWORD *)(v30 + 164);
          *(void *)uint64_t buf = *(void *)(v30 + 176);
          uint64_t v34 = *(void *)(v30 + 156);
          uint64_t v35 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)v30;
          uint64_t v84 = v35;
          uint64_t v36 = *(_OWORD *)(v30 + 32);
          uint64_t v37 = *(_OWORD *)(v30 + 48);
          unint64_t v38 = *(_OWORD *)(v30 + 80);
          uint64_t v87 = *(_OWORD *)(v30 + 64);
          v88 = v38;
          uint64_t v85 = v36;
          uint64_t v86 = v37;
          uint64_t v39 = *(_OWORD *)(v30 + 96);
          __int128 v40 = *(_OWORD *)(v30 + 112);
          uint64_t v41 = *(_OWORD *)(v30 + 128);
          *(_OWORD *)&v91[12] = *(_OWORD *)(v30 + 140);
          uint64_t v90 = v40;
          *(_OWORD *)uint64_t v91 = v41;
          uint64_t v89 = v39;
          v92 = v34;
          v93 = v33;
          unint64_t v94 = v32;
          double v95 = vrev64_s32(*(int32x2_t *)(v30 + 168));
          sub_100A1F13C(*(void *)(a1 + 88), (uint64_t)buf);
          v30 += 184LL;
        }

        while (v30 != v31);
      }

      ++v28;
    }

    while (v28 != v29);
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10188FC28);
  }
  uint64_t v42 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    uint64_t v44 = *a2;
    char v43 = a2[1];
    char v46 = *a3;
    uint64_t v45 = a3[1];
    unsigned int v47 = sub_100A1F6A0(*(void *)(a1 + 88));
    v48 = (a2[1] - *a2) >> 3;
    *(_DWORD *)uint64_t buf = 134349824;
    *(void *)&uint8_t buf[4] = 0xD37A6F4DE9BD37A7LL * ((v43 - v44) >> 3) * (v45 - v46);
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v64;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v47;
    LOWORD(v84) = 2050;
    *(void *)((char *)&v84 + 2) = 0xD37A6F4DE9BD37A7LL * v48;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "@WifiAps, dbadd, %{public}lu, was, %{public}u, now, %{public}u, aps, %{public}lu",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10188FC28);
    }
    uint64_t v54 = qword_101934868;
    uint64_t v56 = *a2;
    uint64_t v55 = a2[1];
    unint64_t v59 = a3;
    uint64_t v57 = *a3;
    uint64_t v58 = v59[1];
    uint64_t v60 = sub_100A1F6A0(*(void *)(a1 + 88));
    __int128 v61 = (a2[1] - *a2) >> 3;
    uint64_t v72 = 134349824;
    uint64_t v73 = 0xD37A6F4DE9BD37A7LL * ((v55 - v56) >> 3) * (v58 - v57);
    uint64_t v74 = 1026;
    uint64_t v75 = v64;
    uint64_t v76 = 1026;
    uint64_t v77 = v60;
    uint64_t v78 = 2050;
    uint64_t v79 = 0xD37A6F4DE9BD37A7LL * v61;
    LODWORD(v63) = 34;
    char v62 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v54,  1LL,  "@WifiAps, dbadd, %{public}lu, was, %{public}u, now, %{public}u, aps, %{public}lu",  &v72,  v63);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &, const st d::vector<int> &, CLNetworkLocationRequest_Type::CLAlsWifiBand, cl::chrono::CFAbsoluteTimeClock::time_point)",  "%s\n",  v62);
    if (v62 != buf) {
      free(v62);
    }
  }

  sub_100A112B4(v80);
  *(double *)(a1 + 32) = a5;
  *(double *)(*(void *)(a1 + 96) + 32LL) = a5;
  v49 = -373475417 * ((unint64_t)(a2[1] - *a2) >> 3);
  if (__p)
  {
    unint64_t v66 = (int *)__p;
    operator delete(__p);
  }

  if (HIBYTE(v70))
  {
    if ((_BYTE)v70) {
      pthread_mutex_unlock(v69);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v68 + 24LL))(v68);
    }
  }

  return v49;
}

  unint64_t v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x100u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 40) = v19;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      return result;
    }
LABEL_38:
    uint64_t v21 = *(_BYTE *)(a2 + 68);
    *(_DWORD *)(result + 72) = v3 | 0x8000;
    *(_BYTE *)(result + 68) = v21;
    return result;
  }

  PB::TextFormatter::format(this, "tripFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x2000) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((v5 & 0x4000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 69), 0x11u);
  if ((*(_DWORD *)(v3 + 72) & 0x8000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 0x12u);
  }
  return result;
}

  uint64_t v7 = *(void *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(void *)(a1 + 152) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "speedDeviceIdentification", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xCu);
  unsigned int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }

  uint64_t result = *(float *)(a2 + 76);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 76) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "isPendular", *(_BYTE *)(a1 + 95));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xBu);
  unsigned int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 104);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 104) = v15;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "impulseStartTimeWalkingSpeed", *(void *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "gravityX", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

      uint64_t v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      unsigned int v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && !*((_BYTE *)this + 24));
  }

  return v4 == 0;
}

  char v17 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "posPeakTotalAngleDegrees", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 136);
  v6 |= 0x10000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 136) = v21;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "previousTimeAccel", *(void *)(a1 + 56));
  char v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 2) == 0)
  {
LABEL_15:
    if ((v9 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  uint64_t result = *(float *)(a2 + 92);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 92) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "configPlanarDelaySpreadThreshold", *(float *)(a1 + 28));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  unsigned int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "configMinimumAccelNormThreshold", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 5u);
  unsigned int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }

  int v8 = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 108) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "gpsSpeedMetersPerSecond", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 6u);
  unsigned int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 201), 0x66u);
  unsigned int v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }

  int v16 = *(_BYTE *)(a2 + 59);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 59) = v16;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "kFinalDecision", *(_BYTE *)(a1 + 65));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0x133u);
  unsigned int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 40) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "staticGpsCountResetRequired", *(_BYTE *)(a1 + 90));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xCCu);
  unsigned int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 72);
  v3 |= 0x200u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 72) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "runningDeltaVYOverEpoch", *(float *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x10u);
  unsigned int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  int v22 = *(void *)(a2 + 104);
  v6 |= 0x40u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 104) = v22;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "peakTimeDeltaPercentileDiff", *(void *)(a1 + 72));
  unint64_t v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 8) == 0)
  {
LABEL_19:
    if ((v11 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "polylinesLocation2Latitude", *(double *)(a1 + 152));
  uint64_t v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0xDu);
  int v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x800) == 0)
  {
LABEL_22:
    if ((v14 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0xBu);
  int v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x10) != 0) {
    goto LABEL_37;
  }
LABEL_22:
  if ((v16 & 2) != 0) {
LABEL_23:
  }
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0xDu);
LABEL_24:
  char v17 = *(float **)(v3 + 104);
  uint64_t v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    unint64_t v19 = *v17++;
    uint64_t result = PB::Writer::write(this, v19, 0xEu);
  }

  uint64_t v21 = *(float **)(v3 + 128);
  int v20 = *(float **)(v3 + 136);
  while (v21 != v20)
  {
    int v22 = *v21++;
    uint64_t result = PB::Writer::write(this, v22, 0xFu);
  }

  return result;
}

  int v6 = *(_BYTE *)(a2 + 77);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 77) = v6;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x8000) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((v5 & 1) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 76), 0x11u);
  if ((*(_DWORD *)(v3 + 80) & 0x100) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 44), 0x12u);
  }
  return result;
}

  int v22 = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 124) |= 0x8000u;
  *(_BYTE *)(a1 + 120) = v22;
  uint64_t v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x200) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "unitDistanceLargeBufferMax", *(float *)(a1 + 96));
  int v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x400) == 0)
  {
LABEL_20:
    if ((v12 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0xDu);
  unint64_t v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10000) == 0)
  {
LABEL_20:
    if ((v11 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 36) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0xBu);
  unsigned int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0xBu);
  uint64_t v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
LABEL_38:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0xDu);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 201), 8u);
  if ((*(_BYTE *)(v3 + 204) & 0x20) != 0) {
LABEL_19:
  }
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 202), 9u);
LABEL_20:
  char v17 = *(const PB::Base **)(v3 + 176);
  if (v17) {
    uint64_t result = PB::Writer::writeSubmessage(this, v17, 0xAu);
  }
  uint64_t v18 = *(float **)(v3 + 104);
  unint64_t v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    int v20 = *v18++;
    uint64_t result = PB::Writer::write(this, v20, 0xBu);
  }

  if ((*(_BYTE *)(v3 + 204) & 4) != 0) {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196), 0xCu);
  }
  uint64_t v21 = *(float **)(v3 + 128);
  int v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    char v23 = *v21++;
    uint64_t result = PB::Writer::write(this, v23, 0xDu);
  }

  unint64_t v25 = *(float **)(v3 + 56);
  uint64_t v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    int v26 = *v25++;
    uint64_t result = PB::Writer::write(this, v26, 0xEu);
  }

  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "habcBiasCorrectedNumFramesCaptured", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 8u);
  unsigned int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  unint64_t v19 = *(_BYTE *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 96) = v3;
  *(_BYTE *)(result + 92) = v19;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      return result;
    }
LABEL_38:
    uint64_t v21 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(result + 96) = v3 | 0x8000;
    *(_DWORD *)(result + 88) = v21;
    return result;
  }

  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x4000) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((v5 & 0x8000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "variant", *(_DWORD *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 93), 0x11u);
  if ((*(_DWORD *)(v3 + 96) & 0x8000) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x12u);
  }
  return result;
}

  PB::TextFormatter::format(this, "ev", *(float *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 4u);
  unsigned int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }

        uint64_t v10 = a1 + v19;
        if (v22 < (unint64_t)v23)
        {
          int v26 = v23;
          do
          {
            uint64_t v27 = *(_OWORD *)v10;
            v130 = *(void **)(v10 + 16);
            *(_OWORD *)v129 = v27;
            uint64_t v28 = *(_OWORD *)v26;
            *(void *)(v10 + 16) = v26[2];
            *(_OWORD *)uint64_t v10 = v28;
            uint64_t v29 = *(_OWORD *)v129;
            v26[2] = v130;
            *(_OWORD *)int v26 = v29;
            do
            {
              while (1)
              {
                v10 += 24LL;
                sub_101123E50(*a3, (void **)v10, v129);
                sub_101123E50(*a3, (void **)&v125, __p);
                uint64_t v30 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v130) < 0) {
                  break;
                }
                if (!v30) {
                  goto LABEL_47;
                }
              }

              operator delete(v129[0]);
            }

            while (v30);
            do
            {
              while (1)
              {
LABEL_47:
                v26 -= 3;
                sub_101123E50(*a3, v26, v129);
                sub_101123E50(*a3, (void **)&v125, __p);
                uint64_t v31 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0) {
                  operator delete(__p[0]);
                }
                if ((SHIBYTE(v130) & 0x80000000) == 0) {
                  break;
                }
                operator delete(v129[0]);
                if (v31) {
                  goto LABEL_51;
                }
              }
            }

            while (!v31);
LABEL_51:
            ;
          }

          while (v10 < (unint64_t)v26);
        }

        uint64_t v32 = (__int128 *)(v10 - 24);
        if (v10 - 24 == a1)
        {
        }

        else
        {
          uint64_t v33 = *v32;
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v33;
          *(_BYTE *)(v10 - 1) = 0;
          *(_BYTE *)(v10 - 24) = 0;
        }

        uint64_t v34 = v125;
        *(void *)(v10 - 8) = v126;
        *uint64_t v32 = v34;
        if (v22 < (unint64_t)v23)
        {
LABEL_61:
          sub_10112231C(a1, v10 - 24, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }

        uint64_t v35 = sub_101123B00(a1, v10 - 24, a3);
        if (!sub_101123B00(v10, v122, a3))
        {
          if (v35) {
            continue;
          }
          goto LABEL_61;
        }

        a2 = v10 - 24;
        if (!v35) {
          goto LABEL_1;
        }
        return;
    }
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 64) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "rotationRateMean", *(double *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  uint64_t result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 160) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "longBoutsWalkingSpeedCountRatioLog", *(double *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168), 0xEu);
  unsigned int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ5", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  unsigned int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }

  uint64_t result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 192) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P95", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 208), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 24));
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }

  uint64_t result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 60) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "accelFFTBinDotPressureFFTBin", *(float *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 68) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "pocketProbExit", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x10u);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  unint64_t v19 = *(_DWORD *)(a2 + 64);
  v3 |= 0x100u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 64) = v19;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_38:
    uint64_t v21 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(result + 84) = v3 | 0x40;
    *(_DWORD *)(result + 56) = v21;
    return result;
  }

  PB::TextFormatter::format(this, "timestampPossible", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((v5 & 0x20000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "wakePending", *(_BYTE *)(a1 + 82));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x11u);
  if ((*(_DWORD *)(v3 + 84) & 0x40) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0x12u);
  }
  return result;
}

  uint64_t v10 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 24) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "isVehicleConnected", *(_BYTE *)(a1 + 109));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 109), 8u);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 4u);
  unsigned int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
  unsigned int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "rotRateInerZMean", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xCu);
  unsigned int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }

  uint64_t result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 20) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "proxBufferVariance", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0x10u);
  unsigned int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }

  uint64_t v15 = *(_BYTE *)(a2 + 123);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 123) = v15;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "isRunning", *(_BYTE *)(a1 + 122));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }

  char v9 = *(void *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 136) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "deltaPedometerTime", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 182), 7u);
  unsigned int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }

  unint64_t v11 = *(void *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 176) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  PB::TextFormatter::format(this, "integratedRotationRateYBackwards", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }