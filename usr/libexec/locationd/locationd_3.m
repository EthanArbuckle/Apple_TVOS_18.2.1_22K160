LABEL_37:
  v15 = *(void *)(a1 + 40);
  v16 = *(unsigned __int8 *)(v15 + 23);
  v17 = v16;
  v18 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    v19 = v18;
  }
  if (v19 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19,  a2);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v18 = *(void *)(v15 + 8);
    v3 = *(_DWORD *)(a1 + 64);
    v17 = *(_BYTE *)(v15 + 23);
  }

  else
  {
    v20 = 1;
  }

  if (v17 < 0) {
    v16 = v18;
  }
  v5 = (v5 + v20 + v16 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_46:
    v21 = *(void *)(a1 + 48);
    v22 = *(unsigned __int8 *)(v21 + 23);
    v23 = v22;
    v24 = *(void *)(v21 + 8);
    if ((v22 & 0x80u) == 0) {
      v25 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      v25 = v24;
    }
    if (v25 >= 0x80)
    {
      v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v25,  a2);
      v22 = *(unsigned __int8 *)(v21 + 23);
      v24 = *(void *)(v21 + 8);
      v23 = *(_BYTE *)(v21 + 23);
    }

    else
    {
      v26 = 1;
    }

    if (v23 < 0) {
      v22 = v24;
    }
    v5 = (v5 + v26 + v22 + 1);
  }

  v21 = *(void *)(a1 + 40);
  if (!v21) {
    v21 = *(void *)(qword_1019A0978 + 40);
  }
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100074944(v21, a2);
  v23 = (int)v22;
  else {
    v24 = 1;
  }
  v4 = (v4 + v23 + v24 + 1);
  v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  v17 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 80) |= 0x10u;
  v18 = *(std::string **)(a1 + 32);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    v18 = (std::string *)operator new(0x18uLL);
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 32) = v18;
  }

  std::string::operator=(v18, v17);
  v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x20) != 0) {
    goto LABEL_40;
  }
LABEL_14:
  if ((v5 & 0x40) == 0) {
    goto LABEL_15;
  }
LABEL_43:
  v21 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 80) |= 0x40u;
  v22 = *(std::string **)(a1 + 48);
  if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    v22 = (std::string *)operator new(0x18uLL);
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 48) = v22;
  }

  std::string::operator=(v22, v21);
  v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x80) != 0)
  {
LABEL_16:
    v7 = *(_BYTE *)(a2 + 29);
    *(_DWORD *)(a1 + 80) |= 0x80u;
    *(_BYTE *)(a1 + 29) = v7;
    v5 = *(_DWORD *)(a2 + 80);
  }

    *(_DWORD *)buf = 0;
    sub_100018E34((int *)buf);
    v43 = (void *)sub_100017338((ssize_t)buf);
    *(void *)&v44 = v32;
    sub_100019D7C((unsigned int *)buf);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181D8B0);
    }
    v33 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      if (!*v31) {
        sub_100036CD8();
      }
      v34 = (char *)operator new(0x28uLL);
      *(void *)(v34 + 29) = 0LL;
      *(_OWORD *)v34 = 0u;
      *((_OWORD *)v34 + 1) = 0u;
      sub_10000AE6C(a1 + 185, v34);
      v35 = (char *)operator new(0x28uLL);
      *(void *)(v35 + 29) = 0LL;
      *(_OWORD *)v35 = 0u;
      *((_OWORD *)v35 + 1) = 0u;
      sub_10000AE6C((uint64_t)&v43, v35);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v47 = 2082;
      *(void *)&v47[2] = "";
      v48 = 2082;
      v49 = v34;
      v50 = 2082;
      v51 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationLegacyClient: request localization for legacy focus client, Service ID :%{public, location:escape_only}s, Request ID:%{public, location:escape_only}s}",  buf,  0x26u);
      operator delete(v35);
      operator delete(v34);
    }

    if (!*v31) {
      sub_100036CD8();
    }
    if (((v30 | (*(unsigned int (**)(void, void, void, void **, double *, BOOL))(**(void **)(a1 + 128) + 56LL))( *(void *)(a1 + 128),  *(void *)(a1 + 185),  *(void *)(a1 + 193),  &v43,  &v39,  v6 == 1)) & 1) == 0) {
      return 0LL;
    }
    goto LABEL_44;
  }

  v30 = 0LL;
  v31 = (_BYTE *)(a1 + 201);
  if (*(_BYTE *)(a1 + 201)) {
    goto LABEL_37;
  }
  return v30;
}

        if (sub_10002E1E4(*(void *)(a1 + 104), a3, a4))
        {
          if (!v31) {
            sub_100036CD8();
          }
          sub_1000F0BA8(v24, &v32, v25[0], v28);
          v23 = v24[1];
          *a6 = v24[0];
          a6[1] = v23;
          a6[2].n128_u8[0] = 1;
          v18 = -1LL;
        }

        else
        {
          a6->n128_u8[0] = 0;
          a6[2].n128_u8[0] = 0;
          v18 = 26LL;
        }

        goto LABEL_36;
      }
    }

  if (*(_DWORD *)v5 != 1701670760) {
    return 0LL;
  }
  v21 = *((char *)a2 + 23);
  if (v21 < 0)
  {
    if (a2[1] != 7) {
      return 0LL;
    }
    a2 = (uint64_t *)*a2;
  }

  else if (v21 != 7)
  {
    return 0LL;
  }

  v23 = *(_DWORD *)a2 != 1852534389 || *(_DWORD *)((char *)a2 + 3) != 1853321070;
  return a5 == 11 && !v23;
}

            __p = v28;
            v34 = v24;
            v35 = (double *)&v23[8 * v22];
            if (v18) {
              operator delete(v18);
            }
            goto LABEL_39;
          }
        }

        else
        {
          v16 = sub_100103618(*((_DWORD *)v13 + 6));
          v17 = v34;
          if (v34 >= v35)
          {
            v18 = (double *)__p;
            v25 = ((char *)v34 - (_BYTE *)__p) >> 3;
            v26 = v25 + 1;
            v27 = (char *)v35 - (_BYTE *)__p;
            else {
              v22 = v26;
            }
            if (v22)
            {
              v23 = (char *)sub_1000071BC((uint64_t)&v35, v22);
              v18 = (double *)__p;
              v17 = v34;
            }

            else
            {
              v23 = 0LL;
            }

            v28 = (double *)&v23[8 * v25];
            *v28 = v16;
            v24 = v28 + 1;
            while (v17 != v18)
            {
              v30 = *((void *)v17-- - 1);
              *((void *)v28-- - 1) = v30;
            }

            goto LABEL_37;
          }
        }

        *v17 = v16;
        v24 = v17 + 1;
LABEL_39:
        v34 = v24;
        v13 = (uint64_t *)*v13;
      }

      while (v13);
    }

    v31 = a3[1];
    if (v31 >= a3[2])
    {
      v32 = sub_100007264(a3, (uint64_t)&__p);
    }

    else
    {
      sub_10013E3EC((uint64_t)a3, (uint64_t)&__p);
      v32 = v31 + 24;
    }

    a3[1] = v32;
    if (__p)
    {
      v34 = (double *)__p;
      operator delete(__p);
    }

    sub_1000EFC64((uint64_t)&v37);
  }

  result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 160) |= 8u;
  *(double *)(a1 + 32) = result;
  v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_39:
    v10 = *(_BYTE *)(a2 + 153);
    *(_DWORD *)(a1 + 160) |= 0x20u;
    *(_BYTE *)(a1 + 153) = v10;
    v6 = *(_DWORD *)(a2 + 160);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_40;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  (int)a2,  *(double *)(v5 + 96),  a3);
  v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  v21 = *(void *)(a1 + 40);
  if (!v21) {
    v21 = *(void *)(qword_1019A0AF0 + 40);
  }
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CB0B0(v21, a2);
  v23 = (int)v22;
  else {
    v24 = 1;
  }
  v4 = (v4 + v23 + v24 + 1);
  v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  result = *(double *)(a2 + 88);
  *(_DWORD *)(a1 + 132) |= 0x400u;
  *(double *)(a1 + 88) = result;
  v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x800) == 0)
  {
LABEL_18:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  result = *(double *)(a2 + 88);
  *(_DWORD *)(a1 + 132) |= 0x400u;
  *(double *)(a1 + 88) = result;
  v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x800) == 0)
  {
LABEL_18:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 88),  a3);
  v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  v20 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 364) |= 8u;
  *(void *)(a1 + 32) = v20;
  v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x10) == 0)
  {
LABEL_17:
    if ((v13 & 0x20) == 0) {
      goto LABEL_18;
    }
LABEL_39:
    v22 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 364) |= 0x20u;
    *(_DWORD *)(a1 + 48) = v22;
    v13 = *(_DWORD *)(a2 + 364);
    if ((v13 & 0x40) == 0)
    {
LABEL_19:
      if ((v13 & 0x80) == 0) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }

    goto LABEL_40;
  }

  v13 = *(void *)(v5 + 80);
  if (!v13) {
    v13 = *(void *)(qword_1019A0BD8 + 80);
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v13,  a2,  a4);
  v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x800) != 0) {
    goto LABEL_40;
  }
LABEL_13:
  if ((v6 & 0x1000) == 0) {
    return result;
  }
LABEL_41:
  v14 = *(void *)(v5 + 88);
  if (!v14) {
    v14 = *(void *)(qword_1019A0BD8 + 88);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v14,  a2,  a4);
}

  v15 = *(_DWORD *)(a2 + 72);
  if (v15 >= 4) {
    sub_10122FCD4();
  }
  *(_DWORD *)(a1 + 92) |= 0x1000u;
  *(_DWORD *)(a1 + 72) = v15;
  v5 = *(_DWORD *)(a2 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_30:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_44;
  }

  v19 = *(_BYTE *)(a2 + 89);
  *(_DWORD *)(a1 + 96) |= 0x800u;
  *(_BYTE *)(a1 + 89) = v19;
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      return;
    }
    goto LABEL_20;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10182B5B0);
  }
  v18 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    v19 = *(char *)(a1 + 192);
    v20 = [a2 count];
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    v22 = [v12 count];
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)v40 = v19;
    *(_WORD *)&v40[4] = 2050;
    *(void *)&v40[6] = v20;
    *(_WORD *)&v40[14] = 2050;
    *(void *)&v40[16] = v21;
    v41 = 2050;
    v42 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10182B5B0);
    }
    v25 = qword_101934868;
    v26 = *(char *)(a1 + 192);
    v27 = [a2 count];
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    v29 = [v12 count];
    *(_DWORD *)v36 = 67240960;
    *(_DWORD *)&v36[4] = v26;
    *(_WORD *)&v36[8] = 2050;
    *(void *)&v36[10] = v27;
    *(_WORD *)&v36[18] = 2050;
    *(void *)&v36[20] = v28;
    v37 = 2050;
    v38 = v29;
    LODWORD(v35) = 38;
    v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  1LL,  "@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld",  v36,  v35);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)",  "%s\n",  v30);
  }

  v23 = (*(double (**)(void))(**(void **)(a1 + 56) + 32LL))(*(void *)(a1 + 56));
  sub_10021B72C((double *)(a1 + 208), v23);
  return v12;
}

  v12 = 0LL;
  v10 = 0;
  v8 = 0;
LABEL_55:
  free(v4);
LABEL_56:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10182E260);
  }
  v33 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    if (v10) {
      v34 = (double)v52 / (double)v10;
    }
    else {
      v34 = 0.0;
    }
    *(_DWORD *)buf = 136316674;
    v62 = v50;
    v63 = 2080;
    *(void *)v64 = a2;
    *(_WORD *)&v64[8] = 1024;
    *(_DWORD *)&v64[10] = v12;
    *(_WORD *)&v64[14] = 2048;
    *(void *)&v64[16] = v52;
    *(_WORD *)&v64[24] = 1024;
    *(_DWORD *)&v64[26] = v8;
    *(_WORD *)v65 = 1024;
    *(_DWORD *)&v65[2] = v10;
    v66 = 2048;
    v67 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182E260);
    }
    if (v10) {
      v36 = (double)v52 / (double)v10;
    }
    else {
      v36 = 0.0;
    }
    v54 = 136316674;
    v55 = v50;
    v56 = 2080;
    *(void *)v57 = a2;
    *(_WORD *)&v57[8] = 1024;
    *(_DWORD *)&v57[10] = v12;
    *(_WORD *)&v57[14] = 2048;
    *(void *)&v57[16] = v52;
    *(_WORD *)&v57[24] = 1024;
    *(_DWORD *)&v57[26] = v8;
    *(_WORD *)v58 = 1024;
    *(_DWORD *)&v58[2] = v10;
    v59 = 2048;
    v60 = v36;
    LODWORD(v48) = 60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf",  (const char *)&v54,  v48,  v49,  v50,  v51,  v52,  *(double *)v53);
    v38 = (uint8_t *)v37;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v37);
    if (v38 != buf) {
      free(v38);
    }
  }

  sub_1001BA1BC(v53);
  return v12;
}

            if (qword_1019349B0 != -1) {
              dispatch_once(&qword_1019349B0, &stru_101832930);
            }
            v17 = (os_log_s *)qword_1019349B8;
            if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEBUG))
            {
              v18 = [v6 UTF8String];
              v19 = &__s1;
              if ((__s1.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = v18;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Collection endpoint for: %s  set to : %s. Should be localhost:8008",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349B0 != -1) {
                dispatch_once(&qword_1019349B0, &stru_101832930);
              }
              v22 = qword_1019349B8;
              v23 = [v6 UTF8String];
              v24 = &__s1;
              if ((__s1.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                v24 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              }
              v35 = 136315394;
              v36 = v23;
              v37 = 2080;
              v38 = v24;
              v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  2LL,  "Collection endpoint for: %s  set to : %s. Should be localhost:8008",  (const char *)&v35,  22);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLHarvestController::isHarvestingAllowedForLocationSimulation() const",  "%s\n",  v25);
              if (v25 != buf) {
                free(v25);
              }
            }

            v16 = 0LL;
            goto LABEL_54;
          }

        sub_10036E97C(a1);
LABEL_122:
        v56 = *(_OWORD *)a2;
        v57 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = v57;
        *(_OWORD *)(a1 + 16) = v56;
        v58 = *(_OWORD *)(a2 + 48);
        v59 = *(_OWORD *)(a2 + 64);
        v60 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 112) = v60;
        *(_OWORD *)(a1 + 64) = v58;
        *(_OWORD *)(a1 + 80) = v59;
        result = *(__n128 *)(a2 + 112);
        v61 = *(_OWORD *)(a2 + 128);
        v62 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 176) = v62;
        *(__n128 *)(a1 + 128) = result;
        *(_OWORD *)(a1 + 144) = v61;
        return result;
      }

      v27 = *(double *)(a1 + 24);
      if (*(double *)(a2 + 8) - v27 <= 3.84)
      {
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        v40 = (os_log_s *)qword_1019346C8;
        if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_DEFAULT))
        {
          v41 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v86 = v14 - v15;
          *(_WORD *)&v86[4] = 2050;
          *(double *)&v86[6] = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry",  buf,  0x12u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_122;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        v42 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
        *(_DWORD *)v83 = 67240448;
        *(_DWORD *)&v83[4] = v14 - v15;
        *(_WORD *)&v83[8] = 2050;
        *(double *)&v83[10] = v42;
        LODWORD(v77) = 18;
        v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  0LL,  "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry",  v83,  *(void *)&v77);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v31);
      }

      else
      {
        if (v27 <= 0.0) {
          goto LABEL_122;
        }
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        v28 = (os_log_s *)qword_1019346C8;
        if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_INFO))
        {
          v29 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v86 = v14 - v15;
          *(_WORD *)&v86[4] = 2050;
          *(double *)&v86[6] = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "Possibly missing step count entries, %{public}d new steps, %{public}.1f seconds delay since last entry",  buf,  0x12u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_122;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346C0 != -1) {
          dispatch_once(&qword_1019346C0, &stru_101834A68);
        }
        v30 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
        *(_DWORD *)v83 = 67240448;
        *(_DWORD *)&v83[4] = v14 - v15;
        *(_WORD *)&v83[8] = 2050;
        *(double *)&v83[10] = v30;
        LODWORD(v77) = 18;
        v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  1LL,  "Possibly missing step count entries, %{public}d new steps, %{public}.1f seconds delay since last entry",  v83,  *(void *)&v77);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v31);
      }

  if (a2)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_1006B6014(a2, Current + 10.0);
  }

  PBDataWriterWriteFloatField(a3, 15LL, self->_firstCatherineStartTime);
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_16:
    if ((*(_DWORD *)&has & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  *((_DWORD *)a3 + 6) = LODWORD(self->_firstCatherineStartTime);
  *((_DWORD *)a3 + 26) |= 4u;
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_16:
    if ((*(_DWORD *)&has & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  *((_DWORD *)result + 5) = LODWORD(self->_firstCatherine);
  *((_DWORD *)result + 26) |= 2u;
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_15:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  self->_firstCatherineStartTime = *((float *)a3 + 6);
  *(_DWORD *)&self->_has |= 4u;
  v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 8) == 0)
  {
LABEL_16:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  v21 = *(void *)(a1 + 40);
  if (!v21) {
    v21 = *(void *)(qword_1019A11B8 + 40);
  }
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E2850(v21, a2);
  v23 = (int)v22;
  else {
    v24 = 1;
  }
  v4 = (v4 + v23 + v24 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

      if (!v16)
      {
LABEL_41:
        v8 = v14;
        goto LABEL_42;
      }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  *(unsigned __int8 *)(v5 + 105),  a2,  a4);
  v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  *(_DWORD *)(v5 + 108),  a2,  a4);
  }

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  v21 = *(void *)(a1 + 40);
  if (!v21) {
    v21 = *(void *)(qword_1019A1328 + 40);
  }
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100627DEC(v21, a2);
  v23 = (int)v22;
  else {
    v24 = 1;
  }
  v4 = (v4 + v23 + v24 + 1);
  v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  v17 = *(void *)(a1 + 32);
  if (!v17) {
    v17 = *(void *)(qword_1019A1368 + 32);
  }
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100627910(v17, a2);
  v19 = (int)v18;
  else {
    v20 = 1;
  }
  v4 = (v4 + v19 + v20 + 1);
  v3 = *(_DWORD *)(a1 + 64);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    v3 = a1[12];
  }

  else
  {
    v16 = 2;
  }

  v4 = (v16 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_22:
    if ((v3 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }

  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[8];
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    v3 = a1[16];
  }

  else
  {
    v18 = 2;
  }

  v4 = (v18 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_41:
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
    if (v19 >= 0x80)
    {
      v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      v3 = a1[16];
    }

    else
    {
      v20 = 2;
    }

    v4 = (v20 + v4);
  }

  if ((v3 & 0x40) != 0) {
    v4 = (v4 + 2);
  }
  else {
    v4 = v4;
  }
  if ((v3 & 0x80) != 0)
  {
    v17 = *(void *)(a1 + 32);
    if (!v17) {
      v17 = *(void *)(qword_1019A14B0 + 32);
    }
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100645CDC(v17, a2);
    v19 = (int)v18;
    else {
      v20 = 1;
    }
    v4 = (v4 + v19 + v20 + 1);
    v3 = *(_DWORD *)(a1 + 64);
  }

    v29 = 0LL;
    if (!v8) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }

  v29 = 1LL;
  if (v8) {
LABEL_38:
  }
    (*(void (**)(void *))(*(void *)v8 + 8LL))(v8);
LABEL_39:
  *(void *)((char *)v39
  v40 = v31;
  std::streambuf::~streambuf(&v41);
  std::ios::~ios(&v42);
  return v29;
}

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  if (v44 == 180.0)
  {
    *a7 = 1;
LABEL_39:
    v45 = *a5 || *a6;
    *a6 = v45;
    *a5 = v45;
    v46 = fabs(v11);
    if (v46 == 90.0) {
      goto LABEL_40;
    }
    if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v71 = fabs(v46 + -90.0);
      if (v46 < 90.0) {
        v46 = 90.0;
      }
      v72 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
      if (v71 <= v72)
      {
LABEL_40:
        *a6 = 1;
        *a5 = 1;
      }
    }

    goto LABEL_216;
  }

  if ((*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
  {
    *a7 = 0;
    goto LABEL_216;
  }

  v68 = fabs(v44 + -180.0);
  v69 = fabs(v44);
  if (v69 < 180.0) {
    v69 = 180.0;
  }
  if (v69 >= 1.0) {
    v70 = v69 * 2.22044605e-16;
  }
  else {
    v70 = 2.22044605e-16;
  }
  *a7 = v68 <= v70;
  if (v68 <= v70) {
    goto LABEL_39;
  }
LABEL_216:
  result = 0LL;
  if (*a5 && *a6)
  {
    if (*a7)
    {
      if (180.0 - v13 - v15 <= 180.0)
      {
        if (v13 <= v11) {
          v118 = v23;
        }
        else {
          v118 = 0;
        }
        if ((v118 & 1) == 0)
        {
          v119 = v15 <= v11 ? v30 : 0;
          if ((v119 & 1) == 0)
          {
            v120 = 90.0;
            if (v11 != 90.0)
            {
              if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_294;
              }
              v121 = fabs(v11 + -90.0);
              v122 = fabs(v11);
              if (v122 < 90.0) {
                v122 = 90.0;
              }
              v123 = v122 >= 1.0 ? v122 * 2.22044605e-16 : 2.22044605e-16;
              if (v121 > v123)
              {
LABEL_294:
                if (((v23 | v30) & 1) == 0)
                {
                  if (v11 == -90.0) {
                    return 0LL;
                  }
                  if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
                  {
                    v124 = fabs(v11 + 90.0);
                    v125 = fabs(v11);
                    if (v125 >= 90.0) {
                      v120 = v125;
                    }
                    v126 = v120 >= 1.0 ? v120 * 2.22044605e-16 : 2.22044605e-16;
                    if (v124 <= v126) {
                      return 0LL;
                    }
                  }
                }

                return 1LL;
              }
            }
          }
        }
      }

      else
      {
        if (v13 >= v11) {
          v108 = v23;
        }
        else {
          v108 = 0;
        }
        if ((v108 & 1) == 0)
        {
          v109 = v15 >= v11 ? v30 : 0;
          if ((v109 & 1) == 0 && v11 != -90.0)
          {
            if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              goto LABEL_244;
            }
            v110 = 90.0;
            v111 = fabs(v11 + 90.0);
            v112 = fabs(v11);
            if (v112 >= 90.0) {
              v110 = v112;
            }
            v113 = v110 >= 1.0 ? v110 * 2.22044605e-16 : 2.22044605e-16;
            if (v111 > v113)
            {
LABEL_244:
              if (((v23 | v30) & 1) == 0)
              {
                v114 = 90.0;
                if (v11 == 90.0) {
                  return 0LL;
                }
                if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
                {
                  v115 = fabs(v11 + -90.0);
                  v116 = fabs(v11);
                  if (v116 >= 90.0) {
                    v114 = v116;
                  }
                  v117 = v114 >= 1.0 ? v114 * 2.22044605e-16 : 2.22044605e-16;
                  if (v115 <= v117) {
                    return 0LL;
                  }
                }
              }

              return 1LL;
            }
          }
        }
      }
    }

    else if ((v13 > v11 || v15 < v11) && (v15 > v11 || v13 < v11) || ((v32 | v37) & 1) == 0)
    {
      return 1LL;
    }

    *(_BYTE *)(a4 + 16) = 1;
    return 1LL;
  }

  return result;
}

  v28 = (uint64_t *)v44;
  v27 = v45;
  if (a3 > 0x63 || ((char *)v45 - (_BYTE *)v44) >> 3 < a4)
  {
LABEL_51:
    while (v28 != v27)
    {
      v31 = v28++;
      v32 = v28;
      if (v28 != v27)
      {
        while ((sub_10084CBD8(a5, *v31, *v32) & 1) != 0)
        {
          v27 = v32 + 1;
          v32 = v27;
          if (v27 == v45) {
            goto LABEL_51;
          }
        }

        goto LABEL_40;
      }
    }
  }

  else if (!sub_10084D640((double *)&v49, (uint64_t **)&v44, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_40;
  }

  v34 = (uint64_t *)v41;
  v33 = v42;
  if (a3 > 0x63 || ((char *)v42 - (_BYTE *)v41) >> 3 < a4)
  {
    if (v41 != v42)
    {
      while (1)
      {
        v35 = v34++;
        v36 = v34;
        if (v34 != v33) {
          break;
        }
LABEL_59:
        v29 = 1LL;
        if (v34 == v33) {
          goto LABEL_41;
        }
      }

      while ((sub_10084CBD8(a5, *v35, *v36) & 1) != 0)
      {
        v33 = v36 + 1;
        v36 = v33;
        if (v33 == v42) {
          goto LABEL_59;
        }
      }

      goto LABEL_40;
    }

    v29 = 1LL;
  }

  else
  {
    v29 = sub_10084D640(v47, (uint64_t **)&v41, a3 + 1, a4, a5, a6, a7, a8);
  }

  v30 = (uint64_t *)v46;
  v29 = v47;
  if (a3 > 0x63 || ((char *)v47 - (_BYTE *)v46) >> 3 < a4)
  {
LABEL_51:
    while (v30 != v29)
    {
      v33 = v30++;
      v34 = v30;
      if (v30 != v29)
      {
        while ((sub_10084CBD8(a5, *v33, *v34) & 1) != 0)
        {
          v29 = v34 + 1;
          v34 = v29;
          if (v29 == v47) {
            goto LABEL_51;
          }
        }

        goto LABEL_40;
      }
    }
  }

  else if (!sub_10084C708(&v51, &v46, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_40;
  }

  v36 = (uint64_t *)v43;
  v35 = v44;
  if (a3 > 0x63 || ((char *)v44 - (_BYTE *)v43) >> 3 < a4)
  {
    if (v43 != v44)
    {
      while (1)
      {
        v37 = v36++;
        v38 = v36;
        if (v36 != v35) {
          break;
        }
LABEL_59:
        v31 = 1LL;
        if (v36 == v35) {
          goto LABEL_41;
        }
      }

      while ((sub_10084CBD8(a5, *v37, *v38) & 1) != 0)
      {
        v35 = v38 + 1;
        v38 = v35;
        if (v35 == v44) {
          goto LABEL_59;
        }
      }

      goto LABEL_40;
    }

    v31 = 1LL;
  }

  else
  {
    v31 = sub_10084C708(v49, &v43, a3 + 1, a4, a5, a6, a7, a8);
  }

            v28 = 0;
            v29 = 0;
            v30 = 0LL;
            v153 = 1;
LABEL_38:
            v4 = (CLClientKeyPath *)v150;
            goto LABEL_124;
          }
        }

        else
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10185AF80);
          }
          v66 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            v67 = -[NSBundle bundlePath](v154, "bundlePath");
            v165 = 68289539LL;
            v166 = 2082;
            v167 = "";
            v168 = 2113;
            v169 = v67;
            v170 = 2113;
            v171 = (const char *)v146;
            _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#LocationPrivacy Masquerading bundle has no EligibleMasqueraders, Bundle:%{pr ivate, location:escape_only}@, Masquerader:%{private, location:escape_only}@}",  (uint8_t *)&v165,  0x26u);
          }
        }

        v65 = 1;
        goto LABEL_105;
      }

      if (v13)
      {
        v31 = (CLClientKeyPath *)sub_1005486B8( *(void *)(a1 + 16),  (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:",  v13,  105LL));
        if (-[CLClientKeyPath isValidCKP](v9, "isValidCKP"))
        {
          v4 = (CLClientKeyPath *)v150;
        }

        else
        {
          v119 = (CLClientKeyPath *)sub_10053E0A4(*(void *)(a1 + 16), v150);
          if (-[CLClientKeyPath isValidCKP](v119, "isValidCKP")) {
            v4 = v119;
          }
          else {
            v4 = (CLClientKeyPath *)v150;
          }
        }

        v120 = v31;
        if (-[CLClientKeyPath isValidCKP](v4, "isValidCKP")) {
          v121 = -[NSString isEqualToString:]( -[CLClientKeyPath bundleId](v31, "bundleId"),  "isEqualToString:",  -[CLClientKeyPath bundleId](v4, "bundleId"));
        }
        else {
          v121 = 0;
        }
        v122 = -[CLClientKeyPath bundleId](v31, "bundleId");
        v153 = v121;
        if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLAppMonitor"),  "syncgetIsApplicationInstalledLocally:",  v122))
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          v123 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
          {
            v124 = -[CLClientKeyPath bundleId](v4, "bundleId");
            v125 = -[CLClientKeyPath bundleId](v120, "bundleId");
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v124;
            *(_WORD *)&buf[28] = 2114;
            *(void *)&buf[30] = v125;
            *(_WORD *)&buf[38] = 1026;
            *(_DWORD *)&buf[40] = v121;
            _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Client is setting effective bundle identifier, NaturalBundleId:%{public, loca tion:escape_only}@, MasqueradingBundleId:%{public, location:escape_only}@, shouldAuthSlide:%{public}hhd}",  buf,  0x2Cu);
          }

          v126 = (const __CFString *)sub_100D95B24(v122);
          if (v126)
          {
            v127 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v126, kCFURLPOSIXPathStyle, 0);
            if (v127)
            {
              v30 = CFBundleCreate(kCFAllocatorDefault, v127);
              CFRelease(v127);
              v28 = 0;
            }

            else
            {
              v28 = 0;
              v30 = 0LL;
            }
          }

          else
          {
            HasPrefix = CFStringHasPrefix(v122, @"com.apple.webapp-");
            v30 = 0LL;
            v28 = HasPrefix != 0;
          }

          v29 = 1;
          *(_BYTE *)(a1 + 104) = 1;
          v4 = v120;
        }

        else
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          v128 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
          {
            v129 = -[__CFString UTF8String](v122, "UTF8String");
            *(_DWORD *)buf = 138543618;
            *(void *)&buf[4] = v4;
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v129;
            _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_FAULT,  "Client '%{public}@' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            v141 = qword_101934978;
            v142 = -[__CFString UTF8String](v122, "UTF8String");
            LODWORD(v174[0]) = 138543618;
            *(void *)((char *)v174 + 4) = v4;
            WORD2(v174[1]) = 2082;
            *(void *)((char *)&v174[1] + 6) = v142;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v141,  17LL,  "Client '%{public}@' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'",  v174,  22);
            v144 = (char *)v143;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::processRegistration(NSDictionary *)",  "%s\n",  v143);
            if (v144 != buf) {
              free(v144);
            }
            v28 = 0;
            v29 = 0;
            v30 = 0LL;
          }

          else
          {
            v28 = 0;
            v29 = 0;
            v30 = 0LL;
          }
        }

                    v19 = *(void *)(v16 + 8);
                    goto LABEL_38;
                  }

  v22 = *(void *)(a1 + 32);
  if (!v22) {
    v22 = *(void *)(qword_1019A1A48 + 32);
  }
  v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A43D40(v22);
  v25 = (int)v23;
  else {
    v26 = 1;
  }
  v4 = (v4 + v25 + v26 + 1);
  v3 = *(_DWORD *)(a1 + 96);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  *(_DWORD *)(a1 + 116) |= 4u;
  v20 = *(void **)(a1 + 16);
  if (!v20)
  {
    v20 = operator new(0x28uLL);
    *v20 = off_101869230;
    v20[1] = 0LL;
    v20[2] = 0LL;
    v20[3] = 0LL;
    *((_DWORD *)v20 + 8) = 0;
    *(void *)(a1 + 16) = v20;
  }

  v21 = *(void *)(a2 + 16);
  if (!v21) {
    v21 = *(void *)(qword_1019A1A88 + 16);
  }
  sub_100A490C8((uint64_t)v20, v21);
  v13 = *(_DWORD *)(a2 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_16:
    if ((v13 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 56),  (int)a2,  a4);
  v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(float *)(v5 + 80),  a3);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

  v16 = *(void *)(a1 + 56);
  if (!v16) {
    v16 = *(void *)(qword_1019A1A90 + 56);
  }
  v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(_BYTE *)(v16 + 32))
  {
    v18 = (v17 << 31 >> 31) & 9;
    if ((v17 & 2) != 0) {
      v18 += 9;
    }
    if ((v17 & 4) != 0) {
      v17 = v18 + 2;
    }
    else {
      v17 = v18;
    }
  }

  *(_DWORD *)(v16 + 28) = v17;
  v4 = (v4 + v17 + 2);
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x80) != 0)
  {
LABEL_46:
    v19 = *(void *)(a1 + 64);
    if (!v19) {
      v19 = *(void *)(qword_1019A1A90 + 64);
    }
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A48848(v19, a2);
    v21 = (int)v20;
    else {
      v22 = 1;
    }
    v4 = (v4 + v21 + v22 + 1);
    v3 = *(_DWORD *)(a1 + 112);
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      v17 = operator new(0x20uLL);
      v17[1] = 0LL;
      v17[2] = 0LL;
      *v17 = off_101869938;
      *((_DWORD *)v17 + 6) = 0;
      *(void *)(a1 + 16) = v17;
    }

    v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      v27 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(void **)(a1 + 16);
    if (!v17)
    {
      v17 = operator new(0x30uLL);
      v17[5] = 0LL;
      *v17 = off_1018713C0;
      v17[1] = 0LL;
      v17[2] = 0LL;
      v17[3] = 0LL;
      *(void *)((char *)v17 + 29) = 0LL;
      *(void *)(a1 + 16) = v17;
    }

    v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(char **)(a1 + 16);
    if (!v17)
    {
      v17 = (char *)operator new(0x28uLL);
      *(void *)v17 = off_1018715A0;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      *(void *)(a1 + 16) = v17;
    }

    v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 104),  (int)a2,  a4);
  v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }

  v11 = *(void *)(v5 + 40);
  if (!v11) {
    v11 = *(void *)(qword_1019A1CE8 + 40);
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v11,  a2,  a4);
  v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }

  v19 = *(void *)(a1 + 32);
  if (!v19) {
    v19 = *(void *)(qword_1019A1CE8 + 32);
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B23170(v19, a2);
  v21 = (int)v20;
  else {
    v22 = 1;
  }
  v4 = (v4 + v21 + v22 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrVariance),  @"hrVariance");
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  PBDataWriterWriteDoubleField(a3, 15LL, self->_hrConfidenceVariance);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_17:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  *((void *)a3 + 8) = *(void *)&self->_hrConfidenceVariance;
  *((_DWORD *)a3 + 41) |= 0x80u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_17:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  *((void *)result + 12) = *(void *)&self->_hrVariance;
  *((_DWORD *)result + 41) |= 0x800u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  self->_hrConfidenceVariance = *((double *)a3 + 8);
  *(_DWORD *)&self->_has |= 0x80u;
  v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  v7 = *(void *)(v5 + 24);
  if (!v7) {
    v7 = *(void *)(qword_1019A1D38 + 24);
  }
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v7,  a2,  a4);
  v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }

  v48 = a2[3] > 0.11;
LABEL_39:
  v49 = v29 - v35;
  v50 = *(double *)(*(void *)(v11 + 8 * ((v4 + v8 - 1) / 0x49)) + 56 * ((v4 + v8 - 1) % 0x49) + 48);
  v51 = 0.0;
  if (v50 > 0.0) {
    v51 = (a2[6] - v50) / v50;
  }
  v5 = 0LL;
  v52 = v49 / v35;
  if (a3 != 1 && fabs(v51) < 0.05)
  {
    v53 = a2[4];
    v54 = v53 > 4.0;
    if (v52 >= -0.009) {
      v54 = 0;
    }
    v5 = v54 && v34 || v53 > 3.1 && v48;
  }

  if (qword_1019346F0 != -1) {
    dispatch_once(&qword_1019346F0, &stru_101879C30);
  }
  v55 = (os_log_s *)qword_1019346F8;
  if (os_log_type_enabled((os_log_t)qword_1019346F8, OS_LOG_TYPE_INFO))
  {
    v56 = *a2;
    v57 = *((void *)a2 + 4);
    *(_DWORD *)buf = 134350592;
    v77 = v56;
    v78 = 2050;
    v79 = v57;
    v80 = 1026;
    v81 = a3;
    v82 = 2050;
    v83 = v51;
    v84 = 2050;
    v85 = v52;
    v86 = 1026;
    v87 = v34;
    v88 = 1026;
    v89 = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_INFO,  "startTime=%{public}.2f, grade=%{public}.2f, gradeType=%{public}d, deltaCadenceRatio=%{public}.2f, deltaHorizSpeedR atio=%{public}.2f, strictlyDecreasingHorizontalSpeed=%{public}d, allVerticalSpeedsExceeded=%{public}d",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346F0 != -1) {
      dispatch_once(&qword_1019346F0, &stru_101879C30);
    }
    v59 = *a2;
    v60 = *((void *)a2 + 4);
    v62 = 134350592;
    v63 = v59;
    v64 = 2050;
    v65 = v60;
    v66 = 1026;
    v67 = a3;
    v68 = 2050;
    v69 = v51;
    v70 = 2050;
    v71 = v52;
    v72 = 1026;
    v73 = v34;
    v74 = 1026;
    v75 = v48;
    v61 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346F8,  1LL,  "startTime=%{public}.2f, grade=%{public}.2f, gradeType=%{public}d, deltaCadenceRatio=%{public}.2f, de ltaHorizSpeedRatio=%{public}.2f, strictlyDecreasingHorizontalSpeed=%{public}d, allVerticalSpeedsExceeded=%{public}d",  &v62,  60);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLPowerEstimator::isPossibleOnset(const GradeOnsetIndicatorInput, const GradeType, const std::deque<GradeOnse tIndicatorInput> &) const",  "%s\n",  v61);
  }

  return v5;
}
}

    v41 = 0LL;
    if (!v31) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }

  v41 = 1LL;
  if (v31) {
LABEL_38:
  }
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
LABEL_39:
  sub_1001BA1BC(v76);
  *(void *)((char *)v77
  v78 = v42;
  std::streambuf::~streambuf(&v79);
  std::ios::~ios(&v80);
  return v41;
}

  sub_10000CF44(v16, (uint64_t)p_p, v18);
LABEL_39:
  std::stringbuf::str(a2, &v26);
  *(void *)((char *)v24
  v25 = v19;
  std::streambuf::~streambuf(&v26);
  return std::ios::~ios(&v27);
}

  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8LL))(v70);
  }
  if (v14)
  {
    v82 = v14;
    operator delete(v14);
  }

  if (HIBYTE(v86)) {
    goto LABEL_42;
  }
  return v12;
}

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_1000F9040( v6,  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_1000F9040( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1000F9040( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
    sub_1000F9040( (char *)(a1 + 176),  *(char **)(a2 + 176),  *(void *)(a2 + 184),  (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3);
    sub_1000F9040( v7,  *(char **)(a2 + 152),  *(void *)(a2 + 160),  (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
    sub_1000F9040( v8,  *(char **)(a2 + 200),  *(void *)(a2 + 208),  (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3);
  }

  return a1;
}

  v20 = *(_BYTE *)(a2 + 69);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 72) = v3;
  *(_BYTE *)(result + 69) = v20;
  if ((*(_DWORD *)(a2 + 72) & 0x8000) != 0) {
    goto LABEL_38;
  }
  return result;
}

  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "speedUpdateTime", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0xEu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 84), 0xDu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  result = *(float *)(a2 + 44);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "isSufficientVerticalTwist", *(_BYTE *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 84), 0xCu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  v16 = *(_DWORD *)(a2 + 88);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 88) = v16;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "impulseStopTimeWalkingSpeed", *(void *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 84), 0xEu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "gravityY", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 68), 0xAu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

  v18 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 56) = v18;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "rotZRangeDuringGestureRad", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 36), 0x10u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  v22 = *(_DWORD *)(a2 + 124);
  v6 |= 0x2000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 124) = v22;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "previousTimeSag", *(void *)(a1 + 64));
  if ((*(_DWORD *)(a1 + 144) & 4) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "previousTimestamp", *(void *)(a1 + 72));
LABEL_17:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "sagittalApproachMx", v12);
  }

  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x2000) != 0)
  {
    PB::TextFormatter::format(this, "sagittalApproachUnc", *(float *)(a1 + 124));
    v13 = *(_DWORD *)(a1 + 144);
    if ((v13 & 0x4000) == 0)
    {
LABEL_21:
      if ((v13 & 0x8000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_41;
    }
  }

  else if ((v13 & 0x4000) == 0)
  {
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "sagittalApproachX", *(float *)(a1 + 128));
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x8000) == 0)
  {
LABEL_22:
    if ((v13 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 128), 0xBu);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  result = *(float *)(a2 + 80);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "configPlanarPaprThreshold", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 96), 8u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }

  result = *(float *)(a2 + 136);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 136) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "configMinimumWidthThreshold", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 6u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }

  v9 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 96) = v9;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "gpsSpeedMilesPerHour", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 92), 7u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 188), 0x67u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 3u);
  v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }

  v17 = *(_BYTE *)(a2 + 60);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 60) = v17;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "latchedIsAudio", *(_DWORD *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_16:
    if ((v5 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0x191u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  v19 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 48) = v19;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "staticSpeedMetersPerSecondThreshold", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0) {
      goto LABEL_19;
    }
LABEL_39:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 24));
    if ((*(_DWORD *)(a1 + 92) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_20;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 52), 0xCDu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 88), 0xCFu);
  }

  v19 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 112) = v3;
  *(void *)(result + 16) = v19;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "runningDeltaVYThisImpact", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
LABEL_39:
    PB::TextFormatter::format(this, "runningDeltaVZThisImpact", *(float *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 112) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_20;
  }

  result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x11u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x13u);
  }

  v23 = *(_DWORD *)(a2 + 132);
  v6 |= 0x1000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 132) = v23;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "peakToPeakMinimumSeparation", *(void *)(a1 + 80));
  v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x10) == 0)
  {
LABEL_20:
    if ((v11 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(_BYTE *)(v3 + 148), 0x65u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "polylinesLocation2Longitude", *(double *)(a1 + 160));
  if ((*(_WORD *)(a1 + 192) & 0x800) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "roadID", *(void *)(a1 + 168));
LABEL_15:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "rotationFromGlobalToCameraFrame", v8);
  }

  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "rotationFromGlobalToDeviceFrame", v11);
  }

  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "rotationalAccuracyInRadians", v14);
  }

  v15 = *(_WORD *)(a1 + 192);
  if ((v15 & 0x4000) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 188));
    v15 = *(_WORD *)(a1 + 192);
  }

  if ((v15 & 0x1000) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 176));
  }
  return PB::TextFormatter::endObject(this);
}

  result = PB::Writer::writeVarInt(this, *(void *)(v3 + 168), 0xEu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x80) == 0)
  {
LABEL_23:
    if ((v14 & 0x100) == 0) {
      goto LABEL_24;
    }
    goto LABEL_39;
  }

  v7 = *(_BYTE *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v7;
  if ((*(_DWORD *)(a2 + 80) & 0x100) == 0) {
    return *(float *)&v4;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 80) = v3 | 0x100;
  *(_DWORD *)(a1 + 44) = v4;
  return *(float *)&v4;
}

  v23 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 124) |= 0x200u;
  *(_DWORD *)(a1 + 96) = v23;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x40) == 0) {
      goto LABEL_23;
    }
LABEL_39:
    v25 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a1 + 124) |= 0x40u;
    *(_DWORD *)(a1 + 84) = v25;
    if ((*(_DWORD *)(a2 + 124) & 0x2000) == 0) {
      return a1;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "unitDistanceReference", *(float *)(a1 + 100));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x800) == 0)
  {
LABEL_21:
    if ((v12 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(_BYTE *)(v3 + 121), 0xEu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x8000) == 0)
  {
LABEL_21:
    if ((v11 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }

  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 64), 0x10u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 140), 0xCu);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0) {
    goto LABEL_38;
  }
LABEL_22:
  if ((v13 & 0x80) != 0) {
LABEL_23:
  }
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 156), 0xEu);
LABEL_24:
  v14 = *(float **)(v3 + 8);
  v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16, 0xFu);
  }

  v18 = *(float **)(v3 + 32);
  v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    v19 = *v18++;
    result = PB::Writer::write(this, v19, 0x10u);
  }

  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "habcBiasCorrectedNumerator", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  v20 = *(_BYTE *)(a2 + 93);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 96) = v3;
  *(_BYTE *)(result + 93) = v20;
  if ((*(_DWORD *)(a2 + 96) & 0x8000) != 0) {
    goto LABEL_38;
  }
  return result;
}

  PB::TextFormatter::format(this, "exposureDuration", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 96), 5u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }

    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }

  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = sub_101120D5C(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }

  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11) {
        v22 = (uint64_t)sub_101120F70(a1, v14 + 2, a3, &v25);
      }
      else {
        v22 = (uint64_t)sub_101120E48(a1, (unsigned __int8 *)v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }

  else
  {
    LOBYTE(v16) = *v16;
  }

  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_100BFE248(v6, (char *)&v24, (char *)&__p);
  v20 = 1;
LABEL_38:
  if ((v20 & 1) != 0) {
    return v4;
  }
  return (_BYTE *)v6;
}

  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "rotationRateMeanX", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 32), 0xBu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "shortBoutsCycleTimeCv", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 144), 0xFu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ95", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }

  result = *(double *)(a2 + 208);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 208) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 200), 0xAu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 32));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }

  result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "fFTBin1", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 112), 0xAu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

  v19 = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 72) = v19;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
LABEL_39:
    PB::TextFormatter::format(this, "sufficientMotion", *(_BYTE *)(a1 + 81));
    if ((*(_DWORD *)(a1 + 84) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_20;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 44), 0x11u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 81), 0x13u);
  }

  v20 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 84) = v3;
  *(void *)(result + 24) = v20;
  if ((*(_DWORD *)(a2 + 84) & 0x40) != 0) {
    goto LABEL_38;
  }
  return result;
}

  v11 = *(_BYTE *)(a2 + 109);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 109) = v11;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "mountedConfidence", *(_DWORD *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }

  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 9u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 88), 5u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 136), 4u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "rotRateInerZStd", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "sensitivityCal", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
LABEL_39:
    PB::TextFormatter::format(this, "temperatureCalError", *(float *)(a1 + 80));
    if ((*(_DWORD *)(a1 + 88) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_20;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 28), 0x11u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x13u);
  }

  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravShort", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 96), 4u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }

  v16 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 40) = v16;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 123));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 80), 0xEu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }

  v10 = *(_BYTE *)(a2 + 182);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 182) = v10;
  v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "deltaRawPedometerDistance", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(_BYTE *)(v3 + 183), 8u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }

  v12 = *(void *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 168) = v12;
  v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "integratedUserAccelTForwards", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

  result = PB::Writer::write(this, *(double *)(v3 + 144), 0xAu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }

void sub_100064DAC(uint64_t a1, void *lpsrc)
{
}

void sub_100064DF8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10006424C(a1, a2);
  }

uint64_t sub_100064E38()
{
  return 1LL;
}

void *sub_100064E40@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.BleLeechedBeacons");
}

uint64_t sub_100064E50(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = off_10181A540;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 28) = 0LL;
  *(void *)(a1 + 20) = 0LL;
  sub_100064EA8(a1, a2);
  return a1;
}

void sub_100064E94(_Unwind_Exception *a1)
{
}

void sub_100064EA8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  1153LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 40);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    int v5 = *(_DWORD *)(a2 + 40);
  }

  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    int v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    int v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_11;
    }

    goto LABEL_15;
  }

  uint64_t v8 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) |= 2u;
  *(void *)(a1 + 8) = v8;
  int v5 = *(_DWORD *)(a2 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v5 & 8) == 0) {
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v10 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) |= 8u;
  *(void *)(a1 + 24) = v10;
  if ((*(_DWORD *)(a2 + 40) & 0x10) != 0)
  {
LABEL_11:
    int v7 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v7;
  }

void sub_100064FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100064FE0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A540;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100064FF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A540;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

char *sub_100065010()
{
  result = (char *)operator new(0x30uLL);
  *((_DWORD *)result + 4) = 1;
  *(void *)result = off_10181A540;
  *((void *)result + 1) = 0LL;
  *((_DWORD *)result + 9) = 0;
  *((_DWORD *)result + 10) = 0;
  *(void *)(result + 28) = 0LL;
  *(void *)(result + 20) = 0LL;
  return result;
}

uint64_t sub_100065048(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
  {
    *(_DWORD *)(result + 16) = 1;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 28) = 0LL;
    *(void *)(result + 20) = 0LL;
  }

  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10006506C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 24);
  while (2)
  {
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v21);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v21[0];
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }

        v15 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 17)
        {
          *((void *)this + 1) = v15 + 1;
          goto LABEL_31;
        }

        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_20;
        }
LABEL_31:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v21) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v21;
        *(_DWORD *)(a1 + 40) |= 2u;
        v16 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v16 + 1;
LABEL_35:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v21) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v21[0];
          *(_DWORD *)(a1 + 40) |= 4u;
          v17 = (_BYTE *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v17 < v11 && *v17 == 32)
          {
            v12 = v17 + 1;
            *((void *)this + 1) = v12;
LABEL_39:
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
              if (!(_DWORD)result) {
                return result;
              }
              v18 = (_BYTE *)*((void *)this + 1);
              unint64_t v11 = *((void *)this + 2);
            }

            else
            {
              *int v5 = *v12;
              v18 = v12 + 1;
              *((void *)this + 1) = v18;
            }

            *(_DWORD *)(a1 + 40) |= 8u;
            if ((unint64_t)v18 < v11 && *v18 == 40)
            {
              v13 = v18 + 1;
              *((void *)this + 1) = v13;
LABEL_47:
              if ((unint64_t)v13 >= v11 || *v13 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v21);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v19 = v21[0];
                v20 = (unsigned __int8 *)*((void *)this + 1);
                unint64_t v11 = *((void *)this + 2);
              }

              else
              {
                unsigned int v19 = *v13;
                v20 = (unsigned __int8 *)(v13 + 1);
                *((void *)this + 1) = v20;
              }

              *(_DWORD *)(a1 + 32) = v19;
              *(_DWORD *)(a1 + 40) |= 0x10u;
              if (v20 == (unsigned __int8 *)v11
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1LL;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_35;
        }
        goto LABEL_20;
      case 4u:
        int v8 = TagFallback & 7;
        v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_39;
      case 5u:
        int v8 = TagFallback & 7;
        v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_47;
      default:
        int v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100065350( uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

LABEL_9:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 20),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 20),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 24), a2);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  }

  int v7 = *(void *)(v5 + 16);
  if (!v7) {
    int v7 = *(void *)(qword_1019A09E0 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    goto LABEL_15;
  }

  *a2 = v5;
  return result;
}

  *a2 = v7;
  return v5;
}

      v4 += 240LL;
      if (v4 == v5) {
        goto LABEL_10;
      }
    }

    v13 = 20312;
    goto LABEL_18;
  }

  _Unwind_Resume(exception_object);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v4,  *(double *)(v5 + 40),  a3);
  }

      uint64_t v5 = *(void *)(a2 + 32);
      *(_DWORD *)(a1 + 56) |= 0x10u;
      *(void *)(a1 + 32) = v5;
      int v6 = *(_DWORD *)(a2 + 56);
      goto LABEL_10;
    }

  PBDataWriterWriteFloatField(a3, 4LL, self->_verticalSpeed);
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 8) == 0) {
      return;
    }
LABEL_11:
    PBDataWriterWriteInt32Field(a3, self->_source, 6LL);
    return;
  }

  *((_DWORD *)a3 + 7) = LODWORD(self->_verticalSpeed);
  *((_BYTE *)a3 + 32) |= 0x10u;
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 8) == 0) {
      return;
    }
LABEL_11:
    *((_DWORD *)a3 + 6) = self->_source;
    *((_BYTE *)a3 + 32) |= 8u;
    return;
  }

  self->_verticalSpeed = *((float *)a3 + 7);
  *(_BYTE *)&self->_has |= 0x10u;
  v3 = *((_BYTE *)a3 + 32);
  if ((v3 & 4) == 0)
  {
LABEL_5:
    if ((v3 & 8) == 0) {
      return;
    }
LABEL_11:
    self->_source = *((_DWORD *)a3 + 6);
    *(_BYTE *)&self->_has |= 8u;
    return;
  }

  uint64_t v5 = 0LL;
LABEL_10:
  if ((*(_BYTE *)&self->_has & 0x20) != 0) {
    int v6 = 2654435761LL * self->_isMoving;
  }
  else {
    int v6 = 0LL;
  }
  if ((*(_BYTE *)&self->_has & 2) != 0) {
    int v7 = 2654435761LL * self->_exitState;
  }
  else {
    int v7 = 0LL;
  }
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    int v8 = 2654435761u * self->_startTime;
  }
  else {
    int v8 = 0LL;
  }
  return (2654435761LL * self->_confidence) ^ (2654435761LL * self->_type) ^ v2 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

  if (v12 < v14)
  {
    v21 = v12;
    v22 = v14;
    do
    {
      v23 = v21[3];
      v65 = v21[2];
      v66 = v23;
      v67 = v21[4];
      v24 = v21[1];
      v63 = *v21;
      v64 = v24;
      v26 = v22[1];
      v25 = v22[2];
      v27 = v22[4];
      v21[3] = v22[3];
      v21[4] = v27;
      v21[1] = v26;
      unsigned int v21[2] = v25;
      *v21 = *v22;
      *v22 = v63;
      v28 = v64;
      v29 = v65;
      v30 = v67;
      v22[3] = v66;
      v22[4] = v30;
      v22[1] = v28;
      v22[2] = v29;
      do
      {
        v51[0] = v21[5];
        v31 = v21[6];
        v32 = v21[7];
        v33 = v21[8];
        v34 = v21[9];
        v21 += 5;
        v35 = *a3;
        v51[3] = v33;
        v51[4] = v34;
        v51[1] = v31;
        v51[2] = v32;
        v50[2] = v60;
        v50[3] = v61;
        v50[4] = v62;
        v50[0] = v58;
        v50[1] = v59;
      }

      while ((v35(v51, v50) & 1) != 0);
      do
      {
        v49[0] = *(v22 - 5);
        v36 = *(v22 - 4);
        v37 = *(v22 - 3);
        v38 = *(v22 - 2);
        v39 = *(v22 - 1);
        v22 -= 5;
        v40 = (unsigned int (*)(void, void))*a3;
        v49[3] = v38;
        v49[4] = v39;
        v49[1] = v36;
        v49[2] = v37;
        v48[2] = v60;
        v48[3] = v61;
        v48[4] = v62;
        v48[0] = v58;
        v48[1] = v59;
      }

      while (!v40(v49, v48));
    }

    while (v21 < v22);
    v13 = v21 - 5;
  }

  if (v13 != a1)
  {
    *a1 = *v13;
    v41 = v13[1];
    v42 = v13[2];
    v43 = v13[4];
    a1[3] = v13[3];
    a1[4] = v43;
    a1[1] = v41;
    a1[2] = v42;
  }

  char *v13 = v58;
  v44 = v59;
  v45 = v60;
  v46 = v62;
  v13[3] = v61;
  v13[4] = v46;
  v13[1] = v44;
  v13[2] = v45;
  return v13;
}

  PBDataWriterWriteUint32Field(a3, self->_tileY, 3LL);
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      return;
    }
LABEL_11:
    PBDataWriterWriteUint64Field(a3, self->_secKey, 5LL);
    return;
  }

  *((_DWORD *)a3 + 6) = self->_tileY;
  *((_BYTE *)a3 + 32) |= 8u;
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      return;
    }
LABEL_11:
    *((void *)a3 + 1) = self->_secKey;
    *((_BYTE *)a3 + 32) |= 1u;
    return;
  }

  uint64_t v4 = 0LL;
  if ((*(_BYTE *)&self->_has & 0x10) == 0) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v5 = 2654435761LL * self->_isAllowOverCellular;
  if ((*(_BYTE *)&self->_has & 1) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  int v6 = 2654435761u * self->_secKey;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6;
}

  self->_tileY = *((_DWORD *)a3 + 6);
  *(_BYTE *)&self->_has |= 8u;
  v3 = *((_BYTE *)a3 + 32);
  if ((v3 & 0x10) == 0)
  {
LABEL_5:
    if ((v3 & 1) == 0) {
      return;
    }
LABEL_11:
    self->_secKey = *((void *)a3 + 1);
    *(_BYTE *)&self->_has |= 1u;
    return;
  }

    sub_1012337A8(v6);
  }

  *a2 = v7;
  return v5;
}

  sub_1001BA1BC(v17);
}

  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_10035D90C;
  aBlock[3] = &unk_101834328;
  aBlock[5] = a4;
  aBlock[6] = a1;
  aBlock[4] = a3;
  sub_10035D7F0(a1 + 192, (__int128 *)(a1 + 217), aBlock);
}

  *a2 = v7;
  return v5;
}

  *a2 = v7;
  return v5;
}

  *a2 = v7;
  return v5;
}

      v0 = 0LL;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
      int v7 = 2940500222LL;
      goto LABEL_53;
    case 26:
      v15 = 2806282494LL;
      goto LABEL_69;
    case 29:
      v12 = 24577;
      goto LABEL_64;
    case 30:
    case 31:
    case 32:
      v12 = 30721;
LABEL_64:
      v0 = v12 | 0x21400000u;
      break;
    case 33:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 240:
    case 241:
      v3 = 762;
      goto LABEL_15;
    case 34:
    case 154:
    case 155:
    case 156:
    case 157:
    case 188:
    case 189:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 242:
    case 243:
      v3 = 6906;
LABEL_15:
      v0 = v3 | 0x31460000u;
      break;
    case 35:
    case 36:
    case 64:
    case 65:
      int v8 = 30922;
      goto LABEL_27;
    case 39:
    case 42:
      v0 = 0x28011654E00ELL;
      break;
    case 44:
      int v8 = 24826;
LABEL_27:
      v0 = v8 | 0x21440000u;
      break;
    case 45:
      v0 = 558135546LL;
      break;
    case 46:
    case 62:
    case 161:
      uint64_t v5 = 24826;
      goto LABEL_49;
    case 47:
    case 63:
      uint64_t v5 = 30970;
      goto LABEL_49;
    case 48:
    case 186:
      v0 = 826598138LL;
      break;
    case 49:
    case 134:
    case 135:
    case 136:
    case 137:
    case 187:
    case 190:
    case 202:
      uint64_t v5 = -1286;
      goto LABEL_49;
    case 50:
    case 51:
      int v6 = 0x28015654E00ELL;
      goto LABEL_70;
    case 54:
    case 55:
      int v7 = 3211147518LL;
LABEL_53:
      int v9 = v7 & 0xFFFF0000FFFFFFFFLL | 0x2900000000LL;
      goto LABEL_54;
    case 56:
    case 57:
    case 58:
    case 59:
      int v9 = 0x8029BF4638FELL;
LABEL_54:
      v0 = v9 & 0xFFFFFFFFFFFFLL | 0x101000000000000LL;
      break;
    case 60:
    case 61:
    case 196:
      v0 = 0x200000000LL;
      break;
    case 66:
    case 67:
    case 74:
    case 75:
      int v6 = 0x24355E54E00ELL;
      goto LABEL_70;
    case 68:
    case 69:
    case 71:
    case 72:
      unsigned int v10 = 0x1218029BF461AFELL;
      goto LABEL_61;
    case 70:
    case 73:
      unint64_t v11 = 0xC029BF4618FELL;
      goto LABEL_56;
    case 76:
    case 146:
    case 147:
      uint64_t v5 = -7942;
LABEL_49:
      v0 = v5 | 0x31440000u;
      break;
    case 77:
    case 145:
      unsigned int v10 = 826604282LL;
      goto LABEL_61;
    case 78:
    case 79:
    case 80:
    case 142:
      unint64_t v11 = 0x8029BF461AFELL;
LABEL_56:
      v0 = v11 & 0xFFFFFFFFFFFFLL | 0x121000000000000LL;
      break;
    case 82:
    case 84:
      int v6 = 0x27B55E54E00ELL;
      goto LABEL_70;
    case 86:
    case 88:
      v0 = 0x124B55E54E00ELL;
      break;
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      int v6 = 0x24B55E54E01ELL;
      goto LABEL_70;
    case 95:
    case 96:
    case 97:
    case 98:
      v0 = 0x30924B55E54E01ELL;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      v0 = 0x70934B55E54E01ELL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      v0 = 0x70934B55E55001ELL;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      uint64_t v4 = 0x24B55E54E01ELL;
      goto LABEL_12;
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 260:
      uint64_t v4 = 0x34B55E55001ELL;
LABEL_12:
      v0 = v4 & 0xFFFFFFFFFFFFLL | 0x70B000000000000LL;
      break;
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 219:
      v0 = 0x1258029BF461AFELL;
      break;
    case 144:
    case 239:
      unsigned int v10 = 826678010LL;
LABEL_61:
      v0 = v10 - 512;
      break;
    case 148:
      v0 = 0x9B746204ELL;
      break;
    case 149:
      v15 = 373686414LL;
LABEL_69:
      int v6 = v15 & 0xFFFF0000FFFFFFFFLL | 0x900000000LL;
      goto LABEL_70;
    case 150:
    case 151:
    case 152:
    case 153:
      int v6 = 0x20355E54E00ELL;
LABEL_70:
      v0 = v6 & 0xFFFFFFFFFFFFLL | 0x1000000000000LL;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
      v0 = 0x13D8029BF461AFELL;
      break;
    case 175:
    case 220:
    case 221:
    case 222:
    case 223:
      v0 = 0x13B8029BF461AFELL;
      break;
    case 178:
    case 179:
    case 180:
    case 181:
      v0 = 0x13B8029BF461BFELL;
      break;
    case 182:
    case 183:
    case 184:
    case 224:
    case 225:
      v0 = 0x13B8029BF461FFELL;
      break;
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      v0 = 277217290LL;
      break;
    default:
      break;
  }

  LOBYTE(v18[0]) = BYTE1(v0) & 1;
  sub_1012049AC(buf, "OverrideMotionCapEclipseService", (unsigned __int8 *)v18, 0);
  return v0 & 0x73FFFBFFFF7FEFFLL | ((unint64_t)buf[1] << 8);
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  int v6 = v5[8];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  a2,  a4);
  }

  *a2 = v7;
  return v5;
}

  *a2 = v7;
  return v5;
}

  PBDataWriterWriteFloatField(a3, 7LL, self->_metsHR);
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      return;
    }
LABEL_11:
    PBDataWriterWriteFloatField(a3, 9LL, self->_metsFM);
    return;
  }

  *((_DWORD *)a3 + 8) = LODWORD(self->_metsHR);
  *((_BYTE *)a3 + 52) |= 2u;
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      return;
    }
LABEL_11:
    *((_DWORD *)a3 + 7) = LODWORD(self->_metsFM);
    *((_BYTE *)a3 + 52) |= 1u;
    return;
  }

  self->_metsHR = *((float *)a3 + 8);
  *(_BYTE *)&self->_has |= 2u;
  v3 = *((_BYTE *)a3 + 52);
  if ((v3 & 4) == 0)
  {
LABEL_5:
    if ((v3 & 1) == 0) {
      return;
    }
LABEL_11:
    self->_metsFM = *((float *)a3 + 7);
    *(_BYTE *)&self->_has |= 1u;
    return;
  }

      *(void *)v18 = **(void **)v18;
      int v9 = *(const void ***)v16;
      unsigned int v10 = *a2;
      v13 = *a3;
      if (*a3 == *a4) {
        goto LABEL_11;
      }
    }

    uint64_t result = sub_1000B9764(*a5, (unsigned __int8 *)(*(void *)v16 + 16LL), *(void *)v16 + 16LL);
    a5[1] = (uint64_t)result;
    v17 = (unsigned __int8 *)(a5 + 1);
    v18 = v16;
LABEL_8:
    *(void *)v17 = *(void *)result;
    goto LABEL_9;
  }

  *a2 = v7;
  return v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  int v6 = v5[8];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 17),  v4,  a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 24),  v4,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  int v6 = v5[8];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }

  int v7 = *(void *)(v5 + 16);
  if (!v7) {
    int v7 = *(void *)(qword_1019A13E8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    goto LABEL_15;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  int v6 = v5[8];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }

  *a2 = v7;
  return v5;
}

  (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  if (!v1) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  goto LABEL_6;
}

  return result;
}

  sub_1000085FC((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  int v7 = v9[0];
  v9[0] = 0LL;
  sub_100700AE8((uint64_t)v9, 0LL);
  return v7;
}

  *a2 = v7;
  return v5;
}

  *a2 = v7;
  return v5;
}

        int v8 = v10;
        if (!v10) {
          goto LABEL_10;
        }
      }

      goto LABEL_8;
    }
  }

        int v8 = v10;
        if (!v10) {
          goto LABEL_10;
        }
      }

      goto LABEL_8;
    }
  }

  int v6 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 68289282;
    int v9 = 0;
    unsigned int v10 = 2082;
    unint64_t v11 = "";
    v12 = 1026;
    v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Fence: isFenceAuthorized, isAuthorized:%{public}hhd}",  (uint8_t *)&v8,  0x18u);
  }

  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 40),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 24),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
  uint64_t v5 = *(_DWORD *)(v4 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(v4 + 40),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(float *)(v5 + 20),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v4,  *(float *)(v5 + 32),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 28),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 32),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    goto LABEL_13;
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  int v7 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v17) = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLAS, received early escalation, current fsm state, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + 24);
    v14 = 67109120;
    LODWORD(v15) = v10;
    unint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS, received early escalation, current fsm state, %d",  &v14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::checkAndDisableEarlyDetection(const CLWorkoutPredictorActivity &)",  "%s\n",  v11);
  }

  *(double *)(a1 + 512) = v4;
  *(_BYTE *)(a1 + 520) = 1;
  sub_100A78754(a1, 1);
  return v2 == 720912;
}

  if ((*(_BYTE *)&v10 & 4) != 0)
  {
    *((_DWORD *)v8 + 4) = self->_channel;
    *((_BYTE *)v8 + 52) |= 4u;
    if ((*(_BYTE *)&self->_has & 0x20) == 0) {
      return v8;
    }
    goto LABEL_11;
  }

  if ((*(_BYTE *)&v10 & 0x20) != 0)
  {
LABEL_11:
    *((_DWORD *)v8 + 10) = self->_pnoffset;
    *((_BYTE *)v8 + 52) |= 0x20u;
  }

  return v8;
}

  int v6 = 0LL;
LABEL_10:
  int v7 = -[ALSLocation hash](self->_location, "hash");
  if ((*(_BYTE *)&self->_has & 0x80) != 0)
  {
    int v8 = 2654435761LL * self->_zoneid;
    if ((*(_BYTE *)&self->_has & 1) == 0)
    {
LABEL_12:
      int v9 = 0LL;
      if ((*(_BYTE *)&self->_has & 4) != 0) {
        goto LABEL_13;
      }
LABEL_17:
      unsigned int v10 = 0LL;
      if ((*(_BYTE *)&self->_has & 0x20) != 0) {
        goto LABEL_14;
      }
LABEL_18:
      unint64_t v11 = 0LL;
      return v4 ^ v3 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v7;
    }
  }

  else
  {
    int v8 = 0LL;
    if ((*(_BYTE *)&self->_has & 1) == 0) {
      goto LABEL_12;
    }
  }

  int v9 = 2654435761LL * self->_bandclass;
  if ((*(_BYTE *)&self->_has & 4) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v10 = 2654435761LL * self->_channel;
  if ((*(_BYTE *)&self->_has & 0x20) == 0) {
    goto LABEL_18;
  }
LABEL_14:
  unint64_t v11 = 2654435761LL * self->_pnoffset;
  return v4 ^ v3 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v7;
}

  uint64_t v5 = 0LL;
LABEL_10:
  if ((*(_BYTE *)&self->_has & 0x20) != 0) {
    int v6 = 2654435761LL * self->_score;
  }
  else {
    int v6 = 0LL;
  }
  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
    int v7 = 2654435761LL * self->_reach;
  }
  else {
    int v7 = 0LL;
  }
  if ((*(_BYTE *)&self->_has & 4) != 0) {
    int v8 = 2654435761LL * self->_infoMask;
  }
  else {
    int v8 = 0LL;
  }
  return (2654435761LL * self->_longitude) ^ (2654435761LL * self->_latitude) ^ (2654435761LL * self->_accuracy) ^ v2 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

  int v6 = 0LL;
LABEL_10:
  int v7 = -[ALSLocation hash](self->_location, "hash");
  if ((*(_BYTE *)&self->_has & 0x20) != 0)
  {
    int v8 = 2654435761LL * self->_uarfcn;
    if ((*(_BYTE *)&self->_has & 8) != 0) {
      goto LABEL_12;
    }
LABEL_14:
    int v9 = 0LL;
    return v4 ^ v3 ^ v5 ^ v6 ^ v8 ^ v9 ^ v7;
  }

  int v8 = 0LL;
  if ((*(_BYTE *)&self->_has & 8) == 0) {
    goto LABEL_14;
  }
LABEL_12:
  int v9 = 2654435761LL * self->_pid;
  return v4 ^ v3 ^ v5 ^ v6 ^ v8 ^ v9 ^ v7;
}

  *a2 = v5;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 24),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 26),  a2,  a4);
  }

  int v7 = *(void *)(v5 + 24);
  if (!v7) {
    int v7 = *(void *)(qword_1019A1E88 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    goto LABEL_15;
  }

  *a2 = v7;
  return v5;
}

    uint64_t v5 = ".unk";
    return sub_1010DDBC0(a2, v5);
  }

  if (v4 == 256)
  {
    uint64_t v5 = ".lz4";
    return sub_1010DDBC0(a2, v5);
  }

  if (v4 != 517) {
    goto LABEL_9;
  }
  uint64_t v5 = ".zlib";
  return sub_1010DDBC0(a2, v5);
}

  sub_1000085FC((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  int v7 = v9[0];
  v9[0] = 0LL;
  sub_100ECAE38((uint64_t)v9, 0LL);
  return v7;
}

        v9 += 88LL;
        if (v9 == v10) {
          goto LABEL_16;
        }
      }

      sub_100ED09D4(v7, (uint64_t *)v12);
LABEL_8:
      *(void *)buf = *(void *)v9;
      sub_100BCD0E0((uint64_t)v7, buf, buf, v9);
      ++v11;
      goto LABEL_9;
    }

    goto LABEL_15;
  }

  sub_100BCD504(a1 + 8);
  v13 = *(void *)(a2 + 8);
  v14 = *(uint64_t **)(a2 + 16);
  if ((uint64_t *)v13 == v14)
  {
LABEL_15:
    unint64_t v11 = 0LL;
    goto LABEL_16;
  }

  unint64_t v11 = 0LL;
  v15 = (uint64_t *)v13;
  do
  {
    v16 = *v15;
    v15 += 11;
    *(void *)buf = v16;
    sub_100BCD0E0((uint64_t)v7, buf, buf, v13);
    ++v11;
    v13 = (uint64_t)v15;
  }

  while (v15 != v14);
LABEL_16:
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10188AA60);
  }
  v17 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134349824;
    *(void *)&buf[4] = v8;
    v31 = 2050;
    v32 = 0x2E8BA2E8BA2E8BA3LL * (v6 >> 3);
    v33 = 2050;
    v34 = v11;
    v35 = 2050;
    v36 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Adding scanned,pre,%{public}zu,input,%{public}zu,updated,%{public}zu,result,%{public}zu",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10188AA60);
    }
    unsigned int v19 = *(void *)(a1 + 32);
    v22 = 134349824;
    v23 = v8;
    v24 = 2050;
    v25 = 0x2E8BA2E8BA2E8BA3LL * (v6 >> 3);
    v26 = 2050;
    v27 = v11;
    v28 = 2050;
    v29 = v19;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Adding scanned,pre,%{public}zu,input,%{public}zu,updated,%{public}zu,result,%{public}zu",  &v22,  42);
    v21 = (char *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiScanAggregator::addScanResult(const CFAbsoluteTime, const CLWifiService_Type::ScanResult &)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  *a2 = v7;
  return v5;
}

  int v6 = 0LL;
LABEL_10:
  int v7 = -[ALSLocation hash](self->_location, "hash");
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    int v8 = 2654435761LL * self->_nrarfcn;
  }
  else {
    int v8 = 0LL;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v8 ^ v7;
}

  *a2 = v7;
  return v5;
}

  sub_1000085FC((uint64_t **)a1, (uint64_t)v4, v6, v8);
  return v8;
}

  v2 = 0;
LABEL_10:
  if (v2 != *result)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101898100);
    }
    v3 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
    {
      sub_101065EB8(v2, __p);
      uint64_t v4 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "CLWorkoutEffortEstimator, selecting %s model",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101898100);
      }
      uint64_t v5 = qword_1019347E8;
      sub_101065EB8(v2, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_buf = &buf;
      }
      else {
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      unsigned int v10 = 136315138;
      unint64_t v11 = p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v5,  1LL,  "CLWorkoutEffortEstimator, selecting %s model",  (const char *)&v10);
      int v8 = v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortEstimator::updateModelType(const CMWorkoutType)",  "%s\n",  (const char *)v8);
      if (v8 != __p) {
        free(v8);
      }
    }

    __asm { BR              X10 }
  }

  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 5u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0x186A2u);
  uint64_t v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0x186A2u);
  uint64_t v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0x186A2u);
  uint64_t v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 5u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x68u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xCAu);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  }

  if (a1 != a2) {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) |= 2u;
    *(_DWORD *)(a1 + 40) = v10;
  }

  return a1;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
    sub_10004C5F8( (char *)(a1 + 152),  *(char **)(a2 + 152),  *(void *)(a2 + 160),  (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
    sub_10004C5F8( (char *)(a1 + 176),  *(char **)(a2 + 176),  *(void *)(a2 + 184),  (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
    sub_10004C5F8( (char *)(a1 + 104),  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  }

  return a1;
}

  if (a1 != a2) {
    sub_10004C5F8( v3,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 16), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  }

  int v9 = *(void *)(a2 + 104);
  if (v9)
  {
    unsigned int v10 = operator new(0x28uLL);
    unint64_t v11 = sub_101151ABC((uint64_t)v10, v9);
    v12 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v13;
    if (v12) {
      (*(void (**)(uint64_t, double))(*(void *)v12 + 8LL))(v12, v11);
    }
  }

  v14 = *(void *)(a2 + 112);
  if (v14)
  {
    v15 = operator new(0x28uLL);
    v16 = sub_101151ABC((uint64_t)v15, v14);
    v17 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = v18;
    if (v17) {
      (*(void (**)(uint64_t, double))(*(void *)v17 + 8LL))(v17, v16);
    }
  }

  unsigned int v19 = *(_WORD *)(a2 + 168);
  if ((v19 & 0x10) != 0)
  {
    v24 = *(_DWORD *)(a2 + 144);
    *(_WORD *)(a1 + 168) |= 0x10u;
    *(_DWORD *)(a1 + 144) = v24;
    unsigned int v19 = *(_WORD *)(a2 + 168);
    if ((v19 & 0x200) == 0)
    {
LABEL_17:
      if ((v19 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }

  else if ((*(_WORD *)(a2 + 168) & 0x200) == 0)
  {
    goto LABEL_17;
  }

  v25 = *(_BYTE *)(a2 + 164);
  *(_WORD *)(a1 + 168) |= 0x200u;
  *(_BYTE *)(a1 + 164) = v25;
  unsigned int v19 = *(_WORD *)(a2 + 168);
  if ((v19 & 4) == 0)
  {
LABEL_18:
    if ((v19 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  unsigned int v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 0x400) != 0)
  {
    v14 = *(_BYTE *)(a2 + 92);
    *(_WORD *)(a1 + 96) |= 0x400u;
    *(_BYTE *)(a1 + 92) = v14;
    unsigned int v10 = *(_WORD *)(a2 + 96);
    if ((v10 & 0x20) == 0)
    {
LABEL_13:
      if ((v10 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }

  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_13;
  }

  v15 = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 96) |= 0x20u;
  *(_DWORD *)(a1 + 72) = v15;
  unsigned int v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 0x40) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_DWORD *)(a1 + 48) = v10;
  }

  return a1;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  return a1;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 21), 5u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }

uint64_t sub_100065400(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }

      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }

      else
      {
        unsigned int v4 = 2;
      }
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      uint64_t v5 = v4 + 5;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24),  a2)
         + 1;
      int v3 = *(_DWORD *)(a1 + 40);
    }

    if ((v3 & 0x10) != 0)
    {
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v7 & 0x80000000) != 0)
      {
        int v8 = 11;
      }

      else if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      }

      else
      {
        int v8 = 2;
      }

      uint64_t v5 = (v8 + v5);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_1000654CC(uint64_t a1, void *lpsrc)
{
}

void sub_100065518(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100064EA8(a1, a2);
  }

uint64_t sub_100065558()
{
  return 1LL;
}

float sub_100065560(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    int v2 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v2;
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v3;
    float result = *(float *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(float *)(a2 + 20) = result;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = v5;
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v5;
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v5;
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = v5;
  }

  return result;
}

void *sub_1000655DC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.WiFiRssi");
}

float sub_1000655EC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  1392LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      float result = *(float *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(float *)(a1 + 8) = result;
      int v6 = *(_DWORD *)(a2 + 24);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }

    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }

    float result = *(float *)(a2 + 12);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(float *)(a1 + 12) = result;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0) {
      return result;
    }
LABEL_7:
    float result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(float *)(a1 + 16) = result;
  }

  return result;
}

void sub_1000656BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000656D4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A5B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000656E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A5B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_100065704()
{
  float result = operator new(0x20uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_10181A5B8;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t sub_100065730(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)(result + 16) = 0;
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100065748( _DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_27;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v14) & 1) == 0) {
          return 0LL;
        }
        a1[2] = v14;
        a1[6] |= 1u;
        int v9 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 21)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0) {
            return 0LL;
          }
          a1[3] = v13;
          a1[6] |= 2u;
          unsigned int v10 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 29)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }

      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }

      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }

      int v8 = TagFallback & 7;
      if (v8 == 5) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1LL;
      }
    }

uint64_t sub_100065900( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if ((v5 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(float *)(result + 8),  a3);
    int v5 = *(_DWORD *)(v4 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v4 + 16),  a3);
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(float *)(v4 + 12),  a3);
  if ((*(_DWORD *)(v4 + 24) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v4 + 16),  a3);
  }
  return result;
}

uint64_t sub_100065978(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    unsigned int v2 = ((int)((_DWORD)v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0) {
      v2 += 5;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 5;
    }
    else {
      uint64_t v1 = v2;
    }
  }

  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

float sub_1000659B0(uint64_t a1, void *lpsrc)
{
  return sub_1000655EC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1000659FC()
{
  return 1LL;
}

void *sub_100065A04@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.Direction");
}

uint64_t sub_100065A14(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10181A630;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 6LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 40) = 1LL;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0LL;
  sub_100065A7C(a1, a2);
  return a1;
}

void sub_100065A68(_Unwind_Exception *a1)
{
}

float sub_100065A7C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  1813LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 56);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 56) |= 1u;
      *(_DWORD *)(a1 + 16) = v7;
      int v6 = *(_DWORD *)(a2 + 56);
    }

    if ((v6 & 2) != 0)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 56) |= 2u;
      *(void *)(a1 + 8) = v5;
      int v6 = *(_DWORD *)(a2 + 56);
      if ((v6 & 4) == 0)
      {
LABEL_9:
        if ((v6 & 8) == 0) {
          goto LABEL_10;
        }
        goto LABEL_19;
      }
    }

    else if ((v6 & 4) == 0)
    {
      goto LABEL_9;
    }

    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 56) |= 4u;
    *(_DWORD *)(a1 + 20) = v5;
    int v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 8) == 0)
    {
LABEL_10:
      if ((v6 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }

LABEL_27:
    int v12 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_DWORD *)(a1 + 40) = v12;
    int v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x40) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    *(_DWORD *)(a1 + 44) = v5;
    int v6 = *(_DWORD *)(a2 + 56);
LABEL_14:
    if ((v6 & 0x80) != 0)
    {
      LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) |= 0x80u;
      *(_DWORD *)(a1 + 48) = v5;
    }
  }

  return *(float *)&v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 68),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

    *(void *)buf = &v14;
    sub_10003706C((void ***)buf);
    *(void *)buf = &v16;
    sub_100050CAC((void ***)buf);
  }

  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }

  if (v31 && v33)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181FA48);
    }
    int v8 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = operator new(0x28uLL);
      v20 = v9;
      v21 = xmmword_1012C8460;
      *uint64_t v9 = 0u;
      v9[1] = 0u;
      *(void *)((char *)v9 + 29) = 0LL;
      sub_10000AE6C(a1, v9);
      if (v21 >= 0) {
        unsigned int v10 = &v20;
      }
      else {
        unsigned int v10 = v20;
      }
      if (!v33) {
        sub_100036CD8();
      }
      unint64_t v11 = operator new(0x28uLL);
      __p = v11;
      unsigned int v19 = xmmword_1012C8460;
      *unint64_t v11 = 0u;
      v11[1] = 0u;
      *(void *)((char *)v11 + 29) = 0LL;
      sub_10000AE6C((uint64_t)&v32, v11);
      if (v19 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (!v31) {
        sub_100036CD8();
      }
      unsigned int v13 = (char *)operator new(0x28uLL);
      *(void *)(v13 + 29) = 0LL;
      *(_OWORD *)unsigned int v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      sub_10000AE6C((uint64_t)&v30, v13);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      v24 = 2082;
      v25 = v10;
      v26 = 2082;
      v27 = p_p;
      v28 = 2082;
      v29 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationRecorder: adding label for recording event, Recording UUID:%{public, location:escape_only}s, Trigger UUID:%{public, location:escape_only}s, Label UUID:%{public, location:escape_only}s}",  buf,  0x30u);
      operator delete(v13);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v21) < 0) {
        operator delete(v20);
      }
    }

    *(void *)buf = *(void *)(a2 + 8);
    char v14 = *(void *)(a1 + 120);
    if (v14 >= *(void *)(a1 + 128))
    {
      v15 = sub_10011AC5C((uint64_t *)(a1 + 112), (uint64_t *)&v32, (uint64_t)&v22, (uint64_t *)&v30, (double *)buf);
    }

    else
    {
      sub_10011AD70(a1 + 128, *(void *)(a1 + 120), (uint64_t *)&v32, (uint64_t)&v22, (uint64_t *)&v30, (double *)buf);
      v15 = v14 + 64;
      *(void *)(a1 + 120) = v14 + 64;
    }

    *(void *)(a1 + 120) = v15;
  }

  v16 = *(void *)(a1 + 96);
  if (v16 >= *(void *)(a1 + 104))
  {
    v17 = sub_10011B814( (uint64_t *)(a1 + 88),  (uint64_t *)a1,  (double *)(a1 + 16),  a1 + 24,  a2,  (uint64_t)&v32,  (uint64_t *)(a1 + 48));
  }

  else
  {
    sub_10011B960( a1 + 104,  *(void *)(a1 + 96),  (uint64_t *)a1,  (double *)(a1 + 16),  a1 + 24,  a2,  (uint64_t)&v32,  (uint64_t *)(a1 + 48));
    v17 = v16 + 240;
    *(void *)(a1 + 96) = v16 + 240;
  }

  *(void *)(a1 + 96) = v17;
}

  uint64_t result = *(double *)(a2 + 16);
  *(_DWORD *)(a1 + 96) |= 8u;
  *(double *)(a1 + 16) = result;
  int v6 = *(_DWORD *)(a2 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_29:
    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 96) |= 0x20u;
    *(double *)(a1 + 32) = result;
    int v6 = *(_DWORD *)(a2 + 96);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_30;
  }

  if ((v3 & 0x3FC00) != 0)
  {
    unsigned int v13 = v5 + 9;
    if ((v3 & 0x400) == 0) {
      unsigned int v13 = v5;
    }
    if ((v3 & 0x800) != 0) {
      uint64_t v5 = v13 + 9;
    }
    else {
      uint64_t v5 = v13;
    }
    if ((v3 & 0x1000) != 0)
    {
      char v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
      if ((v14 & 0x80000000) != 0)
      {
        v15 = 11;
      }

      else if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
        uint64_t v3 = *(_DWORD *)(a1 + 168);
      }

      else
      {
        v15 = 2;
      }

      v5 += v15;
    }

    if ((v3 & 0x2000) != 0)
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 160);
      if ((v16 & 0x80000000) != 0)
      {
        v17 = 11;
      }

      else if (v16 >= 0x80)
      {
        v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
        uint64_t v3 = *(_DWORD *)(a1 + 168);
      }

      else
      {
        v17 = 2;
      }

      v5 += v17;
    }

    if ((v3 & 0x4000) != 0) {
      v5 += 9;
    }
  }

  v18 = *(_DWORD *)(a1 + 72);
  unsigned int v19 = v18 + v5;
  if (v18 >= 1)
  {
    v20 = 0LL;
    do
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 64) + 8 * v20),  a2);
      v22 = (int)v21;
      else {
        v23 = 1;
      }
      v19 += v22 + v23;
      ++v20;
    }

    while (v20 < *(int *)(a1 + 72));
  }

  v24 = *(_DWORD *)(a1 + 96);
  v25 = v24 + v19;
  if (v24 >= 1)
  {
    v26 = 0LL;
    do
    {
      v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 88) + 8 * v26),  a2);
      v28 = (int)v27;
      else {
        v29 = 1;
      }
      v25 += v28 + v29;
      ++v26;
    }

    while (v26 < *(int *)(a1 + 96));
  }

  v30 = *(_DWORD *)(a1 + 120);
  v31 = (v30 + v25);
  if (v30 >= 1)
  {
    v32 = 0LL;
    do
    {
      v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 112)
                                                                                         + 8 * v32),
                                                                               a2);
      v34 = (int)v33;
      else {
        v35 = 1;
      }
      v31 = (v34 + v31 + v35);
      ++v32;
    }

    while (v32 < *(int *)(a1 + 120));
  }

  *(_DWORD *)(a1 + 164) = v31;
  return v31;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  int v12 = *(void *)(v5 + 48);
  if (!v12) {
    int v12 = *(void *)(qword_1019A0AF0 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v12,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 92) |= 0x10u;
  *(double *)(a1 + 40) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x40u;
  *(double *)(a1 + 56) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 92) |= 0x80u;
    *(double *)(a1 + 64) = result;
    int v6 = *(_DWORD *)(a2 + 92);
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 92) |= 0x10u;
  *(double *)(a1 + 40) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x40u;
  *(double *)(a1 + 56) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 92) |= 0x80u;
    *(double *)(a1 + 64) = result;
    int v6 = *(_DWORD *)(a2 + 92);
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 92) |= 0x10u;
  *(double *)(a1 + 40) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x40u;
  *(double *)(a1 + 56) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 92) |= 0x80u;
    *(double *)(a1 + 64) = result;
    int v6 = *(_DWORD *)(a2 + 92);
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 92) |= 0x10u;
  *(double *)(a1 + 40) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x40u;
  *(double *)(a1 + 56) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 92) |= 0x80u;
    *(double *)(a1 + 64) = result;
    int v6 = *(_DWORD *)(a2 + 92);
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 92) |= 0x10u;
  *(double *)(a1 + 40) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x40u;
  *(double *)(a1 + 56) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 92) |= 0x80u;
    *(double *)(a1 + 64) = result;
    int v6 = *(_DWORD *)(a2 + 92);
  }

  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 92) |= 0x10u;
  *(double *)(a1 + 40) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t result = *(double *)(a2 + 56);
  *(_DWORD *)(a1 + 92) |= 0x40u;
  *(double *)(a1 + 56) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 92) |= 0x80u;
    *(double *)(a1 + 64) = result;
    int v6 = *(_DWORD *)(a2 + 92);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 40),  a3);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  uint64_t result = *(float *)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(float *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_12:
  if ((v6 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_29:
  uint64_t result = *(float *)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 0x40u;
  *(float *)(a1 + 32) = result;
  int v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x80) != 0)
  {
LABEL_14:
    uint64_t result = *(float *)(a2 + 36);
    *(_DWORD *)(a1 + 56) |= 0x80u;
    *(float *)(a1 + 36) = result;
    int v6 = *(_DWORD *)(a2 + 56);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 64),  a3);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  unint64_t v11 = *(_DWORD *)(a2 + 20);
  if (v11 >= 0x14) {
    sub_10123006C();
  }
  *(_DWORD *)(a1 + 60) |= 4u;
  *(_DWORD *)(a1 + 20) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 41),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  char v14 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(_DWORD *)(a1 + 32) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  v16 = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 56) |= 0x40u;
  *(_BYTE *)(a1 + 40) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(_BYTE *)(a2 + 41);
    *(_DWORD *)(a1 + 56) |= 0x80u;
    *(_BYTE *)(a1 + 41) = v6;
    uint64_t v5 = *(_DWORD *)(a2 + 56);
  }

  int v12 = *(_DWORD *)(a2 + 40);
  if (v12 >= 0xF) {
    sub_101230224();
  }
  *(_DWORD *)(a1 + 56) |= 8u;
  *(_DWORD *)(a1 + 40) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_30:
    *(_DWORD *)(a1 + 56) |= 0x20u;
    char v14 = *(_BYTE **)(a1 + 24);
    if (!v14)
    {
      char v14 = operator new(0x20uLL);
      v14[16] = 0;
      *(void *)char v14 = &off_101829B60;
      *((void *)v14 + 1) = 0LL;
      *((_DWORD *)v14 + 5) = 0;
      *((_DWORD *)v14 + 6) = 0;
      *(void *)(a1 + 24) = v14;
    }

    v15 = *(void *)(a2 + 24);
    if (!v15) {
      v15 = *(void *)(qword_1019A0D70 + 24);
    }
    sub_1001FB9E0((uint64_t)v14, v15);
    uint64_t v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_35;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 46),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 48),  (BOOL)a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  a2,  *(float *)(v5 + 44),  a3);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_eligibleForHealthKit),  @"eligibleForHealthKit");
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_12:
    if ((has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PBDataWriterWriteBOOLField(a3, self->_eligibleForCalorimetry, 11LL);
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_13:
    if ((has & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  *((_BYTE *)a3 + 100) = self->_eligibleForCalorimetry;
  *((_WORD *)a3 + 52) |= 0x2000u;
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_13:
    if ((has & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  *((_BYTE *)result + 101) = self->_eligibleForHealthKit;
  *((_WORD *)result + 52) |= 0x4000u;
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_12:
    if ((has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  if ((has & 0x20) != 0)
  {
    hrMax = self->_hrMax;
    v21 = -hrMax;
    if (hrMax >= 0.0) {
      v21 = self->_hrMax;
    }
    v22 = floor(v21 + 0.5);
    v23 = (v21 - v22) * 1.84467441e19;
    unsigned int v19 = 2654435761u * (unint64_t)fmod(v22, 1.84467441e19);
    if (v23 >= 0.0)
    {
      if (v23 > 0.0) {
        v19 += (unint64_t)v23;
      }
    }

    else
    {
      v19 -= (unint64_t)fabs(v23);
    }
  }

  else
  {
    unsigned int v19 = 0LL;
  }

  if ((has & 0x40) != 0)
  {
    hrMin = self->_hrMin;
    v26 = -hrMin;
    if (hrMin >= 0.0) {
      v26 = self->_hrMin;
    }
    v27 = floor(v26 + 0.5);
    v28 = (v26 - v27) * 1.84467441e19;
    v24 = 2654435761u * (unint64_t)fmod(v27, 1.84467441e19);
    if (v28 >= 0.0)
    {
      if (v28 > 0.0) {
        v24 += (unint64_t)v28;
      }
    }

    else
    {
      v24 -= (unint64_t)fabs(v28);
    }
  }

  else
  {
    v24 = 0LL;
  }

  if ((has & 0x200) != 0)
  {
    variance = self->_variance;
    v31 = -variance;
    if (variance >= 0.0) {
      v31 = self->_variance;
    }
    v32 = floor(v31 + 0.5);
    v33 = (v31 - v32) * 1.84467441e19;
    v29 = 2654435761u * (unint64_t)fmod(v32, 1.84467441e19);
    if (v33 >= 0.0)
    {
      if (v33 > 0.0) {
        v29 += (unint64_t)v33;
      }
    }

    else
    {
      v29 -= (unint64_t)fabs(v33);
    }
  }

  else
  {
    v29 = 0LL;
  }

  v62 = v18;
  if ((has & 0x10) != 0)
  {
    filteredVo2Max = self->_filteredVo2Max;
    v36 = -filteredVo2Max;
    if (filteredVo2Max >= 0.0) {
      v36 = self->_filteredVo2Max;
    }
    v37 = floor(v36 + 0.5);
    v38 = (v36 - v37) * 1.84467441e19;
    v34 = 2654435761u * (unint64_t)fmod(v37, 1.84467441e19);
    if (v38 >= 0.0)
    {
      if (v38 > 0.0) {
        v34 += (unint64_t)v38;
      }
    }

    else
    {
      v34 -= (unint64_t)fabs(v38);
    }
  }

  else
  {
    v34 = 0LL;
  }

  if ((has & 0x800) != 0) {
    v60 = 2654435761LL * self->_sessionType;
  }
  else {
    v60 = 0LL;
  }
  v64 = v9;
  if ((has & 0x4000) != 0) {
    v59 = 2654435761LL * self->_eligibleForHealthKit;
  }
  else {
    v59 = 0LL;
  }
  v61 = v19;
  if ((has & 0x2000) != 0) {
    v58 = 2654435761LL * self->_eligibleForCalorimetry;
  }
  else {
    v58 = 0LL;
  }
  v39 = v24;
  if ((has & 0x400) != 0)
  {
    v40 = 2654435761LL * self->_numWorkoutsContrToEstimate;
    if ((has & 4) != 0) {
      goto LABEL_70;
    }
LABEL_75:
    v45 = 0LL;
    goto LABEL_78;
  }

  v40 = 0LL;
  if ((has & 4) == 0) {
    goto LABEL_75;
  }
LABEL_70:
  estimatedHRResponseParam = self->_estimatedHRResponseParam;
  v42 = -estimatedHRResponseParam;
  if (estimatedHRResponseParam >= 0.0) {
    v42 = self->_estimatedHRResponseParam;
  }
  v43 = floor(v42 + 0.5);
  v44 = (v42 - v43) * 1.84467441e19;
  v45 = 2654435761u * (unint64_t)fmod(v43, 1.84467441e19);
  if (v44 >= 0.0)
  {
    if (v44 > 0.0) {
      v45 += (unint64_t)v44;
    }
  }

  else
  {
    v45 -= (unint64_t)fabs(v44);
  }

  self->_eligibleForCalorimetry = *((_BYTE *)a3 + 100);
  *(_WORD *)&self->_has |= 0x2000u;
  uint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x400) == 0)
  {
LABEL_13:
    if ((v3 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

    objc_msgSend(*(id *)(a1 + 40), "setUserRecordIDName:", objc_msgSend(*(id *)(a1 + 48), "recordName"));
  }

  if (!*(void *)(*(void *)(a1 + 40) + 216LL))
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10182DF18);
    }
    unsigned int v10 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Will attempt to initialize the sync engine if/after device has been unlocked.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10182DF18);
      }
      LOWORD(v17) = 0;
      LODWORD(v16) = 2;
      unsigned int v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Will attempt to initialize the sync engine if/after device has been unlocked.",  &v17,  v16);
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v13);
    }

    unint64_t v11 = *(void *)(*(void *)(a1 + 40) + 64LL);
    if (v11)
    {
      [*(id *)(v11 + 16) register:*(void *)(v11 + 8) forNotification:0 registrationInfo:0];
      return;
    }

    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10182DF18);
    }
    int v12 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Attempting registration when fDataProtectionClient is not initialized",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10182DF18);
      }
      LOWORD(v17) = 0;
      LODWORD(v16) = 2;
      uint64_t v5 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  16LL,  "Attempting registration when fDataProtectionClient is not initialized",  &v17,  v16,  v17);
      goto LABEL_10;
    }
  }

  v33 = __p;
  v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)__p) >> 3);
  v35 = v34 + 1;
  if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)__p) >> 3);
  if (2 * v36 > v35) {
    v35 = 2 * v36;
  }
  if (v36 >= 0x555555555555555LL) {
    v37 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    v37 = v35;
  }
  if (v37)
  {
    v38 = (char *)sub_10000701C((uint64_t)&v105, v37);
    v33 = __p;
    unsigned int v19 = v102;
  }

  else
  {
    v38 = 0LL;
  }

  v39 = (__n128 *)&v38[24 * v34];
  v20 = (unint64_t)&v38[24 * v37];
  v39->n128_f64[0] = v100;
  v39->n128_u64[1] = a2;
  v39[1].n128_u64[0] = 1LL;
  v32 = &v39[1].n128_f64[1];
  if (v19 != v33)
  {
    do
    {
      v40 = *(__n128 *)((char *)v19 - 24);
      v39[-1].n128_u64[1] = v19[-1].n128_u64[1];
      *(__n128 *)((char *)v39 - 24) = v40;
      v39 = (__n128 *)((char *)v39 - 24);
      unsigned int v19 = (__n128 *)((char *)v19 - 24);
    }

    while (v19 != v33);
    v33 = __p;
  }

  __p = v39;
  v105 = (char *)v20;
  if (v33)
  {
    operator delete(v33);
    v20 = (unint64_t)v105;
  }

  sub_100324A80((_BYTE *)a1);
}

    if (++v6 == 6) {
      break;
    }
    int v7 = v87;
    uint64_t v5 = v88;
  }

  if (!*(void *)(a1 + 304) || !*(void *)(a1 + 312))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    unsigned int v19 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "@WsbReg, No wifi interface available, #CloneMe",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_168;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    LOWORD(v93) = 0;
    v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbReg, No wifi interface available, #CloneMe",  &v93,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v20);
LABEL_176:
    goto LABEL_168;
  }

  if (a2) {
    v18 = *(_DWORD *)(a1 + 240);
  }
  else {
    v18 = 3600;
  }
  v86 = 0;
  v22 = (uint64_t *)(a1 + 64);
  v21 = *(void *)(a1 + 64);
  v23 = a1 + 64;
  if (!v21) {
    goto LABEL_92;
  }
  v24 = a1 + 64;
  do
  {
    v25 = *(_DWORD *)(v21 + 32);
    v26 = v25 < 12;
    if (v25 >= 12) {
      v27 = (uint64_t *)v21;
    }
    else {
      v27 = (uint64_t *)(v21 + 8);
    }
    if (!v26) {
      v24 = v21;
    }
    v21 = *v27;
  }

  while (*v27);
  v23 = a1 + 64;
  if ((uint64_t *)v24 == v22 || (v23 = a1 + 64, *(int *)(v24 + 32) > 12))
  {
LABEL_92:
    if (*(_DWORD *)(a1 + 236))
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      v40 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v112 = a2;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "@WsbReg, None, %{public}d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        v93 = 67240192;
        *(_DWORD *)v94 = a2;
        v80 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbReg, None, %{public}d",  &v93,  8);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v80);
      }

      sub_100339A90(a1);
      v84 = 0;
      v29 = 1;
      v24 = v23;
      v41 = "off";
      goto LABEL_99;
    }

    goto LABEL_168;
  }

  if (!*(void *)(v24 + 56))
  {
    v23 = v24;
    goto LABEL_92;
  }

  sub_100339E9C(a1);
  v28 = *(void **)(v24 + 40);
  v29 = 1;
  if (v28 != (void *)(v24 + 48))
  {
    do
    {
      v30 = *((_DWORD *)v28 + 10);
      if ((v30 - 3600) <= 0xFFFFF1F0)
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        v31 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v112 = v30;
          *(_WORD *)&v112[4] = 1026;
          *(_DWORD *)&v112[6] = 3600;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "@WsbRate, iter, %{public}d, to, %{public}d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          v93 = 67240448;
          *(_DWORD *)v94 = v30;
          *(_WORD *)&v94[4] = 1026;
          *(_DWORD *)&v94[6] = 3600;
          LODWORD(v83) = 14;
          v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbRate, iter, %{public}d, to, %{public}d",  &v93,  v83);
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v36);
        }

        v30 = 3600;
      }

      if (v30 < v18)
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        v32 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v112 = v30;
          *(_WORD *)&v112[4] = 1026;
          *(_DWORD *)&v112[6] = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "@WsbRate, iter, %{public}d, to, %{public}d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          v93 = 67240448;
          *(_DWORD *)v94 = v30;
          *(_WORD *)&v94[4] = 1026;
          *(_DWORD *)&v94[6] = v18;
          LODWORD(v83) = 14;
          v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbRate, iter, %{public}d, to, %{public}d",  &v93,  v83);
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v37);
        }

        v18 = v30;
      }

      v33 = *((_BYTE *)v28 + 45) != 0;
      v34 = (void *)v28[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (void *)*v34;
        }

        while (v34);
      }

      else
      {
        do
        {
          v35 = (void *)v28[2];
          v60 = *v35 == (void)v28;
          v28 = v35;
        }

        while (!v60);
      }

      v29 &= v33;
      v28 = v35;
    }

    while (v35 != (void *)(v24 + 48));
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  v38 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v112 = v18;
    *(_WORD *)&v112[4] = 1026;
    *(_DWORD *)&v112[6] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "@WsbRate, postIter, rate, %{public}d, rollover, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    v93 = 67240448;
    *(_DWORD *)v94 = v18;
    *(_WORD *)&v94[4] = 1026;
    *(_DWORD *)&v94[6] = v29;
    LODWORD(v83) = 14;
    v82 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WsbRate, postIter, rate, %{public}d, rollover, %{public}d",  &v93,  v83);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v82);
  }

  v39 = *(_DWORD *)(a1 + 240);
  if (v18 == 3600)
  {
    if (v39 <= 3599)
    {
      v84 = 0;
      v86 = 1;
      goto LABEL_142;
    }

    if (*(unsigned __int8 *)(a1 + 245) == v29)
    {
      v84 = 0;
      v86 = 2;
      v41 = "skip";
    }

    else
    {
      v86 = 4;
      sub_10033A0D8(a1, v29, 1);
      v84 = 0;
      v41 = "standard";
    }
  }

  else
  {
    v84 = v18;
    v60 = v18 == v39;
    if (v18 == v39) {
      v61 = 3;
    }
    else {
      v61 = 5;
    }
    v86 = v61;
    if (v60)
    {
      v41 = "skip";
      v84 = v18;
    }

    else
    {
LABEL_142:
      sub_10033A0D8(a1, v29, v18 == 3600);
      v62 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
      v63 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v84);
      v64 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v84);
      v65 = +[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 64800LL);
      [v62 setObject:v63 forKey:@"IO80211InterfaceBGScanDynamicProfileStartTime"];
      [v62 setObject:v64 forKey:@"IO80211InterfaceBGScanDynamicProfileScanFreq"];
      [v62 setObject:v65 forKey:@"IO80211InterfaceBGScanDynamicProfileDuration"];
      WiFiDeviceClientSetProperty(*(void *)(a1 + 312), @"IO80211InterfaceBGDynamicProfileParams", v62);
      v41 = "dynamic";
    }
  }

  *(_DWORD *)(a1 + 240) = v18;
  *(_BYTE *)(a1 + 245) = v29;
LABEL_99:
  v42 = *(unsigned __int8 *)(a1 + 244);
  if (v42 == a2 && !a3)
  {
LABEL_133:
    v58 = 0;
    v49 = 0;
    v44 = v24;
    if ((a2 & 1) == 0) {
      goto LABEL_154;
    }
    goto LABEL_134;
  }

  v43 = *v22;
  if (!*v22) {
    goto LABEL_132;
  }
  v44 = a1 + 64;
  do
  {
    v45 = *(_DWORD *)(v43 + 32);
    v46 = v45 < 12;
    if (v45 >= 12) {
      v47 = (uint64_t *)v43;
    }
    else {
      v47 = (uint64_t *)(v43 + 8);
    }
    if (!v46) {
      v44 = v43;
    }
    v43 = *v47;
  }

  while (*v47);
  if ((uint64_t *)v44 == v22)
  {
LABEL_132:
    v24 = a1 + 64;
    goto LABEL_133;
  }

  v24 = a1 + 64;
  if (!*(void *)(v44 + 56))
  {
    v24 = v44;
    goto LABEL_133;
  }

  v48 = *(void **)(v44 + 40);
  if (v48 == (void *)(v44 + 48))
  {
    v58 = 0;
    v49 = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_153;
    }
    v49 = 0;
LABEL_134:
    if (!a3) {
      goto LABEL_156;
    }
    v59 = v49;
    goto LABEL_162;
  }

  v49 = 0;
  do
  {
    if (a3)
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      v50 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        v51 = v48[6];
        v52 = *((unsigned __int8 *)v48 + 44);
        *(_DWORD *)buf = 136446466;
        *(void *)v112 = v51;
        *(_WORD *)&v112[8] = 1026;
        *(_DWORD *)v113 = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "@WsbActive, recheck, %{public}s, %{public}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        v55 = v48[6];
        v56 = *((unsigned __int8 *)v48 + 44);
        v93 = 136446466;
        *(void *)v94 = v55;
        *(_WORD *)&v94[8] = 1026;
        *(_DWORD *)v95 = v56;
        LODWORD(v83) = 18;
        v57 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WsbActive, recheck, %{public}s, %{public}d",  &v93,  v83);
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v57);
      }
    }

    if (*((_BYTE *)v48 + 44))
    {
      v58 = 1;
      v49 = 1;
      if ((a2 & 1) == 0) {
        goto LABEL_134;
      }
      goto LABEL_153;
    }

    v53 = (void *)v48[1];
    if (v53)
    {
      do
      {
        v54 = v53;
        v53 = (void *)*v53;
      }

      while (v53);
    }

    else
    {
      do
      {
        v54 = (void *)v48[2];
        v60 = *v54 == (void)v48;
        v48 = v54;
      }

      while (!v60);
    }

    v48 = v54;
  }

  while (v54 != (void *)(v44 + 48));
  v58 = 0;
  if ((a2 & 1) != 0) {
    goto LABEL_134;
  }
LABEL_153:
  v42 = *(unsigned __int8 *)(a1 + 244);
LABEL_154:
  v59 = v49;
  if (v42 != (v49 & 1) || (a3 & 1) != 0)
  {
LABEL_162:
    *(_BYTE *)(a1 + 244) = v59;
    sub_10033A5B0(a1, v49 & 1);
    v67 = 1;
    goto LABEL_163;
  }

    sub_100036CD8();
  }

  v46 = 0LL;
LABEL_21:
  v34 = objc_alloc(&OBJC_CLASS___NSError);
  v47 = -[NSError initWithDomain:code:userInfo:]( v34,  "initWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  *(void *)(a1 + 168),  0LL);
  v35 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v36 = *(void *)(a1 + 216);
  if (*(void *)(a1 + 224) != v36)
  {
    v37 = *(void *)(a1 + 240);
    v38 = (void *)(v36 + 8 * (v37 >> 8));
    v39 = *v38 + 16LL * v37;
    v40 = *(void *)(v36 + (((*(void *)(a1 + 248) + v37) >> 5) & 0x7FFFFFFFFFFFFF8LL))
        + 16LL * (*(_BYTE *)(a1 + 248) + v37);
    while (v39 != v40)
    {
      v41 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v39);
      -[NSMutableArray addObject:](v35, "addObject:", v41);

      v39 += 16LL;
      if (v39 - *v38 == 4096)
      {
        v42 = v38[1];
        ++v38;
        v39 = v42;
      }
    }
  }

  v43 = objc_msgSend( [CLMiLoServiceMetaInfo alloc],  "initWithNumClustersLearnedInModel:numRecordingTriggersAtCurrentLOI:numInputValidFingerprints:numInputValidFing erprintsLabeled:numInputValidFingerprintsUnlabeled:numFingerprintsBeforePruning:numFingerprintsAfterPruning:nu mWiFiAccessPoints:numBLESources:numUWBSources:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 256)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 260)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 264)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 272)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 268)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 276)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 280)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 284)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 288)),  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 292)));
  v44 = [[CLMiLoServiceStatus alloc] initWithServiceState:*(void *)a1 suspendReasons:v14 serviceDescriptor:v13 currentLocationOfInterestUuid:v48 currentLocationOfInterestT ype:v46 error:v47 serviceQualityInfo:v49 places:v35 metaInfo:v43];

  return v44;
}

  unsigned int v13 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 96) |= 4u;
  *(void *)(a1 + 24) = v13;
  uint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

  PBDataWriterWriteUint32Field(a3, self->_nHighCatherine, 5LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x8000) == 0)
  {
LABEL_6:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  *((_DWORD *)a3 + 15) = self->_nHighCatherine;
  *((_DWORD *)a3 + 26) |= 0x800u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x8000) == 0)
  {
LABEL_6:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  *((_DWORD *)result + 17) = self->_nLowCatherine;
  *((_DWORD *)result + 26) |= 0x2000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_5:
    if ((*(_WORD *)&has & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  self->_nHighCatherine = *((_DWORD *)a3 + 15);
  *(_DWORD *)&self->_has |= 0x800u;
  uint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x8000) == 0)
  {
LABEL_6:
    if ((v3 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  if ((has & 4) != 0)
  {
    metsWR = self->_metsWR;
    v32 = -metsWR;
    if (metsWR >= 0.0) {
      v32 = self->_metsWR;
    }
    v33 = floorf(v32 + 0.5);
    v34 = (float)(v32 - v33) * 1.8447e19;
    v35 = fmodf(v33, 1.8447e19);
    v36 = 2654435761u * (unint64_t)v35;
    if (v34 >= 0.0)
    {
      if (v34 > 0.0) {
        v30 = v36 + (unint64_t)v34;
      }
      else {
        v30 = 2654435761u * (unint64_t)v35;
      }
      if ((has & 1) == 0) {
        goto LABEL_45;
      }
    }

    else
    {
      v30 = v36 - (unint64_t)fabsf(v34);
      if ((has & 1) == 0)
      {
LABEL_45:
        v44 = 0LL;
        return (2654435761LL * isStanding) ^ v21 ^ (2654435761LL * activityType) ^ v12 ^ v23 ^ v24 ^ v29 ^ v30 ^ v44;
      }
    }
  }

  else
  {
    v30 = 0LL;
    if ((has & 1) == 0) {
      goto LABEL_45;
    }
  }

  metsFM = self->_metsFM;
  v38 = -metsFM;
  if (metsFM >= 0.0) {
    v38 = self->_metsFM;
  }
  v39 = floorf(v38 + 0.5);
  v40 = (float)(v38 - v39) * 1.8447e19;
  v41 = fmodf(v39, 1.8447e19);
  v42 = 2654435761u * (unint64_t)v41;
  v43 = v42 + (unint64_t)v40;
  if (v40 <= 0.0) {
    v43 = 2654435761u * (unint64_t)v41;
  }
  v44 = v42 - (unint64_t)fabsf(v40);
  if (v40 >= 0.0) {
    v44 = v43;
  }
  return (2654435761LL * isStanding) ^ v21 ^ (2654435761LL * activityType) ^ v12 ^ v23 ^ v24 ^ v29 ^ v30 ^ v44;
}

        CFRelease(v2);
        return v9;
      }
    }

    else
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101842918);
      }
      char v14 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning CPAS pointer is NULL.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_101842918);
        }
        v20[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "#Warning CPAS pointer is NULL.",  v20,  2);
        unsigned int v19 = (uint8_t *)v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }
    }

    uint64_t v9 = 0LL;
    goto LABEL_27;
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_101842918);
  }
  unsigned int v13 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101842918);
    }
    v20[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "#Warning CPAS data is NULL.",  v20,  2);
    v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  return 0LL;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 56),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  unsigned int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
  if (v13 >= 0x80)
  {
    char v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = a1[13];
  }

  else
  {
    char v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }

  unsigned int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
  if (v13 >= 0x80)
  {
    char v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = a1[11];
  }

  else
  {
    char v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 64),  a3);
  int v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  int v6 = v5[20];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v12 >= 0x80)
  {
    unsigned int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 36);
  }

  else
  {
    unsigned int v13 = 2;
  }

  uint64_t v4 = (v13 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_31:
    char v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    else {
      v15 = 2;
    }
    uint64_t v4 = (v15 + v4);
  }

  *(_DWORD *)(a1 + 64) |= 0x10u;
  unsigned int v13 = *(char **)(a1 + 32);
  if (!v13)
  {
    unsigned int v13 = (char *)operator new(0x28uLL);
    *(void *)unsigned int v13 = off_1018452D8;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(void *)(a1 + 32) = v13;
  }

  char v14 = *(void *)(a2 + 32);
  if (!v14) {
    char v14 = *(void *)(qword_1019A1368 + 32);
  }
  sub_1006272C4(v13, v14);
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x20) != 0) {
    goto LABEL_32;
  }
LABEL_12:
  if ((v5 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_37:
  *(_DWORD *)(a1 + 64) |= 0x40u;
  v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    v17 = operator new(0x20uLL);
    v17[1] = 0LL;
    v17[2] = 0LL;
    _BYTE *v17 = &off_1018459E0;
    *((_DWORD *)v17 + 6) = 0;
    *(void *)(a1 + 48) = v17;
  }

  v18 = *(void *)(a2 + 48);
  if (!v18) {
    v18 = *(void *)(qword_1019A1368 + 48);
  }
  sub_10062E4CC((uint64_t)v17, v18);
  if ((*(_DWORD *)(a2 + 64) & 0x80) != 0)
  {
LABEL_14:
    int v7 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 56) = v7;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[13],  a2,  a4);
  int v6 = v5[17];
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v5[15],  a2,  a4);
  }

    int v12 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 64) |= 8u;
    *(_DWORD *)(a1 + 20) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_29;
    }

  unsigned int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v13 >= 0x80)
  {
    char v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    char v14 = 2;
  }

  LODWORD(v4) = v14 + v4;
  if ((v3 & 0x20) != 0)
  {
LABEL_31:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v15 & 0x80000000) != 0)
    {
      v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      v16 = 2;
    }

    LODWORD(v4) = v16 + v4;
  }

      if (*(_DWORD *)(a1 + 156)
        && uuid_compare((const unsigned __int8 *)(a2 + 64), (const unsigned __int8 *)(a1 + 192)))
      {
        uuid_unparse((const unsigned __int8 *)(a1 + 192), out);
        if (qword_101934770 != -1) {
          dispatch_once(&qword_101934770, &stru_101848228);
        }
        unint64_t v11 = (os_log_s *)qword_101934778;
        if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(void *)(a2 + 112);
          *(_DWORD *)buf = 136380931;
          v25 = out;
          v26 = 2049;
          v27 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Estimator: Terminating session (id,%{private}s) due to new multisport workout leg starting (invalid workout type,%{private}ld).",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934770 != -1) {
            dispatch_once(&qword_101934770, &stru_101848228);
          }
          v16 = *(void *)(a2 + 112);
          unsigned int v19 = 136380931;
          v20 = out;
          v21 = 2049;
          v22 = v16;
          LODWORD(v18) = 22;
          v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator: Terminating session (id,%{private}s) due to new multisport workout leg starting (in valid workout type,%{private}ld).",  &v19,  v18);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v17);
        }

        sub_100670E5C(a1, 0);
      }

      return;
  }

  v16 = 0LL;
LABEL_30:
  (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  return v16;
}

  sub_1002F0B04(buf);
  v29 = (_BYTE *)(a1 + 65);
  v30 = sub_1002A6F64(*(uint64_t *)buf, "IgnoreVehicularSpeed", (BOOL *)(a1 + 65));
  v31 = v30;
  v32 = v42;
  if (!v42) {
    goto LABEL_31;
  }
  v33 = (unint64_t *)&v42->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_31:
    if ((v30 & 1) != 0) {
      goto LABEL_32;
    }
LABEL_43:
    *v29 = 0;
    return a1;
  }

  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if ((v31 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_32:
  if (*v29)
  {
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_1018496F0);
    }
    v35 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "ignore vehicular speed", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_1018496F0);
      }
      v40[0] = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349B8,  0LL,  "ignore vehicular speed",  v40,  v39);
      v37 = (uint8_t *)v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMonitorGps::CLMonitorGps(id<CLIntersiloUniverse>, std::shared_ptr<CLMonitorGpsInterface::External>, std::share d_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLMonitorGpsInterface::GpsReceiver>)",  "%s\n",  v36);
      if (v37 != buf) {
        free(v37);
      }
    }
  }

  return a1;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0LL;
}

  unint64_t v11 = *(void *)(v5 + 56);
  if (!v11) {
    unint64_t v11 = *(void *)(qword_1019A17B8 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v11,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    goto LABEL_33;
  }
}
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_cadence),  @"cadence");
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_13:
    if ((has & 0x2000) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_isStroller),  @"isStroller");
    if ((*(_WORD *)&self->_has & 4) == 0) {
      return v3;
    }
    goto LABEL_15;
  }

  PBDataWriterWriteDoubleField(a3, 12LL, self->_pace);
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_14:
    if ((has & 4) == 0) {
      return;
    }
LABEL_29:
    PBDataWriterWriteDoubleField(a3, 14LL, self->_hrTime);
    return;
  }

  *((void *)a3 + 4) = *(void *)&self->_pace;
  *((_WORD *)a3 + 38) |= 8u;
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_14:
    if ((has & 4) == 0) {
      return;
    }
LABEL_29:
    *((void *)a3 + 3) = *(void *)&self->_hrTime;
    *((_WORD *)a3 + 38) |= 4u;
    return;
  }

  *((void *)result + 1) = *(void *)&self->_cadence;
  *((_WORD *)result + 38) |= 1u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_13:
    if ((has & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  if ((has & 0x80) != 0)
  {
    hrConfidence = self->_hrConfidence;
    v21 = -hrConfidence;
    if (hrConfidence >= 0.0) {
      v21 = self->_hrConfidence;
    }
    v22 = floorf(v21 + 0.5);
    v23 = (float)(v21 - v22) * 1.8447e19;
    unsigned int v19 = 2654435761u * (unint64_t)fmodf(v22, 1.8447e19);
    if (v23 >= 0.0)
    {
      if (v23 > 0.0) {
        v19 += (unint64_t)v23;
      }
    }

    else
    {
      v19 -= (unint64_t)fabsf(v23);
    }
  }

  else
  {
    unsigned int v19 = 0LL;
  }

  if ((has & 0x20) != 0)
  {
    v51 = 2654435761LL * self->_gradeType;
    if ((has & 2) != 0) {
      goto LABEL_37;
    }
LABEL_42:
    v28 = 0LL;
    goto LABEL_45;
  }

  v51 = 0LL;
  if ((has & 2) == 0) {
    goto LABEL_42;
  }
LABEL_37:
  grade = self->_grade;
  v25 = -grade;
  if (grade >= 0.0) {
    v25 = self->_grade;
  }
  v26 = floor(v25 + 0.5);
  v27 = (v25 - v26) * 1.84467441e19;
  v28 = 2654435761u * (unint64_t)fmod(v26, 1.84467441e19);
  if (v27 >= 0.0)
  {
    if (v27 > 0.0) {
      v28 += (unint64_t)v27;
    }
  }

  else
  {
    v28 -= (unint64_t)fabs(v27);
  }

  self->_pace = *((double *)a3 + 4);
  *(_WORD *)&self->_has |= 8u;
  uint64_t v3 = *((_WORD *)a3 + 38);
  if ((v3 & 0x2000) == 0)
  {
LABEL_14:
    if ((v3 & 4) == 0) {
      return;
    }
LABEL_29:
    self->_hrTime = *((double *)a3 + 3);
    *(_WORD *)&self->_has |= 4u;
    return;
  }

    LOBYTE(v9) = 0;
    return v9;
  }

  if (qword_1019349A0 != -1) {
    dispatch_once(&qword_1019349A0, &stru_101865440);
  }
  v15 = (os_log_s *)qword_1019349A8;
  if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Why didn't we get a connection", buf, 2u);
  }

  uint64_t v9 = sub_1002921D0(115, 0);
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_101865440);
    }
    LOWORD(v25.val[0]) = 0;
    LODWORD(v21) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349A8,  17LL,  "Why didn't we get a connection",  &v25,  v21);
    unsigned int v19 = (uint8_t *)v18;
    sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLRoutineMonitor listener:shouldAcceptNewConnection:]", "%s\n", v18);
    if (v19 != buf) {
      free(v19);
    }
    goto LABEL_27;
  }

  return v9;
}

    *(_OWORD *)v22 = v62;
    *((void *)v22 + 2) = v63;
    v43 = v22 + 24;
LABEL_50:
    a7[1] = v43;
    return;
  }

  unint64_t v11 = *((_DWORD *)a2 + 3);
  v71 = 0LL;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  int v12 = (*(uint64_t (**)(void))(**(void **)a1 + 120LL))();
  unsigned int v13 = DWORD2(v68);
  v60 = *a2;
  v61 = *((void *)a2 + 2);
  v18 = sub_100A37618((void *)a1, &v60);
  if (v12) {
    unsigned int v19 = v13;
  }
  else {
    unsigned int v19 = 0;
  }
  if (v18 < (float)(v11 - v19))
  {
    v20 = *a2;
    *(void *)(v10 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unsigned int v10 = v20;
    sub_100A37B38((double *)a1, 0, 0LL, v14, v15, v16, v17, (uint64_t)&v62, *(double *)a2);
    v21 = (char *)a7[2];
    v22 = (char *)a7[1];
    if (v22 >= v21)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)*a7) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (_BYTE *)*a7) >> 3);
      if (2 * v25 > v24) {
        v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555LL) {
        v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        v26 = v24;
      }
      if (v26) {
        v27 = (char *)sub_10000701C((uint64_t)(a7 + 2), v26);
      }
      else {
        v27 = 0LL;
      }
      v49 = &v27[24 * v23];
      v50 = &v27[24 * v26];
      *(_OWORD *)v49 = v62;
      *((void *)v49 + 2) = v63;
      v43 = v49 + 24;
      v54 = (char *)*a7;
      v51 = (char *)a7[1];
      if (v51 == *a7) {
        goto LABEL_48;
      }
      do
      {
        v55 = *(_OWORD *)(v51 - 24);
        *(void *)(v49 - 11) = *(void *)(v51 - 11);
        *(_OWORD *)(v49 - 24) = v55;
        v49 -= 24;
        v51 -= 24;
      }

      while (v51 != v54);
LABEL_47:
      v51 = (char *)*a7;
LABEL_48:
      *a7 = v49;
      a7[1] = v43;
      a7[2] = v50;
      if (v51) {
        operator delete(v51);
      }
      goto LABEL_50;
    }

    goto LABEL_27;
  }

  uint64_t v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 40),  a2)
     + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v15 = *(_DWORD *)(a2 + 36);
      if (v15 >= 5) {
        sub_10125F8D8();
      }
      *(_DWORD *)(a1 + 64) |= 0x100u;
      *(_DWORD *)(a1 + 36) = v15;
      uint64_t v5 = *(_DWORD *)(a2 + 64);
    }

    if ((v5 & 0x200) != 0)
    {
      v16 = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 64) |= 0x200u;
      *(void *)(a1 + 40) = v16;
      uint64_t v5 = *(_DWORD *)(a2 + 64);
    }

    if ((v5 & 0x400) != 0)
    {
      v17 = *(_DWORD *)(a2 + 48);
      if (!sub_1001D2F3C(v17)) {
        sub_10125F8B0();
      }
      *(_DWORD *)(a1 + 64) |= 0x400u;
      *(_DWORD *)(a1 + 48) = v17;
      uint64_t v5 = *(_DWORD *)(a2 + 64);
    }

    if ((v5 & 0x800) != 0)
    {
      v18 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 64) |= 0x800u;
      *(_DWORD *)(a1 + 52) = v18;
      uint64_t v5 = *(_DWORD *)(a2 + 64);
    }

    if ((v5 & 0x1000) != 0)
    {
      unsigned int v19 = *(_DWORD *)(a2 + 56);
      if (v19 >= 6) {
        sub_10125F888();
      }
      *(_DWORD *)(a1 + 64) |= 0x1000u;
      *(_DWORD *)(a1 + 56) = v19;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 48),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 56),  (int)a2,  a4);
  }

  v18 = *(void *)(a1 + 32);
  unsigned int v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = v19;
  v21 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    v22 = v21;
  }
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22,  a2);
    unsigned int v19 = *(unsigned __int8 *)(v18 + 23);
    v21 = *(void *)(v18 + 8);
    uint64_t v3 = *(_DWORD *)(a1 + 56);
    v20 = *(_BYTE *)(v18 + 23);
  }

  else
  {
    v23 = 1;
  }

  if (v20 < 0) {
    unsigned int v19 = v21;
  }
  v4 += v23 + v19 + 1;
  if ((v3 & 0x10) != 0) {
    goto LABEL_36;
  }
LABEL_6:
  if ((v3 & 0x20) != 0)
  {
LABEL_40:
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if ((v26 & 0x80000000) != 0)
    {
      v27 = 11;
    }

    else if (v26 >= 0x80)
    {
      v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 56);
    }

    else
    {
      v27 = 2;
    }

    v4 += v27;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", self->_pointCount),  @"pointCount");
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_6:
    if ((*(_WORD *)&has & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  PBDataWriterWriteDoubleField(a3, 5LL, self->_hrMin);
  has = self->_has;
  if ((*(_WORD *)&has & 0x100) == 0)
  {
LABEL_7:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  *((void *)a3 + 11) = *(void *)&self->_hrMin;
  *((_DWORD *)a3 + 41) |= 0x400u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x100) == 0)
  {
LABEL_7:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  *((void *)result + 13) = self->_pointCount;
  *((_DWORD *)result + 41) |= 0x1000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_6:
    if ((*(_WORD *)&has & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  self->_hrMin = *((double *)a3 + 11);
  *(_DWORD *)&self->_has |= 0x400u;
  uint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x100) == 0)
  {
LABEL_7:
    if ((v3 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

    v37 = (void *)CLConnectionMessage::name(*a2);
    v38 = *((char *)v37 + 23);
    if (v38 < 0)
    {
      if (v37[1] != 46LL)
      {
LABEL_33:
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101876ED8);
        }
        v39 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          v40 = CLConnectionMessage::name(*a2);
          v41 = *(char *)(v40 + 23) >= 0 ? v40 : *(void *)v40;
          *(_DWORD *)buf = 68289282;
          v55 = 0;
          v56 = 2082;
          v57 = "";
          v58 = 2082;
          v59 = (uint64_t *)v41;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor unsupported message received, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101876ED8);
          }
        }

        v42 = (os_log_s *)qword_101934988;
        if (os_signpost_enabled((os_log_t)qword_101934988))
        {
          v43 = (uint64_t *)CLConnectionMessage::name(*a2);
          else {
            v44 = (uint64_t *)*v43;
          }
          *(_DWORD *)buf = 68289282;
          v55 = 0;
          v56 = 2082;
          v57 = "";
          v58 = 2082;
          v59 = v44;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor unsupported message received",  "{msg%{public}.0s:#monitor unsupported message received, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
        }

        goto LABEL_62;
      }

      v37 = (void *)*v37;
    }

    else if (v38 != 46)
    {
      goto LABEL_33;
    }

    if (memcmp(v37, "Monitor/kCLConnectionMessageMonitorUpdateEvent", 0x2EuLL)) {
      goto LABEL_33;
    }
    v51 = [v26 objectForKeyedSubscript:@"kCLConnectionMessageMonitorEventKey"];
    objc_msgSend(v24, "updateClientEvent:forIdentifier:", v51, objc_msgSend(v51, "identifier"));
LABEL_62:
    objc_msgSend( v24,  "refillAwaitingMonitoringConditions:",  objc_msgSend(v26, "objectForKeyedSubscript:", @"kCLConnectionMessageMonitorLedger"));
    return;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101876ED8);
  }
  v29 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    v30 = CLConnectionMessage::name(*a2);
    v31 = *(char *)(v30 + 23) >= 0 ? v30 : *(void *)v30;
    *(_DWORD *)buf = 68289282;
    v55 = 0;
    v56 = 2082;
    v57 = "";
    v58 = 2082;
    v59 = (uint64_t *)v31;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor received a wronly encoded message, message:%{public, location:escape_only}s}",  buf,  0x1Cu);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101876ED8);
    }
  }

  v32 = (os_log_s *)qword_101934988;
  if (os_signpost_enabled((os_log_t)qword_101934988))
  {
    v33 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      v34 = (uint64_t *)*v33;
    }
    *(_DWORD *)buf = 68289282;
    v55 = 0;
    v56 = 2082;
    v57 = "";
    v58 = 2082;
    v59 = v34;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v32,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor received a wronly encoded message",  "{msg%{public}.0s:#monitor received a wronly encoded message, message:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    v24 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      v25 = v11;
      v26 = v13;
      v27 = v14;
      v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      v47 = sub_1005B46E8((uint64_t)&v50);
      v29 = sub_1005B46E8((uint64_t)&v51);
      v30 = sub_1005B46E8((uint64_t)&v49);
      *(_DWORD *)buf = 67111424;
      *(_DWORD *)&buf[4] = v5;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v48);
      *(_WORD *)v62 = 2048;
      *(void *)&v62[2] = v28;
      char v14 = v27;
      unsigned int v13 = v26;
      unint64_t v11 = v25;
      *(_WORD *)v63 = 2048;
      *(void *)&v63[2] = v13;
      *(_WORD *)v64 = 2048;
      *(void *)&v64[2] = v25;
      *(_WORD *)v65 = 2048;
      *(void *)&v65[2] = v12;
      LOWORD(v66) = 1024;
      *(_DWORD *)((char *)&v66 + 2) = v14;
      HIWORD(v66) = 2048;
      *(void *)v67 = v47;
      *(_WORD *)&v67[8] = 2048;
      v68 = v29;
      v69 = 2048;
      v70 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, search Ar, %4u, A, %012llx,  S, %012llx, B, %012llx",  buf,  0x5Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018799C8);
      }
      v32 = qword_101934A78;
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      v34 = sub_1005B46E8((uint64_t)&v50);
      v35 = sub_1005B46E8((uint64_t)&v51);
      v36 = sub_1005B46E8((uint64_t)&v49);
      *(_DWORD *)v52 = 67111424;
      *(_DWORD *)&v52[4] = v5;
      *(_WORD *)&v52[8] = 1024;
      *(_DWORD *)&v52[10] = HIDWORD(v48);
      *(_WORD *)&v52[14] = 2048;
      *(void *)&v52[16] = v33;
      *(_WORD *)v53 = 2048;
      *(void *)&v53[2] = v13;
      *(_WORD *)v54 = 2048;
      *(void *)&v54[2] = v11;
      *(_WORD *)v55 = 2048;
      *(void *)&v55[2] = v12;
      LOWORD(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 2) = v14;
      HIWORD(v56) = 2048;
      *(void *)v57 = v34;
      *(_WORD *)&v57[8] = 2048;
      v58 = v35;
      v59 = 2048;
      v60 = v36;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v32,  2LL,  "TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, search Ar, %4u, A, %012llx,  S, %012llx, B, %012llx",  v52,  90,  v46,  v47,  v48,  v49,  v50,  v51,  *(void *)v52,  *(void *)&v52[8]);
      v38 = (char *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const TraverseD etails &, unsigned int &, unsigned int &)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }
  }

  return v5;
}

        uint64_t v3 = (char *)v3 + 1;
      }

      while (v2 != v3);
      v24 = [obj countByEnumeratingWithState:&v123 objects:v141 count:16];
      unsigned int v2 = v24;
    }

    while (v24);
  }

  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v25 = [obj countByEnumeratingWithState:&v119 objects:v140 count:16];
  if (v25)
  {
    v26 = *(void *)v120;
    do
    {
      for (i = 0LL; i != v25; i = (char *)i + 1)
      {
        if (*(void *)v120 != v26) {
          objc_enumerationMutation(obj);
        }
        v28 = *(void *)(*((void *)&v119 + 1) + 8LL * (void)i);
        v29 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        v30 = +[CLClientKeyPath clientKeyPathWithClientKey:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientKey:",  v28);
        if (objc_msgSend(v96, "objectForKeyedSubscript:", -[CLClientKeyPath bundlePath](v30, "bundlePath")))
        {
          -[CLAuthorizationDatabase removeValueForKey:atKeyPath:]( self,  "removeValueForKey:atKeyPath:",  @"isSystemService",  v30);
          -[CLAuthorizationDatabase _removeDictionaryAtKeyPath:shouldLog:]( self,  "_removeDictionaryAtKeyPath:shouldLog:",  v30,  0LL);
        }
      }

      v25 = [obj countByEnumeratingWithState:&v119 objects:v140 count:16];
    }

    while (v25);
  }

  v82 = +[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set");
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v87 = -[CLAuthorizationDatabase systemServicesMap](self, "systemServicesMap");
  obja = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v87,  "countByEnumeratingWithState:objects:count:",  &v115,  v139,  16LL);
  if (obja)
  {
    v90 = *(void *)v116;
    do
    {
      for (j = 0LL; j != obja; j = (char *)j + 1)
      {
        if (*(void *)v116 != v90) {
          objc_enumerationMutation(v87);
        }
        v32 = *(void *)(*((void *)&v115 + 1) + 8LL * (void)j);
        v33 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        v34 = (CLClientKeyPath *)-[NSMutableDictionary objectForKeyedSubscript:]( -[CLAuthorizationDatabase systemServicesMap](self, "systemServicesMap"),  "objectForKeyedSubscript:",  v32);
        if (!-[CLClientKeyPath subIdentityId](v34, "subIdentityId"))
        {
          v35 = [v96 objectForKeyedSubscript:v32];
          if (-[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v34, "clientKey")))
          {
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101879AA8);
            }
            v36 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
            {
              v37 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v34, "clientKey"));
              *(_DWORD *)buf = 68289538;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = v34;
              v137 = 2114;
              v138 = v37;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase setting up system services; the destin"
                "ation key path exists, but didn't we just remove it??, Client:%{public, location:escape_only}@, "
                "Dictionary:%{public, location:escape_only}@}",
                buf,
                0x26u);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101879AA8);
              }
            }

            v38 = (os_log_s *)qword_101934988;
            if (os_signpost_enabled((os_log_t)qword_101934988))
            {
              v39 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v34, "clientKey"));
              *(_DWORD *)buf = 68289538;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = v34;
              v137 = 2114;
              v138 = v39;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v38,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#SystemServiceSetup #AuthorizationDatabase setting up system services; the destination key path exists, "
                "but didn't we just remove it??",
                "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase setting up system services; the destin"
                "ation key path exists, but didn't we just remove it??, Client:%{public, location:escape_only}@, "
                "Dictionary:%{public, location:escape_only}@}",
                buf,
                0x26u);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101879AA8);
              }
            }

            v40 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
            {
              v41 = -[CLClientKeyPath clientKey](v34, "clientKey");
              v42 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v34, "clientKey"));
              *(_DWORD *)buf = 68289538;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = v41;
              v137 = 2114;
              v138 = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthorizationDatabaseDroppingData Removing dictionary for key, Key:%{publi c, location:escape_only}@, Dictionary:%{public, location:escape_only}@}",  buf,  0x26u);
            }

            -[NSMutableDictionary removeObjectForKey:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "removeObjectForKey:",  -[CLClientKeyPath clientKey](v34, "clientKey"));
          }

          -[CLAuthorizationDatabase setupDictionary:atKeyPath:](self, "setupDictionary:atKeyPath:", v35, v34);
          -[CLAuthorizationDatabase setBool:forKey:atKeyPath:]( self,  "setBool:forKey:atKeyPath:",  1LL,  @"isSystemService",  v34);
          -[CLAuthorizationDatabase setString:forKey:atKeyPath:]( self,  "setString:forKey:atKeyPath:",  v32,  @"BundlePath",  v34);
          [v96 removeObjectForKey:v32];
          [v82 addObject:v34];
        }
      }

      obja = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v87,  "countByEnumeratingWithState:objects:count:",  &v115,  v139,  16LL);
    }

    while (obja);
  }

  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v83 = -[CLAuthorizationDatabase systemServicesMap](self, "systemServicesMap");
  objb = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v83,  "countByEnumeratingWithState:objects:count:",  &v111,  v130,  16LL);
  if (objb)
  {
    v91 = *(void *)v112;
    do
    {
      for (k = 0LL; k != objb; k = (char *)k + 1)
      {
        if (*(void *)v112 != v91) {
          objc_enumerationMutation(v83);
        }
        v44 = *(void *)(*((void *)&v111 + 1) + 8LL * (void)k);
        v45 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        v46 = (CLClientKeyPath *)-[NSMutableDictionary objectForKeyedSubscript:]( -[CLAuthorizationDatabase systemServicesMap](self, "systemServicesMap"),  "objectForKeyedSubscript:",  v44);
        v47 = [v96 objectForKeyedSubscript:v44];
        if (-[CLClientKeyPath subIdentityId](v46, "subIdentityId"))
        {
          if (-[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v46, "clientKey")))
          {
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101879AA8);
            }
            v48 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
            {
              v49 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v46, "clientKey"));
              *(_DWORD *)buf = 68289538;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = v46;
              v137 = 2114;
              v138 = v49;
              _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase setting up system services; the destin"
                "ation key path exists, but didn't we just remove it??, Client:%{public, location:escape_only}@, "
                "Dictionary:%{public, location:escape_only}@}",
                buf,
                0x26u);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101879AA8);
              }
            }

            v50 = (os_log_s *)qword_101934988;
            if (os_signpost_enabled((os_log_t)qword_101934988))
            {
              v51 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v46, "clientKey"));
              *(_DWORD *)buf = 68289538;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = v46;
              v137 = 2114;
              v138 = v51;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v50,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#SystemServiceSetup #AuthorizationDatabase setting up system services; the destination key path exists, "
                "but didn't we just remove it??",
                "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase setting up system services; the destin"
                "ation key path exists, but didn't we just remove it??, Client:%{public, location:escape_only}@, "
                "Dictionary:%{public, location:escape_only}@}",
                buf,
                0x26u);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101879AA8);
              }
            }

            v52 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
            {
              v53 = -[CLClientKeyPath clientKey](v46, "clientKey");
              v54 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v46, "clientKey"));
              *(_DWORD *)buf = 68289538;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = v53;
              v137 = 2114;
              v138 = v54;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthorizationDatabaseDroppingData Removing dictionary for key, Key:%{publi c, location:escape_only}@, Dictionary:%{public, location:escape_only}@}",  buf,  0x26u);
            }

            -[NSMutableDictionary removeObjectForKey:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "removeObjectForKey:",  -[CLClientKeyPath clientKey](v46, "clientKey"));
          }

          -[CLAuthorizationDatabase setupDictionary:atKeyPath:](self, "setupDictionary:atKeyPath:", v47, v46);
          -[CLAuthorizationDatabase setBool:forKey:atKeyPath:]( self,  "setBool:forKey:atKeyPath:",  1LL,  @"isSystemService",  v46);
          -[CLAuthorizationDatabase setString:forKey:atKeyPath:]( self,  "setString:forKey:atKeyPath:",  v44,  @"BundlePath",  v46);
          [v96 removeObjectForKey:v44];
        }
      }

      objb = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v83,  "countByEnumeratingWithState:objects:count:",  &v111,  v130,  16LL);
    }

    while (objb);
  }

  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v55 = [v96 countByEnumeratingWithState:&v107 objects:v129 count:16];
  if (v55)
  {
    v56 = *(void *)v108;
    do
    {
      for (m = 0LL; m != v55; m = (char *)m + 1)
      {
        if (*(void *)v108 != v56) {
          objc_enumerationMutation(v96);
        }
        v58 = *(void *)(*((void *)&v107 + 1) + 8LL * (void)m);
        v59 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        v60 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithUserName:clientAnchor:anchorType:",  0LL,  v58,  112LL);
        -[CLAuthorizationDatabase setupDictionary:atKeyPath:]( self,  "setupDictionary:atKeyPath:",  [v96 objectForKeyedSubscript:v58],  v60);
        -[CLAuthorizationDatabase setBool:forKey:atKeyPath:]( self,  "setBool:forKey:atKeyPath:",  1LL,  @"isSystemService",  v60);
        -[CLAuthorizationDatabase setString:forKey:atKeyPath:]( self,  "setString:forKey:atKeyPath:",  v58,  @"BundlePath",  v60);
      }

      v55 = [v96 countByEnumeratingWithState:&v107 objects:v129 count:16];
    }

    while (v55);
  }

  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v85 = [v82 countByEnumeratingWithState:&v103 objects:v128 count:16];
  if (v85)
  {
    v84 = *(void *)v104;
    *(void *)&v61 = 68289282LL;
    v81 = v61;
    do
    {
      v62 = 0LL;
      do
      {
        if (*(void *)v104 != v84)
        {
          v63 = v62;
          objc_enumerationMutation(v82);
          v62 = v63;
        }

        v86 = v62;
        v97 = *(CLClientKeyPath **)(*((void *)&v103 + 1) + 8 * v62);
        v88 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary", v81),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v97, "clientKey"));
        v64 = [v88 objectForKeyedSubscript:@"Authorization"];
        if (v64) {
          LODWORD(v64) = objc_msgSend( objc_msgSend(v88, "objectForKeyedSubscript:", @"Authorization"),  "intValue");
        }
        v65 = (_DWORD)v64 == 1;
        objc = (_DWORD)v64 == 4;
        v66 = [v88 objectForKeyedSubscript:@"SubIdentities"];
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v67 = [v66 countByEnumeratingWithState:&v99 objects:v127 count:16];
        if (v67)
        {
          v68 = *(void *)v100;
          do
          {
            v69 = 0LL;
            do
            {
              if (*(void *)v100 != v68) {
                objc_enumerationMutation(v66);
              }
              v70 = *(void **)(*((void *)&v99 + 1) + 8LL * (void)v69);
              v71 = -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  v70);
              if ([v71 objectForKeyedSubscript:@"Authorization"])
              {
                v72 = objc_msgSend( objc_msgSend(v71, "objectForKeyedSubscript:", @"Authorization"),  "intValue");
                if (v72 == 4)
                {
                  if (qword_101934980 != -1) {
                    dispatch_once(&qword_101934980, &stru_101879AA8);
                  }
                  v74 = (os_log_s *)qword_101934988;
                  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 68289538;
                    v132 = 0;
                    v133 = 2082;
                    v134 = "";
                    v135 = 2114;
                    v136 = v97;
                    v137 = 2114;
                    v138 = v70;
                    _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase System service group contains Al lowed entity, Group:%{public, location:escape_only}@, AllowedMember:%{public, location:escape_only}@}",  buf,  0x26u);
                  }

                  objc = 1;
                }

                else if (v72 == 1)
                {
                  if (qword_101934980 != -1) {
                    dispatch_once(&qword_101934980, &stru_101879AA8);
                  }
                  v73 = (os_log_s *)qword_101934988;
                  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 68289538;
                    v132 = 0;
                    v133 = 2082;
                    v134 = "";
                    v135 = 2114;
                    v136 = v97;
                    v137 = 2114;
                    v138 = v70;
                    _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase System service group contains De nied entity, Group:%{public, location:escape_only}@, DeniedMember:%{public, location:escape_only}@}",  buf,  0x26u);
                  }

                  v65 = 1;
                }
              }

              [v71 removeObjectForKey:@"SupportedAuthorizationMask"];
              [v71 removeObjectForKey:@"Authorization"];
              v69 = (char *)v69 + 1;
            }

            while (v67 != v69);
            v67 = [v66 countByEnumeratingWithState:&v99 objects:v127 count:16];
          }

          while (v67);
        }

        if (v65)
        {
          [v88 setObject:&off_1018D4328 forKeyedSubscript:@"Authorization"];
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101879AA8);
          }
          v75 = qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            v76 = -[CLClientKeyPath bundlePath](v97, "bundlePath");
            *(_DWORD *)buf = v81;
            v132 = 0;
            v133 = 2082;
            v134 = "";
            v135 = 2114;
            v136 = v76;
            v77 = (os_log_s *)v75;
            v78 = "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase Setting system service group to Deni"
                  "ed because at least one entity was denied, Group:%{public, location:escape_only}@}";
LABEL_149:
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, v78, buf, 0x1Cu);
          }
        }

        else if (objc)
        {
          [v88 setObject:&off_1018D4388 forKeyedSubscript:@"Authorization"];
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101879AA8);
          }
          v79 = qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            v80 = -[CLClientKeyPath bundlePath](v97, "bundlePath");
            *(_DWORD *)buf = v81;
            v132 = 0;
            v133 = 2082;
            v134 = "";
            v135 = 2114;
            v136 = v80;
            v77 = (os_log_s *)v79;
            v78 = "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase Setting system service group to Allo"
                  "wed because at least one entity was allowed, and none were denied, Group:%{public, location:escape_only}@}";
            goto LABEL_149;
          }
        }

        [v88 removeObjectForKey:@"SupportedAuthorizationMask"];
        v62 = v86 + 1;
      }

      while ((id)(v86 + 1) != v85);
      v85 = [v82 countByEnumeratingWithState:&v103 objects:v128 count:16];
    }

    while (v85);
  }

    sub_100DC3F50(a1);
    if (!*(_BYTE *)(a1 + 129)) {
      *(_BYTE *)(a1 + 440) = 1;
    }
    return;
  }

  if (v5 != 4)
  {
    if (v5)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101883640);
      }
      unsigned int v13 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
      {
        char v14 = *a3;
        *(_DWORD *)buf = 67240192;
        v26 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "TileCell, unexpected, status, %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101883640);
        }
        v20 = *a3;
        v23 = 67240192;
        v24 = v20;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileCell, unexpected, status, %{public}d",  &v23,  8);
        v22 = (uint8_t *)v21;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientM anager_Type::NotificationData &)",  "%s\n",  v21);
        if (v22 != buf) {
          free(v22);
        }
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101883640);
      }
      int v6 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCell, kNotificationReset", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101883640);
        }
        LOWORD(v23) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "TileCell, kNotificationReset",  &v23,  2);
        v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientM anager_Type::NotificationData &)",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      sub_100DC3F50(a1);
      if (!*(_BYTE *)(a1 + 129)) {
        *(_BYTE *)(a1 + 440) = 1;
      }
      (*(void (**)(void))(**(void **)(a1 + 368) + 48LL))(*(void *)(a1 + 368));
    }

    return;
  }

  *(_BYTE *)(a1 + 357) = *(_DWORD *)(a4 + 188) == 1;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101883640);
  }
  unsigned int v10 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    unint64_t v11 = *(unsigned __int8 *)(a1 + 357);
    *(_DWORD *)buf = 67240192;
    v26 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "TileCell, kNotificationLocationServicesStatus, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101883640);
    }
    v17 = *(unsigned __int8 *)(a1 + 357);
    v23 = 67240192;
    v24 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  1LL,  "TileCell, kNotificationLocationServicesStatus, %{public}d",  &v23,  8);
    unsigned int v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManag er_Type::NotificationData &)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  if (!*(_BYTE *)(a1 + 357)) {
    goto LABEL_27;
  }
}

          v22 = (void *)v15[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (void *)*v22;
            }

            while (v22);
          }

          else
          {
            do
            {
              v23 = (void *)v15[2];
              v24 = *v23 == (void)v15;
              v15 = v23;
            }

            while (!v24);
          }

          v15 = v23;
          if (v23 == v17) {
            goto LABEL_179;
          }
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101883640);
        }
        v21 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(v18, v21, OS_LOG_TYPE_ERROR, v19, buf, 2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_27;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101883640);
        }
        *(_WORD *)__p = 0;
        LODWORD(v134) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  v18,  qword_101934858,  16LL,  "CellTile, tile ptr is NULL, #CloneMe",  __p,  v134);
        v30 = (char *)v49;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v49);
        goto LABEL_69;
      }

      goto LABEL_179;
    }

    memset(&v147, 0, sizeof(v147));
    v64 = a2 + 184;
    sub_1006031FC(a2 + 184, (uint64_t *)__p);
    v65 = *(unsigned int **)__p;
    if (*(_BYTE **)__p == &__p[8])
    {
LABEL_167:
      sub_100603B94((uint64_t)__p, *(char **)&__p[8]);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101883640);
      }
      v88 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
      {
        v89 = *(void *)(a2 + 8);
        v90 = *(char *)(a2 + 31);
        v91 = *(unsigned __int8 *)(v2 + 64);
        v92 = sub_100019240(v64);
        if (v90 >= 0) {
          v93 = a2 + 8;
        }
        else {
          v93 = v89;
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&buf[4] = v93;
        v158 = 1026;
        LODWORD(v159) = v91;
        WORD2(v159) = 1026;
        *(_DWORD *)((char *)&v159 + 6) = 0;
        WORD5(v159) = 1026;
        HIDWORD(v159) = 0;
        *(_WORD *)v160 = 2050;
        *(void *)&v160[2] = v92;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_INFO,  "CellTile, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu",  buf,  0x28u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101883640);
        }
        v126 = qword_101934858;
        v127 = *(void *)(a2 + 8);
        v128 = *(char *)(a2 + 31);
        v129 = *(unsigned __int8 *)(v2 + 64);
        v130 = sub_100019240(v64);
        if (v128 >= 0) {
          v131 = a2 + 8;
        }
        else {
          v131 = v127;
        }
        *(_DWORD *)__p = 136447234;
        *(void *)&__p[4] = v131;
        *(_WORD *)&__p[12] = 1026;
        *(_DWORD *)&__p[14] = v129;
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 0;
        *(_WORD *)&__p[24] = 1026;
        *(_DWORD *)&__p[26] = 0;
        *(_WORD *)v149 = 2050;
        *(void *)&v149[2] = v130;
        LODWORD(v134) = 40;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v126,  1LL,  "CellTile, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu",  __p,  v134);
        v133 = (char *)v132;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v132);
        if (v133 != buf) {
          free(v133);
        }
      }

      size = v147.__r_.__value_.__l.__size_;
      *(void *)buf = &v147;
      sub_100222DE8((void ***)buf);
      goto LABEL_179;
    }

    while (1)
    {
      v66 = sub_1006025CC(v64, v65 + 8);
      v67 = (double *)v66;
      if (!v66)
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101883640);
        }
        v72 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "CellTile, tile ptr is NULL, #CloneMe",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101883640);
          }
          *(_WORD *)v143 = 0;
          LODWORD(v134) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "CellTile, tile ptr is NULL, #CloneMe",  v143,  v134);
          v74 = (char *)v73;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v73);
          if (v74 != buf) {
            free(v74);
          }
        }

        goto LABEL_137;
      }

      if (sub_100C0CCC8(v66))
      {
        if (!sub_100C148B0(v67, *(void *)(v2 + 48), *(float *)(a2 + 144)))
        {
          if (sub_100C145F0((uint64_t)v67, *(unsigned __int8 *)(v3 + 128)))
          {
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101883660);
            }
            v68 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v67 + 16LL))(buf, v67);
              v69 = buf;
              if (SBYTE9(v159) < 0) {
                v69 = *(_BYTE **)buf;
              }
              *(_DWORD *)v143 = 136315138;
              *(void *)&v143[4] = v69;
              _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "TILE: updateProtectionClass, location moved, locking tileid, %s",  v143,  0xCu);
              if (SBYTE9(v159) < 0) {
                operator delete(*(void **)buf);
              }
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101883660);
              }
              v79 = qword_101934A78;
              (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v67 + 16LL))(v143, v67);
              v80 = v143;
              if (v144 < 0) {
                v80 = *(_BYTE **)v143;
              }
              v145 = 136315138;
              v146 = v80;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v79,  2LL,  "TILE: updateProtectionClass, location moved, locking tileid, %s",  (const char *)&v145);
              v82 = v81;
              if (v144 < 0) {
                operator delete(*(void **)v143);
              }
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v82);
              if (v82 != buf) {
                free(v82);
              }
            }

            v70 = v147.__r_.__value_.__l.__size_;
            if (v147.__r_.__value_.__l.__size_ >= v147.__r_.__value_.__l.__cap_)
            {
              v71 = sub_10022358C((uint64_t *)&v147, (__int128 *)v65 + 2);
            }

            else
            {
              sub_100222F00((uint64_t)&v147, (__int128 *)v65 + 2);
              v71 = v70 + 48;
            }

            v147.__r_.__value_.__l.__size_ = v71;
            goto LABEL_137;
          }

          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101883640);
          }
          v75 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v67 + 16LL))(buf, v67);
            v76 = buf;
            if (SBYTE9(v159) < 0) {
              v76 = *(_BYTE **)buf;
            }
            *(_DWORD *)v143 = 136380675;
            *(void *)&v143[4] = v76;
            _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_ERROR,  "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe",  v143,  0xCu);
            if (SBYTE9(v159) < 0) {
              operator delete(*(void **)buf);
            }
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101883640);
            }
            v83 = qword_101934858;
            (*(void (**)(_BYTE *__return_ptr, double *))(*(void *)v67 + 16LL))(v143, v67);
            v84 = v143;
            if (v144 < 0) {
              v84 = *(_BYTE **)v143;
            }
            v145 = 136380675;
            v146 = v84;
            LODWORD(v134) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v83,  16LL,  "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe",  &v145,  v134);
            v86 = v85;
            if (v144 < 0) {
              operator delete(*(void **)v143);
            }
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v86);
            if (v86 != buf) {
              free(v86);
            }
          }
        }

        ++*(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8LL) + 24LL);
      }

  if (*(_DWORD *)(a1 + 700) == *(unsigned __int16 *)(a1 + 698) && *(int *)(a1 + 692) >= 128)
  {
    sub_100E03F3C(a1);
    *(_DWORD *)(a1 + 692) = 0;
    return 1LL;
  }

  return 0LL;
}

  char v14 = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 32) |= 0x10u;
  *(_BYTE *)(a1 + 19) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  v16 = *(_BYTE *)(a2 + 21);
  *(_DWORD *)(a1 + 32) |= 0x40u;
  *(_BYTE *)(a1 + 21) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(_BYTE *)(a2 + 22);
    *(_DWORD *)(a1 + 32) |= 0x80u;
    *(_BYTE *)(a1 + 22) = v6;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
  }

        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }

        if (v39 != 10 && v39) {
          return 0LL;
        }
        v45 = *(void *)(a1 + 40);
        ++v2;
        if (v45 - 1 <= v13)
        {
          *(_DWORD *)(a1 + 648) = v45 - 1;
          if ((v187 & (v45 != 0)) != 0)
          {
            v165 = v45 - 1 + *(void *)(a1 + 32);
            v166 = *(void *)(*(void *)(a1 + 8) + 8 * (v165 / 0x17));
            v167 = v165 % 0x17;
            if (*(_BYTE *)(v166 + 176 * (v165 % 0x17) + 168))
            {
              v168 = (char *)operator new(0xA0uLL);
              *((void *)v168 + 1) = 0LL;
              v169 = (unint64_t *)(v168 + 8);
              *((void *)v168 + 2) = 0LL;
              v170 = (unint64_t *)(v168 + 16);
              *(void *)v168 = off_10186D518;
              *((void *)v168 + 3) = &off_1018920B8;
              v171 = v166 + 176 * v167;
              v172 = *(_OWORD *)(v171 + 40);
              v173 = *(_OWORD *)(v171 + 56);
              v174 = *(_OWORD *)(v171 + 88);
              *((_OWORD *)v168 + 4) = *(_OWORD *)(v171 + 72);
              *((_OWORD *)v168 + 5) = v174;
              *((_OWORD *)v168 + 2) = v172;
              *((_OWORD *)v168 + 3) = v173;
              v175 = *(_OWORD *)(v171 + 104);
              v176 = *(_OWORD *)(v171 + 120);
              v177 = *(_OWORD *)(v171 + 136);
              *(_OWORD *)(v168 + 140) = *(_OWORD *)(v171 + 148);
              *((_OWORD *)v168 + 7) = v176;
              *((_OWORD *)v168 + 8) = v177;
              *((_OWORD *)v168 + 6) = v175;
              v178 = (double *)(v171 + 8);
              v190 = v168 + 24;
              v191 = (std::__shared_weak_count *)v168;
              do
                v179 = __ldxr(v170);
              while (__stxr(v179 + 1, v170));
              sub_1004CEAFC(v189, v178, (uint64_t *)&v190);
              if (v191) {
                std::__shared_weak_count::__release_weak(v191);
              }
              do
                v180 = __ldaxr(v169);
              while (__stlxr(v180 - 1, v169));
              if (!v180)
              {
                (*(void (**)(char *))(*(void *)v168 + 16LL))(v168);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v168);
              }
            }
          }

          return 1LL;
        }
      }

      v194 = 0LL;
      v195 = 0LL;
      if (*(void *)(a1 + 40) > 2uLL)
      {
        if (*((_DWORD *)v23 + 38) == *(_DWORD *)(v17 + 128))
        {
          v52 = *(void *)(*(void *)(a1 + 8) + 8 * ((*(void *)(a1 + 32) + v2) / 0x17uLL))
              + 176 * ((*(void *)(a1 + 32) + v2) % 0x17uLL);
          buf = 0uLL;
          v53 = *(std::__shared_weak_count **)(v52 + 24);
          if (v53)
          {
            *((void *)&buf + 1) = std::__shared_weak_count::lock(v53);
            if (*((void *)&buf + 1)) {
              *(void *)&buf = *(void *)(v52 + 16);
            }
          }

          sub_10005F550((uint64_t)&v194, &buf);
          sub_10000AE14((uint64_t)&buf);
        }

        else if (v2 >= 2)
        {
          v54 = v2;
          do
          {
            v185 = v54;
            v186 = v54 - 1;
            v55 = *(void *)(a1 + 32) + (v54 - 1);
            v56 = *(void *)(*(void *)(a1 + 8) + 8 * (v55 / 0x17)) + 176 * (v55 % 0x17);
            v196 = 0LL;
            v197 = 0LL;
            v57 = *(std::__shared_weak_count **)(v56 + 24);
            if (v57
              && ((v197 = std::__shared_weak_count::lock(v57)) == 0LL
                ? (v58 = v196)
                : (v58 = *(void *)(v56 + 16), v196 = v58),
                  v58 && *(double *)(v58 + 40) > 0.0))
            {
              if (*(_DWORD *)(v58 + 128) == *(_DWORD *)(v17 + 128))
              {
                sub_1000F2F30(&v194, &v196);
                v59 = 41;
              }

              else
              {
                v59 = 0;
              }
            }

            else
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_101889870);
              }
              v60 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                v61 = *(_DWORD *)(a1 + 652);
                v62 = *(void *)(a1 + 40);
                LODWORD(buf) = 67240704;
                DWORD1(buf) = v61;
                WORD4(buf) = 1026;
                *(_DWORD *)((char *)&buf + 10) = v186;
                HIWORD(buf) = 2050;
                *(void *)v226 = v62;
                _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "FusedLoc,hID,%{public}d,DataFusion detected invalid raw location in the buffer,index,%{public}d,buffer Size,%{public}zu",  (uint8_t *)&buf,  0x18u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_101889870);
                }
                v66 = *(_DWORD *)(a1 + 652);
                v67 = *(void *)(a1 + 40);
                LODWORD(v205) = 67240704;
                HIDWORD(v205) = v66;
                *(_WORD *)v206 = 1026;
                *(_DWORD *)&v206[2] = v186;
                *(_WORD *)&v206[6] = 2050;
                *(void *)&v206[8] = v67;
                LODWORD(v184) = 24;
                _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "FusedLoc,hID,%{public}d,DataFusion detected invalid raw location in the buffer,index,%{public}d,buffer Size,%{public}zu",  &v205,  v184);
                v69 = (__int128 *)v68;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()",  "%s\n",  v68);
                if (v69 != &buf) {
                  free(v69);
                }
              }

              v59 = 43;
            }

            v63 = v197;
            if (v197)
            {
              v64 = (unint64_t *)&v197->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }

            if (v59 != 43 && v59) {
              break;
            }
            v54 = v186;
          }

          while (v185 > 2);
        }

        v70 = v194;
        if (v194)
        {
          if (*(double *)(v194 + 40) <= 0.0)
          {
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_101889870);
            }
            v96 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
            {
              v97 = *(_DWORD *)(a1 + 652);
              v98 = *(_DWORD *)(v194 + 128);
              v99 = *(void *)(v194 + 16);
              v100 = *(void *)(a1 + 40);
              LODWORD(buf) = 67240960;
              DWORD1(buf) = v97;
              WORD4(buf) = 1026;
              *(_DWORD *)((char *)&buf + 10) = v98;
              HIWORD(buf) = 2050;
              *(void *)v226 = v99;
              *(_WORD *)&v226[8] = 2050;
              *(void *)&v226[10] = v100;
              _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_ERROR,  "#Error,FusedLoc,hID,%{public}d,DataFusion detected invalid previous raw location,type,%{public}d,locatio n mct,%{public}.3f,bufferSize,%{public}zu",  (uint8_t *)&buf,  0x22u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_101889870);
              }
              v128 = *(_DWORD *)(a1 + 652);
              v129 = *(_DWORD *)(v194 + 128);
              v130 = *(void *)(v194 + 16);
              v131 = *(void *)(a1 + 40);
              LODWORD(v205) = 67240960;
              HIDWORD(v205) = v128;
              *(_WORD *)v206 = 1026;
              *(_DWORD *)&v206[2] = v129;
              *(_WORD *)&v206[6] = 2050;
              *(void *)&v206[8] = v130;
              *(_WORD *)&v206[16] = 2050;
              *(void *)&v206[18] = v131;
              LODWORD(v184) = 34;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,FusedLoc,hID,%{public}d,DataFusion detected invalid previous raw location,type,%{public}d,locatio n mct,%{public}.3f,bufferSize,%{public}zu",  &v205,  v184);
              v133 = (__int128 *)v132;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()",  "%s\n",  v132);
              if (v133 != &buf) {
                free(v133);
              }
            }

            v39 = 1;
            goto LABEL_120;
          }

          v71 = *(double *)(v194 + 112);
          if (v71 >= 6.0 || v71 <= 0.0) {
            v71 = 6.0;
          }
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_101889870);
          }
          v73 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            v74 = *(_DWORD *)(a1 + 652);
            v75 = *(_DWORD *)(v17 + 128);
            v76 = *(double *)(v194 + 16);
            *(void *)v226 = *(void *)(v17 + 16);
            v77 = *(void *)(v194 + 112);
            v78 = *(void *)(a1 + 40);
            LODWORD(buf) = 67241728;
            DWORD1(buf) = v74;
            WORD4(buf) = 1026;
            *(_DWORD *)((char *)&buf + 10) = v75;
            HIWORD(buf) = 2050;
            *(_WORD *)&v226[8] = 2050;
            *(double *)&v226[10] = *(double *)v226 - v76;
            v227 = 2050;
            *(void *)v228 = v77;
            *(_WORD *)&v228[8] = 1026;
            *(_DWORD *)&v228[10] = v2;
            v229 = 2050;
            v230 = v78;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "FusedLoc,hID,%{public}d,DataFusion ignoring old previous raw location in fusion,type,%{public}d,new locati on mct,%{public}.3f,age_s,%{public}.2f,lifespan_s,%{public}.2f,index,%{public}d,bufferSize,%{public}zu",  (uint8_t *)&buf,  0x3Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_101889870);
            }
            v134 = *(_DWORD *)(a1 + 652);
            v135 = *(_DWORD *)(v17 + 128);
            v136 = *(double *)(v194 + 16);
            *(void *)&v206[8] = *(void *)(v17 + 16);
            v137 = *(void *)(v194 + 112);
            v138 = *(void *)(a1 + 40);
            LODWORD(v205) = 67241728;
            HIDWORD(v205) = v134;
            *(_WORD *)v206 = 1026;
            *(_DWORD *)&v206[2] = v135;
            *(_WORD *)&v206[6] = 2050;
            *(_WORD *)&v206[16] = 2050;
            *(double *)&v206[18] = *(double *)&v206[8] - v136;
            v207 = 2050;
            *(void *)v208 = v137;
            *(_WORD *)&v208[8] = 1026;
            *(_DWORD *)&v208[10] = v2;
            *(_WORD *)&v208[14] = 2050;
            *(void *)&v208[16] = v138;
            LODWORD(v184) = 60;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "FusedLoc,hID,%{public}d,DataFusion ignoring old previous raw location in fusion,type,%{public}d,new locati on mct,%{public}.3f,age_s,%{public}.2f,lifespan_s,%{public}.2f,index,%{public}d,bufferSize,%{public}zu",  &v205,  v184);
            v140 = (__int128 *)v139;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()",  "%s\n",  v139);
            if (v140 != &buf) {
              free(v140);
            }
          }

          buf = 0uLL;
          sub_10005F550((uint64_t)&v194, &buf);
          sub_10000AE14((uint64_t)&buf);
          v70 = v194;
          if (v194)
          {
LABEL_97:
            v205 = &off_1018920B8;
            *(_OWORD *)v206 = v188;
            *(_OWORD *)&v208[4] = xmmword_1012E0070;
            *(_OWORD *)&v208[20] = xmmword_1012E0070;
            v209 = v188;
            v210 = v188;
            v211 = 0xBFF0000000000000LL;
            v212 = 0;
            v213 = 0;
            v214 = 0;
            v192 = v70;
            v193 = v195;
            if (v195)
            {
              p_shared_weak_owners = (unint64_t *)&v195->__shared_weak_owners_;
              do
                v80 = __ldxr(p_shared_weak_owners);
              while (__stxr(v80 + 1, p_shared_weak_owners));
            }

            v81 = sub_1004D0E24(v189, (double *)(v17 + 16), &v192, (uint64_t)&v205);
            if (v193) {
              std::__shared_weak_count::__release_weak(v193);
            }
            if ((v81 & 1) == 0)
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_101889870);
              }
              v101 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
              {
                v102 = *(_DWORD *)(a1 + 652);
                v103 = *(_DWORD *)(v17 + 128);
                v104 = *(void *)(v17 + 16);
                v105 = *(void *)(v194 + 16);
                LODWORD(buf) = 67240960;
                DWORD1(buf) = v102;
                WORD4(buf) = 1026;
                *(_DWORD *)((char *)&buf + 10) = v103;
                HIWORD(buf) = 2050;
                *(void *)v226 = v104;
                *(_WORD *)&v226[8] = 2050;
                *(void *)&v226[10] = v105;
                _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_ERROR,  "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning previous raw location,type,%{public}d,n ew location mct,%{public}.3f,previous location mct,%{public}.3f",  (uint8_t *)&buf,  0x22u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_101889870);
                }
                v141 = *(_DWORD *)(a1 + 652);
                v142 = *(_DWORD *)(v17 + 128);
                v143 = *(void *)(v17 + 16);
                v144 = *(void *)(v194 + 16);
                LODWORD(v196) = 67240960;
                HIDWORD(v196) = v141;
                LOWORD(v197) = 1026;
                *(_DWORD *)((char *)&v197 + 2) = v142;
                HIWORD(v197) = 2050;
                v198 = v143;
                v199 = 2050;
                v200 = v144;
                LODWORD(v184) = 34;
                _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,FusedLoc,hID,%{public}d,DataFusion failed time aligning previous raw location,type,%{public}d,n ew location mct,%{public}.3f,previous location mct,%{public}.3f",  &v196,  v184);
                v146 = (__int128 *)v145;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()",  "%s\n",  v145);
                if (v146 != &buf) {
                  free(v146);
                }
              }

              v39 = 1;
              goto LABEL_120;
            }

            v82 = *(double *)(v17 + 40);
            if (*(double *)&v208[4] >= v82 && *(double *)&v208[4] <= v82 * 6.0)
            {
              sub_100E8F440(a1, v2 + 1, v17, (double *)&v205, (uint64_t)&v215, v32);
              goto LABEL_119;
            }

            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_101889870);
            }
            v84 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              v85 = *(_DWORD *)(a1 + 652);
              v86 = *(_DWORD *)(v17 + 128);
              v87 = *(void *)(v17 + 40);
              v88 = *(void *)(a1 + 40);
              LODWORD(buf) = 67241472;
              DWORD1(buf) = v85;
              WORD4(buf) = 1026;
              *(_DWORD *)((char *)&buf + 10) = v86;
              HIWORD(buf) = 2050;
              *(void *)v226 = v87;
              *(_WORD *)&v226[8] = 2050;
              *(void *)&v226[10] = *(void *)&v208[4];
              v227 = 1026;
              *(_DWORD *)v228 = v2;
              *(_WORD *)&v228[4] = 2050;
              *(void *)&v228[6] = v88;
              _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "FusedLoc,hID,%{public}d,predicted previous location with large uncertainty switching to CC Fusion,type,% {public}d,current hunc,%{public}.1f,previous hunc,%{public}.1f,index,%{public}d,bufferSize,%{public}zu",  (uint8_t *)&buf,  0x32u);
            }

            if (!sub_1002921D0(115, 2)) {
              goto LABEL_118;
            }
            bzero(&buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_101889870);
            }
            v147 = *(_DWORD *)(a1 + 652);
            v148 = *(_DWORD *)(v17 + 128);
            v149 = *(void *)(v17 + 40);
            v150 = *(void *)(a1 + 40);
            LODWORD(v196) = 67241472;
            HIDWORD(v196) = v147;
            LOWORD(v197) = 1026;
            *(_DWORD *)((char *)&v197 + 2) = v148;
            HIWORD(v197) = 2050;
            v198 = v149;
            v199 = 2050;
            v200 = *(void *)&v208[4];
            v201 = 1026;
            v202 = v2;
            v203 = 2050;
            v204 = v150;
            LODWORD(v184) = 50;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "FusedLoc,hID,%{public}d,predicted previous location with large uncertainty switching to CC Fusion,type,%{p ublic}d,current hunc,%{public}.1f,previous hunc,%{public}.1f,index,%{public}d,bufferSize,%{public}zu",  &v196,  v184);
            v127 = (__int128 *)v151;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()",  "%s\n",  v151);
            if (v127 == &buf)
            {
LABEL_118:
              sub_100E8F104(a1, v2 + 1, v17, (uint64_t)&v215, v32);
LABEL_119:
              v39 = 0;
              v187 = 1;
LABEL_120:
              v93 = v195;
              if (v195)
              {
                v94 = (unint64_t *)&v195->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }

              goto LABEL_42;
            }

  uint64_t result = sub_100F47E00(v4, v13, a1[4]);
  v25 = (double *)a1[6];
  v24 = (double *)a1[7];
  if (v25 != v24)
  {
    while (vabdd_f64(a2, *v25) <= 150.0)
    {
      if (++v25 == v24) {
        goto LABEL_39;
      }
    }

    if (v25 != v24)
    {
      for (i = v25 + 1; i != v24; ++i)
      {
        if (vabdd_f64(a2, *i) <= 150.0) {
          *v25++ = *i;
        }
      }
    }

    if (v25 != v24) {
      a1[7] = v25;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 56),  v4,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(v5 + 64),  v4,  a4);
  }

  (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  return v18;
}

  v15 = *(_BYTE *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 48) = v15;
  if ((*(_WORD *)(a2 + 52) & 0x800) != 0) {
    goto LABEL_28;
  }
  return result;
}

  v15 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 80) = v3;
  *(void *)(result + 32) = v15;
  if ((*(_WORD *)(a2 + 80) & 0x80) != 0) {
    goto LABEL_28;
  }
  return result;
}

  unsigned int v10 = *(_DWORD *)(a2 + 28);
  v3 |= 0x20u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 28) = v10;
  unsigned int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "isADLImpact", *(_BYTE *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "curLoftStartTime", *(void *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 115), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  int v8 = *(_BYTE *)(a2 + 86);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 86) = v8;
  unsigned int v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  }

  v26 = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 48) |= 0x40u;
  *(_BYTE *)(a1 + 40) = v26;
  unsigned int v19 = *(_WORD *)(a2 + 48);
  if ((v19 & 0x200) == 0)
  {
LABEL_18:
    if ((v19 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "upsidedown", *(_BYTE *)(a1 + 42));
  uint64_t v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x200) != 0) {
    goto LABEL_28;
  }
LABEL_18:
  if ((v9 & 0x400) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "walking", *(_BYTE *)(a1 + 44));
  return PB::TextFormatter::endObject(this);
}

  char v14 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v14;
  unsigned int v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    PB::TextFormatter::format(this, "staticFlag", *(_DWORD *)(a1 + 60));
    if ((*(_WORD *)(a1 + 68) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 64), 0xEu);
  }

  int v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 40) = v8;
  unsigned int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "negPeakLeftHalfWidth", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 9u);
  char v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }

  v17 = *(void *)(a2 + 144);
  v8 |= 4u;
  *(_WORD *)(a1 + 204) = v8;
  *(void *)(a1 + 144) = v17;
  int v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "hasAudioInEpoch", *(_BYTE *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 65), 0x66u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  uint64_t v9 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 92) = v3;
  *(void *)(result + 32) = v9;
  unsigned int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "gpsTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x67u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 92);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 92) = v9;
  unsigned int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "jImpactStart", *(void *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  int v12 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 96) = v3;
  *(void *)(result + 32) = v12;
  unsigned int v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "isClusterInBeginningOfDrive", *(_BYTE *)(a1 + 93));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x12Eu);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  v17 = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 192) |= 0x10u;
  *(void *)(a1 + 112) = v17;
  unint64_t v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 1) == 0)
  {
LABEL_15:
    if ((v11 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }

  unsigned int v19 = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 116) |= 2u;
  *(void *)(a1 + 64) = v19;
  uint64_t v9 = *(_WORD *)(a2 + 116);
  if ((v9 & 0x200) == 0)
  {
LABEL_12:
    if ((v9 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "quiescentMode", *(_DWORD *)(a1 + 92));
  int v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x40) == 0)
  {
LABEL_13:
    if ((v12 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  int v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

            PB::Reader::recallMark(this, v62);
          }

          else
          {
            v50 = *(char **)(a1 + 16);
            v49 = *(void *)(a1 + 24);
            if ((unint64_t)v50 >= v49)
            {
              v52 = (char *)*v10;
              v53 = (v50 - (_BYTE *)*v10) >> 3;
              v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 61) {
LABEL_91:
              }
                sub_100007008();
              v55 = v49 - (void)v52;
              if (v55 >> 2 > v54) {
                v54 = v55 >> 2;
              }
              else {
                v56 = v54;
              }
              if (v56)
              {
                v57 = (char *)sub_1000071BC(v11, v56);
                v52 = *(char **)(a1 + 8);
                v50 = *(char **)(a1 + 16);
              }

              else
              {
                v57 = 0LL;
              }

              v58 = &v57[8 * v53];
              *(void *)v58 = 0LL;
              v51 = v58 + 8;
              while (v50 != v52)
              {
                v59 = *((void *)v50 - 1);
                v50 -= 8;
                *((void *)v58 - 1) = v59;
                v58 -= 8;
              }

              *(void *)(a1 + 8) = v58;
              *(void *)(a1 + 16) = v51;
              *(void *)(a1 + 24) = &v57[8 * v56];
              if (v52) {
                operator delete(v52);
              }
            }

            else
            {
              *(void *)v50 = 0LL;
              v51 = v50 + 8;
            }

            *(void *)(a1 + 16) = v51;
            v60 = *((void *)this + 1);
            if (v60 <= 0xFFFFFFFFFFFFFFF7LL && v60 + 8 <= *((void *)this + 2))
            {
              *(v51 - 1) = *(void *)(*(void *)this + v60);
LABEL_82:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_80:
              *((_BYTE *)this + 24) = 1;
            }
          }

  uint64_t result = *(float *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 48) = result;
  unsigned int v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "pal", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    PB::TextFormatter::format(this, "vo2max", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 64) & 0x1000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 8), 0xEu);
  }

  uint64_t v5 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 32) = v5;
  unsigned int v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 68) & 0x2000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xEu);
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  unsigned int v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "coverage", *(float *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  unsigned int v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "isPlanar", *(_BYTE *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  int v6 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 32) = v6;
  unsigned int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "gaitPhase", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

  unint64_t v11 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 56) = v11;
  unsigned int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "gradeType", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 88), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  unsigned int v10 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 80) = v10;
  unsigned int v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeCv", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  v21 = *(void *)(a2 + 24);
  v6 |= 2u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 24) = v21;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  v23 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 100) |= 0x10u;
  *(void *)(a1 + 56) = v23;
  unsigned int v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 0x400) == 0)
  {
LABEL_16:
    if ((v13 & 0x200) == 0) {
      goto LABEL_17;
    }
LABEL_29:
    v25 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 100) |= 0x200u;
    *(_DWORD *)(a1 + 92) = v25;
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0) {
      return a1;
    }
    goto LABEL_18;
  }

            PB::Reader::recallMark(this, v91);
          }

          else
          {
            v70 = *(char **)(a1 + 16);
            v69 = *(void *)(a1 + 24);
            if ((unint64_t)v70 >= v69)
            {
              v80 = (char *)*v10;
              v81 = (v70 - (_BYTE *)*v10) >> 2;
              v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 62) {
LABEL_148:
              }
                sub_100007008();
              v83 = v69 - (void)v80;
              if (v83 >> 1 > v82) {
                v82 = v83 >> 1;
              }
              else {
                v84 = v82;
              }
              if (v84)
              {
                v85 = (char *)sub_10000956C(v11, v84);
                v80 = *(char **)(a1 + 8);
                v70 = *(char **)(a1 + 16);
              }

              else
              {
                v85 = 0LL;
              }

              v86 = &v85[4 * v81];
              *(_DWORD *)v86 = 0;
              v71 = v86 + 4;
              while (v70 != v80)
              {
                v87 = *((_DWORD *)v70 - 1);
                v70 -= 4;
                *((_DWORD *)v86 - 1) = v87;
                v86 -= 4;
              }

              *(void *)(a1 + 8) = v86;
              *(void *)(a1 + 16) = v71;
              *(void *)(a1 + 24) = &v85[4 * v84];
              if (v80) {
                operator delete(v80);
              }
            }

            else
            {
              *(_DWORD *)v70 = 0;
              v71 = v70 + 4;
            }

            *(void *)(a1 + 16) = v71;
            v88 = *((void *)this + 1);
            if (v88 <= 0xFFFFFFFFFFFFFFFBLL && v88 + 4 <= *((void *)this + 2))
            {
              *(v71 - 1) = *(_DWORD *)(*(void *)this + v88);
LABEL_136:
              v68 = *((void *)this + 1) + 4LL;
LABEL_137:
              *((void *)this + 1) = v68;
            }

            else
            {
LABEL_134:
              *((_BYTE *)this + 24) = 1;
            }
          }

  int v8 = *(_BYTE *)(a2 + 85);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 85) = v8;
  unsigned int v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xEu);
  }

  uint64_t result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 24) = result;
  if ((*(_WORD *)(a2 + 64) & 0x80) != 0) {
    goto LABEL_28;
  }
  return result;
}

  uint64_t v9 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 48) = v9;
  unsigned int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  unsigned int v10 = *(_BYTE *)(a2 + 79);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 79) = v10;
  unsigned int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "hostAwake", *(_BYTE *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 80), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  unsigned int v13 = *(_BYTE *)(a2 + 57);
  v3 |= 0x1000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 57) = v13;
  unsigned int v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "pedEnergyZPeak", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  v15 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 24) = v15;
  if ((*(_WORD *)(a2 + 64) & 0x200) != 0) {
    goto LABEL_28;
  }
  return result;
}

  v15 = *(_DWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v15;
  if ((*(_WORD *)(a2 + 100) & 0x800) != 0) {
    goto LABEL_28;
  }
  return result;
}

  char v14 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v14;
  unsigned int v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    PB::TextFormatter::format(this, "trackRunOdometerHasBeenCorrected", *(_BYTE *)(a1 + 96));
    if ((*(_WORD *)(a1 + 100) & 0x1000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0xEu);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  v15 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v15;
  if ((*(_WORD *)(a2 + 68) & 4) != 0) {
    goto LABEL_28;
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_7:
  if ((v4 & 0x10) != 0) {
LABEL_8:
  }
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 7u);
LABEL_9:
  uint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    int v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 8u);
  }

  int v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0xAu);
    if ((*(_WORD *)(v3 + 124) & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 9u);
  int v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0) {
    goto LABEL_31;
  }
LABEL_14:
  if ((v8 & 4) != 0) {
LABEL_15:
  }
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xBu);
LABEL_16:
  uint64_t v9 = *(float **)(v3 + 32);
  unsigned int v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    unint64_t v11 = *v9++;
    uint64_t result = PB::Writer::write(this, v11, 0xCu);
  }

  unsigned int v13 = *(float **)(v3 + 56);
  int v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    char v14 = *v13++;
    uint64_t result = PB::Writer::write(this, v14, 0xDu);
  }

  return result;
}

  int v12 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 32) = v12;
  unsigned int v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "metsWR", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

            PB::Reader::recallMark(this, v59);
          }

          else
          {
            v47 = *(char **)(a1 + 16);
            v46 = *(void *)(a1 + 24);
            if ((unint64_t)v47 >= v46)
            {
              v49 = (char *)*v10;
              v50 = (v47 - (_BYTE *)*v10) >> 2;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 62) {
LABEL_90:
              }
                sub_100007008();
              v52 = v46 - (void)v49;
              if (v52 >> 1 > v51) {
                v51 = v52 >> 1;
              }
              else {
                v53 = v51;
              }
              if (v53)
              {
                v54 = (char *)sub_10000956C(v11, v53);
                v49 = *(char **)(a1 + 8);
                v47 = *(char **)(a1 + 16);
              }

              else
              {
                v54 = 0LL;
              }

              v55 = &v54[4 * v50];
              *(_DWORD *)v55 = 0;
              v48 = v55 + 4;
              while (v47 != v49)
              {
                v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }

              *(void *)(a1 + 8) = v55;
              *(void *)(a1 + 16) = v48;
              *(void *)(a1 + 24) = &v54[4 * v53];
              if (v49) {
                operator delete(v49);
              }
            }

            else
            {
              *(_DWORD *)v47 = 0;
              v48 = v47 + 4;
            }

            *(void *)(a1 + 16) = v48;
            v57 = *((void *)this + 1);
            if (v57 <= 0xFFFFFFFFFFFFFFFBLL && v57 + 4 <= *((void *)this + 2))
            {
              *(v48 - 1) = *(_DWORD *)(*(void *)this + v57);
LABEL_81:
              *((void *)this + 1) += 4LL;
            }

            else
            {
LABEL_79:
              *((_BYTE *)this + 24) = 1;
            }
          }

            PB::Reader::recallMark(this, v93);
          }

          else
          {
            v72 = *(char **)(a1 + 16);
            v71 = *(void *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              v82 = (char *)*v10;
              v83 = (v72 - (_BYTE *)*v10) >> 3;
              v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_139:
              }
                sub_100007008();
              v85 = v71 - (void)v82;
              if (v85 >> 2 > v84) {
                v84 = v85 >> 2;
              }
              else {
                v86 = v84;
              }
              if (v86)
              {
                v87 = (char *)sub_1000071BC(v11, v86);
                v82 = *(char **)(a1 + 8);
                v72 = *(char **)(a1 + 16);
              }

              else
              {
                v87 = 0LL;
              }

              v88 = &v87[8 * v83];
              *(void *)v88 = 0LL;
              v73 = v88 + 8;
              while (v72 != v82)
              {
                v89 = *((void *)v72 - 1);
                v72 -= 8;
                *((void *)v88 - 1) = v89;
                v88 -= 8;
              }

              *(void *)(a1 + 8) = v88;
              *(void *)(a1 + 16) = v73;
              *(void *)(a1 + 24) = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }

            else
            {
              *(void *)v72 = 0LL;
              v73 = v72 + 8;
            }

            *(void *)(a1 + 16) = v73;
            v90 = *((void *)this + 1);
            if (v90 <= 0xFFFFFFFFFFFFFFF7LL && v90 + 8 <= *((void *)this + 2))
            {
              *(v73 - 1) = *(void *)(*(void *)this + v90);
              *((void *)this + 1) += 8LL;
            }

            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }

  int v7 = *(_BYTE *)(a2 + 89);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 92) = v3;
  *(_BYTE *)(a1 + 89) = v7;
  if ((*(_WORD *)(a2 + 92) & 0x20) != 0) {
    goto LABEL_28;
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  unsigned int v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "rBoresightX", *(float *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  uint64_t result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 76) = result;
  unsigned int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "covariancePreMeasurement01", *(float *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 48) = result;
  unsigned int v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 1) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "swingVelocityX", *(double *)(a1 + 88));
  uint64_t v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    PB::TextFormatter::format(this, "swingVelocityZ", *(double *)(a1 + 104));
    if ((*(_WORD *)(a1 + 120) & 0x2000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  }

  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 124), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  uint64_t result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 56) = result;
  unsigned int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 132));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

void sub_100065C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100065C8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  if (qword_1019A07F8 != a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

void sub_100065D04(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A630;
  sub_100065C8C((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100065D34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A630;
  sub_100065C8C((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100065D68()
{
  uint64_t result = operator new(0x40uLL);
  void *result = off_10181A630;
  result[1] = 0LL;
  result[2] = 6LL;
  result[3] = 0LL;
  result[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[5] = 1LL;
  *((_DWORD *)result + 14) = 0;
  result[6] = 0LL;
  return result;
}

uint64_t sub_100065DB0(uint64_t result)
{
  LOBYTE(v1) = *(_BYTE *)(result + 56);
  if ((_BYTE)v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 6LL;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 24))
        {
          *(void *)(v2 + 8) = 0LL;
          *(_DWORD *)(v2 + 16) = 0;
        }

        *(_DWORD *)(v2 + 24) = 0;
        int v1 = *(_DWORD *)(result + 56);
      }
    }

    if ((v1 & 0x10) != 0)
    {
      uint64_t v3 = *(void *)(result + 32);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 44) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_DWORD *)(result + 40) = 1;
  }

  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_100065E30( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v32[0];
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 56) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        char v14 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 17)
        {
          *((void *)this + 1) = v14 + 1;
          goto LABEL_35;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_25;
        }
LABEL_35:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v32) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v32;
        *(_DWORD *)(a1 + 56) |= 2u;
        v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_39:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v32) & 1) == 0) {
          return 0LL;
        }
        *(_DWORD *)(a1 + 20) = v32[0];
        int v10 = *(_DWORD *)(a1 + 56) | 4;
        *(_DWORD *)(a1 + 56) = v10;
        v16 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v16 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 56) = v10 | 8;
        v17 = *(void **)(a1 + 24);
        if (!v17)
        {
          v17 = operator new(0x20uLL);
          v17[1] = 0LL;
          v17[2] = 0LL;
          void *v17 = off_10181A5B8;
          *((_DWORD *)v17 + 6) = 0;
          *(void *)(a1 + 24) = v17;
        }

        v18 = (char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v32)) {
            return 0LL;
          }
        }

        else
        {
          v32[0] = *v18;
          *((void *)this + 1) = v18 + 1;
        }

        int v19 = *((_DWORD *)this + 14);
        int v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20) {
          return 0LL;
        }
        int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        int v23 = *((_DWORD *)this + 14);
        BOOL v24 = __OFSUB__(v23, 1);
        int v25 = v23 - 1;
        if (v25 < 0 == v24) {
          *((_DWORD *)this + 14) = v25;
        }
        v26 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v26 + 1;
LABEL_57:
        *(_DWORD *)(a1 + 56) |= 0x10u;
        v27 = *(void **)(a1 + 32);
        if (v27 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          v27 = operator new(0x18uLL);
          v27[1] = 0LL;
          v27[2] = 0LL;
          void *v27 = 0LL;
          *(void *)(a1 + 32) = v27;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v27);
        if (!(_DWORD)result) {
          return result;
        }
        v28 = (_BYTE *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        int v12 = v28 + 1;
        *((void *)this + 1) = v12;
LABEL_63:
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v29 = v32[0];
        }

        else
        {
          unsigned int v29 = *v12;
          *((void *)this + 1) = v12 + 1;
        }

        if (v29 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 56) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v29;
        }

        v30 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v30 + 1;
LABEL_73:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v32) & 1) == 0) {
          return 0LL;
        }
        *(_DWORD *)(a1 + 44) = v32[0];
        *(_DWORD *)(a1 + 56) |= 0x40u;
        v31 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v31 + 1;
LABEL_77:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v32) & 1) != 0)
        {
          *(_DWORD *)(a1 + 48) = v32[0];
          *(_DWORD *)(a1 + 56) |= 0x80u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_39;
        }
        goto LABEL_25;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        int v10 = *(_DWORD *)(a1 + 56);
        goto LABEL_43;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_57;
        }
        goto LABEL_25;
      case 6u:
        int v7 = TagFallback & 7;
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_63;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_73;
        }
        goto LABEL_25;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_25;
        }
        goto LABEL_77;
      default:
        int v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1000662CC( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_1000663E0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0LL;
    goto LABEL_49;
  }

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      int v4 = 11;
    }

    else if (v6 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 56);
    }

    else
    {
      int v4 = 2;
    }
  }

  else
  {
    int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    int v7 = v4 + 5;
  }
  else {
    int v7 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A07F8 + 24);
    }
    int v9 = *(unsigned __int8 *)(v8 + 24);
    int v10 = (v9 << 31 >> 31) & 5;
    if ((v9 & 2) != 0) {
      v10 += 5;
    }
    if ((v9 & 4) != 0) {
      v10 += 5;
    }
    if (*(_BYTE *)(v8 + 24)) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    *(_DWORD *)(v8 + 20) = v11;
    v7 += v11 + 2;
    int v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_44;
      }
      goto LABEL_38;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }

  uint64_t v12 = *(void *)(a1 + 32);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 56);
    char v14 = *(_BYTE *)(v12 + 23);
  }

  else
  {
    int v17 = 1;
  }

  if (v14 < 0) {
    int v13 = v15;
  }
  v7 += v17 + v13 + 1;
  if ((v3 & 0x20) == 0) {
    goto LABEL_44;
  }
LABEL_38:
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v18 & 0x80000000) != 0)
  {
    int v19 = 11;
  }

  else if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 56);
  }

  else
  {
    int v19 = 2;
  }

  v7 += v19;
LABEL_44:
  unsigned int v20 = v7 + 5;
  if ((v3 & 0x40) == 0) {
    unsigned int v20 = v7;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t result = v20 + 5;
  }
  else {
    uint64_t result = v20;
  }
LABEL_49:
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

float sub_100066570(uint64_t a1, void *lpsrc)
{
  return sub_100065A7C(a1, (uint64_t)lpsrc);
}

float sub_1000665BC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    return sub_100065A7C(a1, a2);
  }

  return result;
}

uint64_t sub_1000665FC()
{
  return 1LL;
}

void *sub_100066604@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.UwbRange");
}

void sub_100066614(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v13,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  2135LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v13,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(void *)(a1 + 8) = v7;
      int v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }

    int v8 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v8;
    int v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0) {
        return;
      }
LABEL_15:
      int v10 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 0x10u;
      int v11 = *(std::string **)(a1 + 24);
      if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v11 = (std::string *)operator new(0x18uLL);
        v11->__r_.__value_.__l.__size_ = 0LL;
        v11->__r_.__value_.__l.__cap_ = 0LL;
        v11->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 24) = v11;
      }

      std::string::operator=(v11, v10);
      return;
    }

void sub_10006675C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100066774(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    operator delete((void *)v1);
  }

void sub_1000667C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A6A8;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000667F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A6A8;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100066828()
{
  float result = operator new(0x30uLL);
  void *result = off_10181A6A8;
  result[1] = 0LL;
  result[2] = 2LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 10) = 0;
  result[4] = 0LL;
  return result;
}

uint64_t sub_100066864(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 2LL;
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1000668B8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v17);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v17[0];
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        char v12 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 17)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_30;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_20;
        }
LABEL_30:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v17) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v17;
        *(_DWORD *)(a1 + 40) |= 2u;
        int v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
LABEL_34:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v17) & 1) == 0) {
          return 0LL;
        }
        *(_DWORD *)(a1 + 20) = v17[0];
        *(_DWORD *)(a1 + 40) |= 4u;
        char v14 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v14 + 1;
LABEL_38:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v17) & 1) != 0)
        {
          *(_DWORD *)(a1 + 32) = v17[0];
          int v10 = *(_DWORD *)(a1 + 40) | 8;
          *(_DWORD *)(a1 + 40) = v10;
          uint64_t v15 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 42)
          {
            *((void *)this + 1) = v15 + 1;
LABEL_42:
            *(_DWORD *)(a1 + 40) = v10 | 0x10;
            unint64_t v16 = *(void **)(a1 + 24);
            if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              unint64_t v16 = operator new(0x18uLL);
              v16[1] = 0LL;
              v16[2] = 0LL;
              void *v16 = 0LL;
              *(void *)(a1 + 24) = v16;
            }

            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
            if (!(_DWORD)result) {
              return result;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1LL;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_34;
        }
        goto LABEL_20;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_38;
        }
        goto LABEL_20;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_20;
        }
        int v10 = *(_DWORD *)(a1 + 40);
        goto LABEL_42;
      default:
        int v7 = TagFallback & 7;
LABEL_20:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100066B7C( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_100066C2C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }

      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }

      else
      {
        unsigned int v4 = 2;
      }
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 5;
    }
    if ((v3 & 8) != 0) {
      uint64_t v5 = v4 + 5;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      char v9 = v8;
      uint64_t v10 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
        int v8 = *(unsigned __int8 *)(v7 + 23);
        uint64_t v10 = *(void *)(v7 + 8);
        char v9 = *(_BYTE *)(v7 + 23);
      }

      else
      {
        int v12 = 1;
      }

      if (v9 < 0) {
        int v8 = v10;
      }
      uint64_t v5 = (v5 + v12 + v8 + 1);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_100066D18(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100066D64()
{
  return 1LL;
}

void *sub_100066D6C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.WiFiRange");
}

void sub_100066D7C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  2478LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    int v5 = *(_DWORD *)(a2 + 44);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 8) = v8;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0) {
        goto LABEL_10;
      }
LABEL_16:
      int v10 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 8u;
      *(_DWORD *)(a1 + 32) = v10;
      int v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 0x10) == 0)
      {
LABEL_11:
        if ((v5 & 0x20) == 0) {
          return;
        }
        goto LABEL_12;
      }

      goto LABEL_17;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }

  int v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 20) = v9;
  int v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v5 & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_17:
  unint64_t v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  int v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v12 = (std::string *)operator new(0x18uLL);
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 24) = v12;
  }

  std::string::operator=(v12, v11);
  if ((*(_DWORD *)(a2 + 44) & 0x20) != 0)
  {
LABEL_12:
    int v7 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v7;
  }

void sub_100066EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100066F04(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A720;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100066F34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A720;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_100066F68()
{
  uint64_t result = operator new(0x30uLL);
  void *result = off_10181A720;
  result[1] = 0LL;
  result[2] = 3LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0LL;
  result[5] = 0LL;
  return result;
}

uint64_t sub_100066FA0(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 3LL;
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 36) = 0;
  }

  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100066FF8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v25[0];
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 44) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }

        int v17 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_33;
        }

        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_22;
        }
LABEL_33:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v25) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v25;
        *(_DWORD *)(a1 + 44) |= 2u;
        v18 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v18 + 1;
LABEL_37:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v25) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v25[0];
          *(_DWORD *)(a1 + 44) |= 4u;
          int v19 = (_BYTE *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v19 < v11 && *v19 == 32)
          {
            int v12 = v19 + 1;
            *((void *)this + 1) = v12;
LABEL_41:
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v20 = (_BYTE *)*((void *)this + 1);
              unint64_t v11 = *((void *)this + 2);
            }

            else
            {
              *int v5 = *v12;
              unsigned int v20 = v12 + 1;
              *((void *)this + 1) = v20;
            }

            int v13 = *(_DWORD *)(a1 + 44) | 8;
            *(_DWORD *)(a1 + 44) = v13;
            if ((unint64_t)v20 < v11 && *v20 == 42)
            {
              *((void *)this + 1) = v20 + 1;
LABEL_49:
              *(_DWORD *)(a1 + 44) = v13 | 0x10;
              int v21 = *(void **)(a1 + 24);
              if (v21 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
              {
                int v21 = operator new(0x18uLL);
                v21[1] = 0LL;
                unsigned int v21[2] = 0LL;
                *int v21 = 0LL;
                *(void *)(a1 + 24) = v21;
              }

              uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v21);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v22 = (_BYTE *)*((void *)this + 1);
              unint64_t v14 = *((void *)this + 2);
              if ((unint64_t)v22 < v14 && *v22 == 48)
              {
                uint64_t v15 = v22 + 1;
                *((void *)this + 1) = v15;
LABEL_55:
                if ((unint64_t)v15 >= v14 || *v15 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v23 = v25[0];
                  BOOL v24 = (unsigned __int8 *)*((void *)this + 1);
                  unint64_t v14 = *((void *)this + 2);
                }

                else
                {
                  unsigned int v23 = *v15;
                  BOOL v24 = (unsigned __int8 *)(v15 + 1);
                  *((void *)this + 1) = v24;
                }

                *(_DWORD *)(a1 + 36) = v23;
                *(_DWORD *)(a1 + 44) |= 0x20u;
                if (v24 == (unsigned __int8 *)v14
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1LL;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_37;
        }
        goto LABEL_22;
      case 4u:
        int v8 = TagFallback & 7;
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_41;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_22;
        }
        int v13 = *(_DWORD *)(a1 + 44);
        goto LABEL_49;
      case 6u:
        int v8 = TagFallback & 7;
        uint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_55;
      default:
        int v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100067358( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 32),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

    int v8 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 32) = v8;
    if ((*(_DWORD *)(a2 + 40) & 8) == 0) {
      return;
    }
LABEL_12:
    int v9 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 8u;
    unsigned int v10 = *(std::string **)(a1 + 24);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unsigned int v10 = (std::string *)operator new(0x18uLL);
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 24) = v10;
    }

    std::string::operator=(v10, v9);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 32), a2);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 40),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  if ((v6 & 0x80) != 0)
  {
    int v8 = *(void *)(a1 + 64);
    if (v8 != 6) {
      goto LABEL_35;
    }
    int v12 = (void *)*v5;
LABEL_20:
    uint64_t v15 = *(_DWORD *)v12;
    unint64_t v16 = *((unsigned __int16 *)v12 + 2);
    if (v15 != 1953723747 || v16 != 28015) {
      goto LABEL_24;
    }
    v18 = *((char *)a2 + 23);
    if (v18 < 0)
    {
      if (a2[1] == 7)
      {
        int v19 = (int *)*a2;
        goto LABEL_55;
      }
    }

    else
    {
      int v19 = (int *)a2;
      if (v18 == 7)
      {
LABEL_55:
        BOOL v24 = *v19;
        int v25 = *(int *)((char *)v19 + 3);
        v27 = v24 != 1852534389 || v25 != 1853321070;
        if (a5 == 2 && !v27) {
          return 1LL;
        }
      }
    }

  a1[13] = -2084203453;
  return result;
}

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

    int v8 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(void *)(a1 + 24) = v8;
    if ((*(_DWORD *)(a2 + 40) & 8) == 0) {
      return;
    }
    goto LABEL_12;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 24),  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 40),  a2,  a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 44),  a2,  a4);
  }
  return result;
}

  *((_DWORD *)result + 5) = self->_rawGradeType;
  *((_BYTE *)result + 32) |= 4u;
  if ((*(_BYTE *)&self->_has & 8) == 0) {
    return result;
  }
LABEL_6:
  *((_DWORD *)result + 6) = self->_source;
  *((_BYTE *)result + 32) |= 8u;
  return result;
}

  PBDataWriterWriteInt32Field(a3, self->_turn, 5LL);
  has = (char)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  *((_DWORD *)a3 + 8) = self->_turn;
  *((_BYTE *)a3 + 44) |= 0x10u;
  has = (char)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  self->_turn = *((_DWORD *)a3 + 8);
  *(_BYTE *)&self->_has |= 0x10u;
  int v3 = *((_BYTE *)a3 + 44);
  if ((v3 & 0x40) == 0)
  {
LABEL_5:
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

          v37 = sub_10028F8D4((__int128 *)a1, (__int128 *)a2, (uint64_t (**)(void, void))a3);
          if ((v38 & 1) == 0) {
            goto LABEL_14;
          }
          v39 = sub_10028FB9C((__int128 *)a1, v37, a3);
          unsigned int v10 = (__n128 *)(v37 + 5);
          if (!sub_10028FB9C(v37 + 5, (__int128 *)a2, a3))
          {
            unint64_t v11 = v12 + 1;
            if (v39) {
              continue;
            }
LABEL_14:
            sub_10028EBF4(a1, v37, a3, -v12, a5 & 1);
            unsigned int v10 = (__n128 *)(v37 + 5);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }

          a4 = -v12;
          a2 = (__n128 *)v37;
          if (v39) {
            return;
          }
          goto LABEL_1;
        }

        if (v10 != a2) {
          sub_100290344((uint64_t)v10, a2, a2, a3);
        }
        return;
    }
  }

  *((_BYTE *)result + 28) = self->_isAllowOverCellular;
  *((_BYTE *)result + 32) |= 0x10u;
  if ((*(_BYTE *)&self->_has & 1) == 0) {
    return result;
  }
LABEL_6:
  *((void *)result + 1) = self->_secKey;
  *((_BYTE *)result + 32) |= 1u;
  return result;
}

  if (v6 != v8)
  {
LABEL_18:
    if (qword_1019349B0 != -1) {
      dispatch_once(&qword_1019349B0, &stru_101832930);
    }
    unint64_t v11 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      int v12 = *(unsigned __int8 *)(a1 + 189);
      int v13 = 68289283;
      unint64_t v14 = 0;
      uint64_t v15 = 2082;
      unint64_t v16 = "";
      int v17 = 1025;
      v18 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:thermal (high cpu tasks) transition, acceptable:%{private}hhd}",  (uint8_t *)&v13,  0x18u);
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101838C20);
    }
    unsigned int v10 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v11 = *(_DWORD *)(a4 + 96);
      int v12 = *(void *)(a4 + 4);
      int v13 = *(void *)(a4 + 12);
      unint64_t v14 = *(void *)(a4 + 20);
      uint64_t v15 = *a3;
      LODWORD(buf) = 67241217;
      HIDWORD(buf) = v11;
      v34 = 2049;
      v35 = v12;
      v36 = 2049;
      v37 = v13;
      v38 = 2050;
      v39 = v14;
      v40 = 1026;
      v41 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "onGpsNotification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01lf,notification,%{public}d",  (uint8_t *)&buf,  0x2Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      int v17 = *(_DWORD *)(a4 + 96);
      v18 = *(void *)(a4 + 4);
      int v19 = *(void *)(a4 + 12);
      unsigned int v20 = *(void *)(a4 + 20);
      int v21 = *a3;
      v23.i32[3] = 67241217;
      BOOL v24 = v17;
      int v25 = 2049;
      v26 = v18;
      v27 = 2049;
      v28 = v19;
      unsigned int v29 = 2050;
      v30 = v20;
      v31 = 1026;
      v32 = v21;
      unsigned int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "onGpsNotification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01l f,notification,%{public}d",  (char *)&v23.u64[1] + 4,  44);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationController::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocatio nProvider_Type::NotificationData &)",  "%s\n",  v22);
    }

    sub_100436870(a1, *(_DWORD *)(a1 + 320), v16, (unsigned int *)a3, a4);
    sub_1001A7214(a1 + 760, a3, a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v4 + 32),  a3);
  uint64_t v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(double *)(v4 + 48),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(void *)(v5 + 24),  (unint64_t)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(v5 + 40),  (unint64_t)a2,  a4);
  }

    int v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(void *)(a1 + 16) = v8;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
      return;
    }
    goto LABEL_12;
  }

  if ((has & 2) != 0) {
    unsigned int v10 = 2654435761LL * self->_expirationAgeSecs;
  }
  else {
    unsigned int v10 = 0LL;
  }
  return v9 ^ v4 ^ v10 ^ (unint64_t)-[NSMutableArray hash](self->_markets, "hash");
}

  v79 = 0LL;
  if ((*(_WORD *)&has & 0x8000) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  v78 = 2654435761LL * self->_nVeryHighCatherine;
  if ((*(_WORD *)&has & 0x400) != 0)
  {
LABEL_7:
    v77 = 2654435761LL * self->_nGoodCatherine;
    goto LABEL_14;
  }

  *((_DWORD *)result + 9) = LODWORD(self->_metsWR);
  *((_BYTE *)result + 52) |= 4u;
  if ((*(_BYTE *)&self->_has & 1) == 0) {
    return result;
  }
LABEL_6:
  *((_DWORD *)result + 7) = LODWORD(self->_metsFM);
  *((_BYTE *)result + 52) |= 1u;
  return result;
}

  int v19 = *a5;
  if (v9 == v10) {
    goto LABEL_15;
  }
  do
  {
    uint64_t result = sub_1000B9764(v19, (unsigned __int8 *)v9 + 16, (uint64_t)(v9 + 2));
    int v9 = (const void **)*v9;
  }

  while (v9 != v10);
  unsigned int v20 = *(void *)result;
  int v9 = v10;
LABEL_16:
  *a7 = v9;
  a7[1] = (const void **)v19;
  a7[2] = (const void **)v20;
  return result;
}

    -[CLDaemonMonitoringRecord setConditionUnsupported:](self, "setConditionUnsupported:", 1LL);
    goto LABEL_12;
  }

  if (v15 == objc_opt_class(&OBJC_CLASS___CLBeaconIdentityCondition))
  {
    if (objc_msgSend(objc_msgSend(a5, "vendor"), "isServiceEnabled:", @"CLBTLEFenceManager"))
    {
      unint64_t v16 = -[CLDaemonBeaconIdentityCondition initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:removePersistingFenceFromMonitoring:callbackHandler:]( objc_alloc(&OBJC_CLASS___CLDaemonBeaconIdentityCondition),  "initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:removePersistingFenceFromMo nitoring:callbackHandler:",  -[CLDaemonMonitoringRecord condition](self, "condition"),  a4,  a3,  a5,  -[CLDaemonMonitoringRecord recordIdentifier](self, "recordIdentifier"),  v9,  a8);
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  if (v15 != objc_opt_class(&OBJC_CLASS___CLMinimumAltitudeCondition)) {
    sub_10123F828();
  }
  unint64_t v16 = -[CLDaemonMinimumAltitudeCondition initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:callbackHandler:]( objc_alloc(&OBJC_CLASS___CLDaemonMinimumAltitudeCondition),  "initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:callbackHandler:",  -[CLDaemonMonitoringRecord condition](self, "condition"),  a4,  a3,  a5,  a6,  a8);
LABEL_10:
  -[CLDaemonMonitoringRecord setDaemonCondition:](self, "setDaemonCondition:", v16);
LABEL_12:
  -[CLDaemonMonitoringRecord setDaemonEvent:]( self,  "setDaemonEvent:",   -[CLMonitoringEvent initWithIdentifier:refinement:state:date:diagnostics:]( objc_alloc(&OBJC_CLASS___CLMonitoringEvent),  "initWithIdentifier:refinement:state:date:diagnostics:",  -[CLMonitoringEvent identifier](-[CLDaemonMonitoringRecord clientEvent](self, "clientEvent"), "identifier"),  0LL,  0LL,  +[NSDate now](&OBJC_CLASS___NSDate, "now"),  0LL));
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 21),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 23),  a2,  a4);
  }

  int v8 = *(void *)(v5 + 16);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1240 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  a2,  a4);
  int v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  (int)a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  int v7 = *(void *)(v5 + 24);
  if (!v7) {
    int v7 = *(void *)(qword_1019A12B0 + 24);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v7,  a2,  a4);
}

    int v8 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 24) = v8;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0) {
      return;
    }
LABEL_12:
    *(_DWORD *)(a1 + 32) |= 8u;
    int v9 = *(void **)(a1 + 16);
    if (!v9)
    {
      int v9 = operator new(0x20uLL);
      v9[1] = 0LL;
      v9[2] = 0LL;
      *int v9 = off_101844B58;
      *((_DWORD *)v9 + 6) = 0;
      *(void *)(a1 + 16) = v9;
    }

    unsigned int v10 = *(void *)(a2 + 16);
    if (!v10) {
      unsigned int v10 = *(void *)(qword_1019A12B8 + 16);
    }
    sub_10061F8CC(v9, v10);
  }

    int v8 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 20) = v8;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
      return;
    }
LABEL_12:
    *(_DWORD *)(a1 + 36) |= 8u;
    int v9 = *(void **)(a1 + 24);
    if (!v9)
    {
      int v9 = operator new(0x28uLL);
      *int v9 = &off_101845008;
      v9[1] = 0LL;
      v9[2] = 0LL;
      v9[3] = 0LL;
      *((_DWORD *)v9 + 8) = 0;
      *(void *)(a1 + 24) = v9;
    }

    unsigned int v10 = *(void *)(a2 + 24);
    if (!v10) {
      unsigned int v10 = *(void *)(qword_1019A12C0 + 24);
    }
    sub_100624114((uint64_t)v9, v10);
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  int v6 = v5[9];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  a2,  a4);
  int v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[7],  a2,  a4);
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  int v6 = v5[9];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  }

  int v7 = *(void *)(v5 + 16);
  if (!v7) {
    int v7 = *(void *)(qword_1019A13A0 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  int v6 = v5[10];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  int v7 = *(void *)(v5 + 16);
  if (!v7) {
    int v7 = *(void *)(qword_1019A14B8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  sub_10066A550((uint64_t)buf);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&buf[8];
  *(_OWORD *)(a1 + 108) = *(_OWORD *)&buf[20];
  *(_OWORD *)(a1 + 124) = v20;
  *(_OWORD *)(a1 + 140) = v21;
  *(_DWORD *)(a1 + 156) = v22;
  sub_100682B28(a1);
  sub_100682B28(v4);
  return a1;
}

    unsigned int v20 = sub_100F5A080();
    int v21 = *(_OWORD *)&p_fSessionMetrics->sumCalibrationDistanceFailPedometer;
    v50 = *(_OWORD *)&p_fSessionMetrics->sumCalibrationDistanceFailOther;
    v51 = v21;
    unsigned int v22 = *(_OWORD *)&p_fSessionMetrics->sumCalibrationDistanceInvalidLength;
    v52 = *(_OWORD *)&p_fSessionMetrics->sumCalibrationDistanceInvalidGain;
    v53 = v22;
    unsigned int v23 = *(_OWORD *)&p_fSessionMetrics->endTime;
    v48 = *(_OWORD *)&p_fSessionMetrics->session;
    v49 = v23;
    sub_100F5C9A8(v20, &v48);
    operator delete(v13);
    sub_101024EBC(buf);
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101849540);
  }
  BOOL v24 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    int v25 = self->fSessionMetrics.sumCalibrationDistanceSuccess;
    sumCalibrationDistanceFailOther = self->fSessionMetrics.sumCalibrationDistanceFailOther;
    v27 = self->fSessionMetrics.sumCalibrationDistanceFailGps;
    sumCalibrationDistanceFailPedometer = self->fSessionMetrics.sumCalibrationDistanceFailPedometer;
    unsigned int v29 = self->fSessionMetrics.sumCalibrationDistanceFailGradient;
    sumCalibrationDistanceInvalidGain = self->fSessionMetrics.sumCalibrationDistanceInvalidGain;
    sumCalibrationDistanceInvalidSpeed = self->fSessionMetrics.sumCalibrationDistanceInvalidSpeed;
    sumCalibrationDistanceInvalidLength = self->fSessionMetrics.sumCalibrationDistanceInvalidLength;
    startTime = self->fSessionMetrics.startTime;
    endTime = self->fSessionMetrics.endTime;
    *(_DWORD *)buf = 134220288;
    v73 = v25;
    v74 = 2048;
    v75 = sumCalibrationDistanceFailOther;
    v76 = 2048;
    v77 = v27;
    v78 = 2048;
    v79 = sumCalibrationDistanceFailPedometer;
    v80 = 2048;
    v81 = v29;
    v82 = 2048;
    v83 = sumCalibrationDistanceInvalidGain;
    v84 = 2048;
    v85 = sumCalibrationDistanceInvalidSpeed;
    v86 = 2048;
    v87 = sumCalibrationDistanceInvalidLength;
    v88 = 2048;
    v89 = startTime;
    v90 = 2048;
    v91 = endTime;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "SessionMetrics,End,Summary,DistanceFusionSuccess,%0.6f,DistanceFusionOther,%0.6f,DistanceFusionGPS,%0.6f,DistanceF usionPedometer,%0.6f,DistanceFusionGradient,%0.6f,DistanceFusionGain,%0.6f,DistanceFusionSpeed,%0.6f,DistanceFusio nLength,%0.6f,startTime,%0.6f,endTime,%0.6f",  buf,  0x66u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101849540);
    }
    v35 = self->fSessionMetrics.sumCalibrationDistanceSuccess;
    v36 = self->fSessionMetrics.sumCalibrationDistanceFailOther;
    v37 = self->fSessionMetrics.sumCalibrationDistanceFailGps;
    v38 = self->fSessionMetrics.sumCalibrationDistanceFailPedometer;
    v39 = self->fSessionMetrics.sumCalibrationDistanceFailGradient;
    v40 = self->fSessionMetrics.sumCalibrationDistanceInvalidGain;
    v41 = self->fSessionMetrics.sumCalibrationDistanceInvalidSpeed;
    v42 = self->fSessionMetrics.sumCalibrationDistanceInvalidLength;
    v43 = self->fSessionMetrics.startTime;
    v44 = self->fSessionMetrics.endTime;
    v54 = 134220288;
    *(double *)v55 = v35;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v36;
    v56 = 2048;
    v57 = v37;
    v58 = 2048;
    v59 = v38;
    v60 = 2048;
    v61 = v39;
    v62 = 2048;
    v63 = v40;
    v64 = 2048;
    v65 = v41;
    v66 = 2048;
    v67 = v42;
    v68 = 2048;
    v69 = v43;
    v70 = 2048;
    v71 = v44;
    LODWORD(v47) = 102;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "SessionMetrics,End,Summary,DistanceFusionSuccess,%0.6f,DistanceFusionOther,%0.6f,DistanceFusionGPS,%0.6f,DistanceF usionPedometer,%0.6f,DistanceFusionGradient,%0.6f,DistanceFusionGain,%0.6f,DistanceFusionSpeed,%0.6f,DistanceFusio nLength,%0.6f,startTime,%0.6f,endTime,%0.6f",  COERCE_DOUBLE(&v54),  v47,  *(double *)&v48,  *((double *)&v48 + 1),  *(double *)&v49,  *((double *)&v49 + 1),  *(double *)&v50,  *((double *)&v50 + 1),  *(double *)&v51,  *((double *)&v51 + 1));
    v46 = (uint8_t *)v45;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CMStrideCalibrationStats endSessionMetrics:]", "%s\n", v45);
    if (v46 != buf) {
      free(v46);
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  a2,  a4);
  }

  if ((sub_1002A7CB0(*(void *)(qword_1019A1588 + 24), "MotionThreadPriority", &v39) & 1) == 0) {
    v39 = -1;
  }
  unsigned int v10 = pthread_self();
  unint64_t v11 = pthread_getschedparam(v10, &v37, &v38);
  if (v11)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184AFD8);
    }
    int v12 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0].version) = 67240192;
      HIDWORD(buf[0].version) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Could not get scheduling parameters for motion thread, error = %{public}d",  (uint8_t *)buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184AFD8);
      }
      LODWORD(context.version) = 67240192;
      HIDWORD(context.version) = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Could not get scheduling parameters for motion thread, error = %{public}d",  &context,  8);
      unint64_t v14 = (CFRunLoopObserverContext *)v13;
      sub_10029211C("Generic", 1LL, 0, 0LL, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    sched_priority = v39;
    if (v39 <= 0)
    {
      priority_max = sched_get_priority_max(v37);
      sched_priority = v38.sched_priority;
      if (priority_max > v38.sched_priority) {
        sched_priority = priority_max;
      }
    }

    v38.sched_priority = sched_priority;
    int v17 = pthread_self();
    pthread_setschedparam(v17, v37, &v38);
    v18 = pthread_self();
    pthread_getschedparam(v18, &v37, &v38);
  }

  *(void *)qword_1019A1588 = CFRunLoopGetCurrent();
  sub_1006E3124(a1);
  pthread_dependency_fulfill_np(a1, 0LL);
  memset(&context, 0, sizeof(context));
  int v19 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0LL, &context);
  if (!v19)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184AFD8);
    }
    unsigned int v20 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].version) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "could not create runloop source",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184AFD8);
      }
      LOWORD(v40[0]) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not create runloop source",  v40,  v36);
      v35 = (CFRunLoopObserverContext *)v34;
      sub_10029211C("Generic", 1LL, 0, 0LL, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v34);
      if (v35 != buf) {
        free(v35);
      }
    }
  }

  CFRunLoopAddSource(*(CFRunLoopRef *)qword_1019A1588, v19, kCFRunLoopCommonModes);
  int v21 = _CFRunLoopSetPerCalloutAutoreleasepoolEnabled(1LL);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10184AFF8);
  }
  unsigned int v22 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67174657;
    HIDWORD(buf[0].version) = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "_CFRunLoopSetPerCalloutAutoreleasepoolEnabled() returned a value of, %{private}d.",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184AFF8);
    }
    v40[0] = 67174657;
    v40[1] = v21;
    LODWORD(v36) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "_CFRunLoopSetPerCalloutAutoreleasepoolEnabled() returned a value of, %{private}d.",  v40,  v36);
    v31 = (CFRunLoopObserverContext *)v30;
    sub_10029211C("Generic", 1LL, 0, 2LL, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  if (v21)
  {
    unsigned int v23 = 0LL;
    BOOL v24 = 0LL;
    Mutable = 0LL;
  }

  else
  {
    Mutable = CFArrayCreateMutable(0LL, 0LL, 0LL);
    buf[0].version = 0LL;
    buf[0].info = Mutable;
    buf[0].retain = (const void *(__cdecl *)(const void *))&_CFRetain;
    buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
    buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
    BOOL v24 = CFRunLoopObserverCreate(0LL, 1uLL, 1u, -2147483647LL, (CFRunLoopObserverCallBack)sub_1006E2AD4, buf);
    unsigned int v23 = CFRunLoopObserverCreate(0LL, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_1006E2AD4, buf);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1019A1588, v24, kCFRunLoopCommonModes);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1019A1588, v23, kCFRunLoopCommonModes);
  }

  *(void *)(qword_1019A1588 + 40) = 0LL;
  Current = CFAbsoluteTimeGetCurrent();
  v27 = CFRunLoopTimerCreateWithHandler(kCFAllocatorDefault, Current + 1.0, 5.0, 0LL, 0LL, &stru_10184AF78);
  CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1019A1588, v27, kCFRunLoopCommonModes);
  objc_autoreleasePoolPop(v2);
  CFRunLoopRun();
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10184AFD8);
  }
  v28 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf[0].version) = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Motion thread exiting", (uint8_t *)buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10184AFD8);
    }
    LOWORD(context.version) = 0;
    LODWORD(v36) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Motion thread exiting",  &context,  v36);
    v33 = (CFRunLoopObserverContext *)v32;
    sub_10029211C("Generic", 1LL, 0, 0LL, "static void *CLMotionCore::runMotionThread(void *)", "%s\n", v32);
    if (v33 != buf) {
      free(v33);
    }
  }

  if (v27)
  {
    CFRunLoopRemoveTimer(*(CFRunLoopRef *)qword_1019A1588, v27, kCFRunLoopCommonModes);
    CFRelease(v27);
  }

  if (v23)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1019A1588, v23, kCFRunLoopCommonModes);
    CFRelease(v23);
  }

  if (v24)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1019A1588, v24, kCFRunLoopCommonModes);
    CFRelease(v24);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v19)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1019A1588, v19, kCFRunLoopCommonModes);
    CFRelease(v19);
  }

  return 0LL;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

  if ((has & 4) != 0)
  {
    longitude = self->_longitude;
    int v12 = -longitude;
    if (longitude >= 0.0) {
      int v12 = self->_longitude;
    }
    int v13 = floor(v12 + 0.5);
    unint64_t v14 = (v12 - v13) * 1.84467441e19;
    unsigned int v10 = 2654435761u * (unint64_t)fmod(v13, 1.84467441e19);
    if (v14 >= 0.0)
    {
      if (v14 > 0.0) {
        v10 += (unint64_t)v14;
      }
    }

    else
    {
      v10 -= (unint64_t)fabs(v14);
    }
  }

  else
  {
    unsigned int v10 = 0LL;
  }

  uint64_t v15 = v9 ^ v4 ^ v10 ^ PBRepeatedUInt64Hash(&self->_macs);
  return v15 ^ PBRepeatedDoubleHash(&self->_modes);
}

  if (*(double *)(a2 + 56) >= *(double *)(a3 + 40)
    && *(double *)(a2 + 40) <= *(double *)(a3 + 56)
    && !(*(unsigned __int8 *)(a2 + 96) | *(unsigned __int8 *)(a3 + 96)))
  {
    return sub_10084EAE0( *(unsigned int *)(a1 + 40),  *(void **)a1,  a2,  *(_DWORD *)(a1 + 40),  *(__int128 ***)a1,  a3,  0,  *(unsigned __int8 *)(a1 + 44),  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void **)(a1 + 24),  *(_BYTE **)(a1 + 32));
  }

  return 1LL;
}

  if (a1 != a2)
  {
    int v19 = 0LL;
    unsigned int v20 = a1;
    v59 = a2;
    do
    {
      int v21 = v69[0];
      if (!v69[0]) {
        goto LABEL_22;
      }
      unsigned int v22 = v13;
      do
      {
        unsigned int v23 = v21;
        BOOL v24 = v22;
        int v25 = v21[4];
        v26 = v21 + 1;
        if (v25 >= v19)
        {
          v26 = v23;
          unsigned int v22 = (void **)v23;
        }

        int v21 = (void *)*v26;
      }

      while (v21);
      if (v22 == v13) {
        goto LABEL_22;
      }
      if (v25 < v19) {
        unsigned int v23 = v24;
      }
      if (v19 < v23[4])
      {
LABEL_22:
        v27 = *(double **)v20;
        if (*(void *)v20 == *(void *)(v20 + 8)) {
          __assert_rtn("front", "range.hpp", 121, "!boost::empty(rng)");
        }
        v28 = v13;
        v30 = *a3;
        unsigned int v29 = a3[1];
        if ((unint64_t)((char *)v29 - (char *)*a3) < 0x40
          || (LOBYTE(__p) = 0, v63 = 0uLL, LOBYTE(v64) = 0, v30 + 2 == v29))
        {
LABEL_76:
          sub_100847D10(a8, 30);
          v54 = 0LL;
          goto LABEL_77;
        }

        do
        {
          v31 = sub_1008452A4((uint64_t)&__p, v27, v30, v30 + 2, (uint64_t)&v63);
          v32 = v30 + 4 != v29 && v31;
          v30 += 2;
        }

        while (v32);
        a2 = v59;
        if (!(_BYTE)v64)
        {
          if (DWORD2(v63) && HIDWORD(v63) && SDWORD2(v63) >= 1)
          {
            if (!((_DWORD)v63 + DWORD1(v63))) {
              goto LABEL_76;
            }
          }

          else if (!(_DWORD)v63)
          {
            goto LABEL_76;
          }
        }

        int v13 = v28;
      }

      v20 += 24LL;
      ++v19;
    }

    while (v20 != a2);
  }

  v33 = a4;
  while (v10 != a7)
  {
    sub_1003CF0F0(&v68, (uint64_t *)(v10 + 64), (uint64_t *)(v10 + 64));
    sub_1003CF0F0(&v68, (uint64_t *)(v10 + 144), (uint64_t *)(v10 + 144));
    v10 += 200LL;
    if (v10 - *v33 == 4000)
    {
      v34 = v33[1];
      ++v33;
      unsigned int v10 = v34;
    }
  }

  __p = 0LL;
  v66 = 0LL;
  v67 = 0LL;
  if (a1 != a2)
  {
    v35 = 0LL;
    v36 = 0LL;
    do
    {
      v37 = v69[0];
      if (!v69[0]) {
        goto LABEL_53;
      }
      v38 = v13;
      do
      {
        v39 = v37;
        v40 = v38;
        v41 = v37[4];
        v42 = v37 + 1;
        if (v41 >= v36)
        {
          v42 = v39;
          v38 = (void **)v39;
        }

        v37 = (void *)*v42;
      }

      while (v37);
      if (v38 == v13) {
        goto LABEL_53;
      }
      if (v41 < v36) {
        v39 = v40;
      }
      if (v36 < v39[4])
      {
LABEL_53:
        if (v35 >= v67)
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)__p) >> 4);
          v45 = v44 + 1;
          if (v44 + 1 > 0x555555555555555LL) {
            sub_100007008();
          }
          if (0x5555555555555556LL * ((v67 - (_BYTE *)__p) >> 4) > v45) {
            v45 = 0x5555555555555556LL * ((v67 - (_BYTE *)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v67 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            v46 = 0x555555555555555LL;
          }
          else {
            v46 = v45;
          }
          if (v46) {
            v47 = (char *)sub_1000BB1F4((uint64_t)&v67, v46);
          }
          else {
            v47 = 0LL;
          }
          v48 = &v47[48 * v44];
          *(void *)v48 = a1;
          v48[40] = 0;
          v50 = (char *)__p;
          v49 = v66;
          v51 = v48;
          if (v66 != __p)
          {
            do
            {
              v52 = *((_OWORD *)v49 - 3);
              v53 = *((_OWORD *)v49 - 2);
              *(_OWORD *)(v51 - 23) = *(_OWORD *)(v49 - 23);
              *((_OWORD *)v51 - 3) = v52;
              *((_OWORD *)v51 - 2) = v53;
              v51 -= 48;
              v49 -= 48;
            }

            while (v49 != v50);
            v49 = v50;
          }

          v35 = v48 + 48;
          __p = v51;
          v66 = v48 + 48;
          v67 = &v47[48 * v46];
          if (v49) {
            operator delete(v49);
          }
        }

        else
        {
          *(void *)v35 = a1;
          v43 = v63;
          *(_OWORD *)(v35 + 24) = v64;
          *(_OWORD *)(v35 + 8) = v43;
          v35[40] = 0;
          v35 += 48;
        }

        v66 = v35;
      }

      a1 += 24LL;
      ++v36;
    }

    while (a1 != a2);
  }

  LOBYTE(v63) = 0;
  *((void *)&v63 + 1) = a9;
  v61 = a9;
  v62 = a9;
  sub_10085583C((uint64_t *)&__p, (uint64_t)&v63, (uint64_t)&v62, (uint64_t)&v61, 0x10uLL);
  v54 = (_BYTE)v63 == 0;
  if ((_BYTE)v63) {
    v55 = 31;
  }
  else {
    v55 = 0;
  }
  sub_100847D10(a8, v55);
  if (__p)
  {
    v66 = (char *)__p;
    operator delete(__p);
  }

  for (i = (unint64_t)a1 + 200; i < j; i += 200LL)
  {
    unsigned int v20 = *(void *)(i + 48);
    if ((void)v105 == v20)
    {
      int v21 = *(void *)(i + 56);
      unsigned int v23 = __OFSUB__(*((void *)&v105 + 1), v21);
      unsigned int v22 = *((void *)&v105 + 1) - v21 < 0;
      if (*((void *)&v105 + 1) == v21)
      {
        BOOL v24 = *(void *)(i + 64);
        unsigned int v23 = __OFSUB__((void)v106, v24);
        unsigned int v22 = (uint64_t)v106 - v24 < 0;
        if ((void)v106 == v24)
        {
          int v25 = *(void *)(i + 80);
          unsigned int v23 = __OFSUB__((void)v107, v25);
          unsigned int v22 = (uint64_t)v107 - v25 < 0;
          if ((void)v107 == v25)
          {
            v26 = *(void *)(i + 72);
            unsigned int v23 = __OFSUB__(*((void *)&v106 + 1), v26);
            unsigned int v22 = *((void *)&v106 + 1) - v26 < 0;
          }
        }
      }

      if (v22 != v23
        || v106 == *(_OWORD *)(i + 64)
        && *((void *)&v105 + 1) == v21
        && (void)v107 == *(void *)(i + 80)
        && (sub_10085DFAC((uint64_t)&v102, i, a3) & 1) != 0)
      {
        break;
      }
    }

    else if ((uint64_t)v105 < v20)
    {
      break;
    }
  }

  for (i = (unint64_t)a1 + 200; i < j; i += 200LL)
  {
    unsigned int v20 = *(void *)(i + 128);
    if ((void)v110 == v20)
    {
      int v21 = *(void *)(i + 136);
      unsigned int v23 = __OFSUB__(*((void *)&v110 + 1), v21);
      unsigned int v22 = *((void *)&v110 + 1) - v21 < 0;
      if (*((void *)&v110 + 1) == v21)
      {
        BOOL v24 = *(void *)(i + 144);
        unsigned int v23 = __OFSUB__((void)v111, v24);
        unsigned int v22 = (uint64_t)v111 - v24 < 0;
        if ((void)v111 == v24)
        {
          int v25 = *(void *)(i + 160);
          unsigned int v23 = __OFSUB__((void)v112, v25);
          unsigned int v22 = (uint64_t)v112 - v25 < 0;
          if ((void)v112 == v25)
          {
            v26 = *(void *)(i + 152);
            unsigned int v23 = __OFSUB__(*((void *)&v111 + 1), v26);
            unsigned int v22 = *((void *)&v111 + 1) - v26 < 0;
          }
        }
      }

      if (v22 != v23
        || v111 == *(_OWORD *)(i + 144)
        && *((void *)&v110 + 1) == v21
        && (void)v112 == *(void *)(i + 160)
        && (sub_100862154((uint64_t)&v102, i, a3) & 1) != 0)
      {
        break;
      }
    }

    else if ((uint64_t)v110 < v20)
    {
      break;
    }
  }

  int v8 = sub_101254018();
  return (char *)nullsub_867(v8);
}

    unint64_t v14 = v128;
    if (v128 >= v129)
    {
      unint64_t v16 = (char *)__p;
      int v17 = (v128 - (_BYTE *)__p) >> 3;
      v18 = v17 + 1;
      int v19 = v129 - (_BYTE *)__p;
      if ((v129 - (_BYTE *)__p) >> 2 > v18) {
        v18 = v19 >> 2;
      }
      else {
        unsigned int v20 = v18;
      }
      if (v20)
      {
        int v21 = (char *)sub_1000071BC((uint64_t)&v129, v20);
        unint64_t v16 = (char *)__p;
        unint64_t v14 = v128;
      }

      else
      {
        int v21 = 0LL;
      }

      unsigned int v22 = &v21[8 * v17];
      *(void *)unsigned int v22 = *(void *)(v10 - 176);
      uint64_t v15 = v22 + 8;
      while (v14 != v16)
      {
        unsigned int v23 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v22 - 1) = v23;
        v22 -= 8;
      }

      __p = v22;
      v128 = v15;
      v129 = &v21[8 * v20];
      if (v16) {
        operator delete(v16);
      }
    }

    else
    {
      *(void *)v128 = *(void *)(v10 - 176);
      uint64_t v15 = v14 + 8;
    }

    v128 = v15;
    BOOL v24 = v4;
    if (v4 == *v6) {
      BOOL v24 = *(v6 - 1) + 4032;
    }
    int v25 = (__int128 *)(v24 - 192);
    v26 = v125;
    if (v125 >= v126)
    {
      v36 = (char *)v124;
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v125 - (_BYTE *)v124) >> 6);
      v38 = v37 + 1;
      if (v37 + 1 > 0x155555555555555LL) {
        sub_100007008();
      }
      if (0x5555555555555556LL * ((v126 - (_BYTE *)v124) >> 6) > v38) {
        v38 = 0x5555555555555556LL * ((v126 - (_BYTE *)v124) >> 6);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v126 - (_BYTE *)v124) >> 6) >= 0xAAAAAAAAAAAAAALL) {
        v39 = 0x155555555555555LL;
      }
      else {
        v39 = v38;
      }
      if (v39)
      {
        v40 = (char *)sub_10001DF10((uint64_t)&v126, v39);
        v36 = (char *)v124;
        v26 = v125;
      }

      else
      {
        v40 = 0LL;
      }

      v41 = &v40[64 * ((v125 - (_BYTE *)v124) >> 6)];
      v42 = *v25;
      v43 = v25[1];
      v44 = v25[3];
      *((_OWORD *)v41 + 2) = v25[2];
      *((_OWORD *)v41 + 3) = v44;
      *(_OWORD *)v41 = v42;
      *((_OWORD *)v41 + 1) = v43;
      v45 = v25[4];
      v46 = v25[5];
      v47 = v25[7];
      *((_OWORD *)v41 + 6) = v25[6];
      *((_OWORD *)v41 + 7) = v47;
      *((_OWORD *)v41 + 4) = v45;
      *((_OWORD *)v41 + 5) = v46;
      v48 = v25[8];
      v49 = v25[9];
      v50 = v25[11];
      *((_OWORD *)v41 + 10) = v25[10];
      *((_OWORD *)v41 + 11) = v50;
      *((_OWORD *)v41 + 8) = v48;
      *((_OWORD *)v41 + 9) = v49;
      if (v26 == v36)
      {
        v61 = &v40[192 * v37];
      }

      else
      {
        v51 = &v40[192 * v37];
        do
        {
          v52 = *((_OWORD *)v26 - 12);
          v53 = *((_OWORD *)v26 - 11);
          v54 = *((_OWORD *)v26 - 9);
          *((_OWORD *)v51 - 10) = *((_OWORD *)v26 - 10);
          *((_OWORD *)v51 - 9) = v54;
          *((_OWORD *)v51 - 12) = v52;
          *((_OWORD *)v51 - 11) = v53;
          v55 = *((_OWORD *)v26 - 8);
          v56 = *((_OWORD *)v26 - 7);
          v57 = *((_OWORD *)v26 - 5);
          *((_OWORD *)v51 - 6) = *((_OWORD *)v26 - 6);
          *((_OWORD *)v51 - 5) = v57;
          *((_OWORD *)v51 - 8) = v55;
          *((_OWORD *)v51 - 7) = v56;
          v58 = *((_OWORD *)v26 - 4);
          v59 = *((_OWORD *)v26 - 3);
          v60 = *((_OWORD *)v26 - 1);
          v61 = v51 - 192;
          *((_OWORD *)v51 - 2) = *((_OWORD *)v26 - 2);
          *((_OWORD *)v51 - 1) = v60;
          *((_OWORD *)v51 - 4) = v58;
          *((_OWORD *)v51 - 3) = v59;
          v26 -= 192;
          v51 -= 192;
        }

        while (v26 != v36);
      }

      uint64_t v5 = v41 + 192;
      v124 = v61;
      v125 = v41 + 192;
      v126 = &v40[192 * v39];
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      v27 = *v25;
      v28 = *(_OWORD *)(v24 - 176);
      unsigned int v29 = *(_OWORD *)(v24 - 144);
      *((_OWORD *)v125 + 2) = *(_OWORD *)(v24 - 160);
      *((_OWORD *)v26 + 3) = v29;
      *(_OWORD *)v26 = v27;
      *((_OWORD *)v26 + 1) = v28;
      v30 = *(_OWORD *)(v24 - 128);
      v31 = *(_OWORD *)(v24 - 112);
      v32 = *(_OWORD *)(v24 - 80);
      *((_OWORD *)v26 + 6) = *(_OWORD *)(v24 - 96);
      *((_OWORD *)v26 + 7) = v32;
      *((_OWORD *)v26 + 4) = v30;
      *((_OWORD *)v26 + 5) = v31;
      v33 = *(_OWORD *)(v24 - 64);
      v34 = *(_OWORD *)(v24 - 48);
      v35 = *(_OWORD *)(v24 - 16);
      *((_OWORD *)v26 + 10) = *(_OWORD *)(v24 - 32);
      *((_OWORD *)v26 + 11) = v35;
      *((_OWORD *)v26 + 8) = v33;
      *((_OWORD *)v26 + 9) = v34;
      uint64_t v5 = v26 + 192;
    }

    v125 = v5;
    int v7 = *v6;
    if (v4 == *v6)
    {
      v62 = *--v6;
      int v7 = v62;
      uint64_t v4 = v62 + 4032;
    }

    v63 = *(double *)(v4 - 192);
    v4 -= 192LL;
    int v8 = v63;
    int v13 = v4;
    if (v4 == *((void *)&v131 + 1)) {
      goto LABEL_54;
    }
  }

  unint64_t v11 = *(v6 - 1);
  int v12 = *(double *)(v11 + 3840);
  if (v8 - v12 < 5.0)
  {
    int v13 = v7;
    unsigned int v10 = v11 + 4032;
    goto LABEL_11;
  }

  int v13 = v7;
LABEL_54:
  if (__p != v128)
  {
    v65 = v128 - 8;
    if (v128 - 8 > __p)
    {
      v66 = (char *)__p + 8;
      do
      {
        v67 = *((void *)v66 - 1);
        *((void *)v66 - 1) = *(void *)v65;
        *(void *)v65 = v67;
        v65 -= 8;
        v68 = v66 >= v65;
        v66 += 8;
      }

      while (!v68);
    }

    v69 = (double *)v124;
    v70 = v5 - 192;
    if (v124 != v5 && v70 > v124)
    {
      v72 = (char *)v124 + 192;
      do
      {
        v148 = *((_OWORD *)v72 - 5);
        v147 = *((_OWORD *)v72 - 6);
        v146 = *((_OWORD *)v72 - 7);
        v145 = *((_OWORD *)v72 - 8);
        v152 = *((_OWORD *)v72 - 1);
        v151 = *((_OWORD *)v72 - 2);
        v150 = *((_OWORD *)v72 - 3);
        v149 = *((_OWORD *)v72 - 4);
        *(_OWORD *)buf = *((_OWORD *)v72 - 12);
        *(_OWORD *)&buf[16] = *((_OWORD *)v72 - 11);
        *(_OWORD *)&buf[32] = *((_OWORD *)v72 - 10);
        v144 = *((_OWORD *)v72 - 9);
        v73 = *(_OWORD *)v70;
        v74 = *((_OWORD *)v70 + 1);
        v75 = *((_OWORD *)v70 + 3);
        *((_OWORD *)v72 - 10) = *((_OWORD *)v70 + 2);
        *((_OWORD *)v72 - 9) = v75;
        *((_OWORD *)v72 - 12) = v73;
        *((_OWORD *)v72 - 11) = v74;
        v76 = *((_OWORD *)v70 + 4);
        v77 = *((_OWORD *)v70 + 5);
        v78 = *((_OWORD *)v70 + 7);
        *((_OWORD *)v72 - 6) = *((_OWORD *)v70 + 6);
        *((_OWORD *)v72 - 5) = v78;
        *((_OWORD *)v72 - 8) = v76;
        *((_OWORD *)v72 - 7) = v77;
        v79 = *((_OWORD *)v70 + 8);
        v80 = *((_OWORD *)v70 + 9);
        v81 = *((_OWORD *)v70 + 11);
        *((_OWORD *)v72 - 2) = *((_OWORD *)v70 + 10);
        *((_OWORD *)v72 - 1) = v81;
        *((_OWORD *)v72 - 4) = v79;
        *((_OWORD *)v72 - 3) = v80;
        v82 = *(_OWORD *)buf;
        v83 = *(_OWORD *)&buf[16];
        v84 = v144;
        *((_OWORD *)v70 + 2) = *(_OWORD *)&buf[32];
        *((_OWORD *)v70 + 3) = v84;
        *(_OWORD *)v70 = v82;
        *((_OWORD *)v70 + 1) = v83;
        v85 = v145;
        v86 = v146;
        v87 = v148;
        *((_OWORD *)v70 + 6) = v147;
        *((_OWORD *)v70 + 7) = v87;
        *((_OWORD *)v70 + 4) = v85;
        *((_OWORD *)v70 + 5) = v86;
        v88 = v149;
        v89 = v150;
        v90 = v152;
        *((_OWORD *)v70 + 10) = v151;
        *((_OWORD *)v70 + 11) = v90;
        *((_OWORD *)v70 + 8) = v88;
        *((_OWORD *)v70 + 9) = v89;
        v70 -= 192;
        v68 = v72 >= v70;
        v72 += 192;
      }

      while (!v68);
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101863518);
    }
    v91 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = (v128 - (_BYTE *)__p) >> 3;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "Classifying %lu odometer entries", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      *(_DWORD *)v134 = 134217984;
      *(void *)&v134[4] = (v128 - (_BYTE *)__p) >> 3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Classifying %lu odometer entries",  v134);
      v110 = (char *)v109;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, BOOL)",  "%s\n",  v109);
      if (v110 != buf) {
        free(v110);
      }
    }

    sub_100CD6960((double *)(a1 + 48), (uint64_t *)&__p);
    if (*(void *)(a1 + 472) == 1LL)
    {
      if (*(_BYTE *)(a1 + 2130)) {
        v92 = 1;
      }
      else {
        v92 = 3;
      }
    }

    else
    {
      v92 = *(_DWORD *)(a1 + 152);
    }

    *(_DWORD *)(a1 + 792) = v92;
    *(void *)(a1 + 1992) = *((void *)v125 - 24);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101863518);
    }
    v94 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      v95 = *(_DWORD *)(a1 + 792);
      v96 = *(void *)(a1 + 1992);
      v97 = *((void *)v125 - 16);
      v98 = *((void *)v125 - 18);
      v100 = *((void *)v125 - 23);
      v99 = *((void *)v125 - 22);
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v95;
      *(_WORD *)&buf[8] = 2048;
      *(void *)&buf[10] = v96;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v97;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v98;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = v100;
      LOWORD(v144) = 2048;
      *(void *)((char *)&v144 + 2) = v99;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEBUG,  "OdometerQuality,%d,MostRecentOdometerEntry,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf",  buf,  0x3Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      v111 = *(_DWORD *)(a1 + 792);
      v112 = *(void *)(a1 + 1992);
      v113 = *((void *)v125 - 16);
      v114 = *((void *)v125 - 18);
      v116 = *((void *)v125 - 23);
      v115 = *((void *)v125 - 22);
      *(_DWORD *)v134 = 67110400;
      *(_DWORD *)&v134[4] = v111;
      *(_WORD *)&v134[8] = 2048;
      *(void *)&v134[10] = v112;
      v135 = 2048;
      v136 = v113;
      v137 = 2048;
      v138 = v114;
      v139 = 2048;
      v140 = v116;
      v141 = 2048;
      v142 = v115;
      LODWORD(v119) = 58;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "OdometerQuality,%d,MostRecentOdometerEntry,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf",  v134,  v119,  *(double *)&v121,  *((double *)&v121 + 1),  v122,  v123);
      v118 = (char *)v117;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, BOOL)",  "%s\n",  v117);
      if (v118 != buf) {
        free(v118);
      }
      LOBYTE(a2) = v120;
    }

    *(_OWORD *)v134 = v132;
    v101 = *((double *)&v133 + 1);
    if (*((void *)&v133 + 1) != v13)
    {
      v102 = *(void **)&v133;
      do
      {
        v103 = *(_DWORD *)(a1 + 792);
        v104 = *(void **)(a1 + 656);
        v121 = *(_OWORD *)v134;
        v122 = *(double *)&v102;
        v123 = v101;
        sub_100991F6C(v104, (uint64_t)&v121, buf);
        v105 = *(void *)&buf[24];
        if (*(void *)&buf[24] == **(void **)&buf[16]) {
          v105 = *(void *)(*(void *)&buf[16] - 8LL) + 4032LL;
        }
        *(_DWORD *)(v105 - 112) = v103;
        if (*(void *)&v101 == *v102)
        {
          v106 = *--v102;
          *(void *)&v101 = v106 + 4032;
        }

        *(void *)&v101 -= 192LL;
      }

      while (*(void *)&v101 != v13);
    }

    goto LABEL_95;
  }

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

  sub_1002F0B04(buf);
  unsigned int v22 = (unsigned __int8 *)(a1 + 616);
  unsigned int v23 = sub_1002A6F64(*(uint64_t *)&buf[0], "FenceUseWifiPositioning", (BOOL *)(a1 + 616));
  BOOL v24 = v23;
  int v25 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_15;
  }
  v26 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (!v24) {
      goto LABEL_21;
    }
  }

  else
  {
LABEL_15:
    if (!v23) {
      goto LABEL_21;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  v28 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v29 = *v22;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding WiFi positioning usage to %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    v121 = *v22;
    v161 = 67174657;
    LODWORD(v162) = v121;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding WiFi positioning usage to %{private}d",  &v161,  v157);
    v123 = (char *)v122;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v122);
  }

  (*(void (**)(void, _DWORD *, uint64_t))(**(void **)(a1 + 1768) + 96LL))(*(void *)(a1 + 1768), a2, a3);
  int v7 = *(void *)(a1 + 1824);
  if (v7)
  {
    sub_1003D474C(v7, a3, *(_DWORD *)(a3 + 248));
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    int v8 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: state changed before first unlock",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      v11[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: state changed before first unlock",  v11,  2);
      unsigned int v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::notifyClientsWithFenceEvent(const CLFenceMonitor_Type::Notification &, const CLFenceMonitor _Type::NotificationData &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

    int v7 = 0x7FFFFFFFLL;
  }

  else
  {
    switch(a2)
    {
      case 0LL:
      case 5LL:
      case 6LL:
      case 7LL:
      case 8LL:
      case 10LL:
      case 11LL:
      case 13LL:
      case 15LL:
      case 16LL:
      case 17LL:
      case 18LL:
        goto LABEL_6;
      case 1LL:
        int v7 = dword_10199A438;
        break;
      case 2LL:
        int v7 = dword_10199A448;
        break;
      case 3LL:
      case 4LL:
      case 9LL:
      case 12LL:
      case 14LL:
      case 19LL:
        int v7 = dword_10199A428;
        break;
      default:
        goto LABEL_11;
    }
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  int v8 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    unsigned int v23 = a2;
    BOOL v24 = 1026;
    int v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "CLAS,Received workout start reminder delay in epochs for workout type,%{public}ld,delay,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v18 = 134349312;
    int v19 = a2;
    unsigned int v20 = 1026;
    int v21 = v7;
    LODWORD(v17) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,Received workout start reminder delay in epochs for workout type,%{public}ld,delay,%{public}d",  &v18,  v17);
    unint64_t v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "int CLWorkoutPredictor::getDelayInEpochsForStartRemindersForLabel(CMWorkoutType) const",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  return v7;
}

    int v7 = 2LL;
    goto LABEL_13;
  }

  uint64_t v5 = (sqlite3_stmt *)sub_100019240(v14);
  int v6 = sqlite3_step(v5);
  if (v6 != 101)
  {
    if (v6 == 100)
    {
      sub_100AC87D4(&v14, a2);
      int v7 = 0LL;
      goto LABEL_13;
    }

    goto LABEL_11;
  }

  int v7 = 1LL;
LABEL_13:
  int v9 = v14;
  unint64_t v14 = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  if (!v4) {
    return 2LL;
  }
  return v7;
}

  int v7 = *(void *)(v5 + 8);
  if (!v7) {
    int v7 = *(void *)(qword_1019A1BF0 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 24), a2);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  if ((*(_BYTE *)&v6 & 4) != 0)
  {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_channel),  @"channel");
    if ((*(_BYTE *)&self->_has & 0x20) == 0) {
      return v3;
    }
    goto LABEL_13;
  }

  if ((*(_BYTE *)&v6 & 0x20) != 0) {
LABEL_13:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_pnoffset),  @"pnoffset");
  return v3;
}

  if ((*(_BYTE *)&v7 & 4) == 0)
  {
    if ((*(_BYTE *)&v7 & 0x20) == 0) {
      return;
    }
LABEL_19:
    PBDataWriterWriteInt32Field(a3, self->_pnoffset, 10LL);
    return;
  }

  PBDataWriterWriteInt32Field(a3, self->_channel, 9LL);
  if ((*(_BYTE *)&self->_has & 0x20) != 0) {
    goto LABEL_19;
  }
}

  if ((*(_BYTE *)&v6 & 4) == 0)
  {
    if ((*(_BYTE *)&v6 & 0x20) == 0) {
      return;
    }
    goto LABEL_13;
  }

  *((_DWORD *)a3 + 4) = self->_channel;
  *((_BYTE *)a3 + 52) |= 4u;
  if ((*(_BYTE *)&self->_has & 0x20) != 0)
  {
LABEL_13:
    *((_DWORD *)a3 + 10) = self->_pnoffset;
    *((_BYTE *)a3 + 52) |= 0x20u;
  }

  self->_nid = *((_DWORD *)a3 + 9);
  *(_BYTE *)&self->_has |= 0x10u;
  if ((*((_BYTE *)a3 + 52) & 2) != 0)
  {
LABEL_5:
    self->_bsid = *((_DWORD *)a3 + 3);
    *(_BYTE *)&self->_has |= 2u;
  }

  PBDataWriterWriteInt32Field(a3, self->_verticalAccuracy, 6LL);
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  *((_DWORD *)a3 + 13) = self->_verticalAccuracy;
  *((_BYTE *)a3 + 56) |= 0x40u;
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  self->_verticalAccuracy = *((_DWORD *)a3 + 13);
  *(_BYTE *)&self->_has |= 0x40u;
  int v3 = *((_BYTE *)a3 + 56);
  if ((v3 & 2) == 0)
  {
LABEL_5:
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  self->_cellID = *((_DWORD *)a3 + 2);
  *(_BYTE *)&self->_has |= 1u;
  if ((*((_BYTE *)a3 + 44) & 0x10) != 0)
  {
LABEL_5:
    self->_tacID = *((_DWORD *)a3 + 9);
    *(_BYTE *)&self->_has |= 0x10u;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 13),  a2,  a4);
  }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 48),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  size = v11.__r_.__value_.__s.__size_;
  if ((v11.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    size = v11.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    *a4 = v11;
  }

  else
  {
    sub_1010DDBC0(a4, "Unavailable");
  }

  *((_BYTE *)a3 + 61) = self->_regularEntry;
}

  *((_BYTE *)result + 61) = self->_regularEntry;
  return result;
}

  self->_regularEntry = *((_BYTE *)a3 + 61);
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_prior),  @"prior");
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_betaBlockerUse),  @"betaBlockerUse");
    if ((*(_BYTE *)&self->_has & 8) == 0) {
      return v3;
    }
    goto LABEL_7;
  }

  PBDataWriterWriteUint32Field(a3, self->_hardwareType, 4LL);
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 8) == 0) {
      return;
    }
LABEL_13:
    PBDataWriterWriteInt32Field(a3, self->_algorithmVersion, 6LL);
    return;
  }

  *((_DWORD *)a3 + 9) = self->_hardwareType;
  *((_BYTE *)a3 + 44) |= 0x10u;
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 8) == 0) {
      return;
    }
LABEL_13:
    *((_DWORD *)a3 + 8) = self->_algorithmVersion;
    *((_BYTE *)a3 + 44) |= 8u;
    return;
  }

  *((void *)result + 2) = *(void *)&self->_prior;
  *((_BYTE *)result + 44) |= 2u;
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  self->_hardwareType = *((_DWORD *)a3 + 9);
  *(_BYTE *)&self->_has |= 0x10u;
  int v3 = *((_BYTE *)a3 + 44);
  if ((v3 & 0x20) == 0)
  {
LABEL_6:
    if ((v3 & 8) == 0) {
      return;
    }
LABEL_13:
    self->_algorithmVersion = *((_DWORD *)a3 + 8);
    *(_BYTE *)&self->_has |= 8u;
    return;
  }

    *(_OWORD *)(a1 + 1488) = 0u;
    *(_OWORD *)(a1 + 1472) = 0u;
    *(_OWORD *)(a1 + 1456) = 0u;
    *(_OWORD *)(a1 + 1440) = 0u;
    *(_OWORD *)(a1 + 1424) = 0u;
    *(_OWORD *)(a1 + 1408) = 0u;
    *(_OWORD *)(a1 + 1392) = 0u;
    *(_OWORD *)(a1 + 1376) = 0u;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    *(_OWORD *)(a1 + 1280) = 0u;
    *(_OWORD *)(a1 + 1264) = 0u;
    *(_OWORD *)(a1 + 1248) = 0u;
    if (!a5) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }

  *(double *)(a1 + 984) = Current;
LABEL_15:
  sub_100D25358((uint64_t)v10, (double *)(a1 + 976));
  memcpy(__dst, (const void *)(a1 + 976), sizeof(__dst));
  int v13 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v13,  __dst,  1LL,  0xFFFFFFFFLL,  0LL);
  return memcpy((void *)(a1 + 1768), __dst, 0x318uLL);
}

          unsigned int v22 = (const void **)sub_100DA2948((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0) {
            goto LABEL_14;
          }
          BOOL v24 = sub_100DA2AD4(a1, v22, a3);
          unsigned int v10 = v22 + 3;
          if (!sub_100DA2AD4((uint64_t)(v22 + 3), (const void **)a2, a3))
          {
            unint64_t v11 = v12 + 1;
            if (v24) {
              continue;
            }
LABEL_14:
            sub_100DA2040(a1, v22, a3, -v12, a5 & 1);
            unsigned int v10 = v22 + 3;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }

          a4 = -v12;
          a2 = (char *)v22;
          if (v24) {
            return;
          }
          goto LABEL_1;
        }

        return;
    }
  }

  uint64_t v4 = *(void *)(a1 + 104) != 0LL;
  uint64_t v5 = [*(id *)(a1 + 96) isEnabled];
  if (v4 != v5)
  {
    if (v5)
    {
      sub_1010DDBC0(__p, "Ongoing visibility assertion");
      sub_100C6AD28(a1, (uint64_t)__p, 4LL);
      int v6 = operator new(0x50uLL);
      sub_1008FDB14(v6, v11);
      sub_1008FDB5C(v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      int v6 = 0LL;
    }

    int v7 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v6;
    if (v7)
    {
      int v8 = (void *)sub_1008FDB5C(v7);
      operator delete(v8);
    }
  }

  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    int v9 = 68289282;
    unsigned int v10 = 0;
    unint64_t v11 = 2082;
    int v12 = "";
    int v13 = 2114;
    unint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:BATCH: stopping client, Client:%{public, location:escape_only}@}",  (uint8_t *)&v9,  0x1Cu);
  }

  [*(id *)(a1 + 280) invalidate];

  *(void *)(a1 + 280) = 0LL;
  int v6 = *(void *)(a1 + 288);
  if (v6)
  {
    sub_1006B6294(v6);
    sub_1000F0D38((void *)(a1 + 288));
  }

  sub_100DB803C(a1, 2);
  int v7 = sub_100DAFB74(a1);
  return [*(id *)(*(void *)v7 + 16) unregister:*(void *)(*(void *)v7 + 8) forNotification:15];
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

    if (*v6) {
      return 1LL;
    }
  }

  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

  if ((v6 & 0x80) == 0) {
    goto LABEL_12;
  }
LABEL_49:
  *(_DWORD *)(a1 + 84) |= 0x80u;
  int v21 = *(void **)(a1 + 64);
  if (!v21)
  {
    int v21 = operator new(0x20uLL);
    *int v21 = &off_101887800;
    v21[1] = 0LL;
    unsigned int v21[2] = 0LL;
    v21[3] = 0LL;
    *(void *)(a1 + 64) = v21;
  }

  unsigned int v22 = *(void *)(a2 + 64);
  if (!v22) {
    unsigned int v22 = *(void *)(qword_1019A20E0 + 64);
  }
  uint64_t result = sub_100E3AE24((uint64_t)v21, v22);
  if ((*(_DWORD *)(a2 + 84) & 0x100) != 0)
  {
LABEL_54:
    *(_DWORD *)(a1 + 84) |= 0x100u;
    unsigned int v23 = *(void **)(a1 + 72);
    if (!v23)
    {
      unsigned int v23 = operator new(0x20uLL);
      *unsigned int v23 = &off_101887878;
      v23[1] = 0LL;
      v23[2] = 0LL;
      v23[3] = 0LL;
      *(void *)(a1 + 72) = v23;
    }

    BOOL v24 = *(void *)(a2 + 72);
    if (!v24) {
      BOOL v24 = *(void *)(qword_1019A20E0 + 72);
    }
    return sub_100E3AF20((uint64_t)v23, v24);
  }

  return result;
}

  sub_1002F0B04(&buf);
  uint64_t v15 = sub_1002A82BC(buf, "BeaconFenceBestEffortInterval", (void *)(a1 + 216));
  unint64_t v16 = v15;
  int v17 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)) {
    goto LABEL_15;
  }
  v18 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
  do
    int v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16) {
      goto LABEL_21;
    }
  }

  else
  {
LABEL_15:
    if (!v15) {
      goto LABEL_21;
    }
  }

  if (qword_101934840 != -1) {
    dispatch_once(&qword_101934840, &stru_10188A778);
  }
  unsigned int v20 = (os_log_s *)qword_101934848;
  if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *v6;
    LODWORD(buf) = 134283521;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Overriding BeaconFenceBestEffortInterval,%{private}.2f",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188A778);
    }
    v31 = *v6;
    v36 = 134283521;
    v37 = v31;
    LODWORD(v34) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934848,  0LL,  "#Warning Overriding BeaconFenceBestEffortInterval,%{private}.2f",  &v36,  v34);
    v33 = (char *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLBTLEBeaconProviderConcrete::CLBTLEBeaconProviderConcrete(id<CLIntersiloUniverse>)",  "%s\n",  v32);
  }

          unsigned int v22 = sub_100F31D38(a1, (unint64_t)a2);
          if ((v23 & 1) == 0) {
            goto LABEL_14;
          }
          BOOL v24 = sub_100F31E6C(a1, v22);
          unsigned int v10 = (float *)(v22 + 24);
          if (!sub_100F31E6C(v22 + 24, (uint64_t)a2))
          {
            unint64_t v11 = v12 + 1;
            if (v24) {
              continue;
            }
LABEL_14:
            sub_100F31574(a1, v22, a3, -v12, a5 & 1);
            unsigned int v10 = (float *)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }

          a4 = -v12;
          a2 = (__n128 *)v22;
          if (v24) {
            return;
          }
          goto LABEL_1;
        }

        if ((a5 & 1) != 0)
        {
          sub_100F31A10((uint64_t)v10, (uint64_t)a2);
        }

        else if (v10 != (float *)a2)
        {
          v28 = v10 + 6;
          while (v28 != (float *)a2)
          {
            unsigned int v29 = (uint64_t)v28;
            v30 = *(float *)(a1 + 24);
            if (v30 < *(float *)a1)
            {
              v34 = *(_OWORD *)(a1 + 28);
              v37 = *(_DWORD *)(a1 + 44);
              do
              {
                *(_OWORD *)v28 = *(_OWORD *)(v28 - 6);
                *((void *)v28 + 2) = *((void *)v28 - 1);
                v31 = *(v28 - 12);
                v28 -= 6;
              }

              while (v30 < v31);
              _BYTE *v28 = v30;
              *((_DWORD *)v28 + 5) = v37;
              *(_OWORD *)(v28 + 1) = v34;
            }

            v28 = (float *)(v29 + 24);
            a1 = v29;
          }
        }

        return;
    }
  }

  if ((sub_100F3735C(&v68, &v67) & 1) == 0)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D488);
    }
    v28 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      *(double *)&buf[4] = v68;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v67;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "#Error,HRSE,getSignalEnvironment,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D488);
    }
    v69 = 134283777;
    v70 = v68;
    v71 = 2049;
    v72 = v67;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,HRSE,getSignalEnvironment,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf",  &v69,  22);
    v44 = (char *)v50;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnv ironment(double, double)",  "%s\n",  v50);
    goto LABEL_95;
  }

  if (*(_BYTE *)(a1 + 768))
  {
    int v13 = *(double *)(a1 + 544);
    unint64_t v14 = *(_DWORD *)(a1 + 540);
    uint64_t v15 = *(float *)(a1 + 560);
    unint64_t v16 = *(double *)(a1 + 552);
    int v17 = *(_DWORD *)(a1 + 536);
    sub_100292950(v13);
    int v19 = v18;
    sub_100292950(v13 + (float)(v15 * (float)v14));
    int v21 = v20;
    unsigned int v22 = v16 + (float)(v15 * (float)v17);
    if (v68 >= v16 && v68 < v22 && v67 >= v19 && v67 < v20)
    {
      *(_DWORD *)(a1 + 816) = 0;
LABEL_18:
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      unsigned int v23 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "HRSE,good to go!", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10188D488);
        }
        LOWORD(v69) = 0;
        LODWORD(v62) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,good to go!",  &v69,  v62);
        v56 = (char *)v55;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSigna lEnvironment(double, double)",  "%s\n",  v55);
        if (v56 != buf) {
          free(v56);
        }
      }

      *(_BYTE *)(a1 + 440) = 0;
      BOOL v24 = sub_100F376D0(a1 + 504, v68, v67);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      int v25 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284033;
        *(double *)&buf[4] = v68;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v67;
        v81 = 1025;
        *(_DWORD *)v82 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "HRSE,lat,%{private}.7lf,lon,%{private}.7lf,hrse,%{private}d",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10188D488);
        }
        v69 = 134284033;
        v70 = v68;
        v71 = 2049;
        v72 = v67;
        v73 = 1025;
        *(_DWORD *)v74 = v24;
        LODWORD(v62) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,lat,%{private}.7lf,lon,%{private}.7lf,hrse,%{private}d",  &v69,  v62);
        v27 = (char *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSigna lEnvironment(double, double)",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      goto LABEL_53;
    }

    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D488);
    }
    unsigned int v29 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284801;
      *(double *)&buf[4] = v68;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v67;
      v81 = 2049;
      *(double *)v82 = v16;
      *(_WORD *)&v82[8] = 2049;
      v83 = v22;
      v84 = 2049;
      v85 = v19;
      v86 = 2049;
      v87 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "HRSE,getSignalEnvironment,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{priva te}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      v69 = 134284801;
      v70 = v68;
      v71 = 2049;
      v72 = v67;
      v73 = 2049;
      *(double *)v74 = v16;
      *(_WORD *)&v74[8] = 2049;
      v75 = v22;
      v76 = 2049;
      v77 = v19;
      v78 = 2049;
      v79 = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,getSignalEnvironment,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{priva te}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf",  &v69,  62);
      v54 = (char *)v53;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalE nvironment(double, double)",  "%s\n",  v53);
      if (v54 != buf) {
        free(v54);
      }
    }
  }

  if (!sub_100254F20(a1 + 8, &v68, &v67) || *v5)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D488);
    }
    v30 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "HRSE,getSignalEnvironment,tile not available",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      LOWORD(v69) = 0;
      LODWORD(v62) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,getSignalEnvironment,tile not available",  &v69,  v62);
      v52 = (char *)v51;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalE nvironment(double, double)",  "%s\n",  v51);
      if (v52 != buf) {
        free(v52);
      }
    }

    BOOL v24 = 0LL;
    *(_WORD *)(a1 + 440) = 0;
    *(void *)(a1 + 448) = 0LL;
    *(void *)(a1 + 456) = 0LL;
    goto LABEL_53;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10188D488);
  }
  v32 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "HRSE,getSignalEnvironment,need to load tile",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D488);
    }
    LOWORD(v69) = 0;
    LODWORD(v62) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,getSignalEnvironment,need to load tile",  &v69,  v62);
    v58 = (char *)v57;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnv ironment(double, double)",  "%s\n",  v57);
    if (v58 != buf) {
      free(v58);
    }
  }

  v33 = *(_DWORD *)(a1 + 816);
  if ((v33 & 7) == 0)
  {
    *(_DWORD *)(a1 + 816) = v33 + 1;
    v63 = 0;
    v36 = sub_100F394E8(a1, (_BYTE *)&v63 + 1, &v63, v68, v67);
    if (HIBYTE(v63))
    {
      *(_BYTE *)(a1 + 440) = 1;
      *(_BYTE *)(a1 + 441) = v63;
      v37 = v67;
      *(double *)(a1 + 448) = v68;
      *(double *)(a1 + 456) = v37;
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      v38 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        v39 = *(unsigned __int8 *)(a1 + 440);
        v40 = *(unsigned __int8 *)(a1 + 441);
        *(_DWORD *)buf = 134284289;
        *(double *)&buf[4] = v68;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v67;
        v81 = 1026;
        *(_DWORD *)v82 = v39;
        *(_WORD *)&v82[4] = 1026;
        *(_DWORD *)&v82[6] = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "HRSE,getSignalEnvironment,tile download needed,lat,%{private}.7lf,lon,%{private}.7lf,is file needed,%{public}d ,is bad tile,%{public}d",  buf,  0x22u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      v41 = *(unsigned __int8 *)(a1 + 440);
      v42 = *(unsigned __int8 *)(a1 + 441);
      v69 = 134284289;
      v70 = v68;
      v71 = 2049;
      v72 = v67;
      v73 = 1026;
      *(_DWORD *)v74 = v41;
      *(_WORD *)&v74[4] = 1026;
      *(_DWORD *)&v74[6] = v42;
      LODWORD(v62) = 34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,getSignalEnvironment,tile download needed,lat,%{private}.7lf,lon,%{private}.7lf,is file needed,%{public}d,i s bad tile,%{public}d",  &v69,  v62);
      v44 = (char *)v43;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalE nvironment(double, double)",  "%s\n",  v43);
    }

    else
    {
      if ((v36 & 1) != 0) {
        goto LABEL_18;
      }
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      v45 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "HRSE,Tile not loaded yet", buf, 2u);
      }

      if (!sub_1002921D0(115, 2))
      {
LABEL_37:
        BOOL v24 = 0LL;
        goto LABEL_53;
      }

      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D488);
      }
      LOWORD(v69) = 0;
      LODWORD(v62) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,Tile not loaded yet",  &v69,  v62);
      v44 = (char *)v46;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalE nvironment(double, double)",  "%s\n",  v46);
    }

    unint64_t v16 = 0;
    goto LABEL_12;
  }

  v7[1] = (id)self->_cellID;
  *((_BYTE *)v7 + 40) |= 1u;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_5:
    *((_DWORD *)v7 + 9) = self->_tacID;
    *((_BYTE *)v7 + 40) |= 0x10u;
  }

  self->_cellID = *((void *)a3 + 1);
  *(_BYTE *)&self->_has |= 1u;
  if ((*((_BYTE *)a3 + 40) & 0x10) != 0)
  {
LABEL_5:
    self->_tacID = *((_DWORD *)a3 + 9);
    *(_BYTE *)&self->_has |= 0x10u;
  }

  PB::TextFormatter::format(this, "isSuccessful", *(_BYTE *)(a1 + 44));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 48) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 32), 6u);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 36) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 32), 6u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "initialized", *(_BYTE *)(a1 + 29));
  uint64_t v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 32) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  }

  PB::TextFormatter::format(this, "initialized", *(_BYTE *)(a1 + 29));
  uint64_t v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 32) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 29), 6u);
  }

  int v9 = *(void *)(a2 + 40);
  if (v9)
  {
    unsigned int v10 = operator new(0x68uLL);
    unint64_t v11 = sub_10114F03C((uint64_t)v10, v9);
    int v12 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    if (v12) {
      (*(void (**)(uint64_t, double))(*(void *)v12 + 8LL))(v12, v11);
    }
  }

  unint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    uint64_t v15 = operator new(0x30uLL);
    unint64_t v16 = sub_101086144((uint64_t)v15, v14);
    int v17 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v16;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
  }

  return a1;
}

  PB::TextFormatter::format(this, "chargerType", *(_DWORD *)(a1 + 20));
  uint64_t v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "level", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "machAbsoluteTimestamp", *(double *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "range", *(double *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 56) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  }

  PB::TextFormatter::format(this, "gpsHint", *(_BYTE *)(a1 + 14));
  uint64_t v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "vehicularData", *(_DWORD *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 20) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 16), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 6u);
  }

  PB::TextFormatter::format(this, "machContinuousTime", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 44) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  }

          unsigned int v22 = sub_101171108((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0) {
            goto LABEL_14;
          }
          BOOL v24 = sub_101171294(a1, v22, a3);
          unsigned int v10 = (const void **)(v22 + 24);
          if (!sub_101171294(v22 + 24, (uint64_t)a2, a3))
          {
            unint64_t v11 = v12 + 1;
            if (v24) {
              continue;
            }
LABEL_14:
            sub_101170868(a1, v22, a3, -v12, a5 & 1);
            unsigned int v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }

          a4 = -v12;
          a2 = (const void **)v22;
          if (v24) {
            return;
          }
          goto LABEL_1;
        }

        if (v10 != a2) {
          sub_1011716CC((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        }
        return;
    }
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 36) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 6u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  int v8 = *(void *)(a2 + 48);
  if (v8)
  {
    int v9 = operator new(0x10uLL);
    unsigned int v10 = sub_101140A28((uint64_t)v9, v8);
    unint64_t v11 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v10;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  return a1;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "straightnessMetric", *(double *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 56) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  }

  PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "sampleStopReason", *(_DWORD *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 6u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "inertialZ", *(float *)(a1 + 16));
  uint64_t v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    PB::TextFormatter::format(this, "medTocFactoryTemp", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 16), 6u);
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

  uint64_t result = std::string::append(this, " kCFRunLoopBeforeWaiting");
  if ((a1 & 0x40) == 0)
  {
LABEL_6:
    if ((a1 & 0x80) == 0) {
      return result;
    }
    return std::string::append(this, " kCFRunLoopExit");
  }

uint64_t sub_100067424(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_38;
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
    }

    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      unsigned int v4 = 2;
    }
  }

  else
  {
    unsigned int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      int v8 = 2;
    }

    uint64_t v5 = (v8 + v5);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_38;
      }
      goto LABEL_32;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(a1 + 24);
  int v10 = *(unsigned __int8 *)(v9 + 23);
  char v11 = v10;
  uint64_t v12 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    unint64_t v13 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    unint64_t v13 = v12;
  }
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13,  a2);
    int v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v12 = *(void *)(v9 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v11 = *(_BYTE *)(v9 + 23);
  }

  else
  {
    int v14 = 1;
  }

  if (v11 < 0) {
    int v10 = v12;
  }
  uint64_t v5 = (v5 + v14 + v10 + 1);
  if ((v3 & 0x20) != 0)
  {
LABEL_32:
    uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v15 & 0x80000000) != 0)
    {
      int v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }

    else
    {
      int v16 = 2;
    }

    uint64_t v5 = (v16 + v5);
  }

LABEL_38:
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

  if ((v22 & 0xFF0000) == 0) {
    return;
  }
  if ((v22 & 0x10000) != 0)
  {
    v37 = *(_DWORD *)(a2 + 160);
    *(_DWORD *)(a1 + 192) |= 0x10000u;
    *(_DWORD *)(a1 + 160) = v37;
    unsigned int v22 = *(_DWORD *)(a2 + 192);
    if ((v22 & 0x20000) == 0)
    {
LABEL_41:
      if ((v22 & 0x40000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_71;
    }
  }

  else if ((v22 & 0x20000) == 0)
  {
    goto LABEL_41;
  }

  v38 = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 192) |= 0x20000u;
  *(_DWORD *)(a1 + 164) = v38;
  unsigned int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x40000) == 0)
  {
LABEL_42:
    if ((v22 & 0x80000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_72;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    int v21 = *(const std::string **)(a2 + 72);
    *(_DWORD *)(a1 + 116) |= 0x100u;
    unsigned int v22 = *(std::string **)(a1 + 72);
    if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unsigned int v22 = (std::string *)operator new(0x18uLL);
      v22->__r_.__value_.__l.__size_ = 0LL;
      v22->__r_.__value_.__l.__cap_ = 0LL;
      v22->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 72) = v22;
    }

    std::string::operator=(v22, v21);
    uint64_t v5 = *(_DWORD *)(a2 + 116);
    if ((v5 & 0x200) == 0)
    {
LABEL_41:
      if ((v5 & 0x400) == 0) {
        goto LABEL_42;
      }
      goto LABEL_53;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_41;
  }

  unsigned int v23 = *(const std::string **)(a2 + 80);
  *(_DWORD *)(a1 + 116) |= 0x200u;
  BOOL v24 = *(std::string **)(a1 + 80);
  if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    BOOL v24 = (std::string *)operator new(0x18uLL);
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 80) = v24;
  }

  std::string::operator=(v24, v23);
  uint64_t v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_42:
    if ((v5 & 0x800) == 0) {
      goto LABEL_43;
    }
    goto LABEL_54;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) == 0)
  {
    if ((v5 & 0x200) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    unsigned int v22 = *(_BYTE *)(a2 + 53);
    *(_DWORD *)(a1 + 84) |= 0x200u;
    *(_BYTE *)(a1 + 53) = v22;
    if ((*(_DWORD *)(a2 + 84) & 0x400) == 0) {
      return;
    }
    goto LABEL_45;
  }

  int v21 = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 84) |= 0x100u;
  *(_BYTE *)(a1 + 52) = v21;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x200) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  if ((v5 & 0x400) == 0) {
    return;
  }
LABEL_45:
  unsigned int v23 = *(const std::string **)(a2 + 72);
  *(_DWORD *)(a1 + 84) |= 0x400u;
  BOOL v24 = *(std::string **)(a1 + 72);
  if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    BOOL v24 = (std::string *)operator new(0x18uLL);
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 72) = v24;
  }

  std::string::operator=(v24, v23);
}

  unint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A0980 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v13,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

        if (sub_1000ED748((uint64_t)v57))
        {
          sub_100019CEC((uint64_t)v57);
          v26 = v51;
        }

        else
        {
          sub_1000ED758((uint64_t)v57, (uint64_t *)&v55);
          sub_100063B5C((uint64_t)&v53);
          v27 = (int *)v55;
          v28 = (int *)v56;
          if (v55 != v56)
          {
            unsigned int v29 = v53.__r_.__value_.__r.__words[2];
            do
            {
              v30 = HIDWORD(v53.__r_.__value_.__r.__words[2]);
              if (v29 >= SHIDWORD(v53.__r_.__value_.__r.__words[2]))
              {
                if (HIDWORD(v53.__r_.__value_.__r.__words[2]) == v54)
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)&v53.__r_.__value_.__r.__words[1],  HIDWORD(v53.__r_.__value_.__r.__words[2]) + 1);
                  v30 = HIDWORD(v53.__r_.__value_.__r.__words[2]);
                }

                HIDWORD(v53.__r_.__value_.__r.__words[2]) = v30 + 1;
                v31 = sub_1000B9604();
                v32 = SLODWORD(v53.__r_.__value_.__r.__words[2]);
                unsigned int v29 = ++LODWORD(v53.__r_.__value_.__r.__words[2]);
                *(void *)(v53.__r_.__value_.__l.__size_ + 8 * v32) = v31;
              }

              else
              {
                LODWORD(v53.__r_.__value_.__r.__words[2]) = v29 + 1;
                v31 = *(_DWORD **)(v53.__r_.__value_.__l.__size_ + 8LL * v29++);
              }

              v33 = *v27;
              v34 = v31[6];
              v31[6] = v34 | 1;
              v31[4] = v33;
              v35 = v27[1];
              v31[6] = v34 | 3;
              *((void *)v31 + 1) = v35;
              v27 += 2;
            }

            while (v27 != v28);
          }

          Current_1 = j__CFAbsoluteTimeGetCurrent_1();
          sub_1000B4C64((uint64_t)&v53, (uint64_t)&v52, Current_1);
          v37 = v60;
          if (v60 >= v61)
          {
            v38 = sub_1000AD1EC(&v59, v51 + 40, (uint64_t)&v52, v15);
          }

          else
          {
            sub_1000AD328((uint64_t)&v61, v60, v51 + 40, (uint64_t)&v52, v15);
            v38 = v37 + 112;
          }

          v26 = v51;
          v60 = v38;
          v39 = sub_10015AFB0(v14, -(int)v11);
          std::to_string(&v71, v39);
          v40 = a1[1];
          LODWORD(__p) = 0;
          sub_10002BA20(v40, (__int128 *)v15, (unsigned int *)&__p, (uint64_t)&v71, buf);
          if (v70[56])
          {
            sub_1000ED9B0((uint64_t)v70, &__p);
            sub_1000B2CF0((uint64_t)a1, (uint64_t)&v55, (uint64_t)&__p, v51 + 40);
            if (__p)
            {
              v65[0] = __p;
              operator delete(__p);
            }
          }

          else
          {
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_10181D000);
            }
            v41 = (os_log_s *)qword_1019348D8;
            if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
            {
              __p = (void *)68289026;
              LOWORD(v65[0]) = 2082;
              *(void *)((char *)v65 + 2) = "";
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Wifi Channel Histogram analytics was not sent since not enough time elapsed}",  (uint8_t *)&__p,  0x12u);
            }
          }

          sub_1000A7938((uint64_t)buf);
          sub_10008C0E0((wireless_diagnostics::google::protobuf::MessageLite *)&v52);
          sub_10008AAAC((wireless_diagnostics::google::protobuf::MessageLite *)&v53);
          if (v55)
          {
            v56 = v55;
            operator delete(v55);
          }

          sub_100019CEC((uint64_t)v57);
        }

        unint64_t v13 = v26 + 64;
      }

      while (v13 != v50);
      if (v59 == v60) {
        goto LABEL_81;
      }
      if (sub_1000A6898(a1[1], &v59))
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181D000);
        }
        v44 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v67 = 2082;
          *(void *)&v67[2] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Wifi Channel Histogram generated successfully}",  buf,  0x12u);
        }

        (*(void (**)(uint64_t))(*(void *)*a1 + 16LL))(*a1);
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181D000);
        }
        v49 = qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v67 = 2082;
          *(void *)&v67[2] = "";
          v68 = 1026;
          LODWORD(v69) = 0;
          v46 = "{msg%{public}.0s:#Warning Wifi Channel Histogram was not generated properly, Inserted:%{public}hhd}";
          v47 = (os_log_s *)v49;
          v48 = 24;
          goto LABEL_85;
        }
      }
    }

    v35 = *(void *)(a1 + 128);
    v36 = *(void *)(a1 + 185);
    v37 = *(void *)(a1 + 193);
    v40[0] = 0;
    v40[16] = 0;
    if (((v33 | (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::__shared_weak_count *, _BYTE *, double *))(*(void *)v35 + 64LL))( v35,  v36,  v37,  v25,  v26,  v40,  &v38)) & 1) == 0) {
      return 0LL;
    }
    goto LABEL_39;
  }

  v33 = 0;
  uint64_t result = 0LL;
  if (*(_BYTE *)(a1 + 201)) {
    goto LABEL_38;
  }
  return result;
}

  uint64_t v9 = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 160) |= 0x10u;
  *(_BYTE *)(a1 + 152) = v9;
  int v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x20) != 0) {
    goto LABEL_39;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_40:
  uint64_t result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 160) |= 0x40u;
  *(double *)(a1 + 40) = result;
  int v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    uint64_t result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 160) |= 0x80u;
    *(double *)(a1 + 48) = result;
    int v6 = *(_DWORD *)(a2 + 160);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 32),  a3);
  int v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 104),  a3);
  int v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  uint64_t result = *(double *)(a2 + 96);
  *(_DWORD *)(a1 + 132) |= 0x800u;
  *(double *)(a1 + 96) = result;
  int v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x1000) == 0)
  {
LABEL_19:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  uint64_t result = *(double *)(a2 + 96);
  *(_DWORD *)(a1 + 132) |= 0x800u;
  *(double *)(a1 + 96) = result;
  int v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x1000) == 0)
  {
LABEL_19:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 104),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

  int v21 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 364) |= 0x10u;
  *(void *)(a1 + 40) = v21;
  unint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x20) != 0) {
    goto LABEL_39;
  }
LABEL_18:
  if ((v13 & 0x40) == 0) {
    goto LABEL_19;
  }
LABEL_40:
  unsigned int v23 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 364) |= 0x40u;
  *(_DWORD *)(a1 + 52) = v23;
  unint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x80) != 0)
  {
LABEL_20:
    int v14 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 364) |= 0x80u;
    *(_DWORD *)(a1 + 56) = v14;
    unint64_t v13 = *(_DWORD *)(a2 + 364);
  }

  if ((v6 & 0xFF00) == 0) {
    return result;
  }
  if ((v6 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 100) |= 0x100u;
    v18 = *(char **)(a1 + 56);
    if (!v18)
    {
      v18 = (char *)operator new(0x30uLL);
      *(void *)v18 = off_101828288;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)(v18 + 24) = 0u;
      *((void *)v18 + 5) = 0LL;
      *(void *)(a1 + 56) = v18;
    }

    int v19 = *(void *)(a2 + 56);
    if (!v19) {
      int v19 = *(void *)(qword_1019A0BD8 + 56);
    }
    uint64_t result = sub_1001DD17C((uint64_t)v18, v19);
    int v6 = *(_DWORD *)(a2 + 100);
    if ((v6 & 0x200) == 0)
    {
LABEL_41:
      if ((v6 & 0x400) == 0) {
        goto LABEL_42;
      }
      goto LABEL_55;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_41;
  }

  *(_DWORD *)(a1 + 100) |= 0x200u;
  unsigned int v20 = *(void **)(a1 + 64);
  if (!v20)
  {
    unsigned int v20 = operator new(0x20uLL);
    _BYTE *v20 = off_101828300;
    v20[1] = 0LL;
    v20[2] = 0LL;
    v20[3] = 0LL;
    *(void *)(a1 + 64) = v20;
  }

  int v21 = *(void *)(a2 + 64);
  if (!v21) {
    int v21 = *(void *)(qword_1019A0BD8 + 64);
  }
  uint64_t result = sub_1001DD690((uint64_t)v20, v21);
  int v6 = *(_DWORD *)(a2 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_42:
    if ((v6 & 0x800) == 0) {
      goto LABEL_43;
    }
    goto LABEL_60;
  }

  unsigned int v20 = *(_BYTE *)(a2 + 90);
  *(_DWORD *)(a1 + 96) |= 0x1000u;
  *(_BYTE *)(a1 + 90) = v20;
  if ((*(_DWORD *)(a2 + 96) & 0x2000) == 0) {
    return;
  }
LABEL_20:
  int v7 = *(_BYTE *)(a2 + 91);
  *(_DWORD *)(a1 + 96) |= 0x2000u;
  *(_BYTE *)(a1 + 91) = v7;
}

  int v10 = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 124) |= 0x400u;
  *(_BYTE *)(a1 + 76) = v10;
  int v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 0x800) == 0)
  {
LABEL_18:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  unint64_t v13 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 148) |= 8u;
  *(_DWORD *)(a1 + 40) = v13;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_40:
    uint64_t v15 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 148) |= 0x20u;
    *(void *)(a1 + 48) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 148);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_41;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 44),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }

  if ((has & 2) != 0)
  {
    startTime = self->_startTime;
    v33 = -startTime;
    if (startTime >= 0.0) {
      v33 = self->_startTime;
    }
    v34 = floor(v33 + 0.5);
    v35 = (v33 - v34) * 1.84467441e19;
    v31 = 2654435761u * (unint64_t)fmod(v34, 1.84467441e19);
    if (v35 >= 0.0)
    {
      if (v35 > 0.0) {
        v31 += (unint64_t)v35;
      }
      if ((has & 0x100) == 0) {
        goto LABEL_49;
      }
    }

    else
    {
      v31 -= (unint64_t)fabs(v35);
      if ((has & 0x100) == 0)
      {
LABEL_49:
        v36 = 0LL;
        return v39 ^ v38 ^ v4 ^ v5 ^ v7 ^ v25 ^ v30 ^ v31 ^ v36 ^ (2654435761LL * type) ^ v24;
      }
    }
  }

  else
  {
    v31 = 0LL;
    if ((has & 0x100) == 0) {
      goto LABEL_49;
    }
  }

  v36 = 2654435761LL * self->_isVehicleConnected;
  return v39 ^ v38 ^ v4 ^ v5 ^ v7 ^ v25 ^ v30 ^ v31 ^ v36 ^ (2654435761LL * type) ^ v24;
}

  fclose(v6);
  fclose(v8);
LABEL_39:
  free(v4);
  return v11;
}

  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v5 + 24LL))(v5);
}

  if (v13)
  {
    v62 = v13;
    operator delete((void *)v13);
  }

  return v5;
}

    unsigned int v22 = *(unsigned __int8 *)(a1 + 161);
    if (v22 != 2)
    {
      if (v22 == 255 || ([*(id *)(a1 + 648) nextFireDelay], v23 < 15.0)) {
        [*(id *)(a1 + 648) setNextFireDelay:15.0];
      }
    }

    *(_BYTE *)(a1 + 161) = v6;
  }

  PBDataWriterWriteFloatField(a3, 16LL, self->_longestDropout);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_17:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  *((_DWORD *)a3 + 7) = LODWORD(self->_longestDropout);
  *((_DWORD *)a3 + 26) |= 8u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_17:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  *((_DWORD *)result + 6) = LODWORD(self->_firstCatherineStartTime);
  *((_DWORD *)result + 26) |= 4u;
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_16:
    if ((*(_DWORD *)&has & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }

  self->_longestDropout = *((float *)a3 + 7);
  *(_DWORD *)&self->_has |= 8u;
  int v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x100000) == 0)
  {
LABEL_17:
    if ((v3 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
}

      unsigned int v23 = sub_1002F8DDC();
      sub_1002AC7B8(v23, "StrideCalibrationLastCalibrationAttempt", &v28);
      return;
    }

    if (v5 >= 3) {
      goto LABEL_20;
    }
    if (v5 == 2)
    {
      p_fStepsBuffer = &self->fStepsBuffer;
      if (-[CMStrideCalibrationStepCountBuffer stepsInWindow](self->fStepsBuffer, "stepsInWindow") <= 9) {
        goto LABEL_28;
      }
    }
  }

    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
  }

  std::mutex::unlock(v8);
}

      goto LABEL_41;
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018441C0);
    }
    uint64_t v12 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = v32;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2050;
      v39 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#usesync Insanity!  A service lacks start/stop keys, service:%{public}lu}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018441C0);
      }
    }

    unint64_t v13 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      *(_DWORD *)buf = v32;
      *(_DWORD *)&buf[4] = 0;
      v36 = 2082;
      v37 = "";
      v38 = 2050;
      v39 = v10;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#usesync Insanity!  A service lacks start/stop keys",  "{msg%{public}.0s:#usesync Insanity!  A service lacks start/stop keys, service:%{public}lu}",  buf,  0x1Cu);
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(void *)(v5 + 112),  a2,  a4);
  if ((*(_DWORD *)(v5 + 124) & 0x40000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  *(_DWORD *)(v5 + 108),  a2,  a4);
  }
  return result;
}

    *(_DWORD *)(a1 + 28) |= 4u;
    int v17 = *(char **)(a1 + 16);
    if (!v17)
    {
      int v17 = (char *)operator new(0x58uLL);
      *(void *)int v17 = off_101849DB0;
      *((void *)v17 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v17 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v17 + 19) = 0;
      *((_DWORD *)v17 + 20) = 0;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *((_WORD *)v17 + 36) = 0;
      *(void *)(a1 + 16) = v17;
    }

    v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
    }

    else
    {
      v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }

    int v19 = *((_DWORD *)this + 14);
    unsigned int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0LL;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    unsigned int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  int v21 = *(void *)(a1 + 296);
  *(void *)(a1 + 88) = v21;
  *(void *)(a1 + 96) = v21;
  *(_BYTE *)(a1 + 188) = v10 & 1;
  *(_BYTE *)(a1 + 308) = v11 & 1;
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }

  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  return v8 != 0;
}

  ++*v26;
  return 1LL;
}

  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A1A48 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v15,  a2,  a4);
  if ((*(_DWORD *)(v5 + 96) & 0x400) != 0)
  {
LABEL_41:
    int v16 = *(void *)(v5 + 80);
    if (!v16) {
      int v16 = *(void *)(qword_1019A1A48 + 80);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v16,  a2,  a4);
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 60),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 84),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_42:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(unsigned __int8 *)(v5 + 104),  (BOOL)a2,  a4);
    if ((*(_DWORD *)(v5 + 112) & 0x2000) == 0) {
      return result;
    }
    goto LABEL_43;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 72),  a3);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x80) == 0)
  {
LABEL_12:
    if ((v8 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  unint64_t v13 = *(void *)(v5 + 72);
  if (!v13) {
    unint64_t v13 = *(void *)(qword_1019A1C80 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v13,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrConfidenceVariance),  @"hrConfidenceVariance");
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_17:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  PBDataWriterWriteDoubleField(a3, 16LL, self->_hrCadenceAgreementVariance);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_18:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  *((void *)a3 + 6) = *(void *)&self->_hrCadenceAgreementVariance;
  *((_DWORD *)a3 + 41) |= 0x20u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_18:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  *((void *)result + 8) = *(void *)&self->_hrConfidenceVariance;
  *((_DWORD *)result + 41) |= 0x80u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_17:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  self->_hrCadenceAgreementVariance = *((double *)a3 + 6);
  *(_DWORD *)&self->_has |= 0x20u;
  int v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x20000) == 0)
  {
LABEL_18:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  int v8 = *(void *)(v5 + 32);
  if (!v8) {
    int v8 = *(void *)(qword_1019A1D48 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }

  int v17 = *(void *)(a1 + 40);
  if (!v17) {
    int v17 = *(void *)(qword_1019A1D48 + 40);
  }
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100505F80(v17, a2);
  int v19 = (int)v18;
  else {
    unsigned int v20 = 1;
  }
  unsigned int v4 = (v4 + v19 + v20 + 1);
  int v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_56;
    }
    goto LABEL_50;
  }

  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

    v48 = 0LL;
    goto LABEL_39;
  }

  unsigned int v20 = 0;
LABEL_39:
  v30 = 0.0;
  unsigned int v29 = 0.0;
  if (!v13) {
    goto LABEL_44;
  }
LABEL_40:
  v35 = (unint64_t *)&v13->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    v39 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v73 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "[RunningSpeedKF] interpolateOdometry - #warning did not find odometer after t=(%{public}.2f)",  buf,  0xCu);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      v66 = 134349056;
      v67 = a4;
      v40 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "[RunningSpeedKF] interpolateOdometry - #warning did not find odometer after t=(%{public}.2f)",  &v66,  12);
      v38 = v41;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const",  "%s\n",  v40);
      goto LABEL_46;
    }

    return result;
  }

  int v7 = *((void *)&v65 + 1);
  int v8 = *(void *)v65;
  uint64_t v9 = *((void *)&v65 + 1) - *(void *)v65;
  int v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 6);
  if (v9 < 193)
  {
    int v19 = 21 - v10;
    unsigned int v20 = ((21 - v10) * (unsigned __int128)0x8618618618618619LL) >> 64;
    int v21 = (v20 + ((v19 - v20) >> 1)) >> 4;
    int v14 = (uint64_t *)(v65 - 8 * v21);
    uint64_t v15 = *v14;
    int v16 = *v14 + 192 * (21 * v21 - v19) + 3840;
  }

  else
  {
    char v11 = v10 - 1;
    uint64_t v12 = ((v10 - 1) * (unsigned __int128)0x8618618618618619LL) >> 64;
    unint64_t v13 = (v12 + ((v11 - v12) >> 1)) >> 4;
    int v14 = (uint64_t *)(v65 + 8 * v13);
    uint64_t v15 = *v14;
    int v16 = *v14 + 192 * (v11 - 21 * v13);
  }

  if (v16 == *((void *)&v63 + 1)) {
    goto LABEL_38;
  }
  unsigned int v22 = v16;
  if (v16 == v15) {
    unsigned int v22 = *(v14 - 1) + 4032;
  }
  unsigned int v23 = *((void *)&v65 + 1);
  if (*((void *)&v65 + 1) == v8) {
    unsigned int v23 = *(void *)(v65 - 8) + 4032LL;
  }
  BOOL v24 = v16;
  if (v16 == v15) {
    BOOL v24 = *(v14 - 1) + 4032;
  }
  int v25 = *((void *)&v65 + 1);
  if (*((void *)&v65 + 1) == v8) {
    int v25 = *(void *)(v65 - 8) + 4032LL;
  }
  if (*(double *)(v25 - 192) < a4)
  {
LABEL_21:
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    v26 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      v27 = v16;
      if (v16 == *v14) {
        v27 = *(v14 - 1) + 4032;
      }
      v28 = *(double *)(v27 - 192);
      unsigned int v29 = *((void *)&v65 + 1);
      if (*((void *)&v65 + 1) == *(void *)v65) {
        unsigned int v29 = *(void *)(v65 - 8) + 4032LL;
      }
      v30 = *(double *)(v29 - 192);
      *(_DWORD *)buf = 134349568;
      v73 = v28;
      v74 = 2050;
      v75 = a4;
      v76 = 2050;
      v77 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] interpolateOdometry time error, t_0, %{public}.2f, t_int, %{public}.2f, t_1, %{public}.2f",  buf,  0x20u);
    }

    v31 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v31)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      if (v16 == *v14) {
        int v16 = *(v14 - 1) + 4032;
      }
      v33 = *(double *)(v16 - 192);
      v34 = *((void *)&v65 + 1);
      if (*((void *)&v65 + 1) == *(void *)v65) {
        v34 = *(void *)(v65 - 8) + 4032LL;
      }
      v35 = *(double *)(v34 - 192);
      v66 = 134349568;
      v67 = v33;
      v68 = 2050;
      v69 = a4;
      v70 = 2050;
      v71 = v35;
      v37 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] interpolateOdometry time error, t_0, %{public}.2f, t_int, %{public}.2f, t_1, %{public}.2f",  &v66,  32);
LABEL_37:
      v38 = v36;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const",  "%s\n",  v37);
LABEL_46:
      if (v38 != buf) {
        free(v38);
      }
      return 0LL;
    }

    return result;
  }

  v46 = v16;
  if (v16 == v15) {
    v46 = *(v14 - 1) + 4032;
  }
  v47 = *(double *)(v46 - 144);
  v48 = *((void *)&v65 + 1);
  if (*((void *)&v65 + 1) == v8) {
    v48 = *(void *)(v65 - 8) + 4032LL;
  }
  if (v47 <= *(double *)(v48 - 144))
  {
    if (v16 == v15) {
      int v16 = *(v14 - 1) + 4032;
    }
    if (*((void *)&v65 + 1) == v8) {
      int v7 = *(void *)(v65 - 8) + 4032LL;
    }
    *a2 = sub_100940328( *(double *)(v16 - 192),  *(double *)(v16 - 144),  *(double *)(v7 - 192),  *(double *)(v7 - 144),  a4);
    *a3 = a4;
    return 1LL;
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101880CD0);
  }
  v49 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
  {
    v50 = v16;
    if (v16 == *v14) {
      v50 = *(v14 - 1) + 4032;
    }
    v51 = *(double *)(v50 - 144);
    v52 = *((void *)&v65 + 1);
    if (*((void *)&v65 + 1) == *(void *)v65) {
      v52 = *(void *)(v65 - 8) + 4032LL;
    }
    v53 = *(double *)(v52 - 144);
    *(_DWORD *)buf = 134349312;
    v73 = v51;
    v74 = 2050;
    v75 = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "[RunningSpeedKF] interpolateOdometry odometer error, y_0, %{public}.4f, y_1, %{public}.4f",  buf,  0x16u);
  }

  v54 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v54)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101880CD0);
    }
    if (v16 == *v14) {
      int v16 = *(v14 - 1) + 4032;
    }
    v55 = *(double *)(v16 - 144);
    v56 = *((void *)&v65 + 1);
    if (*((void *)&v65 + 1) == *(void *)v65) {
      v56 = *(void *)(v65 - 8) + 4032LL;
    }
    v57 = *(double *)(v56 - 144);
    v66 = 134349312;
    v67 = v55;
    v68 = 2050;
    v69 = v57;
    v37 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "[RunningSpeedKF] interpolateOdometry odometer error, y_0, %{public}.4f, y_1, %{public}.4f",  &v66,  22);
    goto LABEL_37;
  }

  return result;
}

  v32 = *(_OWORD *)(a1 + 6248);
  v105 = *(_OWORD *)(a1 + 6232);
  v106 = v32;
  v107 = *(_OWORD *)(a1 + 6264);
  v33 = *(_OWORD *)(a1 + 6184);
  v101 = *(_OWORD *)(a1 + 6168);
  v102 = v33;
  v34 = *(_OWORD *)(a1 + 6216);
  v103 = *(_OWORD *)(a1 + 6200);
  v104 = v34;
  if (((sub_100495E74(&v108) | v12 ^ 1) & 1) == 0)
  {
    sub_100D84E50( &v101,  a3 + 5968,  *(_DWORD *)(a1 + 6156),  a1 + 1408,  v9[270],  (uint64_t)&buf,  *(_DWORD **)(a1 + 6384));
    *(void *)v128 = &v101;
    v129[0] = a3 + 5968;
    v129[1] = a3 + 6156;
    sub_100D89A50((uint64_t)v128, (__int128 *)&buf);
    if (v141 < 0) {
      operator delete(__p);
    }
    if (v139 < 0) {
      operator delete(v138);
    }
  }

  if (!sub_100495E64(&v108) && *(_BYTE *)(a1 + 1624))
  {
    sub_100495EC8((int *)(a3 + 5968));
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
    v35 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = sub_100D89B50((uint64_t)&buf.__r_.__value_.__l.__size_, (uint64_t *)a2);
      v36 = sub_100446354((int *)&buf);
      *(_DWORD *)v128 = 136446210;
      *(uint64_t *)((char *)v3 + 156) = (uint64_t)v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s",  v128,  0xCu);
      sub_1002DDAD8((uint64_t)&buf);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018820E8);
      }
      v74 = qword_101934868;
      *(_DWORD *)v128 = sub_100D89B50((uint64_t)v129, (uint64_t *)a2);
      v75 = sub_100446354((int *)v128);
      v130 = 136446210;
      v131 = v75;
      LODWORD(v84) = 12;
      v76 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v74,  0LL,  "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s",  &v130,  v84);
      sub_1002DDAD8((uint64_t)v128);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Lo cationRequest &) const",  "%s\n",  (const char *)v76);
      if (v76 != &buf) {
        free(v76);
      }
    }

    uint64_t v12 = 0;
  }

  if (((sub_100495E64(&v108) | v12 ^ 1) & 1) == 0 && v11 < 5.0 && *v9)
  {
    *(_BYTE *)(a3 + 1657) = 1;
    sub_10049609C(a3 + 5968, 5, 0xAu, v10);
    sub_100495EC8((int *)(a3 + 5968));
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
    v37 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = (int)v11;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "@WifiFlow, scanreq, suppressed, %{public}d",  (uint8_t *)&buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018820E8);
      }
      *(_DWORD *)v128 = 67240192;
      *(_DWORD *)&v128[4] = (int)v11;
      LODWORD(v84) = 8;
      v38 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiFlow, scanreq, suppressed, %{public}d",  v128,  v84);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Lo cationRequest &) const",  "%s\n",  (const char *)v38);
      if (v38 != &buf) {
        free(v38);
      }
    }

    goto LABEL_116;
  }

  if (v12)
  {
    v39 = v9[296];
    if (sub_100495E64(&v108)) {
      v40 = 10;
    }
    else {
      v40 = v39;
    }
    if (sub_100495E64(&v108))
    {
      LODWORD(v101) = 1;
      *(_DWORD *)(a3 + 6156) = 1;
      if (*(double *)&v103 < *((double *)&v101 + 1))
      {
        *(void *)&v103 = *(void *)(a1 + 6384);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018820E8);
        }
        v41 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = *(double *)&v103 - *((double *)&v101 + 1);
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "@EmerTick, scanrequest, %{public}.1f",  (uint8_t *)&buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_1018820E8);
          }
          v81 = qword_101934868;
          *(_DWORD *)v128 = 134349056;
          *(double *)((char *)v3 + 156) = *(double *)&v103 - *((double *)&v101 + 1);
          LODWORD(v84) = 12;
          v82 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v81,  0LL,  "@EmerTick, scanrequest, %{public}.1f",  v128,  v84);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client ::LocationRequest &) const",  "%s\n",  (const char *)v82);
          if (v82 != &buf) {
            free(v82);
          }
        }
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018820E8);
      }
      v42 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        v43 = sub_10099EBD8((char)v40);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(double *)&v103 - *((double *)&v101 + 1);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "@EmerFlow, ScanRequest, type, %{public}s, tte, %{public}.1f",  (uint8_t *)&buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018820E8);
        }
        v77 = qword_101934868;
        v78 = sub_10099EBD8((char)v40);
        v79 = *(double *)&v103 - *((double *)&v101 + 1);
        *(_DWORD *)v128 = 136446466;
        *(uint64_t *)((char *)v3 + 156) = (uint64_t)v78;
        WORD2(v129[0]) = 2050;
        *(double *)((char *)v3 + 166) = v79;
        LODWORD(v84) = 22;
        v80 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v77,  0LL,  "@EmerFlow, ScanRequest, type, %{public}s, tte, %{public}.1f",  v128,  v84);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client:: LocationRequest &) const",  "%s\n",  (const char *)v80);
        if (v80 != &buf) {
          free(v80);
        }
      }
    }

    if (sub_100495E88(&v108))
    {
      v44 = *(double *)(a1 + 6384);
      v45 = sub_100496E24(a3 + 5968);
      v46 = sub_100495E64(&v108);
      sub_100496B38((char *)a2, (uint64_t)&v99);
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(**(void **)(a1 + 6472) + 16LL))( &v94,  *(void *)(a1 + 6472),  7LL);
      sub_100D899B4((uint64_t)&buf, 7, v45, v46, &v99, (uint64_t)&v94, v44);
      sub_100D87E94(a3 + 1664, (uint64_t)&buf);
      if (v137 && v135)
      {
        v136 = v135;
        operator delete(v135);
      }

      if (v134 < 0) {
        operator delete(v133);
      }
      if (v98 && v95)
      {
        v96 = v95;
        operator delete(v95);
      }

      if ((v100 & 0x80000000) == 0) {
        goto LABEL_103;
      }
      v47 = (void *)v99;
    }

    else
    {
      v48 = *(double *)(a1 + 6384);
      v49 = sub_100496E24(a3 + 5968);
      v50 = sub_100495E64(&v108);
      sub_100496B38((char *)a2, (uint64_t)&v92);
      (*(void (**)(uint64_t *__return_ptr, void, void))(**(void **)(a1 + 6472) + 16LL))( &v87,  *(void *)(a1 + 6472),  (char)v40);
      sub_100D899B4((uint64_t)&buf, v40, v49, v50, &v92, (uint64_t)&v87, v48);
      sub_100D87E94(a3 + 1664, (uint64_t)&buf);
      if (v137 && v135)
      {
        v136 = v135;
        operator delete(v135);
      }

      if (v134 < 0) {
        operator delete(v133);
      }
      if ((_BYTE)v91 && v88)
      {
        v89 = v88;
        operator delete(v88);
      }

      if ((SHIBYTE(v93) & 0x80000000) == 0) {
        goto LABEL_103;
      }
      v47 = (void *)v92;
    }

    operator delete(v47);
LABEL_103:
    if (v40 == 10) {
      v51 = 3;
    }
    else {
      v51 = 2;
    }
    sub_10049609C(a3 + 5968, v51, 0, v10);
    v52 = (uint64_t **)(*(void *)(a3 + 6424) + 56LL);
    buf.__r_.__value_.__r.__words[0] = a3 + 1688;
    v53 = sub_1002E2A90(v52, (const void **)(a3 + 1688), (uint64_t)&unk_1012CF090, (__int128 **)&buf);
    ++*((_DWORD *)v53 + 14);
    v54 = *(void *)(a3 + 6424);
    sub_1010DDBC0(&buf, "total");
    *(void *)v128 = &buf;
    v55 = sub_1002E2BC8( (uint64_t **)(v54 + 56),  (const void **)&buf.__r_.__value_.__l.__data_,  (uint64_t)&unk_1012CF090,  (_OWORD **)v128);
    ++*((_DWORD *)v55 + 14);
    v56 = *(void *)(a3 + 6424);
    if (*(_BYTE *)(a3 + 1744)) {
      v57 = *(unsigned __int8 *)(a3 + 1712) | 0x100;
    }
    else {
      v57 = 0;
    }
    sub_1002DAEE8(*(char *)(a3 + 1664), v57, &buf);
    *(void *)v128 = &buf;
    v58 = sub_1002E2BC8( (uint64_t **)(v56 + 80),  (const void **)&buf.__r_.__value_.__l.__data_,  (uint64_t)&unk_1012CF090,  (_OWORD **)v128);
    ++*((_DWORD *)v58 + 14);
    v59 = *(void *)(a3 + 6424);
    sub_1010DDBC0(&buf, "total");
    *(void *)v128 = &buf;
    v60 = sub_1002E2BC8( (uint64_t **)(v59 + 80),  (const void **)&buf.__r_.__value_.__l.__data_,  (uint64_t)&unk_1012CF090,  (_OWORD **)v128);
    ++*((_DWORD *)v60 + 14);
    *(void *)(a3 + 6120) = *(void *)(a1 + 6384);
    sub_100496E4C(a3 + 5968);
  }

  sub_100602D1C(v6, (unsigned int *)&v38);
LABEL_39:
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)__p);
  }
}

  v53 = (char *)v122;
  if (v6 != v123) {
    v123 = v6;
  }
  v116 = 0LL;
  v117 = 0LL;
  v118 = 0LL;
  if (v122 == v6)
  {
LABEL_43:
    v53 = v6;
  }

  else
  {
    while (*(double *)(a1 + 24) >= vabdd_f64(a3, sub_100924318((uint64_t)v53)))
    {
      v53 += 144;
      if (v53 == v6) {
        goto LABEL_43;
      }
    }

    v65 = 0x8E38E38E38E38E39LL * ((v117 - (_BYTE *)v116) >> 4) + 1;
    if (v65 > 0x1C71C71C71C71C7LL) {
LABEL_103:
    }
      sub_100007008();
    else {
      v66 = v65;
    }
    if (v66) {
      v67 = (char *)sub_1002B4F00((uint64_t)&v118, v66);
    }
    else {
      v67 = 0LL;
    }
    v68 = &v67[16 * ((v117 - (_BYTE *)v116) >> 4)];
    *(_OWORD *)v68 = *(_OWORD *)v53;
    v69 = *((_OWORD *)v53 + 1);
    v70 = *((_OWORD *)v53 + 2);
    v71 = *((_OWORD *)v53 + 4);
    *((_OWORD *)v68 + 3) = *((_OWORD *)v53 + 3);
    *((_OWORD *)v68 + 4) = v71;
    *((_OWORD *)v68 + 1) = v69;
    *((_OWORD *)v68 + 2) = v70;
    v72 = *((_OWORD *)v53 + 5);
    v73 = *((_OWORD *)v53 + 6);
    v74 = *((_OWORD *)v53 + 8);
    *((_OWORD *)v68 + 7) = *((_OWORD *)v53 + 7);
    *((_OWORD *)v68 + 8) = v74;
    *((_OWORD *)v68 + 5) = v72;
    *((_OWORD *)v68 + 6) = v73;
    v116 = v68;
    v118 = (unint64_t)&v67[144 * v66];
    v117 = v68 + 144;
    if (v53 != v6)
    {
      for (i = v53 + 144; i != v6; i += 144)
      {
        if (*(double *)(a1 + 24) >= vabdd_f64(a3, sub_100924318((uint64_t)i)))
        {
          *(_OWORD *)v53 = *(_OWORD *)i;
          v83 = *((_OWORD *)i + 1);
          v84 = *((_OWORD *)i + 2);
          v85 = *((_OWORD *)i + 4);
          *((_OWORD *)v53 + 3) = *((_OWORD *)i + 3);
          *((_OWORD *)v53 + 4) = v85;
          *((_OWORD *)v53 + 1) = v83;
          *((_OWORD *)v53 + 2) = v84;
          v86 = *((_OWORD *)i + 5);
          v87 = *((_OWORD *)i + 6);
          v88 = *((_OWORD *)i + 7);
          *(_OWORD *)(v53 + 124) = *(_OWORD *)(i + 124);
          *((_OWORD *)v53 + 6) = v87;
          *((_OWORD *)v53 + 7) = v88;
          *((_OWORD *)v53 + 5) = v86;
          v53 += 144;
        }

        else
        {
          v76 = v117;
          if ((unint64_t)v117 >= v118)
          {
            v89 = (char *)v116;
            v90 = 0x8E38E38E38E38E39LL * ((v117 - (_BYTE *)v116) >> 4);
            v91 = v90 + 1;
            if (v90 + 1 > 0x1C71C71C71C71C7LL) {
              goto LABEL_103;
            }
            else {
              v92 = v91;
            }
            if (v92)
            {
              v93 = (char *)sub_1002B4F00((uint64_t)&v118, v92);
              v89 = (char *)v116;
              v76 = v117;
            }

            else
            {
              v93 = 0LL;
            }

            v94 = &v93[16 * ((v117 - (_BYTE *)v116) >> 4)];
            *(_OWORD *)v94 = *(_OWORD *)i;
            v95 = *((_OWORD *)i + 1);
            v96 = *((_OWORD *)i + 2);
            v97 = *((_OWORD *)i + 4);
            *((_OWORD *)v94 + 3) = *((_OWORD *)i + 3);
            *((_OWORD *)v94 + 4) = v97;
            *((_OWORD *)v94 + 1) = v95;
            *((_OWORD *)v94 + 2) = v96;
            v98 = *((_OWORD *)i + 5);
            v99 = *((_OWORD *)i + 6);
            v100 = *((_OWORD *)i + 8);
            *((_OWORD *)v94 + 7) = *((_OWORD *)i + 7);
            *((_OWORD *)v94 + 8) = v100;
            *((_OWORD *)v94 + 5) = v98;
            *((_OWORD *)v94 + 6) = v99;
            if (v76 == v89)
            {
              v108 = &v93[144 * v90];
            }

            else
            {
              v101 = &v93[144 * v90];
              do
              {
                *((_OWORD *)v101 - 9) = *((_OWORD *)v76 - 9);
                v102 = *((_OWORD *)v76 - 8);
                v103 = *((_OWORD *)v76 - 7);
                v104 = *((_OWORD *)v76 - 5);
                *((_OWORD *)v101 - 6) = *((_OWORD *)v76 - 6);
                *((_OWORD *)v101 - 5) = v104;
                *((_OWORD *)v101 - 8) = v102;
                *((_OWORD *)v101 - 7) = v103;
                v105 = *((_OWORD *)v76 - 4);
                v106 = *((_OWORD *)v76 - 3);
                v107 = *((_OWORD *)v76 - 2);
                v108 = v101 - 144;
                *(_OWORD *)(v101 - 20) = *(_OWORD *)(v76 - 20);
                *((_OWORD *)v101 - 3) = v106;
                *((_OWORD *)v101 - 2) = v107;
                *((_OWORD *)v101 - 4) = v105;
                v76 -= 144;
                v101 -= 144;
              }

              while (v76 != v89);
            }

            v109 = v94 + 144;
            v116 = v108;
            v117 = v94 + 144;
            v118 = (unint64_t)&v93[144 * v92];
            if (v89) {
              operator delete(v89);
            }
            v117 = v109;
          }

          else
          {
            *(_OWORD *)v117 = *(_OWORD *)i;
            v77 = *((_OWORD *)i + 1);
            v78 = *((_OWORD *)i + 2);
            v79 = *((_OWORD *)i + 4);
            *((_OWORD *)v76 + 3) = *((_OWORD *)i + 3);
            *((_OWORD *)v76 + 4) = v79;
            *((_OWORD *)v76 + 1) = v77;
            *((_OWORD *)v76 + 2) = v78;
            v80 = *((_OWORD *)i + 5);
            v81 = *((_OWORD *)i + 6);
            v82 = *((_OWORD *)i + 8);
            *((_OWORD *)v76 + 7) = *((_OWORD *)i + 7);
            *((_OWORD *)v76 + 8) = v82;
            *((_OWORD *)v76 + 5) = v80;
            *((_OWORD *)v76 + 6) = v81;
            v117 = v76 + 144;
          }
        }
      }
    }
  }

  if (v53 != v123) {
    v123 = v53;
  }
  v54 = 0x8E38E38E38E38E39LL * ((v53 - (_BYTE *)v122) >> 4);
  v113 = 0LL;
  v114 = 0LL;
  v115 = 0LL;
  if (v54 > *(unsigned int *)(a1 + 48))
  {
    v55 = 126 - 2 * __clz(v54);
    v56 = v53 == v122 ? 0LL : v55;
    sub_100F7FF40((__int128 *)v122, (__int128 *)v53, v56, 1);
    v57 = 0x8E38E38E38E38E39LL * ((v123 - (_BYTE *)v122) >> 4);
    v58 = *(unsigned int *)(a1 + 48);
    v59 = v57 - v58;
    sub_100F81788(v122, (_OWORD *)v122 + 9 * (v57 - v58), &v113);
    if (v57 != v58)
    {
      v60 = (char *)v122;
      v61 = (char *)v122 + 144 * v59;
      v62 = v123 - v61;
      if (v123 != v61) {
        memmove(v122, v61, v62 - 4);
      }
      v123 = &v60[v62];
    }
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  sub_100F81788(__p, v120, (void **)a2);
  sub_100F81788(v116, v117, (void **)a2);
  sub_100F81788(v113, v114, (void **)a2);
  v63 = *(double **)a2;
  v64 = *(double **)(a2 + 8);
  while (v63 != v64)
  {
    sub_100924340(v63, (uint64_t)v110);
    sub_100DAAFEC(*(uint64_t **)(a1 + 96), (uint64_t)v110);
    if (v112 < 0) {
      operator delete(v111);
    }
    v63 += 18;
  }

  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }

  if (v116)
  {
    v117 = (char *)v116;
    operator delete(v116);
  }

  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }

  if (v122)
  {
    v123 = (char *)v122;
    operator delete(v122);
  }

  int v8 = *(_DWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(_DWORD *)(a1 + 168) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "indoorBikeDistance", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xEu);
  unsigned int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }

  uint64_t result = *(float *)(a2 + 84);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 84) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "isSwingStanceCycle", *(_BYTE *)(a1 + 97));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  int v17 = *(_DWORD *)(a2 + 84);
  v3 |= 0x800u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 84) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "lastZeroTime", *(void *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0xBu);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

        if (PB::Reader::placeMark(this, v76, v31, v32)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v30 + 16LL))(v30, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v76);
LABEL_89:
          uint64_t v2 = *((void *)this + 1);
          int v3 = *((void *)this + 2);
          unsigned int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 5u:
        *(_WORD *)(a1 + 48) |= 0x80u;
        v35 = *((void *)this + 1);
        if (v35 >= *((void *)this + 2))
        {
          v38 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v36 = v35 + 1;
          v37 = *(unsigned __int8 *)(*(void *)this + v35);
          *((void *)this + 1) = v36;
          v38 = v37 != 0;
        }

        *(_BYTE *)(a1 + 41) = v38;
        goto LABEL_89;
      case 6u:
        *(_WORD *)(a1 + 48) |= 0x20u;
        v39 = *((void *)this + 1);
        if (v39 >= *((void *)this + 2))
        {
          v42 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v40 = v39 + 1;
          v41 = *(unsigned __int8 *)(*(void *)this + v39);
          *((void *)this + 1) = v40;
          v42 = v41 != 0;
        }

        *(_BYTE *)(a1 + 39) = v42;
        goto LABEL_89;
      case 7u:
        *(_WORD *)(a1 + 48) |= 4u;
        v43 = *((void *)this + 1);
        if (v43 >= *((void *)this + 2))
        {
          v46 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v44 = v43 + 1;
          v45 = *(unsigned __int8 *)(*(void *)this + v43);
          *((void *)this + 1) = v44;
          v46 = v45 != 0;
        }

        *(_BYTE *)(a1 + 36) = v46;
        goto LABEL_89;
      case 8u:
        *(_WORD *)(a1 + 48) |= 8u;
        v47 = *((void *)this + 1);
        if (v47 >= *((void *)this + 2))
        {
          v50 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v48 = v47 + 1;
          v49 = *(unsigned __int8 *)(*(void *)this + v47);
          *((void *)this + 1) = v48;
          v50 = v49 != 0;
        }

        *(_BYTE *)(a1 + 37) = v50;
        goto LABEL_89;
      case 9u:
        *(_WORD *)(a1 + 48) |= 0x40u;
        v51 = *((void *)this + 1);
        if (v51 >= *((void *)this + 2))
        {
          v54 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v52 = v51 + 1;
          v53 = *(unsigned __int8 *)(*(void *)this + v51);
          *((void *)this + 1) = v52;
          v54 = v53 != 0;
        }

        *(_BYTE *)(a1 + 40) = v54;
        goto LABEL_89;
      case 0xAu:
        *(_WORD *)(a1 + 48) |= 0x200u;
        v55 = *((void *)this + 1);
        if (v55 >= *((void *)this + 2))
        {
          v58 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v56 = v55 + 1;
          v57 = *(unsigned __int8 *)(*(void *)this + v55);
          *((void *)this + 1) = v56;
          v58 = v57 != 0;
        }

        *(_BYTE *)(a1 + 43) = v58;
        goto LABEL_89;
      case 0xBu:
        *(_WORD *)(a1 + 48) |= 0x100u;
        v59 = *((void *)this + 1);
        if (v59 >= *((void *)this + 2))
        {
          v62 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v60 = v59 + 1;
          v61 = *(unsigned __int8 *)(*(void *)this + v59);
          *((void *)this + 1) = v60;
          v62 = v61 != 0;
        }

        *(_BYTE *)(a1 + 42) = v62;
        goto LABEL_89;
      case 0xCu:
        *(_WORD *)(a1 + 48) |= 0x10u;
        v63 = *((void *)this + 1);
        if (v63 >= *((void *)this + 2))
        {
          v66 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v64 = v63 + 1;
          v65 = *(unsigned __int8 *)(*(void *)this + v63);
          *((void *)this + 1) = v64;
          v66 = v65 != 0;
        }

        *(_BYTE *)(a1 + 38) = v66;
        goto LABEL_89;
      case 0xDu:
        *(_WORD *)(a1 + 48) |= 0x400u;
        v67 = *((void *)this + 1);
        if (v67 >= *((void *)this + 2))
        {
          v70 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          v68 = v67 + 1;
          v69 = *(unsigned __int8 *)(*(void *)this + v67);
          *((void *)this + 1) = v68;
          v70 = v69 != 0;
        }

        *(_BYTE *)(a1 + 44) = v70;
        goto LABEL_89;
      default:
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_89;
    }
  }

  int v19 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 36) = v19;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "screenTiltAtEndDegrees", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x11u);
  unsigned int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  v6 |= 0x20000u;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = v6;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0xCu);
  unsigned int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

  uint64_t result = *(float *)(a2 + 96);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 96) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "configPostTriggerLimitTime", *(_DWORD *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }

  int v7 = *(_DWORD *)(a2 + 112);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 112) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "configPeakPressureThreshold", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x1000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 7u);
  unsigned int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }

  int v10 = *(_DWORD *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 92) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "gpsTimestamp", *(void *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 8u);
  unsigned int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 200), 0x68u);
  unsigned int v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "configIx", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 4u);
  unsigned int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }

  v18 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 52) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "latchedIsBaro", *(_DWORD *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0x192u);
  unsigned int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  unsigned int v20 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 52) = v20;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0) {
      return result;
    }
LABEL_40:
    unsigned int v22 = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(result + 92) = v3 | 0x10000;
    *(_BYTE *)(result + 88) = v22;
    return result;
  }

  PB::TextFormatter::format(this, "staticSpeedMetersPerSecondThresholdFromSydneyB", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 4) != 0) {
    goto LABEL_39;
  }
LABEL_19:
  if ((v5 & 8) != 0) {
LABEL_20:
  }
    PB::TextFormatter::format(this, "triggerTimestamp", *(void *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xCEu);
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 88), 0xCFu);
  }
  return result;
}

  unsigned int v20 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 112) = v3;
  *(void *)(result + 48) = v20;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_40:
    unsigned int v22 = *(void *)(a2 + 24);
    *(_DWORD *)(result + 112) = v3 | 4;
    *(void *)(result + 24) = v22;
    return result;
  }

  PB::TextFormatter::format(this, "runningDeltaVZOverEpoch", *(float *)(a1 + 100));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) != 0) {
    goto LABEL_39;
  }
LABEL_19:
  if ((v5 & 0x40) != 0) {
LABEL_20:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x12u);
  if ((*(_DWORD *)(v3 + 112) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x13u);
  }
  return result;
}

  BOOL v24 = *(void *)(a2 + 72);
  v6 |= 4u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 72) = v24;
  if ((*(_DWORD *)(a2 + 152) & 0x2000) != 0)
  {
LABEL_19:
    uint64_t v9 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 152) = v6 | 0x2000;
    *(_DWORD *)(a1 + 136) = v9;
  }

  PB::TextFormatter::format(this, "peakToPeakSeparationThreshold", *(void *)(a1 + 88));
  char v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x20) == 0)
  {
LABEL_21:
    if ((v11 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 104), 0x66u);
  unsigned int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_40:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 72), 0xCAu);
    if ((*(_DWORD *)(v3 + 152) & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 0xFu);
  int v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x100) == 0)
  {
LABEL_24:
    if ((v14 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_40;
  }

  BOOL v24 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 124) |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v24;
  int v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x40) != 0) {
    goto LABEL_39;
  }
LABEL_23:
  if ((v10 & 0x2000) != 0)
  {
LABEL_24:
    char v11 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 124) |= 0x2000u;
    *(_DWORD *)(a1 + 112) = v11;
  }

  return a1;
}

  PB::TextFormatter::format(this, "unitDistanceSmallBufferDelta", *(float *)(a1 + 104));
  uint64_t v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x1000) == 0)
  {
LABEL_22:
    if ((v12 & 0x2000) == 0) {
      goto LABEL_23;
    }
LABEL_40:
    PB::TextFormatter::format(this, "unitDistanceThresholdApplied", *(float *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 124) & 0x4000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0xFu);
  char v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x200) == 0)
  {
LABEL_22:
    if ((v11 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_40;
  }

  uint64_t result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 64) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x11u);
  unsigned int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaseline", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 3u);
  unsigned int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }

      uint64_t v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      unsigned int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 48) |= 1u;
    int v25 = *((void *)this + 1);
    if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }

    *(void *)(a1 + 32) = *(void *)(*(void *)this + v25);
    goto LABEL_37;
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "failureCode", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 6u);
  unsigned int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }

  uint64_t result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176), 0xCu);
  unsigned int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

      uint64_t v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      unsigned int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 48) |= 1u;
    int v25 = *((void *)this + 1);
    if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }

    *(void *)(a1 + 8) = *(void *)(*(void *)this + v25);
    goto LABEL_37;
  }

  return v4 == 0;
}

      uint64_t v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      unsigned int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 48) |= 1u;
    int v25 = *((void *)this + 1);
    if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }

    *(void *)(a1 + 8) = *(void *)(*(void *)this + v25);
    goto LABEL_37;
  }

  return v4 == 0;
}

      uint64_t v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      unsigned int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    *(_BYTE *)(a1 + 48) |= 1u;
    int v25 = *((void *)this + 1);
    if (v25 > 0xFFFFFFFFFFFFFFF7LL || v25 + 8 > *((void *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }

    *(void *)(a1 + 8) = *(void *)(*(void *)this + v25);
    goto LABEL_37;
  }

  return v4 == 0;
}

  uint64_t result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 144) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "shortBoutsCycleTimeMedian", *(double *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0x10u);
  unsigned int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlCv", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 7u);
  unsigned int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }

  uint64_t result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 200) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xBu);
  unsigned int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 40));
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 4u);
  unsigned int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }

  uint64_t result = *(float *)(a2 + 112);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 112) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "fFTBin2", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xBu);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

  unsigned int v20 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 44) = v20;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 2) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      return result;
    }
LABEL_40:
    unsigned int v22 = *(_BYTE *)(a2 + 81);
    *(_DWORD *)(result + 84) = v3 | 0x40000;
    *(_BYTE *)(result + 81) = v22;
    return result;
  }

  PB::TextFormatter::format(this, "shouldSuppress", *(_BYTE *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40000) != 0) {
    goto LABEL_39;
  }
LABEL_19:
  if ((v5 & 1) != 0) {
LABEL_20:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x12u);
  if ((*(_DWORD *)(v3 + 84) & 0x40000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 81), 0x13u);
  }
  return result;
}

  uint64_t v12 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 60) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "mountedState", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "demConfidence", *(float *)(a1 + 128));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 6u);
  unsigned int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 5u);
  unsigned int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 36) = LODWORD(result);
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xEu);
  unsigned int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }

  uint64_t result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 28) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_40:
    uint64_t result = *(float *)(a2 + 48);
    *(_DWORD *)(a1 + 88) = v3 | 0x200;
    *(float *)(a1 + 48) = result;
    return result;
  }

  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20000) != 0) {
    goto LABEL_39;
  }
LABEL_19:
  if ((v5 & 1) != 0) {
LABEL_20:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x12u);
  if ((*(_DWORD *)(v3 + 88) & 0x200) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x13u);
  }
  return result;
}

  PB::TextFormatter::format(this, "auxAvgOmegaLong", *(float *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 5u);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }

  int v17 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 80) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "isWeightSet", *(_BYTE *)(a1 + 124));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

  char v11 = *(_BYTE *)(a2 + 183);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 183) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }

  unint64_t v13 = *(void *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 144) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }

  PB::TextFormatter::format(this, "integratedUserAccelY", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0xBu);
  unsigned int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }

void sub_10006756C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1000675B8()
{
  return 1LL;
}

void *sub_1000675C0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ATVAirplayBluetoothRssi");
}

void sub_1000675D0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  2891LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v6;
    int v5 = *(_DWORD *)(a2 + 44);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 8) = v7;
    int v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0) {
        goto LABEL_10;
      }
LABEL_15:
      uint64_t v9 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 44) |= 8u;
      int v10 = *(std::string **)(a1 + 24);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v10 = (std::string *)operator new(0x18uLL);
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 24) = v10;
      }

      std::string::operator=(v10, v9);
      int v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 0x10) == 0)
      {
LABEL_11:
        if ((v5 & 0x20) == 0) {
          return;
        }
        goto LABEL_20;
      }

      goto LABEL_18;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }

  int v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 20) = v8;
  int v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) != 0) {
    goto LABEL_15;
  }
LABEL_10:
  if ((v5 & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_18:
  int v11 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(_DWORD *)(a1 + 32) = v11;
  if ((*(_DWORD *)(a2 + 44) & 0x20) != 0)
  {
LABEL_20:
    int v12 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v12;
  }

void sub_100067760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100067778(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A798;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000677A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A798;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_1000677DC()
{
  v0 = operator new(0x30uLL);
  void *v0 = off_10181A798;
  v0[1] = 0LL;
  v0[2] = 4LL;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 0x100000001LL;
  *((_OWORD *)v0 + 2) = xmmword_1012CA3D0;
  return result;
}

uint64_t sub_10006781C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 4LL;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(void *)(result + 32) = 0x100000001LL;
  }

  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100067874( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v24[0];
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 44) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        int v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 17)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_32;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_21;
        }
LABEL_32:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v24) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v24;
        *(_DWORD *)(a1 + 44) |= 2u;
        int v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_36:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v24) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v24[0];
          int v10 = *(_DWORD *)(a1 + 44) | 4;
          *(_DWORD *)(a1 + 44) = v10;
          v18 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v18 < *((void *)this + 2) && *v18 == 34)
          {
            *((void *)this + 1) = v18 + 1;
LABEL_40:
            *(_DWORD *)(a1 + 44) = v10 | 8;
            int v19 = *(void **)(a1 + 24);
            if (v19 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              int v19 = operator new(0x18uLL);
              v19[1] = 0LL;
              v19[2] = 0LL;
              *int v19 = 0LL;
              *(void *)(a1 + 24) = v19;
            }

            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v19);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v20 = (_BYTE *)*((void *)this + 1);
            unint64_t v11 = *((void *)this + 2);
            if ((unint64_t)v20 < v11 && *v20 == 40)
            {
              int v12 = v20 + 1;
              *((void *)this + 1) = v12;
LABEL_46:
              if ((unint64_t)v12 >= v11 || *v12 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v21 = v24[0];
              }

              else
              {
                unsigned int v21 = *v12;
                *((void *)this + 1) = v12 + 1;
              }

              if (v21 - 1 <= 0xE)
              {
                *(_DWORD *)(a1 + 44) |= 0x10u;
                *(_DWORD *)(a1 + 32) = v21;
              }

              unsigned int v22 = (_BYTE *)*((void *)this + 1);
              unint64_t v13 = *((void *)this + 2);
              if ((unint64_t)v22 < v13 && *v22 == 48)
              {
                int v14 = v22 + 1;
                *((void *)this + 1) = v14;
LABEL_56:
                if ((unint64_t)v14 >= v13 || *v14 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v23 = v24[0];
                }

                else
                {
                  unsigned int v23 = *v14;
                  *((void *)this + 1) = v14 + 1;
                }

                if (v23 - 1 <= 1)
                {
                  *(_DWORD *)(a1 + 44) |= 0x20u;
                  *(_DWORD *)(a1 + 36) = v23;
                }

                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1LL;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_36;
        }
        goto LABEL_21;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_21;
        }
        int v10 = *(_DWORD *)(a1 + 44);
        goto LABEL_40;
      case 5u:
        int v7 = TagFallback & 7;
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_46;
      case 6u:
        int v7 = TagFallback & 7;
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_56;
      default:
        int v7 = TagFallback & 7;
LABEL_21:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100067BE4( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_100067CB0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_40;
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
    }

    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      unsigned int v4 = 2;
    }
  }

  else
  {
    unsigned int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    char v9 = v8;
    uint64_t v10 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      uint64_t v10 = *(void *)(v7 + 8);
      int v3 = *(_DWORD *)(a1 + 44);
      char v9 = *(_BYTE *)(v7 + 23);
    }

    else
    {
      int v12 = 1;
    }

    if (v9 < 0) {
      int v8 = v10;
    }
    uint64_t v5 = (v5 + v12 + v8 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_40;
      }
      goto LABEL_34;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }

  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v13 & 0x80000000) != 0)
  {
    int v14 = 11;
  }

  else if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    int v14 = 2;
  }

  uint64_t v5 = (v14 + v5);
  if ((v3 & 0x20) != 0)
  {
LABEL_34:
    uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v15 & 0x80000000) != 0)
    {
      int v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }

    else
    {
      int v16 = 2;
    }

    uint64_t v5 = (v16 + v5);
  }

void sub_100067E04(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100067E50()
{
  return 1LL;
}

void *sub_100067E58@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.HomeKitBluetoothRssi");
}

uint64_t sub_100067E68(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10181A810;
  *(void *)(a1 + 64) = 1LL;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  sub_100067ED0(a1, a2);
  return a1;
}

void sub_100067EBC(_Unwind_Exception *a1)
{
}

float sub_100067ED0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v22,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  3344LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v22,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 72);
  if (!(_BYTE)v6) {
    return *(float *)&v5;
  }
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 1u;
    *(_DWORD *)(a1 + 64) = v7;
    int v6 = *(_DWORD *)(a2 + 72);
  }

  if ((v6 & 2) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 72) |= 2u;
    *(void *)(a1 + 8) = v5;
    int v6 = *(_DWORD *)(a2 + 72);
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }

  else if ((v6 & 4) == 0)
  {
    goto LABEL_9;
  }

  *(_DWORD *)(a1 + 72) |= 4u;
  int v8 = *(char **)(a1 + 16);
  if (!v8)
  {
    int v8 = (char *)operator new(0x30uLL);
    *((_DWORD *)v8 + 4) = 1;
    *(void *)int v8 = off_10181A540;
    *((void *)v8 + 1) = 0LL;
    *((_DWORD *)v8 + 9) = 0;
    *((_DWORD *)v8 + 10) = 0;
    *(void *)(v8 + 28) = 0LL;
    *(void *)(v8 + 20) = 0LL;
    *(void *)(a1 + 16) = v8;
  }

  uint64_t v9 = *(void *)(a2 + 16);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0818 + 16);
  }
  sub_100064EA8((uint64_t)v8, v9);
  int v6 = *(_DWORD *)(a2 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

void sub_100068208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100068224(void *result)
{
  if ((void *)qword_1019A0818 != result)
  {
    char v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t result = (void *)v1[7];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_1000682D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A810;
  sub_100068224(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100068300(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A810;
  sub_100068224(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100068334()
{
  v0 = (char *)operator new(0x50uLL);
  *(void *)v0 = off_10181A810;
  *((void *)v0 + 8) = 1LL;
  *((_DWORD *)v0 + 18) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *((void *)v0 + 7) = 0LL;
  return result;
}

uint64_t sub_10006837C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 72);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 64) = 1;
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 40))
        {
          *(_DWORD *)(v3 + 16) = 1;
          *(void *)(v3 + 8) = 0LL;
          *(void *)(v3 + 28) = 0LL;
          *(void *)(v3 + 20) = 0LL;
        }

        *(_DWORD *)(v3 + 40) = 0;
        int v2 = *(_DWORD *)(result + 72);
      }
    }

    if ((v2 & 8) != 0)
    {
      double result = *(void *)(result + 24);
      if (result)
      {
        double result = sub_100066864(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    if ((v2 & 0x10) != 0)
    {
      double result = *(void *)(v1 + 32);
      if (result)
      {
        double result = sub_100066FA0(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    if ((v2 & 0x20) != 0)
    {
      double result = *(void *)(v1 + 40);
      if (result)
      {
        double result = sub_10006781C(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    if ((v2 & 0x40) != 0)
    {
      double result = *(void *)(v1 + 48);
      if (result)
      {
        double result = sub_1000645C4(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }

    if ((v2 & 0x80) != 0)
    {
      double result = *(void *)(v1 + 56);
      if (result) {
        double result = sub_100065DB0(result);
      }
    }
  }

  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_100068440( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v68[0];
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 72) |= 1u;
          *(_DWORD *)(a1 + 64) = v9;
        }

        int v12 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 17)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_35;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_25;
        }
LABEL_35:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v68) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v68;
        int v10 = *(_DWORD *)(a1 + 72) | 2;
        *(_DWORD *)(a1 + 72) = v10;
        uint64_t v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
LABEL_39:
        *(_DWORD *)(a1 + 72) = v10 | 4;
        int v14 = *(char **)(a1 + 16);
        if (!v14)
        {
          int v14 = (char *)operator new(0x30uLL);
          *((_DWORD *)v14 + 4) = 1;
          *(void *)int v14 = off_10181A540;
          *((void *)v14 + 1) = 0LL;
          *((_DWORD *)v14 + 9) = 0;
          *((_DWORD *)v14 + 10) = 0;
          *(void *)(v14 + 28) = 0LL;
          *(void *)(v14 + 20) = 0LL;
          *(void *)(a1 + 16) = v14;
        }

        uint64_t v15 = (char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v15;
          *((void *)this + 1) = v15 + 1;
        }

        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0LL;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        unsigned int v23 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v23 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 72) |= 8u;
        BOOL v24 = *(void **)(a1 + 24);
        if (!v24)
        {
          BOOL v24 = operator new(0x30uLL);
          *BOOL v24 = off_10181A6A8;
          v24[1] = 0LL;
          unsigned int v24[2] = 2LL;
          v24[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v24 + 10) = 0;
          v24[4] = 0LL;
          *(void *)(a1 + 24) = v24;
        }

        int v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v25;
          *((void *)this + 1) = v25 + 1;
        }

        int v26 = *((_DWORD *)this + 14);
        int v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27) {
          return 0LL;
        }
        int v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        int v30 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v30, 1);
        int v31 = v30 - 1;
        if (v31 < 0 == v21) {
          *((_DWORD *)this + 14) = v31;
        }
        v32 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v32 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 72) |= 0x10u;
        v33 = *(void **)(a1 + 32);
        if (!v33)
        {
          v33 = operator new(0x30uLL);
          void *v33 = off_10181A720;
          v33[1] = 0LL;
          v33[2] = 3LL;
          v33[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v33[4] = 0LL;
          v33[5] = 0LL;
          *(void *)(a1 + 32) = v33;
        }

        v34 = (char *)*((void *)this + 1);
        if ((unint64_t)v34 >= *((void *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v34;
          *((void *)this + 1) = v34 + 1;
        }

        int v35 = *((_DWORD *)this + 14);
        int v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36) {
          return 0LL;
        }
        int v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        int v39 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v39, 1);
        int v40 = v39 - 1;
        if (v40 < 0 == v21) {
          *((_DWORD *)this + 14) = v40;
        }
        v41 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v41 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 72) |= 0x20u;
        v42 = *(void **)(a1 + 40);
        if (!v42)
        {
          v42 = operator new(0x30uLL);
          void *v42 = off_10181A798;
          v42[1] = 0LL;
          v42[2] = 4LL;
          v42[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_OWORD *)v42 + 2) = xmmword_1012CA3D0;
          *(void *)(a1 + 40) = v42;
        }

        v43 = (char *)*((void *)this + 1);
        if ((unint64_t)v43 >= *((void *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v43;
          *((void *)this + 1) = v43 + 1;
        }

        int v44 = *((_DWORD *)this + 14);
        int v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45) {
          return 0LL;
        }
        int v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        int v48 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v48, 1);
        int v49 = v48 - 1;
        if (v49 < 0 == v21) {
          *((_DWORD *)this + 14) = v49;
        }
        v50 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v50 + 1;
LABEL_95:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        v51 = *(void **)(a1 + 48);
        if (!v51)
        {
          v51 = operator new(0x48uLL);
          void *v51 = off_10181A4C8;
          v51[1] = 0LL;
          v51[2] = 5LL;
          v51[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v51[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v51[7] = 0LL;
          v51[4] = 0LL;
          v51[5] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v51 + 16) = 0;
          *(void *)(a1 + 48) = v51;
        }

        v52 = (char *)*((void *)this + 1);
        if ((unint64_t)v52 >= *((void *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v52;
          *((void *)this + 1) = v52 + 1;
        }

        int v53 = *((_DWORD *)this + 14);
        int v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54) {
          return 0LL;
        }
        int v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        int v57 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v57, 1);
        int v58 = v57 - 1;
        if (v58 < 0 == v21) {
          *((_DWORD *)this + 14) = v58;
        }
        v59 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v59 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 72) |= 0x80u;
        v60 = *(void **)(a1 + 56);
        if (!v60)
        {
          v60 = operator new(0x40uLL);
          void *v60 = off_10181A630;
          v60[1] = 0LL;
          v60[2] = 6LL;
          v60[3] = 0LL;
          v60[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v60[5] = 1LL;
          *((_DWORD *)v60 + 14) = 0;
          v60[6] = 0LL;
          *(void *)(a1 + 56) = v60;
        }

        v61 = (char *)*((void *)this + 1);
        if ((unint64_t)v61 >= *((void *)this + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v68)) {
            return 0LL;
          }
        }

        else
        {
          v68[0] = *v61;
          *((void *)this + 1) = v61 + 1;
        }

        int v62 = *((_DWORD *)this + 14);
        int v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63) {
          return 0LL;
        }
        int v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        int v66 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v66, 1);
        int v67 = v66 - 1;
        if (v67 < 0 == v21) {
          *((_DWORD *)this + 14) = v67;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        int v10 = *(_DWORD *)(a1 + 72);
        goto LABEL_39;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_53;
        }
        goto LABEL_25;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_67;
        }
        goto LABEL_25;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_81;
        }
        goto LABEL_25;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_95;
        }
        goto LABEL_25;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        goto LABEL_109;
      default:
        int v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100068C1C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 64),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_100068D80(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_57;
  }

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 10;
    }

    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      int v3 = *(_DWORD *)(a1 + 72);
    }

    else
    {
      int v7 = 1;
    }

    unsigned int v4 = v7 + 1;
  }

  else
  {
    unsigned int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    uint64_t v5 = v4 + 9;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A0818 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100065400(v8, a2);
    int v10 = (int)v9;
    else {
      int v11 = 1;
    }
    uint64_t v5 = (v5 + v10 + v11 + 1);
    int v3 = *(_DWORD *)(a1 + 72);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_33;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }

  uint64_t v12 = *(void *)(a1 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A0818 + 24);
  }
  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100066C2C(v12, a2);
  int v14 = (int)v13;
  else {
    int v15 = 1;
  }
  uint64_t v5 = (v5 + v14 + v15 + 1);
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

LABEL_33:
  uint64_t v16 = *(void *)(a1 + 32);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A0818 + 32);
  }
  int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100067424(v16, a2);
  int v18 = (int)v17;
  else {
    int v19 = 1;
  }
  uint64_t v5 = (v5 + v18 + v19 + 1);
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  *(_DWORD *)(a1 + 292) |= 0x10u;
  int v14 = *(void **)(a1 + 40);
  if (!v14)
  {
    int v14 = operator new(0x18uLL);
    *int v14 = off_10181B1E8;
    v14[1] = 7LL;
    *((_DWORD *)v14 + 4) = 0;
    *(void *)(a1 + 40) = v14;
  }

  int v15 = *(void *)(a2 + 40);
  if (!v15) {
    int v15 = *(void *)(qword_1019A0978 + 40);
  }
  sub_100074680((uint64_t)v14, v15);
  uint64_t v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_43:
  *(_DWORD *)(a1 + 292) |= 0x40u;
  int v18 = *(_DWORD **)(a1 + 56);
  if (!v18)
  {
    int v18 = operator new(0x58uLL);
    v18[12] = 10;
    *(void *)int v18 = off_10181B2D8;
    *((void *)v18 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v18 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v18 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v18 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v18 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v18 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v18 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_WORD *)v18 + 26) = 0;
    *((void *)v18 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v18 + 10) = 0LL;
    *(void *)(a1 + 56) = v18;
  }

  int v19 = *(void *)(a2 + 56);
  if (!v19) {
    int v19 = *(void *)(qword_1019A0978 + 56);
  }
  sub_10007636C((uint64_t)v18, v19);
  uint64_t v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x80) != 0)
  {
LABEL_48:
    *(_DWORD *)(a1 + 292) |= 0x80u;
    uint64_t v20 = *(void **)(a1 + 64);
    if (!v20)
    {
      uint64_t v20 = operator new(0x48uLL);
      v20[5] = 0LL;
      *((_DWORD *)v20 + 12) = 0;
      _BYTE *v20 = off_10181B3C8;
      v20[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v20[2] = 12LL;
      v20[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v20[4] = 0LL;
      v20[7] = 0LL;
      v20[8] = 0LL;
      *(void *)(a1 + 64) = v20;
    }

    BOOL v21 = *(void *)(a2 + 64);
    if (!v21) {
      BOOL v21 = *(void *)(qword_1019A0978 + 64);
    }
    sub_100077CB0((uint64_t)v20, v21);
    uint64_t v5 = *(_DWORD *)(a2 + 292);
  }

  uint64_t v16 = *(void *)(a1 + 32);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A0980 + 32);
  }
  int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000737DC(v16, a2);
  int v18 = (int)v17;
  else {
    int v19 = 1;
  }
  v5 += v18 + v19 + 1;
  int v3 = *(_DWORD *)(a1 + 128);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

      ++v7;
      v8 -= 8LL;
      if (!v8) {
        goto LABEL_44;
      }
    }

    uint64_t v13 = *(uint64_t ***)(v9 + 64);
    int v14 = *((char *)v13 + 23);
    if (v14 < 0)
    {
      if (v13[1] == (uint64_t *)16)
      {
        uint64_t v13 = (uint64_t **)*v13;
LABEL_24:
        v91 = *(_OWORD *)v13;
LABEL_25:
        sub_100139840((uint64_t)buf, v9);
        sub_1000968D4(a3, (uint64_t)buf, &v91, a2);
        if (__p)
        {
          v89 = __p;
          operator delete(__p);
        }

        sub_100019CEC((uint64_t)v87);
        sub_100019CEC((uint64_t)&v82);
        sub_10001AA60((uint64_t)buf);
        goto LABEL_33;
      }
    }

    else if (v14 == 16)
    {
      goto LABEL_24;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
    uint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning The protobuf fingerprint does not have a valid cluster label uuid",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_33;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
    LOWORD(v76[0]) = 0;
    LODWORD(v70) = 2;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning The protobuf fingerprint does not have a valid cluster label uuid",  v76,  v70);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLMicroLocationModel CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Model &, CLMicroLocatio nFingerprintPool &)",  "%s\n",  v12);
    goto LABEL_42;
  }

          *int v7 = (uint64_t)v14;
          wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }

        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          int v7 = (uint64_t *)i;
          uint64_t v8 = v13;
        }
      }
    }
  }

  else
  {
    int v11 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0LL;
  }

          int v15 = 0LL;
          goto LABEL_34;
        }

        int v15 = 1LL;
LABEL_34:
        if (SHIBYTE(v32) < 0) {
          operator delete(v31);
        }
        if (v7 == v6) {
          int v18 = 0;
        }
        else {
          int v18 = v15;
        }
        v7 += 72LL;
        if ((v18 & 1) == 0) {
          goto LABEL_72;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      uint64_t v16 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993ACF >= 0) {
          int v17 = &xmmword_101993AB8;
        }
        else {
          int v17 = (__int128 *)xmmword_101993AB8;
        }
        *(_DWORD *)buf = 136380675;
        int v37 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820CD0);
        }
        if (byte_101993ACF >= 0) {
          int v23 = &xmmword_101993AB8;
        }
        else {
          int v23 = (__int128 *)xmmword_101993AB8;
        }
        v34 = 136380675;
        int v35 = v23;
        LODWORD(v29) = 12;
        uint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  &v34,  v29);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationAssociatedStateTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v24);
      }

      sqlite3_reset(v8);
      goto LABEL_33;
    }

    int v15 = 1LL;
LABEL_72:
    int v26 = v33;
    v33 = 0LL;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820CD0);
    }
    int v25 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
      LOWORD(v31) = 0;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v31,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationAssociatedStateTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v28);
    }

    return 0LL;
  }

  return v15;
}

  uint64_t v20 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    else {
      BOOL v21 = *(void *)a2;
    }
    int v22 = *(uint64_t **)a3;
    int v23 = (void *)(a1 + 48);
    uint64_t v24 = 68289795;
    int v25 = 0;
    int v26 = 2082;
    int v27 = "";
    uint64_t v28 = 2081;
    unsigned int v29 = v21;
    unsigned int v30 = 2081;
    int v31 = v22;
    int v32 = 2082;
    v33 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Rapport, buffered a found device, Device IDS identifier:%{private, location:escape_on ly}s, Device name:%{private, location:escape_only}s, CoreRoutine LOI Type:%{public, location:escape_only}s}",  (uint8_t *)&v24,  0x30u);
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101826750);
  }
  int v14 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(unsigned __int8 *)(a1 + 42);
    *(_DWORD *)buf = 67240192;
    uint64_t v28 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "#GPSPowerSavings,wifi,fIsAssociatedToStaticWiFiAP,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101826750);
    }
    uint64_t v16 = *(unsigned __int8 *)(a1 + 42);
    int v23 = 67240192;
    uint64_t v24 = v16;
    LODWORD(v22) = 8;
    int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#GPSPowerSavings,wifi,fIsAssociatedToStaticWiFiAP,%{public}d",  &v23,  v22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGpsPowerSavingsMonitor::feedWiFiServiceNotification(const CLWifiService_Type::Notification &, const CLWifiS ervice_Type::NotificationData &)",  "%s\n",  v17);
  }

  *(_DWORD *)(a1 + 92) |= 0x10u;
  int v15 = *(char **)(a1 + 40);
  if (!v15)
  {
    int v15 = (char *)operator new(0x60uLL);
    *(void *)int v15 = &off_101827688;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *((void *)v15 + 11) = 0LL;
    *(void *)(a1 + 40) = v15;
  }

  uint64_t v16 = *(void *)(a2 + 40);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A0AF0 + 40);
  }
  uint64_t result = sub_1001C82B0((uint64_t)v15, v16);
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_43:
  *(_DWORD *)(a1 + 92) |= 0x40u;
  int v19 = *(char **)(a1 + 56);
  if (!v19)
  {
    int v19 = (char *)operator new(0x60uLL);
    *(void *)int v19 = &off_101827778;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 72) = 0u;
    *((void *)v19 + 11) = 0LL;
    *(void *)(a1 + 56) = v19;
  }

  uint64_t v20 = *(void *)(a2 + 56);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_1019A0AF0 + 56);
  }
  uint64_t result = sub_1001C8770((uint64_t)v19, v20);
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x80) != 0)
  {
LABEL_48:
    *(_DWORD *)(a1 + 92) |= 0x80u;
    BOOL v21 = *(char **)(a1 + 64);
    if (!v21)
    {
      BOOL v21 = (char *)operator new(0x60uLL);
      *(void *)BOOL v21 = &off_1018277F0;
      *(_OWORD *)(v21 + 8) = 0u;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_OWORD *)(v21 + 72) = 0u;
      *((void *)v21 + 11) = 0LL;
      *(void *)(a1 + 64) = v21;
    }

    int v22 = *(void *)(a2 + 64);
    if (!v22) {
      int v22 = *(void *)(qword_1019A0AF0 + 64);
    }
    uint64_t result = sub_1001C897C((uint64_t)v21, v22);
    int v6 = *(_DWORD *)(a2 + 92);
  }

  if ((v3 & 0x10) != 0) {
    uint64_t result = v4 + 9;
  }
  else {
    uint64_t result = v4;
  }
LABEL_36:
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 64),  a3);
  int v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  int v14 = *(void *)(v5 + 64);
  if (!v14) {
    int v14 = *(void *)(qword_1019A0AF0 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v14,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    goto LABEL_39;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  int v14 = v4 + 2;
  if ((v3 & 0x10) == 0) {
    int v14 = v4;
  }
  if ((v3 & 0x20) != 0) {
    v14 += 5;
  }
  if ((v3 & 0x40) != 0) {
    v14 += 9;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t v5 = v14 + 2;
  }
  else {
    uint64_t v5 = v14;
  }
LABEL_42:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_99;
  }
  if ((v3 & 0x100) != 0)
  {
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      uint64_t v16 = 2;
    }

    LODWORD(sub_1012279C0(0LL, v4, v5) = v16 + v5;
  }

  int v17 = v5 + 9;
  if ((v3 & 0x200) == 0) {
    int v17 = v5;
  }
  if ((v3 & 0x400) != 0) {
    uint64_t v5 = v17 + 9;
  }
  else {
    uint64_t v5 = v17;
  }
  if ((v3 & 0x800) != 0)
  {
    int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v18 & 0x80000000) != 0)
    {
      int v19 = 11;
    }

    else if (v18 >= 0x80)
    {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 92);
    }

    else
    {
      int v19 = 2;
    }

    uint64_t v5 = (v19 + v5);
    if ((v3 & 0x1000) == 0)
    {
LABEL_57:
      if ((v3 & 0x2000) == 0) {
        goto LABEL_58;
      }
      goto LABEL_73;
    }
  }

  else if ((v3 & 0x1000) == 0)
  {
    goto LABEL_57;
  }

  uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
  if ((v20 & 0x80000000) != 0)
  {
    BOOL v21 = 11;
  }

  else if (v20 >= 0x80)
  {
    BOOL v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 92);
  }

  else
  {
    BOOL v21 = 2;
  }

  uint64_t v5 = (v21 + v5);
  if ((v3 & 0x2000) == 0)
  {
LABEL_58:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_83;
  }

  *(_DWORD *)(a1 + 148) |= 4u;
  int v11 = *(char **)(a1 + 24);
  if (!v11)
  {
    int v11 = (char *)operator new(0x28uLL);
    *(void *)int v11 = off_101827B80;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(void *)(a1 + 24) = v11;
  }

  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A0CF0 + 24);
  }
  sub_1001D323C((uint64_t)v11, v12);
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }

  int v18 = v4 + 5;
  if ((v3 & 0x20) == 0) {
    int v18 = v4;
  }
  if ((v3 & 0x40) != 0) {
    v18 += 2;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t v5 = v18 + 2;
  }
  else {
    uint64_t v5 = v18;
  }
LABEL_40:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
      if ((v19 & 0x80000000) != 0)
      {
        uint64_t v20 = 11;
      }

      else if (v19 >= 0x80)
      {
        uint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 56);
      }

      else
      {
        uint64_t v20 = 2;
      }

      uint64_t v5 = (v20 + v5);
    }

    if ((v3 & 0x200) != 0)
    {
      BOOL v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v21 & 0x80000000) != 0)
      {
        int v22 = 11;
      }

      else if (v21 >= 0x80)
      {
        int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      }

      else
      {
        int v22 = 2;
      }

      uint64_t v5 = (v22 + v5);
    }
  }

  *(_DWORD *)(a1 + 52) = v5;
  return v5;
}

  uint64_t v13 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 84) |= 4u;
  *(_DWORD *)(a1 + 24) = v13;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(v5 + 68),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

    if (qword_101934800 != -1) {
      dispatch_once(&qword_101934800, &stru_10182B9E8);
    }
    int v15 = (os_log_s *)off_101934808;
    if (os_log_type_enabled((os_log_t)off_101934808, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349824;
      unsigned int v30 = a3;
      int v31 = 2050;
      int v32 = v8;
      v33 = 2050;
      v34 = a3 - v20;
      int v35 = 1026;
      int v36 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Processed data up to max duration = %{public}lf, endTime = %{public}lf, total duration processed = %{public}lf, number of iterations %{public}i",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934800 != -1) {
        dispatch_once(&qword_101934800, &stru_10182B9E8);
      }
      BOOL v21 = 134349824;
      int v22 = a3;
      int v23 = 2050;
      uint64_t v24 = v8;
      int v25 = 2050;
      int v26 = a3 - v20;
      int v27 = 1026;
      uint64_t v28 = v11;
      LODWORD(v18) = 38;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934808,  1LL,  "Processed data up to max duration = %{public}lf, endTime = %{public}lf, total duration processed = %{public}lf, number of iterations %{public}i",  &v21,  v18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLHealthAssessmentNotifierAdapter processDataWithMaxDuration:endTime:]",  "%s\n",  v16);
    }
  }

  int v37 = 1LL;
LABEL_34:
  if (SHIBYTE(v56) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }

  return v37;
}

    sub_1004EF794((uint64_t *)(a1 + 72), a2);
    sub_1004EF794((uint64_t *)(a1 + 136), a2);
    return;
  }

  switch(v7)
  {
    case 4:
    case 11:
    case 13:
      int v15 = (uint64_t *)(a1 + 200);
      goto LABEL_36;
    case 6:
      int v15 = (uint64_t *)(a1 + 264);
      goto LABEL_36;
    case 7:
      int v15 = (uint64_t *)(a1 + 328);
LABEL_36:
      sub_1004EF794(v15, a2);
      break;
    default:
      return;
  }

  PBDataWriterWriteFloatField(a3, 11LL, self->_maxGoodCatherine);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  *((_DWORD *)a3 + 8) = LODWORD(self->_maxGoodCatherine);
  *((_DWORD *)a3 + 26) |= 0x10u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  *((_DWORD *)result + 11) = LODWORD(self->_minGoodCatherine);
  *((_DWORD *)result + 26) |= 0x80u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_11:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }

  self->_maxGoodCatherine = *((float *)a3 + 8);
  *(_DWORD *)&self->_has |= 0x10u;
  int v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x20) == 0)
  {
LABEL_12:
    if ((v3 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

    int v11 = 100LL;
    goto LABEL_34;
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_1018419B8);
  }
  int v10 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[SmoothedGaitMetricsHistory] Database inaccessible, unable to query",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_1018419B8);
    }
    LOWORD(v18[0]) = 0;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "[SmoothedGaitMetricsHistory] Database inaccessible, unable to query",  v18,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const",  "%s\n",  v16);
  }

  int v11 = 109LL;
LABEL_34:
  (*(void (**)(void *))(*v5 + 24LL))(v5);
  return v11;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  a2,  *(double *)(v5 + 88),  a3);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  int v14 = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 104) |= 0x800u;
  *(_BYTE *)(a1 + 96) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 104);
  if ((v5 & 0x1000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_35;
  }

  int v15 = a2[14];
  a1[20] |= 0x1000u;
  a1[14] = v15;
  uint64_t v5 = a2[20];
  if ((v5 & 0x2000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_35;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v5[16],  a2,  a4);
  int v6 = v5[20];
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v5[18],  a2,  a4);
  }

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if ((v13 & 0x80000000) != 0)
  {
    int v14 = 11;
  }

  else if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = a1[12];
  }

  else
  {
    int v14 = 2;
  }

  unsigned int v4 = (v14 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_21:
    if ((v3 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = a1[12];
  }

  else
  {
    int v14 = 2;
  }

  unsigned int v4 = (v14 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_21:
    if ((v3 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }

  int v18 = a2[13];
  if (v18 >= 6) {
    sub_101241A0C();
  }
  a1[17] |= 0x800u;
  a1[13] = v18;
  uint64_t v5 = a2[17];
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      return;
    }
    goto LABEL_20;
  }

  if (!HIBYTE(v5)) {
    goto LABEL_42;
  }
  if ((v5 & 0x1000000) != 0)
  {
    v33 = *(_DWORD *)(a2 + 104);
    a1[37] |= 0x1000000u;
    a1[26] = v33;
    uint64_t v5 = *(_DWORD *)(a2 + 148);
    if ((v5 & 0x2000000) == 0)
    {
LABEL_36:
      if ((v5 & 0x4000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_74;
    }
  }

  else if ((v5 & 0x2000000) == 0)
  {
    goto LABEL_36;
  }

  v34 = *(_DWORD *)(a2 + 108);
  a1[37] |= 0x2000000u;
  a1[27] = v34;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_75;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v13 & 0x80000000) != 0)
  {
    int v14 = 10;
  }

  else if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    int v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    int v14 = 1;
  }

  unsigned int v4 = (v4 + v14 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }

  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
  if (v15 >= 0x80)
  {
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    int v3 = a1[16];
  }

  else
  {
    uint64_t v16 = 1;
  }

  unsigned int v4 = (v4 + v16 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_45;
    }
    goto LABEL_41;
  }

    uint64_t result = (uint64_t)cf;
    if (!cf) {
      return result;
    }
    CFRelease(cf);
    return 0LL;
  }

  uint64_t v12 = cf;
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_101848D88);
  }
  uint64_t v13 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 138412290;
    *(void *)((char *)buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GYTT data %@", (uint8_t *)buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101848D88);
    }
    uint64_t v24 = 138412290;
    int v25 = v12;
    BOOL v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "GYTT data %@",  &v24,  12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v21);
  }

  if (a1)
  {
    *a1 = v12;
    return 1LL;
  }

  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_101848D88);
  }
  uint64_t v20 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Invalid GYTT parameter data.",  (uint8_t *)buf,  2u);
  }

  uint64_t result = sub_1002921D0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_101848D88);
    }
    LOWORD(v24) = 0;
    LODWORD(v22) = 2;
    int v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  16LL,  "Invalid GYTT parameter data.",  &v24,  v22);
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLGyroCalibrationUtils::copyGYTTData(NSData **)", "%s\n", v19);
LABEL_62:
    return 0LL;
  }

  return result;
}

    dispatch_once(&qword_1019344B0, &stru_10184D0D8);
    goto LABEL_4;
  }

  uint64_t v9 = a2;

  *(void *)(a1 + 152) = a2;
  int v10 = *(__IOHIDServiceClient **)(a1 + 24);
  if (v10 && !sub_10071AE74(v10, a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10184D0D8);
    }
    int v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = *(void *)(a1 + 152);
      *(_DWORD *)buf = 134283779;
      unsigned int v30 = v12;
      int v31 = 2114;
      int v32 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[CLIoHidInterface] setMatchingProperties - Previously matched service ref %{private}p does not match new propert ies %{public}@. Clearing and refreshing.",  buf,  0x16u);
    }

    int v14 = sub_1002921D0(115, 2);
    if ((_DWORD)v14)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184D0D8);
      }
      int v18 = *(void *)(a1 + 24);
      int v19 = *(void *)(a1 + 152);
      int v25 = 134283779;
      int v26 = v18;
      int v27 = 2114;
      uint64_t v28 = v19;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "[CLIoHidInterface] setMatchingProperties - Previously matched service ref %{private}p does not mat ch new properties %{public}@. Clearing and refreshing.",  &v25,  22);
      int v14 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)",  "%s\n",  v20);
    }

    if (!sub_1007179F8(v14, *(__IOHIDServiceClient **)(a1 + 24), @"ReportInterval", &off_1018D3848))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184D0D8);
      }
      int v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[CLIoHidInterface] setMatchingProperties - Failed to stop streaming from the old service",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184D0D8);
        }
        LOWORD(v25) = 0;
        LODWORD(v24) = 2;
        int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "[CLIoHidInterface] setMatchingProperties - Failed to stop streaming from the old service",  &v25,  v24);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)",  "%s\n",  v23);
      }
    }

    sub_100717400(a1);
    sub_1007165A8(*(void *)(a1 + 32), 0LL);
    if (*(void *)(a1 + 24))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184D0D8);
      }
      uint64_t v16 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(void *)(a1 + 24);
        *(_DWORD *)buf = 134283521;
        unsigned int v30 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[CLIoHidInterface] setMatchingProperties - successfully switch to new service %{private}p",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184D0D8);
        }
        BOOL v21 = *(void *)(a1 + 24);
        int v25 = 134283521;
        int v26 = v21;
        LODWORD(v24) = 12;
        int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "[CLIoHidInterface] setMatchingProperties - successfully switch to new service %{private}p",  &v25,  v24);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)",  "%s\n",  v22);
      }

      sub_100717CF4(*(void *)(a1 + 32));
    }
  }

  sub_10077194C(a1);
}

  int v14 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(void *)(a1 + 40) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0) {
    goto LABEL_34;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_36:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  uint64_t v16 = *(char **)(a1 + 48);
  if (!v16)
  {
    uint64_t v16 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v16 = off_101859188;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(void *)(a1 + 48) = v16;
  }

  int v17 = *(void *)(a2 + 48);
  if (!v17) {
    int v17 = *(void *)(qword_1019A17D0 + 48);
  }
  sub_100814C10((uint64_t)v16, v17);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 72) |= 0x80u;
    int v18 = *(void **)(a1 + 56);
    if (!v18)
    {
      int v18 = operator new(0x18uLL);
      v18[1] = 0LL;
      v18[2] = 0LL;
      void *v18 = &off_1018592F0;
      *(void *)(a1 + 56) = v18;
    }

    int v19 = *(void *)(a2 + 56);
    if (!v19) {
      int v19 = *(void *)(qword_1019A17D0 + 56);
    }
    sub_1008164CC((uint64_t)v18, v19);
  }

    uint64_t v8 = v31;
LABEL_34:
    if (v8)
    {
      int v32 = v8;
      operator delete(v8);
    }
  }

  v138 = *(_OWORD *)(a1 + 160);
  v143 = *(_OWORD *)(a1 + 176);
  v148 = *(void *)(a1 + 192);
  v118 = *(_OWORD *)(a1 + 96);
  v123 = *(_OWORD *)(a1 + 112);
  v128 = *(_OWORD *)(a1 + 128);
  v133 = *(_OWORD *)(a1 + 144);
  v98 = *(_OWORD *)(a1 + 32);
  v103 = *(_OWORD *)(a1 + 48);
  v108 = *(_OWORD *)(a1 + 64);
  v113 = *(_OWORD *)(a1 + 80);
  v88 = *(_OWORD *)a1;
  v93 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v27 = *(_OWORD *)(a2 + 16);
  uint64_t v28 = *(_OWORD *)(a2 + 32);
  unsigned int v29 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  unsigned int v30 = *(_OWORD *)(a2 + 80);
  int v31 = *(_OWORD *)(a2 + 96);
  int v32 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 80) = v30;
  *(_OWORD *)(a1 + 96) = v31;
  v33 = *(_OWORD *)(a2 + 144);
  v34 = *(_OWORD *)(a2 + 160);
  int v35 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v35;
  *(_OWORD *)(a1 + 144) = v33;
  *(_OWORD *)(a2 + 160) = v138;
  *(_OWORD *)(a2 + 176) = v143;
  *(void *)(a2 + 192) = v148;
  *(_OWORD *)(a2 + 96) = v118;
  *(_OWORD *)(a2 + 112) = v123;
  *(_OWORD *)(a2 + 128) = v128;
  *(_OWORD *)(a2 + 144) = v133;
  *(_OWORD *)(a2 + 32) = v98;
  *(_OWORD *)(a2 + 48) = v103;
  *(_OWORD *)(a2 + 64) = v108;
  *(_OWORD *)(a2 + 80) = v113;
  *(_OWORD *)a2 = v88;
  *(_OWORD *)(a2 + 16) = v93;
  int v36 = *(void *)(a3 + 48);
  int v37 = *(void *)(a2 + 48);
  if (v36 != v37)
  {
    if (v36 >= v37) {
      return 1LL;
    }
    goto LABEL_60;
  }

  unsigned int v38 = *(void *)(a3 + 56);
  int v39 = *(void *)(a2 + 56);
  int v40 = v38 < v39;
  if (v38 == v39)
  {
    v41 = *(void *)(a3 + 64);
    v42 = *(void *)(a2 + 64);
    int v40 = v41 < v42;
    if (v41 == v42) {
      int v40 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
    }
  }

  if (v40)
  {
LABEL_60:
    v141 = *(_OWORD *)(a2 + 160);
    v146 = *(_OWORD *)(a2 + 176);
    v151 = *(void *)(a2 + 192);
    v121 = *(_OWORD *)(a2 + 96);
    v126 = *(_OWORD *)(a2 + 112);
    v131 = *(_OWORD *)(a2 + 128);
    v136 = *(_OWORD *)(a2 + 144);
    v101 = *(_OWORD *)(a2 + 32);
    v106 = *(_OWORD *)(a2 + 48);
    v111 = *(_OWORD *)(a2 + 64);
    v116 = *(_OWORD *)(a2 + 80);
    v91 = *(_OWORD *)a2;
    v96 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v70 = *(_OWORD *)(a3 + 16);
    v71 = *(_OWORD *)(a3 + 32);
    v72 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 16) = v70;
    *(_OWORD *)(a2 + 32) = v71;
    v73 = *(_OWORD *)(a3 + 80);
    v74 = *(_OWORD *)(a3 + 96);
    v75 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v75;
    *(_OWORD *)(a2 + 80) = v73;
    *(_OWORD *)(a2 + 96) = v74;
    v76 = *(_OWORD *)(a3 + 144);
    v77 = *(_OWORD *)(a3 + 160);
    v78 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v77;
    *(_OWORD *)(a2 + 176) = v78;
    *(_OWORD *)(a2 + 144) = v76;
    *(_OWORD *)(a3 + 160) = v141;
    *(_OWORD *)(a3 + 176) = v146;
    *(void *)(a3 + 192) = v151;
    *(_OWORD *)(a3 + 96) = v121;
    *(_OWORD *)(a3 + 112) = v126;
    *(_OWORD *)(a3 + 128) = v131;
    *(_OWORD *)(a3 + 144) = v136;
    *(_OWORD *)(a3 + 32) = v101;
    *(_OWORD *)(a3 + 48) = v106;
    *(_OWORD *)(a3 + 64) = v111;
    *(_OWORD *)(a3 + 80) = v116;
    int v53 = v91;
    v52 = v96;
    uint64_t result = 2LL;
    goto LABEL_61;
  }

  if (*(void *)(a3 + 72) != *(void *)(a2 + 72) || *(void *)(a3 + 64) != *(void *)(a2 + 64)) {
    return 1LL;
  }
  uint64_t result = 1LL;
  if (v38 == v39 && *(void *)(a3 + 80) == *(void *)(a2 + 80))
  {
    goto LABEL_60;
  }

  return result;
}

  v138 = *(_OWORD *)(a1 + 160);
  v143 = *(_OWORD *)(a1 + 176);
  v148 = *(void *)(a1 + 192);
  v118 = *(_OWORD *)(a1 + 96);
  v123 = *(_OWORD *)(a1 + 112);
  v128 = *(_OWORD *)(a1 + 128);
  v133 = *(_OWORD *)(a1 + 144);
  v98 = *(_OWORD *)(a1 + 32);
  v103 = *(_OWORD *)(a1 + 48);
  v108 = *(_OWORD *)(a1 + 64);
  v113 = *(_OWORD *)(a1 + 80);
  v88 = *(_OWORD *)a1;
  v93 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v27 = *(_OWORD *)(a2 + 16);
  uint64_t v28 = *(_OWORD *)(a2 + 32);
  unsigned int v29 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  unsigned int v30 = *(_OWORD *)(a2 + 80);
  int v31 = *(_OWORD *)(a2 + 96);
  int v32 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 80) = v30;
  *(_OWORD *)(a1 + 96) = v31;
  v33 = *(_OWORD *)(a2 + 144);
  v34 = *(_OWORD *)(a2 + 160);
  int v35 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v35;
  *(_OWORD *)(a1 + 144) = v33;
  *(_OWORD *)(a2 + 160) = v138;
  *(_OWORD *)(a2 + 176) = v143;
  *(void *)(a2 + 192) = v148;
  *(_OWORD *)(a2 + 96) = v118;
  *(_OWORD *)(a2 + 112) = v123;
  *(_OWORD *)(a2 + 128) = v128;
  *(_OWORD *)(a2 + 144) = v133;
  *(_OWORD *)(a2 + 32) = v98;
  *(_OWORD *)(a2 + 48) = v103;
  *(_OWORD *)(a2 + 64) = v108;
  *(_OWORD *)(a2 + 80) = v113;
  *(_OWORD *)a2 = v88;
  *(_OWORD *)(a2 + 16) = v93;
  int v36 = *(void *)(a3 + 128);
  int v37 = *(void *)(a2 + 128);
  if (v36 != v37)
  {
    if (v36 >= v37) {
      return 1LL;
    }
    goto LABEL_60;
  }

  unsigned int v38 = *(void *)(a3 + 136);
  int v39 = *(void *)(a2 + 136);
  int v40 = v38 < v39;
  if (v38 == v39)
  {
    v41 = *(void *)(a3 + 144);
    v42 = *(void *)(a2 + 144);
    int v40 = v41 < v42;
    if (v41 == v42) {
      int v40 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
    }
  }

  if (v40)
  {
LABEL_60:
    v141 = *(_OWORD *)(a2 + 160);
    v146 = *(_OWORD *)(a2 + 176);
    v151 = *(void *)(a2 + 192);
    v121 = *(_OWORD *)(a2 + 96);
    v126 = *(_OWORD *)(a2 + 112);
    v131 = *(_OWORD *)(a2 + 128);
    v136 = *(_OWORD *)(a2 + 144);
    v101 = *(_OWORD *)(a2 + 32);
    v106 = *(_OWORD *)(a2 + 48);
    v111 = *(_OWORD *)(a2 + 64);
    v116 = *(_OWORD *)(a2 + 80);
    v91 = *(_OWORD *)a2;
    v96 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v70 = *(_OWORD *)(a3 + 16);
    v71 = *(_OWORD *)(a3 + 32);
    v72 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 16) = v70;
    *(_OWORD *)(a2 + 32) = v71;
    v73 = *(_OWORD *)(a3 + 80);
    v74 = *(_OWORD *)(a3 + 96);
    v75 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v75;
    *(_OWORD *)(a2 + 80) = v73;
    *(_OWORD *)(a2 + 96) = v74;
    v76 = *(_OWORD *)(a3 + 144);
    v77 = *(_OWORD *)(a3 + 160);
    v78 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v77;
    *(_OWORD *)(a2 + 176) = v78;
    *(_OWORD *)(a2 + 144) = v76;
    *(_OWORD *)(a3 + 160) = v141;
    *(_OWORD *)(a3 + 176) = v146;
    *(void *)(a3 + 192) = v151;
    *(_OWORD *)(a3 + 96) = v121;
    *(_OWORD *)(a3 + 112) = v126;
    *(_OWORD *)(a3 + 128) = v131;
    *(_OWORD *)(a3 + 144) = v136;
    *(_OWORD *)(a3 + 32) = v101;
    *(_OWORD *)(a3 + 48) = v106;
    *(_OWORD *)(a3 + 64) = v111;
    *(_OWORD *)(a3 + 80) = v116;
    int v53 = v91;
    v52 = v96;
    uint64_t result = 2LL;
    goto LABEL_61;
  }

  if (*(void *)(a3 + 152) != *(void *)(a2 + 152) || *(void *)(a3 + 144) != *(void *)(a2 + 144)) {
    return 1LL;
  }
  uint64_t result = 1LL;
  if (v38 == v39 && *(void *)(a3 + 160) == *(void *)(a2 + 160))
  {
    goto LABEL_60;
  }

  return result;
}

    sub_101127D00((PB::Base *)v246);
    return;
  }

  if (v11 != 23)
  {
    if (v11 != 33) {
      return;
    }
    sub_101125260(v246);
    sub_1011393D8(v246);
    int v55 = CFAbsoluteTimeGetCurrent();
    v251 |= 1u;
    v248 = v55;
    unsigned int v56 = v249;
    int v57 = *(void *)(a4 + 76);
    *(_DWORD *)(v249 + 220) |= 0x40000u;
    *(void *)(v56 + 152) = v57;
    int v58 = v249;
    *(_DWORD *)(v249 + 220) |= 0x100u;
    *(double *)(v58 + 72) = v7;
    v59 = v249;
    *(_DWORD *)(v249 + 220) |= 0x200u;
    *(double *)(v59 + 80) = v8;
    v60 = v249;
    v61 = *(void *)(a4 + 44);
    *(_DWORD *)(v249 + 220) |= 0x10000u;
    *(void *)(v60 + 136) = v61;
    int v62 = v249;
    int v63 = *(void *)(a4 + 52);
    *(_DWORD *)(v249 + 220) |= 0x20000u;
    *(void *)(v62 + 144) = v63;
    int v64 = v249;
    unsigned int v65 = *(void *)(a4 + 20);
    *(_DWORD *)(v249 + 220) |= 0x80u;
    *(void *)(v64 + 64) = v65;
    int v66 = v249;
    int v67 = *(void *)(a4 + 60);
    *(_DWORD *)(v249 + 220) |= 2u;
    *(void *)(v66 + 16) = v67;
    v68 = v249;
    v69 = *(void *)(a4 + 68);
    *(_DWORD *)(v249 + 220) |= 4u;
    *(void *)(v68 + 24) = v69;
    v70 = v249;
    v71 = *(void *)(a4 + 28);
    *(_DWORD *)(v249 + 220) |= 1u;
    *(void *)(v70 + 8) = v71;
    v72 = v249;
    v73 = *(void *)(a4 + 36);
    *(_DWORD *)(v249 + 220) |= 0x100000u;
    *(void *)(v72 + 168) = v73;
    v74 = v249;
    v75 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)(v249 + 220) |= 0x10000000u;
    *(_DWORD *)(v74 + 204) = v75;
    v76 = v249;
    v77 = *(void *)(a4 + 184);
    *(_DWORD *)(v249 + 220) |= 0x80000u;
    *(void *)(v76 + 160) = v77;
    v78 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(v249 + 220) |= 0x20000000u;
    *(_DWORD *)(v78 + 208) = v77;
    v79 = v249;
    v80 = *(_DWORD *)(a4 + 472);
    *(_DWORD *)(v249 + 220) |= 0x40000000u;
    *(_DWORD *)(v79 + 212) = v80;
    v81 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 200);
    *(_DWORD *)(v249 + 220) |= 0x200000u;
    *(_DWORD *)(v81 + 176) = v77;
    v82 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 204);
    *(_DWORD *)(v249 + 220) |= 0x800000u;
    *(_DWORD *)(v82 + 184) = v77;
    v83 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 208);
    *(_DWORD *)(v249 + 220) |= 0x400000u;
    *(_DWORD *)(v83 + 180) = v77;
    v84 = v249;
    v85 = *(void *)(a4 + 160);
    *(_DWORD *)(v249 + 220) |= 0x800u;
    *(void *)(v84 + 96) = v85;
    v86 = v249;
    v87 = *(void *)(a4 + 168);
    *(_DWORD *)(v249 + 220) |= 8u;
    *(void *)(v86 + 32) = v87;
    v88 = v249;
    v89 = *(void *)(a4 + 176);
    *(_DWORD *)(v249 + 220) |= 0x10u;
    *(void *)(v88 + 40) = v89;
    v90 = v249;
    v91 = *(_DWORD *)(a4 + 512);
    *(_DWORD *)(v249 + 220) |= 0x2000000u;
    *(_DWORD *)(v90 + 192) = v91;
    v92 = v249;
    v93 = *(_DWORD *)(a4 + 140);
    *(_DWORD *)(v249 + 220) |= 0x8000000u;
    *(_DWORD *)(v92 + 200) = v93;
    v94 = v249;
    v95 = *(_DWORD *)(a4 + 216);
    *(_DWORD *)(v249 + 220) |= 0x1000000u;
    *(_DWORD *)(v94 + 188) = v95;
    v96 = v249;
    v97 = *(void *)(a4 + 536);
    *(_DWORD *)(v249 + 220) |= 0x20u;
    *(void *)(v96 + 48) = v97;
    v98 = v249;
    v99 = *(void *)(a4 + 544);
    *(_DWORD *)(v249 + 220) |= 0x40u;
    *(void *)(v98 + 56) = v99;
    v100 = v249;
    v101 = *(void *)(a4 + 520);
    *(_DWORD *)(v249 + 220) |= 0x8000u;
    *(void *)(v100 + 128) = v101;
    v102 = v249;
    v103 = *(void *)(a4 + 528);
    *(_DWORD *)(v249 + 220) |= 0x400u;
    *(void *)(v102 + 88) = v103;
    v104 = v249;
    *(_DWORD *)(v249 + 220) |= 0x80000000;
    *(_BYTE *)(v104 + 216) = 1;
    v105 = v249;
    v106 = *(void *)(a4 + 704);
    *(_DWORD *)(v249 + 220) |= 0x1000u;
    *(void *)(v105 + 104) = v106;
    v107 = v249;
    v108 = *(void *)(a4 + 712);
    *(_DWORD *)(v249 + 220) |= 0x4000u;
    *(void *)(v107 + 120) = v108;
    v109 = v249;
    v110 = *(void *)(a4 + 720);
    *(_DWORD *)(v249 + 220) |= 0x2000u;
    *(void *)(v109 + 112) = v110;
    v111 = v249;
    v112 = *(_DWORD *)(a4 + 728);
    *(_DWORD *)(v249 + 220) |= 0x4000000u;
    *(_DWORD *)(v111 + 196) = v112;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v246);
    }
    goto LABEL_33;
  }

  v206 = *(int **)(a4 + 800);
  if (v206 && (unint64_t)sub_100CBED60(v206) >= 2)
  {
    if (sub_100CBED60(*(int **)(a4 + 800)))
    {
      v207 = 0LL;
      do
      {
        sub_100CBE5DC(*(void *)(a4 + 800), v207, (uint64_t)&v211);
        sub_100CBEAEC(*(void *)(a4 + 800), v207, (uint64_t)v246);
        sub_1008C95F8(a1, (uint64_t)&v211, v246);
        v208 = v247;
        if (v247)
        {
          p_shared_owners = (unint64_t *)&v247->__shared_owners_;
          do
            v210 = __ldaxr(p_shared_owners);
          while (__stlxr(v210 - 1, p_shared_owners));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }

        ++v207;
      }

      while (v207 < sub_100CBED60(*(int **)(a4 + 800)));
    }
  }

  else
  {
    sub_1008C95F8(a1, a4, (uint64_t *)(a4 + 160));
  }

  int v19 = *(void *)(a1 + 32);
  if (!v19) {
    int v19 = *(void *)(qword_1019A1B28 + 32);
  }
  uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A55290(v19, a2);
  BOOL v21 = (int)v20;
  else {
    int v22 = 1;
  }
  unsigned int v4 = (v4 + v21 + v22 + 1);
  if ((*(_DWORD *)(a1 + 56) & 0x20) != 0)
  {
LABEL_39:
    int v23 = *(void *)(a1 + 40);
    if (!v23) {
      int v23 = *(void *)(qword_1019A1B28 + 40);
    }
    uint64_t v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A55290(v23, a2);
    int v26 = (int)v24;
    else {
      int v27 = 1;
    }
    unsigned int v4 = (v4 + v26 + v27 + 1);
  }

    uint64_t v13 = v24;
    int v27 = v24;
    goto LABEL_34;
  }

  if (v18 == 3)
  {
    if ((v11 & 1) == 0)
    {
      int v25 = 0;
      *(void *)(a3 + 20) = 1084856730LL;
      *(void *)(a3 + 28) = 1084856730LL;
      uint64_t v13 = 0.0;
      uint64_t v28 = 5.3;
      uint64_t v24 = 5.3;
      int v27 = 5.3;
      goto LABEL_34;
    }

    uint64_t v24 = v13 * 0.8;
    *(float *)a3 = v13 * 0.8;
    *(float *)(a3 + 20) = v13 * 0.8;
    *(float *)(a3 + 28) = v13 * 0.8;
    int v25 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 1;
    uint64_t v28 = 5.3;
    int v27 = 3.2;
    if ((float)(v13 * 0.8) < 3.2)
    {
      unsigned int v29 = 1078774989LL;
      goto LABEL_28;
    }

    goto LABEL_33;
  }

  BOOL v21 = 0.0;
  *(float *)&int v22 = 0.0;
  if (v18 != 2)
  {
LABEL_36:
    *(void *)(a3 + 20) = 0x340066666LL;
    int v25 = 3;
    int v27 = 2.1;
    uint64_t v13 = v21;
    uint64_t v24 = *(float *)&v22;
    goto LABEL_37;
  }

  *(float *)&int v22 = 1.6;
  int v23 = 6.5;
  if (isTypeStatic) {
    int v23 = 1.6;
  }
  if (v13 >= v14) {
    uint64_t v24 = v13;
  }
  else {
    uint64_t v24 = v14;
  }
  *(float *)(a3 + 12) = v23;
  *(float *)a3 = v13;
  *(float *)(a3 + 20) = v24;
  *(float *)(a3 + 28) = v24;
  int v25 = 1;
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 32) = 0x700000001LL;
  if (v8 < 100.0) {
    int v26 = isTypeStatic;
  }
  else {
    int v26 = 0;
  }
  if (v26 == 1)
  {
    int v25 = 0;
    *(void *)(a3 + 20) = 1070386381LL;
    *(void *)(a3 + 28) = 1070386381LL;
    uint64_t v24 = 1.6;
  }

  if ((v11 & 1) != 0)
  {
    int v27 = v24;
    goto LABEL_35;
  }

  *(float *)(a3 + 20) = v23;
  *(float *)(a3 + 28) = v23;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  if (isTypeStatic)
  {
    BOOL v21 = v13;
    goto LABEL_36;
  }

  int v25 = 0;
  uint64_t v24 = 6.5;
  int v27 = 6.5;
LABEL_37:
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10186DA78);
  }
  unsigned int v30 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v31 = *(void *)(a2 + 128);
    *(_DWORD *)buf = 67111424;
    int v46 = v18;
    unsigned int v47 = 2048;
    int v48 = v13;
    int v49 = 1024;
    v50 = v11;
    v51 = 2048;
    v52 = v27;
    int v53 = 2048;
    int v54 = v24;
    int v55 = 2048;
    unsigned int v56 = v31;
    int v57 = 2048;
    int v58 = v14;
    v59 = 1024;
    v60 = v25;
    v61 = 1024;
    int v62 = v17;
    int v63 = 1024;
    int v64 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "FST, FSTMotionType, %d, metsHR, %f, useHR, %d, userMets, %f, truthMets, %f, endTime, %f, semiStatMets, %f, userMet Source, %d, isWalking, %d, isTypeStatic, %d",  buf,  0x52u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186DA78);
    }
    int v32 = *(void *)(a2 + 128);
    LOWORD(v37) = 2048;
    *(double *)((char *)&v37 + 2) = v13;
    WORD5(v37) = 1024;
    HIDWORD(v37) = v11;
    *(_WORD *)unsigned int v38 = 2048;
    *(double *)&v38[2] = v27;
    *(_WORD *)&v38[10] = 2048;
    *(double *)&v38[12] = v24;
    int v39 = 1024;
    int v40 = v25;
    v41 = 1024;
    v42 = v17;
    v43 = 1024;
    int v44 = v20;
    LODWORD(v35) = 82;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "FST, FSTMotionType, %d, metsHR, %f, useHR, %d, userMets, %f, truthMets, %f, endTime, %f, semiStatMets, %f, userMet Source, %d, isWalking, %d, isTypeStatic, %d",  &v36,  v35,  67111424,  *(double *)&v37,  *((double *)&v37 + 1),  *(double *)v38,  *(double *)&v38[8],  HIDWORD(COERCE_UNSIGNED_INT64(v24)),  v32 >> 16,  COERCE_UNSIGNED_INT64(v14));
    v34 = (uint8_t *)v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLCalorieFunctionalStrengthModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  int v22 = v4 + 2;
  if ((v3 & 0x10) == 0) {
    int v22 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t v5 = v22 + 9;
  }
  else {
    uint64_t v5 = v22;
  }
  if ((v3 & 0x40) != 0)
  {
    int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v23 & 0x80000000) != 0)
    {
      uint64_t v24 = 10;
    }

    else if (v23 >= 0x80)
    {
      uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      int v3 = *(_DWORD *)(a1 + 112);
    }

    else
    {
      uint64_t v24 = 1;
    }

    uint64_t v5 = (v5 + v24 + 1);
  }

  if ((v3 & 0x80) != 0)
  {
    int v25 = *(void *)(a1 + 56);
    if (!v25) {
      int v25 = *(void *)(qword_1019A1C80 + 56);
    }
    int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DD5E8(v25);
    int v27 = (int)v26;
    else {
      uint64_t v28 = 1;
    }
    uint64_t v5 = (v5 + v27 + v28 + 1);
    int v3 = *(_DWORD *)(a1 + 112);
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_vo2Mean),  @"vo2Mean");
  has = self->_has;
  if ((*(_WORD *)&has & 0x2000) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  PBDataWriterWriteDoubleField(a3, 11LL, self->_speedMean);
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  *((void *)a3 + 14) = *(void *)&self->_speedMean;
  *((_DWORD *)a3 + 41) |= 0x2000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  *((void *)result + 17) = *(void *)&self->_vo2Mean;
  *((_DWORD *)result + 41) |= 0x10000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x2000) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  self->_speedMean = *((double *)a3 + 14);
  *(_DWORD *)&self->_has |= 0x2000u;
  int v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 4) == 0)
  {
LABEL_13:
    if ((v3 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  uint64_t v20 = (*(uint64_t (**)(void *, FILE *, uint64_t))(*a1 + 88LL))(a1, v14, a3);
  if (v14 != __stdinp) {
    fclose(v14);
  }
LABEL_35:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101878CA0);
  }
  BOOL v21 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    int v22 = __filename;
    if (v47 < 0) {
      int v22 = *(char **)__filename;
    }
    int v23 = *(unsigned __int8 *)(a3 + 8);
    uint64_t v24 = *(unsigned __int8 *)(a3 + 9);
    *(_DWORD *)buf = 136446978;
    int v57 = v22;
    int v58 = 1026;
    v59 = v23;
    v60 = 1026;
    LODWORD(v61[0]) = v24;
    WORD2(v61[0]) = 1026;
    *(_DWORD *)((char *)v61 + 6) = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "TileFile, readTileFileByFileName, done, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %{public}d, isOK, %{public}d",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101878CA0);
    }
    int v31 = __filename;
    if (v47 < 0) {
      int v31 = *(char **)__filename;
    }
    int v32 = *(unsigned __int8 *)(a3 + 8);
    v33 = *(unsigned __int8 *)(a3 + 9);
    v50 = 136446978;
    v51 = v31;
    v52 = 1026;
    int v53 = v32;
    int v54 = 1026;
    *(_DWORD *)int v55 = v33;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)&v55[6] = v20;
    LODWORD(v45) = 30;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "TileFile, readTileFileByFileName, done, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %{public}d, isOK, %{public}d",  &v50,  v45);
    int v35 = (uint8_t *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)",  "%s\n",  v34);
    if (v35 != buf) {
      free(v35);
    }
  }

  if (SHIBYTE(v47) < 0) {
    operator delete(*(void **)__filename);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  return v20;
}

  int v18 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v18;
  uint64_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      return;
    }
    goto LABEL_20;
  }

        if (v11 != 4)
        {
          continue;
        }

        return 1LL;
      case 3u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
        {
          if (v11 == 2)
          {
            uint64_t v16 = (char *)*((void *)this + 1);
            int v17 = *((void *)this + 2);
            goto LABEL_69;
          }

          goto LABEL_33;
        }

        uint64_t result = sub_100F52B48(1, 0x1Au, this, v6);
        if (!(_DWORD)result) {
          return result;
        }
LABEL_84:
        v42 = (_BYTE *)*((void *)this + 1);
        int v19 = *((void *)this + 2);
        if ((unint64_t)v42 < v19 && *v42 == 34)
        {
          int v18 = v42 + 1;
          *((void *)this + 1) = v18;
LABEL_87:
          if ((unint64_t)v18 >= v19 || *v18 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v124)) {
              return 0LL;
            }
            v43 = v124[0];
          }

          else
          {
            v43 = *v18;
            v124[0] = v43;
            *((void *)this + 1) = v18 + 1;
          }

          int v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            int v45 = (char *)*((void *)this + 1);
            if ((unint64_t)v45 >= *((void *)this + 2) || *v45 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v125)) {
                return 0LL;
              }
            }

            else
            {
              v125 = *v45;
              *((void *)this + 1) = v45 + 1;
            }

            int v46 = *(_DWORD *)(a1 + 72);
            if (v46 == *(_DWORD *)(a1 + 76))
            {
              sub_10004AAFC(v5, v46 + 1);
              int v46 = *(_DWORD *)(a1 + 72);
            }

            unsigned int v47 = v125;
            int v48 = *(void *)(a1 + 64);
            *(_DWORD *)(a1 + 72) = v46 + 1;
            *(_DWORD *)(v48 + 4LL * v46) = v47;
          }

          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v44);
LABEL_102:
          int v49 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v49 < *((void *)this + 2) && *v49 == 42)
          {
            do
            {
              *((void *)this + 1) = v49 + 1;
LABEL_105:
              v50 = *(_DWORD *)(a1 + 100);
              v51 = *(int *)(a1 + 96);
              if ((int)v51 >= v50)
              {
                if (v50 == *(_DWORD *)(a1 + 104))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v123, v50 + 1);
                  v50 = *(_DWORD *)(a1 + 100);
                }

                *(_DWORD *)(a1 + 100) = v50 + 1;
                int v53 = operator new(0x30uLL);
                v53[9] = 0;
                v53[10] = 0;
                *(void *)int v53 = &off_10188DFA8;
                *((void *)v53 + 1) = 0LL;
                *((void *)v53 + 2) = 0LL;
                *((void *)v53 + 3) = 0LL;
                int v54 = *(void *)(a1 + 88);
                int v55 = *(int *)(a1 + 96);
                *(_DWORD *)(a1 + 96) = v55 + 1;
                *(void *)(v54 + 8 * v55) = v53;
              }

              else
              {
                v52 = *(void *)(a1 + 88);
                *(_DWORD *)(a1 + 96) = v51 + 1;
                int v53 = *(_DWORD **)(v52 + 8 * v51);
              }

              unsigned int v56 = (char *)*((void *)this + 1);
              if ((unint64_t)v56 >= *((void *)this + 2) || *v56 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v124)) {
                  return 0LL;
                }
              }

              else
              {
                v124[0] = *v56;
                *((void *)this + 1) = v56 + 1;
              }

              int v57 = *((_DWORD *)this + 14);
              int v58 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v57 + 1;
              if (v57 >= v58) {
                return 0LL;
              }
              v59 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v124[0]);
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v59);
              v61 = *((_DWORD *)this + 14);
              int v26 = __OFSUB__(v61, 1);
              int v62 = v61 - 1;
              if (v62 < 0 == v26) {
                *((_DWORD *)this + 14) = v62;
              }
              int v49 = (_BYTE *)*((void *)this + 1);
              int v63 = *v49;
            }

            while (v63 == 42);
            if (v63 == 50)
            {
              do
              {
                *((void *)this + 1) = v49 + 1;
LABEL_123:
                int v64 = *(_DWORD *)(a1 + 124);
                unsigned int v65 = *(int *)(a1 + 120);
                if ((int)v65 >= v64)
                {
                  if (v64 == *(_DWORD *)(a1 + 128))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v122, v64 + 1);
                    int v64 = *(_DWORD *)(a1 + 124);
                  }

                  *(_DWORD *)(a1 + 124) = v64 + 1;
                  int v67 = operator new(0x30uLL);
                  v67[9] = 0;
                  v67[10] = 0;
                  *(void *)int v67 = &off_10188DF30;
                  *((void *)v67 + 1) = 0LL;
                  *((void *)v67 + 2) = 0LL;
                  *((void *)v67 + 3) = 0LL;
                  v68 = *(void *)(a1 + 112);
                  v69 = *(int *)(a1 + 120);
                  *(_DWORD *)(a1 + 120) = v69 + 1;
                  *(void *)(v68 + 8 * v69) = v67;
                }

                else
                {
                  int v66 = *(void *)(a1 + 112);
                  *(_DWORD *)(a1 + 120) = v65 + 1;
                  int v67 = *(_DWORD **)(v66 + 8 * v65);
                }

                v70 = (char *)*((void *)this + 1);
                if ((unint64_t)v70 >= *((void *)this + 2) || *v70 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v124)) {
                    return 0LL;
                  }
                }

                else
                {
                  v124[0] = *v70;
                  *((void *)this + 1) = v70 + 1;
                }

                v71 = *((_DWORD *)this + 14);
                v72 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v71 + 1;
                if (v71 >= v72) {
                  return 0LL;
                }
                v73 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v124[0]);
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v73);
                v75 = *((_DWORD *)this + 14);
                int v26 = __OFSUB__(v75, 1);
                v76 = v75 - 1;
                if (v76 < 0 == v26) {
                  *((_DWORD *)this + 14) = v76;
                }
                int v49 = (_BYTE *)*((void *)this + 1);
                v77 = *v49;
              }

              while (v77 == 50);
              if (v77 == 58)
              {
                do
                {
                  *((void *)this + 1) = v49 + 1;
LABEL_141:
                  v78 = *(_DWORD *)(a1 + 148);
                  v79 = *(int *)(a1 + 144);
                  if ((int)v79 >= v78)
                  {
                    if (v78 == *(_DWORD *)(a1 + 152))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v121, v78 + 1);
                      v78 = *(_DWORD *)(a1 + 148);
                    }

                    *(_DWORD *)(a1 + 148) = v78 + 1;
                    v81 = operator new(0x30uLL);
                    v81[9] = 0;
                    v81[10] = 0;
                    *(void *)v81 = &off_10188DF30;
                    *((void *)v81 + 1) = 0LL;
                    *((void *)v81 + 2) = 0LL;
                    *((void *)v81 + 3) = 0LL;
                    v82 = *(void *)(a1 + 136);
                    v83 = *(int *)(a1 + 144);
                    *(_DWORD *)(a1 + 144) = v83 + 1;
                    *(void *)(v82 + 8 * v83) = v81;
                  }

                  else
                  {
                    v80 = *(void *)(a1 + 136);
                    *(_DWORD *)(a1 + 144) = v79 + 1;
                    v81 = *(_DWORD **)(v80 + 8 * v79);
                  }

                  v84 = (char *)*((void *)this + 1);
                  if ((unint64_t)v84 >= *((void *)this + 2) || *v84 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v124)) {
                      return 0LL;
                    }
                  }

                  else
                  {
                    v124[0] = *v84;
                    *((void *)this + 1) = v84 + 1;
                  }

                  v85 = *((_DWORD *)this + 14);
                  v86 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v85 + 1;
                  if (v85 >= v86) {
                    return 0LL;
                  }
                  v87 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v124[0]);
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v87);
                  v89 = *((_DWORD *)this + 14);
                  int v26 = __OFSUB__(v89, 1);
                  v90 = v89 - 1;
                  if (v90 < 0 == v26) {
                    *((_DWORD *)this + 14) = v90;
                  }
                  int v49 = (_BYTE *)*((void *)this + 1);
                  v91 = *v49;
                }

                while (v91 == 58);
                if (v91 == 66)
                {
                  do
                  {
                    *((void *)this + 1) = v49 + 1;
LABEL_159:
                    v92 = *(_DWORD *)(a1 + 172);
                    v93 = *(int *)(a1 + 168);
                    if ((int)v93 >= v92)
                    {
                      if (v92 == *(_DWORD *)(a1 + 176))
                      {
                        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v120, v92 + 1);
                        v92 = *(_DWORD *)(a1 + 172);
                      }

                      *(_DWORD *)(a1 + 172) = v92 + 1;
                      v95 = operator new(0x30uLL);
                      v95[9] = 0;
                      v95[10] = 0;
                      *(void *)v95 = &off_10188DF30;
                      *((void *)v95 + 1) = 0LL;
                      *((void *)v95 + 2) = 0LL;
                      *((void *)v95 + 3) = 0LL;
                      v96 = *(void *)(a1 + 160);
                      v97 = *(int *)(a1 + 168);
                      *(_DWORD *)(a1 + 168) = v97 + 1;
                      *(void *)(v96 + 8 * v97) = v95;
                    }

                    else
                    {
                      v94 = *(void *)(a1 + 160);
                      *(_DWORD *)(a1 + 168) = v93 + 1;
                      v95 = *(_DWORD **)(v94 + 8 * v93);
                    }

                    v98 = (char *)*((void *)this + 1);
                    if ((unint64_t)v98 >= *((void *)this + 2) || *v98 < 0)
                    {
                      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v124)) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      v124[0] = *v98;
                      *((void *)this + 1) = v98 + 1;
                    }

                    v99 = *((_DWORD *)this + 14);
                    v100 = *((_DWORD *)this + 15);
                    *((_DWORD *)this + 14) = v99 + 1;
                    if (v99 >= v100) {
                      return 0LL;
                    }
                    v101 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v124[0]);
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v101);
                    v103 = *((_DWORD *)this + 14);
                    int v26 = __OFSUB__(v103, 1);
                    v104 = v103 - 1;
                    if (v104 < 0 == v26) {
                      *((_DWORD *)this + 14) = v104;
                    }
                    int v49 = (_BYTE *)*((void *)this + 1);
                    v105 = *v49;
                  }

                  while (v105 == 66);
                  if (v105 == 74)
                  {
                    do
                    {
                      *((void *)this + 1) = v49 + 1;
LABEL_177:
                      v106 = *(_DWORD *)(a1 + 196);
                      v107 = *(int *)(a1 + 192);
                      if ((int)v107 >= v106)
                      {
                        if (v106 == *(_DWORD *)(a1 + 200))
                        {
                          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v106 + 1);
                          v106 = *(_DWORD *)(a1 + 196);
                        }

                        *(_DWORD *)(a1 + 196) = v106 + 1;
                        v109 = operator new(0x30uLL);
                        v109[9] = 0;
                        v109[10] = 0;
                        *(void *)v109 = &off_10188DF30;
                        *((void *)v109 + 1) = 0LL;
                        *((void *)v109 + 2) = 0LL;
                        *((void *)v109 + 3) = 0LL;
                        v110 = *(void *)(a1 + 184);
                        v111 = *(int *)(a1 + 192);
                        *(_DWORD *)(a1 + 192) = v111 + 1;
                        *(void *)(v110 + 8 * v111) = v109;
                      }

                      else
                      {
                        v108 = *(void *)(a1 + 184);
                        *(_DWORD *)(a1 + 192) = v107 + 1;
                        v109 = *(_DWORD **)(v108 + 8 * v107);
                      }

                      v112 = (char *)*((void *)this + 1);
                      if ((unint64_t)v112 >= *((void *)this + 2) || *v112 < 0)
                      {
                        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v124)) {
                          return 0LL;
                        }
                      }

                      else
                      {
                        v124[0] = *v112;
                        *((void *)this + 1) = v112 + 1;
                      }

                      v113 = *((_DWORD *)this + 14);
                      v114 = *((_DWORD *)this + 15);
                      *((_DWORD *)this + 14) = v113 + 1;
                      if (v113 >= v114) {
                        return 0LL;
                      }
                      v115 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v124[0]);
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v115);
                      v117 = *((_DWORD *)this + 14);
                      int v26 = __OFSUB__(v117, 1);
                      v118 = v117 - 1;
                      if (v118 < 0 == v26) {
                        *((_DWORD *)this + 14) = v118;
                      }
                      int v49 = (_BYTE *)*((void *)this + 1);
                      v119 = (_BYTE *)*((void *)this + 2);
                    }

                    while (v49 < v119 && *v49 == 74);
                    if (v49 == v119 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      uint64_t result = 1LL;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
        }

        continue;
      case 4u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          uint64_t result = sub_100F52B48(1, 0x22u, this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_102;
        }

        if (v11 != 2) {
          goto LABEL_33;
        }
        int v18 = (char *)*((void *)this + 1);
        int v19 = *((void *)this + 2);
        goto LABEL_87;
      case 5u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_105;
        }
        goto LABEL_33;
      case 6u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_123;
        }
        goto LABEL_33;
      case 7u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_141;
        }
        goto LABEL_33;
      case 8u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_159;
        }
        goto LABEL_33;
      case 9u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_33;
        }
        goto LABEL_177;
      default:
        int v11 = TagFallback & 7;
        goto LABEL_33;
    }
  }

  uint64_t v16 = *(_DWORD *)(a2 + 44);
  v3 |= 0x200u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 44) = v16;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "metMinutePercentileActual", *(float *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xEu);
  unsigned int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  uint64_t result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 112) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "powerMeterIdentification", *(_DWORD *)(a1 + 172));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 136), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 64) = v5;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "elevationGain", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }

  uint64_t result = *(float *)(a2 + 80);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "isCadenceConcordant", *(_BYTE *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 8u);
  unsigned int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  uint64_t v12 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 48) = v12;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "currentMin", *(float *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "accelY", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 6u);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }

  int v14 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 72) = v14;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "posPeakLeftHalfWidth", *(_DWORD *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0xCu);
  unsigned int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  int v18 = *(_DWORD *)(a2 + 104);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 104) = v18;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "inertialApproachX", *(float *)(a1 + 112));
  uint64_t v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x800) == 0)
  {
LABEL_12:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 7u);
  unsigned int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "configNonPlanarDelaySpreadThreshold", *(float *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 4u);
  unsigned int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 3u);
  unsigned int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }

  int v23 = *(void *)(a2 + 136);
  v8 |= 2u;
  *(_WORD *)(a1 + 204) = v8;
  *(void *)(a1 + 136) = v23;
  int v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x200) == 0)
  {
LABEL_18:
    if ((v7 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "isSpinDetected", *(_BYTE *)(a1 + 201));
  uint64_t v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  uint64_t v13 = *(_BYTE *)(a2 + 58);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 58) = v13;
  int v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "isGPS", *(_BYTE *)(a1 + 62));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 57), 0x130u);
  unsigned int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  int v15 = *(_DWORD *)(a2 + 68);
  v3 |= 0x800u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 68) = v15;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "numLowOrFakeSamplesInHistory", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xC9u);
  unsigned int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  int v15 = *(_DWORD *)(a2 + 80);
  v3 |= 0x800u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 80) = v15;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "runningArclengthThisImpact", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  int v19 = *(void *)(a2 + 96);
  v6 |= 0x20u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 96) = v19;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "numPeaks", *(_DWORD *)(a1 + 132));
  int v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x2000) == 0)
  {
LABEL_16:
    if ((v11 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 7u);
  unsigned int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  int v18 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_WORD *)(result + 96) = v3;
  *(_DWORD *)(result + 76) = v18;
  if ((*(_WORD *)(a2 + 96) & 4) != 0) {
    goto LABEL_34;
  }
  return result;
}

  int v23 = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 192) |= 0x100u;
  *(void *)(a1 + 144) = v23;
  int v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x200) != 0) {
    goto LABEL_34;
  }
LABEL_21:
  if ((v11 & 0x400) != 0)
  {
LABEL_22:
    uint64_t v12 = *(void *)(a2 + 160);
    *(_WORD *)(a1 + 192) |= 0x400u;
    *(void *)(a1 + 160) = v12;
  }

  return a1;
}

  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 128));
  uint64_t v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0xAu);
  int v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 1) == 0)
  {
LABEL_19:
    if ((v14 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 8u);
  uint64_t v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 4) == 0)
  {
LABEL_19:
    if ((v16 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  int v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "poseZ", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0xEu);
  unsigned int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  int v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_35:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_DWORD *)(a1 + 80) & 0x8000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x11u);
  }

  int v19 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 124) |= 8u;
  *(_DWORD *)(a1 + 72) = v19;
  int v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x400) == 0)
  {
LABEL_18:
    if ((v10 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  uint64_t v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x80) == 0)
  {
LABEL_17:
    if ((v12 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10) == 0)
  {
LABEL_17:
    if ((v11 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  uint64_t result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 20) = result;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle", *(_DWORD *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 0xCu);
  unsigned int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 8u);
  unsigned int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "numLargeYawDetections", *(_DWORD *)(a1 + 156));
  BOOL v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x100) != 0) {
    goto LABEL_34;
  }
LABEL_25:
  if ((v21 & 2) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  return PB::TextFormatter::endObject(this);
}

  PB::TextFormatter::format(this, "distanceReleaseThreshold", *(float *)(a1 + 28));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 5u);
  unsigned int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  int v17 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 92) = v3;
  *(void *)(result + 8) = v17;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0) {
      goto LABEL_17;
    }
LABEL_35:
    PB::TextFormatter::format(this, "timeRef", *(double *)(a1 + 40));
    if ((*(_DWORD *)(a1 + 92) & 0x4000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 89), 0x11u);
  }

  uint64_t v16 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 56) = v16;
  int v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x100) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0xEu);
  unsigned int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  uint64_t result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 96) = result;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "height", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200), 7u);
  unsigned int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 48) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedCv", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 0xBu);
  unsigned int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  uint64_t result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 168) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x400000) == 0)
  {
LABEL_10:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P95", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184), 6u);
  unsigned int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }

  uint64_t result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 48) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "accelFFTBin4", *(float *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 6u);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }

  int v15 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 24) = v15;
  int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "motionType", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  uint64_t v16 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 84) = v3;
  *(void *)(result + 8) = v16;
  int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "runningSwitchCount", *(_DWORD *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xEu);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "estExitTime", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 108), 5u);
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "rotRateInerFFTAmpZPed", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 9u);
  unsigned int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }

  int v18 = *(_BYTE *)(a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v18;
  if ((*(_WORD *)(a2 + 116) & 0x1000) != 0) {
    goto LABEL_34;
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 32) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "measurement", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xDu);
  unsigned int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }

  uint64_t v12 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 16) = v12;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "horizSpeed", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "deltaCalibratedPedometerDistance", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 184), 4u);
  unsigned int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 128) = v5;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "strideLengthFormBasedCalibrated", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
LABEL_35:
    PB::TextFormatter::format(this, "strideLengthSpeedBased", *(double *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 136) & 0x4000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 132), 0xFu);
  unsigned int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x11u);
  }

  uint64_t v8 = *(void *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 104) = v8;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }

  PB::TextFormatter::format(this, "integratedCenterOfAccelZMaxBackwards", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 6u);
  unsigned int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }

    int v19 = v17;
  }

LABEL_57:
  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_98;
  }
  if ((v3 & 0x100) == 0)
  {
    if ((v3 & 0x200) == 0) {
      goto LABEL_60;
    }
LABEL_68:
    int v36 = *(void *)(a1 + 80);
    if (!v36) {
      int v36 = *(void *)(qword_1019A0980 + 80);
    }
    int v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100078808(v36, a2);
    unsigned int v38 = (int)v37;
    else {
      int v39 = 1;
    }
    v5 += v38 + v39 + 1;
    int v3 = *(_DWORD *)(a1 + 128);
    if ((v3 & 0x400) == 0) {
      goto LABEL_80;
    }
    goto LABEL_74;
  }

  int v32 = *(void *)(a1 + 64);
  if (!v32) {
    int v32 = *(void *)(qword_1019A0980 + 64);
  }
  v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100077230(v32, a2);
  v34 = (int)v33;
  else {
    int v35 = 1;
  }
  v5 += v34 + v35 + 1;
  int v3 = *(_DWORD *)(a1 + 128);
  if ((v3 & 0x200) != 0) {
    goto LABEL_68;
  }
LABEL_60:
  if ((v3 & 0x400) != 0)
  {
LABEL_74:
    int v40 = *(void *)(a1 + 88);
    if (!v40) {
      int v40 = *(void *)(qword_1019A0980 + 88);
    }
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100072728(v40, a2);
    v42 = (int)v41;
    else {
      v43 = 1;
    }
    v5 += v42 + v43 + 1;
    int v3 = *(_DWORD *)(a1 + 128);
  }

  if ((v3 & 0x80) != 0) {
    uint64_t v5 = (v5 + 2);
  }
  else {
    uint64_t v5 = v5;
  }
LABEL_60:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_93;
  }
  if ((v3 & 0x100) != 0)
  {
    int v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
    if ((v32 & 0x80000000) != 0)
    {
      v33 = 11;
    }

    else if (v32 >= 0x80)
    {
      v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 80);
    }

    else
    {
      v33 = 2;
    }

    uint64_t v5 = (v33 + v5);
    if ((v3 & 0x200) == 0)
    {
LABEL_63:
      if ((v3 & 0x400) == 0) {
        goto LABEL_64;
      }
      goto LABEL_78;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_63;
  }

  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
  if ((v34 & 0x80000000) != 0)
  {
    int v35 = 11;
  }

  else if (v34 >= 0x80)
  {
    int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 80);
  }

  else
  {
    int v35 = 2;
  }

  uint64_t v5 = (v35 + v5);
  if ((v3 & 0x400) == 0)
  {
LABEL_64:
    if ((v3 & 0x800) == 0) {
      goto LABEL_93;
    }
    goto LABEL_84;
  }

          BOOL v21 = 0LL;
          goto LABEL_58;
        }

        BOOL v21 = 1LL;
LABEL_58:
        if (SHIBYTE(v40) < 0) {
          operator delete(v38);
        }
        v6 += 240LL;
        if (v6 == v7) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v21;
        }
        if ((v24 & 1) == 0) {
          goto LABEL_100;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      int v22 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993AE7 >= 0) {
          int v23 = &xmmword_101993AD0;
        }
        else {
          int v23 = (__int128 *)xmmword_101993AD0;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101820EA0);
        }
        if (byte_101993AE7 >= 0) {
          unsigned int v29 = &xmmword_101993AD0;
        }
        else {
          unsigned int v29 = (__int128 *)xmmword_101993AD0;
        }
        v43 = 136380675;
        int v44 = v29;
        LODWORD(v35) = 12;
        unsigned int v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE with sql %{private}s",  &v43,  v35);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRecordingEventsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v30);
      }

      sqlite3_reset(v8);
      goto LABEL_57;
    }

    BOOL v21 = 1LL;
LABEL_100:
    int v32 = v42;
    v42 = 0LL;
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820EA0);
    }
    int v31 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820EA0);
      }
      LOWORD(v41.__r_.__value_.__l.__data_) = 0;
      v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v41,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRecordingEventsTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v34);
    }

    return 0LL;
  }

  return v21;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3C,  (int)a2,  *(double *)(v5 + 176),  a3);
  int v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }

  int v22 = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 152) |= 0x4000u;
  *(void *)(a1 + 112) = v22;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x8000) != 0)
  {
LABEL_25:
    uint64_t v8 = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(a1 + 152) |= 0x8000u;
    *(_DWORD *)(a1 + 108) = v8;
    uint64_t v5 = *(_DWORD *)(a2 + 152);
  }

    if ((a3->i8[1] - *(_BYTE *)(a1 + 152)) >= 2u)
    {
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018314C0);
      }
      int v39 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
      {
        int v40 = *(unsigned __int8 *)(a1 + 153);
        v41 = a3->u8[1];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v40;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Jump in packet sequence number: last=%d, this=%d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018314C0);
        }
        v83 = *(unsigned __int8 *)(a1 + 153);
        v84 = a3->u8[1];
        *(_DWORD *)v93 = 67109376;
        *(_DWORD *)&v93[4] = v83;
        *(_WORD *)&v93[8] = 1024;
        *(_DWORD *)&v93[10] = v84;
        v85 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Jump in packet sequence number: last=%d, this=%d",  v93,  14);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v85);
        if (v85 != buf) {
          free(v85);
        }
      }
    }

    *(_BYTE *)(a1 + 152) = a3->i8[1];
    sub_1002F4348(a1, a2, (uint64_t)a3 + 2);
    v42 = *(void *)(a1 + 88) + *(void *)(a1 + 96);
    v43 = *(void *)(a1 + 64);
    int v44 = (char *)(v43 + 8 * (v42 >> 12));
    if (*(void *)(a1 + 72) == v43) {
      int v45 = 0LL;
    }
    else {
      int v45 = *(void *)v44 + (v42 & 0xFFF);
    }
    sub_1002F7484((int64x2_t *)(a1 + 56), v44, v45, (char *)&a3[3] + 5, (char *)&a3[3] + a3->u8[0] + 5, a3->u8[0]);
    while (1)
    {
      int v46 = *(void *)(a1 + 96);
      if (!v46) {
        return;
      }
      unsigned int v47 = *(void *)(a1 + 88);
      int v48 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + ((v47 >> 9) & 0x7FFFFFFFFFFFF8LL)) + (v47 & 0xFFF));
      switch(v48)
      {
        case 2:
          LOBYTE(v91) = 2;
          *(void *)(a1 + 88) = v47 + 1;
          *(void *)(a1 + 96) = v46 - 1;
          sub_1002F8718(a1 + 56, 1);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018314C0);
          }
          v52 = (os_log_s *)qword_101934568;
          if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
          {
            int v53 = *(void *)(a1 + 96);
            *(_DWORD *)buf = 134217984;
            *(void *)&buf[4] = v53;
            _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "called event handler function, remaining bytes: %lu",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934560 != -1) {
              dispatch_once(&qword_101934560, &stru_1018314C0);
            }
            int v67 = *(void *)(a1 + 96);
            *(_DWORD *)v93 = 134217984;
            *(void *)&v93[4] = v67;
            v68 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "called event handler function, remaining bytes: %lu",  v93);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v68);
            if (v68 != buf) {
              free(v68);
            }
          }

          sub_1002F5878(a1, a2, (uint64_t)&v91);
          break;
        case 3:
          LOBYTE(v91) = 3;
          *(void *)(a1 + 88) = v47 + 1;
          *(void *)(a1 + 96) = v46 - 1;
          sub_1002F8718(a1 + 56, 1);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018314C0);
          }
          int v54 = (os_log_s *)qword_101934568;
          if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
          {
            int v55 = *(void *)(a1 + 96);
            *(_DWORD *)buf = 134217984;
            *(void *)&buf[4] = v55;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEBUG,  "called event handler function, remaining bytes: %lu",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934560 != -1) {
              dispatch_once(&qword_101934560, &stru_1018314C0);
            }
            v69 = *(void *)(a1 + 96);
            *(_DWORD *)v93 = 134217984;
            *(void *)&v93[4] = v69;
            v70 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "called event handler function, remaining bytes: %lu",  v93);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v70);
            if (v70 != buf) {
              free(v70);
            }
          }

          sub_1002F5A38(a1, a2, (uint64_t)&v91);
          break;
        case 5:
          if (v46 <= 0x1F)
          {
            if (qword_101934560 != -1) {
              dispatch_once(&qword_101934560, &stru_1018314C0);
            }
            int v49 = (os_log_s *)qword_101934568;
            if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
            {
              v50 = *(void *)(a1 + 96);
              *(_DWORD *)buf = 134218240;
              *(void *)&buf[4] = v50;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = 32LL;
              _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "Skipping, buffer size %lu < packet size %lu",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934560 != -1) {
                dispatch_once(&qword_101934560, &stru_1018314C0);
              }
              v72 = *(void *)(a1 + 96);
              *(_DWORD *)v93 = 134218240;
              *(void *)&v93[4] = v72;
              *(_WORD *)&v93[12] = 2048;
              *(void *)&v93[14] = 32LL;
              LODWORD(v88) = 22;
              v73 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Skipping, buffer size %lu < packet size %lu",  v93,  v88);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v73);
              if (v73 != buf) {
                free(v73);
              }
            }

            v51 = 0;
            goto LABEL_112;
          }

          int v57 = 0LL;
          while (1)
          {
            int v58 = *(void *)(a1 + 96);
            if (!v58) {
              break;
            }
            v59 = *(void *)(a1 + 88);
            v93[v57] = *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + ((v59 >> 9) & 0x7FFFFFFFFFFFF8LL)) + (v59 & 0xFFF));
            *(void *)(a1 + 88) = v59 + 1;
            *(void *)(a1 + 96) = v58 - 1;
            sub_1002F8718(a1 + 56, 1);
            if (++v57 == 32) {
              goto LABEL_105;
            }
          }

          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018314C0);
          }
          v60 = (os_log_s *)qword_101934568;
          if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Zero size struct, or somehow ring buffer size ran out",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934560 != -1) {
              dispatch_once(&qword_101934560, &stru_1018314C0);
            }
            LOWORD(v91) = 0;
            LODWORD(v88) = 2;
            v76 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "Zero size struct, or somehow ring buffer size ran out",  &v91,  v88);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)",  "%s\n",  v76);
            if (v76 != buf) {
              free(v76);
            }
          }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  v5[22],  a2,  a4);
  int v6 = v5[37];
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_109;
  }
  if ((v3 & 0x100) != 0)
  {
    BOOL v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v21 >= 0x80)
    {
      int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
      int v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      int v22 = 1;
    }

    unsigned int v4 = (v4 + v22 + 1);
    if ((v3 & 0x200) == 0)
    {
LABEL_60:
      if ((v3 & 0x400) == 0) {
        goto LABEL_61;
      }
      goto LABEL_75;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_60;
  }

  int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
  if (v23 >= 0x80)
  {
    uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
    int v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    uint64_t v24 = 1;
  }

  unsigned int v4 = (v4 + v24 + 1);
  if ((v3 & 0x400) == 0)
  {
LABEL_61:
    if ((v3 & 0x800) == 0) {
      goto LABEL_62;
    }
    goto LABEL_81;
  }

  memset(&error, 0, sizeof(error));
  sub_1002F0B04(&buf);
  if (sub_1002A8560(buf, "EEDDemoHeader", &error))
  {
    if ((error.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v32 = error.__r_.__value_.__s.__size_;
    }
    else {
      int v32 = error.__r_.__value_.__l.__size_;
    }
    v33 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (!*((void *)&buf + 1)) {
      goto LABEL_65;
    }
    v34 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
    do
      int v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if (!v32) {
        goto LABEL_83;
      }
    }

    else
    {
LABEL_65:
      if (!v32) {
        goto LABEL_83;
      }
    }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    int v36 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      p_error = &error;
      if ((error.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_error = (std::string *)error.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf) = 136380675;
      *(void *)((char *)&buf + 4) = p_error;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2,sending demo header for %{private}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      int v63 = &error;
      if ((error.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v63 = (std::string *)error.__r_.__value_.__r.__words[0];
      }
      v79 = 136380675;
      v80 = v63;
      LODWORD(v78) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2,sending demo header for %{private}s",  &v79,  v78);
      unsigned int v65 = (char *)v64;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const",  "%s\n",  v64);
    }

    if ((error.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v38 = &error;
    }
    else {
      unsigned int v38 = (std::string *)error.__r_.__value_.__r.__words[0];
    }
    objc_msgSend( *a3,  "setValue:forHTTPHeaderField:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38),  @"x-eed-demo");
  }

  else
  {
    int v39 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1))
    {
      int v40 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }

  v260 = (const char *)(a1 + 800);
  if (sub_100C701E4(a1 + 800, v30)) {
    int v36 = 2;
  }
  else {
    int v36 = v29;
  }
  HIDWORD(v261) = v36;
  v284 = 0.0;
  int v37 = sub_10098F32C(a1, &v284, a3 + -20.0, a3);
  LODWORD(v259) = 0;
  *(double *)&unsigned int v38 = v284;
  int v39 = v284 < 11.9210824 && v37;
  if (!v39 || !HIDWORD(v261))
  {
    HIDWORD(v253) = 0;
    v43 = 0.0;
    goto LABEL_86;
  }

  memset(buf, 0, 32);
  memset(v313, 0, 32);
  if (!sub_10098E6D0(v5, (uint64_t)buf, v313, a3 + -20.0))
  {
    int v46 = 0;
    v43 = 0.0;
LABEL_84:
    LODWORD(v259) = 1;
    HIDWORD(v261) = -1;
    goto LABEL_85;
  }

  int v40 = *((void *)&v298 + 1);
  if (*((void *)&v298 + 1) == *(void *)&buf[24])
  {
    v43 = 0.0;
  }

  else
  {
    v41 = v298;
    v42 = *(void *)v298;
    v43 = 0.0;
    do
    {
      if (v40 == v42)
      {
        int v45 = *(void *)(v41 - 8);
        v41 -= 8LL;
        v42 = v45;
        int v44 = (double *)(v45 + 4848);
        int v40 = v45 + 5120;
      }

      else
      {
        int v44 = (double *)(v40 - 272);
      }

      v43 = v43 + *v44;
      v40 -= 320LL;
    }

    while (v40 != *(void *)&buf[24]);
  }

  int v46 = *(double *)&v38 < 4.4704 && v43 > 0.0;
  unsigned int v47 = sub_1009403E0(a1 + 160);
  if (v43 < 2.22044605e-16 || !v47) {
    goto LABEL_84;
  }
  LODWORD(v259) = 0;
LABEL_85:
  HIDWORD(v253) = v46;
LABEL_86:
  if (v24) {
    int v49 = v294;
  }
  else {
    int v49 = 0.0;
  }
  v50 = *((void *)&v298 + 1);
  if (*((void *)&v298 + 1) == *(void *)v298) {
    v50 = *(void *)(v298 - 8) + 5120LL;
  }
  LODWORD(v257) = sub_10098FD90(a1, v19, v49, *(double *)(v50 - 96));
  if ((_DWORD)v257)
  {
    v51 = sub_10098E808(a1);
    v52 = HIDWORD(v261);
    if (!v51) {
      v52 = -1;
    }
    HIDWORD(v261) = v52;
    int v53 = LODWORD(v259);
    if (!v51) {
      int v53 = 2;
    }
    LODWORD(v259) = v53;
  }

  if ((sub_100940388(a1 + 160) & 1) != 0 || sub_1009403E0(a1 + 160))
  {
    int v54 = *((void *)&v298 + 1);
    if (*((void *)&v298 + 1) == *(void *)v298) {
      int v54 = *(void *)(v298 - 8) + 5120LL;
    }
    if (sub_100990258(a1, v54 - 320))
    {
      unsigned int v56 = v55;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      int v57 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        int v58 = *(void *)(a1 + 304);
        *(_DWORD *)buf = 134349312;
        *(void *)&buf[4] = v56;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Rejecting fusion due to gps-speed based driving detection, %{public}f, workout, %{public}ld",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101863518);
        }
        v217 = *(void *)(a1 + 304);
        *(_DWORD *)v313 = 134349312;
        *(void *)&v313[4] = v56;
        *(_WORD *)&v313[12] = 2050;
        *(void *)&v313[14] = v217;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Rejecting fusion due to gps-speed based driving detection, %{public}f, workout, %{public}ld",  v313,  22);
        v219 = (char *)v218;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v218);
        if (v219 != buf) {
          free(v219);
        }
      }

      LODWORD(v259) = 3;
      HIDWORD(v261) = -1;
    }

    v59 = sub_1009904C4(a1 + 664, (uint64_t)buf);
    v60 = *(_DWORD *)v441 == 5 ? v59 : 0;
    if (v60 == 1)
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      v61 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        int v62 = *(void *)(a1 + 304);
        *(_DWORD *)buf = 134349056;
        *(void *)&buf[4] = v62;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Rejecting fusion due to activity based driving detection, workout, %{public}ld",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101863518);
        }
        v220 = *(void *)(a1 + 304);
        *(_DWORD *)v313 = 134349056;
        *(void *)&v313[4] = v220;
        LODWORD(v243) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "Rejecting fusion due to activity based driving detection, workout, %{public}ld",  v313,  *(void *)&v243);
        v222 = (char *)v221;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v221);
        if (v222 != buf) {
          free(v222);
        }
      }

      sub_1009403E0(a1 + 160);
      int v63 = 4;
      goto LABEL_139;
    }
  }

  int v64 = sub_1009403E0(a1 + 160);
  if (SHIDWORD(v261) > 0 && v64)
  {
    int v67 = *((void *)&v298 + 1);
    int v66 = (uint64_t *)v298;
    if (*((void *)&v298 + 1) == *((void *)&v296 + 1)) {
      LODWORD(v68) = 0;
    }
    else {
      v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v298 + 1) - *(void *)v298) >> 6)
    }
          + 2 * (v298 - v296)
          + 0x3333333333333333LL * ((uint64_t)(*((void *)&v296 + 1) - *(void *)v296) >> 6);
    *(_OWORD *)buf = v298;
    sub_10079B620((uint64_t **)buf, -(uint64_t)(int)v68);
    v69 = *(void *)&buf[8];
    if (v67 == *(void *)&buf[8]) {
      goto LABEL_138;
    }
    v70 = 0;
    v71 = *v66;
    do
    {
      v72 = v67;
      if (v67 == v71) {
        v72 = *(v66 - 1) + 5120;
      }
      v73 = sub_100992748(a1);
      if (*(_DWORD *)(v72 - 104)) {
        v74 = 1;
      }
      else {
        v74 = v73;
      }
      v71 = *v66;
      if (v67 == *v66)
      {
        v75 = *--v66;
        v71 = v75;
        int v67 = v75 + 5120;
      }

      v70 += v74;
      v67 -= 320LL;
    }

    while (v67 != v69);
    if (v70 <= 2)
    {
LABEL_138:
      int v63 = 5;
LABEL_139:
      LODWORD(v259) = v63;
      HIDWORD(v261) = -1;
    }
  }

  sub_100C6F348((uint64_t)v260, SHIDWORD(v261));
  v76 = *((void *)&v298 + 1);
  if (*((void *)&v298 + 1) == *(void *)v298) {
    v76 = *(void *)(v298 - 8) + 5120LL;
  }
  sub_100C6F350((uint64_t)v260, (double *)(v76 - 320));
  if (SHIDWORD(v261) < 1)
  {
    HIDWORD(v259) = 0;
    v78 = v19;
  }

  else
  {
    if (*(_BYTE *)(a1 + 2128)) {
      v77 = 1;
    }
    else {
      v77 = v21;
    }
    HIDWORD(v259) = v77;
    if (v77) {
      v78 = v294;
    }
    else {
      v78 = v19;
    }
  }

  *(double *)(a1 + 2088) = v78 + *(double *)(a1 + 2088);
  *(double *)(a1 + 2096) = v19 + *(double *)(a1 + 2096);
  *(double *)(a1 + 2104) = v20 + *(double *)(a1 + 2104);
  v79 = *(double *)(a1 + 2120);
  v81 = *((void *)&v298 + 1);
  v80 = v298;
  v82 = *(void *)v298;
  v83 = *((void *)&v298 + 1);
  if (*((void *)&v298 + 1) == v82) {
    v83 = *(void *)(v298 - 8) + 5120LL;
  }
  if (v79 > *(double *)(v83 - 224)) {
LABEL_154:
  }
    *(double *)(a1 + 2112) = v79;
  if (v81 == v82) {
    v81 = *(void *)(v80 - 8) + 5120LL;
  }
  v84 = sub_100C6FE94((uint64_t)v260);
  v85 = sub_100C70198((uint64_t)v260);
  v86 = v85;
  v87 = *(int8x16_t *)(v81 - 312);
  v88 = *(_OWORD *)(v81 - 296);
  v275 = *(_OWORD *)(v81 - 280);
  v89 = *(_OWORD *)(v81 - 264);
  v90 = *(int8x16_t *)(v81 - 232);
  v91 = *(_OWORD *)(v81 - 216);
  v277 = *(_OWORD *)(v81 - 248);
  v92 = *(_OWORD *)(v81 - 184);
  v93 = *(_OWORD *)(v81 - 152);
  v94 = *(_OWORD *)(v81 - 200);
  *(_OWORD *)v282 = *(_OWORD *)(v81 - 168);
  *(_OWORD *)&v282[16] = v93;
  v280 = v94;
  v281 = v92;
  __src = v87;
  v274 = v88;
  v278 = v90;
  *(_OWORD *)theString = v91;
  v276 = v89;
  *(double *)&v275 = v78;
  *((double *)&v277 + 1) = v84;
  LOBYTE(v280) = BYTE4(v259);
  BYTE1(v280) = sub_100990320(v85, v85);
  v95 = BYTE4(v257);
  if (HIDWORD(v259)) {
    v95 = 1;
  }
  v282[22] = v95;
  *(_DWORD *)&v282[24] = v86;
  *(void *)buf = 0xBFF0000000000000LL;
  sub_1009923EC(a1, (double *)buf, a3);
  v96 = *((void *)&v298 + 1);
  if (*((void *)&v298 + 1) == *(void *)v298) {
    v96 = *(void *)(v298 - 8) + 5120LL;
  }
  v97 = *(double *)buf;
  v98 = sub_100940328(1.5, 0.15, 3.5, 0.35, *(double *)(v96 - 80));
  sub_1004F2598();
  if ((sub_1001B9A1C() & 1) != 0 || (sub_1004F2598(), sub_1004F7500()))
  {
    v99 = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a1 + 656) + 24LL))( *(void *)(a1 + 656),  buf,  a3);
    if (*(_DWORD *)v430 == 2) {
      v100 = v99;
    }
    else {
      v100 = 0;
    }
    sub_100A8A110( *(void *)(a1 + 2136),  SDWORD2(v274),  v100,  *(double *)(a1 + 2096),  *(double *)(a1 + 2104),  v97,  *(double *)(a1 + 2088),  v18,  *((double *)&v277 + 1));
  }

  v254 = (int8x16_t *)(a1 + 2088);
  v101 = fmin(fmax(v98, 0.15), 0.35);
  if (*(_BYTE *)(a1 + 2129))
  {
    sub_10114E2B8((uint64_t)v313);
    v102 = operator new(0xA0uLL);
    v103 = (int8x16_t *)sub_10114BE18((uint64_t)v102);
    v103[5] = vextq_s8(__src, __src, 8uLL);
    v104 = v274;
    v105 = v275;
    v103[4].i64[0] = *((void *)&v275 + 1);
    v106 = *((void *)&v277 + 1);
    v103[7].i64[1] = v277;
    v107 = v103[9].i32[2];
    v103[6].i32[0] = DWORD2(v274);
    v103[2].i64[1] = v105;
    v103[3].i64[0] = v104;
    v103[2].i64[0] = v106;
    v103[1] = vextq_s8(v278, v278, 8uLL);
    v108 = (__int32)theString[0];
    v103[9].i32[2] = v107 | 0x8C1FF;
    v103[8].i32[3] = v108;
    if (theString[1])
    {
      CStringPtr = (char *)CFStringGetCStringPtr(theString[1], 0x8000100u);
      if (CStringPtr)
      {
        sub_1010DDBC0(buf, CStringPtr);
        sub_10044973C((uint64_t)v102, (__n128 *)buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    v110 = v102[38];
    *((_WORD *)v102 + 74) = v280;
    v111 = *(_DWORD *)&v282[4];
    v102[34] = *(_DWORD *)v282;
    v102[36] = v111;
    v112 = v282[8];
    *((void *)v102 + 13) = *(void *)&v282[12];
    v113 = v282[21];
    v102[25] = v282[22];
    v102[28] = v282[20];
    v102[29] = v113;
    v114 = *(_DWORD *)&v282[24];
    v102[38] = v110 | 0x773E00;
    v102[32] = v114;
    v102[33] = v112;
    sub_1004495A0((uint64_t)&__src, (int8x16_t *)buf);
    v115 = operator new(0xA0uLL);
    v116 = sub_10114C270(v115, buf);
    v117 = *(void *)&v313[16];
    *(void *)&v313[16] = v116;
    if (v117) {
      (*(void (**)(uint64_t))(*(void *)v117 + 8LL))(v117);
    }
    v118 = *((void *)&v298 + 1);
    if (*((void *)&v298 + 1) == *(void *)v298) {
      v118 = *(void *)(v298 - 8) + 5120LL;
    }
    sub_1004497AC(v118 - 136, (uint64_t)v299);
    v119 = operator new(0x50uLL);
    v120 = sub_10114DB10((uint64_t)v119, (uint64_t)v299);
    v121 = *(void *)&v313[8];
    *(void *)&v313[8] = v120;
    if (v121) {
      (*(void (**)(uint64_t))(*(void *)v121 + 8LL))(v121);
    }
    WORD2(v318) |= 1u;
    *(double *)&v313[24] = v294;
    v122 = sub_100832C0C((uint64_t)v260);
    *(double *)&v317[16] = v97;
    *(int8x16_t *)v317 = vextq_s8(*v254, *v254, 8uLL);
    *(double *)&v313[32] = v122;
    v314 = v292;
    v315 = v293;
    v316 = *(const char **)&v101;
    LOBYTE(v318) = (_BYTE)v257;
    WORD2(v318) |= 0x7FEu;
    v123 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)&v317[28] = HIDWORD(v257);
    *(_DWORD *)&v317[24] = v123;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_1018635C8);
    }
    v124 = qword_1019A1D08;
    if (qword_1019A1D08)
    {
      v125 = operator new(0x68uLL);
      v262.i64[0] = sub_10114E558(v125, v313);
      Current = CFAbsoluteTimeGetCurrent();
      sub_100B50EE8(v124, v262.i64, Current);
      v127 = v262.i64[0];
      v262.i64[0] = 0LL;
      if (v127) {
        (*(void (**)(uint64_t))(*(void *)v127 + 8LL))(v127);
      }
    }

    PB::Base::~Base((PB::Base *)v299);
    sub_10114BEA0((PB::Base *)buf);
    (*(void (**)(_DWORD *))(*(void *)v102 + 8LL))(v102);
    sub_10114E32C((PB::Base *)v313);
  }

  HIDWORD(v257) = sub_1009902D4(a1) ^ 1;
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101863518);
  }
  v128 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, BYTE4(v257)))
  {
    v129 = *((void *)&v298 + 1);
    v130 = *((void *)&v298 + 1);
    if (*((void *)&v298 + 1) == *(void *)v298)
    {
      v130 = *(void *)(v298 - 8) + 5120LL;
      v129 = v130;
    }

    v131 = v294;
    v132 = DWORD2(v274);
    v133 = *(_DWORD *)(v130 - 104);
    v134 = v275;
    v135 = *(double *)(a1 + 2096);
    v136 = *(void *)(a1 + 2104);
    v248 = *(const char **)(a1 + 2088);
    v250 = *(void *)(v129 - 112);
    v252 = (const char *)*((void *)&v277 + 1);
    v137 = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a1 + 656) + 24LL))( *(void *)(a1 + 656),  v313,  a3);
    if ((v137 & (v314 > 0.0)) != 0) {
      v138 = 1.0 / v314;
    }
    else {
      v138 = -1.0;
    }
    v244 = *(const char **)&v138;
    v246 = *((void *)&v277 + 1);
    v139 = sub_100C70198((uint64_t)v260);
    v140 = sub_100990320(v139, v139);
    v141 = *((void *)&v298 + 1);
    if (*((void *)&v298 + 1) == *(void *)v298) {
      v142 = *(double *)(*(void *)(v298 - 8) + 4896LL);
    }
    else {
      v142 = *(double *)(*((void *)&v298 + 1) - 224LL);
    }
    v143 = 0.0;
    v144 = v131 / v19;
    if (v19 <= 0.0) {
      v144 = 0.0;
    }
    if (*((void *)&v298 + 1) == *(void *)v298)
    {
      v146 = *(void *)(v298 - 8);
      v145 = (uint64_t *)(v146 + 5112);
      v141 = v146 + 5120;
    }

    else
    {
      v145 = (uint64_t *)(*((void *)&v298 + 1) - 8LL);
    }

    v147 = *v145;
    v148 = *(void *)(v141 - 88);
    *(_DWORD *)buf = 136332034;
    *(void *)&buf[4] = "time";
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a3;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&buf[24] = "count";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)v420 = v132;
    *(_WORD *)&v420[4] = 2080;
    v421 = "deltaCount";
    v422 = 1024;
    v423 = v133;
    v424 = 2080;
    v425 = "deltaDist(m)";
    v426 = 2080;
    v427 = "ped";
    v428 = 2048;
    v429 = (const char *)*((void *)&v134 + 1);
    *(_WORD *)v430 = 2080;
    *(void *)&v430[2] = "calPed";
    v431 = 2048;
    v432 = *(const char **)&v19;
    v433 = 2080;
    v434 = "gps";
    v435 = 2048;
    v436 = *(const char **)&v131;
    v437 = 2080;
    v438 = "fused";
    v439 = 2048;
    v440 = (const char *)v134;
    *(_WORD *)v441 = 2080;
    *(void *)&v441[2] = "totalDist(m)";
    v442 = 2080;
    v443 = "calPed";
    v444 = 2048;
    v445 = v135;
    v446 = 2080;
    v447 = "calPedMobility";
    v448 = 2048;
    *(void *)v449 = v136;
    *(_WORD *)&v449[8] = 2080;
    *(void *)&v449[10] = "gps";
    *(_WORD *)&v449[18] = 2048;
    *(double *)&v449[20] = v97;
    *(_WORD *)&v449[28] = 2080;
    *(void *)&v449[30] = "fused";
    *(_WORD *)&v449[38] = 2048;
    *(void *)&v449[40] = v248;
    *(_WORD *)&v449[48] = 2080;
    *(void *)&v449[50] = "usedGps";
    *(_WORD *)&v449[58] = 1024;
    *(_DWORD *)&v449[60] = HIDWORD(v259);
    v450 = 2080;
    v451 = "pace(s/m)";
    v452 = 2080;
    v453 = "ped";
    v454 = 2048;
    v455 = v250;
    v456 = 2080;
    v457 = "calPed";
    v458 = 2048;
    v459 = v18;
    v460 = 2080;
    v461 = "StepDistancePedometerFusedPace";
    v462 = 2048;
    v463 = v252;
    v464 = 2080;
    v465 = "rawGps";
    v466 = 2048;
    v467 = v244;
    v468 = 2080;
    v469 = "StepDistanceFinalFusedPace";
    v470 = 2048;
    v471 = v246;
    v472 = 2080;
    v473 = "StepDistanceUsedOdometerPace";
    v474 = 1024;
    v475 = v140;
    v476 = 2080;
    v477 = "odometerPaceStdError";
    v478 = 2048;
    v479 = v292;
    v480 = 2080;
    v481 = "pedometerPaceStdError";
    v482 = 2048;
    v483 = v293;
    v484 = 2080;
    v485 = "residual";
    v486 = 2048;
    v487 = v292 - v293;
    v488 = 2080;
    v489 = "output";
    v490 = 2048;
    v491 = *((void *)&v277 + 1);
    v492 = 2080;
    v493 = "tolerance";
    v494 = 2048;
    v495 = v101;
    v496 = 2080;
    v497 = "activeTime";
    v498 = 2048;
    v499 = v142;
    v500 = 2080;
    v501 = "averageActivePace";
    v502 = 2048;
    v503 = v143;
    v504 = 2080;
    v505 = "ratio";
    v506 = 2048;
    v507 = v144;
    v508 = 2080;
    v509 = "vehicular";
    v510 = 1024;
    v511 = (int)v257;
    v512 = 2080;
    v513 = "firstStepTime";
    v514 = 2048;
    v515 = v147;
    v516 = 2080;
    v517 = "lastStepTime";
    v518 = 2048;
    v519 = v148;
    v520 = 2080;
    v521 = "pedometerArmConstrainedState";
    v522 = 1024;
    v523 = v282[8];
    v524 = 2080;
    v525 = "distanceSource";
    v526 = 1024;
    v527 = v282[22];
    v528 = 2080;
    v529 = "paceSource";
    v530 = 1024;
    v531 = *(_DWORD *)&v282[24];
    _os_log_impl( (void *)&_mh_execute_header,  v128,  BYTE4(v257),  "unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,% s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4 f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f,%s,%d,%s,%d,%s,%d",  buf,  0x280u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101863518);
    }
    v194 = *((void *)&v298 + 1);
    v195 = *((void *)&v298 + 1);
    if (*((void *)&v298 + 1) == *(void *)v298)
    {
      v195 = *(void *)(v298 - 8) + 5120LL;
      v194 = v195;
    }

    v196 = qword_101934518;
    v197 = v294;
    v251 = DWORD2(v274);
    LODWORD(v252) = *(_DWORD *)(v195 - 104);
    v198 = v275;
    v199 = *(double *)(a1 + 2096);
    v200 = *(void *)(a1 + 2104);
    v201 = *(void *)(a1 + 2088);
    v247 = *((void *)&v277 + 1);
    v249 = *(const char **)(v194 - 112);
    v202 = (*(uint64_t (**)(void, _OWORD *, double))(**(void **)(a1 + 656) + 24LL))( *(void *)(a1 + 656),  v299,  a3);
    else {
      v203 = -1.0;
    }
    v245 = (const char *)*((void *)&v277 + 1);
    v204 = sub_100C70198((uint64_t)v260);
    v205 = sub_100990320(v204, v204);
    v206 = *((void *)&v298 + 1);
    if (*((void *)&v298 + 1) == *(void *)v298) {
      v207 = *(double *)(*(void *)(v298 - 8) + 4896LL);
    }
    else {
      v207 = *(double *)(*((void *)&v298 + 1) - 224LL);
    }
    v223 = 0.0;
    v224 = v197 / v19;
    if (v19 <= 0.0) {
      v224 = 0.0;
    }
    if (*((void *)&v298 + 1) == *(void *)v298)
    {
      v226 = *(void *)(v298 - 8);
      v225 = (uint64_t *)(v226 + 5112);
      v206 = v226 + 5120;
    }

    else
    {
      v225 = (uint64_t *)(*((void *)&v298 + 1) - 8LL);
    }

    v227 = *v225;
    v228 = *(void *)(v206 - 88);
    *(_DWORD *)v313 = 136332034;
    *(void *)&v313[4] = "time";
    *(_WORD *)&v313[12] = 2048;
    *(double *)&v313[14] = a3;
    *(_WORD *)&v313[22] = 2080;
    *(void *)&v313[24] = "count";
    *(_WORD *)&v313[32] = 1024;
    *(_DWORD *)&v313[34] = v251;
    *(_WORD *)&v313[38] = 2080;
    v314 = COERCE_DOUBLE("deltaCount");
    LOWORD(v315) = 1024;
    *(_DWORD *)((char *)&v315 + 2) = (_DWORD)v252;
    HIWORD(v315) = 2080;
    v316 = "deltaDist(m)";
    *(_WORD *)v317 = 2080;
    *(void *)&v317[2] = "ped";
    *(_WORD *)&v317[10] = 2048;
    *(void *)&v317[12] = *((void *)&v198 + 1);
    *(_WORD *)&v317[20] = 2080;
    *(void *)&v317[22] = "calPed";
    *(_WORD *)&v317[30] = 2048;
    v318 = *(const char **)&v19;
    v319 = 2080;
    v320 = "gps";
    v321 = 2048;
    v322 = *(const char **)&v197;
    v323 = 2080;
    v324 = "fused";
    v325 = 2048;
    v326 = (const char *)v198;
    v327 = 2080;
    v328 = "totalDist(m)";
    v329 = 2080;
    v330 = "calPed";
    v331 = 2048;
    v332 = v199;
    v333 = 2080;
    v334 = "calPedMobility";
    v335 = 2048;
    *(void *)v336 = v200;
    *(_WORD *)&v336[8] = 2080;
    *(void *)&v336[10] = "gps";
    *(_WORD *)&v336[18] = 2048;
    *(double *)&v336[20] = v97;
    *(_WORD *)&v336[28] = 2080;
    *(void *)&v336[30] = "fused";
    *(_WORD *)&v336[38] = 2048;
    *(void *)&v336[40] = v201;
    *(_WORD *)&v336[48] = 2080;
    *(void *)&v336[50] = "usedGps";
    *(_WORD *)&v336[58] = 1024;
    *(_DWORD *)&v336[60] = HIDWORD(v259);
    v337 = 2080;
    v338 = "pace(s/m)";
    v339 = 2080;
    v340 = "ped";
    v341 = 2048;
    v342 = v249;
    v343 = 2080;
    v344 = "calPed";
    v345 = 2048;
    v346 = v18;
    v347 = 2080;
    v348 = "StepDistancePedometerFusedPace";
    v349 = 2048;
    v350 = v247;
    v351 = 2080;
    v352 = "rawGps";
    v353 = 2048;
    v354 = v203;
    v355 = 2080;
    v356 = "StepDistanceFinalFusedPace";
    v357 = 2048;
    v358 = v245;
    v359 = 2080;
    v360 = "StepDistanceUsedOdometerPace";
    v361 = 1024;
    v362 = v205;
    v363 = 2080;
    v364 = "odometerPaceStdError";
    v365 = 2048;
    v366 = v292;
    v367 = 2080;
    v368 = "pedometerPaceStdError";
    v369 = 2048;
    v370 = v293;
    v371 = 2080;
    v372 = "residual";
    v373 = 2048;
    v374 = v292 - v293;
    v375 = 2080;
    v376 = "output";
    v377 = 2048;
    v378 = *((void *)&v277 + 1);
    v379 = 2080;
    v380 = "tolerance";
    v381 = 2048;
    v382 = v101;
    v383 = 2080;
    v384 = "activeTime";
    v385 = 2048;
    v386 = v207;
    v387 = 2080;
    v388 = "averageActivePace";
    v389 = 2048;
    v390 = v223;
    v391 = 2080;
    v392 = "ratio";
    v393 = 2048;
    v394 = v224;
    v395 = 2080;
    v396 = "vehicular";
    v397 = 1024;
    v398 = (int)v257;
    v399 = 2080;
    v400 = "firstStepTime";
    v401 = 2048;
    v402 = v227;
    v403 = 2080;
    v404 = "lastStepTime";
    v405 = 2048;
    v406 = v228;
    v407 = 2080;
    v408 = "pedometerArmConstrainedState";
    v409 = 1024;
    v410 = v282[8];
    v411 = 2080;
    v412 = "distanceSource";
    v413 = 1024;
    v414 = v282[22];
    v415 = 2080;
    v416 = "paceSource";
    v417 = 1024;
    v418 = *(_DWORD *)&v282[24];
    LODWORD(v243) = 640;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v196,  HIDWORD(v257),  "unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,% s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4 f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f,%s,%d,%s,%d,%s,%d",  v313,  v243,  v245,  v247,  v249,  v251,  v252,  *(const char **)&v253,  *(double *)&v254,  *(const char **)&v255,  *(double *)&v256,  v257,  *(double *)&v258,  *(const char **)&v259,  *(double *)&v260,  v261,  (const char *)v262.i64[0],  *(double *)&v262.i64[1],  (const char *)v263,  *((double *)&v263 + 1),  (const char *)v264,  *((double *)&v264 + 1),  (const char *)v265,  *((double *)&v265 + 1),  (const char *)v266,  DWORD2(v266),  (const char *)v267.i64[0],  (const char *)v267.i64[1],  *(double *)&v268,  *((const char **)&v268 + 1),  *(double *)&v269,  *((const char **)&v269 + 1),  *(double *)&v270,  *((const char **)&v270 + 1),  *(double *)&v271,  *((const char **)&v271 + 1),  *(double *)&v272,  *((const char **)&v272 + 1),  __src.i32[0],
      (const char *)__src.i64[1],
      *(double *)&v274,
      *((const char **)&v274 + 1),
      *(double *)&v275,
      *((const char **)&v275 + 1),
      *(double *)&v276,
      *((const char **)&v276 + 1),
      *(double *)&v277,
      *((const char **)&v277 + 1),
      *(double *)v278.i64,
      (const char *)v278.i64[1],
      *(double *)theString,
      (const char *)theString[1],
      *(double *)&v280,
      *((const char **)&v280 + 1),
      *(double *)&v281,
      *((const char **)&v281 + 1),
      *(_DWORD *)v282,
      *(const char **)&v282[8],
      *(double *)&v282[16],
      *(const char **)&v282[24],
      v283,
      *(const char **)&v284,
      (_DWORD)v285,
      *((const char **)&v285 + 1),
      (_DWORD)v286,
      *((const char **)&v286 + 1),
      LODWORD(v287[0]));
    v230 = (char *)v229;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v229);
    if (v230 != buf) {
      free(v230);
    }
  }

  v312 = 0LL;
  v310 = 0u;
  v311 = 0u;
  v308 = 0u;
  v309 = 0u;
  v306 = 0u;
  v307 = 0u;
  v304 = 0u;
  v305 = 0u;
  v302 = 0u;
  v303 = 0u;
  v300 = 0u;
  v301 = 0u;
  memset(v299, 0, sizeof(v299));
  sub_1009904C4(a1 + 664, (uint64_t)v299);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101863518);
  }
  v149 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, BYTE4(v257)))
  {
    v150 = sub_100832C0C((uint64_t)v260);
    v151 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)buf = 134219264;
    *(double *)&buf[4] = a3;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v150;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v151;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = HIDWORD(v261);
    *(_WORD *)v420 = 1024;
    *(_DWORD *)&v420[2] = LODWORD(v259);
    LOWORD(v421) = 1024;
    *(_DWORD *)((char *)&v421 + 2) = v307;
    _os_log_impl( (void *)&_mh_execute_header,  v149,  BYTE4(v257),  "unified2,time,%f,odometerSmoothMeanPace,%.3f,estimatedOdometerQuality,%d,odometerFusionQuality,%d,odometerFusionRe jectionReason,%d,activityType,%d",  buf,  0x2Eu);
  }

  v152 = (char *)v258;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101863518);
    }
    v208 = qword_101934518;
    v209 = sub_100832C0C((uint64_t)v260);
    v210 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)v313 = 134219264;
    *(double *)&v313[4] = a3;
    *(_WORD *)&v313[12] = 2048;
    *(double *)&v313[14] = v209;
    *(_WORD *)&v313[22] = 1024;
    *(_DWORD *)&v313[24] = v210;
    *(_WORD *)&v313[28] = 1024;
    *(_DWORD *)&v313[30] = HIDWORD(v261);
    *(_WORD *)&v313[34] = 1024;
    *(_DWORD *)&v313[36] = LODWORD(v259);
    LOWORD(v314) = 1024;
    *(_DWORD *)((char *)&v314 + 2) = v307;
    LODWORD(v243) = 46;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v208,  HIDWORD(v257),  "unified2,time,%f,odometerSmoothMeanPace,%.3f,estimatedOdometerQuality,%d,odometerFusionQuality,%d,odometerFusionRe jectionReason,%d,activityType,%d",  COERCE_DOUBLE(v313),  v243,  (_DWORD)v244,  v246,  (_DWORD)v248,  v250);
    v212 = (char *)v211;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v211);
    if (v212 != buf) {
      free(v212);
    }
    v152 = (char *)v258;
  }

  v270 = v281;
  v271 = *(_OWORD *)v282;
  v272 = *(_OWORD *)&v282[16];
  v266 = v277;
  v267 = v278;
  v268 = *(_OWORD *)theString;
  v269 = v280;
  v262 = __src;
  v263 = v274;
  v264 = v275;
  v265 = v276;
  v153 = *((void *)v152 + 2);
  v154 = *((void *)v152 + 1);
  if (v154 >= v153)
  {
    v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - *(void *)v152) >> 6);
    if (v156 + 1 > 0x155555555555555LL) {
      sub_100007008();
    }
    v157 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - *(void *)v152) >> 6);
    v158 = 2 * v157;
    if (2 * v157 <= v156 + 1) {
      v158 = v156 + 1;
    }
    if (v157 >= 0xAAAAAAAAAAAAAALL) {
      v159 = 0x155555555555555LL;
    }
    else {
      v159 = v158;
    }
    if (v159)
    {
      v160 = (char *)sub_10001DF10((uint64_t)(v152 + 16), v159);
      v152 = (char *)v258;
    }

    else
    {
      v160 = 0LL;
    }

    v161 = &v160[192 * v156];
    v162 = &v160[192 * v159];
    *((_OWORD *)v161 + 7) = v269;
    *((_OWORD *)v161 + 8) = v270;
    *((_OWORD *)v161 + 9) = v271;
    *((_OWORD *)v161 + 10) = v272;
    *((_OWORD *)v161 + 3) = v265;
    *((_OWORD *)v161 + 4) = v266;
    *((int8x16_t *)v161 + 5) = v267;
    *((_OWORD *)v161 + 6) = v268;
    *(int8x16_t *)v161 = v262;
    *((_OWORD *)v161 + 1) = v263;
    *((_OWORD *)v161 + 2) = v264;
    *((double *)v161 + 22) = v255;
    v161[184] = BYTE4(v256);
    v161[185] = (char)v256;
    *(_DWORD *)(v161 + 186) = v290;
    *((_WORD *)v161 + 95) = v291;
    v155 = v161 + 192;
    v164 = *(char **)v152;
    v163 = (char *)*((void *)v152 + 1);
    if (v163 != *(char **)v152)
    {
      do
      {
        v165 = *((_OWORD *)v163 - 12);
        v166 = *((_OWORD *)v163 - 11);
        v167 = *((_OWORD *)v163 - 9);
        *((_OWORD *)v161 - 10) = *((_OWORD *)v163 - 10);
        *((_OWORD *)v161 - 9) = v167;
        *((_OWORD *)v161 - 12) = v165;
        *((_OWORD *)v161 - 11) = v166;
        v168 = *((_OWORD *)v163 - 8);
        v169 = *((_OWORD *)v163 - 7);
        v170 = *((_OWORD *)v163 - 5);
        *((_OWORD *)v161 - 6) = *((_OWORD *)v163 - 6);
        *((_OWORD *)v161 - 5) = v170;
        *((_OWORD *)v161 - 8) = v168;
        *((_OWORD *)v161 - 7) = v169;
        v171 = *((_OWORD *)v163 - 4);
        v172 = *((_OWORD *)v163 - 3);
        v173 = *((_OWORD *)v163 - 1);
        *((_OWORD *)v161 - 2) = *((_OWORD *)v163 - 2);
        *((_OWORD *)v161 - 1) = v173;
        *((_OWORD *)v161 - 4) = v171;
        *((_OWORD *)v161 - 3) = v172;
        v161 -= 192;
        v163 -= 192;
      }

      while (v163 != v164);
      v163 = *(char **)v152;
    }

    *(void *)v152 = v161;
    *((void *)v152 + 1) = v155;
    *((void *)v152 + 2) = v162;
    if (v163) {
      operator delete(v163);
    }
  }

  else
  {
    memmove(*((void **)v152 + 1), &__src, 0xB0uLL);
    *(double *)(v154 + 176) = v255;
    *(_BYTE *)(v154 + 184) = BYTE4(v256);
    *(_BYTE *)(v154 + 185) = (_BYTE)v256;
    *(_DWORD *)(v154 + 186) = v290;
    *(_WORD *)(v154 + 190) = v291;
    v155 = (char *)(v154 + 192);
  }

  *((void *)v152 + 1) = v155;
  v174 = (double *)*((void *)&v298 + 1);
  v175 = *((void *)&v298 + 1);
  if (*((void *)&v298 + 1) == *(void *)v298) {
    v175 = *(void *)(v298 - 8) + 5120LL;
  }
  if (!*(_DWORD *)(v175 - 104)) {
    goto LABEL_257;
  }
  if ((BYTE4(v253) & 1) != 0) {
    goto LABEL_244;
  }
  if (*((void *)&v298 + 1) == *(void *)v298)
  {
    v177 = *(double **)(v298 - 8);
    if (v177[606] < 0.5722112) {
      goto LABEL_244;
    }
    if (v177[632] < 0.5722112) {
      goto LABEL_244;
    }
    if (v177[616] > 4.47387258) {
      goto LABEL_244;
    }
    v176 = *((double *)&v277 + 1);
    v174 = v177 + 640;
  }

  else
  {
    v176 = *((double *)&v277 + 1);
  }

  if (*(v174 - 24) != 0.0 && v176 == 0.0)
  {
LABEL_244:
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101863518);
    }
    v178 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      if (*((void *)&v298 + 1) == *(void *)v298)
      {
        v183 = *(void *)(v298 - 8);
        v179 = (int *)(v183 + 4832);
        v180 = (int *)(v183 + 5016);
        v181 = (const char **)(v183 + 4848);
        v182 = v183 + 5120;
      }

      else
      {
        v179 = (int *)(*((void *)&v298 + 1) - 288LL);
        v180 = (int *)(*((void *)&v298 + 1) - 104LL);
        v181 = (const char **)(*((void *)&v298 + 1) - 272LL);
        v182 = *((void *)&v298 + 1);
      }

      v184 = *v180;
      v185 = *v179;
      v186 = *v181;
      v187 = *(void *)(v182 - 64);
      if (*((void *)&v298 + 1) == *(void *)v298)
      {
        v191 = *(void *)(v298 - 8);
        v188 = *(void *)(v191 + 5008);
        v189 = *(void *)(v191 + 4928);
        v190 = *(double *)(v191 + 5040);
      }

      else
      {
        v188 = *(void *)(*((void *)&v298 + 1) - 112LL);
        v189 = *(void *)(*((void *)&v298 + 1) - 192LL);
        v190 = *(double *)(*((void *)&v298 + 1) - 80LL);
      }

      v192 = 0.0;
      if (v190 != 0.0) {
        v192 = 1.0 / v190;
      }
      *(_DWORD *)buf = 136322050;
      *(void *)&buf[4] = "time";
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&buf[24] = "count";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)v420 = v185;
      *(_WORD *)&v420[4] = 2080;
      v421 = "deltaCount";
      v422 = 1024;
      v423 = v184;
      v424 = 2080;
      v425 = "rawDistance";
      v426 = 2048;
      v427 = v186;
      v428 = 2080;
      v429 = "calDistance";
      *(_WORD *)v430 = 2048;
      *(void *)&v430[2] = v187;
      v431 = 2080;
      v432 = "odomDistance";
      v433 = 2048;
      v434 = *(const char **)&v294;
      v435 = 2080;
      v436 = "fusedDistance";
      v437 = 2048;
      v438 = (const char *)v275;
      v439 = 2080;
      v440 = "odometerDistanceForSlowPaceCheckWindow";
      *(_WORD *)v441 = 2048;
      *(double *)&v441[2] = v284;
      v442 = 2080;
      v443 = "pedometerRawDistanceForSlowPaceCheckWindow";
      v444 = 2048;
      v445 = v43;
      v446 = 2080;
      v447 = "odometerError";
      v448 = 1024;
      *(_DWORD *)v449 = HIDWORD(v253);
      *(_WORD *)&v449[4] = 2080;
      *(void *)&v449[6] = "rawPace";
      *(_WORD *)&v449[14] = 2048;
      *(void *)&v449[16] = v188;
      *(_WORD *)&v449[24] = 2080;
      *(void *)&v449[26] = "calPace";
      *(_WORD *)&v449[34] = 2048;
      *(void *)&v449[36] = v189;
      *(_WORD *)&v449[44] = 2080;
      *(void *)&v449[46] = "odomPace";
      *(_WORD *)&v449[54] = 2048;
      *(double *)&v449[56] = v192;
      v450 = 2080;
      v451 = "fusedPace";
      v452 = 2048;
      v453 = (const char *)*((void *)&v277 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_DEFAULT,  "#Warning Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, % u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f",  buf,  0x10Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      if (*((void *)&v298 + 1) == *(void *)v298)
      {
        v231 = *(void *)(v298 - 8);
        v213 = (int *)(v231 + 4832);
        v214 = (int *)(v231 + 5016);
        v215 = (uint64_t *)(v231 + 4848);
        v216 = v231 + 5120;
      }

      else
      {
        v213 = (int *)(*((void *)&v298 + 1) - 288LL);
        v214 = (int *)(*((void *)&v298 + 1) - 104LL);
        v215 = (uint64_t *)(*((void *)&v298 + 1) - 272LL);
        v216 = *((void *)&v298 + 1);
      }

      v232 = *v214;
      v233 = *v213;
      v234 = *v215;
      v235 = *(void *)(v216 - 64);
      if (*((void *)&v298 + 1) == *(void *)v298)
      {
        v239 = *(void *)(v298 - 8);
        v236 = *(void *)(v239 + 5008);
        v237 = *(void *)(v239 + 4928);
        v238 = *(double *)(v239 + 5040);
      }

      else
      {
        v236 = *(void *)(*((void *)&v298 + 1) - 112LL);
        v237 = *(void *)(*((void *)&v298 + 1) - 192LL);
        v238 = *(double *)(*((void *)&v298 + 1) - 80LL);
      }

      v240 = 0.0;
      if (v238 != 0.0) {
        v240 = 1.0 / v238;
      }
      *(_DWORD *)v313 = 136322050;
      *(void *)&v313[4] = "time";
      *(_WORD *)&v313[12] = 2048;
      *(double *)&v313[14] = a3;
      *(_WORD *)&v313[22] = 2080;
      *(void *)&v313[24] = "count";
      *(_WORD *)&v313[32] = 1024;
      *(_DWORD *)&v313[34] = v233;
      *(_WORD *)&v313[38] = 2080;
      v314 = COERCE_DOUBLE("deltaCount");
      LOWORD(v315) = 1024;
      *(_DWORD *)((char *)&v315 + 2) = v232;
      HIWORD(v315) = 2080;
      v316 = "rawDistance";
      *(_WORD *)v317 = 2048;
      *(void *)&v317[2] = v234;
      *(_WORD *)&v317[10] = 2080;
      *(void *)&v317[12] = "calDistance";
      *(_WORD *)&v317[20] = 2048;
      *(void *)&v317[22] = v235;
      *(_WORD *)&v317[30] = 2080;
      v318 = "odomDistance";
      v319 = 2048;
      v320 = *(const char **)&v294;
      v321 = 2080;
      v322 = "fusedDistance";
      v323 = 2048;
      v324 = (const char *)v275;
      v325 = 2080;
      v326 = "odometerDistanceForSlowPaceCheckWindow";
      v327 = 2048;
      v328 = *(const char **)&v284;
      v329 = 2080;
      v330 = "pedometerRawDistanceForSlowPaceCheckWindow";
      v331 = 2048;
      v332 = v43;
      v333 = 2080;
      v334 = "odometerError";
      v335 = 1024;
      *(_DWORD *)v336 = HIDWORD(v253);
      *(_WORD *)&v336[4] = 2080;
      *(void *)&v336[6] = "rawPace";
      *(_WORD *)&v336[14] = 2048;
      *(void *)&v336[16] = v236;
      *(_WORD *)&v336[24] = 2080;
      *(void *)&v336[26] = "calPace";
      *(_WORD *)&v336[34] = 2048;
      *(void *)&v336[36] = v237;
      *(_WORD *)&v336[44] = 2080;
      *(void *)&v336[46] = "odomPace";
      *(_WORD *)&v336[54] = 2048;
      *(double *)&v336[56] = v240;
      v337 = 2080;
      v338 = "fusedPace";
      v339 = 2048;
      v340 = (const char *)*((void *)&v277 + 1);
      LODWORD(v243) = 270;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "#Warning Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, % u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f",  v313,  v243,  v244,  v246,  v248,  v250,  v252,  v253,  v254->i8,  v255,  v256,  *(double *)&v257,  v258,  v259,  v260,  *(double *)&v261,  (const char *)v262.i64[0],  *(double *)&v262.i64[1],  (const char *)v263,  DWORD2(v263),  (const char *)v264,  *((double *)&v264 + 1),  (const char *)v265,  *((double *)&v265 + 1),  (const char *)v266,  *((double *)&v266 + 1),  (const char *)v267.i64[0],  *(double *)&v267.i64[1]);
      v242 = (char *)v241;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v241);
      if (v242 != buf) {
        free(v242);
      }
    }
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_100;
  }
  if ((v3 & 0x100) == 0)
  {
    if ((v3 & 0x200) == 0) {
      goto LABEL_60;
    }
LABEL_68:
    int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
    if ((v27 & 0x80000000) != 0)
    {
      uint64_t v28 = 11;
    }

    else if (v27 >= 0x80)
    {
      uint64_t v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 116);
    }

    else
    {
      uint64_t v28 = 2;
    }

    v4 += v28;
    if ((v3 & 0x400) == 0) {
      goto LABEL_80;
    }
    goto LABEL_74;
  }

  int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v25 & 0x80000000) != 0)
  {
    int v26 = 11;
  }

  else if (v25 >= 0x80)
  {
    int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 116);
  }

  else
  {
    int v26 = 2;
  }

  v4 += v26;
  if ((v3 & 0x200) != 0) {
    goto LABEL_68;
  }
LABEL_60:
  if ((v3 & 0x400) != 0)
  {
LABEL_74:
    unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v29 & 0x80000000) != 0)
    {
      unsigned int v30 = 11;
    }

    else if (v29 >= 0x80)
    {
      unsigned int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 116);
    }

    else
    {
      unsigned int v30 = 2;
    }

    v4 += v30;
  }

  *(_DWORD *)(a1 + 112) |= 0x800u;
  int v23 = *(_DWORD **)(a1 + 88);
  if (!v23)
  {
    int v23 = operator new(0x28uLL);
    v23[7] = 0;
    v23[8] = 0;
    *((void *)v23 + 1) = 0LL;
    *((void *)v23 + 2) = 0LL;
    *(void *)int v23 = off_101869050;
    *((_BYTE *)v23 + 24) = 0;
    *(void *)(a1 + 88) = v23;
  }

  uint64_t v24 = *(void *)(a2 + 88);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_1019A1A90 + 88);
  }
  sub_100A4797C((uint64_t)v23, v24);
  uint64_t v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x1000) != 0) {
    goto LABEL_62;
  }
LABEL_47:
  if ((v5 & 0x2000) == 0) {
    return;
  }
LABEL_63:
  *(_DWORD *)(a1 + 112) |= 0x2000u;
  int v26 = *(_DWORD **)(a1 + 96);
  if (!v26)
  {
    int v26 = operator new(0x28uLL);
    v26[7] = 0;
    v26[8] = 0;
    *((void *)v26 + 1) = 0LL;
    *((void *)v26 + 2) = 0LL;
    *(void *)int v26 = off_1018690C8;
    *((_WORD *)v26 + 12) = 0;
    *(void *)(a1 + 96) = v26;
  }

  int v27 = *(void *)(a2 + 96);
  if (!v27) {
    int v27 = *(void *)(qword_1019A1A90 + 96);
  }
  sub_100A47DD0((uint64_t)v26, v27);
}

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_74;
  }
  if ((v3 & 0x100) != 0)
  {
    int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
    if (v19 >= 0x80)
    {
      uint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      int v3 = a1[14];
    }

    else
    {
      uint64_t v20 = 2;
    }

    unsigned int v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_60:
      if ((v3 & 0x400) == 0) {
        goto LABEL_74;
      }
      goto LABEL_70;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_60;
  }

  BOOL v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
  if (v21 >= 0x80)
  {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    int v3 = a1[14];
  }

  else
  {
    int v22 = 2;
  }

  unsigned int v4 = (v22 + v4);
  if ((v3 & 0x400) != 0)
  {
LABEL_70:
    int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
    else {
      uint64_t v24 = 2;
    }
    unsigned int v4 = (v24 + v4);
  }

  if (*(_DWORD *)(v19 + 1596) == 2)
  {
    int v54 = 0;
    uint64_t result = 0LL;
    int v55 = 0;
    unsigned int v56 = 0.0;
    int v57 = 0LL;
  }

  else
  {
    int v58 = v19 + 896;
    int v57 = *(void *)(v19 + 928);
    unsigned int v56 = sub_1007BBFE8(v19 + 896);
    int v54 = sub_100E5C7EC(v19 + 1640) != 0;
    uint64_t result = sub_1007BBFB0(v58);
    int v55 = v54 || v23;
  }

  *(_BYTE *)a5 = v55;
  *(void *)(a5 + 8) = v57;
  *(float *)(a5 + 16) = v56;
  *(_BYTE *)(a5 + 20) = v54;
  *(_BYTE *)(a5 + 21) = result;
  *(_WORD *)(a5 + 22) = 0;
  return result;
}

  -[CalTrackFinder _closeCurrentTrack](self, "_closeCurrentTrack");
}

    operator delete(__p[0]);
    if ((v60 & 0x8000000000000000LL) == 0)
    {
LABEL_45:
      if (!v37) {
        goto LABEL_59;
      }
      goto LABEL_46;
    }

        sub_1010DDBC0(__p, "com.apple.locationd.spectator");
        unsigned int v29 = sub_100C6AC9C(a1);
        unsigned int v30 = v29;
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (v30) {
            goto LABEL_59;
          }
        }

        else if (v29)
        {
LABEL_59:
          if (v126 == 2147483650.0)
          {
            int v31 = 0;
            int v32 = 4LL;
LABEL_87:
            int v39 = 1;
LABEL_88:
            *(_BYTE *)(a1 + 57) = v31 | [*(id *)(a1 + 16) isAuthorizedForServiceType:12] ^ 1;
            if ((_DWORD)v32)
            {
              sub_100DBA374(a1, 0LL);
              if (*(_BYTE *)(a1 + 241))
              {
                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_101883130);
                }
                v41 = (os_log_s *)qword_101934978;
                if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
                {
                  v42 = *(void *)(a1 + 24);
                  *(void *)__p = 68289282LL;
                  *(_WORD *)&__p[8] = 2082;
                  *(void *)&__p[10] = "";
                  *(_WORD *)&__p[18] = 2114;
                  *(void *)&__p[20] = v42;
                  _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:BATCH: stop because accuracy changed, Client:%{public, location:escape_only}@}",  __p,  0x1Cu);
                }

                sub_100DB8CA4(a1, 13LL);
              }

              if ((_DWORD)v32 != 1)
              {
                sub_100DBA374(a1, 1LL);
                if ((_DWORD)v32 != 2)
                {
                  sub_100DBA374(a1, 2LL);
                  if ((_DWORD)v32 != 4)
                  {
                    sub_100DBA374(a1, 4LL);
                    if ((_DWORD)v32 != 5)
                    {
                      sub_100DBA374(a1, 5LL);
                      if ((_DWORD)v32 == 22)
                      {
LABEL_106:
                        sub_100DBA374(a1, 39LL);
LABEL_107:
                        if (!v39)
                        {
                          sub_100DB7ABC((id **)(a1 + 512), 0LL);
                          return;
                        }

                        int v44 = (uint64_t *)(a1 + 512);
                        if (sub_100C6AE10(a1))
                        {
                          sub_100DB7ABC((id **)(a1 + 512), 0LL);
                        }

                        else
                        {
                          int v45 = *v44;
                          if (*v44)
                          {
                            if (*(double *)(v45 + 40) != v126)
                            {
                              sub_100DAF6B8(*v44);
                              *(double *)(v45 + 40) = v126;
                            }
                          }

                          else
                          {
                            *(void *)v132 = [*(id *)(a1 + 24) legacyClientKey];
                            sub_100DBA3BC((id *)v132, (void **)(a1 + 16), (uint64_t *)&v126, __p);
                            int v46 = *(id **)__p;
                            *(void *)__p = 0LL;
                            sub_100DB7ABC((id **)(a1 + 512), v46);
                            unsigned int v47 = *(id **)__p;
                            *(void *)__p = 0LL;
                            if (v47)
                            {
                              int v48 = sub_100DAF688(v47);
                              operator delete(v48);
                            }
                          }
                        }

                        if (qword_101934970 != -1) {
                          dispatch_once(&qword_101934970, &stru_101883130);
                        }
                        int v49 = (os_log_s *)qword_101934978;
                        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
                        {
                          v50 = sub_10100D9D8(v32);
                          *(_DWORD *)__p = 67109634;
                          *(_DWORD *)&__p[4] = v32;
                          *(_WORD *)&__p[8] = 2080;
                          *(void *)&__p[10] = v50;
                          *(_WORD *)&__p[18] = 2048;
                          *(double *)&__p[20] = v126;
                          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "register for notification, %d, %s, desiredAccuracy, %.1f",  __p,  0x1Cu);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(__p, 0x65CuLL);
                          if (qword_101934970 != -1) {
                            dispatch_once(&qword_101934970, &stru_101883130);
                          }
                          v101 = qword_101934978;
                          v102 = sub_10100D9D8(v32);
                          *(_DWORD *)v132 = 67109634;
                          *(_DWORD *)&v132[4] = v32;
                          *(_WORD *)&v132[8] = 2080;
                          *(void *)&v132[10] = v102;
                          *(_WORD *)&v132[18] = 2048;
                          *(double *)&v132[20] = v126;
                          LODWORD(v112) = 28;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v101,  2LL,  "register for notification, %d, %s, desiredAccuracy, %.1f",  v132,  v112,  v113);
                          v104 = (char *)v103;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationSubscription::startLocation_nl()",  "%s\n",  v103);
                          if (v104 != __p) {
                            free(v104);
                          }
                        }

                        *(double *)(a1 + 304) = v126;
                        *(CFAbsoluteTime *)(a1 + 208) = CFAbsoluteTimeGetCurrent();
                        *(_DWORD *)(a1 + 196) = v32;
                        *(void *)&v122 = 0xBFF0000000000000LL;
                        *((double *)&v122 + 1) = v22;
                        v123 = 0;
                        v124 = 0;
                        v125 = 0;
                        sub_100DBA454(a1, v32, &v122);
                        sub_100DB4080(a1);
                        sub_100DB3FBC(a1);
                        if (*(_BYTE *)(a1 + 241) && v22 > 0.0)
                        {
                          if (qword_101934970 != -1) {
                            dispatch_once(&qword_101934970, &stru_101883130);
                          }
                          v51 = (os_log_s *)qword_101934978;
                          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
                          {
                            v52 = *(void *)(a1 + 24);
                            *(void *)__p = 68289282LL;
                            *(_WORD *)&__p[8] = 2082;
                            *(void *)&__p[10] = "";
                            *(_WORD *)&__p[18] = 2114;
                            *(void *)&__p[20] = v52;
                            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:BATCH: stop because distance filtered, Client:%{public, locat ion:escape_only}@}",  __p,  0x1Cu);
                          }

                          sub_100DB8CA4(a1, 14LL);
                        }

                        if (*(_BYTE *)(a1 + 57))
                        {
                          int v53 = sub_100DAF894(a1);
                          [*(id *)(*(void *)v53 + 16) unregister:*(void *)(*(void *)v53 + 8) forNotification:8];
                          int v54 = sub_100DAF894(a1);
                          [*(id *)(*(void *)v54 + 16) unregister:*(void *)(*(void *)v54 + 8) forNotification:17];
                          int v55 = sub_100DAF894(a1);
                          [*(id *)(*(void *)v55 + 16) unregister:*(void *)(*(void *)v55 + 8) forNotification:34];
                          unsigned int v56 = sub_100DAF894(a1);
                          [*(id *)(*(void *)v56 + 16) unregister:*(void *)(*(void *)v56 + 8) forNotification:35];
                          int v57 = 0;
                        }

                        else
                        {
                          int v58 = v126 < -1.0;
                          v59 = sub_100DAF894(a1);
                          v61 = *(void *)(*(void *)v59 + 8LL);
                          v60 = *(void **)(*(void *)v59 + 16LL);
                          if (v58) {
                            [v60 register:v61 forNotification:8 registrationInfo:0];
                          }
                          else {
                            [v60 unregister:v61 forNotification:8];
                          }
                          int v57 = v126 < 100.0 && (*(unsigned __int8 *)(a1 + 194) | *(unsigned __int8 *)(a1 + 193)) != 0;
                          int v63 = sub_100DAF894(a1);
                          unsigned int v65 = *(void *)(*(void *)v63 + 8LL);
                          int v64 = *(void **)(*(void *)v63 + 16LL);
                          if (v57) {
                            [v64 register:v65 forNotification:17 registrationInfo:0];
                          }
                          else {
                            [v64 unregister:v65 forNotification:17];
                          }
                          sub_100DBA4EC(a1, v126 <= -1.0);
                          int v66 = *(_DWORD *)(a1 + 232);
                          int v67 = (v66 == 4 || v66 == 2)
                             && ([*(id *)(a1 + 16) inUseLevelIsAtLeast:5] & 1) != 0;
                          sub_100DB9FB8(a1, v67);
                        }

                        __asm { FMOV            V0.2D, #-1.0 }

                        v118 = _Q0;
                        v119 = 0;
                        v120 = 0;
                        v121 = 0;
                        sub_100DBA454(a1, 9LL, &v118);
                        if (qword_101934970 != -1) {
                          dispatch_once(&qword_101934970, &stru_101883130);
                        }
                        v72 = (os_log_s *)qword_101934978;
                        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
                        {
                          v73 = *(void *)(a1 + 24);
                          v74 = *(_DWORD *)(a1 + 44);
                          v75 = sub_1000F0F58(a1);
                          v76 = *(unsigned __int8 *)(a1 + 193);
                          *(_DWORD *)__p = 138413570;
                          *(void *)&__p[4] = v73;
                          *(_WORD *)&__p[12] = 1024;
                          *(_DWORD *)&__p[14] = v74;
                          *(_WORD *)&__p[18] = 2048;
                          *(void *)&__p[20] = v75;
                          v140 = 1024;
                          *(_DWORD *)v141 = v76;
                          *(_WORD *)&v141[4] = 2048;
                          *(double *)&v141[6] = v126;
                          *(_WORD *)&v141[14] = 1024;
                          *(_DWORD *)&v141[16] = v57;
                          _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "CLMM,Client,'%@',pid,%u,DC,%p,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d",  __p,  0x32u);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(__p, 0x65CuLL);
                          if (qword_101934970 != -1) {
                            dispatch_once(&qword_101934970, &stru_101883130);
                          }
                          v105 = qword_101934978;
                          v106 = *(void *)(a1 + 24);
                          v107 = *(_DWORD *)(a1 + 44);
                          v108 = sub_1000F0F58(a1);
                          v109 = *(unsigned __int8 *)(a1 + 193);
                          *(_DWORD *)v132 = 138413570;
                          *(void *)&v132[4] = v106;
                          *(_WORD *)&v132[12] = 1024;
                          *(_DWORD *)&v132[14] = v107;
                          *(_WORD *)&v132[18] = 2048;
                          *(void *)&v132[20] = v108;
                          v133 = 1024;
                          v134 = v109;
                          v135 = 2048;
                          v136 = v126;
                          v137 = 1024;
                          v138 = v57;
                          LODWORD(v112) = 50;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v105,  0LL,  "CLMM,Client,'%@',pid,%u,DC,%p,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d",  v132,  v112);
                          v111 = (char *)v110;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationSubscription::startLocation_nl()",  "%s\n",  v110);
                          if (v111 != __p) {
                            free(v111);
                          }
                        }

                        *(void *)(a1 + 216) = 0LL;
                        if (v18 > 0.0 || v126 >= 1000.0 && v126 <= 6383135.0)
                        {
                          if (qword_101934970 != -1) {
                            dispatch_once(&qword_101934970, &stru_101883130);
                          }
                          v77 = (os_log_s *)qword_101934978;
                          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
                          {
                            v78 = *(void *)(a1 + 24);
                            *(void *)__p = 68289282LL;
                            *(_WORD *)&__p[8] = 2082;
                            *(void *)&__p[10] = "";
                            *(_WORD *)&__p[18] = 2114;
                            *(void *)&__p[20] = v78;
                            _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#provisional force intermediation - high dF or acc(#cblsPowerSaver) , Client:%{public, location:escape_only}@}",  __p,  0x1Cu);
                          }

                          v79 = (void *)sub_100DBA52C(a1);
                          v80 = [*(id *)(a1 + 24) legacyClientKey];
                          v117[0] = _NSConcreteStackBlock;
                          v117[1] = 3221225472LL;
                          v117[2] = sub_100DBA598;
                          v117[3] = &unk_101882F70;
                          v117[4] = a1;
                          [v79 handleProvisionalIntermediationForService:5 forClientKey:v80 at:0 withReply:v117];
                        }

                        if (v32 <= 0x27 && ((1LL << v32) & 0x8000400030LL) != 0
                          || sub_100DBA698(a1))
                        {
                          sub_100DB803C(a1, 1);
                          v82 = *(_DWORD *)(a1 + 184);
                          v81 = *(_DWORD *)(a1 + 188);
                          if (v82 < 5)
                          {
                            if (v81 != 2 && (v82 != 2 || v81 != 3)) {
                              goto LABEL_170;
                            }
                          }

                          else if (v81 == 1)
                          {
                            goto LABEL_170;
                          }

                          sub_100DB7EA8(a1);
                          goto LABEL_170;
                        }

                        if (v126 < 110.0)
                        {
                          v92 = sub_10100D9D8(v32);
                          *(void *)(a1 + 216) = sub_100DB9FF8((const void *)a1, v92);
                        }

                        sub_100DB5EEC(a1, 1);
                        v94 = *(_DWORD *)(a1 + 184);
                        v93 = *(_DWORD *)(a1 + 188);
                        if (v94 < 5)
                        {
                          if (v93 != 2 && (v94 != 2 || v93 != 3)) {
                            goto LABEL_195;
                          }
                        }

                        else if (v93 == 1)
                        {
                          goto LABEL_195;
                        }

                        if (sub_100DB7AE8(a1)) {
                          sub_100DB7C0C(a1);
                        }
LABEL_195:
                        if (!sub_100C6AE10(a1))
                        {
LABEL_171:
                          if (qword_101934970 != -1) {
                            dispatch_once(&qword_101934970, &stru_101883130);
                          }
                          v83 = (os_log_s *)qword_101934978;
                          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
                          {
                            v84 = *(void *)(a1 + 24);
                            v85 = sub_1000F0F58(a1);
                            v86 = *(unsigned __int8 *)(a1 + 58);
                            *(void *)__p = 68289794LL;
                            *(_WORD *)&__p[8] = 2082;
                            *(void *)&__p[10] = "";
                            *(_WORD *)&__p[18] = 2114;
                            *(void *)&__p[20] = v84;
                            v140 = 2050;
                            *(void *)v141 = v85;
                            *(_WORD *)&v141[8] = 1026;
                            *(_DWORD *)&v141[10] = v86;
                            _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#cblsPowerSaver starting metric session (LocationUpdateSession), Client:%{public, location:escape_only}@, DC:%{public}p, LossTrackingEnabled:%{public}hhd}",  __p,  0x2Cu);
                          }

                          Current = CFAbsoluteTimeGetCurrent();
                          *(_BYTE *)(a1 + 312) = 1;
                          *(double *)(a1 + 384) = v126;
                          *(double *)(a1 + 392) = v22;
                          *(CFAbsoluteTime *)(a1 + 320) = Current;
                          sub_100C6AE50(a1, __p);
                          v88 = (void **)(a1 + 328);
                          *(_OWORD *)v88 = *(_OWORD *)__p;
                          *(void *)(a1 + 344) = *(void *)&__p[16];
                          sub_1002B68E8(a1 + 552, __p);
                          v89 = *(void **)(a1 + 8);
                          v114[0] = _NSConcreteStackBlock;
                          v114[1] = 3321888768LL;
                          v114[2] = sub_100DBA9C8;
                          v114[3] = &unk_101882F90;
                          v114[4] = a1;
                          v114[5] = *(void *)__p;
                          v115 = *(std::__shared_weak_count **)&__p[8];
                          if (*(void *)&__p[8])
                          {
                            v90 = (unint64_t *)(*(void *)&__p[8] + 16LL);
                            do
                              v91 = __ldxr(v90);
                            while (__stxr(v91 + 1, v90));
                          }

                          v116 = Current;
                          sub_1004DDF18(v89, (uint64_t)v114);
                          if (v115) {
                            std::__shared_weak_count::__release_weak(v115);
                          }
                          if (*(void *)&__p[8]) {
                            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
                          }
                          return;
                        }

  int v35 = *(void *)(a1 + 64);
  if (!v35) {
    int v35 = *(void *)(qword_1019A20E0 + 64);
  }
  int v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E3EC9C(v35);
  unsigned int v38 = (int)v36;
  else {
    int v39 = 1;
  }
  unsigned int v4 = (v4 + v38 + v39 + 1);
  if ((*(_DWORD *)(a1 + 84) & 0x100) != 0)
  {
LABEL_63:
    int v40 = *(void *)(a1 + 72);
    if (!v40) {
      int v40 = *(void *)(qword_1019A20E0 + 72);
    }
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E3F088(v40);
    v43 = (int)v41;
    else {
      int v44 = 1;
    }
    unsigned int v4 = (v4 + v43 + v44 + 1);
  }

  v82 = a1[2].u64[0];
  v83 = a1->i64[1];
  v84 = (void *)(v83 + 8 * (v82 / 0x17));
  if (a1[1].i64[0] == v83) {
    v85 = 0LL;
  }
  else {
    v85 = *v84 + 176 * (v82 % 0x17);
  }
  v88 = v84;
  v89 = v85;
  sub_1005A83FC(&v88, v11);
  return v88;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 152), 0x13u);
  unsigned int v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000LL) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }

  int v15 = *(void *)(a2 + 352);
  v5 |= 0x80000000000uLL;
  *int v2 = v5;
  *(void *)(a1 + 352) = v15;
  unsigned int v4 = *v3;
  if ((*v3 & 0x100000000000LL) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfNumberOfPeaksFFT", *(void *)(a1 + 80));
  int v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 360), 0x32u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }

  int v15 = *(_DWORD *)(a2 + 144);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 144) = v15;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "numCyclingEpochs", *(_DWORD *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 0x14u);
  unsigned int v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }

  int v32 = *(_BYTE *)(a2 + 395);
  v10 |= 0x80000000;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 395) = v32;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }

  uint64_t result = *(float *)(a2 + 172);
  v3 |= 0x4000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 172) = result;
  int v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80000000000LL) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "aopTsNow", *(void *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 192), 7u);
  unsigned int v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000000LL) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_59;
  }

  unsigned int v29 = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 212) |= 0x2000000u;
  *(_DWORD *)(a1 + 196) = v29;
  int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "nAccelGap", *(_DWORD *)(a1 + 148));
  uint64_t v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x4000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x11u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100000) == 0)
  {
LABEL_26:
    if ((v14 & 0x100) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }

  uint64_t result = *(float *)(a2 + 48);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 48) = result;
  if ((*(_DWORD *)(a2 + 108) & 0x200) != 0) {
    goto LABEL_58;
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 104);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 104) = result;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x100) == 0)
  {
LABEL_30:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "prePostEventPressureMedian", *(float *)(a1 + 128));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x1Au);
  unsigned int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x80000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }

  unsigned int v29 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 64) = v29;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "transitionEpsilonDuration", *(float *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_29;
    }
LABEL_59:
    PB::TextFormatter::format(this, "transitionStartSpeed", *(float *)(a1 + 120));
    if ((*(_DWORD *)(a1 + 132) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_30;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x12Fu);
  unsigned int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x2000000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 125), 0x131u);
  }

  int v25 = *(_DWORD *)(a2 + 80);
  v3 |= 0x1000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 80) = v25;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "metaDtBwFirstAndLastFreeFall", *(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_24:
    if ((v5 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x17u);
  unsigned int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }

  uint64_t result = *(float *)(a2 + 96);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 96) = result;
  int v2 = *(void *)(a2 + 172);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "energyMet", *(_BYTE *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xAu);
  unsigned int v4 = *(void *)(v3 + 172);
  if ((v4 & 0x100000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_59;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "isStored", *(_BYTE *)(a1 + 162));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x12u);
  unsigned int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }

  uint64_t v24 = *(_DWORD *)(a2 + 152);
  v3 |= 0x80000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 152) = v24;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "refSignalRateTotal", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x16u);
  unsigned int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "rollValue", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x19u);
  unsigned int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }

  int v18 = *(void *)(a2 + 80);
  v3 |= 0x200uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 80) = v18;
  int v2 = *(void *)(a2 + 212);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "planarMaxEnergy", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0x10u);
  unsigned int v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }

  uint64_t result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 200) = result;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlQ95", *(double *)(a1 + 200));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 216), 0x1Au);
  unsigned int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }

  int v44 = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 152) |= 0x400u;
  *(_DWORD *)(a1 + 104) = v44;
  int v32 = *(_DWORD *)(a2 + 152);
  if ((v32 & 0x800) == 0)
  {
LABEL_44:
    if ((v32 & 0x2000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_59;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 76) = v9;
  int v2 = *(void *)(a2 + 184);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10000000000LL) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  unsigned int v4 = *(void *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }

  v5 |= 0x4000000u;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = v5;
  unsigned int v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_28;
    }
LABEL_59:
    int v37 = *(_DWORD *)(a2 + 136);
    v5 |= 0x10000u;
    *(_DWORD *)(a1 + 180) = v5;
    *(_DWORD *)(a1 + 136) = v37;
    if ((*(_DWORD *)(a2 + 180) & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

  PB::TextFormatter::format(this, "undulationModel", *(_DWORD *)(a1 + 172));
  int v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000) != 0) {
    goto LABEL_58;
  }
LABEL_30:
  if ((v7 & 0x4000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(this, "wayForm", *(_DWORD *)(a1 + 176));
  return PB::TextFormatter::endObject(this);
}

  int v26 = *(_DWORD *)(a2 + 188);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 188) = v26;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "signalEnvironment", *(_DWORD *)(a1 + 200));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0x18u);
  unsigned int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }

  int v25 = *(void *)(a2 + 24);
  v5 |= 4uLL;
  *(void *)(a1 + 192) = v5;
  *(void *)(a1 + 24) = v25;
  unsigned int v4 = *(void *)(a2 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "now", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0xFu);
  unsigned int v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 24) = v8;
  int v2 = *(void *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "auxOmegaInertial_Z", *(float *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 6u);
  unsigned int v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_59;
  }

  int v26 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 32) = v26;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravLong", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x18u);
  unsigned int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }

  uint64_t v28 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 164) |= 8u;
  *(_DWORD *)(a1 + 76) = v28;
  int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 4) == 0)
  {
LABEL_27:
    if ((v10 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "rBoresight_Y", *(float *)(a1 + 112));
  uint64_t v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 154), 0x13u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }

  int v15 = *(_DWORD *)(a2 + 196);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 196) = v15;
  int v2 = *(void *)(a2 + 224);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }

  PB::TextFormatter::format(this, "strideLengthIsValid", *(_BYTE *)(a1 + 220));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0x15u);
  unsigned int v4 = *(void *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }

  unsigned int v30 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 96) = v30;
  if ((*(_DWORD *)(a2 + 188) & 0x1000000) != 0) {
    goto LABEL_58;
  }
  return result;
}

float sub_100068FC4(uint64_t a1, void *lpsrc)
{
  return sub_100067ED0(a1, (uint64_t)lpsrc);
}

float sub_100069010(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    return sub_100067ED0(a1, a2);
  }

  return result;
}

uint64_t sub_100069050()
{
  return 1LL;
}

double sub_100069058(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    int v2 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = v2;
    double result = *(double *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(double *)(a2 + 8) = result;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = v5;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v6;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = v7;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = v8;
    uint64_t v9 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = v9;
  }

  return result;
}

void *sub_100069104@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.Measurement");
}

void sub_100069114(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  3576LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v8 = *(std::string **)(a1 + 16);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v8;
      }

      std::string::operator=(v8, v7);
    }
  }

void sub_1000691E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100069200(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    operator delete((void *)v1);
  }

void sub_100069250(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A888;
  sub_100069200((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100069280(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A888;
  sub_100069200((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_1000692B4()
{
  double result = operator new(0x20uLL);
  void *result = off_10181A888;
  result[1] = 0LL;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1000692E4(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100069330( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v8 = TagFallback & 7;
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v12 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          *int v5 = *v11;
          uint64_t v12 = v11 + 1;
          *((void *)this + 1) = v12;
        }

        int v9 = *(_DWORD *)(a1 + 28) | 1;
        *(_DWORD *)(a1 + 28) = v9;
        if ((unint64_t)v12 < v10 && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_24;
        }
      }

      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_16;
      }
      int v9 = *(_DWORD *)(a1 + 28);
LABEL_24:
      *(_DWORD *)(a1 + 28) = v9 | 2;
      uint64_t v13 = *(void **)(a1 + 16);
      if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v13 = operator new(0x18uLL);
        v13[1] = 0LL;
        v13[2] = 0LL;
        void *v13 = 0LL;
        *(void *)(a1 + 16) = v13;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v13);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4) {
      return 1LL;
    }
  }

uint64_t sub_1000694CC( uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2LL, *(void *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_100069524(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 28))
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8),  a2)
         + 1;
      if ((*(_DWORD *)(a1 + 28) & 2) == 0) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
        goto LABEL_16;
      }
    }

    uint64_t v4 = *(void *)(a1 + 16);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8,  a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      char v6 = *(_BYTE *)(v4 + 23);
    }

    else
    {
      int v9 = 1;
    }

    if (v6 < 0) {
      int v5 = v7;
    }
    uint64_t v3 = (v3 + v9 + v5 + 1);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

void sub_1000695D4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100069620()
{
  return 1LL;
}

void *sub_100069628@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.DeviceId");
}

void sub_100069638(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  3847LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 4) != 0)
    {
      int v8 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_DWORD *)(a1 + 20) = v8;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      int v9 = *(void **)(a1 + 24);
      if (!v9)
      {
        int v9 = operator new(0x20uLL);
        *int v9 = off_10181A888;
        v9[1] = 0LL;
        v9[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v9[3] = 0LL;
        *(void *)(a1 + 24) = v9;
      }

      uint64_t v10 = *(void *)(a2 + 24);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_1019A0828 + 24);
      }
      sub_100069114((uint64_t)v9, v10);
    }
  }

void sub_100069764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006977C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10181A900;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A0828 != this)
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1000697D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_1000697E4()
{
  uint64_t result = operator new(0x28uLL);
  void *result = &off_10181A900;
  result[1] = 0LL;
  result[2] = 1LL;
  result[3] = 0LL;
  result[4] = 0LL;
  return result;
}

uint64_t sub_100069814(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 36);
  if (v2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 1LL;
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(result + 24);
      if (result) {
        uint64_t result = sub_1000692E4(result);
      }
    }
  }

  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100069854( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_22;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v25) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v25;
        *(_DWORD *)(a1 + 36) |= 1u;
        int v9 = (_BYTE *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        uint64_t v10 = v9 + 1;
        *((void *)this + 1) = v10;
        goto LABEL_15;
      case 2u:
        int v7 = TagFallback & 7;
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_15:
        if ((unint64_t)v10 >= v8 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v11 = v25[0];
        }

        else
        {
          unsigned int v11 = *v10;
          *((void *)this + 1) = v10 + 1;
        }

        if (v11 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v11;
        }

        int v14 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v14 + 1;
LABEL_32:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v25) & 1) == 0) {
          return 0LL;
        }
        *(_DWORD *)(a1 + 20) = v25[0];
        int v12 = *(_DWORD *)(a1 + 36) | 4;
        *(_DWORD *)(a1 + 36) = v12;
        int v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 36) = v12 | 8;
        uint64_t v16 = *(void **)(a1 + 24);
        if (!v16)
        {
          uint64_t v16 = operator new(0x20uLL);
          void *v16 = off_10181A888;
          v16[1] = 0LL;
          v16[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v16[3] = 0LL;
          *(void *)(a1 + 24) = v16;
        }

        int v17 = (char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v25)) {
            return 0LL;
          }
        }

        else
        {
          v25[0] = *v17;
          *((void *)this + 1) = v17 + 1;
        }

        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 < v19)
        {
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25[0]);
          if (sub_100069330((uint64_t)v16, this, v21))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
              int v22 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v22, 1);
              int v24 = v22 - 1;
              if (v24 < 0 == v23) {
                *((_DWORD *)this + 14) = v24;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1LL;
                *((_BYTE *)this + 36) = 1;
                return result;
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_32;
        }
        goto LABEL_22;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_22;
        }
        int v12 = *(_DWORD *)(a1 + 36);
        goto LABEL_36;
      default:
        int v7 = TagFallback & 7;
LABEL_22:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100069B5C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  (int)a2,  *(double *)(result + 8),  a3);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 16),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A0828 + 24);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v7,  a2,  a4);
}

uint64_t sub_100069C00(uint64_t a1, unint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    LODWORD(v4) = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        int v6 = 11;
      }

      else if (v5 >= 0x80)
      {
        int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 36);
      }

      else
      {
        int v6 = 2;
      }

      LODWORD(v4) = v6 + v4;
    }

    if ((v3 & 4) != 0) {
      uint64_t v4 = (v4 + 5);
    }
    else {
      uint64_t v4 = v4;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1019A0828 + 24);
      }
      unint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100069524(v7, a2);
      int v10 = (int)v8;
      else {
        int v11 = 1;
      }
      uint64_t v4 = (v4 + v10 + v11 + 1);
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_100069CCC(uint64_t a1, void *lpsrc)
{
}

void sub_100069D18(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100069638(a1, a2);
  }

uint64_t sub_100069D58()
{
  return 1LL;
}

void *sub_100069D60@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.FingerprintMeasurement");
}

void sub_100069D70(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v32,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  4283LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v32,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v31, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 20);
      uint64_t v8 = *(int *)(a1 + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  v7 + 1);
          int v7 = *(_DWORD *)(a1 + 20);
        }

        *(_DWORD *)(a1 + 20) = v7 + 1;
        int v10 = (char *)operator new(0x50uLL);
        *(void *)int v10 = off_10181A810;
        *((void *)v10 + 8) = 1LL;
        *((_DWORD *)v10 + 18) = 0;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *((void *)v10 + 7) = 0LL;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(int *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 8);
        *(_DWORD *)(a1 + 16) = v8 + 1;
        int v10 = *(char **)(v9 + 8 * v8);
      }

      sub_100067ED0((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72),  *(_DWORD *)(a2 + 80) + *(_DWORD *)(a1 + 80));
  if (*(int *)(a2 + 80) >= 1)
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + 72) + 8 * v13);
      int v15 = *(_DWORD *)(a1 + 84);
      uint64_t v16 = *(int *)(a1 + 80);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(a1 + 88))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72),  v15 + 1);
          int v15 = *(_DWORD *)(a1 + 84);
        }

        *(_DWORD *)(a1 + 84) = v15 + 1;
        int v18 = operator new(0x28uLL);
        void *v18 = &off_10181A900;
        v18[1] = 0LL;
        v18[2] = 1LL;
        v18[3] = 0LL;
        v18[4] = 0LL;
        uint64_t v19 = *(void *)(a1 + 72);
        uint64_t v20 = *(int *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = v20 + 1;
        *(void *)(v19 + 8 * v20) = v18;
      }

      else
      {
        uint64_t v17 = *(void *)(a1 + 72);
        *(_DWORD *)(a1 + 80) = v16 + 1;
        int v18 = *(void **)(v17 + 8 * v16);
      }

      sub_100069638((uint64_t)v18, v14);
      ++v13;
    }

    while (v13 < *(int *)(a2 + 80));
  }

  int v21 = *(_DWORD *)(a2 + 104);
  if ((v21 & 0x1FE) == 0) {
    goto LABEL_28;
  }
  if ((v21 & 2) == 0)
  {
    if ((v21 & 4) == 0) {
      goto LABEL_22;
    }
LABEL_32:
    uint64_t v26 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 104) |= 4u;
    *(void *)(a1 + 40) = v26;
    int v21 = *(_DWORD *)(a2 + 104);
    if ((v21 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  uint64_t v25 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 104) |= 2u;
  *(void *)(a1 + 32) = v25;
  int v21 = *(_DWORD *)(a2 + 104);
  if ((v21 & 4) != 0) {
    goto LABEL_32;
  }
LABEL_22:
  if ((v21 & 8) != 0)
  {
LABEL_23:
    uint64_t v22 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 104) |= 8u;
    *(void *)(a1 + 48) = v22;
    int v21 = *(_DWORD *)(a2 + 104);
  }

void sub_10006A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006A0E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A978;
  uint64_t v2 = (uint64_t)a1 + 72;
  sub_10006A134((uint64_t)a1);
  sub_10008D0EC(v2);
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006A134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = *(void *)(a1 + 64);
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

void sub_10006A1C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10006A1D4()
{
  uint64_t result = operator new(0x70uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_10181A978;
  *((_DWORD *)result + 6) = 0;
  result[10] = 0LL;
  *((_DWORD *)result + 22) = 0;
  result[4] = 0LL;
  result[5] = 0LL;
  result[6] = 0LL;
  result[7] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[8] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[9] = 0LL;
  *((_WORD *)result + 48) = 0;
  *((_DWORD *)result + 25) = 0;
  *((_DWORD *)result + 26) = 0;
  return result;
}

uint64_t sub_10006A224(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 104);
  if ((v2 & 0x1FE) != 0)
  {
    *(void *)(result + 32) = 0LL;
    *(void *)(result + 40) = 0LL;
    *(void *)(result + 48) = 0LL;
    if ((v2 & 0x10) != 0)
    {
      uint64_t v3 = *(void *)(result + 56);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 104) & 0x20) != 0)
    {
      uint64_t v4 = *(void *)(result + 64);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    *(_BYTE *)(result + 96) = 0;
    int v2 = *(_DWORD *)(result + 104);
  }

  if ((v2 & 0xFF00) != 0) {
    *(_BYTE *)(result + 97) = 0;
  }
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v1 + 8) + 8 * v5);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
      ++v5;
    }

    while (v5 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 80) >= 1)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v1 + 72) + 8 * v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32LL))(v8);
      ++v7;
    }

    while (v7 < *(int *)(v1 + 80));
  }

  *(_DWORD *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  return result;
}

uint64_t sub_10006A348( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  uint64_t v6 = (unint64_t *)(a1 + 32);
  uint64_t v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72);
  while (1)
  {
LABEL_2:
    uint64_t v8 = (char *)*((void *)this + 1);
    if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_7;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_45;
        }
        while (1)
        {
          int v11 = *(_DWORD *)(a1 + 20);
          uint64_t v12 = *(int *)(a1 + 16);
          if ((int)v12 >= v11)
          {
            if (v11 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
              int v11 = *(_DWORD *)(a1 + 20);
            }

            *(_DWORD *)(a1 + 20) = v11 + 1;
            uint64_t v14 = (char *)operator new(0x50uLL);
            *(void *)uint64_t v14 = off_10181A810;
            *((void *)v14 + 8) = 1LL;
            *((_DWORD *)v14 + 18) = 0;
            *(_OWORD *)(v14 + 8) = 0u;
            *(_OWORD *)(v14 + 24) = 0u;
            *(_OWORD *)(v14 + 40) = 0u;
            *((void *)v14 + 7) = 0LL;
            uint64_t v15 = *(void *)(a1 + 8);
            uint64_t v16 = *(int *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v16 + 1;
            *(void *)(v15 + 8 * v16) = v14;
          }

          else
          {
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(a1 + 16) = v12 + 1;
            uint64_t v14 = *(char **)(v13 + 8 * v12);
          }

          uint64_t v17 = (char *)*((void *)this + 1);
          if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v59)) {
              return 0LL;
            }
          }

          else
          {
            v59[0] = *v17;
            *((void *)this + 1) = v17 + 1;
          }

          int v18 = *((_DWORD *)this + 14);
          int v19 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v18 + 1;
          if (v18 >= v19) {
            return 0LL;
          }
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59[0]);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
          int v22 = *((_DWORD *)this + 14);
          BOOL v23 = __OFSUB__(v22, 1);
          int v24 = v22 - 1;
          if (v24 < 0 == v23) {
            *((_DWORD *)this + 14) = v24;
          }
          uint64_t v26 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          int v27 = *v26;
          if (v27 != 10) {
            break;
          }
          *((void *)this + 1) = v26 + 1;
        }

        if (v27 != 16) {
          continue;
        }
        uint64_t v28 = (char *)(v26 + 1);
        *((void *)this + 1) = v28;
        goto LABEL_29;
      case 2u:
        int v10 = TagFallback & 7;
        uint64_t v28 = (char *)*((void *)this + 1);
        unint64_t v25 = *((void *)this + 2);
LABEL_29:
        if ((unint64_t)v28 >= v25 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v29 = (_BYTE *)*((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
        }

        else
        {
          *uint64_t v6 = *v28;
          unsigned int v29 = v28 + 1;
          *((void *)this + 1) = v29;
        }

        *(_DWORD *)(a1 + 104) |= 2u;
        *((void *)this + 1) = v29 + 1;
LABEL_56:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 40) = *(void *)v59;
        *(_DWORD *)(a1 + 104) |= 4u;
        int v35 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v35 + 1;
LABEL_60:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v59) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 48) = *(void *)v59;
        int v30 = *(_DWORD *)(a1 + 104) | 8;
        *(_DWORD *)(a1 + 104) = v30;
        int v36 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v36 < *((void *)this + 2) && *v36 == 42)
        {
          *((void *)this + 1) = v36 + 1;
LABEL_64:
          *(_DWORD *)(a1 + 104) = v30 | 0x10;
          int v37 = *(void **)(a1 + 56);
          if (v37 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            int v37 = operator new(0x18uLL);
            v37[1] = 0LL;
            v37[2] = 0LL;
            *int v37 = 0LL;
            *(void *)(a1 + 56) = v37;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v38 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v38 < *((void *)this + 2) && *v38 == 50)
          {
            *((void *)this + 1) = v38 + 1;
LABEL_70:
            *(_DWORD *)(a1 + 104) |= 0x20u;
            int v39 = *(void **)(a1 + 64);
            if (v39 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              int v39 = operator new(0x18uLL);
              v39[1] = 0LL;
              v39[2] = 0LL;
              *int v39 = 0LL;
              *(void *)(a1 + 64) = v39;
            }

            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v39);
            if (!(_DWORD)result) {
              return result;
            }
            int v40 = (_BYTE *)*((void *)this + 1);
            if ((unint64_t)v40 < *((void *)this + 2) && *v40 == 58)
            {
              do
              {
                *((void *)this + 1) = v40 + 1;
LABEL_76:
                int v41 = *(_DWORD *)(a1 + 84);
                uint64_t v42 = *(int *)(a1 + 80);
                if ((int)v42 >= v41)
                {
                  if (v41 == *(_DWORD *)(a1 + 88))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v41 + 1);
                    int v41 = *(_DWORD *)(a1 + 84);
                  }

                  *(_DWORD *)(a1 + 84) = v41 + 1;
                  int v44 = operator new(0x28uLL);
                  *int v44 = &off_10181A900;
                  v44[1] = 0LL;
                  v44[2] = 1LL;
                  v44[3] = 0LL;
                  v44[4] = 0LL;
                  uint64_t v45 = *(void *)(a1 + 72);
                  uint64_t v46 = *(int *)(a1 + 80);
                  *(_DWORD *)(a1 + 80) = v46 + 1;
                  *(void *)(v45 + 8 * v46) = v44;
                }

                else
                {
                  uint64_t v43 = *(void *)(a1 + 72);
                  *(_DWORD *)(a1 + 80) = v42 + 1;
                  int v44 = *(void **)(v43 + 8 * v42);
                }

                unsigned int v47 = (char *)*((void *)this + 1);
                if ((unint64_t)v47 >= *((void *)this + 2) || *v47 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v59)) {
                    return 0LL;
                  }
                }

                else
                {
                  v59[0] = *v47;
                  *((void *)this + 1) = v47 + 1;
                }

                int v48 = *((_DWORD *)this + 14);
                int v49 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v48 + 1;
                if (v48 >= v49) {
                  return 0LL;
                }
                int v50 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59[0]);
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v50);
                int v52 = *((_DWORD *)this + 14);
                BOOL v23 = __OFSUB__(v52, 1);
                int v53 = v52 - 1;
                if (v53 < 0 == v23) {
                  *((_DWORD *)this + 14) = v53;
                }
                int v40 = (_BYTE *)*((void *)this + 1);
                unint64_t v31 = *((void *)this + 2);
                int v54 = *v40;
              }

              while (v54 == 58);
              if (v54 == 64)
              {
                int v32 = v40 + 1;
                *((void *)this + 1) = v32;
LABEL_94:
                if ((unint64_t)v32 >= v31 || *v32 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v59);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  unsigned int v55 = v59[0];
                  unsigned int v56 = (_BYTE *)*((void *)this + 1);
                  unint64_t v31 = *((void *)this + 2);
                }

                else
                {
                  unsigned int v55 = *v32;
                  unsigned int v56 = v32 + 1;
                  *((void *)this + 1) = v56;
                }

                *(_BYTE *)(a1 + 96) = v55 != 0;
                *(_DWORD *)(a1 + 104) |= 0x80u;
                if ((unint64_t)v56 < v31 && *v56 == 72)
                {
                  v33 = v56 + 1;
                  *((void *)this + 1) = v33;
LABEL_102:
                  if ((unint64_t)v33 >= v31 || *v33 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v59);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    unsigned int v57 = v59[0];
                    int v58 = (unsigned __int8 *)*((void *)this + 1);
                    unint64_t v31 = *((void *)this + 2);
                  }

                  else
                  {
                    unsigned int v57 = *v33;
                    int v58 = (unsigned __int8 *)(v33 + 1);
                    *((void *)this + 1) = v58;
                  }

                  *(_BYTE *)(a1 + 97) = v57 != 0;
                  *(_DWORD *)(a1 + 104) |= 0x100u;
                  if (v58 == (unsigned __int8 *)v31
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    uint64_t result = 1LL;
                    *((_BYTE *)this + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
        }

        break;
      case 3u:
        int v10 = TagFallback & 7;
        if (v10 == 1) {
          goto LABEL_56;
        }
        goto LABEL_45;
      case 4u:
        int v10 = TagFallback & 7;
        if (v10 == 1) {
          goto LABEL_60;
        }
        goto LABEL_45;
      case 5u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_45;
        }
        int v30 = *(_DWORD *)(a1 + 104);
        goto LABEL_64;
      case 6u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_70;
        }
        goto LABEL_45;
      case 7u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_76;
        }
        goto LABEL_45;
      case 8u:
        int v10 = TagFallback & 7;
        int v32 = (char *)*((void *)this + 1);
        unint64_t v31 = *((void *)this + 2);
        goto LABEL_94;
      case 9u:
        int v10 = TagFallback & 7;
        v33 = (char *)*((void *)this + 1);
        unint64_t v31 = *((void *)this + 2);
        goto LABEL_102;
      default:
        int v10 = TagFallback & 7;
LABEL_45:
        if (v10 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_10006A9EC( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  int v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 2) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
    int v7 = *(_DWORD *)(v5 + 104);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }

  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 40),  a3);
  int v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }

uint64_t sub_10006AB44(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 104);
  if ((v3 & 0x1FE) != 0)
  {
    if ((v3 & 2) != 0)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32),  a2)
         + 1;
      int v3 = *(_DWORD *)(a1 + 104);
    }

    else
    {
      int v4 = 0;
    }

    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      int v6 = v4 + 9;
    }
    else {
      int v6 = v4;
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      char v9 = v8;
      uint64_t v10 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
        int v8 = *(unsigned __int8 *)(v7 + 23);
        uint64_t v10 = *(void *)(v7 + 8);
        int v3 = *(_DWORD *)(a1 + 104);
        char v9 = *(_BYTE *)(v7 + 23);
      }

      else
      {
        int v12 = 1;
      }

      if (v9 < 0) {
        int v8 = v10;
      }
      v6 += v12 + v8 + 1;
    }

    if ((v3 & 0x20) != 0)
    {
      uint64_t v13 = *(void *)(a1 + 64);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      char v15 = v14;
      uint64_t v16 = *(void *)(v13 + 8);
      if ((v14 & 0x80u) == 0) {
        unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17 >= 0x80)
      {
        int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17,  a2);
        int v14 = *(unsigned __int8 *)(v13 + 23);
        uint64_t v16 = *(void *)(v13 + 8);
        int v3 = *(_DWORD *)(a1 + 104);
        char v15 = *(_BYTE *)(v13 + 23);
      }

      else
      {
        int v18 = 1;
      }

      if (v15 < 0) {
        int v14 = v16;
      }
      v6 += v18 + v14 + 1;
    }

    int v5 = v6 + 2;
    if ((v3 & 0x80) == 0) {
      int v5 = v6;
    }
  }

  else
  {
    int v5 = 0;
  }

  if ((v3 & 0x100) != 0) {
    int v19 = v5 + 2;
  }
  else {
    int v19 = v5;
  }
  int v20 = *(_DWORD *)(a1 + 16);
  int v21 = v19 + v20;
  if (v20 >= 1)
  {
    uint64_t v22 = 0LL;
    do
    {
      BOOL v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100068D80( *(void *)(*(void *)(a1 + 8) + 8 * v22),  a2);
      int v24 = (int)v23;
      else {
        int v25 = 1;
      }
      v21 += v24 + v25;
      ++v22;
    }

    while (v22 < *(int *)(a1 + 16));
  }

  int v26 = *(_DWORD *)(a1 + 80);
  uint64_t v27 = (v26 + v21);
  if (v26 >= 1)
  {
    uint64_t v28 = 0LL;
    do
    {
      unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100069C00( *(void *)(*(void *)(a1 + 72) + 8 * v28),  a2);
      int v30 = (int)v29;
      else {
        int v31 = 1;
      }
      uint64_t v27 = (v30 + v27 + v31);
      ++v28;
    }

    while (v28 < *(int *)(a1 + 80));
  }

  *(_DWORD *)(a1 + 100) = v27;
  return v27;
}

void sub_10006AD28(uint64_t a1, void *lpsrc)
{
}

void sub_10006AD74(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100069D70(a1, a2);
  }

uint64_t sub_10006ADB4()
{
  return 1LL;
}

void *sub_10006ADBC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.Fingerprint");
}

std::string *sub_10006ADCC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v17,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  4516LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v17,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }

  uint64_t result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16),  *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *(const std::string **)(*(void *)(a2 + 16) + 8 * v6);
      int v8 = *(_DWORD *)(a1 + 28);
      uint64_t v9 = *(int *)(a1 + 24);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 32))
        {
          uint64_t result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16),  v8 + 1);
          int v8 = *(_DWORD *)(a1 + 28);
        }

        *(_DWORD *)(a1 + 28) = v8 + 1;
        unint64_t v11 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        uint64_t v12 = *(void *)(a1 + 16);
        uint64_t v13 = *(int *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = v13 + 1;
        *(void *)(v12 + 8 * v13) = v11;
      }

      else
      {
        uint64_t v10 = *(void *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v9 + 1;
        unint64_t v11 = *(std::string **)(v10 + 8 * v9);
      }

      uint64_t result = std::string::operator=(v11, v7);
      ++v6;
    }

    while (v6 < *(int *)(a2 + 24));
  }

  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    int v14 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 1u;
    char v15 = *(std::string **)(a1 + 8);
    if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      char v15 = (std::string *)operator new(0x18uLL);
      v15->__r_.__value_.__l.__size_ = 0LL;
      v15->__r_.__value_.__l.__cap_ = 0LL;
      v15->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 8) = v15;
    }

    return std::string::operator=(v15, v14);
  }

  return result;
}

void sub_10006AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006AF50(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181A9F0;
  uint64_t v2 = (uint64_t)a1 + 16;
  sub_10006AF90((uint64_t)a1);
  sub_10008D154(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006AF90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    operator delete((void *)v1);
  }

void sub_10006AFE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10006AFF8()
{
  uint64_t result = operator new(0x30uLL);
  result[2] = 0LL;
  result[3] = 0LL;
  *((_DWORD *)result + 8) = 0;
  void *result = off_10181A9F0;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[5] = 0LL;
  return result;
}

uint64_t sub_10006B030(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0LL;
      }

      else
      {
        *(_BYTE *)uint64_t v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
    }
  }

  uint64_t result = sub_10008D09C(a1 + 16);
  *(_DWORD *)(a1 + 44) = 0;
  return result;
}

uint64_t sub_10006B094( uint64_t result, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
          *((_DWORD *)this + 8) = result;
          if (!(_DWORD)result) {
            return 1LL;
          }
        }

        else
        {
          uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)v7;
          *((void *)this + 1) = v6 + 1;
          if (!(_DWORD)v7) {
            return 1LL;
          }
        }

        int v8 = v7 & 7;
        if (v8 != 2) {
          goto LABEL_19;
        }
        *(_DWORD *)(v4 + 44) |= 1u;
        uint64_t v9 = *(void **)(v4 + 8);
        if (v9 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v9 = operator new(0x18uLL);
          v9[1] = 0LL;
          v9[2] = 0LL;
          *uint64_t v9 = 0LL;
          *(void *)(v4 + 8) = v9;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v9);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v10 = (_BYTE *)*((void *)this + 1);
      }

      int v8 = v7 & 7;
      if (v8 != 2) {
        goto LABEL_19;
      }
      while (1)
      {
        int v11 = *(_DWORD *)(v4 + 28);
        uint64_t v12 = *(int *)(v4 + 24);
        if ((int)v12 >= v11)
        {
          if (v11 == *(_DWORD *)(v4 + 32))
          {
            uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
            int v11 = *(_DWORD *)(v4 + 28);
          }

          *(_DWORD *)(v4 + 28) = v11 + 1;
          uint64_t v14 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
          uint64_t v15 = *(void *)(v4 + 16);
          uint64_t v16 = *(int *)(v4 + 24);
          *(_DWORD *)(v4 + 24) = v16 + 1;
          *(void *)(v15 + 8 * v16) = v14;
        }

        else
        {
          uint64_t v13 = *(void *)(v4 + 16);
          *(_DWORD *)(v4 + 24) = v12 + 1;
          uint64_t v14 = *(void *)(v13 + 8 * v12);
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v14);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v10 = (_BYTE *)*((void *)this + 1);
        unint64_t v17 = (_BYTE *)*((void *)this + 2);
        if (v10 >= v17 || *v10 != 18) {
          break;
        }
LABEL_22:
        *((void *)this + 1) = v10 + 1;
      }

      if (v10 == v17 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v8 = v7 & 7;
LABEL_19:
    if (v8 == 4) {
      return 1LL;
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, v7, a3);
    if ((result & 1) == 0) {
      return 0LL;
    }
  }

uint64_t sub_10006B278(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes( 1LL,  *(void *)(result + 8),  a2);
  }
  if (*(int *)(v3 + 24) >= 1)
  {
    uint64_t v4 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes( 2LL,  *(void *)(*(void *)(v3 + 16) + 8 * v4++),  a2);
    while (v4 < *(int *)(v3 + 24));
  }

  return result;
}

uint64_t sub_10006B2EC(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8,  a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      int v9 = v10 + 1;
      char v6 = *(_BYTE *)(v4 + 23);
    }

    else
    {
      int v9 = 2;
    }

    if (v6 < 0) {
      int v5 = v7;
    }
    int v3 = v9 + v5;
  }

  else
  {
    int v3 = 0;
  }

  int v11 = *(_DWORD *)(a1 + 24);
  uint64_t v12 = (v11 + v3);
  if (v11 >= 1)
  {
    for (uint64_t i = 0LL; i < v11; ++i)
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 8 * i);
      int v15 = *(unsigned __int8 *)(v14 + 23);
      char v16 = v15;
      uint64_t v17 = *(void *)(v14 + 8);
      if ((v15 & 0x80u) == 0) {
        unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 >= 0x80)
      {
        int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18,  a2);
        int v15 = *(unsigned __int8 *)(v14 + 23);
        uint64_t v17 = *(void *)(v14 + 8);
        int v11 = *(_DWORD *)(a1 + 24);
        char v16 = *(_BYTE *)(v14 + 23);
      }

      else
      {
        int v19 = 1;
      }

      if (v16 < 0) {
        int v15 = v17;
      }
      uint64_t v12 = (v19 + v12 + v15);
    }
  }

  *(_DWORD *)(a1 + 40) = v12;
  return v12;
}

std::string *sub_10006B3E8(uint64_t a1, void *lpsrc)
{
  return sub_10006ADCC(a1, (uint64_t)lpsrc);
}

uint64_t sub_10006B434()
{
  return 1LL;
}

void *sub_10006B43C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ClusterRecordings");
}

void sub_10006B44C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  4875LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 48) |= 1u;
    *(void *)(a1 + 8) = v6;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }

  else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }

  uint64_t v7 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 48) |= 2u;
  *(void *)(a1 + 16) = v7;
  int v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }

void sub_10006B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006B600(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    operator delete((void *)v1);
  }

void sub_10006B650(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AA68;
  sub_10006B600((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006B680(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AA68;
  sub_10006B600((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10006B6B4()
{
  v0 = operator new(0x38uLL);
  v0[1] = 0LL;
  v0[2] = 0LL;
  void *v0 = off_10181AA68;
  *((_DWORD *)v0 + 6) = 1;
  *((_WORD *)v0 + 14) = 0;
  *(void *)&double result = 1LL;
  v0[5] = 1LL;
  v0[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 12) = 0;
  return result;
}

uint64_t sub_10006B704(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 48);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)(result + 24) = 1;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 40) = 1;
    if ((v1 & 0x40) != 0)
    {
      uint64_t v2 = *(void *)(result + 32);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10006B760( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_30;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v26) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v26;
        *(_DWORD *)(a1 + 48) |= 1u;
        int v8 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_30;
        }
LABEL_14:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v26) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = *(void *)v26;
        *(_DWORD *)(a1 + 48) |= 2u;
        char v10 = (_BYTE *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        int v11 = v10 + 1;
        *((void *)this + 1) = v11;
LABEL_20:
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v12 = v26[0];
        }

        else
        {
          unsigned int v12 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v12 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 24) = v12;
        }

        unint64_t v18 = (_BYTE *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        char v14 = v18 + 1;
        *((void *)this + 1) = v14;
LABEL_40:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v19 = v26[0];
          int v20 = (_BYTE *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }

        else
        {
          unsigned int v19 = *v14;
          int v20 = v14 + 1;
          *((void *)this + 1) = v20;
        }

        *(_BYTE *)(a1 + 28) = v19 != 0;
        *(_DWORD *)(a1 + 48) |= 8u;
        int v15 = v20 + 1;
        *((void *)this + 1) = v15;
LABEL_48:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v21 = v26[0];
          uint64_t v22 = (_BYTE *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }

        else
        {
          unsigned int v21 = *v15;
          uint64_t v22 = v15 + 1;
          *((void *)this + 1) = v22;
        }

        *(_BYTE *)(a1 + 29) = v21 != 0;
        *(_DWORD *)(a1 + 48) |= 0x10u;
        char v16 = v22 + 1;
        *((void *)this + 1) = v16;
LABEL_56:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v26);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v23 = v26[0];
        }

        else
        {
          unsigned int v23 = *v16;
          *((void *)this + 1) = v16 + 1;
        }

        if (v23 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 48) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v23;
        }

        int v24 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v24 + 1;
LABEL_66:
        *(_DWORD *)(a1 + 48) |= 0x40u;
        int v25 = *(void **)(a1 + 32);
        if (v25 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v25 = operator new(0x18uLL);
          v25[1] = 0LL;
          unsigned int v25[2] = 0LL;
          *int v25 = 0LL;
          *(void *)(a1 + 32) = v25;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v25);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        int v11 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_20;
      case 4u:
        int v7 = TagFallback & 7;
        char v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_40;
      case 5u:
        int v7 = TagFallback & 7;
        int v15 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_48;
      case 6u:
        int v7 = TagFallback & 7;
        char v16 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_56;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_30;
        }
        goto LABEL_66;
      default:
        int v7 = TagFallback & 7;
LABEL_30:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_10006BB44( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_10006BC2C(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    if ((v3 & 2) != 0) {
      int v4 = ((v3 << 31 >> 31) & 9) + 9;
    }
    else {
      int v4 = (v3 << 31 >> 31) & 9;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
      if ((v5 & 0x80000000) != 0)
      {
        int v6 = 11;
      }

      else if (v5 >= 0x80)
      {
        int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 48);
      }

      else
      {
        int v6 = 2;
      }

      v4 += v6;
    }

    unsigned int v8 = v4 + 2;
    if ((v3 & 8) == 0) {
      unsigned int v8 = v4;
    }
    if ((v3 & 0x10) != 0) {
      uint64_t v7 = v8 + 2;
    }
    else {
      uint64_t v7 = v8;
    }
    if ((v3 & 0x20) != 0)
    {
      unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
      if ((v9 & 0x80000000) != 0)
      {
        int v10 = 11;
      }

      else if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 48);
      }

      else
      {
        int v10 = 2;
      }

      uint64_t v7 = (v10 + v7);
    }

    if ((v3 & 0x40) != 0)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = *(unsigned __int8 *)(v11 + 23);
      char v13 = v12;
      uint64_t v14 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        unint64_t v15 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15 >= 0x80)
      {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15,  a2);
        int v12 = *(unsigned __int8 *)(v11 + 23);
        uint64_t v14 = *(void *)(v11 + 8);
        char v13 = *(_BYTE *)(v11 + 23);
      }

      else
      {
        int v16 = 1;
      }

      if (v13 < 0) {
        int v12 = v14;
      }
      uint64_t v7 = (v7 + v16 + v12 + 1);
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *(_DWORD *)(a1 + 44) = v7;
  return v7;
}

void sub_10006BD54(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10006BDA0()
{
  return 1LL;
}

void *sub_10006BDA8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.AnchorMetadata");
}

void sub_10006BDB8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  5161LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }

    else if ((*(_BYTE *)(a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }

    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 2u;
    *(void *)(a1 + 16) = v7;
    int v5 = *(_DWORD *)(a2 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return;
      }
      goto LABEL_12;
    }

void sub_10006BED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006BEEC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AAE0;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006BF1C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AAE0;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_10006BF50()
{
  uint64_t result = operator new(0x30uLL);
  result[4] = 0LL;
  void *result = off_10181AAE0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)result + 10) = 0;
  return result;
}

uint64_t sub_10006BF88(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10006BFD8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_26;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v17) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = v17;
        *(_DWORD *)(a1 + 40) |= 1u;
        unint64_t v9 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v9 + 1;
        goto LABEL_15;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_26;
        }
LABEL_15:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v17) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 40) |= 2u;
        char v11 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        int v12 = v11 + 1;
        *((void *)this + 1) = v12;
LABEL_21:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          char v13 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          *int v5 = *v12;
          char v13 = v12 + 1;
          *((void *)this + 1) = v13;
        }

        int v14 = *(_DWORD *)(a1 + 40) | 4;
        *(_DWORD *)(a1 + 40) = v14;
        *((void *)this + 1) = v13 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 40) = v14 | 8;
        int v16 = *(void **)(a1 + 24);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 24) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        int v8 = TagFallback & 7;
        int v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_21;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v14 = *(_DWORD *)(a1 + 40);
        goto LABEL_34;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_10006C244( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  }

uint64_t sub_10006C2D8(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 4) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }

      else
      {
        int v7 = 2;
      }

      uint64_t v5 = (v7 + v5);
    }

    if ((v3 & 8) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 24);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      char v10 = v9;
      uint64_t v11 = *(void *)(v8 + 8);
      if ((v9 & 0x80u) == 0) {
        unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12 >= 0x80)
      {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12,  a2);
        int v9 = *(unsigned __int8 *)(v8 + 23);
        uint64_t v11 = *(void *)(v8 + 8);
        char v10 = *(_BYTE *)(v8 + 23);
      }

      else
      {
        int v13 = 1;
      }

      if (v10 < 0) {
        int v9 = v11;
      }
      uint64_t v5 = (v5 + v13 + v9 + 1);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_10006C3A8(uint64_t a1, void *lpsrc)
{
}

void sub_10006C3F4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10006BDB8(a1, a2);
  }

uint64_t sub_10006C434()
{
  return 1LL;
}

void *sub_10006C43C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.AnchorAppearance");
}

void sub_10006C44C(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  5337LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        char v10 = operator new(0x30uLL);
        v10[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v10[4] = 0LL;
        *char v10 = off_10181AAE0;
        v10[1] = 0LL;
        v10[2] = 0LL;
        *((_DWORD *)v10 + 10) = 0;
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        char v10 = *(void **)(v9 + 8 * v8);
      }

      sub_10006BDB8((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

void sub_10006C59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006C5B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AB58;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006C5EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10006C600()
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_10181AB58;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  return result;
}

uint64_t sub_10006C630(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_10006C688( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
    }

    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }

          a1[5] = v8 + 1;
          uint64_t v11 = operator new(0x30uLL);
          v11[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v11[4] = 0LL;
          *uint64_t v11 = off_10181AAE0;
          v11[1] = 0LL;
          v11[2] = 0LL;
          *((_DWORD *)v11 + 10) = 0;
          uint64_t v12 = *((void *)a1 + 1);
          uint64_t v13 = a1[4];
          a1[4] = v13 + 1;
          *(void *)(v12 + 8 * v13) = v11;
        }

        else
        {
          uint64_t v10 = *((void *)a1 + 1);
          a1[4] = v9 + 1;
          uint64_t v11 = *(void **)(v10 + 8 * v9);
        }

        int v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v25)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v25 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        uint64_t v22 = (_BYTE *)*((void *)this + 1);
        unsigned int v23 = (_BYTE *)*((void *)this + 2);
        if (v22 >= v23 || *v22 != 10)
        {
          if (v22 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          goto LABEL_2;
        }

        *((void *)this + 1) = v22 + 1;
      }
    }
  }

uint64_t sub_10006C8A0( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  return result;
}

uint64_t sub_10006C8FC(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006C2D8( *(void *)(*(void *)(a1 + 8) + 8 * v4),  a2);
      int v6 = (int)v5;
      else {
        int v7 = 1;
      }
      uint64_t v3 = (v6 + v3 + v7);
      ++v4;
    }

    while (v4 < *(int *)(a1 + 16));
  }

  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_10006C978(_DWORD *a1, void *lpsrc)
{
}

void sub_10006C9C4(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(void *)a1 + 32LL))(a1);
    sub_10006C44C(a1, a2);
  }

uint64_t sub_10006CA04()
{
  return 1LL;
}

void *sub_10006CA0C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.anchorAppearancesVector");
}

void sub_10006CA1C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  5564LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }

    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }

    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(void *)(a1 + 16) = v7;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return;
    }
LABEL_10:
    int v8 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    uint64_t v9 = *(std::string **)(a1 + 24);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v9 = (std::string *)operator new(0x18uLL);
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 24) = v9;
    }

    std::string::operator=(v9, v8);
  }

void sub_10006CB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006CB30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181ABD0;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006CB60(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181ABD0;
  sub_100066774((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_10006CB94()
{
  uint64_t result = operator new(0x28uLL);
  void *result = off_10181ABD0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0LL;
  return result;
}

uint64_t sub_10006CBC8(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 36);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_10006CC14( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_29;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = v14;
        *(_DWORD *)(a1 + 36) |= 1u;
        char v10 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 17)
        {
          *((void *)this + 1) = v10 + 1;
          goto LABEL_17;
        }
      }

      if (v7 == 2) {
        break;
      }
      if (v7 == 3)
      {
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          int v9 = *(_DWORD *)(a1 + 36);
          goto LABEL_21;
        }
      }

      else
      {
        int v8 = TagFallback & 7;
      }

uint64_t sub_10006CDF4( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v4 + 24), a2);
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v4 + 16),  a3);
  if ((*(_DWORD *)(v4 + 36) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v4 + 24), a2);
  }
  return result;
}

uint64_t sub_10006CE6C(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        char v8 = *(_BYTE *)(v6 + 23);
      }

      else
      {
        int v11 = 1;
      }

      if (v8 < 0) {
        int v7 = v9;
      }
      uint64_t v5 = (v5 + v11 + v7 + 1);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_10006CF14(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10006CF60()
{
  return 1LL;
}

void *sub_10006CF68@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.AnchorValueStatistics");
}

void sub_10006CF78(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v16,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  5777LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v16,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 20);
      uint64_t v8 = *(int *)(a1 + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  v7 + 1);
          int v7 = *(_DWORD *)(a1 + 20);
        }

        *(_DWORD *)(a1 + 20) = v7 + 1;
        unint64_t v10 = operator new(0x28uLL);
        *unint64_t v10 = off_10181ABD0;
        v10[1] = 0LL;
        v10[2] = 0LL;
        v10[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v10[4] = 0LL;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(int *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 8);
        *(_DWORD *)(a1 + 16) = v8 + 1;
        unint64_t v10 = *(void **)(v9 + 8 * v8);
      }

      sub_10006CA1C((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    uint64_t v13 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 2u;
    unint64_t v14 = *(std::string **)(a1 + 32);
    if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v14 = (std::string *)operator new(0x18uLL);
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 32) = v14;
    }

    std::string::operator=(v14, v13);
  }

void sub_10006D104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006D11C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AC48;
  uint64_t v2 = (uint64_t)a1 + 8;
  sub_10006B600((uint64_t)a1);
  sub_10008D0EC(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006D160(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10006D174()
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_10181AC48;
  *((_DWORD *)result + 6) = 0;
  result[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[5] = 0LL;
  return result;
}

uint64_t sub_10006D1AC(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 44) & 2) != 0)
  {
    uint64_t v2 = *(void *)(result + 32);
    if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0LL;
      }

      else
      {
        *(_BYTE *)uint64_t v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
    }
  }

  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(v1 + 8) + 8 * v3);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
      ++v3;
    }

    while (v3 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_10006D240( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  do
  {
    while (1)
    {
LABEL_2:
      uint64_t v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      if (v8 == 2)
      {
        while (1)
        {
          int v11 = *(_DWORD *)(a1 + 20);
          uint64_t v12 = *(int *)(a1 + 16);
          if ((int)v12 >= v11)
          {
            if (v11 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
              int v11 = *(_DWORD *)(a1 + 20);
            }

            *(_DWORD *)(a1 + 20) = v11 + 1;
            unint64_t v14 = operator new(0x28uLL);
            *unint64_t v14 = off_10181ABD0;
            v14[1] = 0LL;
            v14[2] = 0LL;
            v14[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
            v14[4] = 0LL;
            uint64_t v15 = *(void *)(a1 + 8);
            uint64_t v16 = *(int *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v16 + 1;
            *(void *)(v15 + 8 * v16) = v14;
          }

          else
          {
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(a1 + 16) = v12 + 1;
            unint64_t v14 = *(void **)(v13 + 8 * v12);
          }

          int v17 = (char *)*((void *)this + 1);
          if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v27)) {
              return 0LL;
            }
          }

          else
          {
            unsigned int v27 = *v17;
            *((void *)this + 1) = v17 + 1;
          }

          int v18 = *((_DWORD *)this + 14);
          int v19 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v18 + 1;
          if (v18 >= v19) {
            return 0LL;
          }
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
          int v22 = *((_DWORD *)this + 14);
          BOOL v23 = __OFSUB__(v22, 1);
          int v24 = v22 - 1;
          if (v24 < 0 == v23) {
            *((_DWORD *)this + 14) = v24;
          }
          unsigned int v25 = (unsigned __int8 *)*((void *)this + 1);
          int v26 = *v25;
          if (v26 != 10)
          {
            if (v26 != 18) {
              goto LABEL_2;
            }
            *((void *)this + 1) = v25 + 1;
            goto LABEL_10;
          }

          *((void *)this + 1) = v25 + 1;
        }
      }

uint64_t sub_10006D4D8( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  if ((*(_BYTE *)(v5 + 44) & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2LL, *(void *)(v5 + 32), a2);
  }
  return result;
}

uint64_t sub_10006D558(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8,  a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      int v9 = v10 + 1;
      char v6 = *(_BYTE *)(v4 + 23);
    }

    else
    {
      int v9 = 2;
    }

    if (v6 < 0) {
      int v5 = v7;
    }
    int v3 = v9 + v5;
  }

  else
  {
    int v3 = 0;
  }

  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = (v11 + v3);
  if (v11 >= 1)
  {
    uint64_t v13 = 0LL;
    do
    {
      unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006CE6C( *(void *)(*(void *)(a1 + 8) + 8 * v13),  a2);
      int v15 = (int)v14;
      else {
        int v16 = 1;
      }
      uint64_t v12 = (v15 + v12 + v16);
      ++v13;
    }

    while (v13 < *(int *)(a1 + 16));
  }

  *(_DWORD *)(a1 + 40) = v12;
  return v12;
}

void sub_10006D634(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10006D680()
{
  return 1LL;
}

void *sub_10006D688@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ClusterAnchorValueStatistics");
}

void sub_10006D698(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  5943LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        int v10 = operator new(0x30uLL);
        v10[1] = 0LL;
        v10[2] = 0LL;
        *int v10 = off_10181AC48;
        *((_DWORD *)v10 + 6) = 0;
        v10[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v10[5] = 0LL;
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        int v10 = *(void **)(v9 + 8 * v8);
      }

      sub_10006CF78((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

void sub_10006D7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006D800(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181ACC0;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006D838(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10006D84C()
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_10181ACC0;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  return result;
}

uint64_t sub_10006D87C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_10006D8D4( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
    }

    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }

          a1[5] = v8 + 1;
          uint64_t v11 = operator new(0x30uLL);
          v11[1] = 0LL;
          v11[2] = 0LL;
          *uint64_t v11 = off_10181AC48;
          *((_DWORD *)v11 + 6) = 0;
          v11[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v11[5] = 0LL;
          uint64_t v12 = *((void *)a1 + 1);
          uint64_t v13 = a1[4];
          a1[4] = v13 + 1;
          *(void *)(v12 + 8 * v13) = v11;
        }

        else
        {
          uint64_t v10 = *((void *)a1 + 1);
          a1[4] = v9 + 1;
          uint64_t v11 = *(void **)(v10 + 8 * v9);
        }

        unint64_t v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v25)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v25 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        int v22 = (_BYTE *)*((void *)this + 1);
        BOOL v23 = (_BYTE *)*((void *)this + 2);
        if (v22 >= v23 || *v22 != 10)
        {
          if (v22 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          goto LABEL_2;
        }

        *((void *)this + 1) = v22 + 1;
      }
    }
  }

uint64_t sub_10006DAEC( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  return result;
}

uint64_t sub_10006DB48(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006D558( *(void *)(*(void *)(a1 + 8) + 8 * v4),  a2);
      int v6 = (int)v5;
      else {
        int v7 = 1;
      }
      uint64_t v3 = (v6 + v3 + v7);
      ++v4;
    }

    while (v4 < *(int *)(a1 + 16));
  }

  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_10006DBC4(_DWORD *a1, void *lpsrc)
{
}

void sub_10006DC10(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(void *)a1 + 32LL))(a1);
    sub_10006D698(a1, a2);
  }

uint64_t sub_10006DC50()
{
  return 1LL;
}

void *sub_10006DC58@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ClusterAnchorValueStatisticsVector");
}

void sub_10006DC68(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  6149LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  int v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_10008D024(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(void *)(a1 + 16) + 8LL * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 8LL * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }

  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    int v6 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 36) |= 1u;
    int v7 = *(std::string **)(a1 + 8);
    if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v7 = (std::string *)operator new(0x18uLL);
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 8) = v7;
    }

    std::string::operator=(v7, v6);
  }

void sub_10006DD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006DD78(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AD38;
  sub_10006AF90((uint64_t)a1);
  uint64_t v2 = (void *)*((void *)a1 + 2);
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006DDB8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10006DDCC()
{
  uint64_t result = operator new(0x28uLL);
  result[3] = 0LL;
  result[4] = 0LL;
  result[2] = 0LL;
  void *result = off_10181AD38;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  return result;
}

uint64_t sub_10006DE00(uint64_t result)
{
  if ((*(_BYTE *)(result + 36) & 1) != 0)
  {
    uint64_t v1 = *(void *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)uint64_t v1 = 0;
        *(void *)(v1 + 8) = 0LL;
      }

      else
      {
        *(_BYTE *)uint64_t v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }

  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_10006DE48( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      int v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_21;
      }
      *(_DWORD *)(a1 + 36) |= 1u;
      uint64_t v10 = *(void **)(a1 + 8);
      if (v10 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v10 = operator new(0x18uLL);
        v10[1] = 0LL;
        v10[2] = 0LL;
        *uint64_t v10 = 0LL;
        *(void *)(a1 + 8) = v10;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v10);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v11 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 17)
      {
        do
        {
          *((void *)this + 1) = v11 + 1;
LABEL_25:
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v25) & 1) == 0) {
            return 0LL;
          }
          unint64_t v12 = v25[0];
          int v13 = *(_DWORD *)(a1 + 24);
          if (v13 == *(_DWORD *)(a1 + 28))
          {
            sub_10008D024(v5, v13 + 1);
            int v13 = *(_DWORD *)(a1 + 24);
          }

          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = v13 + 1;
          *(_DWORD *)(a1 + 24) = v13 + 1;
          *(void *)(v14 + 8LL * v13) = v12;
          uint64_t v16 = *((void *)this + 1);
          int v17 = *((_DWORD *)this + 4) - v16;
          if (v17 >= 1)
          {
            signed int v18 = v17 / 9u;
            int v19 = v18 >= *(_DWORD *)(a1 + 28) - v15 ? *(_DWORD *)(a1 + 28) - v15 : v18;
            if (v19 >= 1)
            {
              int v20 = 0;
              while (*(_BYTE *)v16 == 17)
              {
                uint64_t v21 = *(void *)(v16 + 1);
                if (v15 >= *(_DWORD *)(a1 + 28))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v25,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Conten ts/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/includ e/google/protobuf/repeated_field.h",  602LL);
                  uint64_t v22 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v25,  "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v24, v22);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v25);
                  int v15 = *(_DWORD *)(a1 + 24);
                  uint64_t v14 = *(void *)(a1 + 16);
                }

                *(_DWORD *)(a1 + 24) = v15 + 1;
                *(void *)(v14 + 8LL * v15) = v21;
                ++v20;
                v16 += 9LL;
                ++v15;
                if (v19 == v20)
                {
                  int v20 = v19;
                  break;
                }
              }

              if (v20) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v20);
              }
            }
          }

void sub_10006E118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10006E130(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  uint64_t v4 = (char *)*((void *)this + 1);
  if ((unint64_t)v4 >= *((void *)this + 2) || *v4 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v5 = v11;
  }

  else
  {
    unsigned int v5 = *v4;
    unsigned int v11 = v5;
    *((void *)this + 1) = v4 + 1;
  }

  int v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_11:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1LL;
  }

  else
  {
    while (1)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12);
      if (!(_DWORD)result) {
        break;
      }
      unint64_t v8 = v12;
      int v9 = *(_DWORD *)(a2 + 8);
      if (v9 == *(_DWORD *)(a2 + 12))
      {
        sub_10008D024(a2, v9 + 1);
        int v9 = *(_DWORD *)(a2 + 8);
      }

      uint64_t v10 = *(void *)a2;
      *(_DWORD *)(a2 + 8) = v9 + 1;
      *(void *)(v10 + 8LL * v9) = v8;
    }
  }

  return result;
}

uint64_t sub_10006E220( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  int v3 = a2;
  uint64_t v4 = result;
  if ((*(_BYTE *)(result + 36) & 1) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes( 1LL,  *(void *)(result + 8),  a2);
  }
  if (*(int *)(v4 + 24) >= 1)
  {
    uint64_t v5 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v3,  *(double *)(*(void *)(v4 + 16) + 8 * v5++),  a3);
    while (v5 < *(int *)(v4 + 24));
  }

  return result;
}

uint64_t sub_10006E294(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8,  a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      int v9 = v10 + 1;
      char v6 = *(_BYTE *)(v4 + 23);
    }

    else
    {
      int v9 = 2;
    }

    if (v6 < 0) {
      int v5 = v7;
    }
    int v3 = v9 + v5;
  }

  else
  {
    int v3 = 0;
  }

  uint64_t result = (9 * *(_DWORD *)(a1 + 24) + v3);
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_10006E31C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10006E368()
{
  return 1LL;
}

void *sub_10006E370@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.LocationSimilarityListElement");
}

void sub_10006E380(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v24,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  6390LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v24,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }

  uint64_t v5 = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *(const std::string **)(*(void *)(a2 + 8) + 8 * v6);
      int v8 = *(_DWORD *)(a1 + 20);
      uint64_t v9 = *(int *)(a1 + 16);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 24))
        {
          uint64_t v5 = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  v8 + 1);
          int v8 = *(_DWORD *)(a1 + 20);
        }

        *(_DWORD *)(a1 + 20) = v8 + 1;
        unsigned int v11 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)v5);
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v13 = *(int *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v13 + 1;
        *(void *)(v12 + 8 * v13) = v11;
      }

      else
      {
        uint64_t v10 = *(void *)(a1 + 8);
        *(_DWORD *)(a1 + 16) = v9 + 1;
        unsigned int v11 = *(std::string **)(v10 + 8 * v9);
      }

      uint64_t v5 = std::string::operator=(v11, v7);
      ++v6;
    }

    while (v6 < *(int *)(a2 + 16));
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32),  *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    uint64_t v14 = 0LL;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(a2 + 32) + 8 * v14);
      int v16 = *(_DWORD *)(a1 + 44);
      uint64_t v17 = *(int *)(a1 + 40);
      if ((int)v17 >= v16)
      {
        if (v16 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32),  v16 + 1);
          int v16 = *(_DWORD *)(a1 + 44);
        }

        *(_DWORD *)(a1 + 44) = v16 + 1;
        int v19 = operator new(0x28uLL);
        v19[3] = 0LL;
        v19[4] = 0LL;
        v19[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v19[2] = 0LL;
        *int v19 = off_10181AD38;
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(int *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = v21 + 1;
        *(void *)(v20 + 8 * v21) = v19;
      }

      else
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)(a1 + 40) = v17 + 1;
        int v19 = *(void **)(v18 + 8 * v17);
      }

      sub_10006DC68((uint64_t)v19, v15);
      ++v14;
    }

    while (v14 < *(int *)(a2 + 40));
  }

  int v22 = *(_DWORD *)(a2 + 64);
  if (v22)
  {
    sub_10004AAFC(a1 + 56, *(_DWORD *)(a1 + 64) + v22);
    memcpy((void *)(*(void *)(a1 + 56) + 4LL * *(int *)(a1 + 64)), *(const void **)(a2 + 56), 4LL * *(int *)(a2 + 64));
    *(_DWORD *)(a1 + 64) += *(_DWORD *)(a2 + 64);
  }

void sub_10006E5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006E5D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181ADB0;
  uint64_t v2 = (void *)*((void *)a1 + 7);
  if (v2) {
    operator delete[](v2);
  }
  sub_10008D0EC((uint64_t)a1 + 32);
  sub_10008D154((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006E624(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10006E638()
{
  uint64_t result = operator new(0x50uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  void *result = off_10181ADB0;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  result[5] = 0LL;
  *((_DWORD *)result + 12) = 0;
  result[8] = 0LL;
  result[9] = 0LL;
  result[7] = 0LL;
  return result;
}

uint64_t sub_10006E674(uint64_t a1)
{
  uint64_t result = sub_10008D09C(a1 + 8);
  if (*(int *)(a1 + 40) >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
      ++v3;
    }

    while (v3 < *(int *)(a1 + 40));
  }

  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t sub_10006E6D8( uint64_t result, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result + 56;
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 8);
  uint64_t v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 32);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
          *((_DWORD *)this + 8) = result;
          if (!(_DWORD)result) {
            return 1LL;
          }
        }

        else
        {
          uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)this + 8) = (_DWORD)v9;
          *((void *)this + 1) = v8 + 1;
          if (!(_DWORD)v9) {
            return 1LL;
          }
        }

        unsigned int v10 = v9 >> 3;
        int v11 = v9 & 7;
        if (v11 != 2) {
          goto LABEL_26;
        }
        while (1)
        {
          int v14 = *(_DWORD *)(v4 + 20);
          uint64_t v15 = *(int *)(v4 + 16);
          if ((int)v15 >= v14)
          {
            if (v14 == *(_DWORD *)(v4 + 24))
            {
              uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
              int v14 = *(_DWORD *)(v4 + 20);
            }

            *(_DWORD *)(v4 + 20) = v14 + 1;
            uint64_t v17 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
            uint64_t v18 = *(void *)(v4 + 8);
            uint64_t v19 = *(int *)(v4 + 16);
            *(_DWORD *)(v4 + 16) = v19 + 1;
            *(void *)(v18 + 8 * v19) = v17;
          }

          else
          {
            uint64_t v16 = *(void *)(v4 + 8);
            *(_DWORD *)(v4 + 16) = v15 + 1;
            uint64_t v17 = *(void *)(v16 + 8 * v15);
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v17);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v20 = (char *)*((void *)this + 1);
          int v21 = *v20;
          if (v21 != 10)
          {
            if (v21 != 18) {
              goto LABEL_2;
            }
            goto LABEL_32;
          }

          *((void *)this + 1) = v20 + 1;
        }
      }

      if (v10 != 2) {
        break;
      }
      int v11 = v9 & 7;
      if (v11 != 2) {
        goto LABEL_26;
      }
      while (1)
      {
        int v22 = *(_DWORD *)(v4 + 44);
        uint64_t v23 = *(int *)(v4 + 40);
        if ((int)v23 >= v22)
        {
          if (v22 == *(_DWORD *)(v4 + 48))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v22 + 1);
            int v22 = *(_DWORD *)(v4 + 44);
          }

          *(_DWORD *)(v4 + 44) = v22 + 1;
          unsigned int v25 = operator new(0x28uLL);
          v25[3] = 0LL;
          v25[4] = 0LL;
          v25[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          unsigned int v25[2] = 0LL;
          *unsigned int v25 = off_10181AD38;
          uint64_t v26 = *(void *)(v4 + 32);
          uint64_t v27 = *(int *)(v4 + 40);
          *(_DWORD *)(v4 + 40) = v27 + 1;
          *(void *)(v26 + 8 * v27) = v25;
        }

        else
        {
          uint64_t v24 = *(void *)(v4 + 32);
          *(_DWORD *)(v4 + 40) = v23 + 1;
          unsigned int v25 = *(void **)(v24 + 8 * v23);
        }

        uint64_t v28 = (char *)*((void *)this + 1);
        if ((unint64_t)v28 >= *((void *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v42)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v42 = *v28;
          *((void *)this + 1) = v28 + 1;
        }

        int v29 = *((_DWORD *)this + 14);
        int v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30) {
          return 0LL;
        }
        int v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        int v33 = *((_DWORD *)this + 14);
        BOOL v34 = __OFSUB__(v33, 1);
        int v35 = v33 - 1;
        if (v35 < 0 == v34) {
          *((_DWORD *)this + 14) = v35;
        }
        uint64_t v20 = (char *)*((void *)this + 1);
        uint64_t v12 = (char *)*((void *)this + 2);
        if (v20 >= v12) {
          break;
        }
        int v36 = *v20;
        if (v36 != 18)
        {
          if (v36 == 24)
          {
            do
            {
              uint64_t v13 = v20 + 1;
              *((void *)this + 1) = v13;
LABEL_51:
              if (v13 >= v12 || *v13 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v41);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v37 = v41;
              }

              else
              {
                unsigned int v37 = *v13;
                *((void *)this + 1) = v13 + 1;
              }

              if (v37 < 4 || v37 == 15)
              {
                int v39 = *(_DWORD *)(v4 + 64);
                if (v39 == *(_DWORD *)(v4 + 68))
                {
                  sub_10004AAFC(v5, v39 + 1);
                  int v39 = *(_DWORD *)(v4 + 64);
                }

                uint64_t v40 = *(void *)(v4 + 56);
                *(_DWORD *)(v4 + 64) = v39 + 1;
                *(_DWORD *)(v40 + 4LL * v39) = v37;
              }

LABEL_64:
              uint64_t v20 = (char *)*((void *)this + 1);
              uint64_t v12 = (char *)*((void *)this + 2);
            }

            while (v20 < v12 && *v20 == 24);
            if (v20 == v12 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1LL;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }

          goto LABEL_2;
        }

  int v35 = *(_DWORD *)(a2 + 128);
  if (v35 >= 4) {
    sub_101227BEC();
  }
  *(_DWORD *)(a1 + 192) |= 0x800u;
  *(_DWORD *)(a1 + 128) = v35;
  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x1000) == 0)
  {
LABEL_34:
    if ((v22 & 0x4000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

  unsigned int v37 = *(void *)(a1 + 48);
  unsigned int v38 = *(unsigned __int8 *)(v37 + 23);
  int v39 = v38;
  uint64_t v40 = *(void *)(v37 + 8);
  if ((v38 & 0x80u) == 0) {
    unsigned int v41 = *(unsigned __int8 *)(v37 + 23);
  }
  else {
    unsigned int v41 = v40;
  }
  if (v41 >= 0x80)
  {
    unsigned int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41,  a2);
    unsigned int v38 = *(unsigned __int8 *)(v37 + 23);
    uint64_t v40 = *(void *)(v37 + 8);
    uint64_t v3 = *(_DWORD *)(a1 + 116);
    int v39 = *(_BYTE *)(v37 + 23);
  }

  else
  {
    unsigned int v42 = 1;
  }

  if (v39 < 0) {
    unsigned int v38 = v40;
  }
  uint64_t v4 = (v4 + v42 + v38 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_73:
    uint64_t v43 = *(void *)(a1 + 56);
    int v44 = *(unsigned __int8 *)(v43 + 23);
    uint64_t v45 = v44;
    uint64_t v46 = *(void *)(v43 + 8);
    if ((v44 & 0x80u) == 0) {
      unsigned int v47 = *(unsigned __int8 *)(v43 + 23);
    }
    else {
      unsigned int v47 = v46;
    }
    if (v47 >= 0x80)
    {
      int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v47,  a2);
      int v44 = *(unsigned __int8 *)(v43 + 23);
      uint64_t v46 = *(void *)(v43 + 8);
      uint64_t v3 = *(_DWORD *)(a1 + 116);
      uint64_t v45 = *(_BYTE *)(v43 + 23);
    }

    else
    {
      int v48 = 1;
    }

    if (v45 < 0) {
      int v44 = v46;
    }
    uint64_t v4 = (v4 + v48 + v44 + 1);
  }

  unsigned int v37 = *(void *)(a1 + 56);
  unsigned int v38 = *(unsigned __int8 *)(v37 + 23);
  int v39 = v38;
  uint64_t v40 = *(void *)(v37 + 8);
  if ((v38 & 0x80u) == 0) {
    unsigned int v41 = *(unsigned __int8 *)(v37 + 23);
  }
  else {
    unsigned int v41 = v40;
  }
  if (v41 >= 0x80)
  {
    unsigned int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41,  a2);
    unsigned int v38 = *(unsigned __int8 *)(v37 + 23);
    uint64_t v40 = *(void *)(v37 + 8);
    uint64_t v3 = *(_DWORD *)(a1 + 84);
    int v39 = *(_BYTE *)(v37 + 23);
  }

  else
  {
    unsigned int v42 = 1;
  }

  if (v39 < 0) {
    unsigned int v38 = v40;
  }
  uint64_t v4 = (v4 + v42 + v38 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_73:
    uint64_t v43 = *(void *)(a1 + 64);
    int v44 = *(unsigned __int8 *)(v43 + 23);
    uint64_t v45 = v44;
    uint64_t v46 = *(void *)(v43 + 8);
    if ((v44 & 0x80u) == 0) {
      unsigned int v47 = *(unsigned __int8 *)(v43 + 23);
    }
    else {
      unsigned int v47 = v46;
    }
    if (v47 >= 0x80)
    {
      int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v47,  a2);
      int v44 = *(unsigned __int8 *)(v43 + 23);
      uint64_t v46 = *(void *)(v43 + 8);
      uint64_t v3 = *(_DWORD *)(a1 + 84);
      uint64_t v45 = *(_BYTE *)(v43 + 23);
    }

    else
    {
      int v48 = 1;
    }

    if (v45 < 0) {
      int v44 = v46;
    }
    uint64_t v4 = (v4 + v48 + v44 + 1);
  }

  uint64_t v17 = *(void *)(v5 + 88);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1019A0978 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v17,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_70;
  }

        uint64_t v27 = (void *)*v27;
        unsigned int v25 = v39;
        if (!v27) {
          goto LABEL_67;
        }
      }
    }

    dispatch_once(&qword_1019348D0, &stru_101820EA0);
    goto LABEL_61;
  }

  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    sub_10122E598();
    __break(1u);
    goto LABEL_64;
  }

  sub_100145D04((int **)a2, &v51);
  if (a5[16])
  {
    v44.__r_.__value_.__s.__size_ = 2;
    strcpy((char *)&v44, "))");
    uint64_t v43 = 5;
    strcpy(__s, " AND ");
    uint64_t v12 = std::string::append(&v44, __s, 5uLL);
    uint64_t v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(v38, "RtLoiGroupId");
    if (!a5[16]) {
      sub_100036CD8();
    }
    sub_100053C78((const void **)v38, a5, (uint64_t)v40);
    if ((v41 & 0x80u) == 0) {
      int v14 = v40;
    }
    else {
      int v14 = (void **)v40[0];
    }
    if ((v41 & 0x80u) == 0) {
      uint64_t v15 = v41;
    }
    else {
      uint64_t v15 = (std::string::size_type)v40[1];
    }
    uint64_t v16 = std::string::append(&v45, (const std::string::value_type *)v14, v15);
    uint64_t v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v37 = 10;
    strcpy((char *)v36, " GROUP BY ");
    uint64_t v18 = std::string::append(&v46, (const std::string::value_type *)v36, 0xAuLL);
    uint64_t v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v20 = std::string::append(&v47, "RecordingUUID");
    int v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    int v22 = std::string::append(&v48, ")");
    uint64_t v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    cap = v22->__r_.__value_.__l.__cap_;
    __p = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (cap >= 0) {
      unsigned int v25 = HIBYTE(cap);
    }
    else {
      unsigned int v25 = *((void *)&__p + 1);
    }
    std::string::append(&v51, p_p, v25);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
    if (v37 < 0) {
      operator delete(v36[0]);
    }
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    if (v43 < 0) {
      operator delete(*(void **)__s);
    }
    uint64_t v26 = (void *)v44.__r_.__value_.__r.__words[0];
  }

  else
  {
    v47.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v47, ")) GROUP BY ");
    uint64_t v28 = std::string::append(&v47, "RecordingUUID");
    int v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    int v30 = std::string::append(&v48, ")");
    int v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    cap = v30->__r_.__value_.__l.__cap_;
    __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      unsigned int v32 = (const std::string::value_type *)&__p;
    }
    else {
      unsigned int v32 = (const std::string::value_type *)__p;
    }
    if (cap >= 0) {
      int v33 = HIBYTE(cap);
    }
    else {
      int v33 = *((void *)&__p + 1);
    }
    std::string::append(&v51, v32, v33);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v26 = (void *)v47.__r_.__value_.__r.__words[0];
  }

  operator delete(v26);
LABEL_56:
  sub_100142E04(*(void *)a1, (uint64_t)&v51, a3, a4, a6);
}

  uint64_t v23 = *(void *)(a2 + 160);
  *(_DWORD *)(a1 + 228) |= 0x200000u;
  *(void *)(a1 + 160) = v23;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x400000) == 0)
  {
LABEL_49:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }

          self->_vehicularLastNoHintsTime = 0.0;
LABEL_65:
          self->_prevVehicularHints = v38;
          goto LABEL_77;
        }

    sub_1011F6BE4(v27);
    sub_1001BA1BC(v28);
    goto LABEL_65;
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101835C50);
  }
  uint64_t v15 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = (void *)(a1 + 96);
    *(_DWORD *)buf = 68289282;
    int v31 = 0;
    unsigned int v32 = 2082;
    int v33 = "";
    BOOL v34 = 2082;
    int v35 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Attempt to reduceFreePages with incremental vacuum disabled, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  uint64_t v9 = 3LL;
LABEL_65:
  (*(void (**)(void *))(*(void *)v4 + 24LL))(v4);
  return v9;
}

            int v39 = v46;
          }

          while (i < (unint64_t)v46);
        }

        int v50 = (_OWORD *)(i - 96);
        if (i - 96 != a1)
        {
          unsigned int v51 = *(_OWORD *)(i - 80);
          *(_OWORD *)a1 = *v50;
          *(_OWORD *)(a1 + 16) = v51;
          int v52 = *(_OWORD *)(i - 64);
          int v53 = *(_OWORD *)(i - 48);
          int v54 = *(_OWORD *)(i - 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
          *(_OWORD *)(a1 + 48) = v53;
          *(_OWORD *)(a1 + 64) = v54;
          *(_OWORD *)(a1 + 32) = v52;
        }

        *(void *)(i - 80) = v222;
        _BYTE *v50 = v213;
        *(_DWORD *)(i - 72) = v25;
        *(_DWORD *)(i - 60) = v210;
        *(void *)(i - 68) = v207;
        *(double *)(i - 56) = v26;
        *(void *)(i - 48) = v27;
        *(_DWORD *)(i - 40) = v21;
        *(_OWORD *)(i - 23) = *(_OWORD *)&v198[13];
        *(_OWORD *)(i - 36) = *(_OWORD *)v198;
        if (v30 < (unint64_t)v33)
        {
LABEL_70:
          sub_1003F9D38(a1, i - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        unsigned int v55 = sub_1003FB330(a1, i - 96);
        if (!sub_1003FB330(i, (uint64_t)a2))
        {
          if (v55) {
            continue;
          }
          goto LABEL_70;
        }

        a2 = (_OWORD *)(i - 96);
        if (!v55) {
          goto LABEL_1;
        }
        return;
    }
  }

            unsigned int v38 = v45;
          }

          while (i < (unint64_t)v45);
        }

        int v49 = (_OWORD *)(i - 96);
        if (i - 96 != a1)
        {
          int v50 = *(_OWORD *)(i - 80);
          *(_OWORD *)a1 = *v49;
          *(_OWORD *)(a1 + 16) = v50;
          unsigned int v51 = *(_OWORD *)(i - 64);
          int v52 = *(_OWORD *)(i - 48);
          int v53 = *(_OWORD *)(i - 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
          *(_OWORD *)(a1 + 48) = v52;
          *(_OWORD *)(a1 + 64) = v53;
          *(_OWORD *)(a1 + 32) = v51;
        }

        *int v49 = v212;
        *(void *)(i - 80) = v218;
        *(void *)(i - 72) = v25;
        *(double *)(i - 64) = v26;
        *(_OWORD *)(i - 56) = v209;
        *(_DWORD *)(i - 40) = v21;
        *(_OWORD *)(i - 23) = *(_OWORD *)&v200[13];
        *(_OWORD *)(i - 36) = *(_OWORD *)v200;
        if (v29 < (unint64_t)v32)
        {
LABEL_70:
          sub_1003FB838(a1, i - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        int v54 = sub_1003FCDBC(a1, i - 96);
        if (!sub_1003FCDBC(i, (uint64_t)a2))
        {
          if (v54) {
            continue;
          }
          goto LABEL_70;
        }

        a2 = (_OWORD *)(i - 96);
        if (!v54) {
          goto LABEL_1;
        }
        return;
    }
  }

  uint64_t v17 = *(void *)(v5 + 88);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1019A11B8 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v17,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_70;
  }

    uint64_t v43 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    *(void *)buf = sub_10080EB58(v43, buf);
    sub_100ABA288((uint64_t)(a1 + 57), (double *)buf, (unsigned int *)&v73);
    return;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101843788);
  }
  unsigned int v32 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_FAULT))
  {
    int v33 = *a2;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "#Warning, Fusion Controller, received unhandled motion state mediator notification %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101843788);
    }
    BOOL v34 = *a2;
    LODWORD(v73) = 67240192;
    DWORD1(v73) = v34;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  17LL,  "#Warning, Fusion Controller, received unhandled motion state mediator notification %{public}d",  &v73,  8);
    int v36 = (uint8_t *)v35;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLLocationControllerFusion::feedMotionStateMediatorNotification(const CLMotionStateMediator_Type::Not ification &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v35);
    if (v36 != buf) {
      free(v36);
    }
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C,  v5[29],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }

  uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
  if (v27 >= 0x80)
  {
    uint64_t v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
    uint64_t v3 = a1[16];
  }

  else
  {
    uint64_t v28 = 2;
  }

  uint64_t v4 = (v28 + v4);
  if ((v3 & 0x1000) != 0)
  {
LABEL_68:
    int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[14];
    if ((v29 & 0x80000000) != 0)
    {
      int v30 = 11;
    }

    else if (v29 >= 0x80)
    {
      int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2) + 1;
    }

    else
    {
      int v30 = 2;
    }

    uint64_t v4 = (v30 + v4);
  }

  sub_1002F0B04(buf);
  int v44 = sub_1002A6F64(*(uint64_t *)buf, "EEDForceEnable", (BOOL *)&v70);
  if ((_BYTE)v70) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v46 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_71;
  }
  unsigned int v47 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    int v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if (!v45) {
      goto LABEL_77;
    }
  }

  else
  {
LABEL_71:
    if (!v45) {
      goto LABEL_77;
    }
  }

  *(_WORD *)(a1 + 56) = 257;
  *(_BYTE *)(a1 + 59) = 1;
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  int v49 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    int v50 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2Cfg,inst,%{public}d,force enabling EED",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    int v64 = *(_DWORD *)a1;
    v70 = 67240192;
    v71 = v64;
    LODWORD(v67) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2Cfg,inst,%{public}d,force enabling EED",  &v70,  v67);
    int v66 = (uint8_t *)v65;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v65);
    if (v66 != buf) {
      free(v66);
    }
  }

  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

    int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 100);
    if ((v22 & 0x80000000) != 0)
    {
      uint64_t v23 = 10;
    }

    else if (v22 >= 0x80)
    {
      uint64_t v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 172);
    }

    else
    {
      uint64_t v23 = 1;
    }

    v5 += v23 + 1;
    if ((v3 & 0x8000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_70;
  }

      sub_100008BDC();
  }

  int v14 = 0.0;
  LODWORD(v7) = 0;
  uint64_t v13 = 0;
LABEL_14:
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v15 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = "Disable";
    if (v11 == 1) {
      uint64_t v16 = "Ongoing";
    }
    *(_DWORD *)buf = 136446978;
    if (!v11) {
      uint64_t v16 = "Activate";
    }
    v132 = v16;
    if (v11) {
      uint64_t v17 = -1;
    }
    else {
      uint64_t v17 = v13;
    }
    if (v11) {
      uint64_t v18 = -1;
    }
    else {
      uint64_t v18 = v7;
    }
    v133 = 1026;
    v134 = v17;
    uint64_t v19 = 0xBFF0000000000000LL;
    if (!v11) {
      uint64_t v19 = *(void *)&v14;
    }
    v135 = 1026;
    v136 = v18;
    v137 = 2050;
    v138 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "CLAS,controlEarlyEscalation,command,%{public}s,lookbackTimeInSeconds,%{public}d,activeTimeInSeconds,%{public}d,act iveSpeedInMPH,%{public}.1lf",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v26 = "Disable";
    if (v11 == 1) {
      uint64_t v26 = "Ongoing";
    }
    int v33 = 136446978;
    if (!v11) {
      uint64_t v26 = "Activate";
    }
    BOOL v34 = v26;
    if (v11) {
      uint64_t v27 = -1;
    }
    else {
      uint64_t v27 = v13;
    }
    if (v11) {
      uint64_t v28 = -1;
    }
    else {
      uint64_t v28 = v7;
    }
    int v35 = 1026;
    int v36 = v27;
    int v29 = 0xBFF0000000000000LL;
    if (!v11) {
      int v29 = *(void *)&v14;
    }
    unsigned int v37 = 1026;
    unsigned int v38 = v28;
    int v39 = 2050;
    uint64_t v40 = v29;
    LODWORD(v32) = 34;
    int v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,controlEarlyEscalation,command,%{public}s,lookbackTimeInSeconds,%{public}d,activeTimeInSeconds, %{public}d,activeSpeedInMPH,%{public}.1lf",  COERCE_DOUBLE(136446978LL),  &v33,  v32);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::controlEarlyEscalation(EarlyEscalationControl) const",  "%s\n",  v30);
  }

  sub_1002F0B04(buf);
  unsigned int v32 = *(double *)(a1 + 2168);
  int v33 = sub_1002A82BC(*(uint64_t *)buf, "LCFusionGNSSHorizontalUncFloorForLowSVTracking_m", v85);
  BOOL v34 = *(double *)v85;
  if (!v33) {
    BOOL v34 = v32;
  }
  *(double *)(a1 + 2168) = v34;
  int v35 = v87;
  if (v87)
  {
    int v36 = (unint64_t *)&v87->__shared_owners_;
    do
      unsigned int v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  sub_1002F0B04(buf);
  else {
    unsigned int v38 = 0;
  }
  int v39 = v87;
  if (v87)
  {
    uint64_t v40 = (unint64_t *)&v87->__shared_owners_;
    do
      unsigned int v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  if (v38 == 2)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v44 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "LCFusion will always set output location type to Wifi",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion will always set output location type to Wifi",  v85,  v84);
      v81 = (uint8_t *)v80;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v80);
      if (v81 != buf) {
        free(v81);
      }
    }

    uint64_t v43 = 4;
  }

  else if (v38 == 1)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unsigned int v42 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "LCFusion will always set output location type to GPS",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion will always set output location type to GPS",  v85,  v84);
      v79 = (uint8_t *)v78;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v78);
      if (v79 != buf) {
        free(v79);
      }
    }

    uint64_t v43 = 1;
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v45 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "LCFusion output type will be determined based on max likelihood",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion output type will be determined based on max likelihood",  v85,  v84);
      v83 = (uint8_t *)v82;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v82);
      if (v83 != buf) {
        free(v83);
      }
    }

    uint64_t v43 = 0;
  }

  *(_DWORD *)(a1 + 160) = v43;
  sub_1002F0B04(buf);
  uint64_t v46 = sub_1002A7CB0(*(uint64_t *)buf, "LCFusionSetAllHypothesesLikelihoodsEqual", v85);
  if (LODWORD(v85[0])) {
    unsigned int v47 = v46;
  }
  else {
    unsigned int v47 = 0;
  }
  int v48 = v87;
  if (!v87) {
    goto LABEL_106;
  }
  int v49 = (unint64_t *)&v87->__shared_owners_;
  do
    int v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    if (!v47) {
      goto LABEL_112;
    }
  }

  else
  {
LABEL_106:
    if (!v47) {
      goto LABEL_112;
    }
  }

  *(_BYTE *)(a1 + 164) = 1;
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  unsigned int v51 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "LCFusion will set all likelihoods equal and ignore the likelihood update method",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v85[0]) = 0;
    LODWORD(v84) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion will set all likelihoods equal and ignore the likelihood update method",  v85,  v84);
    v77 = (uint8_t *)v76;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v76);
    if (v77 != buf) {
      free(v77);
    }
  }

  uint64_t v20 = *(void *)(v5 + 112);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_1019A1CE8 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v20,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }

  uint64_t v16 = *(void *)(v5 + 96);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A1D38 + 96);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v16,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_70;
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  sub_1000129D4((void ***)&v47);
  return v19;
}

  uint64_t v28 = 1;
LABEL_65:
  v73 = (uint64_t)(a1 + 229);
  BOOL v34 = sub_100ECF4A4((uint64_t)(a1 + 229), *((double *)&v92 + 1), 6.0);
  int v35 = v34;
  if (v34)
  {
    if ((v28 & 1) == 0)
    {
      int v36 = sub_100EB7DB8((uint64_t)a1, (uint64_t)&v81, (uint64_t)(a1 + 33));
      unsigned int v37 = v36;
      if (v36)
      {
        unsigned int v38 = 1.0;
        *((double *)a1 + 275) = *((double *)a1 + 275) + v38;
        v101 = 1;
        v100[2] = *((void *)&v97 + 1);
      }

      else
      {
        a1[275] = 0LL;
      }

      BYTE1(v100[14]) = v36;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      int v39 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = a1[275];
        *(_DWORD *)buf = 134349568;
        v105 = v4;
        v106 = 1026;
        *(_DWORD *)v107 = v37;
        *(_WORD *)&v107[4] = 2050;
        *(void *)&v107[6] = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,isSolutionAmbiguous,%{public}d,consecutiveAmbCount,%{public}.1lf",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        int v64 = a1[275];
        v75 = 134349568;
        v76 = v4;
        v77 = 1026;
        v78 = v37;
        v79 = 2050;
        v80 = v64;
        LODWORD(v72) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,isSolutionAmbiguous,%{public}d,consecutiveAmbCount,%{public}.1lf",  &v75,  v72,  v73);
        int v66 = (uint8_t *)v65;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)",  "%s\n",  v65);
        if (v66 != buf) {
          free(v66);
        }
      }
    }

    sub_100EA9A68((double *)a1 + 262, (uint64_t)v90, (uint64_t)(a1 + 33));
  }

  if ((v28 & 1) == 0)
  {
    unsigned int v41 = (*(uint64_t (**)(uint64_t *, int *, uint64_t *))(*a1 + 80))(a1, &v81, a1 + 33);
    if (!(_DWORD)v41) {
      goto LABEL_87;
    }
  }

  uint64_t v43 = a1[30];
  unsigned int v42 = a1[31];
  sub_100EB34B4((uint64_t)a1);
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  int v44 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    v105 = v4;
    v106 = 1026;
    *(_DWORD *)v107 = v43 != v42;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filterReset,shallReset,wasInitialized,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    v75 = 134349312;
    v76 = v4;
    v77 = 1026;
    v78 = v43 != v42;
    LODWORD(v72) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filterReset,shallReset,wasInitialized,%{public}d",  &v75,  v72);
    int v63 = (uint8_t *)v62;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)",  "%s\n",  v62);
    if (v63 != buf) {
      free(v63);
    }
  }

  sub_100ECA3FC((uint64_t)v85);
  sub_100ECA46C((uint64_t)&v81);
  uint64_t v45 = *(_OWORD *)(a2 + 80);
  v95 = *(_OWORD *)(a2 + 64);
  v96 = v45;
  uint64_t v46 = *(_OWORD *)(a2 + 112);
  v97 = *(_OWORD *)(a2 + 96);
  v98 = v46;
  unsigned int v47 = *(_OWORD *)(a2 + 16);
  v91 = *(_OWORD *)a2;
  v92 = v47;
  int v48 = *(_OWORD *)(a2 + 48);
  v93 = *(_OWORD *)(a2 + 32);
  v94 = v48;
  std::string::operator=(&v99, (const std::string *)(a2 + 128));
  unsigned int v41 = (uint64_t)memcpy(v100, (const void *)(a2 + 152), sizeof(v100));
  if (v43 == v42) {
    goto LABEL_87;
  }
  unsigned int v41 = (*(uint64_t (**)(uint64_t *, int *))(*a1 + 24))(a1, &v81);
  if ((v41 & 1) == 0)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v54 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v105 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "CLMMPED,%{public}.1lf,unable to re-initialize filter",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      v75 = 134349056;
      v76 = v4;
      LODWORD(v72) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMMPED,%{public}.1lf,unable to re-initialize filter",  &v75,  v72);
      v68 = (uint8_t *)v67;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)",  "%s\n",  v67);
      if (v68 != buf) {
        free(v68);
      }
    }

    uint64_t v17 = 0LL;
  }

  else
  {
LABEL_87:
    sub_100EB9C0C(v41, (uint64_t)&v81, (uint64_t **)a1 + 130);
    sub_100EB9CC4((uint64_t)a1, (uint64_t)&v81, (uint64_t)(a1 + 33), (uint64_t)(a1 + 133));
    if (!v35) {
      sub_100EBA0AC((uint64_t)a1, (uint64_t)&v81);
    }
    if (LOBYTE(v100[14]))
    {
      int v49 = *((double *)&v92 + 1);
      a1[29] = *((void *)&v92 + 1);
      if (*((_BYTE *)a1 + 10))
      {
        if (!v102
          && (LODWORD(v100[33]) <= 6 && ((0x58u >> SLOBYTE(v100[33])) & 1) != 0 && *((_BYTE *)a1 + 11)
           || !sub_100ECF4A4(v73, v49, 6.0)))
        {
          (*(void (**)(uint64_t *, int *, uint64_t *))(*a1 + 96))(a1, &v81, a1 + 33);
        }
      }
    }

    if (v74 != v85) {
      sub_100ECB440( (uint64_t)v74,  *(uint64_t *)&v85[0],  *((uint64_t *)&v85[0] + 1),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)&v85[0] + 1) - *(void *)&v85[0]) >> 4));
    }
    sub_100EBA3EC((uint64_t)(a1 + 33), (uint64_t)v90);
    int v50 = v96;
    *(_OWORD *)(a2 + 64) = v95;
    *(_OWORD *)(a2 + 80) = v50;
    unsigned int v51 = v98;
    *(_OWORD *)(a2 + 96) = v97;
    *(_OWORD *)(a2 + 112) = v51;
    int v52 = v92;
    *(_OWORD *)a2 = v91;
    *(_OWORD *)(a2 + 16) = v52;
    int v53 = v94;
    *(_OWORD *)(a2 + 32) = v93;
    *(_OWORD *)(a2 + 48) = v53;
    std::string::operator=((std::string *)(a2 + 128), &v99);
    memcpy((void *)(a2 + 152), v100, 0x118uLL);
    if (*(_BYTE *)(a2 + 264) && *(_BYTE *)(a2 + 265) && *(_DWORD *)(a2 + 280) == 3 && !*((_BYTE *)a1 + 12)) {
      *(_BYTE *)(a2 + 265) = 0;
    }
    uint64_t v17 = v28 ^ 1u;
  }

  sub_100ECA708((uint64_t)&v81);
  if (v5)
  {
LABEL_112:
    unsigned int v55 = (unint64_t *)&v5->__shared_owners_;
    do
      unsigned int v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v17;
}

  unsigned int v10 = *(_BYTE *)(a2 + 153);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 153) = v10;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "multiPeakPathLengthHarmonicMean", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }

  int v22 = *(void *)(a2 + 192);
  v5 |= 0x800000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 192) = v22;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristState", *(void *)(a1 + 136));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x3Bu);
  uint64_t v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }

  int v22 = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 100) = v22;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "onBodyFeature", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }

  int v39 = *(_BYTE *)(a2 + 387);
  v10 |= 0x800000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 387) = v39;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 224), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }

  uint64_t result = *(float *)(a2 + 212);
  v3 |= 0x1000000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 212) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xEu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000000LL) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              unsigned int v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            unsigned int v25 = 0LL;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              break;
            }
          }
        }

  int v36 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 212) |= 0x1000u;
  *(_DWORD *)(a1 + 144) = v36;
  unsigned int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x200) == 0)
  {
LABEL_35:
    if ((v10 & 0x40) == 0) {
      goto LABEL_36;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "nUseNearest", *(_DWORD *)(a1 + 176));
  uint64_t v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x200000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200), 0x18u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v14 & 0x800) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }

  unsigned int v32 = *(void *)(a2 + 48);
  v3 |= 0x20uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 48) = v32;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "metaMaxZgSegmentTime", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }

  uint64_t result = *(float *)(a2 + 112);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 112) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "kEnergyAndChaosOrSaturationMetRO", *(_BYTE *)(a1 + 163));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x68u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_66;
  }

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              unsigned int v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            unsigned int v25 = 0LL;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              break;
            }
          }
        }

  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "rawTruthMets", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x19u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }

        *(_DWORD *)(a1 + 12) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

  int v31 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 100) = v31;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "signalEventLimit", *(_DWORD *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }

      sub_100BFC27C();
    }

    uint64_t v16 = a2[1] & 0x1F;
    if (this) {
      std::string::operator=(this, v16);
    }
    else {
      sub_10111FBF0(a1, v16);
    }
    v4 += 2;
  }

  return v4;
}

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              unsigned int v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            unsigned int v25 = 0LL;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              break;
            }
          }
        }

  unsigned int v25 = *(_DWORD *)(a2 + 180);
  v3 |= 0x80000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 180) = v25;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "planarTimestampAtMaxSaturation", *(void *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 88), 0x17u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              unsigned int v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            unsigned int v25 = 0LL;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              break;
            }
          }
        }

        *(void *)(a1 + 8) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

  unsigned int v51 = *(_DWORD *)(a2 + 232);
  v6 |= 0x80000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 232) = v51;
  uint64_t v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "daysWithSteps30Days", *(_DWORD *)(a1 + 208));
  uint64_t v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176), 0xAu);
  if ((*(_DWORD *)(v3 + 244) & 0x400000) != 0) {
LABEL_11:
  }
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 238), 0xBu);
LABEL_12:
  uint64_t v5 = *(const PB::Base **)(v3 + 64);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 0xCu);
  }
  uint64_t v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192), 0xDu);
    uint64_t v6 = *(_DWORD *)(v3 + 244);
    if ((v6 & 0x800000) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_68;
    }
  }

  else if ((v6 & 0x800000) == 0)
  {
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 239), 0xEu);
  uint64_t v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

        *(_DWORD *)(a1 + 8) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

              *(void *)(a1 + 8) = v24;
              goto LABEL_70;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                int v39 = 0;
                uint64_t v40 = 0;
                int v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }

                  unsigned int v41 = v27++;
                  unsigned int v42 = *(_BYTE *)(v28 + v41);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  int v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    uint64_t v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_68;
              }

              int v29 = 0;
              int v30 = 0;
              int v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                unsigned int v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = -(v31 & 1) ^ ((int)v31 >> 1);
LABEL_70:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_70;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 28) = v34;
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 8) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        int v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        int v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          BOOL v34 = 0;
          int v35 = 0;
          unsigned int v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              unsigned int v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }

            int v36 = v21++;
            unsigned int v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            int v14 = v35++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              goto LABEL_59;
            }
          }

          if (*((_BYTE *)this + 24)) {
            unsigned int v25 = 0LL;
          }
LABEL_59:
          uint64_t v3 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unsigned int v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            int v21 = v3;
            int v14 = v24++ > 8;
            if (v14)
            {
              unsigned int v25 = 0LL;
              break;
            }
          }
        }

  int v14 = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 100) = v14;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "numGaitMetrics", *(_DWORD *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x12u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }

  int v33 = *(void *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 120) = v33;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x4000000) == 0) {
      return result;
    }
LABEL_66:
    int v35 = *(_DWORD *)(a2 + 196);
    *(_DWORD *)(result + 220) = v3 | 0x4000000;
    *(_DWORD *)(result + 196) = v35;
    return result;
  }

  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 208));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000000) != 0) {
    goto LABEL_65;
  }
LABEL_32:
  if ((v5 & 0x100000) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 168));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x1Fu);
  if ((*(_DWORD *)(v3 + 220) & 0x4000000) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 196), 0x20u);
  }
  return result;
}

  unsigned int v32 = *(_DWORD *)(a2 + 124);
  v5 |= 0x200000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 124) = v32;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "seq", *(_DWORD *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 0x16u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 116);
  v3 |= 0x4000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 116) = v15;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "bodyTurnDetectionVerticalRotationSrc", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 0xDu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_66;
  }

  int v33 = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 116) = v33;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0) {
      return result;
    }
LABEL_66:
    int v35 = *(_BYTE *)(a2 + 122);
    *(_DWORD *)(result + 128) = v3 | 0x8000000;
    *(_BYTE *)(result + 122) = v35;
    return result;
  }

  PB::TextFormatter::format(this, "srcYawBufferLongStd", *(float *)(a1 + 116));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if (v5 < 0) {
    goto LABEL_65;
  }
LABEL_32:
  if ((v5 & 4) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x1Fu);
  if ((*(_DWORD *)(v3 + 128) & 0x8000000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 122), 0x20u);
  }
  return result;
}

  int v35 = *(_BYTE *)(a2 + 158);
  *(_DWORD *)(a1 + 164) |= 0x10000000u;
  *(_BYTE *)(a1 + 158) = v35;
  unsigned int v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x1Au);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }

  uint64_t result = *(double *)(a2 + 136);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 136) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x20000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }

  PB::TextFormatter::format(this, "verticalOscCadence", *(double *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }

  int v30 = *(void **)a1;
  int v31 = *(void **)(*(void *)a1 + 8 * v5);
  if (v31)
  {
    char *v12 = *v31;
LABEL_72:
    _BYTE *v31 = v12;
    goto LABEL_73;
  }

  char *v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v30[v5] = a1 + 4;
  if (*v12)
  {
    unsigned int v32 = *(void *)(*v12 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }

    else
    {
      v32 &= v7 - 1;
    }

    int v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }

uint64_t sub_10006EA98( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes( 1LL,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2);
    while (v6 < *(int *)(v5 + 16));
  }

  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(*(void *)(v5 + 32) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 40));
  }

  if (*(int *)(v5 + 64) >= 1)
  {
    uint64_t v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(*(void *)(v5 + 56) + 4 * v8++),  (int)a2,  a4);
    while (v8 < *(int *)(v5 + 64));
  }

  return result;
}

uint64_t sub_10006EB5C(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    int v5 = *(_DWORD *)(a1 + 16);
  }

  else
  {
    uint64_t v4 = 0LL;
    int v5 = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        int v3 = *(_DWORD *)(a1 + 16);
        char v8 = *(_BYTE *)(v6 + 23);
      }

      else
      {
        int v11 = 1;
      }

      if (v8 < 0) {
        int v7 = v9;
      }
      v5 += v11 + v7;
      ++v4;
    }

    while (v4 < v3);
  }

  int v12 = *(_DWORD *)(a1 + 40);
  int v13 = v12 + v5;
  if (v12 >= 1)
  {
    uint64_t v14 = 0LL;
    do
    {
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006E294( *(void *)(*(void *)(a1 + 32) + 8 * v14),  a2);
      int v16 = (int)v15;
      else {
        int v17 = 1;
      }
      v13 += v16 + v17;
      ++v14;
    }

    while (v14 < *(int *)(a1 + 40));
  }

  int v18 = *(_DWORD *)(a1 + 64);
  if (v18 < 1)
  {
    int v20 = 0;
  }

  else
  {
    uint64_t v19 = 0LL;
    int v20 = 0;
    do
    {
      if ((v21 & 0x80000000) != 0)
      {
        int v22 = 10;
      }

      else if (v21 >= 0x80)
      {
        int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
        int v18 = *(_DWORD *)(a1 + 64);
      }

      else
      {
        int v22 = 1;
      }

      v20 += v22;
      ++v19;
    }

    while (v19 < v18);
  }

  uint64_t result = (v20 + v13 + v18);
  *(_DWORD *)(a1 + 72) = result;
  return result;
}

void sub_10006ECB4(uint64_t a1, void *lpsrc)
{
}

void sub_10006ED00(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10006E380(a1, a2);
  }

uint64_t sub_10006ED40()
{
  return 1LL;
}

void *sub_10006ED48@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.LocationSimilarityListData");
}

BOOL sub_10006ED58(unsigned int a1)
{
  return a1 < 4;
}

uint64_t sub_10006ED64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10181AE28;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(void *)(a1 + 184) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 176) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 192) = 0;
  sub_10006EE44(a1, a2);
  return a1;
}

void sub_10006EE00(_Unwind_Exception *a1)
{
  uint64_t v6 = (void *)*((void *)v1 + 17);
  if (v6) {
    operator delete[](v6);
  }
  sub_10008D0EC(v4);
  sub_10008D0EC(v3);
  sub_10008D0EC(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10006EE44(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v45,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  7329LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v45,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v44, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v45);
  }

  sub_10008D1B0((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), a2 + 8);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56),  *(_DWORD *)(a2 + 64) + *(_DWORD *)(a1 + 64));
  if (*(int *)(a2 + 64) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 56) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 68);
      uint64_t v8 = *(int *)(a1 + 64);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56),  v7 + 1);
          int v7 = *(_DWORD *)(a1 + 68);
        }

        *(_DWORD *)(a1 + 68) = v7 + 1;
        unint64_t v10 = operator new(0x30uLL);
        v10[2] = 0LL;
        v10[3] = 0LL;
        *((_DWORD *)v10 + 8) = 0;
        *unint64_t v10 = off_10181A9F0;
        v10[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v10[5] = 0LL;
        uint64_t v11 = *(void *)(a1 + 56);
        uint64_t v12 = *(int *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 56);
        *(_DWORD *)(a1 + 64) = v8 + 1;
        unint64_t v10 = *(void **)(v9 + 8 * v8);
      }

      sub_10006ADCC((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 64));
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80),  *(_DWORD *)(a2 + 88) + *(_DWORD *)(a1 + 88));
  if (*(int *)(a2 + 88) >= 1)
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + 80) + 8 * v13);
      int v15 = *(_DWORD *)(a1 + 92);
      uint64_t v16 = *(int *)(a1 + 88);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(a1 + 96))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80),  v15 + 1);
          int v15 = *(_DWORD *)(a1 + 92);
        }

        *(_DWORD *)(a1 + 92) = v15 + 1;
        int v18 = operator new(0x38uLL);
        v18[1] = 0LL;
        v18[2] = 0LL;
        void *v18 = off_10181AA68;
        *((_DWORD *)v18 + 6) = 1;
        *((_WORD *)v18 + 14) = 0;
        v18[5] = 1LL;
        v18[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_DWORD *)v18 + 12) = 0;
        uint64_t v19 = *(void *)(a1 + 80);
        uint64_t v20 = *(int *)(a1 + 88);
        *(_DWORD *)(a1 + 88) = v20 + 1;
        *(void *)(v19 + 8 * v20) = v18;
      }

      else
      {
        uint64_t v17 = *(void *)(a1 + 80);
        *(_DWORD *)(a1 + 88) = v16 + 1;
        int v18 = *(void **)(v17 + 8 * v16);
      }

      sub_10006B44C((uint64_t)v18, v14);
      ++v13;
    }

    while (v13 < *(int *)(a2 + 88));
  }

  int v21 = *(_DWORD *)(a2 + 144);
  if (v21)
  {
    sub_10004AAFC(a1 + 136, *(_DWORD *)(a1 + 144) + v21);
    memcpy( (void *)(*(void *)(a1 + 136) + 4LL * *(int *)(a1 + 144)),  *(const void **)(a2 + 136),  4LL * *(int *)(a2 + 144));
    *(_DWORD *)(a1 + 144) += *(_DWORD *)(a2 + 144);
  }

  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x1FE) == 0) {
    goto LABEL_28;
  }
  if ((v22 & 2) != 0)
  {
    uint64_t v26 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 192) |= 2u;
    *(void *)(a1 + 32) = v26;
    int v22 = *(_DWORD *)(a2 + 192);
    if ((v22 & 4) == 0)
    {
LABEL_24:
      if ((v22 & 8) == 0) {
        goto LABEL_25;
      }
LABEL_48:
      unsigned int v28 = *(_DWORD *)(a2 + 48);
      if (v28 >= 6) {
        sub_101227C3C();
      }
      *(_DWORD *)(a1 + 192) |= 8u;
      *(_DWORD *)(a1 + 48) = v28;
      int v22 = *(_DWORD *)(a2 + 192);
      if ((v22 & 0x10) == 0)
      {
LABEL_26:
        if ((v22 & 0x80) == 0) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }

      goto LABEL_50;
    }
  }

  else if ((v22 & 4) == 0)
  {
    goto LABEL_24;
  }

  uint64_t v27 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 192) |= 4u;
  *(void *)(a1 + 40) = v27;
  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 8) != 0) {
    goto LABEL_48;
  }
LABEL_25:
  if ((v22 & 0x10) == 0) {
    goto LABEL_26;
  }
LABEL_50:
  unsigned int v29 = *(_DWORD *)(a2 + 52);
  if (v29 >= 4) {
    sub_101227C14();
  }
  *(_DWORD *)(a1 + 192) |= 0x10u;
  *(_DWORD *)(a1 + 52) = v29;
  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x80) != 0)
  {
LABEL_27:
    char v23 = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 192) |= 0x80u;
    *(_BYTE *)(a1 + 104) = v23;
    int v22 = *(_DWORD *)(a2 + 192);
  }

LABEL_59:
  *(_DWORD *)(a1 + 192) |= 0x400u;
  int v33 = *(void **)(a1 + 120);
  if (!v33)
  {
    int v33 = operator new(0x50uLL);
    v33[1] = 0LL;
    v33[2] = 0LL;
    void *v33 = off_10181ADB0;
    *((_DWORD *)v33 + 6) = 0;
    v33[4] = 0LL;
    v33[5] = 0LL;
    *((_DWORD *)v33 + 12) = 0;
    v33[8] = 0LL;
    v33[9] = 0LL;
    v33[7] = 0LL;
    *(void *)(a1 + 120) = v33;
  }

  uint64_t v34 = *(void *)(a2 + 120);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_1019A0880 + 120);
  }
  sub_10006E380((uint64_t)v33, v34);
  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x800) == 0)
  {
LABEL_33:
    if ((v22 & 0x1000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3E,  (int)a2,  *(double *)(v5 + 192),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }

          uint64_t v26 = v63;
          goto LABEL_60;
        }

        if (([v15 isDisputed] & 1) != 0 || !objc_msgSend(v15, "iso3166CountryCode2"))
        {
          if (qword_101934930 != -1) {
            dispatch_once(&qword_101934930, &stru_10183F288);
          }
          int v32 = (os_log_s *)qword_101934938;
          if (os_log_type_enabled((os_log_t)qword_101934938, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289282;
            v75 = 0;
            v76 = 2082;
            v77 = "";
            v78 = 2114;
            *(void *)v79 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:got a result that lacked a 2-letter ISO country code, terr:%{public, location:escape_only}@}",  buf,  0x1Cu);
            if (qword_101934930 != -1) {
              dispatch_once(&qword_101934930, &stru_10183F288);
            }
          }

          int v33 = (os_log_s *)qword_101934938;
          if (os_signpost_enabled((os_log_t)qword_101934938))
          {
            *(_DWORD *)buf = 68289282;
            v75 = 0;
            v76 = 2082;
            v77 = "";
            v78 = 2114;
            *(void *)v79 = v15;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "got a result that lacked a 2-letter ISO country code",  "{msg%{public}.0s:got a result that lacked a 2-letter ISO country code, terr:%{public, location:escape_only}@}",  buf,  0x1Cu);
          }

          goto LABEL_59;
        }

        unsigned int v29 = objc_msgSend(objc_msgSend(v15, "iso3166CountryCode2"), "copy");
        -[NSMutableArray addObject:](v9, "addObject:", v29);
        if (qword_101934930 != -1) {
          dispatch_once(&qword_101934930, &stru_10183F288);
        }
        uint64_t v26 = v63;
        int v30 = (os_log_s *)qword_101934938;
        if (os_log_type_enabled((os_log_t)qword_101934938, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = [v29 UTF8String];
          *(_DWORD *)buf = 68289283;
          v75 = 0;
          v76 = 2082;
          v77 = "";
          v78 = 2081;
          *(void *)v79 = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:adding resultant country code, countryCode:%{private, location:escape_only}s}",  buf,  0x1Cu);
        }

        uint64_t v13 = v62;
      }

      else
      {
        if (qword_101934930 != -1) {
          dispatch_once(&qword_101934930, &stru_10183F288);
        }
        uint64_t v26 = v63;
        uint64_t v27 = (os_log_s *)qword_101934938;
        if (os_log_type_enabled((os_log_t)qword_101934938, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          v75 = 0;
          v76 = 2082;
          v77 = "";
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:empty territory element?}",  buf,  0x12u);
          if (qword_101934930 != -1) {
            dispatch_once(&qword_101934930, &stru_10183F288);
          }
        }

        unsigned int v28 = (os_log_s *)qword_101934938;
        if (os_signpost_enabled((os_log_t)qword_101934938))
        {
          *(_DWORD *)buf = 68289026;
          v75 = 0;
          v76 = 2082;
          v77 = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "empty territory element?",  "{msg%{public}.0s:empty territory element?}",  buf,  0x12u);
        }
      }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101843788);
    }
    int v40 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v41 = *(_DWORD *)(a3 + 8);
      unsigned int v42 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)&buf[4] = v41;
      LOWORD(v82) = 1026;
      *(_DWORD *)((char *)&v82 + 2) = v42;
      HIWORD(v82) = 1026;
      *(_DWORD *)v83 = v39;
      *(_WORD *)&v83[4] = 1026;
      *(_DWORD *)&v83[6] = DWORD1(v73);
      *(_WORD *)&v83[10] = 1026;
      *(_DWORD *)&v83[12] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "In vehicle detected Adjusting motion state,type,%{public}d,confidence,%{public}d,to type,%{public}d,confidence,% {public}d,isSpeedZero,%{public}d",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101843788);
      }
      v59 = *(_DWORD *)(a3 + 8);
      v60 = *(_DWORD *)(a3 + 12);
      v64[0] = 67241216;
      v64[1] = v59;
      unsigned int v65 = 1026;
      int v66 = v60;
      int v67 = 1026;
      v68 = v39;
      v69 = 1026;
      v70 = DWORD1(v73);
      v71 = 1026;
      v72 = v21;
      LODWORD(v63) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "In vehicle detected Adjusting motion state,type,%{public}d,confidence,%{public}d,to type,%{public}d,confidence,% {public}d,isSpeedZero,%{public}d",  v64,  v63);
      int v62 = (uint8_t *)v61;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLLocationControllerFusion::feedMotionStateMediatorNotification(const CLMotionStateMediator_Type::N otification &, const CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v61);
      if (v62 != buf) {
        free(v62);
      }
    }

  *(_DWORD *)(a1 + 68) = v4;
  return v4;
}

  int v22 = *(_DWORD *)(a2 + 52);
  a1[37] |= 0x800u;
  a1[13] = v22;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  v5[24],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }

        dispatch_once(&qword_101934600, &stru_1018484E0);
        goto LABEL_46;
      }
    }

    else if (HIBYTE(v40))
    {
      int v15 = &__s1;
      while (*(unsigned __int8 *)v15 == *p_p)
      {
        int v15 = (void **)((char *)v15 + 1);
        ++p_p;
        if (!--v11) {
          goto LABEL_39;
        }
      }

      goto LABEL_27;
    }

  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

  int v52 = sub_1006E27E8();
  sub_100413284(v52, buf);
  int v53 = (_BYTE *)(v6 + 7);
  int v54 = sub_1002A6F64(*(uint64_t *)buf, "CompassIgnoreCalibration", (BOOL *)(v6 + 7));
  unsigned int v55 = v54;
  unsigned int v56 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_63;
  }
  unsigned int v57 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    int v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (v58)
  {
LABEL_63:
    if ((v54 & 1) != 0) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }

  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  if ((v55 & 1) == 0) {
LABEL_64:
  }
    *int v53 = 0;
LABEL_65:
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184DB38);
  }
  v59 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    v60 = *v53;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v60;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "compass ignoring calibration (%d)", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184DB38);
    }
    v98 = *v53;
    *(_DWORD *)v126 = 67109120;
    *(_DWORD *)&v126[4] = v98;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "compass ignoring calibration (%d)",  v126);
    v100 = (char *)v99;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCompassCalculator::CLCompassCalculator(const CFTimeInterval &, BOOL, BOOL)",  "%s\n",  v99);
    if (v100 != buf) {
      free(v100);
    }
  }

  LODWORD(v124) = 0;
  v61 = sub_1006E27E8();
  sub_100413284(v61, buf);
  int v62 = sub_1002A7CB0(*(uint64_t *)buf, "CompassInputFilter", &v124);
  int v63 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v64 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unsigned int v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

  int v66 = v124;
  else {
    int v67 = 0;
  }
  if (v67 == 1)
  {
    *(void *)(a1 + 400) = v124;
    *(void *)(a1 + 416) = v66;
    sub_10074DFF8((void *)(v6 + 400));
    *(void *)(a1 + 488) = v66;
    sub_10074DFF8((void *)(v6 + 472));
    *(void *)(a1 + 560) = v66;
    sub_10074DFF8((void *)(v6 + 544));
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184DB38);
  }
  v68 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    v69 = *(void *)(a1 + 400);
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = v69;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "compass input filter is using (%zuu) samples",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184DB38);
    }
    v101 = *(void *)(a1 + 400);
    *(_DWORD *)v126 = 134217984;
    *(void *)&v126[4] = v101;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "compass input filter is using (%zuu) samples",  (size_t)v126);
    v103 = (char *)v102;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCompassCalculator::CLCompassCalculator(const CFTimeInterval &, BOOL, BOOL)",  "%s\n",  v102);
    if (v103 != buf) {
      free(v103);
    }
  }

  v123 = 0;
  LODWORD(v124) = 0;
  v70 = sub_1006E27E8();
  sub_100413284(v70, buf);
  if (sub_1002A7CB0(*(uint64_t *)buf, "CompassOutputFilterSize", &v124))
  {
    v71 = sub_1006E27E8();
    sub_100413284(v71, v126);
    v72 = sub_1002A81F8(*(uint64_t *)v126, "CompassOutputFilterScale", (float *)&v123);
    v73 = *(std::__shared_weak_count **)&v126[8];
    if (*(void *)&v126[8])
    {
      v74 = (unint64_t *)(*(void *)&v126[8] + 8LL);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }

  else
  {
    v72 = 0;
  }

  v76 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v77 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  v79 = v124;
  else {
    v80 = 0;
  }
  if (v80 == 1)
  {
    v81 = v123;
    *(_DWORD *)(a1 + 624) = v124;
    *(_DWORD *)(a1 + 628) = v81;
    __asm { FMOV            V0.2S, #-1.0 }

    *(void *)(a1 + 632) = _D0;
    *(_DWORD *)(a1 + 648) = v79;
    *(_DWORD *)(a1 + 736) = v79;
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184DB38);
  }
  v87 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    v88 = *v122;
    v89 = *v12;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v88;
    *(_WORD *)&buf[8] = 2048;
    *(double *)&buf[10] = v89;
    _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "compass heading output filter samples (%d) scale (%f)",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184DB38);
    }
    v104 = *v122;
    v105 = *v12;
    *(_DWORD *)v126 = 67109376;
    *(_DWORD *)&v126[4] = v104;
    *(_WORD *)&v126[8] = 2048;
    *(double *)&v126[10] = v105;
    LODWORD(v119) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "compass heading output filter samples (%d) scale (%f)",  v126,  v119);
    v107 = (char *)v106;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCompassCalculator::CLCompassCalculator(const CFTimeInterval &, BOOL, BOOL)",  "%s\n",  v106);
    if (v107 != buf) {
      free(v107);
    }
  }

  *(_DWORD *)buf = 1097859072;
  v90 = vcvtd_n_u64_f64(*(float *)v6, 2uLL);
  *(_DWORD *)v126 = 1061158912;
  sub_10078889C(v6 + 1640, (_DWORD *)v6, (_DWORD *)v6, buf, 0xAu, 0xAu, v90, v126, 1);
  *(_DWORD *)buf = 1098907648;
  v91 = vcvtd_n_u64_f64(*(float *)v6, 2uLL);
  *(_DWORD *)v126 = 1067450368;
  sub_10078889C(a1 + 1976, (_DWORD *)v6, (_DWORD *)v6, buf, 0xAu, 0xAu, v91, v126, 1);
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184DB38);
  }
  v92 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    v93 = *(float *)v6;
    v94 = *v8;
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v93;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v94;
    _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_INFO,  "apple compass calculator, sample rate (%.3f) ignoreDatabase (1) manual (%d)",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184DB38);
    }
    v108 = *(float *)v6;
    v109 = *v8;
    *(_DWORD *)v126 = 134218240;
    *(double *)&v126[4] = v108;
    *(_WORD *)&v126[12] = 1024;
    *(_DWORD *)&v126[14] = v109;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "apple compass calculator, sample rate (%.3f) ignoreDatabase (1) manual (%d)",  COERCE_DOUBLE(v126),  18);
    v111 = (char *)v110;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCompassCalculator::CLCompassCalculator(const CFTimeInterval &, BOOL, BOOL)",  "%s\n",  v110);
    if (v111 != buf) {
      free(v111);
    }
  }

  return a1;
}

  if (SHIBYTE(v38) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v36[0]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
}

          v81 = v7;
          goto LABEL_60;
        }

        if ((v30 & 1) == 0)
        {
          v80 = v18;
          int v7 = v81;
LABEL_60:
          uint64_t v6 = v80;
          continue;
        }

        return;
    }
  }

  int v15 = *(void *)(v5 + 88);
  if (!v15) {
    int v15 = *(void *)(qword_1019A1D48 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  v15,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x2000) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }

  v79 = a2;
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  v80 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67241217;
    *(_DWORD *)v193 = v55;
    *(_WORD *)&v193[4] = 2049;
    *(void *)&v193[6] = *((void *)&v141 + 1);
    *(_WORD *)&v193[14] = 2049;
    *(double *)&v193[16] = v77;
    *(_WORD *)&v193[24] = 2049;
    *(double *)&v193[26] = v57;
    *(_WORD *)&v193[34] = 2049;
    *(double *)&v193[36] = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEBUG,  "VO2Max,vo2MaxEstimationStatus,%{public}d,priorVO2Max,%{private}f,biasAdjustment,%{private}f,longitudinalVO2Max,%{p rivate}f,sessionVO2Max,%{private}f",  buf,  0x30u);
  }

  a2 = v79;
  LODWORD(v135) = v55;
  v134 = a4;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    v150 = 67241217;
    *(_DWORD *)v151 = v55;
    *(_WORD *)&v151[4] = 2049;
    *(void *)&v151[6] = *((void *)&v141 + 1);
    *(_WORD *)&v151[14] = 2049;
    *(double *)&v151[16] = v77;
    *(_WORD *)&v151[24] = 2049;
    *(double *)&v151[26] = v57;
    *(_WORD *)&v151[34] = 2049;
    *(double *)&v151[36] = v52;
    v131 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,vo2MaxEstimationStatus,%{public}d,priorVO2Max,%{private}f,biasAdjustment,%{private}f,longitu dinalVO2Max,%{private}f,sessionVO2Max,%{private}f",  &v150,  48);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "VO2MaxEstimationStatus CLVO2MaxEstimator::evaluateVO2MaxModel(VO2MaxResult &, std::vector<VO2MaxSummary> &, double &, VO2MaxOutput &, const std::vector<VO2MaxSummary> &, CFAbsoluteTime, double)",  "%s\n",  v131);
    a2 = v79;
  }

  v82 = v145;
  v81 = v146;
  if (v145 == v146)
  {
    v120 = v145;
  }

  else
  {
    HIDWORD(v132) = v54;
    v133 = *(double *)&a2;
    v83 = a3 + 2;
    v84 = (char *)a3[1];
    do
    {
      v82[44] = 1;
      if ((unint64_t)v84 >= *v83)
      {
        v94 = 0xD37A6F4DE9BD37A7LL * ((uint64_t)&v84[-*a3] >> 3);
        v95 = v94 + 1;
        if (v94 + 1 > 0x1642C8590B21642LL) {
          sub_100007008();
        }
        else {
          v96 = v95;
        }
        if (v96) {
          v97 = (char *)sub_1002DF6FC((uint64_t)(a3 + 2), v96);
        }
        else {
          v97 = 0LL;
        }
        v98 = &v97[184 * v94];
        v99 = *(_OWORD *)v82;
        v100 = *((_OWORD *)v82 + 1);
        v101 = *((_OWORD *)v82 + 3);
        *((_OWORD *)v98 + 2) = *((_OWORD *)v82 + 2);
        *((_OWORD *)v98 + 3) = v101;
        *(_OWORD *)v98 = v99;
        *((_OWORD *)v98 + 1) = v100;
        v102 = *((_OWORD *)v82 + 4);
        v103 = *((_OWORD *)v82 + 5);
        v104 = *((_OWORD *)v82 + 7);
        *((_OWORD *)v98 + 6) = *((_OWORD *)v82 + 6);
        *((_OWORD *)v98 + 7) = v104;
        *((_OWORD *)v98 + 4) = v102;
        *((_OWORD *)v98 + 5) = v103;
        v105 = *((_OWORD *)v82 + 8);
        v106 = *((_OWORD *)v82 + 9);
        v107 = *((_OWORD *)v82 + 10);
        *((void *)v98 + 22) = *((void *)v82 + 22);
        *((_OWORD *)v98 + 9) = v106;
        *((_OWORD *)v98 + 10) = v107;
        *((_OWORD *)v98 + 8) = v105;
        v109 = (char *)*a3;
        v108 = (char *)a3[1];
        v110 = v98;
        if (v108 != (char *)*a3)
        {
          do
          {
            v111 = *(_OWORD *)(v108 - 184);
            v112 = *(_OWORD *)(v108 - 168);
            v113 = *(_OWORD *)(v108 - 152);
            *(_OWORD *)(v110 - 136) = *(_OWORD *)(v108 - 136);
            *(_OWORD *)(v110 - 152) = v113;
            *(_OWORD *)(v110 - 168) = v112;
            *(_OWORD *)(v110 - 184) = v111;
            v114 = *(_OWORD *)(v108 - 120);
            v115 = *(_OWORD *)(v108 - 104);
            v116 = *(_OWORD *)(v108 - 88);
            *(_OWORD *)(v110 - 72) = *(_OWORD *)(v108 - 72);
            *(_OWORD *)(v110 - 88) = v116;
            *(_OWORD *)(v110 - 104) = v115;
            *(_OWORD *)(v110 - 120) = v114;
            v117 = *(_OWORD *)(v108 - 56);
            v118 = *(_OWORD *)(v108 - 40);
            v119 = *(_OWORD *)(v108 - 24);
            *((void *)v110 - 1) = *((void *)v108 - 1);
            *(_OWORD *)(v110 - 24) = v119;
            *(_OWORD *)(v110 - 40) = v118;
            *(_OWORD *)(v110 - 56) = v117;
            v110 -= 184;
            v108 -= 184;
          }

          while (v108 != v109);
          v108 = (char *)*a3;
        }

        v84 = v98 + 184;
        *a3 = v110;
        a3[1] = v98 + 184;
        a3[2] = &v97[184 * v96];
        if (v108) {
          operator delete(v108);
        }
      }

      else
      {
        v85 = *(_OWORD *)v82;
        v86 = *((_OWORD *)v82 + 1);
        v87 = *((_OWORD *)v82 + 3);
        *((_OWORD *)v84 + 2) = *((_OWORD *)v82 + 2);
        *((_OWORD *)v84 + 3) = v87;
        *(_OWORD *)v84 = v85;
        *((_OWORD *)v84 + 1) = v86;
        v88 = *((_OWORD *)v82 + 4);
        v89 = *((_OWORD *)v82 + 5);
        v90 = *((_OWORD *)v82 + 7);
        *((_OWORD *)v84 + 6) = *((_OWORD *)v82 + 6);
        *((_OWORD *)v84 + 7) = v90;
        *((_OWORD *)v84 + 4) = v88;
        *((_OWORD *)v84 + 5) = v89;
        v91 = *((_OWORD *)v82 + 8);
        v92 = *((_OWORD *)v82 + 9);
        v93 = *((_OWORD *)v82 + 10);
        *((void *)v84 + 22) = *((void *)v82 + 22);
        *((_OWORD *)v84 + 9) = v92;
        *((_OWORD *)v84 + 10) = v93;
        *((_OWORD *)v84 + 8) = v91;
        v84 += 184;
      }

      a3[1] = v84;
      v82 += 46;
    }

    while (v82 != v81);
    v120 = v145;
    v82 = v146;
    *(double *)&a2 = v133;
  }

  *(_BYTE *)(a2 + 44) = v120 != v82;
  unsigned int v55 = v55;
  p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
  if ((_DWORD)v55)
  {
    a4 = v134;
  }

  else
  {
    *(double *)a2 = a7;
    *(void *)(a2 + 8) = *(void *)a1;
    *(double *)(a2 + 16) = v57;
    *(_BYTE *)(a2 + 24) = v142 != -1.0;
    *(_BYTE *)(a2 + 25) = *(_BYTE *)(a1 + 1320);
    a4 = v134;
    v121 = sub_100C8321C(a1) && *(_BYTE *)(a1 + 1328) != 0;
    *(_BYTE *)(a2 + 26) = v121;
    unsigned int v55 = 0LL;
    *(_BYTE *)(a2 + 27) = sub_100C8321C(a1);
  }

  int v54 = &off_10182CE18;
  if (SBYTE7(v56) < 0) {
    operator delete(v55[0]);
  }
}

  *(void *)buf = &v46;
  sub_100023498((void ***)buf);
}

  uint64_t v9 = *(_DWORD *)(a2 + 148);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 148) = v9;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x15u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }

  uint64_t v17 = *(void *)(a2 + 200);
  v5 |= 0x1000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 200) = v17;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfRepetitiveMotion", *(void *)(a1 + 96));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 224), 0x34u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }

  uint64_t v17 = *(_BYTE *)(a2 + 155);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 155) = v17;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000000LL) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "numPeaks", *(_DWORD *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 152), 0x16u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }

  uint64_t v34 = *(void *)(a2 + 248);
  v10 |= 8u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 248) = v34;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x100000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }

        if (PB::Reader::placeMark(this, v51, v29, v30)
          && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v31 + 16LL))(v31, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v51);
LABEL_62:
          uint64_t v2 = *((void *)this + 1);
          uint64_t v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_62;
    }
  }

  uint64_t result = *(float *)(a2 + 188);
  v3 |= 0x40000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 188) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800000000000LL) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000000000LL) == 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "crown", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208), 9u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000000LL) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_61;
  }

  uint64_t v31 = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) |= 0x8000000u;
  *(_DWORD *)(a1 + 204) = v31;
  unint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x800) == 0)
  {
LABEL_30:
    if ((v10 & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "nFullDM", *(_DWORD *)(a1 + 156));
  uint64_t v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x10000) == 0)
  {
LABEL_22:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x13u);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v14 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }

  int v15 = *(_DWORD *)(a2 + 108);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 108) = v15;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x40) == 0)
  {
LABEL_32:
    if ((v2 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20) == 0) {
      goto LABEL_30;
    }
LABEL_61:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 48));
    if ((*(_DWORD *)(a1 + 152) & 0x10000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_31;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x1Cu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_30:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 60), 0x1Eu);
  }

  uint64_t v31 = *(_BYTE *)(a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 132) = v3;
  *(_BYTE *)(result + 128) = v31;
  if ((*(_DWORD *)(a2 + 132) & 0x2000000) != 0) {
    goto LABEL_60;
  }
  return result;
}

  uint64_t v27 = *(_DWORD *)(a2 + 64);
  v3 |= 0x100uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 64) = v27;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "metaDtBwFirstSigImpact", *(void *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x19u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }

  uint64_t result = *(float *)(a2 + 104);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 104) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xCu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000000000LL) == 0) {
      goto LABEL_15;
    }
    goto LABEL_61;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 72) = v8;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "pedDistance", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 0x14u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }

  uint64_t v26 = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 108) = v26;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "regValRange", *(_DWORD *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x18u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x1Bu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }

  uint64_t v20 = *(_DWORD *)(a2 + 188);
  v3 |= 0x200000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 188) = v20;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "planarPassThru", *(_BYTE *)(a1 + 208));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x800000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 0x12u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }

  uint64_t result = *(double *)(a2 + 224);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 224) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtMean", *(double *)(a1 + 216));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
LABEL_61:
    PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtQ5", *(double *)(a1 + 232));
    if ((*(_DWORD *)(a1 + 248) & 0x20000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_31;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 232), 0x1Cu);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 208), 0x1Eu);
  }

  uint64_t v46 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 152) |= 0x2000u;
  *(_DWORD *)(a1 + 116) = v46;
  int v32 = *(_DWORD *)(a2 + 152);
  if ((v32 & 0x200) != 0) {
    goto LABEL_60;
  }
LABEL_46:
  if ((v32 & 0x1000) != 0)
  {
LABEL_47:
    int v33 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 152) |= 0x1000u;
    *(_DWORD *)(a1 + 112) = v33;
  }

  PB::TextFormatter::format(this, "dailySteps30DaysTotal", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 216), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_61;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x8000000000LL) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "doubleSupportPercentageRejectionStatus", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 176), 0xDu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }

  unsigned int v28 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 56) = v28;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x8000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0x1Au);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }

  uint64_t v27 = *(_DWORD *)(a2 + 68);
  v5 |= 0x80uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 68) = v27;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "rawIsVehicular", *(_DWORD *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x11u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }

  unint64_t v10 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 32) = v10;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "auxUserAccelInertial_Y", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 8u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }

  unsigned int v28 = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 104) = v28;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "srcAvgOmegaLong", *(float *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 121), 0x1Au);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }

  int v30 = *(_BYTE *)(a2 + 159);
  *(_DWORD *)(a1 + 164) |= 0x20000000u;
  *(_BYTE *)(a1 + 159) = v30;
  unint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "rHat_X", *(float *)(a1 + 120));
  uint64_t v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x15u);
  uint64_t v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }

  uint64_t result = *(double *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 24) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }

  PB::TextFormatter::format(this, "strideLengthReportingStatus", *(_DWORD *)(a1 + 208));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0x17u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000000LL) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }

LABEL_66:
  unsigned int v36 = *(_DWORD *)(a2 + 132);
  if (v36 >= 4) {
    sub_101227BC4();
  }
  *(_DWORD *)(a1 + 192) |= 0x1000u;
  *(_DWORD *)(a1 + 132) = v36;
  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x4000) == 0) {
    goto LABEL_36;
  }
LABEL_35:
  int v24 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 192) |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v24;
  int v22 = *(_DWORD *)(a2 + 192);
LABEL_36:
  if ((v22 & 0x8000) != 0)
  {
    int v25 = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a1 + 192) |= 0x8000u;
    *(_DWORD *)(a1 + 156) = v25;
    int v22 = *(_DWORD *)(a2 + 192);
  }

  uint64_t v27 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 152) |= 0x10u;
  *(void *)(a1 + 32) = v27;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x20) != 0) {
    goto LABEL_67;
  }
LABEL_13:
  if ((v5 & 0x40) == 0) {
    goto LABEL_14;
  }
LABEL_68:
  unsigned int v29 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 152) |= 0x40u;
  *(void *)(a1 + 56) = v29;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x80) != 0)
  {
LABEL_15:
    int v7 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 152) |= 0x80u;
    *(void *)(a1 + 64) = v7;
    uint64_t v5 = *(_DWORD *)(a2 + 152);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_68;
  }

      v95 = 0LL;
      v96 = 0LL;
      v97 = 0LL;
      int v64 = sub_100D74AD8();
      if (sub_100D755DC(v64, uu, (uint64_t)&v95))
      {
        if (v101 == v102) {
          goto LABEL_109;
        }
        unsigned int v65 = v95;
        if (v95 == v96) {
          goto LABEL_109;
        }
        int v66 = *((double *)v95 + 7);
        int v67 = *((double *)v95 + 8);
        self->fUserInfo.hrmax = v67;
        self->fUserInfo.betaBlockerUse = a3->var6;
        v68 = *((void *)v65 + 2);
        v69 = *((_DWORD *)v65 + 45);
        *(void *)buf = 0LL;
        LODWORD(v93) = 0;
        v122[0] = 0LL;
        sub_100300684((unsigned int *)&v93, &a3->var5, v94);
        sub_100C82690( *(uint64_t *)v94,  (uint64_t *)&v101,  (__int128 **)&__p,  (__int128 *)&self->fUserInfo.gender,  v68,  v69,  dst,  *(double *)&dst[16],  a3->var3,  v66);
        v70 = BYTE5(v126[14]) && BYTE4(v126[14]) == 0;
        v71 = !v70;
        if (v70)
        {
          if (qword_1019346E0 != -1) {
            dispatch_once(&qword_1019346E0, &stru_101831B18);
          }
          v80 = (os_log_s *)qword_1019346E8;
          if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_ERROR,  "Stopping pre-processing due to age unexpectedly no longer being set after the initial check. Will retry later.",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019346E0 != -1) {
              dispatch_once(&qword_1019346E0, &stru_101831B18);
            }
            LOWORD(v122[0]) = 0;
            LODWORD(v92) = 2;
            v86 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  16LL,  "Stopping pre-processing due to age unexpectedly no longer being set after the initial check. Will retry later.",  v122,  v92);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLVO2MaxService retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:]",  "%s\n",  v86);
            if (v86 != buf) {
              free(v86);
            }
          }

          *(_DWORD *)(v5 + 136) |= 4u;
          -[CLVO2MaxService updateRetrocomputeStatus:unavailableReasons:]( self,  "updateRetrocomputeStatus:unavailableReasons:",  0LL);
          uint64_t v12 = 1;
        }

        else
        {
          v93 = 0.0;
          v72 = sub_1006E27E8();
          sub_100413284(v72, buf);
          v73 = sub_1002A82BC(*(uint64_t *)buf, "VO2MaxRetrocomputeEstimateTestAddend", &v93);
          sub_10000AE14((uint64_t)buf);
          if (v73)
          {
            if (qword_1019346E0 != -1) {
              dispatch_once(&qword_1019346E0, &stru_101831B18);
            }
            v74 = (os_log_s *)qword_1019346E8;
            if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)&buf[4] = v93;
              _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "For testing purposes, incrementing VO2Max estimate by %{public}f units",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019346E0 != -1) {
                dispatch_once(&qword_1019346E0, &stru_101831B18);
              }
              LODWORD(v122[0]) = 134349056;
              *(void **)((char *)v122 + 4) = *(void **)&v93;
              LODWORD(v92) = 12;
              v91 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "For testing purposes, incrementing VO2Max estimate by %{public}f units",  v122,  v92);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:]",  "%s\n",  v91);
              if (v91 != buf) {
                free(v91);
              }
            }

            *(double *)&v126[5] = v93 + *(double *)&v126[5];
            *(double *)&v126[13] = v93 + *(double *)&v126[13];
          }

          v75 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", var2);
          if (qword_1019346E0 != -1) {
            dispatch_once(&qword_1019346E0, &stru_101831B18);
          }
          v76 = (os_log_s *)qword_1019346E8;
          if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
          {
            v77 = -[NSUUID UUIDString](v75, "UUIDString");
            v78 = -1.0;
            *(_DWORD *)buf = 138478339;
            *(void *)&buf[4] = v77;
            *(_WORD *)&buf[12] = 2049;
            *(void *)&buf[14] = *(void *)&v128[0];
            *(_WORD *)&buf[22] = 2049;
            *(double *)&buf[24] = v78;
            _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Retrocompute result for sessionId %{private}@: old estimate: %{private}f, new estimate: %{private}f",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019346E0 != -1) {
              dispatch_once(&qword_1019346E0, &stru_101831B18);
            }
            v87 = qword_1019346E8;
            v88 = -[NSUUID UUIDString](v75, "UUIDString");
            v89 = -1.0;
            LODWORD(v122[0]) = 138478339;
            *(void **)((char *)v122 + 4) = v88;
            WORD2(v122[1]) = 2049;
            *(void **)((char *)&v122[1] + 6) = *(void **)&v128[0];
            HIWORD(v122[2]) = 2049;
            v122[3] = *(void **)&v89;
            LODWORD(v92) = 32;
            v90 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v87,  0LL,  "Retrocompute result for sessionId %{private}@: old estimate: %{private}f, new estimate: %{private}f",  v122,  v92);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:]",  "%s\n",  v90);
            if (v90 != buf) {
              free(v90);
            }
          }

          sub_100300778((uint64_t)v121, (__int128 *)dst);
          -[CLVO2MaxService persistRetrocomputeResultsToStagingTables:]( self,  "persistRetrocomputeResultsToStagingTables:",  v121);
          sub_10030089C((uint64_t)v121);
          uint64_t v12 = 2;
        }

        v81 = *(void **)v94;
        *(void *)v94 = 0LL;
        if (v81) {
          sub_100306F68((uint64_t)v94, v81);
        }
        if (v71)
        {
LABEL_109:
          v103[0] = *(_OWORD *)dst;
          *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)&dst[9];
          v105 = 0LL;
          v106 = 0LL;
          v104 = 0LL;
          sub_1002E2234( &v104,  (const void *)v125,  *((uint64_t *)&v125 + 1),  0xD37A6F4DE9BD37A7LL * ((uint64_t)(*((void *)&v125 + 1) - v125) >> 3));
          v112 = *(_OWORD *)&v126[11];
          v113 = *(_OWORD *)&v126[13];
          v114 = *(_OWORD *)&v126[15];
          v115 = *(_OWORD *)&v126[17];
          v108 = *(_OWORD *)&v126[3];
          v109 = *(_OWORD *)&v126[5];
          v110 = *(_OWORD *)&v126[7];
          v111 = *(_OWORD *)&v126[9];
          v107 = *(_OWORD *)&v126[1];
          v116 = v127;
          v117[0] = v128[0];
          *(_OWORD *)((char *)v117 + 12) = *(_OWORD *)((char *)v128 + 12);
          if (SHIBYTE(v130) < 0)
          {
            sub_1010DD48C(&v118, (void *)__src, *((unint64_t *)&__src + 1));
          }

          else
          {
            v118 = __src;
            v119 = v130;
          }

          v120 = var7;
          -[CLVO2MaxService updateRetrocomputeHistory:withResult:]( self,  "updateRetrocomputeHistory:withResult:",  v5,  v103);
          if (SHIBYTE(v119) < 0) {
            operator delete((void *)v118);
          }
          if (v104)
          {
            v105 = v104;
            operator delete(v104);
          }

          uint64_t v12 = 0;
        }
      }

      else
      {
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101831B18);
        }
        v79 = (os_log_s *)qword_1019346E8;
        if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Query for pre-existing summaries for current session failed due to device lock",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346E0 != -1) {
            dispatch_once(&qword_1019346E0, &stru_101831B18);
          }
          LOWORD(v122[0]) = 0;
          LODWORD(v92) = 2;
          v84 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Query for pre-existing summaries for current session failed due to device lock",  v122,  v92);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:]",  "%s\n",  v84);
          if (v84 != buf) {
            free(v84);
          }
        }

        uint64_t v12 = 2;
      }

      if (v95)
      {
        v96 = (char *)v95;
        operator delete(v95);
      }

      goto LABEL_119;
    }

    memset(v122, 0, 24);
    if (sub_100E3F268( (uint64_t)self->fStagingOutputStore.__ptr_.__value_,  (char **)v122,  *(double *)&dst[16] + -18144000.0,  *(double *)&dst[16]) == 109)
    {
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101831B18);
      }
      int v18 = (os_log_s *)qword_1019346E8;
      if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Query for staged summaries failed due to device lock",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101831B18);
        }
        LOWORD(v95) = 0;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Query for staged summaries failed due to device lock",  &v95,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:]",  "%s\n",  v19);
        if (v19 != buf) {
          free(v19);
        }
      }
    }

    else
    {
      for (uint64_t i = (char *)v122[0]; i != v122[1]; i += 184)
      {
        *(void *)buf = 0LL;
        int v21 = *((void *)i + 1);
        *(void *)&buf[24] = 0LL;
        *(void *)&v133 = 0LL;
        *(void *)&buf[16] = 0LL;
        int v22 = *((void *)i + 5);
        *(void *)&buf[8] = v21;
        *((void *)&v133 + 1) = v22;
        *(void *)v134 = *((void *)i + 6);
        *(_OWORD *)&v134[8] = *(_OWORD *)(i + 56);
        *(_OWORD *)&v134[24] = *(_OWORD *)(i + 72);
        *(_OWORD *)&v134[40] = *(_OWORD *)(i + 88);
        *(_OWORD *)&v134[56] = *(_OWORD *)(i + 104);
        *(_OWORD *)&v134[72] = *(_OWORD *)(i + 120);
        *(void *)&v134[88] = *((void *)i + 17);
        *(void *)v135 = 0LL;
        *(_OWORD *)&v135[8] = *(_OWORD *)(i + 152);
        char v23 = *((void *)i + 22);
        *(void *)&v135[24] = *((void *)i + 21);
        v136 = v23;
        uuid_copy(&buf[24], (const unsigned __int8 *)i + 24);
        int v24 = (char *)__dst;
        if ((unint64_t)__dst >= v100)
        {
          unsigned int v35 = (char *)__p;
          unsigned int v36 = 0xD37A6F4DE9BD37A7LL * (((_BYTE *)__dst - (_BYTE *)__p) >> 3);
          int v37 = v36 + 1;
          if (v36 + 1 > 0x1642C8590B21642LL) {
            sub_100007008();
          }
          else {
            int v38 = v37;
          }
          if (v38)
          {
            int v39 = (char *)sub_1002DF6FC((uint64_t)&v100, v38);
            unsigned int v35 = (char *)__p;
            int v24 = (char *)__dst;
          }

          else
          {
            int v39 = 0LL;
          }

          int v40 = &v39[8 * (((_BYTE *)__dst - (_BYTE *)__p) >> 3)];
          int v41 = *(_OWORD *)buf;
          unsigned int v42 = *(_OWORD *)&buf[16];
          uint64_t v43 = *(_OWORD *)v134;
          *((_OWORD *)v40 + 2) = v133;
          *((_OWORD *)v40 + 3) = v43;
          *(_OWORD *)int v40 = v41;
          *((_OWORD *)v40 + 1) = v42;
          char v44 = *(_OWORD *)&v134[16];
          uint64_t v45 = *(_OWORD *)&v134[32];
          uint64_t v46 = *(_OWORD *)&v134[64];
          *((_OWORD *)v40 + 6) = *(_OWORD *)&v134[48];
          *((_OWORD *)v40 + 7) = v46;
          *((_OWORD *)v40 + 4) = v44;
          *((_OWORD *)v40 + 5) = v45;
          unsigned int v47 = *(_OWORD *)&v134[80];
          int v48 = *(_OWORD *)v135;
          int v49 = *(_OWORD *)&v135[16];
          *((void *)v40 + 22) = v136;
          *((_OWORD *)v40 + 9) = v48;
          *((_OWORD *)v40 + 10) = v49;
          *((_OWORD *)v40 + 8) = v47;
          if (v24 == v35)
          {
            v60 = &v39[184 * v36];
          }

          else
          {
            int v50 = &v39[184 * v36];
            do
            {
              unsigned int v51 = *(_OWORD *)(v24 - 184);
              int v52 = *(_OWORD *)(v24 - 168);
              int v53 = *(_OWORD *)(v24 - 152);
              *(_OWORD *)(v50 - 136) = *(_OWORD *)(v24 - 136);
              *(_OWORD *)(v50 - 152) = v53;
              *(_OWORD *)(v50 - 168) = v52;
              *(_OWORD *)(v50 - 184) = v51;
              int v54 = *(_OWORD *)(v24 - 120);
              unsigned int v55 = *(_OWORD *)(v24 - 104);
              unsigned int v56 = *(_OWORD *)(v24 - 88);
              *(_OWORD *)(v50 - 72) = *(_OWORD *)(v24 - 72);
              *(_OWORD *)(v50 - 88) = v56;
              *(_OWORD *)(v50 - 104) = v55;
              *(_OWORD *)(v50 - 120) = v54;
              unsigned int v57 = *(_OWORD *)(v24 - 56);
              int v58 = *(_OWORD *)(v24 - 40);
              v59 = *(_OWORD *)(v24 - 24);
              v60 = v50 - 184;
              *((void *)v50 - 1) = *((void *)v24 - 1);
              *(_OWORD *)(v50 - 24) = v59;
              *(_OWORD *)(v50 - 40) = v58;
              *(_OWORD *)(v50 - 56) = v57;
              v24 -= 184;
              v50 -= 184;
            }

            while (v24 != v35);
          }

          uint64_t v34 = v40 + 184;
          __p = v60;
          __dst = v40 + 184;
          v100 = (unint64_t)&v39[184 * v38];
          if (v35) {
            operator delete(v35);
          }
        }

        else
        {
          int v25 = *(_OWORD *)buf;
          uint64_t v26 = *(_OWORD *)&buf[16];
          uint64_t v27 = *(_OWORD *)v134;
          *((_OWORD *)__dst + 2) = v133;
          *((_OWORD *)v24 + 3) = v27;
          *(_OWORD *)int v24 = v25;
          *((_OWORD *)v24 + 1) = v26;
          unsigned int v28 = *(_OWORD *)&v134[16];
          unsigned int v29 = *(_OWORD *)&v134[32];
          int v30 = *(_OWORD *)&v134[64];
          *((_OWORD *)v24 + 6) = *(_OWORD *)&v134[48];
          *((_OWORD *)v24 + 7) = v30;
          *((_OWORD *)v24 + 4) = v28;
          *((_OWORD *)v24 + 5) = v29;
          uint64_t v31 = *(_OWORD *)&v134[80];
          int v32 = *(_OWORD *)v135;
          int v33 = *(_OWORD *)&v135[16];
          *((void *)v24 + 22) = v136;
          *((_OWORD *)v24 + 9) = v32;
          *((_OWORD *)v24 + 10) = v33;
          *((_OWORD *)v24 + 8) = v31;
          uint64_t v34 = v24 + 184;
        }

        __dst = v34;
      }

      v95 = 0LL;
      v96 = 0LL;
      v97 = 0LL;
      v61 = sub_100D74AD8();
      int v62 = sub_100D75614(v61, (char **)&v95, *(double *)&dst[16] + -18144000.0, *(double *)(v5 + 32));
      if (v62)
      {
        sub_100306B0C( (uint64_t)&__p,  (uint64_t)__dst,  (char *)v95,  v96,  0xD37A6F4DE9BD37A7LL * ((v96 - (_BYTE *)v95) >> 3));
      }

      else
      {
        if (qword_1019346E0 != -1) {
          dispatch_once(&qword_1019346E0, &stru_101831B18);
        }
        int v63 = (os_log_s *)qword_1019346E8;
        if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "Query for historical summaries failed due to device lock",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346E0 != -1) {
            dispatch_once(&qword_1019346E0, &stru_101831B18);
          }
          LOWORD(v94[0]) = 0;
          v85 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Query for historical summaries failed due to device lock",  v94,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:]",  "%s\n",  v85);
          if (v85 != buf) {
            free(v85);
          }
        }
      }

      if (v95)
      {
        v96 = (char *)v95;
        operator delete(v95);
      }

      if (v62)
      {
LABEL_63:
        if (v122[0])
        {
          v122[1] = v122[0];
          operator delete(v122[0]);
        }

        var2 = a3->var2;
        goto LABEL_66;
      }
    }

    if (v122[0])
    {
      v122[1] = v122[0];
      operator delete(v122[0]);
    }

    goto LABEL_93;
  }

  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_101831B18);
  }
  uint64_t v11 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Will not attempt retrocompute pre-processing, body metrics changed significantly.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101831B18);
    }
    *(_WORD *)dst = 0;
    v83 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Will not attempt retrocompute pre-processing, body metrics changed significantly.",  dst,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxService retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:]",  "%s\n",  v83);
    if (v83 != buf) {
      free(v83);
    }
  }

  *(_DWORD *)(v5 + 136) |= 0x200u;
  -[CLVO2MaxService updateRetrocomputeStatus:unavailableReasons:]( self,  "updateRetrocomputeStatus:unavailableReasons:",  0LL);
  -[CLVO2MaxService sendRetroComputeAnalytics](self, "sendRetroComputeAnalytics");
  sub_1001B5E8C((uint64_t)self->fRetrocomputeBodyMetricsDb.__ptr_.__value_);
  return 4;
}

    LODWORD(__p) = -1;
    unsigned int v47 = 0u;
    int v48 = 0u;
    int v49 = 0u;
    int v50 = 0u;
    unsigned int v51 = 0u;
    int v52 = 0u;
    int v53 = 0;
    if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLAppMonitor"),  "syncgetForegroundApp:",  &__p))
    {
      int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 192LL))(a3);
      if (v24 == (_DWORD)__p && !*(void *)(a1 + 272) && !*(void *)(v6 + 24))
      {
        int v25 = sub_10086D1D8(a3, 0);
        uint64_t v26 = sub_100557274(a1, (uint64_t)v25, a2, v6);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        uint64_t v27 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v28 = sub_10086D1D8(a3, 0);
          unsigned int v29 = "Unknown";
          if (a2 == 1) {
            unsigned int v29 = "Bluetooth";
          }
          if (a2) {
            int v30 = (char *)v29;
          }
          else {
            int v30 = "Wifi";
          }
          sub_1010DDBC0(v37, v30);
          if (v38 >= 0) {
            uint64_t v31 = v37;
          }
          else {
            uint64_t v31 = *(_BYTE **)v37;
          }
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(void *)&buf[10] = "";
          int v40 = 2114;
          int v41 = v28;
          unsigned int v42 = 2082;
          uint64_t v43 = v31;
          char v44 = 1026;
          uint64_t v45 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt posted improve accuracy notification, client:%{public, location:esc ape_only}@, technology:%{public, location:escape_only}s, status:%{public}hhd}",  buf,  0x2Cu);
          if (v38 < 0) {
            operator delete(*(void **)v37);
          }
        }
      }
    }

    sub_100520C7C((uint64_t)&__p);
    return;
  }

  if (*(_BYTE *)(a1 + 994)) {
    goto LABEL_66;
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  uint64_t v8 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
  {
    __p = (void *)68289026;
    LOWORD(v47) = 2082;
    *(void *)((char *)&v47 + 2) = "";
    uint64_t v9 = "{msg%{public}.0s:bluetooth not disabled, suppress improve accuracy notification}";
    goto LABEL_88;
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_1018434E0);
  }
  unsigned int v47 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v48 = *(float *)(v6 + 16);
    *(_DWORD *)buf = 134219008;
    int v63 = a4;
    int v64 = 2048;
    unsigned int v65 = v36;
    int v66 = 2048;
    int v67 = v38;
    v68 = 2048;
    v69 = v48;
    v70 = 2048;
    v71 = (float)(v38 * v48);
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "WorkloadCalibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, calibratedMets, %f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018434E0);
    }
    int v49 = *(float *)(v6 + 16);
    int v52 = 134219008;
    int v53 = a4;
    int v54 = 2048;
    unsigned int v55 = v36;
    unsigned int v56 = 2048;
    unsigned int v57 = v38;
    int v58 = 2048;
    v59 = v49;
    v60 = 2048;
    v61 = (float)(v38 * v49);
    LODWORD(v51) = 52;
    int v50 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "WorkloadCalibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, calibratedMets, %f",  COERCE_DOUBLE(&v52),  v51);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLWorkloadCalibrator::computeCalibrationValue(const CLNatalieModelInput *, const CFAbsoluteTime, const float , const float, BOOL &)",  "%s\n",  v50);
  }

  int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
  if (v25 >= 0x80)
  {
    uint64_t v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    uint64_t v3 = a1[20];
  }

  else
  {
    uint64_t v26 = 2;
  }

  uint64_t v4 = (v26 + v4);
  if ((v3 & 0x800) == 0)
  {
LABEL_52:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_74;
  }

  *(_DWORD *)(a1 + 56) = v4;
  return v4;
}

  unsigned int v28 = *(_DWORD *)(a2 + 80);
  a1[37] |= 0x40000u;
  a1[20] = v28;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x80000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_68;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E,  v5[31],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x40000000) != 0) {
    goto LABEL_67;
  }
LABEL_32:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_68:
  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20,  v5[33],  a2,  a4);
LABEL_33:
  int v7 = v5[38];
  if ((v7 & 1) != 0)
  {
    uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21,  v5[34],  a2,  a4);
    int v7 = v5[38];
  }

  if ((v7 & 2) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22,  v5[35],  a2,  a4);
  }
  return result;
}

        sub_1007B4F08(a1, *(unsigned __int8 *)(a1 + 165));
        uint64_t v27 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (*(_BYTE *)(a1 + 165)) {
          unsigned int v28 = " and flushing immediately";
        }
        else {
          unsigned int v28 = " no flush";
        }
        syslog(5, "%s,%s,logging locations to %s%s\n", "NOTICE", "CLLog", (const char *)v27, v28);
        goto LABEL_73;
      }
    }

  uint64_t v27 = *((void *)&xmmword_1019A16B8 + 1);
  if (byte_1019A16CF >= 0) {
    uint64_t v27 = byte_1019A16CF;
  }
  if (v9 != v27) {
    goto LABEL_86;
  }
  if (byte_1019A16CF >= 0) {
    unsigned int v28 = &xmmword_1019A16B8;
  }
  else {
    unsigned int v28 = (__int128 *)xmmword_1019A16B8;
  }
  if ((v7 & 0x80) != 0)
  {
    uint64_t v14 = (void *)__s1;
    goto LABEL_82;
  }

  if (!v7)
  {
LABEL_79:
    value = self->fInstance.__ptr_.__value_;
LABEL_80:
    *(_OWORD *)__p = __s1;
    v103 = v105;
LABEL_84:
    sub_1007C71A0((uint64_t)value, (unsigned __int8 *)__p);
    if (SHIBYTE(v103) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_86;
  }

  unsigned int v29 = &__s1;
  while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v28)
  {
    unsigned int v29 = (__int128 *)((char *)v29 + 1);
    unsigned int v28 = (__int128 *)((char *)v28 + 1);
    if (!--v6) {
      goto LABEL_77;
    }
  }

  *(_BYTE *)(a1 + 505) |= 2u;
  if (!v17)
  {
LABEL_61:
    if (!v18) {
      return;
    }
    goto LABEL_62;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101865460);
  }
  unsigned int v55 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v56 = 68289026;
    unsigned int v57 = 0;
    int v58 = 2082;
    v59 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#storedLocations: enumerateStoredLocationsWithOptions<finsihed>}",  (uint8_t *)&v56,  0x12u);
  }

  if (v7 != (_OWORD *)a2[1]) {
    a2[1] = v7;
  }
}

    sub_100036CD8();
  }

  *(_DWORD *)(a1 + 396) |= 0x400u;
  int v25 = *(void **)(a1 + 80);
  if (!v25)
  {
    int v25 = operator new(0x28uLL);
    *int v25 = off_101875AC8;
    v25[1] = 0LL;
    *((_OWORD *)v25 + 1) = xmmword_10134D8D0;
    *((_DWORD *)v25 + 8) = 0;
    *(void *)(a1 + 80) = v25;
  }

  uint64_t v26 = *(void *)(a2 + 80);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_1019A1D38 + 80);
  }
  sub_100BB8F0C((uint64_t)v25, v26);
  int v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x800) == 0)
  {
LABEL_51:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_76;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  *(_DWORD *)(v5 + 96),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }

      sub_100BFC27C();
    }

    uint64_t v16 = a2[1];
    if (this) {
      std::string::operator=(this, v16 & 0x1F);
    }
    else {
      sub_10111FBF0(a1, v16 & 0x1F);
    }
    v4 += 2;
  }

  return v4;
}

  uint64_t v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16LL) + 4LL * v39) & v43) == 0) {
      char v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    uint64_t v45 = *(void **)(a1 + 72);
    uint64_t v46 = memchr(*(const void **)(a1 + 64), (char)v39, (size_t)v45 - *(void *)(a1 + 64));
    unsigned int v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45) {
      goto LABEL_77;
    }
  }

  int v49 = *(void *)(a1 + 88);
  int v48 = *(void *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(_BYTE *)(a1 + 170))
    {
      sub_101120354(a1 + 16, (char *)&v121, (char *)&v122);
      int v49 = *(void *)(a1 + 88);
      int v48 = *(void *)(a1 + 96);
    }

    else
    {
      __p.__r_.__value_.__s.__size_ = 1;
      LOWORD(__p.__r_.__value_.__l.__data_) = v39;
    }

    int v50 = v48 - v49;
    if (v50)
    {
      v117 = v37;
      v114 = v36;
      unsigned int v51 = 0LL;
      int v52 = v50 / 48;
      v112 = __p.__r_.__value_.__s.__size_;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v53 = __p.__r_.__value_.__s.__size_;
      }
      else {
        int v53 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v54 = &__p;
      }
      else {
        int v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v52 <= 1) {
        unsigned int v55 = 1LL;
      }
      else {
        unsigned int v55 = v50 / 48;
      }
      unsigned int v56 = 1;
      while (1)
      {
        unsigned int v57 = *(char *)(v49 + 23);
        if (v57 >= 0) {
          int v58 = *(unsigned __int8 *)(v49 + 23);
        }
        else {
          int v58 = *(void *)(v49 + 8);
        }
        if (v57 >= 0) {
          v59 = (const void *)v49;
        }
        else {
          v59 = *(const void **)v49;
        }
        if (v58 >= v53) {
          v60 = v53;
        }
        else {
          v60 = v58;
        }
        v61 = memcmp(v54, v59, v60);
        int v62 = v53 >= v58;
        if (v61) {
          int v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = *(char *)(v49 + 47);
          if (v63 >= 0) {
            int v64 = *(unsigned __int8 *)(v49 + 47);
          }
          else {
            int v64 = *(void *)(v49 + 32);
          }
          if (v63 >= 0) {
            unsigned int v65 = (const void *)(v49 + 24);
          }
          else {
            unsigned int v65 = *(const void **)(v49 + 24);
          }
          if (v53 >= v64) {
            int v66 = v64;
          }
          else {
            int v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67) {
            v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }

        unsigned int v56 = ++v51 < v52;
        v49 += 48LL;
        if (v55 == v51)
        {
          unsigned int v36 = v114;
          goto LABEL_123;
        }
      }

      unsigned int v36 = 1;
LABEL_123:
      int v37 = v117;
      if ((v112 & 0x80) == 0) {
        goto LABEL_125;
      }
    }

    else
    {
      unsigned int v56 = 0;
      if ((__p.__r_.__value_.__s.__size_ & 0x80) == 0) {
        goto LABEL_125;
      }
    }

    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }

  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_154;
  }
  sub_101120628(a1 + 16, (char *)&v121, (char *)&v122, (uint64_t)&__p);
  v69 = *(void *)(a1 + 136);
  v70 = __p.__r_.__value_.__s.__size_;
  v71 = *(void *)(a1 + 144) - v69;
  if (v71)
  {
    v118 = v37;
    v72 = 0LL;
    v73 = v71 / 24;
    v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v75 = __p.__r_.__value_.__s.__size_;
    }
    else {
      v75 = __p.__r_.__value_.__l.__size_;
    }
    if (v73 <= 1) {
      v76 = 1LL;
    }
    else {
      v76 = v71 / 24;
    }
    v77 = 1;
    while (1)
    {
      v78 = (unsigned __int8 **)(v69 + 24 * v72);
      v79 = (unsigned __int8 *)*((unsigned __int8 *)v78 + 23);
      v80 = (char)v79;
      if ((unsigned __int8 *)v75 == v79)
      {
        if (v80 >= 0) {
          v81 = (unsigned __int8 *)(v69 + 24 * v72);
        }
        else {
          v81 = *v78;
        }
        if ((v70 & 0x80) != 0)
        {
          v115 = v36;
          v84 = v73;
          v113 = v76;
          v85 = memcmp((const void *)v74, v81, *((size_t *)&v74 + 1));
          v76 = v113;
          v73 = v84;
          unsigned int v36 = v115;
          if (!v85)
          {
            unsigned int v36 = 1;
            int v37 = v118;
            goto LABEL_152;
          }
        }

        else
        {
          if (!(_DWORD)v70)
          {
            unsigned int v36 = 1;
            int v37 = v118;
            if (!v77) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }

          v82 = &__p;
          v83 = v70;
          while (v82->__r_.__value_.__s.__data_[0] == *v81)
          {
            v82 = (std::string *)((char *)v82 + 1);
            ++v81;
            if (!--v83)
            {
              unsigned int v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }

      v77 = ++v72 < v73;
      if (v72 == v76)
      {
LABEL_149:
        int v37 = v118;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }

  v77 = 0;
  if ((__p.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_152:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_153:
  if (!v77)
  {
LABEL_154:
    v86 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16LL) + 4LL * v121) & v86) == 0)
    {
      v87 = (v86 >> 7) & 1;
      if (v121 != 95) {
        v87 = 0;
      }
      if (v87 != 1) {
        goto LABEL_221;
      }
    }

    goto LABEL_77;
  }

              if (SHIBYTE(v76) < 0) {
                operator delete(*(void **)&buf[24]);
              }
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              uint64_t v13 = *(void *)(v13 + 8);
            }
          }

          HIDWORD(v47) = 0;
LABEL_92:
          if (v71) {
            std::string::assign(&v62, "Auth2");
          }
          int v41 = a1[66];
          if (v41)
          {
            std::string::assign(&v62, "Exception");
          }

          else if (v53)
          {
            if (qword_101934840 != -1) {
              dispatch_once(&qword_101934840, &stru_10188C1A8);
            }
            unsigned int v42 = (os_log_s *)qword_101934848;
            if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEBUG))
            {
              if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
                uint64_t v43 = a2;
              }
              else {
                uint64_t v43 = (std::string *)a2->__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 134349314;
              *(void *)&buf[4] = v53;
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v43;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "iB: Resuming fences,%{public}lu, for bundle,%{public}s",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934840 != -1) {
                dispatch_once(&qword_101934840, &stru_10188C1A8);
              }
              if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
                char v44 = a2;
              }
              else {
                char v44 = (std::string *)a2->__r_.__value_.__r.__words[0];
              }
              int v66 = 134349314;
              int v67 = v53;
              v68 = 2082;
              v69 = v44;
              LODWORD(v47) = 22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  2LL,  "iB: Resuming fences,%{public}lu, for bundle,%{public}s",  &v66,  v47);
              uint64_t v46 = (char *)v45;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBeaconFenceAuthorizationManager::unlockedNotifyBundleAppropriatelyWithFences(const std::string &)",  "%s\n",  v45);
              if (v46 != buf) {
                free(v46);
              }
            }

            sub_100F01E28((uint64_t)a1, a2, BYTE4(v47) & 1);
            *(_DWORD *)buf = 0;
            (*(void (**)(_DWORD *, _BYTE *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v52,  0LL,  0xFFFFFFFFLL,  0LL);
          }

          else
          {
            sub_100F01E28((uint64_t)a1, a2, 0LL);
          }

          sub_100527B44(v52);
          sub_1009EB4CC((uint64_t)&v56, v57[0]);
          sub_1009EB4CC((uint64_t)&v58, v59[0]);
          if (!v41) {
            goto LABEL_76;
          }
          goto LABEL_75;
        }
      }

      else if ((v11 & 1) != 0)
      {
        goto LABEL_25;
      }

      unint64_t v10 = "Auth";
    }

    std::string::assign(&v62, v10);
LABEL_75:
    sub_100F04C78((uint64_t *)&v70, (uint64_t)v64, (uint64_t)&v63);
LABEL_76:
    if (v71)
    {
      v73 = v4 & 1;
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10188C1A8);
      }
      int v38 = (os_log_s *)qword_101934848;
      if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_INFO))
      {
        int v39 = &v62;
        if ((v62.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v39 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v40 = a2;
        }
        else {
          int v40 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(void *)&buf[20] = v39;
        *(_WORD *)&buf[28] = 2050;
        *(void *)&buf[30] = v71;
        v75 = 2082;
        v76 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:iB: Suspending fences, reason:%{private, location:escape_only}s, numRegions:% {public}lu, bundle:%{public, location:escape_only}s}",  buf,  0x30u);
      }

      sub_100F01E28((uint64_t)a1, a2, 0LL);
      *(_DWORD *)buf = 1;
      (*(void (**)(_DWORD *, _BYTE *, __int128 *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  &v70,  0LL,  0xFFFFFFFFLL,  0LL);
    }

    sub_100527B44((uint64_t *)&v70);
    goto LABEL_90;
  }

  if (qword_101934840 != -1) {
    dispatch_once(&qword_101934840, &stru_10188C1A8);
  }
  uint64_t v5 = (os_log_s *)qword_101934848;
  if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_FAULT))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Unable to get fences from database for bundle,%{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v7 = a2;
    }
    else {
      int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    LODWORD(v70) = 136446210;
    *(void *)((char *)&v70 + 4) = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  17LL,  "Unable to get fences from database for bundle,%{public}s",  &v70,  12);
    uint64_t v9 = (char *)v8;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBeaconFenceAuthorizationManager::unlockedNotifyBundleAppropriatelyWithFences(const std::string &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "peakTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }

  int v24 = *(void *)(a2 + 32);
  v5 |= 8uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 32) = v24;
  uint64_t v4 = *v3;
  if ((*v3 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePre", *(void *)(a1 + 152));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x3Du);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 116);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 116) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "quiescentThreshold", *(_DWORD *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }

  int v41 = *(_BYTE *)(a2 + 391);
  v10 |= 0x8000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 391) = v41;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v9 & 0x2000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "gatingMotionPreImpact", *(_BYTE *)(a1 + 390));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 232), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_68;
  }

  uint64_t result = *(float *)(a2 + 168);
  v3 |= 0x2000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 168) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x20000000000LL) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "isNearFall", *(_DWORD *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184), 0x10u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000000LL) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }

        *(_DWORD *)(a1 + 28) = v34;
        goto LABEL_67;
      case 3u:
        int v37 = operator new(0x18uLL);
        sub_101103644((uint64_t)v37);
        int v40 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v37;
        if (v40)
        {
          (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
          int v37 = *(void **)(a1 + 16);
        }

        goto LABEL_42;
      case 4u:
        int v37 = operator new(0x18uLL);
        sub_101103644((uint64_t)v37);
        int v41 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v37;
        if (v41)
        {
          (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
          int v37 = *(void **)(a1 + 8);
        }

  int v38 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 212) |= 0x40u;
  *(_DWORD *)(a1 + 120) = v38;
  unint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x200000) == 0)
  {
LABEL_37:
    if ((v10 & 0x400) == 0) {
      goto LABEL_38;
    }
LABEL_68:
    int v40 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 212) |= 0x400u;
    *(_DWORD *)(a1 + 136) = v40;
    if ((*(_DWORD *)(a2 + 212) & 0x800000) == 0) {
      return a1;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "numResets", *(_DWORD *)(a1 + 184));
  if ((*(_DWORD *)(a1 + 212) & 0x800000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(this, "overrideArmedBitmap", *(_DWORD *)(a1 + 188));
LABEL_30:
  unint64_t v10 = *(float **)(a1 + 32);
  uint64_t v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    PB::TextFormatter::format(this, "prevQ", v12);
  }

  uint64_t v13 = *(float **)(a1 + 56);
  uint64_t v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    int v15 = *v13++;
    PB::TextFormatter::format(this, "rawClampedAccel", v15);
  }

  uint64_t v16 = *(_DWORD *)(a1 + 212);
  if (v16 < 0)
  {
    PB::TextFormatter::format(this, "shouldTrigger", *(_BYTE *)(a1 + 211));
    uint64_t v16 = *(_DWORD *)(a1 + 212);
    if ((v16 & 4) == 0)
    {
LABEL_36:
      if ((v16 & 0x1000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_70;
    }
  }

  else if ((v16 & 4) == 0)
  {
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 96));
  uint64_t v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_37:
    if ((v16 & 0x2000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_71;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0x1Au);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80) == 0)
  {
LABEL_35:
    if ((v14 & 2) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }

  uint64_t v34 = *(_DWORD *)(a2 + 152);
  v3 |= 0x40000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 152) = v34;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_68:
    unsigned int v36 = *(void *)(a2 + 16);
    *(void *)(result + 164) = v3 | 2;
    *(void *)(result + 16) = v36;
    return result;
  }

  PB::TextFormatter::format(this, "metaNormOfImpact", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_67;
  }
LABEL_33:
  if ((v5 & 0x20) != 0) {
LABEL_34:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xC9u);
  if ((*(void *)(v3 + 164) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xCAu);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 120);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 120) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x2000000000LL) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "kEnergyAtMaxChaosROTimestamp", *(float *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x20000000000LL) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 160), 0x6Au);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000000000LL) == 0) {
      goto LABEL_22;
    }
    goto LABEL_68;
  }

        *(_DWORD *)(a1 + 16) = v38;
      }

      else if ((_DWORD)v20 == 1)
      {
        char v23 = operator new(0x80uLL);
        *(void *)char v23 = &off_10189C0D8;
        v23[31] = 0;
        int v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          char v23 = *(_DWORD **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v51, v21, v22)
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v23 + 16LL))(v23, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v51);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  unint64_t v10 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(a1 + 164) = v3;
  *(void *)(a1 + 24) = v10;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "recordInterval", *(double *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }

  int v33 = *(void *)(a2 + 32);
  v3 |= 8uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 32) = v33;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "signalRateTotal", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0) {
      goto LABEL_34;
    }
    goto LABEL_68;
  }

  uint64_t v27 = *(_DWORD *)(a2 + 160);
  v3 |= 0x4000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 160) = v27;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "rolloverChaosAtMaxSaturation", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0x19u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }

  int v53 = *(void *)(a2 + 176);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 244) = v6;
  *(void *)(a1 + 176) = v53;
  if ((*(_DWORD *)(a2 + 244) & 0x400000) != 0)
  {
LABEL_14:
    uint64_t v9 = *(_BYTE *)(a2 + 238);
    v6 |= 0x400000u;
    *(_DWORD *)(a1 + 244) = v6;
    *(_BYTE *)(a1 + 238) = v9;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 84) = v16;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x40000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant", *(_DWORD *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x14u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }

  uint64_t v34 = *(void *)(a2 + 48);
  v5 |= 0x10uLL;
  *(void *)(a1 + 192) = v5;
  *(void *)(a1 + 48) = v34;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "standing", *(_DWORD *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x18u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  uint64_t v17 = *(_DWORD *)(a2 + 124);
  v3 |= 0x10000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 124) = v17;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "counterBodyTurnAboveBaseline", *(_DWORD *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000000000LL) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xFu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_68;
  }

  int v37 = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 164) |= 0x40000000u;
  *(_BYTE *)(a1 + 160) = v37;
  unint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 1) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "trackingBehavior", *(_DWORD *)(a1 + 132));
  uint64_t v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 158), 0x1Cu);
  uint64_t v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x400000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }

  PB::TextFormatter::format(this, "verticalOscWindowEndTime", *(double *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }

LABEL_71:
  int v39 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 192) |= 0x40000u;
  *(_DWORD *)(a1 + 168) = v39;
  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x80000) == 0)
  {
LABEL_43:
    if ((v22 & 0x100000) == 0) {
      goto LABEL_44;
    }
LABEL_73:
    int v41 = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a1 + 192) |= 0x100000u;
    *(_DWORD *)(a1 + 184) = v41;
    if ((*(_DWORD *)(a2 + 192) & 0x200000) == 0) {
      return;
    }
    goto LABEL_74;
  }

  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_108;
  }
  if ((v3 & 0x10000) != 0)
  {
    unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 160);
    if (v29 >= 0x80)
    {
      int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 192);
    }

    else
    {
      int v30 = 1;
    }

    v5 += v30 + 2;
    if ((v3 & 0x20000) == 0)
    {
LABEL_74:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_75;
      }
      goto LABEL_87;
    }
  }

  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_74;
  }

  uint64_t v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 164);
  if (v31 >= 0x80)
  {
    int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 192);
  }

  else
  {
    int v32 = 1;
  }

  v5 += v32 + 2;
  if ((v3 & 0x40000) == 0)
  {
LABEL_75:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_91;
  }

  unsigned int v29 = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 228) |= 0x2000u;
  *(void *)(a1 + 88) = v29;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x4000) == 0)
  {
LABEL_39:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 60),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_75;
  }

  uint64_t v31 = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 148) |= 0x100000u;
  *(_DWORD *)(a1 + 124) = v31;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x200000) == 0)
  {
LABEL_64:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_73;
  }

  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  unsigned int v47 = *(void *)(v2 + 80);
  if (v27)
  {
    sub_1003C05BC(v47);
  }

  else
  {
    sub_1003C0E18(v47);
    sub_1006F59B4(v2);
  }

  objc_autoreleasePoolPop(v6);
  if (!v27 || a2)
  {
    sub_1006FA058((uint64_t *)(v2 + 352));
    *(void *)(v2 + 376) = 0LL;
    *(void *)(v2 + 392) = v8;
    *(_DWORD *)(v2 + 400) = 0;
  }

  return sub_1001BA1BC(v63);
}

  sub_1002F0B04(buf);
  v70 = (int *)(a1 + 708);
  v71 = sub_1002A7CB0(*(uint64_t *)&buf[0], "FenceMonitorDelayedTriggerCountMax", (_DWORD *)(a1 + 708));
  v72 = v71;
  v73 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_75;
  }
  v74 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v75 - 1, v74));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
    if (!v72) {
      goto LABEL_81;
    }
  }

  else
  {
LABEL_75:
    if (!v71) {
      goto LABEL_81;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  v76 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    v77 = *v70;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v77;
    _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding fDelayedTriggerCountMax, %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    v139 = *v70;
    v161 = 67174657;
    LODWORD(v162) = v139;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding fDelayedTriggerCountMax, %{private}d",  &v161,  v157);
    v141 = (char *)v140;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v140);
  }

                unint64_t v10 = (_BYTE *)*((void *)this + 1);
                unsigned int v35 = *v10;
              }

              while (v35 == 41);
              if (v35 == 49) {
                goto LABEL_74;
              }
            }
          }

          goto LABEL_2;
        }

      case 5u:
        uint64_t v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_55;
        }
        if (v8 != 2) {
          goto LABEL_31;
        }
        uint64_t result = sub_10006E130(this, v49);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_71;
      case 6u:
        uint64_t v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_75;
        }
        if (v8 == 2)
        {
          uint64_t result = sub_10006E130(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          while (1)
          {
            unint64_t v10 = (_BYTE *)*((void *)this + 1);
            unsigned int v47 = (_BYTE *)*((void *)this + 2);
            if (v10 >= v47 || *v10 != 49) {
              break;
            }
LABEL_74:
            *((void *)this + 1) = v10 + 1;
LABEL_75:
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v51) & 1) == 0) {
              return 0LL;
            }
            unsigned int v36 = v51[0];
            int v37 = *(_DWORD *)(a1 + 64);
            if (v37 == *(_DWORD *)(a1 + 68))
            {
              sub_10008D024(v5, v37 + 1);
              int v37 = *(_DWORD *)(a1 + 64);
            }

            int v38 = *(void *)(a1 + 56);
            int v39 = v37 + 1;
            *(_DWORD *)(a1 + 64) = v37 + 1;
            *(void *)(v38 + 8LL * v37) = v36;
            int v40 = *((void *)this + 1);
            int v41 = *((_DWORD *)this + 4) - v40;
            if (v41 >= 1)
            {
              unsigned int v42 = v41 / 9u;
              uint64_t v43 = v42 >= *(_DWORD *)(a1 + 68) - v39 ? *(_DWORD *)(a1 + 68) - v39 : v42;
              if (v43 >= 1)
              {
                char v44 = 0;
                while (*(_BYTE *)v40 == 49)
                {
                  uint64_t v45 = *(void *)(v40 + 1);
                  if (v39 >= *(_DWORD *)(a1 + 68))
                  {
                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v51,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Cont ents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/in clude/google/protobuf/repeated_field.h",  602LL);
                    uint64_t v46 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v51,  "CHECK failed: (size()) < (Capacity()): ");
                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v50, v46);
                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v51);
                    int v39 = *(_DWORD *)(a1 + 64);
                    int v38 = *(void *)(a1 + 56);
                  }

                  *(_DWORD *)(a1 + 64) = v39 + 1;
                  *(void *)(v38 + 8LL * v39) = v45;
                  ++v44;
                  v40 += 9LL;
                  ++v39;
                  if (v43 == v44)
                  {
                    char v44 = v43;
                    break;
                  }
                }

                if (v44) {
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v44);
                }
              }
            }
          }

          if (v10 == v47 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          continue;
        }

  *(_DWORD *)(a1 + 396) |= 0x800u;
  uint64_t v27 = *(void **)(a1 + 88);
  if (!v27)
  {
    uint64_t v27 = operator new(0x20uLL);
    const std::string *v27 = off_101875B40;
    v27[1] = 0LL;
    v27[2] = 4LL;
    *((_DWORD *)v27 + 6) = 0;
    *(void *)(a1 + 88) = v27;
  }

  unsigned int v28 = *(void *)(a2 + 88);
  if (!v28) {
    unsigned int v28 = *(void *)(qword_1019A1D38 + 88);
  }
  sub_100BB903C((uint64_t)v27, v28);
  int v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x1000) == 0)
  {
LABEL_52:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_81;
  }

    if (v21 != buf) {
      free(v21);
    }
    goto LABEL_28;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101887EC0);
  }
  uint64_t v5 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    int v40 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#AML,shouldSendLocation,not sending,last send was too recent,tDiff,%{public}f",  buf,  0xCu);
  }

  if (!sub_1002921D0(115, 2)) {
    goto LABEL_22;
  }
  bzero(buf, 0x65CuLL);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101887EC0);
  }
  unsigned int v35 = 134349056;
  unsigned int v36 = v4;
  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#AML,shouldSendLocation,not sending,last send was too recent,tDiff,%{public}f",  &v35,  12);
  int v7 = (uint8_t *)v6;
  sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v6);
LABEL_66:
  if (v7 != buf) {
    free(v7);
  }
LABEL_22:
  uint64_t v8 = 0LL;
LABEL_29:
  uint64_t v11 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      uint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  return v8;
}

  uint64_t v12 = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 120) = v12;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x21u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_73;
  }

  unsigned int v29 = *(void *)(a2 + 80);
  v5 |= 0x200uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 80) = v29;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_29:
    if ((v4 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfCyclingImpactThresholds", *(void *)(a1 + 192));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 88), 0x42u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x40uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_36;
    }
LABEL_73:
    PB::TextFormatter::format(this, "toState", *(_DWORD *)(a1 + 144));
    if ((*(void *)(a1 + 156) & 0x80000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x22u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_36:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 0x24u);
  }

  PB::TextFormatter::format(this, "lastChargerState", *(_BYTE *)(a1 + 395));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 296), 0x19u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }

  uint64_t result = *(float *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 112) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x15u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 196));
  uint64_t v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v16 & 0x8000000) == 0) {
      goto LABEL_40;
    }
LABEL_73:
    PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 204));
    if ((*(_DWORD *)(a1 + 212) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_41;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0x1Fu);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40) == 0)
  {
LABEL_40:
    if ((v14 & 0x200000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_73;
  }

  uint64_t v14 = *(_BYTE *)(a2 + 159);
  v3 |= 0x1000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 159) = v14;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x40000000000LL) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "kParameterRollingEnergyWindowSizeRO", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x10000) == 0)
  {
LABEL_25:
    if ((v5 & 0x40000000000LL) == 0) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 165), 0x6Fu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }

  uint64_t v14 = *(_BYTE *)(a2 + 161);
  v3 |= 0x1000000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_BYTE *)(a1 + 161) = v14;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x800000000LL) == 0)
  {
LABEL_36:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "stepDuration", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 4) == 0) {
      goto LABEL_34;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 160), 0x20u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_34:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

  int v32 = *(void *)(a2 + 40);
  v3 |= 0x10uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 40) = v32;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "rolloverMaxSaturation", *(float *)(a1 + 180));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x8000000000LL) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }

  int v21 = *(_DWORD *)(a2 + 168);
  v3 |= 0x2000000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 168) = v21;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x1000) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle", *(_DWORD *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0x19u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "vehicleExitState", *(_DWORD *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x1Eu);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x1000000000LL) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

  int v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 52) = v22;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }

  PB::TextFormatter::format(this, "horizontalTranslationSimilarity", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x14u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_73;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 155), 0x21u);
  if ((*(_DWORD *)(v3 + 164) & 0x20000) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x22u);
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 176);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 176) = result;
  if ((*(void *)(a2 + 224) & 0x400) != 0) {
    goto LABEL_72;
  }
  return result;
}

LABEL_72:
  int v40 = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 192) |= 0x80000u;
  *(_DWORD *)(a1 + 172) = v40;
  int v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x100000) != 0) {
    goto LABEL_73;
  }
LABEL_44:
  if ((v22 & 0x200000) == 0) {
    return;
  }
LABEL_74:
  unsigned int v42 = *(const std::string **)(a2 + 176);
  *(_DWORD *)(a1 + 192) |= 0x200000u;
  uint64_t v43 = *(std::string **)(a1 + 176);
  if (v43 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v43 = (std::string *)operator new(0x18uLL);
    v43->__r_.__value_.__l.__size_ = 0LL;
    v43->__r_.__value_.__l.__cap_ = 0LL;
    v43->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 176) = v43;
  }

  std::string::operator=(v43, v42);
}

  int v30 = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 228) |= 0x4000u;
  *(void *)(a1 + 96) = v30;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x8000) != 0)
  {
LABEL_40:
    uint64_t v16 = *(void *)(a2 + 104);
    *(_DWORD *)(a1 + 228) |= 0x8000u;
    *(void *)(a1 + 104) = v16;
    uint64_t v5 = *(_DWORD *)(a2 + 228);
  }

        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

  unint64_t v10 = *(void *)(v5 + 64);
  if (!v10) {
    unint64_t v10 = *(void *)(qword_1019A0BA0 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_76;
  }

  int v32 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) |= 0x200000u;
  *(_DWORD *)(a1 + 128) = v32;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x400000) == 0)
  {
LABEL_65:
    if ((v5 & 0x800000) == 0) {
      return;
    }
    goto LABEL_75;
  }

  sub_1002CFA00(a1, (double *)(a1 + 24));
}

    __assert_rtn( "set_notification_type",  "CLPLocationController.pb.h",  9753,  "::CLP::LogEntry::PrivateData::RoutineVisitNotification_NotificationType_IsValid(value)");
  }

  if (!sub_1000641E0(2u)) {
    goto LABEL_72;
  }
  int v24 = 2;
LABEL_47:
  int v25 = v23[7];
  v23[3] = v24;
  v23[7] = v25 | 6;
  uint64_t v26 = (_DWORD *)*((void *)v23 + 2);
  if (!v26)
  {
    uint64_t v26 = operator new(0x18uLL);
    sub_100B1FF3C(v26);
    *((void *)v23 + 2) = v26;
  }

  v26[5] |= 1u;
  uint64_t v27 = (void *)*((void *)v26 + 1);
  if (!v27)
  {
    uint64_t v27 = operator new(0x48uLL);
    sub_1001D2B04((uint64_t)v27);
    *((void *)v26 + 1) = v27;
  }

  sub_100F87C30(a4, (uint64_t)v27);
  unsigned int v28 = sub_100371ED0(a1, (uint64_t)&v64);
  if (*(_BYTE *)(a1 + 8))
  {
    unsigned int v29 = v28;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101834AA8);
    }
    int v30 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      sub_100FE4F50(&v51, &v53);
      if (SBYTE3(v57) >= 0) {
        uint64_t v31 = &v53;
      }
      else {
        uint64_t v31 = v53;
      }
      LODWORD(v44[0]) = a2->i32[0];
      sub_100FE5218((int *)v44, v49);
      if (v50 >= 0) {
        int v32 = v49;
      }
      else {
        int v32 = (void **)v49[0];
      }
      uint64_t v46 = *a3;
      int v33 = __p;
      sub_100FE5218(&v46, __p);
      if (v48 < 0) {
        int v33 = (void **)__p[0];
      }
      uint64_t v34 = sub_10080E94C();
      unsigned int v35 = sub_10080EF30(v34);
      *(_DWORD *)buf = 67110402;
      v70 = v29;
      v71 = 2080;
      v72 = v31;
      v73 = 2080;
      v74 = v32;
      v75 = 2080;
      v76 = v33;
      v77 = 1024;
      v78 = a5;
      v79 = 2050;
      v80 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "#locctl,#rec,recordMessage,RoutineVisit,success,%d,message_type,%s,from,%s,to,%s,isLOI,%d,propagation_us,%{public}.3f",  buf,  0x36u);
      if (v48 < 0) {
        operator delete(__p[0]);
      }
      if (v50 < 0) {
        operator delete(v49[0]);
      }
      if (SBYTE3(v57) < 0) {
        operator delete(v53);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101834AA8);
      }
      unsigned int v36 = qword_101934838;
      int v37 = v49;
      sub_100FE4F50(&v51, v49);
      if (v50 < 0) {
        int v37 = (void **)v49[0];
      }
      uint64_t v46 = a2->i32[0];
      int v38 = __p;
      sub_100FE5218(&v46, __p);
      if (v48 < 0) {
        int v38 = (void **)__p[0];
      }
      uint64_t v43 = *a3;
      int v39 = v44;
      sub_100FE5218(&v43, v44);
      if (v45 < 0) {
        int v39 = (void **)v44[0];
      }
      int v40 = sub_10080E94C();
      int v41 = sub_10080EF30(v40);
      LODWORD(v53) = 67110402;
      HIDWORD(v53) = v29;
      int v54 = 2080;
      unsigned int v55 = v37;
      unsigned int v56 = 2080;
      unsigned int v57 = v38;
      int v58 = 2080;
      v59 = v39;
      v60 = 1024;
      v61 = a5;
      int v62 = 2050;
      int v63 = v41;
      unsigned int v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v36,  2LL,  "#locctl,#rec,recordMessage,RoutineVisit,success,%d,message_type,%s,from,%s,to,%s,isLOI,%d,propagat ion_us,%{public}.3f",  &v53,  54);
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v48 < 0) {
        operator delete(__p[0]);
      }
      if (v50 < 0) {
        operator delete(v49[0]);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocat ionControllerRecorder_Types::Silo &, const CLVisit *, const BOOL)",  "%s\n",  v42);
    }
  }

  sub_100EDE8A8(&v64);
}

    dispatch_once(&qword_1019345C0, &stru_101848ED8);
    goto LABEL_25;
  }

  if (*(void *)(a1 + 40) == a2)
  {
    if (!a4)
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_101848ED8);
      }
      uint64_t v17 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Empty keyboard device report input", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101848ED8);
        }
        *(_WORD *)unsigned int v29 = 0;
        LODWORD(v28) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "Empty keyboard device report input",  v29,  v28,  *(void *)v29,  *(_OWORD *)&v29[8]);
        goto LABEL_64;
      }

      return;
    }

    int v15 = *a3;
    if (v15 == 196)
    {
      if (a4 == 3)
      {
        int v18 = a3[1] & 2;
        if (*(unsigned __int8 *)(a1 + 88) != v18 >> 1)
        {
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101848ED8);
          }
          uint64_t v19 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v20 = "entered";
            if (!v18) {
              uint64_t v20 = "dismissed";
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&buf[4] = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Accessory Hall Effect sensor detected tablet mode %s",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345C0 != -1) {
              dispatch_once(&qword_1019345C0, &stru_101848ED8);
            }
            int v25 = "entered";
            if (!v18) {
              int v25 = "dismissed";
            }
            *(_DWORD *)unsigned int v29 = 136315138;
            *(void *)&v29[4] = v25;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  1LL,  "Accessory Hall Effect sensor detected tablet mode %s",  v29);
            uint64_t v27 = (char *)v26;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLKeyboardMotionNotifier::onIoHidReportBounce(CLHidDevice *, uint8_t *, CFIndex)",  "%s\n",  v26);
            if (v27 != buf) {
              free(v27);
            }
          }

          if (v18) {
            int v21 = 3;
          }
          else {
            int v21 = 4;
          }
          v29[0] = v21;
          *(void *)buf = sub_101171D38();
          sub_1006DD528(a1, 4LL, (uint64_t)v29, 1LL);
        }

        *(_BYTE *)(a1 + 88) = v18 >> 1;
      }

      else
      {
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_101848ED8);
        }
        char v23 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = 3LL;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "Bad motion report input state %ld, expected %lu",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_101848ED8);
          }
          LODWORD(v28) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "Bad motion report input state %ld, expected %lu",  v29,  v28);
          goto LABEL_64;
        }
      }

      return;
    }

    if (v15 != 1) {
      return;
    }
    if (a4 == 30)
    {
      *(void *)buf = *(void *)a3;
      *(_WORD *)&buf[8] = *((_WORD *)a3 + 4);
      HIBYTE(v28) = !sub_1006A7D30(buf, byte_10130DFF6);
      *(void *)unsigned int v29 = sub_101171D38();
      uint64_t v11 = (char *)&v28 + 7;
      uint64_t v12 = a1;
      uint64_t v13 = 1LL;
      uint64_t v14 = 1LL;
      goto LABEL_13;
    }

    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101848ED8);
    }
    int v22 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = 30LL;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "Bad motion report input %ld, expected %lu",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 == -1) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }

  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_101848ED8);
  }
  uint64_t v6 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "received bad hid report", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_101848ED8);
    }
    *(_WORD *)unsigned int v29 = 0;
    LODWORD(v28) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "received bad hid report",  v29,  v28,  *(void *)v29,  *(_OWORD *)&v29[8]);
    goto LABEL_64;
  }

    unint64_t v10 = 0LL;
    goto LABEL_73;
  }

  uint64_t v11 = *(void **)(a1 + 1904);
  if (!v11 || (uint64_t v12 = [v11 type], v12 != objc_msgSend(a2, "type")))
  {
    int v18 = *(void **)(a1 + 1912);
    if (v18 && (uint64_t v19 = [v18 type], v19 == objc_msgSend(a2, "type")))
    {
      uint64_t v20 = *(void *)(a1 + 2040);
      if (v20) {
        ++*(_DWORD *)(v20 + 64);
      }
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      int v21 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = [a2 ID];
        char v23 = [a2 type];
        int v24 = [*(id *)(a1 + 1912) ID];
        int v25 = [*(id *)(a1 + 1912) state];
        *(_DWORD *)buf = 138544130;
        v103 = v22;
        v104 = 2048;
        v105 = v23;
        v106 = 2114;
        v107 = v24;
        v108 = 2050;
        v109 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current upload request with Request ID:%{public}@ which is in state:%{public}ld",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        unsigned int v57 = qword_101934898;
        int v58 = [a2 ID];
        v59 = [a2 type];
        v60 = [*(id *)(a1 + 1912) ID];
        v61 = [*(id *)(a1 + 1912) state];
        v94 = 138544130;
        v95 = v58;
        v96 = 2048;
        v97 = v59;
        v98 = 2114;
        v99 = v60;
        v100 = 2050;
        v101 = v61;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v57,  0LL,  "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current upload request with Request ID:%{public}@ which is in state:%{public}ld",  &v94,  42);
        int v63 = (uint8_t *)v62;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v62);
        if (v63 != buf) {
          free(v63);
        }
      }

      if ([*(id *)(a1 + 1912) state] != (id)1) {
        [*(id *)(a1 + 1912) setState:16];
      }
      [*(id *)(a1 + 1896) addObject:*(void *)(a1 + 1912)];
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v26 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = [*(id *)(a1 + 1912) ID];
        *(_DWORD *)buf = 138543362;
        v103 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest,fCurrentUploadRequest:%{public}@ moved to fRequestsHandled queue",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        int v64 = qword_101934898;
        unsigned int v65 = [*(id *)(a1 + 1912) ID];
        v94 = 138543362;
        v95 = v65;
        LODWORD(v88) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v64,  0LL,  "#EED2,isDuplicateRequest,fCurrentUploadRequest:%{public}@ moved to fRequestsHandled queue",  &v94,  v88);
        int v67 = (uint8_t *)v66;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v66);
        if (v67 != buf) {
          free(v67);
        }
      }

      *(void *)(a1 + 1912) = 0LL;
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      unsigned int v28 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v29 = [a2 ID];
        *(_DWORD *)buf = 138543362;
        v103 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest, Allow the new upload request:%{public}@ to be added to pending queue",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_72;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      int v30 = qword_101934898;
      uint64_t v31 = [a2 ID];
      v94 = 138543362;
      v95 = v31;
      LODWORD(v88) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v30,  0LL,  "#EED2,isDuplicateRequest, Allow the new upload request:%{public}@ to be added to pending queue",  &v94,  v88);
      int v33 = (uint8_t *)v32;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v32);
    }

    else
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      uint64_t v34 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v35 = [a2 ID];
        *(_DWORD *)buf = 138543362;
        v103 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "#EED2,isDuplicateRequest, duplicate request not found, allow the new request:%{public}@ to be added to pending queue",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_72;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      unsigned int v36 = qword_101934898;
      int v37 = [a2 ID];
      v94 = 138543362;
      v95 = v37;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v36,  0LL,  "#EED2,isDuplicateRequest, duplicate request not found, allow the new request:%{public}@ to be added to pending queue",  &v94,  12);
      int v33 = (uint8_t *)v38;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v38);
    }

  v68 = v125;
  v69 = v126;
  if (v125 == v126)
  {
    v72 = 0LL;
  }

  else
  {
    v70 = *(double *)(v1 + 160) * 1000000.0;
    v71 = v125;
    do
    {
      *(void *)(v71 + 42) -= (unint64_t)v70;
      v71 += 50;
    }

    while (v71 != v69);
    v72 = 0x8F5C28F5C28F5C29LL * ((v69 - v68) >> 1);
    v73 = *(void *)(v1 + 176) + (int)v72;
    ++*(void *)(v1 + 168);
    *(void *)(v1 + 176) = v73;
    v74 = v119;
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10186E820);
    }
    v75 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
    {
      v76 = v123;
      v77 = *(void *)(v125 + 42);
      v78 = *((void *)v126 - 1);
      v79 = *(void *)(v1 + 168);
      v80 = *(void *)(v1 + 176);
      v136 = 136448258;
      v137 = v76;
      v138 = 2050;
      *(void *)v139 = v77;
      *(_WORD *)&v139[8] = 2050;
      *(void *)&v139[10] = v78;
      *(_WORD *)&v139[18] = 2050;
      *(double *)&v139[20] = (double)v77 * 0.000000999999997;
      *(_WORD *)&v139[28] = 2050;
      *(double *)&v139[30] = (double)v78 * 0.000000999999997;
      *(_WORD *)&v139[38] = 1026;
      *(_DWORD *)&v139[40] = v74;
      *(_WORD *)&v139[44] = 1026;
      *(_DWORD *)&v139[46] = v72;
      *(_WORD *)&v139[50] = 2050;
      *(void *)&v139[52] = v79;
      v140[0] = 2050;
      *(void *)&v140[1] = v80;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public }d to %{public}d, batch num %{public}llu, sample num %{public}llu",  (uint8_t *)&v136,  0x54u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v136, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10186E820);
      }
      v106 = v123;
      v107 = *(void *)(v125 + 42);
      v108 = *((void *)v126 - 1);
      v109 = *(void *)(v1 + 168);
      v110 = *(void *)(v1 + 176);
      v128 = 136448258;
      v129 = v106;
      v130 = 2050;
      *(void *)v131 = v107;
      *(_WORD *)&v131[8] = 2050;
      *(void *)&v131[10] = v108;
      *(_WORD *)&v131[18] = 2050;
      *(double *)&v131[20] = (double)v107 * 0.000000999999997;
      *(_WORD *)&v131[28] = 2050;
      *(double *)&v131[30] = (double)v108 * 0.000000999999997;
      *(_WORD *)&v131[38] = 1026;
      *(_DWORD *)&v131[40] = v74;
      *(_WORD *)&v131[44] = 1026;
      *(_DWORD *)&v131[46] = v72;
      *(_WORD *)&v131[50] = 2050;
      *(void *)&v131[52] = v109;
      v132[0] = 2050;
      *(void *)&v132[1] = v110;
      LODWORD(v117) = 84;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v136,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public }d to %{public}d, batch num %{public}llu, sample num %{public}llu",  &v128,  v117);
      v112 = (int *)v111;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v111);
      if (v112 != &v136) {
        free(v112);
      }
    }

    v81 = ((double)*(unint64_t *)(v125 + 42) - *(double *)(v1 + 184)) / 1000000.0;
    if (v81 > v8 * 1.5)
    {
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10186E820);
      }
      v82 = (os_log_s *)qword_1019347C8;
      if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
      {
        v83 = v123;
        v84 = *(double *)(v1 + 184) * 0.000001;
        v85 = (double)*((unint64_t *)v126 - 1) * 0.000001;
        v136 = 136446978;
        v137 = v83;
        v138 = 2050;
        *(double *)v139 = v81;
        *(_WORD *)&v139[8] = 2050;
        *(double *)&v139[10] = v84;
        *(_WORD *)&v139[18] = 2050;
        *(double *)&v139[20] = v85;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f",  (uint8_t *)&v136,  0x2Au);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v136, 0x65CuLL);
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10186E820);
        }
        v113 = *(double *)(v1 + 184) * 0.000001;
        v114 = (double)*((unint64_t *)v126 - 1) * 0.000001;
        v128 = 136446978;
        v129 = v123;
        v130 = 2050;
        *(double *)v131 = v81;
        *(_WORD *)&v131[8] = 2050;
        *(double *)&v131[10] = v113;
        *(_WORD *)&v131[18] = 2050;
        *(double *)&v131[20] = v114;
        LODWORD(v117) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v136,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f",  &v128,  v117);
        v116 = (int *)v115;
        sub_10029211C("Generic", 1LL, 0, 0LL, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v115);
        if (v116 != &v136) {
          free(v116);
        }
      }
    }

    *(double *)(v1 + 184) = (double)*((unint64_t *)v126 - 1);
  }

  v136 = v72;
  v86 = *(void *)(v1 + 216);
  if (!v86) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t, char **, int *))(*(void *)v86 + 48LL))(v86, &v125, &v136);
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }

  return v72;
}

  unsigned int v35 = *(void *)(a1 + 72);
  if (!v35) {
    unsigned int v35 = *(void *)(qword_1019A1C80 + 72);
  }
  unsigned int v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DE290(v35);
  int v37 = (int)v36;
  else {
    int v38 = 1;
  }
  uint64_t v5 = (v5 + v37 + v38 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x800) == 0)
  {
LABEL_57:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_84;
  }

  (*(void (**)(uint64_t))(*(void *)v47 + 24LL))(v47);
  return v9;
}

  v101 = a1[2].u64[0];
  v102 = a1->i64[1];
  v103 = (void *)(v102 + 8 * (v101 / 0x11));
  if (a1[1].i64[0] == v102) {
    v104 = 0LL;
  }
  else {
    v104 = *v103 + 232 * (v101 % 0x11);
  }
  v112.n128_u64[0] = (unint64_t)v103;
  v112.n128_u64[1] = v104;
  sub_100414E10(&v112, v20);
  return v112.n128_u64[0];
}

  if (*(void *)(a2 + 48) != *(void *)(a2 + 40))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v38 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134349056;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filter initialized",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      LODWORD(v58) = 134349056;
      *(void *)((char *)&v58 + 4) = v4;
      LODWORD(v50) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filter initialized",  &v58,  v50);
      int v48 = (char *)v47;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)",  "%s\n",  v47);
    }

    uint64_t v6 = 1LL;
    goto LABEL_93;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  int v41 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "CLMMPED,%{public}.1lf,Unexpected,zero particles at initialization",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    LODWORD(v58) = 134349056;
    *(void *)((char *)&v58 + 4) = v4;
    LODWORD(v50) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMMPED,%{public}.1lf,Unexpected,zero particles at initialization",  &v58,  v50);
    unsigned int v35 = (char *)v49;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)",  "%s\n",  v49);
LABEL_111:
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x22u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_74;
  }

  int v30 = *(void *)(a2 + 88);
  v5 |= 0x400uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 88) = v30;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMaxAccelNormThreshold", *(void *)(a1 + 200));
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 96), 0x43u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }

  uint64_t v27 = *(_DWORD *)(a2 + 88);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 88) = v27;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_74:
    uint64_t result = *(double *)(a2 + 8);
    *(void *)(a1 + 156) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000000) != 0) {
    goto LABEL_73;
  }
LABEL_36:
  if ((v5 & 0x80000000) != 0) {
LABEL_37:
  }
    PB::TextFormatter::format(this, "totalNumStaticBins", *(_DWORD *)(a1 + 148));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x23u);
  if ((*(void *)(v3 + 156) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 0x24u);
  }
  return result;
}

  PB::TextFormatter::format(this, "lastChargerStateDuration", *(double *)(a1 + 240));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 280), 0x1Au);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_74;
  }

  uint64_t result = *(float *)(a2 + 48);
  v3 |= 0x80uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 48) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x16u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }

        *(_DWORD *)(a1 + 48) = v26;
        goto LABEL_77;
      case 2u:
        *(_BYTE *)(a1 + 60) |= 2u;
        int v30 = *((void *)this + 1);
        uint64_t v31 = *((void *)this + 2);
        int v32 = *(void *)this;
        if (v30 <= 0xFFFFFFFFFFFFFFF5LL && v30 + 10 <= v31)
        {
          int v33 = 0;
          uint64_t v34 = 0;
          unsigned int v35 = 0LL;
          do
          {
            unsigned int v36 = v30 + 1;
            *((void *)this + 1) = v30 + 1;
            int v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              goto LABEL_76;
            }
            v33 += 7;
            int v30 = v36;
            int v15 = v34++ > 8;
          }

          while (!v15);
LABEL_64:
          LODWORD(v35) = 0;
          goto LABEL_76;
        }

        unsigned int v55 = 0;
        unsigned int v56 = 0;
        unsigned int v35 = 0LL;
        if (v31 <= v30) {
          uint64_t v31 = *((void *)this + 1);
        }
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unsigned int v57 = v30 + 1;
            int v58 = *(_BYTE *)(v32 + v30);
            *((void *)this + 1) = v57;
            v35 |= (unint64_t)(v58 & 0x7F) << v55;
            if (v58 < 0)
            {
              v55 += 7;
              int v30 = v57;
              int v15 = v56++ > 8;
              if (v15) {
                goto LABEL_64;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v35) = 0;
            }
          }

          break;
        }

  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 200));
  uint64_t v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x8000000) != 0) {
    goto LABEL_73;
  }
LABEL_40:
  if ((v16 & 8) != 0) {
LABEL_41:
  }
    PB::TextFormatter::format(this, "vehicleProbabilityTs", *(void *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 0x20u);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200000) == 0)
  {
LABEL_41:
    if ((v14 & 0x400) == 0) {
      goto LABEL_42;
    }
    goto LABEL_74;
  }

  int v15 = *(_BYTE *)(a2 + 165);
  v3 |= 0x40000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 165) = v15;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "kParameterRollingPercentileWindowSizeRO", *(_DWORD *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x40000000000LL) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x70u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_74;
  }

  int v15 = *(_BYTE *)(a2 + 160);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_BYTE *)(a1 + 160) = v15;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_37:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "stepEnd", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x21u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

  int v33 = *(void *)(a2 + 32);
  v3 |= 8uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 32) = v33;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x800000000LL) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "rolloverPassThru", *(_BYTE *)(a1 + 209));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000000000LL) == 0)
  {
LABEL_33:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 224), 0x1Du);
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v16 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_74;
  }

  int v22 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 68) = v22;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x10) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 0x1Fu);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

  char v23 = *(_DWORD *)(a2 + 100);
  v3 |= 0x400000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 100) = v23;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }

  PB::TextFormatter::format(this, "horizontalTranslationSimilarityBaseline", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_74;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0x15u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_74;
  }

void sub_10006F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10006F420(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AE28;
  sub_10006F480(a1);
  uint64_t v2 = (void *)*((void *)a1 + 17);
  if (v2) {
    operator delete[](v2);
  }
  sub_10008D0EC((uint64_t)a1 + 80);
  sub_10008D0EC((uint64_t)a1 + 56);
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10006F480(void *a1)
{
  uint64_t v2 = a1[22];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  if ((void *)qword_1019A0880 != a1)
  {
    uint64_t v4 = a1[14];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = a1[15];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

void sub_10006F510(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

double sub_10006F524()
{
  v0 = (char *)operator new(0xC8uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)v0 = off_10181AE28;
  *((_DWORD *)v0 + 6) = 0;
  *((void *)v0 + 10) = 0LL;
  *((void *)v0 + 11) = 0LL;
  *((_DWORD *)v0 + 24) = 0;
  v0[104] = 0;
  *((void *)v0 + 23) = 0LL;
  double result = 0.0;
  *((_OWORD *)v0 + 2) = 0u;
  *((_OWORD *)v0 + 3) = 0u;
  *(_OWORD *)(v0 + 60) = 0u;
  *(_OWORD *)(v0 + 108) = 0u;
  *(_OWORD *)(v0 + 124) = 0u;
  *(_OWORD *)(v0 + 140) = 0u;
  *(_OWORD *)(v0 + 156) = 0u;
  *((_DWORD *)v0 + 43) = 0;
  *((void *)v0 + 22) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 48) = 0;
  return result;
}

uint64_t sub_10006F590(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 192);
  if ((v2 & 0x1FE) != 0)
  {
    *(_BYTE *)(result + 104) = 0;
    *(void *)(result + 40) = 0LL;
    *(void *)(result + 48) = 0LL;
    *(void *)(result + 32) = 0LL;
  }

  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t v3 = *(void *)(result + 112);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          uint64_t v4 = 0LL;
          do
          {
            uint64_t v5 = *(void *)(*(void *)(v3 + 8) + 8 * v4);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
            ++v4;
          }

          while (v4 < *(int *)(v3 + 16));
        }

        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 192);
      }
    }

    *(_DWORD *)(v1 + 108) = 0;
    if ((v2 & 0x400) != 0)
    {
      double result = *(void *)(v1 + 120);
      if (result)
      {
        double result = sub_10006E674(result);
        int v2 = *(_DWORD *)(v1 + 192);
      }
    }

    *(void *)(v1 + 128) = 0LL;
    *(void *)(v1 + 152) = 0LL;
  }

  if ((v2 & 0xFF0000) != 0)
  {
    *(_DWORD *)(v1 + 184) = 0;
    *(void *)(v1 + 160) = 0LL;
    *(void *)(v1 + 168) = 0LL;
    if ((v2 & 0x200000) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 176);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }

  if (*(int *)(v1 + 16) >= 1)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v1 + 8) + 8 * v7);
      double result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32LL))(v8);
      ++v7;
    }

    while (v7 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  if (*(int *)(v1 + 64) >= 1)
  {
    uint64_t v9 = 0LL;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v9);
      double result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32LL))(v10);
      ++v9;
    }

    while (v9 < *(int *)(v1 + 64));
  }

  *(_DWORD *)(v1 + 64) = 0;
  if (*(int *)(v1 + 88) >= 1)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(v1 + 80) + 8 * v11);
      double result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32LL))(v12);
      ++v11;
    }

    while (v11 < *(int *)(v1 + 88));
  }

  *(_DWORD *)(v1 + 88) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 192) = 0;
  return result;
}

uint64_t sub_10006F73C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = a1 + 136;
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  v126 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56);
  v127 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80);
  v128 = (unint64_t *)(a1 + 32);
  uint64_t v7 = (unsigned int *)(a1 + 108);
  uint64_t v8 = (unsigned int *)(a1 + 152);
  v133 = (unsigned int *)(a1 + 160);
  v134 = (unsigned int *)(a1 + 156);
  v131 = (unsigned int *)(a1 + 168);
  v132 = (unsigned int *)(a1 + 164);
  v130 = (unsigned int *)(a1 + 172);
  v129 = (unsigned int *)(a1 + 184);
LABEL_2:
  while (2)
  {
    uint64_t v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_80;
        }
        while (1)
        {
          int v12 = *(_DWORD *)(a1 + 20);
          uint64_t v13 = *(int *)(a1 + 16);
          if ((int)v13 >= v12)
          {
            if (v12 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v12 + 1);
              int v12 = *(_DWORD *)(a1 + 20);
            }

            *(_DWORD *)(a1 + 20) = v12 + 1;
            int v15 = operator new(0x70uLL);
            v15[1] = 0LL;
            v15[2] = 0LL;
            void *v15 = off_10181A978;
            *((_DWORD *)v15 + 6) = 0;
            v15[9] = 0LL;
            v15[10] = 0LL;
            *((_DWORD *)v15 + 22) = 0;
            v15[4] = 0LL;
            v15[5] = 0LL;
            v15[6] = 0LL;
            v15[7] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
            v15[8] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
            *((_WORD *)v15 + 48) = 0;
            *((_DWORD *)v15 + 25) = 0;
            *((_DWORD *)v15 + 26) = 0;
            uint64_t v16 = *(void *)(a1 + 8);
            uint64_t v17 = *(int *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v17 + 1;
            *(void *)(v16 + 8 * v17) = v15;
          }

          else
          {
            uint64_t v14 = *(void *)(a1 + 8);
            *(_DWORD *)(a1 + 16) = v13 + 1;
            int v15 = *(void **)(v14 + 8 * v13);
          }

          int v18 = (char *)*((void *)this + 1);
          if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v135)) {
              return 0LL;
            }
          }

          else
          {
            v135[0] = *v18;
            *((void *)this + 1) = v18 + 1;
          }

          int v19 = *((_DWORD *)this + 14);
          int v20 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v19 + 1;
          if (v19 >= v20) {
            return 0LL;
          }
          int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v135[0]);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
          int v23 = *((_DWORD *)this + 14);
          BOOL v24 = __OFSUB__(v23, 1);
          int v25 = v23 - 1;
          if (v25 < 0 == v24) {
            *((_DWORD *)this + 14) = v25;
          }
          uint64_t v27 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          int v28 = *v27;
          if (v28 != 10) {
            break;
          }
          *((void *)this + 1) = v27 + 1;
        }

        if (v28 != 16) {
          continue;
        }
        unsigned int v29 = (char *)(v27 + 1);
        *((void *)this + 1) = v29;
        goto LABEL_29;
      case 2u:
        int v11 = TagFallback & 7;
        unsigned int v29 = (char *)*((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
LABEL_29:
        if ((unint64_t)v29 >= v26 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v128);
          if (!(_DWORD)result) {
            return result;
          }
          int v30 = (_BYTE *)*((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
        }

        else
        {
          unint64_t *v128 = *v29;
          int v30 = v29 + 1;
          *((void *)this + 1) = v30;
        }

        *(_DWORD *)(a1 + 192) |= 2u;
        *((void *)this + 1) = v30 + 1;
LABEL_92:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v135) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 40) = *(void *)v135;
        *(_DWORD *)(a1 + 192) |= 4u;
        unsigned int v57 = (_BYTE *)*((void *)this + 1);
        unint64_t v31 = *((void *)this + 2);
        int v32 = v57 + 1;
        *((void *)this + 1) = v32;
LABEL_96:
        if ((unint64_t)v32 >= v31 || *v32 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v135);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v58 = v135[0];
        }

        else
        {
          unsigned int v58 = *v32;
          *((void *)this + 1) = v32 + 1;
        }

        if (v58 <= 5)
        {
          *(_DWORD *)(a1 + 192) |= 8u;
          *(_DWORD *)(a1 + 48) = v58;
        }

        v59 = (_BYTE *)*((void *)this + 1);
        unint64_t v33 = *((void *)this + 2);
        uint64_t v34 = v59 + 1;
        *((void *)this + 1) = v34;
LABEL_106:
        if ((unint64_t)v34 >= v33 || *v34 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v135);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v60 = v135[0];
        }

        else
        {
          unsigned int v60 = *v34;
          *((void *)this + 1) = v34 + 1;
        }

        if (v60 <= 3)
        {
          *(_DWORD *)(a1 + 192) |= 0x10u;
          *(_DWORD *)(a1 + 52) = v60;
        }

        v61 = (_BYTE *)*((void *)this + 1);
        do
        {
          *((void *)this + 1) = v61 + 1;
LABEL_116:
          int v62 = *(_DWORD *)(a1 + 68);
          uint64_t v63 = *(int *)(a1 + 64);
          if ((int)v63 >= v62)
          {
            if (v62 == *(_DWORD *)(a1 + 72))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v126, v62 + 1);
              int v62 = *(_DWORD *)(a1 + 68);
            }

            *(_DWORD *)(a1 + 68) = v62 + 1;
            unsigned int v65 = operator new(0x30uLL);
            v65[2] = 0LL;
            v65[3] = 0LL;
            *((_DWORD *)v65 + 8) = 0;
            *unsigned int v65 = off_10181A9F0;
            v65[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
            v65[5] = 0LL;
            uint64_t v66 = *(void *)(a1 + 56);
            uint64_t v67 = *(int *)(a1 + 64);
            *(_DWORD *)(a1 + 64) = v67 + 1;
            *(void *)(v66 + 8 * v67) = v65;
          }

          else
          {
            uint64_t v64 = *(void *)(a1 + 56);
            *(_DWORD *)(a1 + 64) = v63 + 1;
            unsigned int v65 = *(void **)(v64 + 8 * v63);
          }

          v68 = (char *)*((void *)this + 1);
          if ((unint64_t)v68 >= *((void *)this + 2) || *v68 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v135)) {
              return 0LL;
            }
          }

          else
          {
            v135[0] = *v68;
            *((void *)this + 1) = v68 + 1;
          }

          int v69 = *((_DWORD *)this + 14);
          int v70 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v69 + 1;
          if (v69 >= v70) {
            return 0LL;
          }
          int v71 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v135[0]);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v71);
          int v73 = *((_DWORD *)this + 14);
          BOOL v24 = __OFSUB__(v73, 1);
          int v74 = v73 - 1;
          if (v74 < 0 == v24) {
            *((_DWORD *)this + 14) = v74;
          }
          v61 = (_BYTE *)*((void *)this + 1);
          int v75 = *v61;
        }

        while (v75 == 50);
        if (v75 != 58) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v61 + 1;
LABEL_134:
          int v76 = *(_DWORD *)(a1 + 92);
          uint64_t v77 = *(int *)(a1 + 88);
          if ((int)v77 >= v76)
          {
            if (v76 == *(_DWORD *)(a1 + 96))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v127, v76 + 1);
              int v76 = *(_DWORD *)(a1 + 92);
            }

            *(_DWORD *)(a1 + 92) = v76 + 1;
            v79 = operator new(0x38uLL);
            v79[1] = 0LL;
            v79[2] = 0LL;
            void *v79 = off_10181AA68;
            *((_DWORD *)v79 + 6) = 1;
            *((_WORD *)v79 + 14) = 0;
            v79[5] = 1LL;
            v79[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
            *((_DWORD *)v79 + 12) = 0;
            uint64_t v80 = *(void *)(a1 + 80);
            uint64_t v81 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v81 + 1;
            *(void *)(v80 + 8 * v81) = v79;
          }

          else
          {
            uint64_t v78 = *(void *)(a1 + 80);
            *(_DWORD *)(a1 + 88) = v77 + 1;
            v79 = *(void **)(v78 + 8 * v77);
          }

          v82 = (char *)*((void *)this + 1);
          if ((unint64_t)v82 >= *((void *)this + 2) || *v82 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v135)) {
              return 0LL;
            }
          }

          else
          {
            v135[0] = *v82;
            *((void *)this + 1) = v82 + 1;
          }

          int v83 = *((_DWORD *)this + 14);
          int v84 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v83 + 1;
          if (v83 >= v84) {
            return 0LL;
          }
          int v85 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v135[0]);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v85);
          int v87 = *((_DWORD *)this + 14);
          BOOL v24 = __OFSUB__(v87, 1);
          int v88 = v87 - 1;
          if (v88 < 0 == v24) {
            *((_DWORD *)this + 14) = v88;
          }
          v61 = (_BYTE *)*((void *)this + 1);
          unint64_t v35 = *((void *)this + 2);
          int v89 = *v61;
        }

        while (v89 == 58);
        if (v89 != 64) {
          continue;
        }
        unsigned int v36 = v61 + 1;
        *((void *)this + 1) = v36;
LABEL_152:
        if ((unint64_t)v36 >= v35 || *v36 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v135);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v90 = v135[0];
          v91 = (_BYTE *)*((void *)this + 1);
          unint64_t v35 = *((void *)this + 2);
        }

        else
        {
          unsigned int v90 = *v36;
          v91 = v36 + 1;
          *((void *)this + 1) = v91;
        }

        *(_BYTE *)(a1 + 104) = v90 != 0;
        int v37 = *(_DWORD *)(a1 + 192) | 0x80;
        *(_DWORD *)(a1 + 192) = v37;
        *((void *)this + 1) = v91 + 1;
LABEL_160:
        *(_DWORD *)(a1 + 192) = v37 | 0x100;
        v92 = *(void **)(a1 + 112);
        if (!v92)
        {
          v92 = operator new(0x28uLL);
          v92[1] = 0LL;
          v92[2] = 0LL;
          void *v92 = off_10181AB58;
          *((_DWORD *)v92 + 6) = 0;
          v92[4] = 0LL;
          *(void *)(a1 + 112) = v92;
        }

        v93 = (char *)*((void *)this + 1);
        if ((unint64_t)v93 >= *((void *)this + 2) || *v93 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v135)) {
            return 0LL;
          }
        }

        else
        {
          v135[0] = *v93;
          *((void *)this + 1) = v93 + 1;
        }

        int v94 = *((_DWORD *)this + 14);
        int v95 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v94 + 1;
        if (v94 >= v95) {
          return 0LL;
        }
        int v96 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v135[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v96);
        int v98 = *((_DWORD *)this + 14);
        BOOL v24 = __OFSUB__(v98, 1);
        int v99 = v98 - 1;
        if (v99 < 0 == v24) {
          *((_DWORD *)this + 14) = v99;
        }
        v100 = (_BYTE *)*((void *)this + 1);
        unint64_t v38 = *((void *)this + 2);
        int v39 = v100 + 1;
        *((void *)this + 1) = v39;
LABEL_174:
        if ((unint64_t)v39 >= v38 || *v39 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result) {
            return result;
          }
          v101 = (_BYTE *)*((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
        }

        else
        {
          *uint64_t v7 = *v39;
          v101 = v39 + 1;
          *((void *)this + 1) = v101;
        }

        int v40 = *(_DWORD *)(a1 + 192) | 0x200;
        *(_DWORD *)(a1 + 192) = v40;
        *((void *)this + 1) = v101 + 1;
LABEL_182:
        *(_DWORD *)(a1 + 192) = v40 | 0x400;
        v102 = *(void **)(a1 + 120);
        if (!v102)
        {
          v102 = operator new(0x50uLL);
          v102[1] = 0LL;
          v102[2] = 0LL;
          void *v102 = off_10181ADB0;
          *((_DWORD *)v102 + 6) = 0;
          v102[4] = 0LL;
          v102[5] = 0LL;
          *((_DWORD *)v102 + 12) = 0;
          v102[8] = 0LL;
          v102[9] = 0LL;
          v102[7] = 0LL;
          *(void *)(a1 + 120) = v102;
        }

        v103 = (char *)*((void *)this + 1);
        if ((unint64_t)v103 >= *((void *)this + 2) || *v103 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v135)) {
            return 0LL;
          }
        }

        else
        {
          v135[0] = *v103;
          *((void *)this + 1) = v103 + 1;
        }

        int v104 = *((_DWORD *)this + 14);
        int v105 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v104 + 1;
        if (v104 >= v105) {
          return 0LL;
        }
        int v106 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v135[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v106);
        int v108 = *((_DWORD *)this + 14);
        BOOL v24 = __OFSUB__(v108, 1);
        int v109 = v108 - 1;
        if (v109 < 0 == v24) {
          *((_DWORD *)this + 14) = v109;
        }
        v110 = (_BYTE *)*((void *)this + 1);
        unint64_t v41 = *((void *)this + 2);
        if ((unint64_t)v110 < v41 && *v110 == 96)
        {
          unsigned int v42 = v110 + 1;
          *((void *)this + 1) = v42;
LABEL_196:
          if ((unint64_t)v42 >= v41 || *v42 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v135);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v111 = v135[0];
          }

          else
          {
            unsigned int v111 = *v42;
            *((void *)this + 1) = v42 + 1;
          }

          if (v111 <= 3)
          {
            *(_DWORD *)(a1 + 192) |= 0x800u;
            *(_DWORD *)(a1 + 128) = v111;
          }

          v112 = (_BYTE *)*((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          if ((unint64_t)v112 < v43 && *v112 == 104)
          {
            char v44 = v112 + 1;
            *((void *)this + 1) = v44;
LABEL_206:
            if ((unint64_t)v44 >= v43 || *v44 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v135);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v113 = v135[0];
            }

            else
            {
              unsigned int v113 = *v44;
              *((void *)this + 1) = v44 + 1;
            }

            if (v113 <= 3)
            {
              *(_DWORD *)(a1 + 192) |= 0x1000u;
              *(_DWORD *)(a1 + 132) = v113;
            }

            v114 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v45 = *((void *)this + 2);
            if ((unint64_t)v114 < v45)
            {
              int v115 = *v114;
              goto LABEL_226;
            }
          }
        }

        continue;
      case 3u:
        int v11 = TagFallback & 7;
        if (v11 == 1) {
          goto LABEL_92;
        }
        goto LABEL_80;
      case 4u:
        int v11 = TagFallback & 7;
        int v32 = (char *)*((void *)this + 1);
        unint64_t v31 = *((void *)this + 2);
        goto LABEL_96;
      case 5u:
        int v11 = TagFallback & 7;
        uint64_t v34 = (char *)*((void *)this + 1);
        unint64_t v33 = *((void *)this + 2);
        goto LABEL_106;
      case 6u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_116;
        }
        goto LABEL_80;
      case 7u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_134;
        }
        goto LABEL_80;
      case 8u:
        int v11 = TagFallback & 7;
        unsigned int v36 = (char *)*((void *)this + 1);
        unint64_t v35 = *((void *)this + 2);
        goto LABEL_152;
      case 9u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_80;
        }
        int v37 = *(_DWORD *)(a1 + 192);
        goto LABEL_160;
      case 0xAu:
        int v11 = TagFallback & 7;
        int v39 = (char *)*((void *)this + 1);
        unint64_t v38 = *((void *)this + 2);
        goto LABEL_174;
      case 0xBu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_80;
        }
        int v40 = *(_DWORD *)(a1 + 192);
        goto LABEL_182;
      case 0xCu:
        int v11 = TagFallback & 7;
        unsigned int v42 = (char *)*((void *)this + 1);
        unint64_t v41 = *((void *)this + 2);
        goto LABEL_196;
      case 0xDu:
        int v11 = TagFallback & 7;
        char v44 = (char *)*((void *)this + 1);
        unint64_t v43 = *((void *)this + 2);
        goto LABEL_206;
      case 0xEu:
        int v11 = TagFallback & 7;
        if (v11 == 2)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline( this,  sub_100064154,  v5);
          if (!(_DWORD)result) {
            return result;
          }
          while (1)
          {
            v114 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v45 = *((void *)this + 2);
            int v115 = *v114;
            if (v115 == 120) {
              break;
            }
LABEL_226:
            if (v115 != 112) {
              goto LABEL_2;
            }
            uint64_t v46 = (char *)(v114 + 1);
            *((void *)this + 1) = v46;
LABEL_215:
            if ((unint64_t)v46 >= v45 || *v46 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v135);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v116 = v135[0];
            }

            else
            {
              unsigned int v116 = *v46;
              *((void *)this + 1) = v46 + 1;
            }

            if (v116 <= 8)
            {
              int v117 = *(_DWORD *)(a1 + 144);
              if (v117 == *(_DWORD *)(a1 + 148))
              {
                sub_10004AAFC(v5, v117 + 1);
                int v117 = *(_DWORD *)(a1 + 144);
              }

              uint64_t v118 = *(void *)(a1 + 136);
              *(_DWORD *)(a1 + 144) = v117 + 1;
              *(_DWORD *)(v118 + 4LL * v117) = v116;
            }
          }

          unsigned int v47 = v114 + 1;
          *((void *)this + 1) = v47;
LABEL_229:
          if ((unint64_t)v47 >= v45 || (char)*v47 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
            if (!(_DWORD)result) {
              return result;
            }
            v119 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v45 = *((void *)this + 2);
          }

          else
          {
            *uint64_t v8 = *v47;
            v119 = v47 + 1;
            *((void *)this + 1) = v119;
          }

          *(_DWORD *)(a1 + 192) |= 0x4000u;
          if ((int)v45 - (int)v119 >= 2 && *v119 == 128 && v119[1] == 1)
          {
            int v48 = v119 + 2;
            *((void *)this + 1) = v48;
LABEL_238:
            if ((unint64_t)v48 >= v45 || (char)*v48 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v134);
              if (!(_DWORD)result) {
                return result;
              }
              v120 = (unsigned __int8 *)*((void *)this + 1);
              unint64_t v45 = *((void *)this + 2);
            }

            else
            {
              unsigned int *v134 = *v48;
              v120 = v48 + 1;
              *((void *)this + 1) = v120;
            }

            *(_DWORD *)(a1 + 192) |= 0x8000u;
            if ((int)v45 - (int)v120 >= 2 && *v120 == 136 && v120[1] == 1)
            {
              int v49 = v120 + 2;
              *((void *)this + 1) = v49;
LABEL_247:
              if ((unint64_t)v49 >= v45 || (char)*v49 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v133);
                if (!(_DWORD)result) {
                  return result;
                }
                v121 = (unsigned __int8 *)*((void *)this + 1);
                unint64_t v45 = *((void *)this + 2);
              }

              else
              {
                unsigned int *v133 = *v49;
                v121 = v49 + 1;
                *((void *)this + 1) = v121;
              }

              *(_DWORD *)(a1 + 192) |= 0x10000u;
              if ((int)v45 - (int)v121 >= 2 && *v121 == 144 && v121[1] == 1)
              {
                int v50 = v121 + 2;
                *((void *)this + 1) = v50;
LABEL_256:
                if ((unint64_t)v50 >= v45 || (char)*v50 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v132);
                  if (!(_DWORD)result) {
                    return result;
                  }
                  v122 = (unsigned __int8 *)*((void *)this + 1);
                  unint64_t v45 = *((void *)this + 2);
                }

                else
                {
                  unsigned int *v132 = *v50;
                  v122 = v50 + 1;
                  *((void *)this + 1) = v122;
                }

                *(_DWORD *)(a1 + 192) |= 0x20000u;
                if ((int)v45 - (int)v122 >= 2 && *v122 == 152 && v122[1] == 1)
                {
                  unsigned int v51 = v122 + 2;
                  *((void *)this + 1) = v51;
LABEL_265:
                  if ((unint64_t)v51 >= v45 || (char)*v51 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v131);
                    if (!(_DWORD)result) {
                      return result;
                    }
                    v123 = (unsigned __int8 *)*((void *)this + 1);
                    unint64_t v45 = *((void *)this + 2);
                  }

                  else
                  {
                    unsigned int *v131 = *v51;
                    v123 = v51 + 1;
                    *((void *)this + 1) = v123;
                  }

                  *(_DWORD *)(a1 + 192) |= 0x40000u;
                  if ((int)v45 - (int)v123 >= 2 && *v123 == 160 && v123[1] == 1)
                  {
                    int v52 = v123 + 2;
                    *((void *)this + 1) = v52;
LABEL_274:
                    if ((unint64_t)v52 >= v45 || (char)*v52 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v130);
                      if (!(_DWORD)result) {
                        return result;
                      }
                      v124 = (unsigned __int8 *)*((void *)this + 1);
                      unint64_t v45 = *((void *)this + 2);
                    }

                    else
                    {
                      unsigned int *v130 = *v52;
                      v124 = v52 + 1;
                      *((void *)this + 1) = v124;
                    }

                    *(_DWORD *)(a1 + 192) |= 0x80000u;
                    if ((int)v45 - (int)v124 >= 2 && *v124 == 168 && v124[1] == 1)
                    {
                      int v53 = v124 + 2;
                      *((void *)this + 1) = v53;
LABEL_283:
                      if ((unint64_t)v53 >= v45 || (char)*v53 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v129);
                        if (!(_DWORD)result) {
                          return result;
                        }
                        v125 = (unsigned __int8 *)*((void *)this + 1);
                        unint64_t v45 = *((void *)this + 2);
                      }

                      else
                      {
                        unsigned int *v129 = *v53;
                        v125 = v53 + 1;
                        *((void *)this + 1) = v125;
                      }

                      int v54 = *(_DWORD *)(a1 + 192) | 0x100000;
                      *(_DWORD *)(a1 + 192) = v54;
                      if ((int)v45 - (int)v125 >= 2 && *v125 == 178 && v125[1] == 1)
                      {
                        *((void *)this + 1) = v125 + 2;
LABEL_73:
                        *(_DWORD *)(a1 + 192) = v54 | 0x200000;
                        unsigned int v55 = *(void **)(a1 + 176);
                        if (v55 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
                        {
                          unsigned int v55 = operator new(0x18uLL);
                          v55[1] = 0LL;
                          v55[2] = 0LL;
                          *unsigned int v55 = 0LL;
                          *(void *)(a1 + 176) = v55;
                        }

                        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v55);
                        if (!(_DWORD)result) {
                          return result;
                        }
                        if (*((void *)this + 1) == *((void *)this + 2)
                          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                        {
                          *((_DWORD *)this + 8) = 0;
                          uint64_t result = 1LL;
                          *((_BYTE *)this + 36) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          continue;
        }

        if ((TagFallback & 7) == 0)
        {
          uint64_t v46 = (char *)*((void *)this + 1);
          unint64_t v45 = *((void *)this + 2);
          goto LABEL_215;
        }

LABEL_80:
        if (v11 != 4)
        {
          continue;
        }

        return 1LL;
      case 0xFu:
        int v11 = TagFallback & 7;
        unsigned int v47 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v45 = *((void *)this + 2);
        goto LABEL_229;
      case 0x10u:
        int v11 = TagFallback & 7;
        int v48 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v45 = *((void *)this + 2);
        goto LABEL_238;
      case 0x11u:
        int v11 = TagFallback & 7;
        int v49 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v45 = *((void *)this + 2);
        goto LABEL_247;
      case 0x12u:
        int v11 = TagFallback & 7;
        int v50 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v45 = *((void *)this + 2);
        goto LABEL_256;
      case 0x13u:
        int v11 = TagFallback & 7;
        unsigned int v51 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v45 = *((void *)this + 2);
        goto LABEL_265;
      case 0x14u:
        int v11 = TagFallback & 7;
        int v52 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v45 = *((void *)this + 2);
        goto LABEL_274;
      case 0x15u:
        int v11 = TagFallback & 7;
        int v53 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v45 = *((void *)this + 2);
        goto LABEL_283;
      case 0x16u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_80;
        }
        int v54 = *(_DWORD *)(a1 + 192);
        goto LABEL_73;
      default:
        int v11 = TagFallback & 7;
        goto LABEL_80;
    }
  }

  if ((v3 & 0x800) != 0) {
    v5 += 3;
  }
  if ((v3 & 0x1000) != 0)
  {
    char v44 = *(void *)(a1 + 96);
    if (!v44) {
      char v44 = *(void *)(qword_1019A0980 + 96);
    }
    unint64_t v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100074450(v44, a2);
    uint64_t v46 = (int)v45;
    else {
      unsigned int v47 = 1;
    }
    v5 += v46 + v47 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 128);
  }

  if ((v3 & 0x2000) != 0) {
    v5 += 3;
  }
  if ((v3 & 0x4000) != 0)
  {
    int v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 120);
    if ((v48 & 0x80000000) != 0)
    {
      int v49 = 12;
    }

    else if (v48 >= 0x80)
    {
      int v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v48, a2) + 2;
    }

    else
    {
      int v49 = 3;
    }

    v5 += v49;
  }

  [v3 setObject:v5 forKey:@"type"];
  has = (__int16)self->_has;
  if ((has & 4) != 0)
  {
    confidence = self->_confidence;
    if (confidence >= 3) {
      uint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_confidence);
    }
    else {
      uint64_t v9 = (NSString *)*(&off_10182CAF8 + confidence);
    }
    [v3 setObject:v9 forKey:@"confidence"];
    has = (__int16)self->_has;
    if ((has & 0x20) == 0)
    {
LABEL_82:
      if ((has & 0x10) == 0) {
        goto LABEL_98;
      }
      goto LABEL_94;
    }
  }

  else if ((has & 0x20) == 0)
  {
    goto LABEL_82;
  }

  mountedState = self->_mountedState;
  if (mountedState)
  {
    if (mountedState == 1) {
      int v11 = @"kMounted";
    }
    else {
      int v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_mountedState);
    }
  }

  else
  {
    int v11 = @"kNotMounted";
  }

  [v3 setObject:v11 forKey:@"mountedState"];
  has = (__int16)self->_has;
  if ((has & 0x10) != 0)
  {
LABEL_94:
    mountedConfidence = self->_mountedConfidence;
    if (mountedConfidence >= 3) {
      uint64_t v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_mountedConfidence);
    }
    else {
      uint64_t v13 = (NSString *)*(&off_10182CAF8 + mountedConfidence);
    }
    [v3 setObject:v13 forKey:@"mountedConfidence"];
    has = (__int16)self->_has;
  }

  if (!*(_BYTE *)(a2 + 212)) {
    goto LABEL_94;
  }
  unint64_t v35 = *(_DWORD *)(a2 + 208);
  if (!v35)
  {
    unsigned int v36 = 21LL;
    int v37 = 22LL;
    goto LABEL_85;
  }

  if (v35 == 1)
  {
    unsigned int v36 = 22LL;
    int v37 = 21LL;
LABEL_85:
    (*(void (**)(void))(**(void **)(a1 + 120) + 8 * v37))();
    (*(void (**)(void))(**(void **)(a1 + 120) + 8 * v36))();
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101839340);
  }
  unint64_t v38 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a2 + 208)) {
      int v39 = "powoffajon";
    }
    else {
      int v39 = "ajoffpowon";
    }
    *(_DWORD *)v200 = 136446210;
    *(void *)&v200[4] = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "@WifiLogic, decision, wifipower, %{public}s",  v200,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v200, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    if (*(_DWORD *)(a2 + 208)) {
      v127 = "powoffajon";
    }
    else {
      v127 = "ajoffpowon";
    }
    *(_DWORD *)__p = 136446210;
    *(void *)&__p[4] = v127;
    LODWORD(v152) = 12;
    v128 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiLogic, decision, wifipower, %{public}s",  __p,  v152);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v128);
    if (v128 != v200) {
      free(v128);
    }
  }

  [v3 setObject:v5 forKey:@"activityType"];
  has = self->_has;
  if ((*(_WORD *)&has & 0x100) != 0)
  {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_nCatherine),  @"nCatherine");
    has = self->_has;
    if ((*(_DWORD *)&has & 0x10000) == 0)
    {
LABEL_82:
      if ((*(_WORD *)&has & 0x2000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_106;
    }
  }

  else if ((*(_DWORD *)&has & 0x10000) == 0)
  {
    goto LABEL_82;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_nVeryLowCatherine),  @"nVeryLowCatherine");
  has = self->_has;
  if ((*(_WORD *)&has & 0x2000) == 0)
  {
LABEL_83:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_84;
    }
    goto LABEL_107;
  }

  [v3 setObject:v5 forKey:@"activityType"];
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_isStanding),  @"isStanding");
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_userMets),  @"userMets");
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_truthMets),  @"truthMets");
  has = (char)self->_has;
  if ((has & 0x10) != 0)
  {
    userMetsSource = self->_userMetsSource;
    if (userMetsSource >= 5) {
      uint64_t v10 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_userMetsSource);
    }
    else {
      uint64_t v10 = off_10183EFF0[userMetsSource];
    }
    [v3 setObject:v10 forKey:@"userMetsSource"];
    has = (char)self->_has;
    if ((has & 8) == 0)
    {
LABEL_82:
      if ((has & 2) == 0) {
        goto LABEL_83;
      }
      goto LABEL_95;
    }
  }

  else if ((*(_BYTE *)&self->_has & 8) == 0)
  {
    goto LABEL_82;
  }

  truthMetsSource = self->_truthMetsSource;
  if (truthMetsSource >= 5) {
    int v12 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_truthMetsSource);
  }
  else {
    int v12 = off_10183EFF0[truthMetsSource];
  }
  [v3 setObject:v12 forKey:@"truthMetsSource"];
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_83:
    if ((has & 4) == 0) {
      goto LABEL_84;
    }
LABEL_96:
    *(float *)&uint64_t v6 = self->_metsWR;
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"metsWR");
    if ((*(_BYTE *)&self->_has & 1) == 0) {
      return v3;
    }
    goto LABEL_85;
  }

        int v49 = (sqlite3_stmt *)sub_100019240(v19);
        sqlite3_reset(v49);
        goto LABEL_61;
      }
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101848AA8);
  }
  unint64_t v38 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
  {
    else {
      int v39 = *(void *)a3;
    }
    if (a2[23] >= 0) {
      int v40 = (std::string::size_type)a2;
    }
    else {
      int v40 = *(void *)a2;
    }
    else {
      unint64_t v41 = (uint64_t *)*a4;
    }
    LODWORD(v68.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = v39;
    WORD2(v68.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 6) = v40;
    HIWORD(v68.__r_.__value_.__r.__words[2]) = 2082;
    int v69 = v41;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_FAULT,  "Fence: Couldn't bind fence [%{public}s]/%{public}s/%{public}s",  (uint8_t *)&v68,  0x20u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(&v68, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101848AA8);
    }
    else {
      int v50 = *(void *)a3;
    }
    if (a2[23] >= 0) {
      unsigned int v51 = a2;
    }
    else {
      unsigned int v51 = *(char **)a2;
    }
    else {
      int v52 = (uint64_t *)*a4;
    }
    *(_DWORD *)uint64_t v63 = 136446722;
    *(void *)&v63[4] = v50;
    uint64_t v64 = 2082;
    unsigned int v65 = v51;
    uint64_t v66 = 2082;
    uint64_t v67 = v52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v68,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: Couldn't bind fence [%{public}s]/%{public}s/%{public}s",  v63,  32);
    int v54 = (std::stringbuf::string_type *)v53;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLFenceDatabase::isFenceRegistered(const std::string &, const std::string &, const std::string &)",  "%s\n",  v53);
    if (v54 != &v68) {
      free(v54);
    }
  }

  unsigned int v42 = (sqlite3_stmt *)sub_100019240(v19);
  sqlite3_reset(v42);
  int v28 = 0LL;
LABEL_61:
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  *(void *)((char *)v59
  unsigned int v60 = v43;
  std::streambuf::~streambuf(&v61);
  std::ios::~ios(&v62);
  return v28;
}

    ++v9;
  }

  while (v9 != 2);
  unsigned int v51 = 0LL;
  int v52 = 0LL;
  sub_10084B574((uint64_t *)&__p, (double *)&v52, (double *)&v51);
  unint64_t v41 = v51;
  *a2 = v52;
  a2[1] = *(void *)(v46 + 8);
  a2[2] = v41;
  a2[3] = *(void *)(v6 + 24);
  if (__p)
  {
    int v54 = (char *)__p;
    operator delete(__p);
  }

      if (v59 < 0) {
        operator delete(v58);
      }
      if (v57 < 0) {
        operator delete(v56);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      if (v53 < 0) {
        operator delete(v52);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      return;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101862278);
    }
    int v32 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      if ((a2[23] & 0x80u) == 0) {
        unint64_t v33 = (uint64_t *)a2;
      }
      else {
        unint64_t v33 = *(uint64_t **)a2;
      }
      *(_DWORD *)__p = 136315138;
      *(void *)&__p[4] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "%s doesn't have a bundle ID; not going to bug SpringBoard.",
        __p,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101862278);
      }
      if ((a2[23] & 0x80u) == 0) {
        uint64_t v34 = (uint64_t *)a2;
      }
      else {
        uint64_t v34 = *(uint64_t **)a2;
      }
      LODWORD(v67[0]) = 136315138;
      *(void **)((char *)v67 + 4) = v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "%s doesn't have a bundle ID; not going to bug SpringBoard.",
        (const char *)v67);
      unsigned int v36 = (char *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLApplicationLifecycleManager::launchApplication(const std::string &, CLClientServiceTypeMask)",  "%s\n",  v35);
      if (v36 != __p) {
        free(v36);
      }
    }

    goto LABEL_80;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101862238);
  }
  int v30 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)__p = 68289538LL;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = "";
    int v70 = 1026;
    *(_DWORD *)int v71 = a3;
    *(_WORD *)&v71[4] = 2114;
    *(void *)&v71[6] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning ALM: dropping launchApplication request for unauthorized purpose, RequiredServ iceMask:%{public}d, AuthContext:%{public, location:escape_only}@}",  __p,  0x22u);
  }

  unint64_t v31 = v4 + 5;
  if ((v3 & 0x800) == 0) {
    unint64_t v31 = v4;
  }
  if ((v3 & 0x1000) != 0) {
    uint64_t v4 = v31 + 5;
  }
  else {
    uint64_t v4 = v31;
  }
  if ((v3 & 0x2000) != 0)
  {
    int v32 = *(void *)(a1 + 80);
    unint64_t v33 = *(unsigned __int8 *)(v32 + 23);
    uint64_t v34 = v33;
    unint64_t v35 = *(void *)(v32 + 8);
    if ((v33 & 0x80u) == 0) {
      unsigned int v36 = *(unsigned __int8 *)(v32 + 23);
    }
    else {
      unsigned int v36 = v35;
    }
    if (v36 >= 0x80)
    {
      int v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v36,  a2);
      unint64_t v33 = *(unsigned __int8 *)(v32 + 23);
      unint64_t v35 = *(void *)(v32 + 8);
      uint64_t v3 = *(_DWORD *)(a1 + 116);
      uint64_t v34 = *(_BYTE *)(v32 + 23);
    }

    else
    {
      int v37 = 1;
    }

    if (v34 < 0) {
      unint64_t v33 = v35;
    }
    v4 += v37 + v33 + 1;
  }

  if ((v3 & 0x4000) != 0)
  {
    unint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    else {
      int v39 = 2;
    }
    v4 += v39;
  }

  unint64_t v41 = *(_DWORD *)(a2 + 56);
  if (v41 >= 7) {
    sub_10125A3B8();
  }
  *(_DWORD *)(a1 + 172) |= 4u;
  *(_DWORD *)(a1 + 56) = v41;
  int v21 = *(_DWORD *)(a2 + 172);
  if ((v21 & 0x10) == 0)
  {
LABEL_24:
    if ((v21 & 0x20) == 0) {
      goto LABEL_25;
    }
LABEL_83:
    unint64_t v43 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 172) |= 0x20u;
    *(void *)(a1 + 64) = v43;
    int v21 = *(_DWORD *)(a2 + 172);
    if ((v21 & 0x40) == 0)
    {
LABEL_26:
      if ((v21 & 0x80) == 0) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }

    goto LABEL_84;
  }

  *(_DWORD *)(a1 + 184) |= 0x1000u;
  unsigned int v29 = *(void **)(a1 + 96);
  if (!v29)
  {
    unsigned int v29 = operator new(0x20uLL);
    *unsigned int v29 = &off_101871B40;
    v29[1] = 0LL;
    v29[2] = 0LL;
    v29[3] = 0LL;
    *(void *)(a1 + 96) = v29;
  }

  int v30 = *(void *)(a2 + 96);
  if (!v30) {
    int v30 = *(void *)(qword_1019A1CE8 + 96);
  }
  sub_100B29A60((uint64_t)v29, v30);
  uint64_t v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x2000) == 0)
  {
LABEL_57:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_90;
  }

          self->_verticalAccuraciesInWindow.__begin_ = v71;
          self->_verticalAccuraciesInWindow.__end_ = v64;
          self->_verticalAccuraciesInWindow.__end_cap_.__value_ = (double *)&v70[8 * v69];
          if (v65) {
            operator delete(v65);
          }
LABEL_82:
          self->_verticalAccuraciesInWindow.__end_ = v64;
          continue;
        }

        [v22 interpPressure];
        if (v24 != 1.79769313e308)
        {
          [v22 deltaElevation];
          if (v25 != 1.79769313e308)
          {
            [v22 timestamp];
            if (v26 > self->_firstUnfilteredLocationTime - (self->_windowSize - self->_cadence))
            {
              -[NSMutableArray addObject:](v14, "addObject:", v22);
              [v22 deltaElevation];
              int v28 = v27;
              int v30 = self->_deltaElevationsInWindow.__end_;
              unsigned int v29 = self->_deltaElevationsInWindow.__end_cap_.__value_;
              if (v30 >= v29)
              {
                int v73 = p_deltaElevationsInWindow->__begin_;
                int v74 = v30 - p_deltaElevationsInWindow->__begin_;
                int v75 = v74 + 1;
                int v76 = (char *)v29 - (char *)v73;
                if (v76 >> 2 > v75) {
                  int v75 = v76 >> 2;
                }
                else {
                  uint64_t v77 = v75;
                }
                if (v77)
                {
                  uint64_t v78 = (char *)sub_1000071BC((uint64_t)v91, v77);
                  int v73 = self->_deltaElevationsInWindow.__begin_;
                  int v30 = self->_deltaElevationsInWindow.__end_;
                }

                else
                {
                  uint64_t v78 = 0LL;
                }

                v79 = (double *)&v78[8 * v74];
                *(void *)v79 = v28;
                unint64_t v31 = v79 + 1;
                while (v30 != v73)
                {
                  uint64_t v80 = *((void *)v30-- - 1);
                  *((void *)v79-- - 1) = v80;
                }

                self->_deltaElevationsInWindow.__begin_ = v79;
                self->_deltaElevationsInWindow.__end_ = v31;
                self->_deltaElevationsInWindow.__end_cap_.__value_ = (double *)&v78[8 * v77];
                if (v73) {
                  operator delete(v73);
                }
              }

              else
              {
                *(void *)int v30 = v27;
                unint64_t v31 = v30 + 1;
              }

              self->_deltaElevationsInWindow.__end_ = v31;
              [v22 verticalAccuracy];
              v61 = v81;
              uint64_t v63 = self->_verticalAccuraciesInWindow.__end_;
              v82 = self->_verticalAccuraciesInWindow.__end_cap_.__value_;
              if (v63 >= v82)
              {
                unsigned int v65 = p_verticalAccuraciesInWindow->__begin_;
                int v83 = v63 - p_verticalAccuraciesInWindow->__begin_;
                int v84 = v83 + 1;
                int v85 = (char *)v82 - (char *)v65;
                if (v85 >> 2 > v84) {
                  int v84 = v85 >> 2;
                }
                else {
                  int v69 = v84;
                }
                if (v69)
                {
                  int v70 = (char *)sub_1000071BC((uint64_t)p_end_cap, v69);
                  unsigned int v65 = self->_verticalAccuraciesInWindow.__begin_;
                  uint64_t v63 = self->_verticalAccuraciesInWindow.__end_;
                }

                else
                {
                  int v70 = 0LL;
                }

                int v71 = (double *)&v70[8 * v83];
                *(void *)int v71 = v61;
                uint64_t v64 = v71 + 1;
                while (v63 != v65)
                {
                  unsigned int v86 = *((void *)v63-- - 1);
                  *((void *)v71-- - 1) = v86;
                }

                goto LABEL_80;
              }

  int v21 = *(void *)(v5 + 152);
  if (!v21) {
    int v21 = *(void *)(qword_1019A1D48 + 152);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29,  v21,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_86;
  }

  if (*(double *)(a4 + 20) > 0.0 && *((double *)&v65 + 1) < *((double *)&v60 + 1))
  {
    *((void *)&v65 + 1) = a7;
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
    unsigned int v36 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)uint64_t v81 = *((double *)&v65 + 1) - *((double *)&v60 + 1);
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "@EmerTick, anyfix, %{public}.1f", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018820E8);
      }
      uint64_t v67 = 134349056;
      v68[0] = *((double *)&v65 + 1) - *((double *)&v60 + 1);
      LODWORD(v59) = 12;
      unsigned int v57 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@EmerTick, anyfix, %{public}.1f",  &v67,  v59);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostP ositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)",  "%s\n",  v57);
    }
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_1018820E8);
  }
  int v37 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v38 = *(_DWORD *)(a4 + 156);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)uint64_t v81 = v60;
    *(_WORD *)&v81[4] = 1026;
    *(_DWORD *)&v81[6] = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "@EmerCheck, switched, %{public}d, aps, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
    int v53 = *(_DWORD *)(a4 + 156);
    uint64_t v67 = 67240448;
    LODWORD(v68[0]) = v60;
    WORD2(v68[0]) = 1026;
    *(_DWORD *)((char *)v68 + 6) = v53;
    LODWORD(v59) = 14;
    int v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@EmerCheck, switched, %{public}d, aps, %{public}d",  &v67,  v59);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPos itionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Typ es::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::ch rono::CFAbsoluteTimeClock::time_point, BOOL)",  "%s\n",  v54);
  }

  if (*(_DWORD *)(a4 + 156) >= 9u)
  {
    if (*(double *)&v66 < *((double *)&v60 + 1))
    {
      *(void *)&uint64_t v66 = a7;
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018820E8);
      }
      int v39 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)uint64_t v81 = *(double *)&v66 - *((double *)&v60 + 1);
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "@EmerTick, sufficientfix, %{public}.1f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018820E8);
        }
        uint64_t v67 = 134349056;
        v68[0] = *(double *)&v66 - *((double *)&v60 + 1);
        LODWORD(v59) = 12;
        int v40 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@EmerTick, sufficientfix, %{public}.1f",  &v67,  v59);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::Pos tPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(c onst Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocati on &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)",  "%s\n",  v40);
      }
    }

    goto LABEL_104;
  }

  if ((_DWORD)v60 == 9)
  {
LABEL_104:
    sub_100495EC8((int *)&v70);
    if ((_DWORD)v60 != 9)
    {
      LODWORD(v60) = 9;
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018820E8);
      }
      unint64_t v41 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@EmerFlow, Done, conditions", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018820E8);
        }
        LOWORD(v67) = 0;
        LODWORD(v59) = 2;
        unsigned int v56 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@EmerFlow, Done, conditions",  &v67,  v59);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::Pos tPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(c onst Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocati on &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)",  "%s\n",  v56);
      }
    }

    HIDWORD(v59) = 0;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_1018820E8);
  }
  unsigned int v42 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)uint64_t v81 = v60;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "@EmerCheck, returned, %{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
    uint64_t v67 = 67240192;
    LODWORD(v68[0]) = v60;
    LODWORD(v59) = 8;
    unsigned int v55 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@EmerCheck, returned, %{public}d",  &v67,  v59);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPos itionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Typ es::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::ch rono::CFAbsoluteTimeClock::time_point, BOOL)",  "%s\n",  v55);
  }

  unint64_t v43 = v65;
  *(_OWORD *)(a6 + 64) = v64;
  *(_OWORD *)(a6 + 80) = v43;
  *(_OWORD *)(a6 + 96) = v66;
  char v44 = v61;
  *(_OWORD *)a6 = v60;
  *(_OWORD *)(a6 + 16) = v44;
  unint64_t v45 = v63;
  *(_OWORD *)(a6 + 32) = v62;
  *(_OWORD *)(a6 + 48) = v45;
  sub_100446100(a6 + 112, &v70);
  *(_DWORD *)(a6 + 256) = HIDWORD(v59);
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
}

          int v20 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v20 < *((void *)this + 2))
          {
            int v32 = *v20;
            if (v32 == 45)
            {
LABEL_63:
              *((void *)this + 1) = v20 + 1;
              continue;
            }

            if (v32 == 53) {
              goto LABEL_83;
            }
          }

          goto LABEL_2;
        }

      case 6u:
        uint64_t v9 = TagFallback & 7;
        if (v9 == 2)
        {
          uint64_t result = sub_1008102E0(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_100;
        }

        if (v9 != 5)
        {
LABEL_26:
          if (v9 == 4) {
            return 1LL;
          }
          continue;
        }

        while (1)
        {
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v49) & 1) == 0) {
            return 0LL;
          }
          unint64_t v33 = v49[0];
          uint64_t v34 = *(_DWORD *)(a1 + 48);
          if (v34 == *(_DWORD *)(a1 + 52))
          {
            sub_10004AAFC(v5, v34 + 1);
            uint64_t v34 = *(_DWORD *)(a1 + 48);
          }

          unint64_t v35 = *(void *)(a1 + 40);
          unsigned int v36 = v34 + 1;
          *(_DWORD *)(a1 + 48) = v34 + 1;
          *(_DWORD *)(v35 + 4LL * v34) = v33;
          int v37 = *((void *)this + 1);
          unint64_t v38 = *((_DWORD *)this + 4) - v37;
          if (v38 >= 1)
          {
            int v39 = v38 / 5u;
            int v40 = v39 >= *(_DWORD *)(a1 + 52) - v36 ? *(_DWORD *)(a1 + 52) - v36 : v39;
            if (v40 >= 1)
            {
              unint64_t v41 = 0;
              while (*(_BYTE *)v37 == 53)
              {
                unsigned int v42 = *(_DWORD *)(v37 + 1);
                if (v36 >= *(_DWORD *)(a1 + 52))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v49,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Conten ts/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/includ e/google/protobuf/repeated_field.h",  602LL);
                  unint64_t v43 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v49,  "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v48, v43);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v49);
                  unsigned int v36 = *(_DWORD *)(a1 + 48);
                  unint64_t v35 = *(void *)(a1 + 40);
                }

                *(_DWORD *)(a1 + 48) = v36 + 1;
                *(_DWORD *)(v35 + 4LL * v36) = v42;
                ++v41;
                v37 += 5LL;
                ++v36;
                if (v40 == v41)
                {
                  unint64_t v41 = v40;
                  break;
                }
              }

              if (v41) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v41);
              }
            }
          }

              dispatch_once(&qword_101934980, &stru_101893800);
              goto LABEL_53;
            }
          }

          uint64_t v14 = *v13;
          int v15 = v13[1];
          uint64_t v17 = v13[2];
          uint64_t v16 = v13[3];
          if (v14 == 0x6C7070612E6D6F63LL
            && v15 == 0x472E7370614D2E65LL
            && v17 == 0x614D6C6172656E65LL
            && v16 == 0x7465676469577370LL)
          {
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101893800);
            }
            int v21 = (os_log_s *)qword_101934988;
            if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
            {
              *(_BYTE *)(a1 + 178) = 0;
              goto LABEL_53;
            }

            unsigned int v22 = (void **)(a1 + 104);
            int v23 = (const char *)(a1 + 48);
            *(_DWORD *)buf = 68289538;
            unint64_t v33 = 0;
            uint64_t v34 = 2082;
            unint64_t v35 = "";
            unsigned int v36 = 2082;
            int v37 = v22;
            unint64_t v38 = 2082;
            int v39 = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Map's widget didn't get auto-masquerade correctly., BundleId:%{publi c, location:escape_only}s, BundlePath:%{public, location:escape_only}s}",  buf,  0x26u);
          }

          goto LABEL_52;
        }

        uint64_t v10 = *(unsigned __int8 *)(a1 + 127);
        goto LABEL_28;
      }
    }

    if (!+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3))
    {
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101893800);
      }
      unint64_t v26 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        uint64_t v27 = (char *)(a1 + 48);
        *(_DWORD *)buf = 68289795;
        unint64_t v33 = 0;
        uint64_t v34 = 2082;
        unint64_t v35 = "";
        unsigned int v36 = 2082;
        int v37 = (void **)v27;
        unint64_t v38 = 2082;
        int v39 = "assert";
        int v40 = 2081;
        unint64_t v41 = "@(fBundlePath.c_str())";
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:fBundlePath to NSString failed., fBundlePath:%{public, location:escape_only}s,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101893800);
        }
      }

      int v28 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        unsigned int v29 = (char *)(a1 + 48);
        *(_DWORD *)buf = 68289795;
        unint64_t v33 = 0;
        uint64_t v34 = 2082;
        unint64_t v35 = "";
        unsigned int v36 = 2082;
        int v37 = (void **)v29;
        unint64_t v38 = 2082;
        int v39 = "assert";
        int v40 = 2081;
        unint64_t v41 = "@(fBundlePath.c_str())";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "fBundlePath to NSString failed.",  "{msg%{public}.0s:fBundlePath to NSString failed., fBundlePath:%{public, location:escape_only}s,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101893800);
        }
      }

      int v30 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289795;
        unint64_t v33 = 0;
        uint64_t v34 = 2082;
        unint64_t v35 = "";
        unsigned int v36 = 2082;
        int v37 = (void **)v2;
        unint64_t v38 = 2082;
        int v39 = "assert";
        int v40 = 2081;
        unint64_t v41 = "@(fBundlePath.c_str())";
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:fBundlePath to NSString failed., fBundlePath:%{public, location:escape_only}s,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Type.mm",  241,  "fetchFromPlugInKitProxy");
      __break(1u);
      goto LABEL_80;
    }

    uint64_t v4 = objc_alloc(&OBJC_CLASS___LSApplicationExtensionRecord);
    uint64_t v5 = (const char *)(a1 + 48);
    uint64_t v6 = objc_msgSend( v4,  "initWithURL:error:",  +[NSURL fileURLWithPath:isDirectory:]( NSURL,  "fileURLWithPath:isDirectory:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5),  1),  &v31);
    goto LABEL_17;
  }

  unint64_t v38 = *(void *)(a2 + 264);
  v5 |= (unint64_t)&_mh_execute_header;
  *int v2 = v5;
  *(void *)(a1 + 264) = v38;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "skippedGyroSensorTime", *(void *)(a1 + 256));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000LL) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_82;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 240), 0x51u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreStart", *(double *)(a1 + 304));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_82;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 328), 0x22u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_82;
  }

  int v12 = *(_DWORD *)(a2 + 164);
  v3 |= 0x1000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 164) = v12;
  int v2 = *(void *)(a2 + 216);
  if ((v2 & 0x100) == 0)
  {
LABEL_34:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "peakTimestamp", *(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_82;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0) {
      goto LABEL_33;
    }
    goto LABEL_82;
  }

  uint64_t result = *(float *)(a2 + 112);
  v5 |= 0x20000uLL;
  *int v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 112) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_15:
    if ((v7 & 0x2000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "deltaVXYBiggestImpact", *(float *)(a1 + 108));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_82;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0xAu);
  uint64_t v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_82;
  }

  int v20 = *(_BYTE *)(a2 + 163);
  v3 |= 0x10000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 163) = v20;
  int v2 = *(void *)(a2 + 172);
  if ((v2 & 0x800000000LL) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "maxEnergy", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x800000) == 0)
  {
LABEL_34:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 158), 0xC9u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v4 & 4) == 0) {
      goto LABEL_36;
    }
    goto LABEL_82;
  }

          *(_DWORD *)(a1 + 24) = v30;
          goto LABEL_87;
        case 3u:
          *(_BYTE *)(a1 + 36) |= 4u;
          unint64_t v33 = *((void *)this + 1);
          uint64_t v34 = *((void *)this + 2);
          unint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5LL && v33 + 10 <= v34)
          {
            unsigned int v36 = 0;
            int v37 = 0;
            unint64_t v38 = 0LL;
            do
            {
              int v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              int v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_83;
              }
              v36 += 7;
              unint64_t v33 = v39;
              uint64_t v14 = v37++ > 8;
            }

            while (!v14);
LABEL_66:
            LODWORD(v38) = 0;
            goto LABEL_83;
          }

          int v54 = 0;
          unsigned int v55 = 0;
          unint64_t v38 = 0LL;
          if (v34 <= v33) {
            uint64_t v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unsigned int v56 = v33 + 1;
              unsigned int v57 = *(_BYTE *)(v35 + v33);
              *((void *)this + 1) = v56;
              v38 |= (unint64_t)(v57 & 0x7F) << v54;
              if (v57 < 0)
              {
                v54 += 7;
                unint64_t v33 = v56;
                uint64_t v14 = v55++ > 8;
                if (v14) {
                  goto LABEL_66;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 12) = v31;
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        unint64_t v33 = *((void *)this + 1);
        int v2 = *((void *)this + 2);
        uint64_t v34 = *(void *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
        {
          int v48 = 0;
          int v49 = 0;
          int v37 = 0LL;
          if (v2 <= v33) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_85;
            }

            int v50 = v33++;
            unsigned int v51 = *(_BYTE *)(v34 + v50);
            *((void *)this + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            uint64_t v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v37) = 0;
          }
LABEL_84:
          uint64_t v3 = v50 + 1;
        }

        else
        {
          unint64_t v35 = 0;
          unsigned int v36 = 0;
          int v37 = 0LL;
          while (1)
          {
            uint64_t v3 = v33 + 1;
            *((void *)this + 1) = v33 + 1;
            unint64_t v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            uint64_t v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        unint64_t v33 = *((void *)this + 1);
        int v2 = *((void *)this + 2);
        uint64_t v34 = *(void *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
        {
          int v48 = 0;
          int v49 = 0;
          int v37 = 0LL;
          if (v2 <= v33) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_85;
            }

            int v50 = v33++;
            unsigned int v51 = *(_BYTE *)(v34 + v50);
            *((void *)this + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            uint64_t v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v37) = 0;
          }
LABEL_84:
          uint64_t v3 = v50 + 1;
        }

        else
        {
          unint64_t v35 = 0;
          unsigned int v36 = 0;
          int v37 = 0LL;
          while (1)
          {
            uint64_t v3 = v33 + 1;
            *((void *)this + 1) = v33 + 1;
            unint64_t v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            uint64_t v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }

  unint64_t v41 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 24) = v41;
  int v2 = *(void *)(a2 + 212);
  if ((v2 & 2) == 0)
  {
LABEL_43:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_82:
    unint64_t v43 = *(void *)(a2 + 8);
    *(void *)(result + 212) = v3 | 1;
    *(void *)(result + 8) = v43;
    return result;
  }

  PB::TextFormatter::format(this, "soundMeanCurrentWindow", *(float *)(a1 + 200));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x2000000000LL) != 0) {
    goto LABEL_81;
  }
LABEL_40:
  if ((v5 & 0x800) != 0) {
LABEL_41:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x27u);
  if ((*(void *)(v3 + 212) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x28u);
  }
  return result;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_81;
            case 2u:
              *(_WORD *)(a1 + 64) |= 4u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 4u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 9u:
              *(_WORD *)(a1 + 64) |= 2u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x800u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x100u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 8u;
              int v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              int v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_75:
                int v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_81;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              int v2 = *((void *)this + 1);
LABEL_81:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  unsigned int v65 = *(_DWORD *)(a2 + 212);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 212) = v65;
  int v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x2000) == 0)
  {
LABEL_52:
    if ((v39 & 0x20) == 0) {
      goto LABEL_53;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "userIsHeightSet", *(_BYTE *)(a1 + 241));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x4000000) != 0) {
    goto LABEL_81;
  }
LABEL_53:
  if ((v19 & 0x80000) != 0) {
LABEL_54:
  }
    PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 232));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0x25u);
  if ((*(_DWORD *)(v3 + 244) & 4) != 0) {
LABEL_51:
  }
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x26u);
LABEL_52:
  uint64_t v17 = *(const PB::Base **)(v3 + 136);
  if (v17) {
    uint64_t result = PB::Writer::writeSubmessage(this, v17, 0x27u);
  }
  int v18 = *(const PB::Base **)(v3 + 128);
  if (v18) {
    return PB::Writer::writeSubmessage(this, v18, 0x28u);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  int v2 = *(void *)(a2 + 184);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "stepLengthPoincareSD1", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_82;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0x22u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }

  unsigned int v47 = *(_DWORD *)(a2 + 164);
  *(void *)(a1 + 192) |= 0x80000000uLL;
  *(_DWORD *)(a1 + 164) = v47;
  uint64_t v13 = *(void *)(a2 + 192);
  if ((v13 & 0x100000000LL) == 0)
  {
LABEL_44:
    if ((v13 & 0x200000000LL) == 0) {
      goto LABEL_45;
    }
LABEL_82:
    int v49 = *(_DWORD *)(a2 + 172);
    *(void *)(a1 + 192) |= 0x200000000uLL;
    *(_DWORD *)(a1 + 172) = v49;
    if ((*(void *)(a2 + 192) & 0x400000000LL) == 0) {
      return a1;
    }
    goto LABEL_46;
  }

  unint64_t v31 = *(_DWORD *)(a2 + 164);
  v3 |= 0x4000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 164) = v31;
  int v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }

  PB::TextFormatter::format(this, "srcHorizontalRotation", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_82;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_82;
  }

uint64_t sub_10007070C( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  int v7 = *(_DWORD *)(v5 + 192);
  if ((v7 & 2) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
    int v7 = *(_DWORD *)(v5 + 192);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_36;
    }
  }

  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 40),  a3);
  int v7 = *(_DWORD *)(v5 + 192);
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

LABEL_42:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 108),  a2,  a4);
  int v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x400) == 0)
  {
LABEL_19:
    if ((v10 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v20 & 0x80000000) != 0)
  {
    int v21 = 11;
  }

  else if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    int v21 = 2;
  }

  uint64_t v4 = (v21 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_48:
    unsigned int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    else {
      int v23 = 2;
    }
    uint64_t v4 = (v23 + v4);
  }

  int v20 = *a2;
  int v21 = a2[1];
  *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 136),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  (int)a2,  *(double *)(v5 + 136),  a3);
  if ((*(_DWORD *)(v5 + 160) & 0x80000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  (int)a2,  *(double *)(v5 + 144),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 112),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 80),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  int v21 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 84) |= 0x800u;
  *(_DWORD *)(a1 + 60) = v21;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

        *(_DWORD *)(v89 + 308) = v5;
        int v84 = v5;
        uint64_t v9 = v5;
      }

  int v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v32);
}

      int v23 = [v17 objectForKeyedSubscript:@"FamilyCode"];
      if (v23)
      {
        BOOL v24 = [v23 intValue];
      }

      else
      {
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101835F08);
        }
        int v25 = (os_log_s *)qword_101934A48;
        if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Failed to get charger family", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A40 != -1) {
            dispatch_once(&qword_101934A40, &stru_101835F08);
          }
          unint64_t v41 = 0;
          LODWORD(v38) = 2;
          unsigned int v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "Failed to get charger family",  &v41,  v38);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)",  "%s\n",  v36);
        }

        BOOL v24 = 0;
      }

      HIDWORD(v43) = v24;
      unint64_t v26 = (id)IORegistryEntryCreateCFProperty(entry, @"FullyCharged", kCFAllocatorDefault, 0);
      if (v26)
      {
        uint64_t v27 = [v26 BOOLValue];
      }

      else
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101835EC8);
        }
        int v28 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "cannot find charged status\n", buf, 2u);
        }

        uint64_t v27 = 0;
        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101835EC8);
          }
          unint64_t v41 = 0;
          LODWORD(v38) = 2;
          int v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "cannot find charged status\n",  &v41,  v38);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)",  "%s\n",  v37);
          uint64_t v27 = 0;
        }
      }

      BYTE8(v42) = v27;
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101835F08);
      }
      unsigned int v29 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68290818;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)unint64_t v45 = 2082;
        *(void *)&v45[2] = "";
        *(_WORD *)&v45[10] = 2114;
        *(void *)&v45[12] = v19;
        *(_WORD *)&v45[20] = 2050;
        *(void *)&v45[22] = HIDWORD(v38);
        *(_WORD *)&v45[30] = 1026;
        *(_DWORD *)uint64_t v46 = (int)v14;
        *(_WORD *)&v46[4] = 1026;
        *(_DWORD *)unsigned int v47 = v24;
        *(_WORD *)&v47[4] = 1026;
        int v48 = v27;
        int v49 = 1026;
        int v50 = v16;
        unsigned int v51 = 1026;
        int v52 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:adapter details, adapterDescription:%{public, location:escape_only}@, batteryCh argerType:%{public, location:CLBatteryChargerType}lld, level:%{public}d, family:%{public}u, fullyC harged:%{public}hhd, connected:%{public}hhd, wasConnected:%{public}hhd}",  buf,  0x44u);
      }

      int v30 = (void *)a1[14];
      if (v30)
      {
        [v30 batteryData];
        unint64_t v31 = v45[1];
      }

      else
      {
        unint64_t v31 = 0;
        *(void *)buf = 0LL;
        *(void *)unint64_t v45 = 0LL;
        *(void *)&v45[8] = 0LL;
      }

      int v32 = 1;
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101835F08);
      }
      unint64_t v33 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68290306;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)unint64_t v45 = 2082;
        *(void *)&v45[2] = "";
        *(_WORD *)&v45[10] = 1040;
        *(_DWORD *)&v45[12] = 24;
        *(_WORD *)&v45[16] = 2098;
        *(void *)&v45[18] = &v42;
        *(_WORD *)&v45[26] = 1026;
        *(_DWORD *)&v45[28] = v11;
        *(_WORD *)uint64_t v46 = 1026;
        *(_DWORD *)&v46[2] = v12;
        *(_WORD *)unsigned int v47 = 1026;
        *(_DWORD *)&v47[2] = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:battery capacity info, batteryStatus:%{public, location:CLDaemonStatus_Type::Batt ery}.*P, currentCapacity:%{public}d, maximumCapacity:%{public}d, batteryIsDifferent:%{public}hhd}",  buf,  0x34u);
      }

      if (v32)
      {
        uint64_t v34 = (void *)a1[14];
        if (v34)
        {
          [v34 batteryData];
          unint64_t v35 = v45[1];
          uint64_t v34 = (void *)a1[14];
        }

        else
        {
          unint64_t v35 = 0;
        }

        LOBYTE(v43) = v35;
        int v39 = v42;
        int v40 = v43;
        [v34 setBatteryData:&v39];
        *(_DWORD *)buf = 7;
        (*(void (**)(void *, uint8_t *, __int128 *, uint64_t, uint64_t, void))(*a1 + 152LL))( a1,  buf,  &v42,  1LL,  0xFFFFFFFFLL,  0LL);
      }

      return;
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101835EC8);
    }
    int v21 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "cannot find connected status", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101835EC8);
      }
      unint64_t v41 = 0;
      uint64_t v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "cannot find connected status",  &v41,  2);
LABEL_32:
      unsigned int v22 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)",  "%s\n",  v8);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

    uint64_t v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }

  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    int v12 = (double *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      int v12 = *(double **)v12;
    }

    while (v12);
  }

  else
  {
    int v19 = a2;
    do
    {
      a4 = (double *)*((void *)v19 + 2);
      uint64_t v14 = *(void *)a4 == (void)v19;
      int v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    int v20 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v20;
          int v21 = v20[4];
          if (v6 >= v21) {
            break;
          }
          int v20 = *(double **)v20;
          uint64_t v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }

        if (v21 >= v6) {
          break;
        }
        uint64_t v5 = v20 + 1;
        int v20 = (double *)*((void *)v20 + 1);
      }

      while (v20);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  int v20 = *(_OWORD *)(a2 + 16);
  int v21 = *(_OWORD *)(a2 + 32);
  unsigned int v22 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 288) = v22;
  *(_OWORD *)(a1 + 240) = v20;
  *(_OWORD *)(a1 + 256) = v21;
  int v23 = *(_OWORD *)(a2 + 80);
  BOOL v24 = *(_OWORD *)(a2 + 96);
  int v25 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 352) = v25;
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 320) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v33);
}

  PBDataWriterWriteInt32Field(a3, self->_onsetReason, 20LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  *((_DWORD *)a3 + 22) = self->_onsetReason;
  *((_DWORD *)a3 + 26) |= 0x40000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  *((void *)result + 1) = *(void *)&self->_startTime;
  *((_DWORD *)result + 26) |= 1u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x40000) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }

  self->_onsetReason = *((_DWORD *)a3 + 22);
  *(_DWORD *)&self->_has |= 0x40000u;
  uint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x20000) == 0)
  {
LABEL_21:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  ++*(void *)(a1 + 24);
  return i;
}

  int v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  int v21 = *(_OWORD *)(a2 + 32);
  unsigned int v22 = *(_OWORD *)(a2 + 48);
  int v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 272) = v22;
  BOOL v24 = *(_OWORD *)(a2 + 96);
  int v25 = *(_OWORD *)(a2 + 112);
  unint64_t v26 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 368) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 352) = v26;
  *(_OWORD *)(a1 + 320) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v20 = *a2;
  int v21 = a2[1];
  *(_OWORD *)(a1 + 252) = *(__int128 *)((char *)a2 + 28);
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v33);
}

      int v28 = *((double *)a1 + 74);
      int v30 = *((_DWORD *)a1 + 150);
      if (v28 != 0.0) {
        *((_DWORD *)a1 + 150) = ++v30;
      }
      if (v30 < 12) {
        goto LABEL_48;
      }
      if (v28 != 0.0) {
LABEL_46:
      }
        sub_1005FE28C((uint64_t)a1, *((double *)a1 + 76), v28);
LABEL_47:
      *((void *)a1 + 74) = 0LL;
      *((_DWORD *)a1 + 150) = 0;
      *((_DWORD *)a1 + 154) = 0;
LABEL_48:
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_101843B08);
      }
      unint64_t v31 = (os_log_s *)qword_1019345B8;
      if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
      {
        int v32 = a1 + 336;
        unint64_t v33 = *((void *)a1 + 73);
        uint64_t v34 = *((void *)a1 + 66);
        unint64_t v35 = *((void *)a1 + 67);
        unsigned int v36 = (float)*((unsigned int *)a1 + 136);
        int v37 = (float)*((unsigned int *)a1 + 137);
        unint64_t v38 = *((void *)a1 + 74);
        int v39 = *((void *)a1 + 76);
        int v40 = (float)*((int *)a1 + 154);
        unint64_t v41 = *((void *)a1 + 78);
        unsigned int v42 = *((void *)a1 + 79);
        unint64_t v43 = *((void *)a1 + 82);
        *(_DWORD *)buf = v64;
        *(double *)&buf[4] = *((float *)&v66 + 1);
        *(_WORD *)&buf[12] = 2048;
        int v106 = v33;
        unsigned int v107 = 2048;
        int v108 = v34;
        int v109 = 2048;
        v110 = v35;
        unsigned int v111 = 2048;
        v112 = v36;
        unsigned int v113 = 2048;
        v114 = v37;
        int v115 = 2048;
        unsigned int v116 = v38;
        int v117 = 2048;
        uint64_t v118 = v39;
        v119 = 2048;
        v120 = v40;
        v121 = 1024;
        v122 = LODWORD(v66);
        v123 = 2080;
        v124 = v32;
        v125 = 2048;
        v126 = v24;
        v127 = 2048;
        v128 = a6;
        v129 = 2048;
        v130 = v41;
        v131 = 2048;
        v132 = v42;
        v133 = 2048;
        v134 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "Altitude,%f,ReferenceAltitude,%f,ElevationStartTime,%f,ElevationEndTime,%f,AscendedElevation,%f,DescendedEleva tion,%f,BufferedAscendedElevation,%f,BufferedTimeStamp,%f,AscendingState,%f,ElevationDeviceSource,%d,Elevation Label,%s,EpochTime,%f,UpdateTime,%f,cumulativeAltitudeFilterResetChange,%f,weatherChangeEstimate,%f,weatherBias,%f",  buf,  0x9Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345B0 != -1) {
          dispatch_once(&qword_1019345B0, &stru_101843B08);
        }
        int v48 = *((void *)a1 + 73);
        int v49 = *((void *)a1 + 66);
        int v50 = *((void *)a1 + 67);
        unsigned int v51 = *((void *)a1 + 74);
        int v52 = *((void *)a1 + 76);
        int v53 = *((_DWORD *)a1 + 154);
        int v54 = a1 + 336;
        unsigned int v55 = *((void *)a1 + 78);
        unsigned int v56 = (float)*((unsigned int *)a1 + 136);
        unsigned int v57 = *((void *)a1 + 79);
        unsigned int v58 = *((void *)a1 + 82);
        v59 = (float)*((unsigned int *)a1 + 137);
        int v74 = v64;
        *(double *)int v75 = *((float *)&v66 + 1);
        *(_WORD *)&v75[8] = 2048;
        int v76 = v48;
        uint64_t v77 = 2048;
        uint64_t v78 = v49;
        v79 = 2048;
        uint64_t v80 = v50;
        uint64_t v81 = 2048;
        v82 = v56;
        int v83 = 2048;
        int v84 = v59;
        int v85 = 2048;
        unsigned int v86 = v51;
        int v87 = 2048;
        int v88 = v52;
        int v89 = 2048;
        unsigned int v90 = (float)v53;
        v91 = 1024;
        v92 = LODWORD(v66);
        v93 = 2080;
        int v94 = v54;
        int v95 = 2048;
        int v96 = v24;
        unsigned int v97 = 2048;
        int v98 = a6;
        int v99 = 2048;
        v100 = v55;
        v101 = 2048;
        v102 = v57;
        v103 = 2048;
        int v104 = v58;
        LODWORD(v63) = 158;
        unsigned int v60 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "Altitude,%f,ReferenceAltitude,%f,ElevationStartTime,%f,ElevationEndTime,%f,AscendedElevation,%f, DescendedElevation,%f,BufferedAscendedElevation,%f,BufferedTimeStamp,%f,AscendingState,%f,Elevat ionDeviceSource,%d,ElevationLabel,%s,EpochTime,%f,UpdateTime,%f,cumulativeAltitudeFilterResetCha nge,%f,weatherChangeEstimate,%f,weatherBias,%f",  COERCE_DOUBLE(&v74),  v63,  *(double *)&v64,  *((double *)&v64 + 1),  v65,  v66,  v67,  *(double *)&v68,  *(double *)&v69,  DWORD2(v69),  v70,  v71,  v72,  v73);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantElevationEstimator::updateWithVisit(CFAbsoluteTime, uint32_t, uint32_t, CLElevationSource, BOOL)",  "%s\n",  v60);
        if (v60 != buf) {
          free(v60);
        }
      }

      char v44 = a1[1];
      if (v44)
      {
        unint64_t v45 = *a1 + 1LL;
        uint64_t v46 = *((unsigned int *)a1 + 1);
        if (v45 < v46) {
          LOWORD(v46) = 0;
        }
        *a1 = v45 - v46;
        unsigned int v47 = v44 - 1;
        a1[1] = v47;
        if (v47) {
          continue;
        }
      }

      return;
    }
  }

    ++v7;
  }

  while (v7 != 7);
  if ((unint64_t)v8 | v9)
  {
    a3 = [a3 mutableCopy];
    uint64_t v34 = 0LL;
    *(void *)buf = 0LL;
    sub_100547724(10LL, buf, &v34);
    if (v8)
    {
      unsigned int v29 = *(__CFString **)buf;
    }

    else
    {
      unsigned int v29 = v34;
      [(id)v9 doubleValue];
      uint64_t v8 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v30 + 10.0);
    }

    objc_msgSend(a3, "setObject:forKeyedSubscript:", v8, v29, v32);
  }

  return a3;
}

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[7],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }

  int v21 = *a2;
  unsigned int v22 = a2[1];
  *(void *)(a1 + 256) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v36);
}

  int v19 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      int v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  if (v77 < 0) {
    operator delete(__p);
  }
  unsigned int v22 = v74;
  if (v74)
  {
    int v23 = (unint64_t *)&v74->__shared_owners_;
    do
      BOOL v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  int v25 = v73;
  if (v73)
  {
    unint64_t v26 = (unint64_t *)&v73->__shared_owners_;
    do
      uint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  int v21 = *a2;
  unsigned int v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v21 = *a2;
  unsigned int v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
  int v23 = a2[3];
  BOOL v24 = a2[4];
  int v25 = a2[5];
  *(_OWORD *)(a1 + 313) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 272) = v23;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v36);
}

  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v33);
}

    int v21 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v21;
    sub_1000F2F30(a1 + 31, (uint64_t *)a2 + 3);
    goto LABEL_43;
  }

  (*(void (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_1001BA1BC(v37);
}

  int v21 = *a2;
  *(void *)(a1 + 240) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 48);
  BOOL v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  int v25 = *(_OWORD *)(a2 + 96);
  unint64_t v26 = *(_OWORD *)(a2 + 112);
  uint64_t v27 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 362) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 352) = v27;
  *(_OWORD *)(a1 + 320) = v25;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v38);
}

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_64;
  }
  if ((v3 & 0x100) != 0)
  {
    int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      int v20 = 2;
    }

    uint64_t v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_45:
      if ((v3 & 0x400) == 0) {
        goto LABEL_46;
      }
      goto LABEL_56;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_45;
  }

  int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    unsigned int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    unsigned int v22 = 2;
  }

  uint64_t v4 = (v22 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v3 & 0x800) == 0) {
      goto LABEL_64;
    }
    goto LABEL_60;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_64;
  }
  if ((v3 & 0x100) != 0)
  {
    int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      int v20 = 2;
    }

    uint64_t v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_45:
      if ((v3 & 0x400) == 0) {
        goto LABEL_46;
      }
      goto LABEL_56;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_45;
  }

  int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    unsigned int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    unsigned int v22 = 2;
  }

  uint64_t v4 = (v22 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v3 & 0x800) == 0) {
      goto LABEL_64;
    }
    goto LABEL_60;
  }

        if (v26 <= a3)
        {
          if (v23 > a4 && v26 == a3)
          {
            int v10 = a2;
            uint64_t v6 = v23;
            a5 = a3;
          }

          else
          {
            a2 = v23 + 1;
            if ((char *)(v23 + 1) - (char *)v25 == 4096)
            {
              uint64_t v63 = v26[1];
              ++v26;
              a2 = v63;
            }

            int v70 = v26;
            int v71 = a2;
            uint64_t result = v26;
            int v10 = a2;
          }
        }

        else
        {
          int v10 = a2;
          uint64_t v6 = v23;
          a5 = v26;
        }
      }

      else
      {
        int v21 = *v16;
        while (1)
        {
          if (v18 == v21)
          {
            unsigned int v22 = *--v16;
            int v21 = v22;
            int v18 = v22 + 1024;
          }

          if (v71 == --v18) {
            break;
          }
          if (*v18 < *v15)
          {
            *int v71 = *v18;
            char *v18 = v20;
            ++v19;
            goto LABEL_17;
          }
        }

        int v10 = v71 + 1;
        unsigned int v47 = *v70;
        if ((char *)(v71 + 1) - (char *)*v70 == 4096)
        {
          uint64_t result = v70 + 1;
          unsigned int v47 = v70[1];
          int v10 = v47;
        }

        int v48 = *a5;
        int v49 = a5;
        int v50 = v6;
        if (v6 == *a5)
        {
          int v49 = a5 - 1;
          int v48 = *(a5 - 1);
          int v50 = v48 + 1024;
        }

        int v52 = *(v50 - 1);
        unsigned int v51 = v50 - 1;
        int v53 = v52;
        if (v20 >= v52)
        {
          while (v10 != v51)
          {
            v61 = *v10;
            if (v20 < *v10)
            {
              *v10++ = v53;
              unsigned __int8 *v51 = v61;
              if ((char *)v10 - (char *)v47 == 4096)
              {
                uint64_t v64 = result[1];
                ++result;
                unsigned int v47 = v64;
                int v10 = v64;
              }

              goto LABEL_68;
            }

            if ((char *)++v10 - (char *)v47 == 4096)
            {
              int v62 = result[1];
              ++result;
              unsigned int v47 = v62;
              int v10 = v62;
            }
          }

          return result;
        }

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v35);
}

      if ((v11 & 1) != 0)
      {
        int v28 = 0;
        int v30 = 0LL;
        v153 = 1;
        uint64_t v4 = v9;
        unsigned int v29 = 1;
        goto LABEL_124;
      }

      int v32 = (CLClientKeyPath *)sub_1005486B8(*(void *)(a1 + 16), (uint64_t)v4);
      if (-[CLClientKeyPath isValidCKP](v32, "isValidCKP"))
      {
        int v28 = 0;
        int v30 = 0LL;
        v153 = 1;
        unsigned int v29 = 1;
        uint64_t v4 = v32;
        goto LABEL_124;
      }

      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      unint64_t v33 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning naturalKeyPath registration resulted in nullCKP, NaturalKeyPath:%{public , location:escape_only}@}",  buf,  0x1Cu);
      }

      goto LABEL_123;
    }

    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    unint64_t v26 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138544130;
      *(void *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "com.apple.locationd.effective_bundle";
      *(_WORD *)&buf[22] = 2114;
      *(void *)&buf[24] = v13;
      *(_WORD *)&buf[32] = 2114;
      *(void *)&buf[34] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#Warning Client '%{public}@' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}@', or effective bundle, '%{public}@'",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      v135 = *(void *)(a1 + 48);
      LODWORD(v174[0]) = 138544130;
      *(void *)((char *)v174 + 4) = v135;
      WORD2(v174[1]) = 2082;
      *(void *)((char *)&v174[1] + 6) = "com.apple.locationd.effective_bundle";
      HIWORD(v174[2]) = 2114;
      v174[3] = v13;
      LOWORD(v175) = 2114;
      *(void *)((char *)&v175 + 2) = v14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#Warning Client '%{public}@' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}@', or effective bundle, '%{public}@'",  v174,  42);
      v137 = (char *)v136;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v136);
      if (v137 != buf) {
        free(v137);
      }
      int v28 = 0;
      unsigned int v29 = 0;
      int v30 = 0LL;
      v153 = 1;
      goto LABEL_38;
    }

    goto LABEL_37;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  uint64_t v17 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Processing Registrationless client, NaturalKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  sub_10086D884(a1, v4);
LABEL_232:
}

  ++*(void *)(a1 + 24);
  return i;
}

  if (*(void *)(a1 + 136))
  {
    *(_DWORD *)buf = 22;
    if (sub_100247620(a1, (int *)buf, 1LL))
    {
      int v18 = *(void *)(a1 + 64);
      if (!v18) {
        goto LABEL_54;
      }
      int v19 = a1 + 64;
      do
      {
        int v20 = *(_DWORD *)(v18 + 32);
        int v21 = v20 < 22;
        if (v20 >= 22) {
          unsigned int v22 = (uint64_t *)v18;
        }
        else {
          unsigned int v22 = (uint64_t *)(v18 + 8);
        }
        if (!v21) {
          int v19 = v18;
        }
        int v18 = *v22;
      }

      while (*v22);
      if (v19 == a1 + 64 || *(int *)(v19 + 32) >= 23) {
LABEL_54:
      }
        int v19 = a1 + 64;
      int v23 = *(void **)(v19 + 40);
      if (v23 == (void *)(v19 + 48))
      {
        BOOL v24 = 0;
      }

      else
      {
        BOOL v24 = 0;
        do
        {
          int v25 = (void *)v23[1];
          unint64_t v26 = v23;
          if (v25)
          {
            do
            {
              uint64_t v27 = v25;
              int v25 = (void *)*v25;
            }

            while (v25);
          }

          else
          {
            do
            {
              uint64_t v27 = (void *)v26[2];
              int v28 = *v27 == (void)v26;
              unint64_t v26 = v27;
            }

            while (!v28);
          }

          v24 += *((unsigned __int8 *)v23 + 56);
          int v23 = v27;
        }

        while (v27 != (void *)(v19 + 48));
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10185E6A0);
      }
      uint64_t v34 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v35 = [*(id *)(a1 + 152) UTF8String];
        unsigned int v36 = *(void *)(v19 + 56);
        *(_DWORD *)buf = 136446722;
        *(void *)int v94 = v35;
        *(_WORD *)&v94[8] = 2050;
        *(void *)&v94[10] = v36;
        int v95 = 1026;
        int v96 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "@WsbBundle, %{public}s, clients, %{public}ld, numActive, %{public}d",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_10185E6A0);
        }
        unsigned int v58 = qword_101934868;
        v59 = [*(id *)(a1 + 152) UTF8String];
        unsigned int v60 = *(void *)(v19 + 56);
        int v89 = 136446722;
        *(void *)unsigned int v90 = v59;
        *(_WORD *)&v90[8] = 2050;
        *(void *)&v90[10] = v60;
        v91 = 1026;
        v92 = v24;
        LODWORD(v84) = 28;
        v61 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v58,  0LL,  "@WsbBundle, %{public}s, clients, %{public}ld, numActive, %{public}d",  &v89,  v84);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v61);
      }

      int v88 = 22;
      int v37 = sub_1008B0A24(a1, (uint64_t)&v88, 1);
      if (v24) {
        unint64_t v38 = 2147483644LL;
      }
      else {
        unint64_t v38 = 2147483645LL;
      }
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      int v39 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        int v40 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(void *)int v94 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "BLP: starting wifi location batch, bundleId, %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        int v62 = qword_101934A78;
        uint64_t v63 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 136315138;
        *(void *)unsigned int v90 = v63;
        uint64_t v64 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v62,  2LL,  "BLP: starting wifi location batch, bundleId, %s",  (const char *)&v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v64);
      }

      CLClientStartLocationUpdates(*(void *)(a1 + 136), v38, v37);
    }

    else
    {
      CLClientStopLocationUpdates(*(void *)(a1 + 136));
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      unsigned int v29 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        int v30 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(void *)int v94 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "BLP: stopping wifi location batch, bundleId, %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        unint64_t v31 = qword_101934A78;
        int v32 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 136315138;
        *(void *)unsigned int v90 = v32;
        unint64_t v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v31,  2LL,  "BLP: stopping wifi location batch, bundleId, %s",  (const char *)&v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v33);
      }
    }
  }

  if (*(void *)(a1 + 144))
  {
    *(_DWORD *)buf = 39;
    if (sub_100247620(a1, (int *)buf, 1LL))
    {
      int v88 = 39;
      unint64_t v41 = sub_1008B0A24(a1, (uint64_t)&v88, 1);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      unsigned int v42 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v43 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(void *)int v94 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "BLP: starting BystanderPreLoiOverride, bundleId, %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        unsigned int v65 = qword_101934A78;
        uint64_t v66 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 136315138;
        *(void *)unsigned int v90 = v66;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v65,  2LL,  "BLP: starting BystanderPreLoiOverride, bundleId, %s",  (const char *)&v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v67);
      }

      CLClientStartLocationUpdates(*(void *)(a1 + 144), 2147483643LL, v41);
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      char v44 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v45 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(void *)int v94 = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "BLP: stopping BystanderPreLoiOverride, bundleId, %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        int v74 = qword_101934A78;
        int v75 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 136315138;
        *(void *)unsigned int v90 = v75;
        int v76 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v74,  2LL,  "BLP: stopping BystanderPreLoiOverride, bundleId, %s",  (const char *)&v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v76);
      }

      CLClientStopLocationUpdates(*(void *)(a1 + 144));
    }
  }

      if (!*(_BYTE *)(a1 + 356))
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101862090);
        }
        int v20 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Warning #SLC Significant location change monitoring not active; not handling}",
            buf,
            0x12u);
        }

        sub_100246564((uint64_t)buf);
        int v21 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)v201 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)&v201[16] = v21;
        v202[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v202 + 12) = *(_OWORD *)(a2 + 140);
        unsigned int v22 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&buf[32] = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&buf[48] = v22;
        int v23 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)v200 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)&v200[16] = v23;
        BOOL v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)buf = *(_OWORD *)a2;
        *(_OWORD *)&buf[16] = v24;
        v187 = 0;
        (*(void (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 136LL))(a1, &v187, buf);
        sub_100243768((uint64_t)buf);
        return;
      }

      uint64_t v16 = v12 - 6;
      uint64_t v17 = 1000.0;
      if (v9 >= 1000.0 || v16 >= 3)
      {
        int v19 = (double *)(a2 + 88);
        if (v9 <= 0.0)
        {
          *int v19 = 0.0;
LABEL_67:
          v186 = 0.0;
          Current = CFAbsoluteTimeGetCurrent();
          uint64_t v27 = *v8 >= 0.0 && Current - *(double *)(a2 + 76) < 10.0;
          int v28 = Current - *(double *)(a1 + 408);
          v185 = v28;
          unsigned int v29 = (_OWORD *)(a1 + 200);
          int v30 = *(double *)(a1 + 220);
          unint64_t v31 = v30 < 0.0;
          if (v30 < 0.0)
          {
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101862090);
            }
            int v32 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "#SLC got first location, sending SLC notification",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101862090);
              }
              LOWORD(v187) = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC got first location, sending SLC notification",  &v187,  2);
              v149 = (char *)v148;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v148);
              if (v149 != buf) {
                free(v149);
              }
            }

            unint64_t v33 = *(_OWORD *)(a2 + 16);
            *unsigned int v29 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 216) = v33;
            uint64_t v34 = *(_OWORD *)(a2 + 32);
            unint64_t v35 = *(_OWORD *)(a2 + 48);
            unsigned int v36 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 280) = v36;
            *(_OWORD *)(a1 + 232) = v34;
            *(_OWORD *)(a1 + 248) = v35;
            int v37 = *(_OWORD *)(a2 + 96);
            unint64_t v38 = *(_OWORD *)(a2 + 112);
            int v39 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 340) = *(_OWORD *)(a2 + 140);
            *(_OWORD *)(a1 + 312) = v38;
            *(_OWORD *)(a1 + 328) = v39;
            *(_OWORD *)(a1 + 296) = v37;
            *(void *)(a1 + 408) = 0LL;
            int v40 = 0.0;
            if (v27) {
              goto LABEL_78;
            }
            unsigned int v42 = 1;
          }

          else
          {
            sub_100D2DCA4((double *)(a1 + 120), a2, a1 + 200);
            int v40 = v43;
            v186 = v43;
            char v44 = (double *)(a1 + 276);
            unint64_t v45 = *(double *)(a1 + 276);
            uint64_t v46 = *(double *)(a2 + 76);
            if (qword_101934980 != -1)
            {
              v184 = *(double *)(a2 + 76);
              dispatch_once(&qword_101934980, &stru_101862090);
              uint64_t v46 = v184;
            }

            unsigned int v47 = vabdd_f64(v45, v46);
            int v48 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218496;
              *(double *)&buf[4] = v40;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v47;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = 0x3FD5555555555555LL;
              _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "#SLC handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf",  buf,  0x20u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101862090);
              }
              v187 = 134218496;
              v188 = *(const char **)&v40;
              v189 = 2048;
              *(double *)v190 = v47;
              *(_WORD *)&v190[8] = 2048;
              *(void *)&v190[10] = 0x3FD5555555555555LL;
              LODWORD(v182) = 32;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf",  COERCE_DOUBLE(&v187),  v182,  v183);
              v151 = (char *)v150;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v150);
              if (v151 != buf) {
                free(v151);
              }
            }

            if (v27)
            {
              if (v40 < 500.0 || (int v49 = *v8, v40 < *v8))
              {
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                int v50 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
                {
                  unsigned int v51 = *(void *)(a2 + 4);
                  int v52 = *(void *)(a2 + 12);
                  int v53 = *(void *)(a2 + 20);
                  int v54 = *(void *)(a1 + 204);
                  unsigned int v55 = *(void *)(a1 + 212);
                  unsigned int v56 = *(void *)(a1 + 220);
                  *(_DWORD *)buf = 134219520;
                  *(void *)&buf[4] = v51;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v52;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v53;
                  *(_WORD *)&buf[32] = 2048;
                  *(double *)&buf[34] = v40;
                  *(_WORD *)&buf[42] = 2048;
                  *(void *)&buf[44] = v54;
                  *(_WORD *)&buf[52] = 2048;
                  *(void *)&buf[54] = v55;
                  *(_WORD *)&buf[62] = 2048;
                  *(void *)v200 = v56;
                  _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "#SLC <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding",  buf,  0x48u);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_97;
                }
                bzero(buf, 0x65CuLL);
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v175 = *(const char **)(a2 + 4);
                v176 = *(void *)(a2 + 12);
                v177 = *(void *)(a2 + 20);
                v178 = *(void *)(a1 + 204);
                v179 = *(void *)(a1 + 212);
                v180 = *(void *)(a1 + 220);
                v187 = 134219520;
                v188 = v175;
                v189 = 2048;
                *(void *)v190 = v176;
                *(_WORD *)&v190[8] = 2048;
                *(void *)&v190[10] = v177;
                *(_WORD *)&v190[18] = 2048;
                *(double *)&v190[20] = v40;
                *(_WORD *)&v190[28] = 2048;
                *(void *)&v190[30] = v178;
                *(_WORD *)&v190[38] = 2048;
                *(void *)&v190[40] = v179;
                *(_WORD *)&v190[48] = 2048;
                *(void *)v191 = v180;
                LODWORD(v182) = 72;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding",  COERCE_DOUBLE(&v187),  v182,  v183,  v184,  v185,  v186);
                v102 = (char *)v181;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v181);
LABEL_209:
                if (v102 != buf) {
                  free(v102);
                }
LABEL_97:
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                unsigned int v57 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#SLC no location change", buf, 2u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934980 != -1) {
                    dispatch_once(&qword_101934980, &stru_101862090);
                  }
                  LOWORD(v187) = 0;
                  LODWORD(v182) = 2;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC no location change",  &v187,  *(void *)&v182);
                  v174 = (char *)v173;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v173);
                  if (v174 != buf) {
                    free(v174);
                  }
                }

                unsigned int v42 = 0;
                unint64_t v31 = 0;
LABEL_115:
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                uint64_t v64 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 68289795;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v42;
                  *(_WORD *)&buf[24] = 2049;
                  *(double *)&buf[26] = v40;
                  *(_WORD *)&buf[34] = 2050;
                  *(double *)&buf[36] = v28;
                  _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#SLC Location inspection complete, isSignificantlocationchange:%{public }hhd, distance:%{private}f, secondsSinceLastSLC_s:%{public}.09f}",  buf,  0x2Cu);
                }

                if (sub_100E575B0())
                {
                  sub_1002A5370(buf);
                  v187 = v42;
                  sub_1002AC220((uint64_t)buf, "slcUpdate", &v187);
                  sub_1002AC7B8((uint64_t)buf, "distance", &v186);
                  sub_1002AC7B8((uint64_t)buf, "hAcc", v8);
                  sub_1002AC7B8((uint64_t)buf, "secondsSinceLastSLC", &v185);
                  sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
                  sub_1002A5590(buf);
                }

                if (v31)
                {
                  if (qword_101934A90 != -1) {
                    dispatch_once(&qword_101934A90, &stru_1018620B0);
                  }
                  unsigned int v65 = (os_log_s *)qword_101934A98;
                  if (os_log_type_enabled((os_log_t)qword_101934A98, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v66 = *(void *)(a2 + 4);
                    uint64_t v67 = *(void *)(a2 + 12);
                    v68 = *(void *)(a2 + 20);
                    int v69 = *(void *)(a2 + 88);
                    int v70 = *(_DWORD *)(a2 + 96);
                    int v71 = *(void *)(a1 + 204);
                    unsigned int v72 = *(void *)(a1 + 212);
                    int v73 = *(void *)(a1 + 220);
                    int v74 = *(double *)(a2 + 76) - *(double *)(a1 + 276);
                    *(_DWORD *)buf = 136317954;
                    *(void *)&buf[4] = "SignificantChange";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 1;
                    *(_WORD *)&buf[18] = 2048;
                    *(void *)&buf[20] = v66;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = v67;
                    *(_WORD *)&buf[38] = 2048;
                    *(void *)&buf[40] = v68;
                    *(_WORD *)&buf[48] = 2048;
                    *(void *)&buf[50] = v69;
                    *(_WORD *)&buf[58] = 1024;
                    *(_DWORD *)&buf[60] = v70;
                    *(_WORD *)v200 = 2048;
                    *(void *)&v200[2] = v71;
                    *(_WORD *)&v200[10] = 2048;
                    *(void *)&v200[12] = v72;
                    *(_WORD *)&v200[20] = 2048;
                    *(void *)&v200[22] = v73;
                    *(_WORD *)&v200[30] = 2048;
                    *(double *)v201 = v186;
                    *(_WORD *)&v201[8] = 2048;
                    *(double *)&v201[10] = v74;
                    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f, %.2f,Distance,%.2f,DeltaTime,%.3f,",  buf,  0x72u);
                  }

                  if (sub_1002921D0(117, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934A90 != -1) {
                      dispatch_once(&qword_101934A90, &stru_1018620B0);
                    }
                    v154 = *(void *)(a2 + 4);
                    v155 = *(void *)(a2 + 12);
                    v156 = *(void *)(a2 + 20);
                    v157 = *(void *)(a2 + 88);
                    v158 = *(_DWORD *)(a2 + 96);
                    v159 = *(void *)(a1 + 204);
                    v160 = *(void *)(a1 + 212);
                    v161 = *(void *)(a1 + 220);
                    v162 = *(double *)(a2 + 76) - *(double *)(a1 + 276);
                    v187 = 136317954;
                    v188 = "SignificantChange";
                    v189 = 1024;
                    *(_DWORD *)v190 = 1;
                    *(_WORD *)&v190[4] = 2048;
                    *(void *)&v190[6] = v154;
                    *(_WORD *)&v190[14] = 2048;
                    *(void *)&v190[16] = v155;
                    *(_WORD *)&v190[24] = 2048;
                    *(void *)&v190[26] = v156;
                    *(_WORD *)&v190[34] = 2048;
                    *(void *)&v190[36] = v157;
                    *(_WORD *)&v190[44] = 1024;
                    *(_DWORD *)&v190[46] = v158;
                    *(_WORD *)v191 = 2048;
                    *(void *)&v191[2] = v159;
                    *(_WORD *)v192 = 2048;
                    *(void *)&v192[2] = v160;
                    v193 = 2048;
                    v194 = v161;
                    v195 = 2048;
                    v196 = v186;
                    v197 = 2048;
                    v198 = v162;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A98,  2LL,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f, %.2f,Distance,%.2f,DeltaTime,%.3f,",  (const char *)&v187,  114,  v183,  v184,  v185,  v186);
                    v164 = (char *)v163;
                    sub_10029211C( "LOCATION",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v163);
                    if (v164 != buf) {
                      free(v164);
                    }
                  }

                  *(double *)(a1 + 184) = v186;
                  *(double *)(a1 + 192) = *(double *)(a2 + 76) - *(double *)(a1 + 276);
                  int v75 = *(_OWORD *)(a2 + 140);
                  uint64_t v77 = *(_OWORD *)(a2 + 112);
                  int v76 = *(_OWORD *)(a2 + 128);
                  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 96);
                  *(_OWORD *)(a1 + 312) = v77;
                  *(_OWORD *)(a1 + 328) = v76;
                  *(_OWORD *)(a1 + 340) = v75;
                  v79 = *(_OWORD *)(a2 + 32);
                  uint64_t v78 = *(_OWORD *)(a2 + 48);
                  uint64_t v80 = *(_OWORD *)(a2 + 80);
                  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 64);
                  *(_OWORD *)(a1 + 280) = v80;
                  *(_OWORD *)(a1 + 232) = v79;
                  *(_OWORD *)(a1 + 248) = v78;
                  uint64_t v81 = *(_OWORD *)(a2 + 16);
                  *unsigned int v29 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 216) = v81;
                  *(double *)(a1 + 276) = Current;
                  *(double *)(a1 + 408) = Current;
                  sub_100956478(a1);
                }

                return;
              }

              if (*(_DWORD *)(a1 + 296) == *(_DWORD *)(a2 + 96))
              {
                v82 = *v44;
              }

              else
              {
                int v83 = *(double *)(a1 + 288);
                v82 = *v44;
                if (v83 >= 0.0 && v83 + v82 > Current)
                {
                  if (qword_101934980 != -1) {
                    dispatch_once(&qword_101934980, &stru_101862090);
                  }
                  int v84 = (os_log_s *)qword_101934988;
                  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
                  {
                    int v85 = *(void *)(a1 + 204);
                    unsigned int v86 = *(void *)(a1 + 212);
                    int v87 = *(void *)(a1 + 220);
                    int v88 = *v44;
                    int v89 = *(void *)(a1 + 288);
                    unsigned int v90 = *(void *)(a2 + 4);
                    v91 = *(void *)(a2 + 12);
                    v92 = *(void *)(a2 + 20);
                    *(_DWORD *)buf = 134219776;
                    *(void *)&buf[4] = v85;
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v86;
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&buf[24] = v87;
                    *(_WORD *)&buf[32] = 2048;
                    *(double *)&buf[34] = v88;
                    *(_WORD *)&buf[42] = 2048;
                    *(void *)&buf[44] = v89;
                    *(_WORD *)&buf[52] = 2048;
                    *(void *)&buf[54] = v90;
                    *(_WORD *)&buf[62] = 2048;
                    *(void *)v200 = v91;
                    *(_WORD *)&v200[8] = 2048;
                    *(void *)&v200[10] = v92;
                    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "#SLC Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp % .2f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f",  buf,  0x52u);
                  }

                  if (!sub_1002921D0(115, 2)) {
                    goto LABEL_97;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_101934980 != -1) {
                    dispatch_once(&qword_101934980, &stru_101862090);
                  }
                  v93 = *(const char **)(a1 + 204);
                  int v94 = *(void *)(a1 + 212);
                  int v95 = *(void *)(a1 + 220);
                  int v96 = *v44;
                  unsigned int v97 = *(void *)(a1 + 288);
                  int v98 = *(void *)(a2 + 4);
                  int v99 = *(void *)(a2 + 12);
                  v100 = *(void *)(a2 + 20);
                  v187 = 134219776;
                  v188 = v93;
                  v189 = 2048;
                  *(void *)v190 = v94;
                  *(_WORD *)&v190[8] = 2048;
                  *(void *)&v190[10] = v95;
                  *(_WORD *)&v190[18] = 2048;
                  *(double *)&v190[20] = v96;
                  *(_WORD *)&v190[28] = 2048;
                  *(void *)&v190[30] = v97;
                  *(_WORD *)&v190[38] = 2048;
                  *(void *)&v190[40] = v98;
                  *(_WORD *)&v190[48] = 2048;
                  *(void *)v191 = v99;
                  *(_WORD *)&v191[8] = 2048;
                  *(void *)v192 = v100;
                  LODWORD(v182) = 82;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp %.2 f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f",  COERCE_DOUBLE(&v187),  v182,  v183,  v184,  v185,  v186);
                  v102 = (char *)v101;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v101);
                  goto LABEL_209;
                }
              }

              if (vabdd_f64(Current, v82) < 10.0 && *(double *)(a1 + 220) <= v49)
              {
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v134 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
                {
                  v135 = *v44;
                  v136 = *(void *)(a1 + 204);
                  v137 = *(void *)(a1 + 212);
                  v138 = *(void *)(a2 + 4);
                  v139 = *(void *)(a2 + 12);
                  v140 = *(void *)(a2 + 20);
                  *(_DWORD *)buf = 134219520;
                  *(double *)&buf[4] = v135;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v136;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v137;
                  *(_WORD *)&buf[32] = 2048;
                  *(void *)&buf[34] = 0x4024000000000000LL;
                  *(_WORD *)&buf[42] = 2048;
                  *(void *)&buf[44] = v138;
                  *(_WORD *)&buf[52] = 2048;
                  *(void *)&buf[54] = v139;
                  *(_WORD *)&buf[62] = 2048;
                  *(void *)v200 = v140;
                  _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEBUG,  "#SLC Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; di"
                    "scarding <%+.8f,%+.8f> acc %.2f",
                    buf,
                    0x48u);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_97;
                }
                bzero(buf, 0x65CuLL);
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v141 = *v44;
                v142 = *(void *)(a1 + 204);
                v143 = *(void *)(a1 + 212);
                v144 = *(void *)(a2 + 4);
                v145 = *(void *)(a2 + 12);
                v146 = *(void *)(a2 + 20);
                v187 = 134219520;
                v188 = *(const char **)&v141;
                v189 = 2048;
                *(void *)v190 = v142;
                *(_WORD *)&v190[8] = 2048;
                *(void *)&v190[10] = v143;
                *(_WORD *)&v190[18] = 2048;
                *(void *)&v190[20] = 0x4024000000000000LL;
                *(_WORD *)&v190[28] = 2048;
                *(void *)&v190[30] = v144;
                *(_WORD *)&v190[38] = 2048;
                *(void *)&v190[40] = v145;
                *(_WORD *)&v190[48] = 2048;
                *(void *)v191 = v146;
                LODWORD(v182) = 72;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; disc"
                  "arding <%+.8f,%+.8f> acc %.2f",
                  COERCE_DOUBLE(&v187),
                  v182,
                  v183,
                  v184,
                  v185,
                  v186);
                v102 = (char *)v147;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v147);
                goto LABEL_209;
              }

              if (v47 * 340.0 < v40 && v40 > v49 + *(double *)(a1 + 220))
              {
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v103 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
                {
                  int v104 = *(void *)(a2 + 4);
                  int v105 = *(void *)(a2 + 12);
                  int v106 = *(void *)(a2 + 20);
                  unsigned int v107 = *(void *)(a1 + 204);
                  int v108 = *(void *)(a1 + 212);
                  int v109 = *(void *)(a1 + 220);
                  *(_DWORD *)buf = 134219776;
                  *(void *)&buf[4] = v104;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v105;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v106;
                  *(_WORD *)&buf[32] = 2048;
                  *(double *)&buf[34] = v40;
                  *(_WORD *)&buf[42] = 2048;
                  *(void *)&buf[44] = v107;
                  *(_WORD *)&buf[52] = 2048;
                  *(void *)&buf[54] = v108;
                  *(_WORD *)&buf[62] = 2048;
                  *(void *)v200 = v109;
                  *(_WORD *)&v200[8] = 2048;
                  *(double *)&v200[10] = v47;
                  _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "#Warning #SLC Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+. 8f,%+.8f> acc %.2f from %.3fs ago, discarding",  buf,  0x52u);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_97;
                }
                bzero(buf, 0x65CuLL);
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v110 = *(const char **)(a2 + 4);
                unsigned int v111 = *(void *)(a2 + 12);
                v112 = *(void *)(a2 + 20);
                unsigned int v113 = *(void *)(a1 + 204);
                v114 = *(void *)(a1 + 212);
                int v115 = *(void *)(a1 + 220);
                v187 = 134219776;
                v188 = v110;
                v189 = 2048;
                *(void *)v190 = v111;
                *(_WORD *)&v190[8] = 2048;
                *(void *)&v190[10] = v112;
                *(_WORD *)&v190[18] = 2048;
                *(double *)&v190[20] = v40;
                *(_WORD *)&v190[28] = 2048;
                *(void *)&v190[30] = v113;
                *(_WORD *)&v190[38] = 2048;
                *(void *)&v190[40] = v114;
                *(_WORD *)&v190[48] = 2048;
                *(void *)v191 = v115;
                *(_WORD *)&v191[8] = 2048;
                *(double *)v192 = v47;
                LODWORD(v182) = 82;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning #SLC Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+.8f ,%+.8f> acc %.2f from %.3fs ago, discarding",  COERCE_DOUBLE(&v187),  v182,  v183,  v184,  v185,  v186);
                v102 = (char *)v116;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v116);
                goto LABEL_209;
              }

              if (v28 <= 300.0)
              {
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v120 = (os_log_s *)qword_101934988;
                if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
                {
                  v121 = *(void *)(a1 + 204);
                  v122 = *(void *)(a1 + 212);
                  v123 = *(void *)(a1 + 220);
                  v124 = *(void *)(a2 + 4);
                  v125 = *(void *)(a2 + 12);
                  v126 = *(void *)(a2 + 20);
                  *(_DWORD *)buf = 134219520;
                  *(double *)&buf[4] = v28;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v121;
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v122;
                  *(_WORD *)&buf[32] = 2048;
                  *(void *)&buf[34] = v123;
                  *(_WORD *)&buf[42] = 2048;
                  *(void *)&buf[44] = v124;
                  *(_WORD *)&buf[52] = 2048;
                  *(void *)&buf[54] = v125;
                  *(_WORD *)&buf[62] = 2048;
                  *(void *)v200 = v126;
                  _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_DEBUG,  "#SLC avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, n ew location, <%+.8f,%+.8f>, acc, %.2f",  buf,  0x48u);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_97;
                }
                bzero(buf, 0x65CuLL);
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v127 = *(void *)(a1 + 204);
                v128 = *(void *)(a1 + 212);
                v129 = *(void *)(a1 + 220);
                v130 = *(void *)(a2 + 4);
                v131 = *(void *)(a2 + 12);
                v132 = *(void *)(a2 + 20);
                v187 = 134219520;
                v188 = *(const char **)&v28;
                v189 = 2048;
                *(void *)v190 = v127;
                *(_WORD *)&v190[8] = 2048;
                *(void *)&v190[10] = v128;
                *(_WORD *)&v190[18] = 2048;
                *(void *)&v190[20] = v129;
                *(_WORD *)&v190[28] = 2048;
                *(void *)&v190[30] = v130;
                *(_WORD *)&v190[38] = 2048;
                *(void *)&v190[40] = v131;
                *(_WORD *)&v190[48] = 2048;
                *(void *)v191 = v132;
                LODWORD(v182) = 72;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, new location, <%+.8f,%+.8f>, acc, %.2f",  COERCE_DOUBLE(&v187),  v182,  v183,  v184,  v185,  v186);
                v102 = (char *)v133;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v133);
                goto LABEL_209;
              }

              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101862090);
              }
              int v117 = (os_log_s *)qword_101934988;
              if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134217984;
                *(double *)&buf[4] = v40;
                _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_DEBUG,  "#SLC issue notificaiton, distance, %.1lf",  buf,  0xCu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                v187 = 134217984;
                v188 = *(const char **)&v40;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC issue notificaiton, distance, %.1lf",  COERCE_DOUBLE(&v187));
                v119 = (char *)v118;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v118);
                if (v119 != buf) {
                  free(v119);
                }
              }

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v36);
}

  int v21 = *a2;
  unsigned int v22 = a2[1];
  int v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  BOOL v24 = a2[4];
  int v25 = a2[5];
  unint64_t v26 = a2[7];
  *(_OWORD *)(a1 + 320) = a2[6];
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  uint64_t v27 = a2[8];
  int v28 = a2[9];
  unsigned int v29 = a2[10];
  *(void *)(a1 + 400) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v28;
  *(_OWORD *)(a1 + 384) = v29;
  *(_OWORD *)(a1 + 352) = v27;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v40);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v32);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 48);
  BOOL v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v35);
}

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 116) |= 8u;
  unsigned int v22 = *(void **)(a1 + 24);
  if (!v22)
  {
    unsigned int v22 = operator new(0x20uLL);
    v22[1] = 0LL;
    v22[2] = 0LL;
    *unsigned int v22 = off_1018692A8;
    *((_DWORD *)v22 + 6) = 0;
    *(void *)(a1 + 24) = v22;
  }

  int v23 = *(void *)(a2 + 24);
  if (!v23) {
    int v23 = *(void *)(qword_1019A1A88 + 24);
  }
  sub_100A49568((uint64_t)v22, v23);
  uint64_t v13 = *(_DWORD *)(a2 + 116);
  if ((v13 & 0x10) == 0)
  {
LABEL_17:
    if ((v13 & 0x20) == 0) {
      goto LABEL_18;
    }
LABEL_52:
    *(_DWORD *)(a1 + 116) |= 0x20u;
    unint64_t v26 = *(void **)(a1 + 40);
    if (!v26)
    {
      unint64_t v26 = operator new(0x20uLL);
      v26[1] = 0LL;
      unsigned int v26[2] = 0LL;
      unsigned __int8 *v26 = off_1018692A8;
      *((_DWORD *)v26 + 6) = 0;
      *(void *)(a1 + 40) = v26;
    }

    uint64_t v27 = *(void *)(a2 + 40);
    if (!v27) {
      uint64_t v27 = *(void *)(qword_1019A1A88 + 40);
    }
    sub_100A49568((uint64_t)v26, v27);
    uint64_t v13 = *(_DWORD *)(a2 + 116);
    if ((v13 & 0x40) == 0)
    {
LABEL_19:
      if ((v13 & 0x80) == 0) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }

    goto LABEL_57;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(14LL, *(void *)(v5 + 80), a2);
  if ((*(_DWORD *)(v5 + 116) & 0x4000) != 0) {
LABEL_16:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(_DWORD *)(v5 + 76),  a2,  a4);
LABEL_17:
  if (*(int *)(v5 + 96) >= 1)
  {
    int v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(void *)(*(void *)(v5 + 88) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 96));
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 88),  (int)a2,  a4);
  uint64_t v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x800) == 0)
  {
LABEL_16:
    if ((v8 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 48);
  BOOL v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  int v25 = *(_OWORD *)(a2 + 96);
  unint64_t v26 = *(_OWORD *)(a2 + 112);
  uint64_t v27 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 368) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 352) = v27;
  *(_OWORD *)(a1 + 320) = v25;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v38);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 48);
  BOOL v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 256) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v45);
}

        unint64_t v35 = v72;
        if (v72)
        {
          p_shared_owners = (unint64_t *)&v72->__shared_owners_;
          do
            int v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }

        goto LABEL_15;
      }

      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v34 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "#fusion,setWiFiLocationBatched,cannot compute fMachContinuousToCFAbsoluteOffset_s,discarding wsb sample",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v52 = 0;
      LODWORD(v49) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,setWiFiLocationBatched,cannot compute fMachContinuousToCFAbsoluteOffset_s,discarding wsb sample",  &v52,  v49);
      unint64_t v33 = (uint8_t *)v40;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v40);
    }

    if (v33 != buf) {
      free(v33);
    }
    goto LABEL_42;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  unsigned int v47 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "#fusion,setWiFiLocationBatched,has no location data,nothing to process.",  buf,  2u);
  }

  uint64_t result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v67) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,setWiFiLocationBatched,has no location data,nothing to process.",  &v67,  2);
    unint64_t v43 = (uint8_t *)v48;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v48);
    goto LABEL_81;
  }

  return result;
}

  int v21 = *a2;
  unsigned int v22 = a2[1];
  *(void *)(a1 + 256) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v35);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v35);
}

  int v21 = *a2;
  *(void *)(a1 + 240) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v35);
}

  unint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  int v28 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v28;
  *(_OWORD *)(a1 + 224) = v26;
  *(_OWORD *)(a1 + 240) = v27;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v45);
}

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x100u;
      int v19 = *(void **)(a1 + 64);
      if (!v19)
      {
        int v19 = operator new(0x20uLL);
        sub_1001D25B0(v19);
        *(void *)(a1 + 64) = v19;
      }

      int v20 = *(void *)(a2 + 64);
      if (!v20) {
        int v20 = *(void *)(qword_1019A1C80 + 64);
      }
      sub_1001DD690((uint64_t)v19, v20);
      uint64_t v5 = *(_DWORD *)(a2 + 112);
    }

    if ((v5 & 0x200) != 0)
    {
      int v21 = *(_DWORD *)(a2 + 104);
      if (!sub_1000641E0(v21)) {
        sub_1012365BC();
      }
      *(_DWORD *)(a1 + 112) |= 0x200u;
      *(_DWORD *)(a1 + 104) = v21;
      uint64_t v5 = *(_DWORD *)(a2 + 112);
    }

    if ((v5 & 0x400) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x400u;
      unsigned int v22 = *(void **)(a1 + 72);
      if (!v22)
      {
        unsigned int v22 = operator new(0x28uLL);
        sub_1001D25C4((uint64_t)v22);
        *(void *)(a1 + 72) = v22;
      }

      int v23 = *(void *)(a2 + 72);
      if (!v23) {
        int v23 = *(void *)(qword_1019A1C80 + 72);
      }
      sub_1001DDED4((uint64_t)v22, v23);
      uint64_t v5 = *(_DWORD *)(a2 + 112);
    }

    if ((v5 & 0x800) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x800u;
      BOOL v24 = *(void **)(a1 + 80);
      if (!v24)
      {
        BOOL v24 = operator new(0x28uLL);
        sub_1001D2A5C((uint64_t)v24);
        *(void *)(a1 + 80) = v24;
      }

      int v25 = *(void *)(a2 + 80);
      if (!v25) {
        int v25 = *(void *)(qword_1019A1C80 + 80);
      }
      sub_1001FD7D4((uint64_t)v24, v25);
      uint64_t v5 = *(_DWORD *)(a2 + 112);
    }

    if ((v5 & 0x1000) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x1000u;
      unint64_t v26 = *(void **)(a1 + 88);
      if (!v26)
      {
        unint64_t v26 = operator new(0x20uLL);
        sub_1001D2630((uint64_t)v26);
        *(void *)(a1 + 88) = v26;
      }

      uint64_t v27 = *(void *)(a2 + 88);
      if (!v27) {
        uint64_t v27 = *(void *)(qword_1019A1C80 + 88);
      }
      sub_1001E0424((uint64_t)v26, v27);
      uint64_t v5 = *(_DWORD *)(a2 + 112);
    }

    if ((v5 & 0x2000) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x2000u;
      int v28 = *(void **)(a1 + 96);
      if (!v28)
      {
        int v28 = operator new(0x18uLL);
        sub_1001D2658((uint64_t)v28);
        *(void *)(a1 + 96) = v28;
      }

      unsigned int v29 = *(void *)(a2 + 96);
      if (!v29) {
        unsigned int v29 = *(void *)(qword_1019A1C80 + 96);
      }
      sub_1001E0B34((uint64_t)v28, v29);
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_gradeVariance),  @"gradeVariance");
  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) != 0) {
    goto LABEL_43;
  }
LABEL_21:
  if ((*(_DWORD *)&has & 0x40000) != 0) {
LABEL_22:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_sessionType),  @"sessionType");
  return v3;
}

  PBDataWriterWriteInt32Field(a3, self->_vo2MaxModelSource, 20LL);
  if ((*(_DWORD *)&self->_has & 0x40000) != 0) {
    goto LABEL_43;
  }
}

  *((_DWORD *)a3 + 39) = self->_vo2MaxModelSource;
  *((_DWORD *)a3 + 41) |= 0x80000u;
  if ((*(_DWORD *)&self->_has & 0x40000) != 0) {
    goto LABEL_43;
  }
}

  *((void *)result + 4) = *(void *)&self->_gradeVariance;
  *((_DWORD *)result + 41) |= 8u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x40000) == 0) {
      return result;
    }
    goto LABEL_22;
  }

  self->_vo2MaxModelSource = *((_DWORD *)a3 + 39);
  *(_DWORD *)&self->_has |= 0x80000u;
  if ((*((_DWORD *)a3 + 41) & 0x40000) != 0) {
    goto LABEL_43;
  }
}

  int v21 = *(void *)(a1 + 48);
  if (!v21) {
    int v21 = *(void *)(qword_1019A1D38 + 48);
  }
  unsigned int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC0F2C(v21, a2);
  int v23 = (int)v22;
  else {
    BOOL v24 = 1;
  }
  v4 += v23 + v24 + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x80) != 0)
  {
LABEL_48:
    int v25 = *(void *)(a1 + 56);
    if (!v25) {
      int v25 = *(void *)(qword_1019A1D38 + 56);
    }
    unint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC12D0(v25, a2);
    uint64_t v27 = (int)v26;
    else {
      int v28 = 1;
    }
    v4 += v27 + v28 + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 396);
  }

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 48);
  BOOL v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v35);
}

  int v21 = *a2;
  unsigned int v22 = a2[1];
  int v23 = a2[2];
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(a1 + 240) = v22;
  *(_OWORD *)(a1 + 256) = v23;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v41);
}

    *(void *)(a1 + 408) = *(void *)(a2 + 184);
    goto LABEL_43;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
  return sub_1001BA1BC(v53);
}

  int v21 = *a2;
  unsigned int v22 = a2[1];
  int v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  sub_100386874(a2, (uint64_t)&buf);
  sub_100D27430(__p);
  unint64_t v26 = std::string::append(__p, ".gz");
  v92 = *v26;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v27 = buf.__r_.__value_.__s.__size_;
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v28 = buf.__r_.__value_.__s.__size_;
  }
  else {
    int v28 = buf.__r_.__value_.__l.__size_;
  }
  unsigned int v29 = v92.__r_.__value_.__s.__size_;
  int v30 = (char)v92.__r_.__value_.__s.__size_;
  if ((v92.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    unsigned int v29 = v92.__r_.__value_.__l.__size_;
  }
  if (v28 != v29)
  {
    int v39 = 0;
    goto LABEL_63;
  }

  if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v31 = &v92;
  }
  else {
    unint64_t v31 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  if ((char)buf.__r_.__value_.__s.__size_ < 0)
  {
    int v39 = memcmp(buf.__r_.__value_.__l.__data_, v31, buf.__r_.__value_.__l.__size_) == 0;
    goto LABEL_97;
  }

  if (buf.__r_.__value_.__s.__size_)
  {
    int v32 = buf.__r_.__value_.__s.__size_ - 1LL;
    unint64_t v33 = &buf;
    do
    {
      unint64_t v35 = v33->__r_.__value_.__s.__data_[0];
      unint64_t v33 = (std::string *)((char *)v33 + 1);
      uint64_t v34 = v35;
      int v37 = v31->__r_.__value_.__s.__data_[0];
      unint64_t v31 = (std::string *)((char *)v31 + 1);
      unsigned int v36 = v37;
      int v20 = v32-- != 0;
      unint64_t v38 = v20;
      int v39 = v34 == v36;
    }

    while (v34 == v36 && (v38 & 1) != 0);
LABEL_97:
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_98;
    }
LABEL_63:
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((buf.__r_.__value_.__s.__size_ & 0x80) == 0) {
      goto LABEL_99;
    }
LABEL_64:
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!v39) {
      return;
    }
    goto LABEL_100;
  }

  int v39 = 1;
LABEL_98:
  if ((v27 & 0x80) != 0) {
    goto LABEL_64;
  }
LABEL_99:
  if (!v39) {
    return;
  }
LABEL_100:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  int v49 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100386874(a2, (uint64_t)__p);
    int v50 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "Uncompressing handsfree white list file %s",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    v79 = qword_101934A78;
    sub_100386874(a2, (uint64_t)&buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v80 = &buf;
    }
    else {
      uint64_t v80 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v79,  2LL,  "Uncompressing handsfree white list file %s",  (const char *)&v92);
    v82 = v81;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  (const char *)v82);
    if (v82 != __p) {
      free(v82);
    }
  }

  sub_100386874(a2, (uint64_t)__p);
  unsigned int v51 = (char)__p[0].__r_.__value_.__s.__size_;
  int v52 = __p[0].__r_.__value_.__r.__words[0];
  sub_100D27430(&buf);
  if (v51 >= 0) {
    int v53 = __p;
  }
  else {
    int v53 = (std::string *)v52;
  }
  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v54 = &buf;
  }
  else {
    int v54 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  unsigned int v55 = sub_100293D74((char *)v53, (const char *)v54);
  if (((char)__p[0].__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (v55) {
      goto LABEL_119;
    }
LABEL_147:
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    unsigned int v65 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100386874(a2, (uint64_t)__p);
      uint64_t v66 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_FAULT,  "Failed to decompress handsfree whitelist file %{public}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      uint64_t v67 = qword_101934A78;
      sub_100386874(a2, (uint64_t)&buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v68 = &buf;
      }
      else {
        v68 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v92.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
      LODWORD(v91) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v67,  17LL,  "Failed to decompress handsfree whitelist file %{public}s",  &v92,  v91);
      int v70 = v69;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  (const char *)v70);
      if (v70 != __p) {
        goto LABEL_221;
      }
    }

    return;
  }

  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v55) {
    goto LABEL_147;
  }
LABEL_119:
  sub_100386874(a2, (uint64_t)__p);
  if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unsigned int v56 = __p;
  }
  else {
    unsigned int v56 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  sub_100292D50((const char *)v56);
  sub_100D27430(__p);
  unsigned int v57 = sub_100D25EF0(a1, (const char *)__p);
  if (v57)
  {
    sub_100309D64(0, __p);
    unsigned int v58 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned int v60 = &buf;
    }
    else {
      unsigned int v60 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    sub_100296964((const char *)v60);
    v61 = &buf;
    sub_100D27430(&buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v61 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    sub_100309D64(0, __p);
    int v62 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
    uint64_t v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v64 = &v92;
    }
    else {
      uint64_t v64 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    sub_100292D88((const char *)v61, (const char *)v64);
    sub_10038637C(a1 + 536);
    return;
  }

  sub_100D27430(__p);
  if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v71 = __p;
  }
  else {
    int v71 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  sub_100296964((const char *)v71);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187FF38);
  }
  unsigned int v72 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "Downloaded handsfree whitelist file appeared to be corrupt, schedule another download",  (uint8_t *)__p,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    LODWORD(v91) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Downloaded handsfree whitelist file appeared to be corrupt, schedule another download",  &buf,  v91);
    int v89 = (std::string *)v88;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v88);
    if (v89 != __p) {
      free(v89);
    }
  }

  if ((sub_100385EC0(a1 + 536, (double *)(a1 + 784), (double *)(a1 + 784)) & 1) == 0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187FF38);
    }
    int v73 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v74 = (void *)(a1 + 512);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_FAULT,  "could not start handsfree whitelist file download from %{public}s",  (uint8_t *)__p,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      unsigned int v47 = qword_101934A78;
      int v48 = (void *)(a1 + 512);
LABEL_220:
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
      LODWORD(v91) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v47,  17LL,  "could not start handsfree whitelist file download from %{public}s",  &buf,  v91);
      int v70 = (std::string *)v90;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v90);
      if (v70 != __p) {
LABEL_221:
      }
        free(v70);
    }
  }

  int v21 = *a2;
  unsigned int v22 = a2[1];
  int v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  BOOL v24 = a2[4];
  int v25 = a2[5];
  unint64_t v26 = a2[6];
  *(void *)(a1 + 336) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 320) = v26;
  *(_OWORD *)(a1 + 288) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v49);
}

    unsigned int v29 = operator new(0x78uLL);
    int v30 = (uint64_t)v29;
    unint64_t v31 = a1[1];
    unsigned int v47 = *a1;
    int v48 = (std::__shared_weak_count *)v31;
    if (v31)
    {
      int v32 = (unint64_t *)(v31 + 8);
      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    sub_100D4F9EC(v29, &v47, (__int128 *)a2);
    sub_100D4B99C(a3, v30);
    int v18 = v48;
    if (v48)
    {
      uint64_t v34 = (unint64_t *)&v48->__shared_owners_;
      do
        int v20 = __ldaxr(v34);
      while (__stlxr(v20 - 1, v34));
      goto LABEL_39;
    }

    return;
  }

  uint64_t v6 = (int *)a2;
  if (*(_BYTE *)(a2 + 23) != 8)
  {
LABEL_33:
    int v23 = operator new(0x78uLL);
    BOOL v24 = (uint64_t)v23;
    int v25 = a1[1];
    unint64_t v41 = *a1;
    unsigned int v42 = (std::__shared_weak_count *)v25;
    if (v25)
    {
      unint64_t v26 = (unint64_t *)(v25 + 8);
      do
        uint64_t v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }

    sub_100D4F9EC(v23, &v41, (__int128 *)a2);
    sub_100D4B99C(a3, v24);
    int v18 = v42;
    if (v42)
    {
      int v28 = (unint64_t *)&v42->__shared_owners_;
      do
        int v20 = __ldaxr(v28);
      while (__stlxr(v20 - 1, v28));
LABEL_39:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }

      return;
    }

    return;
  }

    sub_1003BF200(*(void *)(a1 + 80), "StrideCalHistory");
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101882978);
    }
    unint64_t v38 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "StrideCalHistory table doesn't even exist",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101882978);
      }
      LOWORD(v45.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "StrideCalHistory table doesn't even exist",  &v45,  2);
      int v40 = (uint8_t *)v39;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CMStrideCalRecorderDb::alterTableIfNecessary()", "%s\n", v39);
      if (v40 != buf) {
        free(v40);
      }
    }
  }

  int v21 = *a2;
  unsigned int v22 = a2[1];
  int v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  BOOL v24 = a2[4];
  int v25 = a2[5];
  unint64_t v26 = a2[6];
  *(void *)(a1 + 336) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v25;
  *(_OWORD *)(a1 + 320) = v26;
  *(_OWORD *)(a1 + 288) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v39);
}

  int v21 = *a2;
  unsigned int v22 = a2[1];
  int v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
  BOOL v24 = a2[4];
  int v25 = a2[5];
  unint64_t v26 = a2[7];
  *(_OWORD *)(a1 + 320) = a2[6];
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 304) = v25;
  uint64_t v27 = a2[8];
  int v28 = a2[9];
  unsigned int v29 = a2[10];
  *(void *)(a1 + 400) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v28;
  *(_OWORD *)(a1 + 384) = v29;
  *(_OWORD *)(a1 + 352) = v27;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v40);
}

  int v21 = *a2;
  unsigned int v22 = a2[1];
  int v23 = a2[2];
  *(void *)(a1 + 272) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 240) = v22;
  *(_OWORD *)(a1 + 256) = v23;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v21 = *a2;
  unsigned int v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v33);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 48);
  BOOL v24 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 304) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 288) = v24;
  *(_OWORD *)(a1 + 256) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v35);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 48);
  BOOL v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  int v25 = *(_OWORD *)(a2 + 96);
  unint64_t v26 = *(_OWORD *)(a2 + 112);
  uint64_t v27 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 336) = v26;
  int v28 = *(_OWORD *)(a2 + 160);
  unsigned int v29 = *(_OWORD *)(a2 + 176);
  int v30 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 429) = *(_OWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 400) = v29;
  *(_OWORD *)(a1 + 416) = v30;
  *(_OWORD *)(a1 + 384) = v28;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v59);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  int v21 = *(_OWORD *)(a2 + 16);
  unsigned int v22 = *(_OWORD *)(a2 + 32);
  int v23 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 240) = v21;
  *(_OWORD *)(a1 + 256) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v34);
}

  int v49 = 0;
LABEL_43:
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8LL))(v65);
  }
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  *(void *)((char *)v67
  v68 = v60;
  std::streambuf::~streambuf(&v69);
  std::ios::~ios(&v70);
  v71[0] = v58;
  *(void *)((char *)v71 + *(void *)(v58 - 24)) = v59;
  unsigned int v72 = v60;
  std::streambuf::~streambuf(&v73);
  std::ios::~ios(&v74);
  if ((char)v77 < 0)
  {
    operator delete(v75);
    if ((v49 & 1) != 0) {
      return 0LL;
    }
  }

  else if ((v49 & 1) != 0)
  {
    return 0LL;
  }

  return 1LL;
}

  int v21 = *a2;
  unsigned int v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
  int v23 = a2[3];
  BOOL v24 = a2[4];
  int v25 = a2[6];
  *(_OWORD *)(a1 + 304) = a2[5];
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 288) = v24;
  unint64_t v26 = a2[7];
  uint64_t v27 = a2[8];
  int v28 = a2[10];
  *(_OWORD *)(a1 + 368) = a2[9];
  *(_OWORD *)(a1 + 384) = v28;
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 352) = v27;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v41);
}

  unint64_t v26 = *a2;
  uint64_t v27 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 224) = v26;
  int v28 = a2[3];
  unsigned int v29 = a2[4];
  int v30 = a2[5];
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 288) = v29;
  *(_OWORD *)(a1 + 304) = v30;
  *(_OWORD *)(a1 + 272) = v28;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_1003C05BC(*(void *)(a1 + 80));
  }
  return sub_1001BA1BC(v41);
}

  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 4u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "distanceTraveled", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 5u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }

  uint64_t v17 = *(void *)(a2 + 232);
  v10 |= 2u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 232) = v17;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = v3;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80) == 0)
  {
LABEL_23:
    if ((v2 & 0x200) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "totalEnergy", *(double *)(a1 + 128));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "instantaneousPower", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }

  uint64_t v9 = *(_BYTE *)(a2 + 97);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 97) = v9;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "loftStartTime", *(void *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 94), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  int v21 = *(_DWORD *)(a2 + 96);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 96) = v21;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "previousHorzRotRateMax", *(float *)(a1 + 100));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 64);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 64) = v5;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "quaternionPredictedY", *(float *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

        if (PB::Reader::placeMark(this, v51, v38, v39)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v37 + 16LL))(v37, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v51);
LABEL_67:
          int v2 = *((void *)this + 1);
          uint64_t v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_67;
    }
  }

  PB::TextFormatter::format(this, "sagittalApproachZ", *(float *)(a1 + 136));
  uint64_t v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x20000) != 0) {
    goto LABEL_43;
  }
LABEL_24:
  if ((v13 & 8) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 72), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 1) != 0) {
    goto LABEL_43;
  }
LABEL_18:
  if ((v4 & 2) != 0) {
LABEL_19:
  }
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 0x12u);
LABEL_20:
  uint64_t v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    int v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 0x13u);
  }

  uint64_t v9 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    int v10 = *v9++;
    uint64_t result = PB::Writer::write(this, v10, 0x14u);
  }

  return result;
}

  uint64_t result = *(float *)(a2 + 60);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 60) = result;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "configRmsClipMinAmp", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 103), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }

  int v10 = *(_DWORD *)(a2 + 92);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 92) = v10;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "diffTimeTrigger", *(_DWORD *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 1) == 0)
  {
LABEL_12:
    if ((v5 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  uint64_t v14 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 48) = v14;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "isTransitionDetected", *(_BYTE *)(a1 + 127));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x65u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176), 0x6Cu);
  uint64_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  int v10 = *(_DWORD *)(a2 + 156);
  v3 |= 0x80000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 156) = v10;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "configLy", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 8u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  unsigned int v22 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v22;
  int v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_44:
    BOOL v24 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(result + 68) = v3 | 0x80;
    *(_DWORD *)(result + 40) = v24;
    return result;
  }

  PB::TextFormatter::format(this, "latchedIsGPS", *(_DWORD *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x400) != 0) {
    goto LABEL_43;
  }
LABEL_21:
  if ((v5 & 1) != 0) {
LABEL_22:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x196u);
  if ((*(_DWORD *)(v3 + 68) & 0x80) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x197u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 3u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "habcNumerator", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 52) = v9;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x100000000LL) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "integrationTime", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 7u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "iso", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 40) = result;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "swingAccelMaxY", *(double *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }

  uint64_t result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 112) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_44:
    uint64_t result = *(double *)(a2 + 104);
    *(_DWORD *)(a1 + 176) = v3 | 0x1000;
    *(double *)(a1 + 104) = result;
    return result;
  }

  PB::TextFormatter::format(this, "shortBoutsWalkingSpeedCv", *(double *)(a1 + 152));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80000) != 0) {
    goto LABEL_43;
  }
LABEL_21:
  if ((v5 & 0x100000) != 0) {
LABEL_22:
  }
    PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 168));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 0x14u);
  if ((*(_DWORD *)(v3 + 176) & 0x1000) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x15u);
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ95", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 48) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *(double *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "falseStepDetectorState", *(_DWORD *)(a1 + 112));
  uint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  uint64_t result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 24) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "meanGravX", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 72) = v16;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 113), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  int v21 = *(void *)(a2 + 16);
  v5 |= 2u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 16) = v21;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 140));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }

  uint64_t v11 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 24) = v11;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "userAccelInerFFTAmpZHigh", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }

  uint64_t v11 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 68) = v11;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "dotRotGrav", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }

  uint64_t v6 = *(_BYTE *)(a2 + 217);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 217) = v6;
  int v2 = *(void *)(a2 + 224);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "groundContactTimeCadence", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 6u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }

  int v21 = *(_BYTE *)(a2 + 121);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 121) = v21;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "userHeight", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  int v15 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 40) = v15;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "isTrackRunOdometer", *(_BYTE *)(a1 + 181));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }

  uint64_t v17 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 48) = v17;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }

  PB::TextFormatter::format(this, "isValidPeak", *(_BYTE *)(a1 + 208));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }

LABEL_43:
  uint64_t v14 = *(void *)(v5 + 120);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_1019A0880 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v14,  a2,  a4);
  int v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x800) == 0)
  {
LABEL_20:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  int v10 = *(void *)(v5 + 32);
  if (!v10) {
    int v10 = *(void *)(qword_1019A0978 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }

  int v25 = *(void *)(a1 + 48);
  if (!v25) {
    int v25 = *(void *)(qword_1019A0978 + 48);
  }
  unint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100075DEC(v25, a2);
  uint64_t v27 = (int)v26;
  else {
    int v28 = 1;
  }
  uint64_t v4 = (v4 + v27 + v28 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }

  if ((v29 & 0x3FC00) == 0) {
    return;
  }
  if ((v29 & 0x400) != 0)
  {
    unint64_t v35 = *(void *)(a2 + 136);
    *(_DWORD *)(a1 + 168) |= 0x400u;
    *(void *)(a1 + 136) = v35;
    unsigned int v29 = *(_DWORD *)(a2 + 168);
    if ((v29 & 0x800) == 0)
    {
LABEL_46:
      if ((v29 & 0x1000) == 0) {
        goto LABEL_47;
      }
      goto LABEL_53;
    }
  }

  else if ((v29 & 0x800) == 0)
  {
    goto LABEL_46;
  }

  unsigned int v36 = *(void *)(a2 + 144);
  *(_DWORD *)(a1 + 168) |= 0x800u;
  *(void *)(a1 + 144) = v36;
  unsigned int v29 = *(_DWORD *)(a2 + 168);
  if ((v29 & 0x1000) == 0)
  {
LABEL_47:
    if ((v29 & 0x2000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_54;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }

  int v25 = *(void *)(a1 + 48);
  if (!v25) {
    int v25 = *(void *)(qword_1019A0AF0 + 48);
  }
  unint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CBB00(v25, a2);
  uint64_t v27 = (int)v26;
  else {
    int v28 = 1;
  }
  uint64_t v4 = (v4 + v27 + v28 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(_DWORD *)(v5 + 108),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  int v23 = v4 + 2;
  if ((v3 & 0x20) == 0) {
    int v23 = v4;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t v5 = v23 + 9;
  }
  else {
    uint64_t v5 = v23;
  }
  if ((v3 & 0x80) != 0)
  {
    BOOL v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
    if ((v24 & 0x80000000) != 0)
    {
      int v25 = 10;
    }

    else if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 100);
    }

    else
    {
      int v25 = 1;
    }

    uint64_t v5 = (v5 + v25 + 1);
  }

  int v21 = v4 + 2;
  if ((v3 & 0x20) == 0) {
    int v21 = v4;
  }
  if ((v3 & 0x40) != 0) {
    v21 += 2;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t result = v21 + 2;
  }
  else {
    uint64_t result = v21;
  }
LABEL_50:
  if ((v3 & 0xFF00) != 0)
  {
    unsigned int v22 = result + 2;
    if ((v3 & 0x100) == 0) {
      unsigned int v22 = result;
    }
    if ((v3 & 0x200) != 0) {
      int v23 = v22 + 2;
    }
    else {
      int v23 = v22;
    }
    if ((v3 & 0x400) != 0)
    {
      BOOL v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
      if ((v24 & 0x80000000) != 0)
      {
        int v25 = 11;
      }

      else if (v24 >= 0x80)
      {
        int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
        uint64_t v3 = *(_DWORD *)(a1 + 60);
      }

      else
      {
        int v25 = 2;
      }

      v23 += v25;
    }

    if ((v3 & 0x800) != 0)
    {
      unint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
      if ((v26 & 0x80000000) != 0)
      {
        uint64_t v27 = 11;
      }

      else if (v26 >= 0x80)
      {
        uint64_t v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2) + 1;
        uint64_t v3 = *(_DWORD *)(a1 + 60);
      }

      else
      {
        uint64_t v27 = 2;
      }

      v23 += v27;
    }

    if ((v3 & 0x1000) != 0) {
      uint64_t result = v23 + 2;
    }
    else {
      uint64_t result = v23;
    }
  }

  *(_DWORD *)(a1 + 56) = result;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 76),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  unsigned int v22 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 84) |= 0x1000u;
  *(_DWORD *)(a1 + 64) = v22;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

      if (v10 == -1) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }

        if (v38 < 0) {
          operator delete(__p);
        }
        if (v36 < 0) {
          operator delete(v35);
        }
        if (v34 < 0) {
          operator delete(v33);
        }
        if (v32 < 0)
        {
          operator delete(v31);
          if ((a3 & 1) != 0) {
            return sub_1001BA1BC(v39);
          }
        }

        else if ((a3 & 1) != 0)
        {
          return sub_1001BA1BC(v39);
        }

        sub_1003C05BC(a1[10]);
        return sub_1001BA1BC(v39);
      }

      int v7 = *((double *)a2 + 1);
      uint64_t v8 = v29;
      uint64_t v9 = v7 - v29;
      if (v7 - v29 < 0.0) {
        uint64_t v9 = -(v7 - v29);
      }
      if (v9 > 604800.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10182E748);
        }
        int v10 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *((void *)a2 + 1);
          *(_DWORD *)buf = 134349312;
          unint64_t v45 = v29;
          uint64_t v46 = 2050;
          unsigned int v47 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10182E748);
          }
          unsigned int v22 = *((void *)a2 + 1);
          int v40 = 134349312;
          unint64_t v41 = v29;
          unsigned int v42 = 2050;
          unint64_t v43 = v22;
          int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v40,  22);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSumma ry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v23);
        }

        CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
        int v7 = *((double *)a2 + 1);
        uint64_t v8 = v29;
      }

      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10182E748);
          }
          int v12 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = *((double *)a2 + 1);
            *(_DWORD *)buf = 134217984;
            unint64_t v45 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10182E748);
            }
            BOOL v24 = *((double *)a2 + 1);
            int v40 = 134217984;
            unint64_t v41 = v24;
            int v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v40));
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSum mary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
          }

          (*(void (**)(uint64_t *, __int128 *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }

        uint64_t v16 = v7 - v8;
        uint64_t v17 = *((float *)a1 + 34);
        if (qword_1019344B0 != -1)
        {
          uint64_t v27 = *((float *)a1 + 34);
          dispatch_once(&qword_1019344B0, &stru_10182E748);
          uint64_t v17 = v27;
        }

        int v18 = v16 - v17;
        int v19 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          unint64_t v45 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10182E748);
          }
          int v40 = 134217984;
          unint64_t v41 = v18;
          unint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v40));
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSumma ry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
        }

        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v18);
      }

      (*(void (**)(uint64_t *, uint64_t *, uint64_t *, __int128 *))(*a1 + 144))(a1, &v28, a1 + 28, a2);
    }

    (*(void (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 120))(a1, a2, 1LL);
LABEL_42:
    int v20 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v20;
    std::string::operator=((std::string *)(a1 + 31), (const std::string *)a2 + 1);
    std::string::operator=((std::string *)(a1 + 34), (const std::string *)a2 + 2);
    std::string::operator=((std::string *)(a1 + 37), (const std::string *)a2 + 3);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)a2 + 4);
    goto LABEL_43;
  }

  (*(void (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_1001BA1BC(v39);
}

  PBDataWriterWriteFloatField(a3, 21LL, self->_onsetCatherine);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x200000) == 0)
  {
LABEL_22:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      return;
    }
LABEL_45:
    PBDataWriterWriteFloatField(a3, 23LL, self->_persistedMinHR);
    return;
  }

  *((_DWORD *)a3 + 21) = LODWORD(self->_onsetCatherine);
  *((_DWORD *)a3 + 26) |= 0x20000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x200000) == 0)
  {
LABEL_22:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      return;
    }
LABEL_45:
    *((_DWORD *)a3 + 23) = LODWORD(self->_persistedMinHR);
    *((_DWORD *)a3 + 26) |= 0x80000u;
    return;
  }

  *((_DWORD *)result + 22) = self->_onsetReason;
  *((_DWORD *)result + 26) |= 0x40000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }

  self->_onsetCatherine = *((float *)a3 + 21);
  *(_DWORD *)&self->_has |= 0x20000u;
  uint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x200000) == 0)
  {
LABEL_22:
    if ((v3 & 0x80000) == 0) {
      return;
    }
LABEL_45:
    self->_persistedMinHR = *((float *)a3 + 23);
    *(_DWORD *)&self->_has |= 0x80000u;
    return;
  }

  int v10 = *(void *)(v5 + 32);
  if (!v10) {
    int v10 = *(void *)(qword_1019A11B8 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }

  int v25 = *(void *)(a1 + 48);
  if (!v25) {
    int v25 = *(void *)(qword_1019A11B8 + 48);
  }
  unint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E3804(v25, a2);
  uint64_t v27 = (int)v26;
  else {
    int v28 = 1;
  }
  uint64_t v4 = (v4 + v27 + v28 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }

  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

  int v25 = *(void *)(a1 + 48);
  if (!v25) {
    int v25 = *(void *)(qword_1019A1328 + 48);
  }
  unint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062A3EC(v25, a2);
  uint64_t v27 = (int)v26;
  else {
    int v28 = 1;
  }
  uint64_t v4 = (v4 + v27 + v28 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_59;
    }
    goto LABEL_55;
  }

  int v21 = *(void *)(a1 + 40);
  if (!v21) {
    int v21 = *(void *)(qword_1019A1368 + 40);
  }
  unsigned int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062C1CC(v21, a2);
  int v23 = (int)v22;
  else {
    BOOL v24 = 1;
  }
  uint64_t v4 = (v4 + v23 + v24 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 64);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }

  uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[8];
  if (v17 >= 0x80)
  {
    int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    uint64_t v3 = a1[12];
  }

  else
  {
    int v18 = 2;
  }

  uint64_t v4 = (v18 + v4);
  if ((v3 & 0x80) == 0)
  {
LABEL_23:
    if ((v3 & 0x100) == 0) {
      goto LABEL_55;
    }
    goto LABEL_51;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  sub_1006684D8((void ***)&v34);
}

  if ((_DWORD)v43)
  {
    LOBYTE(v43) = 2;
LABEL_49:
    *(void *)&v111[2] = 0LL;
    *(void *)v112 = 0x3F80000000000000LL;
    sub_1006AADE0((unsigned __int16 *)(a1 + 736), (uint64_t)buf);
    int v48 = (*(uint64_t (**)(void, uint64_t, double, double, double))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  v86,  *(double *)v114,  *(double *)&v114[8],  2.56);
    if (v48)
    {
      sub_100D7B9EC(v85, v86);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_101849030);
      }
      int v49 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
      {
        int v50 = *(double *)(v86 + 40);
        unsigned int v51 = *(double *)(v86 + 48);
        int v52 = *(_DWORD *)(v86 + 124);
        int v53 = *(void *)(v86 + 72);
        int v54 = *(void *)(v86 + 80);
        unsigned int v55 = *(_DWORD *)(v86 + 100);
        unsigned int v56 = *(_DWORD *)(v86 + 104);
        unsigned int v57 = *(_DWORD *)(v86 + 108);
        unsigned int v58 = *(float *)(v86 + 112);
        *(_DWORD *)buf = 134220032;
        int v106 = v50;
        unsigned int v107 = 2048;
        int v108 = v51;
        int v109 = 1024;
        *(_DWORD *)v110 = v52;
        *(_WORD *)&v110[4] = 1024;
        *(_DWORD *)&v110[6] = v55;
        *(_WORD *)unsigned int v111 = 2048;
        *(void *)&v111[2] = v53;
        *(_WORD *)v112 = 2048;
        *(void *)&v112[2] = v54;
        unsigned int v113 = 1024;
        *(_DWORD *)v114 = v56;
        *(_WORD *)&v114[4] = 1024;
        *(_DWORD *)&v114[6] = v57;
        *(_WORD *)&v114[10] = 2048;
        *(double *)&v114[12] = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "EpochSummary,start,%f,end,%f,style,%d,epochStyle,%d,distance,%f,distanceTimestamp,%f,strokes,%d,laps,%d,strokeRate,%f\n",  buf,  0x4Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_101849030);
        }
        uint64_t v64 = *(void *)(v86 + 40);
        unsigned int v65 = *(void *)(v86 + 48);
        uint64_t v66 = *(_DWORD *)(v86 + 124);
        uint64_t v67 = *(void *)(v86 + 72);
        v68 = *(void *)(v86 + 80);
        int v69 = *(_DWORD *)(v86 + 100);
        int v70 = *(_DWORD *)(v86 + 104);
        int v71 = *(_DWORD *)(v86 + 108);
        unsigned int v72 = *(float *)(v86 + 112);
        *(_DWORD *)int v115 = 134220032;
        *(void *)&v115[4] = v64;
        unsigned int v116 = 2048;
        int v117 = v65;
        uint64_t v118 = 1024;
        v119 = v66;
        v120 = 1024;
        v121 = v69;
        v122 = 2048;
        v123 = v67;
        *(_WORD *)v124 = 2048;
        *(void *)&v124[2] = v68;
        v125 = 1024;
        *(_DWORD *)v126 = v70;
        *(_WORD *)&v126[4] = 1024;
        *(_DWORD *)&v126[6] = v71;
        v127 = 2048;
        v128 = v72;
        LODWORD(v81) = 76;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "EpochSummary,start,%f,end,%f,style,%d,epochStyle,%d,distance,%f,distanceTimestamp,%f,strokes,%d,laps,%d,strokeRate,%f\n",  COERCE_DOUBLE(v115),  v81,  v82,  v84,  *(double *)&v85,  *(double *)&v86,  (_DWORD)v87,  DWORD2(v87),  v88);
        int v74 = (uint8_t *)v73;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)",  "%s\n",  v73);
        if (v74 != buf) {
          free(v74);
        }
      }
    }

    unint64_t v43 = v43 & 2 | v48;
    *(void *)(a1 + 720) = *(void *)(v3 + 56);
    goto LABEL_56;
  }

        unsigned int v22 = v36;
        if (!v36) {
          goto LABEL_47;
        }
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          BOOL v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          if ((a3 & 1) != 0) {
            return sub_1001BA1BC(v37);
          }
        }

        else
        {
LABEL_47:
          if ((a3 & 1) != 0) {
            return sub_1001BA1BC(v37);
          }
        }

        sub_1003C05BC(a1[10]);
        return sub_1001BA1BC(v37);
      }

      int v7 = *(double *)a2;
      uint64_t v8 = v35[0];
      uint64_t v9 = *(double *)a2 - v35[0];
      if (v9 < 0.0) {
        uint64_t v9 = -v9;
      }
      if (v9 > 604800.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10184C278);
        }
        int v10 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(double *)a2;
          *(_DWORD *)buf = 134349312;
          unint64_t v43 = v35[0];
          char v44 = 2050;
          unint64_t v45 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184C278);
          }
          unint64_t v26 = *(double *)a2;
          unint64_t v38 = 134349312;
          int v39 = v35[0];
          int v40 = 2050;
          unint64_t v41 = v26;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v38,  22);
          int v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
        int v7 = *(double *)a2;
        uint64_t v8 = v35[0];
      }

      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184C278);
          }
          int v12 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            unint64_t v43 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10184C278);
            }
            unsigned int v29 = *(double *)a2;
            unint64_t v38 = 134217984;
            int v39 = v29;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v38));
            unint64_t v31 = (uint8_t *)v30;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [ T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v30);
            if (v31 != buf) {
              free(v31);
            }
          }

          (*(void (**)(uint64_t *, __int128 *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }

        uint64_t v17 = v7 - v8;
        int v18 = *((float *)a1 + 34);
        if (qword_1019344B0 != -1)
        {
          uint64_t v34 = *((float *)a1 + 34);
          dispatch_once(&qword_1019344B0, &stru_10184C278);
          int v18 = v34;
        }

        int v19 = v17 - v18;
        int v20 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          unint64_t v43 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10184C278);
          }
          unint64_t v38 = 134217984;
          int v39 = v19;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v38));
          unint64_t v33 = (uint8_t *)v32;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSensorRecorderDataPacket, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v32);
          if (v33 != buf) {
            free(v33);
          }
        }

        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v19);
      }

      (*(void (**)(uint64_t *, double *, uint64_t *, __int128 *))(*a1 + 144))(a1, v35, a1 + 28, a2);
      (*(void (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    }

  ++*(void *)(a1 + 24);
  return v12;
}

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v19 = __p.__r_.__value_.__s.__size_;
  }
  else {
    int v19 = __p.__r_.__value_.__l.__size_;
  }
  if (v19)
  {
    if (v3)
    {
      int v20 = *(unsigned __int8 *)(a1 + 159);
      int v21 = (char)v20;
      if ((v20 & 0x80u) != 0LL) {
        int v20 = *(void *)(a1 + 144);
      }
      if (v19 == v20)
      {
        if (v21 >= 0) {
          unsigned int v22 = (unsigned __int8 *)(a1 + 136);
        }
        else {
          unsigned int v22 = *(unsigned __int8 **)(a1 + 136);
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80) != 0)
        {
          int v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (memcmp(__p.__r_.__value_.__l.__data_, v22, __p.__r_.__value_.__l.__size_)) {
            goto LABEL_63;
          }
        }

        else if (__p.__r_.__value_.__s.__size_)
        {
          p_p = &__p;
          BOOL v24 = __p.__r_.__value_.__s.__size_;
          while (p_p->__r_.__value_.__s.__data_[0] == *v22)
          {
            p_p = (std::string *)((char *)p_p + 1);
            ++v22;
            if (!--v24) {
              goto LABEL_66;
            }
          }

          goto LABEL_60;
        }

  uint64_t v17 = *(void *)(a1 + 32);
  int v18 = *(unsigned __int8 *)(v17 + 23);
  int v19 = v18;
  int v20 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    int v21 = *(unsigned __int8 *)(v17 + 23);
  }
  else {
    int v21 = v20;
  }
  if (v21 >= 0x80)
  {
    unsigned int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21,  a2);
    int v18 = *(unsigned __int8 *)(v17 + 23);
    int v20 = *(void *)(v17 + 8);
    uint64_t v3 = *(_DWORD *)(a1 + 88);
    int v19 = *(_BYTE *)(v17 + 23);
  }

  else
  {
    unsigned int v22 = 1;
  }

  if (v19 < 0) {
    int v18 = v20;
  }
  uint64_t v4 = (v4 + v22 + v18 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }

        if (SHIBYTE(v36) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0)
        {
          operator delete(v34[0]);
          if ((a3 & 1) != 0) {
            return sub_1001BA1BC(v37);
          }
        }

        else if ((a3 & 1) != 0)
        {
          return sub_1001BA1BC(v37);
        }

        sub_1003C05BC(a1[10]);
        return sub_1001BA1BC(v37);
      }

      int v7 = *((double *)a2 + 1);
      uint64_t v8 = v33;
      uint64_t v9 = v7 - v33;
      if (v7 - v33 < 0.0) {
        uint64_t v9 = -(v7 - v33);
      }
      if (v9 > 604800.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018651A8);
        }
        int v10 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *((void *)a2 + 1);
          *(_DWORD *)buf = 134349312;
          unint64_t v43 = v33;
          char v44 = 2050;
          unint64_t v45 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_1018651A8);
          }
          int v23 = *((void *)a2 + 1);
          unint64_t v38 = 134349312;
          int v39 = v33;
          int v40 = 2050;
          unint64_t v41 = v23;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v38,  22);
          int v25 = (uint8_t *)v24;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeA ndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataP rotectionPolicy]",  "%s\n",  v24);
          if (v25 != buf) {
            free(v25);
          }
        }

        CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
        int v7 = *((double *)a2 + 1);
        uint64_t v8 = v33;
      }

      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_1018651A8);
          }
          int v12 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = *((double *)a2 + 1);
            *(_DWORD *)buf = 134217984;
            unint64_t v43 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_1018651A8);
            }
            unint64_t v26 = *((double *)a2 + 1);
            unint64_t v38 = 134217984;
            int v39 = v26;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v38));
            int v28 = (uint8_t *)v27;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitiz eAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBD ataProtectionPolicy]",  "%s\n",  v27);
            if (v28 != buf) {
              free(v28);
            }
          }

          (*(void (**)(uint64_t *, __int128 *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }

        uint64_t v17 = v7 - v8;
        int v18 = *((float *)a1 + 34);
        if (qword_1019344B0 != -1)
        {
          unint64_t v31 = *((float *)a1 + 34);
          dispatch_once(&qword_1019344B0, &stru_1018651A8);
          int v18 = v31;
        }

        int v19 = v17 - v18;
        int v20 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          unint64_t v43 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_1018651A8);
          }
          unint64_t v38 = 134217984;
          int v39 = v19;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v38));
          int v30 = (uint8_t *)v29;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeA ndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataP rotectionPolicy]",  "%s\n",  v29);
          if (v30 != buf) {
            free(v30);
          }
        }

        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v19);
      }

      (*(void (**)(uint64_t *, char *, uint64_t *, __int128 *))(*a1 + 144))(a1, v32, a1 + 28, a2);
    }

    (*(void (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 120))(a1, a2, 1LL);
LABEL_42:
    int v21 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v21;
    std::string::operator=((std::string *)(a1 + 31), (const std::string *)a2 + 1);
    std::string::operator=((std::string *)(a1 + 34), (const std::string *)a2 + 2);
    goto LABEL_43;
  }

  (*(void (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_1001BA1BC(v37);
}

        int v25 = (void *)v5[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v5[2];
            uint64_t v27 = *v26 == (void)v5;
            uint64_t v5 = v26;
          }

          while (!v27);
        }

        uint64_t v5 = v26;
      }

      while (v26 != v6);
    }
  }

  uint64_t v27 = *(void *)(a1 + 40);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_1019A1A48 + 40);
  }
  int v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A442C4(v27);
  int v30 = (int)v28;
  else {
    unint64_t v31 = 1;
  }
  uint64_t v4 = (v4 + v30 + v31 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 96);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 92),  (int)a2,  a4);
  uint64_t v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x1000) == 0)
  {
LABEL_17:
    if ((v8 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  sub_1002F0B04(buf);
  if (sub_1002A6F64(*(uint64_t *)buf, "LCFusionGenerateProviderSpecificHypotheses", (BOOL *)(a1 + 166)))
  {
    unsigned int v22 = *(unsigned __int8 *)(a1 + 166);
    int v23 = v87;
    if (!v87) {
      goto LABEL_48;
    }
    BOOL v24 = (unint64_t *)&v87->__shared_owners_;
    do
      int v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v22) {
        goto LABEL_64;
      }
    }

    else
    {
LABEL_48:
      if (!v22) {
        goto LABEL_64;
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v26 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "LCFusion to generate and use provider specific hypotheses",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion to generate and use provider specific hypotheses",  v85,  v84);
      int v28 = (uint8_t *)v27;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v27);
      if (v28 != buf) {
        free(v28);
      }
    }
  }

  else
  {
    unsigned int v29 = v87;
    if (v87)
    {
      int v30 = (unint64_t *)&v87->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }

  uint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_1019A1CE8 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v13,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }

  int v23 = *(void *)(a1 + 40);
  if (!v23) {
    int v23 = *(void *)(qword_1019A1CE8 + 40);
  }
  BOOL v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B244C4(v23, a2);
  int v25 = (int)v24;
  else {
    unint64_t v26 = 1;
  }
  uint64_t v4 = (v4 + v25 + v26 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }

  *((_DWORD *)result + 39) = self->_vo2MaxModelSource;
  *((_DWORD *)result + 41) |= 0x80000u;
  if ((*(_DWORD *)&self->_has & 0x40000) == 0) {
    return result;
  }
LABEL_22:
  *((_DWORD *)result + 38) = self->_sessionType;
  *((_DWORD *)result + 41) |= 0x40000u;
  return result;
}

  uint64_t v9 = *(void *)(v5 + 40);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1D38 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v6 | (v5 << 8);
}

      int v25 = v15;
      goto LABEL_44;
    }
  }

        if (v70 < 0)
        {
          operator delete(__p);
          if ((a3 & 1) != 0) {
            return sub_1001BA1BC(v53);
          }
        }

        else if ((a3 & 1) != 0)
        {
          return sub_1001BA1BC(v53);
        }

        sub_1003C05BC(*(void *)(a1 + 80));
        return sub_1001BA1BC(v53);
      }

      uint64_t v8 = *(double *)(a2 + 24);
      uint64_t v9 = v63;
      int v10 = v8 - v63;
      if (v8 - v63 < 0.0) {
        int v10 = -(v8 - v63);
      }
      if (v10 > 604800.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187EC10);
        }
        uint64_t v11 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(void *)(a2 + 24);
          *(_DWORD *)buf = 134349312;
          v59 = v63;
          unsigned int v60 = 2050;
          v61 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187EC10);
          }
          char v44 = *(void *)(a2 + 24);
          int v54 = 134349312;
          unsigned int v55 = v63;
          unsigned int v56 = 2050;
          unsigned int v57 = v44;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v54,  22);
          uint64_t v46 = (uint8_t *)v45;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v45);
          if (v46 != buf) {
            free(v46);
          }
        }

        CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
        uint64_t v8 = *(double *)(a2 + 24);
        uint64_t v9 = v63;
      }

      if (v8 < v9)
      {
        if (v9 - v8 < 10.0)
        {
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187EC10);
          }
          uint64_t v13 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = *(double *)(a2 + 24);
            *(_DWORD *)buf = 134217984;
            v59 = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10187EC10);
            }
            unsigned int v47 = *(double *)(a2 + 24);
            int v54 = 134217984;
            unsigned int v55 = v47;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v54));
            int v49 = (uint8_t *)v48;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v48);
            if (v49 != buf) {
              free(v49);
            }
          }

          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
          *uint64_t v6 = *(_OWORD *)a2;
          int v15 = *(_OWORD *)(a2 + 16);
          uint64_t v16 = *(_OWORD *)(a2 + 32);
          uint64_t v17 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 288) = v17;
          *(_OWORD *)(a1 + 240) = v15;
          *(_OWORD *)(a1 + 256) = v16;
          int v18 = *(_OWORD *)(a2 + 80);
          int v19 = *(_OWORD *)(a2 + 96);
          int v20 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 352) = v20;
          *(_OWORD *)(a1 + 304) = v18;
          *(_OWORD *)(a1 + 320) = v19;
          int v21 = *(void *)(a2 + 144);
          *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 152);
          *(void *)(a1 + 368) = v21;
          std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
          goto LABEL_42;
        }

        int v32 = v8 - v9;
        unint64_t v33 = *(float *)(a1 + 136);
        if (qword_1019344B0 != -1)
        {
          int v52 = *(float *)(a1 + 136);
          dispatch_once(&qword_1019344B0, &stru_10187EC10);
          unint64_t v33 = v52;
        }

        uint64_t v34 = v32 - v33;
        unint64_t v35 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v59 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187EC10);
          }
          int v54 = 134217984;
          unsigned int v55 = v34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v54));
          unsigned int v51 = (uint8_t *)v50;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAn dStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v50);
          if (v51 != buf) {
            free(v51);
          }
        }

        (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v34);
      }

      (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, v62, a1 + 224, a2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
      *uint64_t v6 = *(_OWORD *)a2;
      unsigned int v36 = *(_OWORD *)(a2 + 16);
      int v37 = *(_OWORD *)(a2 + 32);
      unint64_t v38 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 288) = v38;
      *(_OWORD *)(a1 + 240) = v36;
      *(_OWORD *)(a1 + 256) = v37;
      int v39 = *(_OWORD *)(a2 + 80);
      int v40 = *(_OWORD *)(a2 + 96);
      unint64_t v41 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 352) = v41;
      *(_OWORD *)(a1 + 304) = v39;
      *(_OWORD *)(a1 + 320) = v40;
      unsigned int v42 = *(void *)(a2 + 144);
      *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 152);
      *(void *)(a1 + 368) = v42;
      std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
    }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v6 | (v5 << 8);
}

    if (theInterface)
    {
      ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
      IODestroyPlugInInterface(theInterface);
    }

    return;
  }

  int v28 = (*(uint64_t (**)(const void *, void))(*(void *)v50 + 64LL))(v50, 0LL);
  if (v28)
  {
    unsigned int v29 = v28;
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101886B88);
    }
    int v30 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      unint64_t v31 = mach_error_string(v29);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)unsigned int v60 = v29;
      *(_WORD *)&v60[4] = 2082;
      *(void *)&v60[6] = v31;
      *(_WORD *)&v60[14] = 2114;
      *(void *)&v60[16] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_FAULT,  "[CLSPUHIDDriverInterface] Unable to open hid driver interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101886B88);
      }
      int v40 = qword_1019344C8;
      unint64_t v41 = mach_error_string(v29);
      int v53 = 67240706;
      *(_DWORD *)int v54 = v29;
      *(_WORD *)&v54[4] = 2082;
      *(void *)&v54[6] = v41;
      *(_WORD *)&v54[14] = 2114;
      *(void *)&v54[16] = v5;
      LODWORD(byte15b) = 28;
      unsigned int v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v40,  17LL,  "[CLSPUHIDDriverInterface] Unable to open hid driver interface,retCode,0x%{public}x,retStr,%{public }s,service,%{public}@",  &v53,  byte15b);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v42);
    }

    if (v50) {
      (*(void (**)(const void *, void))(*(void *)v50 + 72LL))(v50, 0LL);
    }
    goto LABEL_43;
  }

  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_101886B88);
  }
  int v32 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v33 = a1[2];
    uint64_t v34 = a1[3];
    *(_DWORD *)buf = 134219008;
    *(void *)unsigned int v60 = valuePtr;
    *(_WORD *)&v60[8] = 2048;
    *(void *)&v60[10] = v33;
    *(_WORD *)&v60[18] = 2048;
    *(void *)&v60[20] = v34;
    v61 = 2048;
    int v62 = theInterface;
    uint64_t v63 = 2048;
    uint64_t v64 = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "[CLSPUHIDDriverInterface] Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} wa s then {%p,%p}, is now {%p,%p}",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101886B88);
    }
    unint64_t v43 = a1[2];
    char v44 = a1[3];
    int v53 = 134219008;
    *(void *)int v54 = valuePtr;
    *(_WORD *)&v54[8] = 2048;
    *(void *)&v54[10] = v43;
    *(_WORD *)&v54[18] = 2048;
    *(void *)&v54[20] = v44;
    unsigned int v55 = 2048;
    unsigned int v56 = theInterface;
    unsigned int v57 = 2048;
    unsigned int v58 = v50;
    LODWORD(byte15b) = 52;
    unint64_t v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "[CLSPUHIDDriverInterface] Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDrive rInterface} was then {%p,%p}, is now {%p,%p}",  &v53,  byte15b,  v49,  v50,  theInterface);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v45);
  }

  *(void *)(*a1 + 8) = valuePtr;
  unint64_t v35 = (uint64_t)v50;
  a1[2] = (uint64_t)theInterface;
  a1[3] = v35;
}

  unsigned int v42 = v52;
  if (v52)
  {
    unint64_t v43 = (unint64_t *)&v52->__shared_owners_;
    do
      char v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  return v24;
}

  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x200uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "fallAlertUndelayedTimestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 6u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_45;
  }

  int v18 = *(void *)(a2 + 256);
  v10 |= 0x10u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 256) = v18;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 64) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200) == 0)
  {
LABEL_24:
    if ((v2 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "totalFloorsClimbed", *(void *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
LABEL_45:
    PB::TextFormatter::format(this, "totalStrokeCount", *(void *)(a1 + 152));
    if ((*(_DWORD *)(a1 + 176) & 0x80000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 1) == 0)
  {
LABEL_22:
    if ((v4 & 0x800) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 96), 0x16u);
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "instantaneousSpeed", *(float *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }

  int v10 = *(_BYTE *)(a2 + 94);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 94) = v10;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "pendulumResidual", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 93), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  unsigned int v22 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 72) = v22;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "previousMax", *(float *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
LABEL_45:
    PB::TextFormatter::format(this, "vertRotationRateMean", *(float *)(a1 + 108));
    if ((*(_DWORD *)(a1 + 116) & 0x200000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x16u);
  }

        *(_DWORD *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v4 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 128) = v3;
  *(void *)(a1 + 16) = v4;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "quaternionPredictedZ", *(float *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  int v15 = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 212) |= 0x400000u;
  *(_DWORD *)(a1 + 184) = v15;
  int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x10) == 0)
  {
LABEL_14:
    if ((v10 & 0x80000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  int v7 = *(_BYTE *)(a2 + 103);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_BYTE *)(a1 + 103) = v7;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "delaySpread", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 102), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }

  uint64_t v11 = *(_DWORD *)(a2 + 88);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 88) = v11;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x800000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 2) == 0)
  {
LABEL_13:
    if ((v5 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  int v15 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 72) = v15;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "kHSThresholdMPS", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x66u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 0x6Du);
  uint64_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  uint64_t v11 = *(_DWORD *)(a2 + 144);
  v3 |= 0x10000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 144) = v11;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "configLz", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 9u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }

  int v23 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v23;
  if ((*(_DWORD *)(a2 + 68) & 0x80) != 0) {
    goto LABEL_44;
  }
  return result;
}

        *(void *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  PB::TextFormatter::format(this, "avgTruthMets", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "habcRateBaseline", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  int v10 = *(_DWORD *)(a2 + 156);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 156) = v10;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "numAOPClients", *(_DWORD *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 8u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }

        *(_DWORD *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "left_eye_x", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  uint64_t result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "swingAccelMaxZ", *(double *)(a1 + 128));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }

        *(_DWORD *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 136) = result;
  if ((*(_DWORD *)(a2 + 176) & 0x1000) != 0) {
    goto LABEL_44;
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 88) = result;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtCv", *(double *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 64) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *(double *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "falseStepsSuppressed", *(_DWORD *)(a1 + 116));
  uint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }

  uint64_t result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 28) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "meanGravY", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  uint64_t v17 = *(_BYTE *)(a2 + 113);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 113) = v17;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  unsigned int v22 = *(void *)(a2 + 24);
  v5 |= 4u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 24) = v22;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 144));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 164), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }

  int v12 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 8) = v12;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 176));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }

        *(_DWORD *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "userAccelInerFFTAmpZPed", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }

        *(void *)(a1 + 8) = v24;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        int v2 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      int v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  int v12 = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 112) = v12;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "hasUnCorrelatedSrcMotion", *(_BYTE *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 124), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }

  int v15 = *(_DWORD *)(a2 + 120);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 120) = v15;
  uint64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "btzIsCurrentlyQuiescent", *(_BYTE *)(a1 + 153));
  uint64_t v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }

  uint64_t result = *(double *)(a2 + 160);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 160) = result;
  int v2 = *(void *)(a2 + 224);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "groundContactTimeGrade", *(double *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 221), 7u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }

  unsigned int v22 = *(_DWORD *)(a2 + 116);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 116) = v22;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "userWeight", *(double *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0) {
      goto LABEL_22;
    }
LABEL_45:
    PB::TextFormatter::format(this, "wLoad", *(double *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 128) & 0x800) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_23;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x16u);
  }

  uint64_t v16 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 8) = v16;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "isValidOdometerSpeed", *(_BYTE *)(a1 + 182));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }

  int v18 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 32) = v18;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }

  PB::TextFormatter::format(this, "medianCadence", *(double *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }

LABEL_46:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 128),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 192) & 0x1000) != 0) {
LABEL_21:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 132),  (int)a2,  a4);
LABEL_22:
  if (*(int *)(v5 + 144) >= 1)
  {
    uint64_t v11 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(*(void *)(v5 + 136) + 4 * v11++),  (int)a2,  a4);
    while (v11 < *(int *)(v5 + 144));
  }

  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x4000) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(_DWORD *)(v5 + 152),  a2,  a4);
    int v12 = *(_DWORD *)(v5 + 192);
    if ((v12 & 0x8000) == 0)
    {
LABEL_27:
      if ((v12 & 0x10000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_50;
    }
  }

  else if ((v12 & 0x8000) == 0)
  {
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(_DWORD *)(v5 + 156),  a2,  a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x10000) == 0)
  {
LABEL_28:
    if ((v12 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_51;
  }

  int v25 = *(void *)(a1 + 32);
  unint64_t v26 = *(unsigned __int8 *)(v25 + 23);
  uint64_t v27 = v26;
  int v28 = *(void *)(v25 + 8);
  if ((v26 & 0x80u) == 0) {
    unsigned int v29 = *(unsigned __int8 *)(v25 + 23);
  }
  else {
    unsigned int v29 = v28;
  }
  if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29,  a2);
    unint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    int v28 = *(void *)(v25 + 8);
    uint64_t v3 = *(_DWORD *)(a1 + 116);
    uint64_t v27 = *(_BYTE *)(v25 + 23);
  }

  else
  {
    int v30 = 1;
  }

  if (v27 < 0) {
    unint64_t v26 = v28;
  }
  uint64_t v4 = (v4 + v30 + v26 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }

  int v25 = *(void *)(a1 + 32);
  unint64_t v26 = *(unsigned __int8 *)(v25 + 23);
  uint64_t v27 = v26;
  int v28 = *(void *)(v25 + 8);
  if ((v26 & 0x80u) == 0) {
    unsigned int v29 = *(unsigned __int8 *)(v25 + 23);
  }
  else {
    unsigned int v29 = v28;
  }
  if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29,  a2);
    unint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    int v28 = *(void *)(v25 + 8);
    uint64_t v3 = *(_DWORD *)(a1 + 84);
    uint64_t v27 = *(_BYTE *)(v25 + 23);
  }

  else
  {
    int v30 = 1;
  }

  if (v27 < 0) {
    unint64_t v26 = v28;
  }
  uint64_t v4 = (v4 + v30 + v26 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }

  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A0978 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }

          uint64_t v8 = v32;
          if (v32 < (unint64_t *)v34)
          {
            unsigned int v42 = v34;
            do
            {
              sub_1000AA070((__int128 *)v8, v42);
              unint64_t v43 = v8;
              do
              {
                char v44 = v8[30];
                v8 += 30;
                unint64_t v45 = bswap64(v44);
                uint64_t v46 = bswap64(v242);
                if (v45 == v46 && (unint64_t v45 = bswap64(v43[31]), v46 = bswap64(*((unint64_t *)&v242 + 1)), v45 == v46))
                {
                  unsigned int v47 = 0;
                }

                else if (v45 < v46)
                {
                  unsigned int v47 = -1;
                }

                else
                {
                  unsigned int v47 = 1;
                }

                unint64_t v43 = v8;
              }

              while (v47 < 0);
              int v48 = v42;
              do
              {
                int v49 = *((void *)v42 - 30);
                v42 -= 15;
                int v50 = bswap64(v49);
                unsigned int v51 = bswap64(v242);
                if (v50 == v51
                  && (int v50 = bswap64(*((void *)v48 - 29)), v51 = bswap64(*((unint64_t *)&v242 + 1)), v50 == v51))
                {
                  int v52 = 0;
                }

                else if (v50 < v51)
                {
                  int v52 = -1;
                }

                else
                {
                  int v52 = 1;
                }

                int v48 = v42;
              }

              while ((v52 & 0x80000000) == 0);
            }

            while (v8 < (unint64_t *)v42);
          }

          int v53 = v8 - 30;
          if (v8 - 30 != a1)
          {
            int v54 = *(_OWORD *)v53;
            a1[2] = *(v8 - 28);
            *(_OWORD *)a1 = v54;
            unsigned int v55 = *(_OWORD *)(v8 - 27);
            a1[5] = *(v8 - 25);
            *(_OWORD *)uint64_t v27 = v55;
            *((_BYTE *)v8 - 193) = 0;
            *((_BYTE *)v8 - 216) = 0;
            unsigned int v56 = *((_OWORD *)v8 - 12);
            *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 180);
            *((_OWORD *)a1 + 3) = v56;
            sub_100087EC8((uint64_t)(a1 + 10), (uint64_t)(v8 - 20));
            unsigned int v57 = *(_OWORD *)(v8 - 3);
            *((_BYTE *)a1 + 232) = *((_BYTE *)v8 - 8);
            *(_OWORD *)(a1 + 27) = v57;
          }

          unsigned int v58 = v242;
          *(v8 - 28) = v243;
          *(_OWORD *)int v53 = v58;
          v59 = (void **)(v8 - 27);
          unsigned int v60 = __p;
          *(v8 - 25) = v245;
          *(_OWORD *)v59 = v60;
          HIBYTE(v245) = 0;
          LOBYTE(__p) = 0;
          v61 = v246[0];
          *(_OWORD *)((char *)v8 - 180) = *(_OWORD *)((char *)v246 + 12);
          *((_OWORD *)v8 - 12) = v61;
          sub_100087EC8((uint64_t)(v8 - 20), (uint64_t)v247);
          int v62 = v248;
          *((_BYTE *)v8 - 8) = v249;
          *(_OWORD *)(v8 - 3) = v62;
          sub_100086708(v247);
          if (SHIBYTE(v245) < 0) {
            operator delete((void *)__p);
          }
          uint64_t v63 = v32 >= (unint64_t *)v34;
          uint64_t v6 = (__int128 *)a2;
          if (!v63) {
            goto LABEL_77;
          }
          uint64_t v64 = sub_1000AC25C(a1, v8 - 30);
          if (!sub_1000AC25C(v8, a2))
          {
            if (v64) {
              continue;
            }
LABEL_77:
            sub_1000AA6D4(a1, v8 - 30, a3, a4 & 1);
LABEL_78:
            a4 = 0;
            continue;
          }

          a2 = v8 - 30;
          if (v64) {
            return;
          }
          goto LABEL_1;
        }

        if ((a4 & 1) == 0)
        {
          v212 = a1 + 30;
          if (a1 + 30 == a2) {
            return;
          }
          for (uint64_t i = a1 - 30; ; i += 30)
          {
            v214 = v212;
            v215 = bswap64(a1[30]);
            v216 = bswap64(*a1);
            if (v215 != v216) {
              break;
            }
            v215 = bswap64(v214[1]);
            v216 = bswap64(a1[1]);
            v217 = a2;
            if (v215 != v216) {
              goto LABEL_279;
            }
LABEL_297:
            v212 = v214 + 30;
            a1 = v214;
            if (v214 + 30 == v217) {
              return;
            }
          }

          v217 = a2;
LABEL_279:
          if (v215 < v216) {
            v218 = -1;
          }
          else {
            v218 = 1;
          }
          if (v218 < 0)
          {
            v219 = *(_OWORD *)v214;
            v243 = v214[2];
            v242 = v219;
            v245 = a1[35];
            __p = *(_OWORD *)(a1 + 33);
            a1[34] = 0LL;
            a1[35] = 0LL;
            a1[33] = 0LL;
            v246[0] = *((_OWORD *)a1 + 18);
            *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)a1 + 300);
            sub_1000865CC(v247);
            v249 = *((_BYTE *)a1 + 472);
            v248 = *(_OWORD *)(a1 + 57);
            v220 = i;
            do
            {
              *((_OWORD *)v220 + 30) = *((_OWORD *)v220 + 15);
              v220[62] = v220[32];
              v221 = (void **)(v220 + 63);
              v220[65] = v220[35];
              *(_OWORD *)v221 = *(_OWORD *)(v220 + 33);
              *((_BYTE *)v220 + 287) = 0;
              *((_BYTE *)v220 + 264) = 0;
              *((_OWORD *)v220 + 33) = *((_OWORD *)v220 + 18);
              *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v220 + 300);
              sub_100087EC8((uint64_t)(v220 + 70), (uint64_t)(v220 + 40));
              *((_BYTE *)v220 + 712) = *((_BYTE *)v220 + 472);
              *(_OWORD *)(v220 + 87) = *(_OWORD *)(v220 + 57);
              v222 = bswap64(v242);
              v223 = bswap64(*v220);
              if (v222 == v223
                && (v222 = bswap64(*((unint64_t *)&v242 + 1)), v223 = bswap64(v220[1]), v222 == v223))
              {
                v224 = 0;
              }

              else if (v222 < v223)
              {
                v224 = -1;
              }

              else
              {
                v224 = 1;
              }

              v220 -= 30;
            }

            while (v224 < 0);
            v225 = v242;
            v220[62] = v243;
            *((_OWORD *)v220 + 30) = v225;
            v226 = (void **)(v220 + 63);
            v227 = __p;
            v220[65] = v245;
            *(_OWORD *)v226 = v227;
            HIBYTE(v245) = 0;
            LOBYTE(__p) = 0;
            v228 = v246[0];
            *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v246 + 12);
            *((_OWORD *)v220 + 33) = v228;
            sub_100087EC8((uint64_t)(v220 + 70), (uint64_t)v247);
            v229 = v248;
            *((_BYTE *)v220 + 712) = v249;
            *(_OWORD *)(v220 + 87) = v229;
            sub_100086708(v247);
            v217 = a2;
            if (SHIBYTE(v245) < 0) {
              operator delete((void *)__p);
            }
          }

          goto LABEL_297;
        }

        if (a1 != (unint64_t *)v6)
        {
          v103 = a1 + 30;
          if (a1 + 30 != a2)
          {
            int v104 = 0LL;
            int v105 = v247;
            int v106 = a1;
            do
            {
              unsigned int v107 = v103;
              int v108 = bswap64(v106[30]);
              int v109 = bswap64(*v106);
              if (v108 != v109 || (int v108 = bswap64(v107[1]), v109 = bswap64(v106[1]), v108 != v109))
              {
                v110 = v108 < v109 ? -1 : 1;
                if (v110 < 0)
                {
                  unsigned int v111 = *(_OWORD *)v107;
                  v243 = v107[2];
                  v242 = v111;
                  v245 = v106[35];
                  __p = *(_OWORD *)(v106 + 33);
                  v106[34] = 0LL;
                  v106[35] = 0LL;
                  v106[33] = 0LL;
                  v246[0] = *((_OWORD *)v106 + 18);
                  *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v106 + 300);
                  v112 = (uint64_t)v105;
                  sub_1000865CC(v105);
                  v249 = *((_BYTE *)v106 + 472);
                  v248 = *(_OWORD *)(v106 + 57);
                  unsigned int v113 = v104;
                  while (1)
                  {
                    v114 = (char *)a1 + v113;
                    *((_OWORD *)v114 + 15) = *(_OWORD *)((char *)a1 + v113);
                    *((void *)v114 + 32) = *(unint64_t *)((char *)a1 + v113 + 16);
                    int v115 = (void **)((char *)a1 + v113 + 264);
                    *(_OWORD *)int v115 = *(_OWORD *)(v114 + 24);
                    *(unint64_t *)((char *)a1 + v113 + 280) = *((void *)v114 + 5);
                    v114[47] = 0;
                    v114[24] = 0;
                    *((_OWORD *)v114 + 18) = *((_OWORD *)v114 + 3);
                    *(_OWORD *)(v114 + 300) = *(_OWORD *)(v114 + 60);
                    sub_100087EC8((uint64_t)(v114 + 320), (uint64_t)(v114 + 80));
                    unsigned int v116 = (char *)a1 + v113;
                    *(_OWORD *)((char *)a1 + v113 + 456) = *(_OWORD *)((char *)a1 + v113 + 216);
                    *((_BYTE *)a1 + v113 + 472) = *((_BYTE *)a1 + v113 + 232);
                    if (!v113) {
                      break;
                    }
                    int v117 = bswap64(v242);
                    uint64_t v118 = bswap64(*((void *)v116 - 30));
                    if (v117 == v118
                      && (int v117 = bswap64(*((unint64_t *)&v242 + 1)),
                          uint64_t v118 = bswap64(*((void *)v116 - 29)),
                          v117 == v118))
                    {
                      v119 = 0;
                    }

                    else if (v117 < v118)
                    {
                      v119 = -1;
                    }

                    else
                    {
                      v119 = 1;
                    }

                    v113 -= 240LL;
                    if ((v119 & 0x80000000) == 0)
                    {
                      v120 = (uint64_t)a1 + v113 + 240;
                      goto LABEL_168;
                    }
                  }

                  v120 = (uint64_t)a1;
LABEL_168:
                  v121 = v242;
                  *(void *)(v120 + 16) = v243;
                  *(_OWORD *)v120 = v121;
                  v122 = (void **)(v116 + 24);
                  v123 = __p;
                  *((void *)v116 + 5) = v245;
                  *(_OWORD *)v122 = v123;
                  HIBYTE(v245) = 0;
                  LOBYTE(__p) = 0;
                  v124 = v246[0];
                  *(_OWORD *)(v116 + 60) = *(_OWORD *)((char *)v246 + 12);
                  *((_OWORD *)v116 + 3) = v124;
                  int v105 = (_BYTE *)v112;
                  sub_100087EC8((uint64_t)(v116 + 80), v112);
                  v125 = v248;
                  v116[232] = v249;
                  *(_OWORD *)(v116 + 216) = v125;
                  sub_100086708(v112);
                  if (SHIBYTE(v245) < 0) {
                    operator delete((void *)__p);
                  }
                }
              }

              v103 = v107 + 30;
              v104 += 240LL;
              int v106 = v107;
            }

            while (v107 + 30 != a2);
          }
        }

        return;
    }
  }

          uint64_t v8 = v32;
          if (v32 < (unint64_t *)v34)
          {
            unsigned int v42 = v34;
            do
            {
              sub_1000AA070((__int128 *)v8, v42);
              unint64_t v43 = v8;
              do
              {
                char v44 = v8[30];
                v8 += 30;
                unint64_t v45 = bswap64(v44);
                uint64_t v46 = bswap64(v242);
                if (v45 == v46 && (unint64_t v45 = bswap64(v43[31]), v46 = bswap64(*((unint64_t *)&v242 + 1)), v45 == v46))
                {
                  unsigned int v47 = 0;
                }

                else if (v45 < v46)
                {
                  unsigned int v47 = -1;
                }

                else
                {
                  unsigned int v47 = 1;
                }

                unint64_t v43 = v8;
              }

              while (v47 < 0);
              int v48 = v42;
              do
              {
                int v49 = *((void *)v42 - 30);
                v42 -= 15;
                int v50 = bswap64(v49);
                unsigned int v51 = bswap64(v242);
                if (v50 == v51
                  && (int v50 = bswap64(*((void *)v48 - 29)), v51 = bswap64(*((unint64_t *)&v242 + 1)), v50 == v51))
                {
                  int v52 = 0;
                }

                else if (v50 < v51)
                {
                  int v52 = -1;
                }

                else
                {
                  int v52 = 1;
                }

                int v48 = v42;
              }

              while ((v52 & 0x80000000) == 0);
            }

            while (v8 < (unint64_t *)v42);
          }

          int v53 = v8 - 30;
          if (v8 - 30 != a1)
          {
            int v54 = *(_OWORD *)v53;
            a1[2] = *(v8 - 28);
            *(_OWORD *)a1 = v54;
            unsigned int v55 = *(_OWORD *)(v8 - 27);
            a1[5] = *(v8 - 25);
            *(_OWORD *)uint64_t v27 = v55;
            *((_BYTE *)v8 - 193) = 0;
            *((_BYTE *)v8 - 216) = 0;
            unsigned int v56 = *((_OWORD *)v8 - 12);
            *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 180);
            *((_OWORD *)a1 + 3) = v56;
            sub_100087EC8((uint64_t)(a1 + 10), (uint64_t)(v8 - 20));
            unsigned int v57 = *(_OWORD *)(v8 - 3);
            *((_BYTE *)a1 + 232) = *((_BYTE *)v8 - 8);
            *(_OWORD *)(a1 + 27) = v57;
          }

          unsigned int v58 = v242;
          *(v8 - 28) = v243;
          *(_OWORD *)int v53 = v58;
          v59 = (void **)(v8 - 27);
          unsigned int v60 = __p;
          *(v8 - 25) = v245;
          *(_OWORD *)v59 = v60;
          HIBYTE(v245) = 0;
          LOBYTE(__p) = 0;
          v61 = v246[0];
          *(_OWORD *)((char *)v8 - 180) = *(_OWORD *)((char *)v246 + 12);
          *((_OWORD *)v8 - 12) = v61;
          sub_100087EC8((uint64_t)(v8 - 20), (uint64_t)v247);
          int v62 = v248;
          *((_BYTE *)v8 - 8) = v249;
          *(_OWORD *)(v8 - 3) = v62;
          sub_100086708(v247);
          if (SHIBYTE(v245) < 0) {
            operator delete((void *)__p);
          }
          uint64_t v63 = v32 >= (unint64_t *)v34;
          uint64_t v6 = (__int128 *)a2;
          if (!v63) {
            goto LABEL_77;
          }
          uint64_t v64 = sub_1000AEC0C(a1, v8 - 30);
          if (!sub_1000AEC0C(v8, a2))
          {
            if (v64) {
              continue;
            }
LABEL_77:
            sub_1000AD3C4(a1, v8 - 30, a3, a4 & 1);
LABEL_78:
            a4 = 0;
            continue;
          }

          a2 = v8 - 30;
          if (v64) {
            return;
          }
          goto LABEL_1;
        }

        if ((a4 & 1) == 0)
        {
          v212 = a1 + 30;
          if (a1 + 30 == a2) {
            return;
          }
          for (uint64_t i = a1 - 30; ; i += 30)
          {
            v214 = v212;
            v215 = bswap64(a1[30]);
            v216 = bswap64(*a1);
            if (v215 != v216) {
              break;
            }
            v215 = bswap64(v214[1]);
            v216 = bswap64(a1[1]);
            v217 = a2;
            if (v215 != v216) {
              goto LABEL_279;
            }
LABEL_297:
            v212 = v214 + 30;
            a1 = v214;
            if (v214 + 30 == v217) {
              return;
            }
          }

          v217 = a2;
LABEL_279:
          if (v215 < v216) {
            v218 = -1;
          }
          else {
            v218 = 1;
          }
          if (v218 < 0)
          {
            v219 = *(_OWORD *)v214;
            v243 = v214[2];
            v242 = v219;
            v245 = a1[35];
            __p = *(_OWORD *)(a1 + 33);
            a1[34] = 0LL;
            a1[35] = 0LL;
            a1[33] = 0LL;
            v246[0] = *((_OWORD *)a1 + 18);
            *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)a1 + 300);
            sub_1000865CC(v247);
            v249 = *((_BYTE *)a1 + 472);
            v248 = *(_OWORD *)(a1 + 57);
            v220 = i;
            do
            {
              *((_OWORD *)v220 + 30) = *((_OWORD *)v220 + 15);
              v220[62] = v220[32];
              v221 = (void **)(v220 + 63);
              v220[65] = v220[35];
              *(_OWORD *)v221 = *(_OWORD *)(v220 + 33);
              *((_BYTE *)v220 + 287) = 0;
              *((_BYTE *)v220 + 264) = 0;
              *((_OWORD *)v220 + 33) = *((_OWORD *)v220 + 18);
              *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v220 + 300);
              sub_100087EC8((uint64_t)(v220 + 70), (uint64_t)(v220 + 40));
              *((_BYTE *)v220 + 712) = *((_BYTE *)v220 + 472);
              *(_OWORD *)(v220 + 87) = *(_OWORD *)(v220 + 57);
              v222 = bswap64(v242);
              v223 = bswap64(*v220);
              if (v222 == v223
                && (v222 = bswap64(*((unint64_t *)&v242 + 1)), v223 = bswap64(v220[1]), v222 == v223))
              {
                v224 = 0;
              }

              else if (v222 < v223)
              {
                v224 = -1;
              }

              else
              {
                v224 = 1;
              }

              v220 -= 30;
            }

            while (v224 < 0);
            v225 = v242;
            v220[62] = v243;
            *((_OWORD *)v220 + 30) = v225;
            v226 = (void **)(v220 + 63);
            v227 = __p;
            v220[65] = v245;
            *(_OWORD *)v226 = v227;
            HIBYTE(v245) = 0;
            LOBYTE(__p) = 0;
            v228 = v246[0];
            *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v246 + 12);
            *((_OWORD *)v220 + 33) = v228;
            sub_100087EC8((uint64_t)(v220 + 70), (uint64_t)v247);
            v229 = v248;
            *((_BYTE *)v220 + 712) = v249;
            *(_OWORD *)(v220 + 87) = v229;
            sub_100086708(v247);
            v217 = a2;
            if (SHIBYTE(v245) < 0) {
              operator delete((void *)__p);
            }
          }

          goto LABEL_297;
        }

        if (a1 != (unint64_t *)v6)
        {
          v103 = a1 + 30;
          if (a1 + 30 != a2)
          {
            int v104 = 0LL;
            int v105 = v247;
            int v106 = a1;
            do
            {
              unsigned int v107 = v103;
              int v108 = bswap64(v106[30]);
              int v109 = bswap64(*v106);
              if (v108 != v109 || (int v108 = bswap64(v107[1]), v109 = bswap64(v106[1]), v108 != v109))
              {
                v110 = v108 < v109 ? -1 : 1;
                if (v110 < 0)
                {
                  unsigned int v111 = *(_OWORD *)v107;
                  v243 = v107[2];
                  v242 = v111;
                  v245 = v106[35];
                  __p = *(_OWORD *)(v106 + 33);
                  v106[34] = 0LL;
                  v106[35] = 0LL;
                  v106[33] = 0LL;
                  v246[0] = *((_OWORD *)v106 + 18);
                  *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v106 + 300);
                  v112 = (uint64_t)v105;
                  sub_1000865CC(v105);
                  v249 = *((_BYTE *)v106 + 472);
                  v248 = *(_OWORD *)(v106 + 57);
                  unsigned int v113 = v104;
                  while (1)
                  {
                    v114 = (char *)a1 + v113;
                    *((_OWORD *)v114 + 15) = *(_OWORD *)((char *)a1 + v113);
                    *((void *)v114 + 32) = *(unint64_t *)((char *)a1 + v113 + 16);
                    int v115 = (void **)((char *)a1 + v113 + 264);
                    *(_OWORD *)int v115 = *(_OWORD *)(v114 + 24);
                    *(unint64_t *)((char *)a1 + v113 + 280) = *((void *)v114 + 5);
                    v114[47] = 0;
                    v114[24] = 0;
                    *((_OWORD *)v114 + 18) = *((_OWORD *)v114 + 3);
                    *(_OWORD *)(v114 + 300) = *(_OWORD *)(v114 + 60);
                    sub_100087EC8((uint64_t)(v114 + 320), (uint64_t)(v114 + 80));
                    unsigned int v116 = (char *)a1 + v113;
                    *(_OWORD *)((char *)a1 + v113 + 456) = *(_OWORD *)((char *)a1 + v113 + 216);
                    *((_BYTE *)a1 + v113 + 472) = *((_BYTE *)a1 + v113 + 232);
                    if (!v113) {
                      break;
                    }
                    int v117 = bswap64(v242);
                    uint64_t v118 = bswap64(*((void *)v116 - 30));
                    if (v117 == v118
                      && (int v117 = bswap64(*((unint64_t *)&v242 + 1)),
                          uint64_t v118 = bswap64(*((void *)v116 - 29)),
                          v117 == v118))
                    {
                      v119 = 0;
                    }

                    else if (v117 < v118)
                    {
                      v119 = -1;
                    }

                    else
                    {
                      v119 = 1;
                    }

                    v113 -= 240LL;
                    if ((v119 & 0x80000000) == 0)
                    {
                      v120 = (uint64_t)a1 + v113 + 240;
                      goto LABEL_168;
                    }
                  }

                  v120 = (uint64_t)a1;
LABEL_168:
                  v121 = v242;
                  *(void *)(v120 + 16) = v243;
                  *(_OWORD *)v120 = v121;
                  v122 = (void **)(v116 + 24);
                  v123 = __p;
                  *((void *)v116 + 5) = v245;
                  *(_OWORD *)v122 = v123;
                  HIBYTE(v245) = 0;
                  LOBYTE(__p) = 0;
                  v124 = v246[0];
                  *(_OWORD *)(v116 + 60) = *(_OWORD *)((char *)v246 + 12);
                  *((_OWORD *)v116 + 3) = v124;
                  int v105 = (_BYTE *)v112;
                  sub_100087EC8((uint64_t)(v116 + 80), v112);
                  v125 = v248;
                  v116[232] = v249;
                  *(_OWORD *)(v116 + 216) = v125;
                  sub_100086708(v112);
                  if (SHIBYTE(v245) < 0) {
                    operator delete((void *)__p);
                  }
                }
              }

              v103 = v107 + 30;
              v104 += 240LL;
              int v106 = v107;
            }

            while (v107 + 30 != a2);
          }
        }

        return;
    }
  }

  uint64_t result = *(double *)(a2 + 88);
  *(_DWORD *)(a1 + 160) |= 0x1000u;
  *(double *)(a1 + 88) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x2000) == 0)
  {
LABEL_20:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  (int)a2,  *(double *)(v5 + 80),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 136);
      if ((v19 & 0x80000000) != 0)
      {
        int v20 = 11;
      }

      else if (v19 >= 0x80)
      {
        int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
        uint64_t v3 = *(_DWORD *)(a1 + 228);
      }

      else
      {
        int v20 = 2;
      }

      LODWORD(sub_1012279C0(0LL, v4, v5) = v20 + v5;
    }

    int v21 = v5 + 10;
    if ((v3 & 0x200) == 0) {
      int v21 = v5;
    }
    if ((v3 & 0x400) != 0) {
      v21 += 10;
    }
    if ((v3 & 0x800) != 0) {
      v21 += 10;
    }
    if ((v3 & 0x1000) != 0) {
      v21 += 10;
    }
    if ((v3 & 0x2000) != 0) {
      v21 += 10;
    }
    if ((v3 & 0x4000) != 0) {
      v21 += 10;
    }
    if ((v3 & 0x8000) != 0) {
      uint64_t v5 = v21 + 10;
    }
    else {
      uint64_t v5 = v21;
    }
  }

  if ((v3 & 0xFF0000) != 0)
  {
    unsigned int v22 = v5 + 10;
    if ((v3 & 0x10000) == 0) {
      unsigned int v22 = v5;
    }
    if ((v3 & 0x20000) != 0) {
      v22 += 10;
    }
    if ((v3 & 0x40000) != 0) {
      v22 += 10;
    }
    if ((v3 & 0x80000) != 0) {
      v22 += 10;
    }
    if ((v3 & 0x100000) != 0) {
      v22 += 10;
    }
    if ((v3 & 0x200000) != 0) {
      v22 += 10;
    }
    if ((v3 & 0x400000) != 0) {
      v22 += 10;
    }
    if ((v3 & 0x800000) != 0) {
      uint64_t v5 = v22 + 10;
    }
    else {
      uint64_t v5 = v22;
    }
  }

  if (HIBYTE(v3))
  {
    int v23 = v5 + 10;
    if ((v3 & 0x1000000) == 0) {
      int v23 = v5;
    }
    if ((v3 & 0x2000000) != 0) {
      v23 += 10;
    }
    if ((v3 & 0x4000000) != 0) {
      v23 += 10;
    }
    if ((v3 & 0x8000000) != 0) {
      v23 += 10;
    }
    if ((v3 & 0x10000000) != 0) {
      uint64_t v5 = v23 + 10;
    }
    else {
      uint64_t v5 = v23;
    }
    if ((v3 & 0x20000000) != 0)
    {
      BOOL v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 140);
      if ((v24 & 0x80000000) != 0)
      {
        int v25 = 12;
      }

      else if (v24 >= 0x80)
      {
        int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 2;
      }

      else
      {
        int v25 = 3;
      }

      uint64_t v5 = (v25 + v5);
    }
  }

  *(_DWORD *)(a1 + 224) = v5;
  return v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  *(_DWORD *)(v5 + 128),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  int v20 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 148) |= 0x800u;
  *(_DWORD *)(a1 + 76) = v20;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(unsigned __int8 *)(v5 + 97),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }

    if (v22 >> 3 == 1)
    {
      uint64_t v34 = 2048LL;
    }

    else
    {
      if (v22 >> 3 != 2)
      {
LABEL_57:
        *(_BYTE *)(a1 + 168) = 0;
        return;
      }

      uint64_t v34 = 4096LL;
    }

    *(void *)(a1 + 136) = v34;
    goto LABEL_57;
  }

  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018314C0);
  }
  unint64_t v35 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v36 = *(void *)(a1 + 144);
    *(_DWORD *)buf = 134349056;
    *(void *)&buf[4] = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "Accumulated %{public}zu bytes for onstart packet",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018314C0);
    }
    unsigned int v42 = *(void *)(a1 + 144);
    *(_DWORD *)__str = 134349056;
    *(void *)unsigned int v51 = v42;
    LODWORD(v47) = 12;
    unint64_t v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Accumulated %{public}zu bytes for onstart packet",  __str,  v47);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)",  "%s\n",  v43);
    if (v43 != buf) {
      free(v43);
    }
  }

  *(_BYTE *)(a1 + 168) = v6;
}

  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A11B8 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[11],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  int v21 = *(_DWORD *)(a1 + 32);
  unsigned int v22 = (v21 + v4);
  if (v21 >= 1)
  {
    int v23 = 0LL;
    do
    {
      BOOL v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006434D0( *(unsigned int **)(*(void *)(a1 + 24)
                                                                                                + 8 * v23),
                                                                               a2);
      int v25 = (int)v24;
      else {
        unint64_t v26 = 1;
      }
      unsigned int v22 = (v25 + v22 + v26);
      ++v23;
    }

    while (v23 < *(int *)(a1 + 32));
  }

  *(_DWORD *)(a1 + 64) = v22;
  return v22;
}

  if ((v3 & 0x40) != 0) {
    uint64_t result = v4 + 2;
  }
  else {
    uint64_t result = v4;
  }
LABEL_49:
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

  char v44 = *(double *)(a1 + 720);
  unint64_t v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176LL))(*(void *)(a1 + 8));
  uint64_t v46 = vabdd_f64(v8, v44);
  unsigned int v47 = 2.56;
  if (v45) {
    unsigned int v47 = 1.0;
  }
  if (v46 > v47) {
    goto LABEL_49;
  }
LABEL_56:
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176LL))(*(void *)(a1 + 8)) & 1) == 0)
  {
    *(void *)&v111[2] = 0LL;
    *(void *)v112 = 0x3F80000000000000LL;
    sub_1006AADE0((unsigned __int16 *)(a1 + 736), (uint64_t)buf);
    sub_10020FB80(*(void *)(a1 + 8), *(double *)&v114[8], *(double *)v114);
  }

  return v43;
}

  *(_DWORD *)(a1 + 52) = v5;
  return v5;
}

  int v32 = (double ****)v45;
  unint64_t v31 = v46;
  if (a3 <= 0x63 && ((char *)v46 - (_BYTE *)v45) >> 3 >= a4)
  {
    unint64_t v33 = sub_100856A40(v51, (uint64_t **)&v45, a3 + 1, a4, a5, a6, a7, a8);
    goto LABEL_69;
  }

  if (v45 != v46)
  {
    while (1)
    {
      uint64_t v34 = v32++;
      if (v32 != v31) {
        break;
      }
LABEL_66:
      unint64_t v33 = 1LL;
      if (v32 == v31) {
        goto LABEL_69;
      }
    }

    unint64_t v31 = v32;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        unint64_t v35 = **v34;
        unsigned int v36 = **v31;
        int v37 = *(unsigned __int8 **)(a5 + 8);
        strcpy(v56.i8, "FFFFFFFFF");
        sub_100858868(v35, v36, (unsigned __int8 *)&v56, v37);
        if (!v56.i8[9])
        {
          unint64_t v38 = v56.u8[0] != 84 && v56.u8[0] - 48 >= 0xA;
          if (!v38
            || v56.u8[1] == 84
            || v56.u8[1] - 48 <= 9
            || v56.u8[3] == 84
            || v56.u8[3] - 48 < 0xA)
          {
            break;
          }
        }
      }

      if (++v31 == v46) {
        goto LABEL_66;
      }
    }

  unint64_t v33 = (double ****)v46;
  int v32 = v47;
  if (a3 <= 0x63 && ((char *)v47 - (_BYTE *)v46) >> 3 >= a4)
  {
    uint64_t v34 = sub_100855B64(v52, &v46, a3 + 1, a4, a5, a6, a7, a8);
    goto LABEL_69;
  }

  if (v46 != v47)
  {
    while (1)
    {
      unint64_t v35 = v33++;
      if (v33 != v32) {
        break;
      }
LABEL_66:
      uint64_t v34 = 1LL;
      if (v33 == v32) {
        goto LABEL_69;
      }
    }

    int v32 = v33;
    while (1)
    {
      if (!*(_BYTE *)a5)
      {
        unsigned int v36 = **v35;
        int v37 = **v32;
        unint64_t v38 = *(unsigned __int8 **)(a5 + 8);
        strcpy(v57.i8, "FFFFFFFFF");
        sub_100858868(v36, v37, (unsigned __int8 *)&v57, v38);
        if (!v57.i8[9])
        {
          int v39 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
          if (!v39
            || v57.u8[1] == 84
            || v57.u8[1] - 48 <= 9
            || v57.u8[3] == 84
            || v57.u8[3] - 48 < 0xA)
          {
            break;
          }
        }
      }

      if (++v32 == v47) {
        goto LABEL_66;
      }
    }

  if (v21 < (unint64_t)a2)
  {
    int v37 = (unint64_t)a1 + v5 + 200;
    unint64_t v38 = (unint64_t)a2;
    do
    {
      v112 = *(_OWORD *)v37;
      int v39 = *(_OWORD *)(v37 + 16);
      int v40 = *(_OWORD *)(v37 + 32);
      unint64_t v41 = *(_OWORD *)(v37 + 64);
      int v115 = *(_OWORD *)(v37 + 48);
      unsigned int v116 = v41;
      unsigned int v113 = v39;
      v114 = v40;
      unsigned int v42 = *(_OWORD *)(v37 + 80);
      unint64_t v43 = *(_OWORD *)(v37 + 96);
      char v44 = *(_OWORD *)(v37 + 128);
      v119 = *(_OWORD *)(v37 + 112);
      v120 = v44;
      int v117 = v42;
      uint64_t v118 = v43;
      unint64_t v45 = *(_OWORD *)(v37 + 144);
      uint64_t v46 = *(_OWORD *)(v37 + 160);
      unsigned int v47 = *(_OWORD *)(v37 + 176);
      v124 = *(void *)(v37 + 192);
      v122 = v46;
      v123 = v47;
      v121 = v45;
      *(_OWORD *)int v37 = *(_OWORD *)v38;
      int v48 = *(_OWORD *)(v38 + 16);
      int v49 = *(_OWORD *)(v38 + 32);
      int v50 = *(_OWORD *)(v38 + 64);
      *(_OWORD *)(v37 + 48) = *(_OWORD *)(v38 + 48);
      *(_OWORD *)(v37 + 64) = v50;
      *(_OWORD *)(v37 + 16) = v48;
      *(_OWORD *)(v37 + 32) = v49;
      unsigned int v51 = *(_OWORD *)(v38 + 80);
      int v52 = *(_OWORD *)(v38 + 96);
      int v53 = *(_OWORD *)(v38 + 128);
      *(_OWORD *)(v37 + 112) = *(_OWORD *)(v38 + 112);
      *(_OWORD *)(v37 + 128) = v53;
      *(_OWORD *)(v37 + 80) = v51;
      *(_OWORD *)(v37 + 96) = v52;
      int v54 = *(_OWORD *)(v38 + 144);
      unsigned int v55 = *(_OWORD *)(v38 + 160);
      unsigned int v56 = *(_OWORD *)(v38 + 176);
      *(void *)(v37 + 192) = *(void *)(v38 + 192);
      *(_OWORD *)(v37 + 160) = v55;
      *(_OWORD *)(v37 + 176) = v56;
      *(_OWORD *)(v37 + 144) = v54;
      *(_OWORD *)unint64_t v38 = v112;
      unsigned int v57 = v113;
      unsigned int v58 = v114;
      v59 = v116;
      *(_OWORD *)(v38 + 48) = v115;
      *(_OWORD *)(v38 + 64) = v59;
      *(_OWORD *)(v38 + 16) = v57;
      *(_OWORD *)(v38 + 32) = v58;
      unsigned int v60 = v117;
      v61 = v118;
      int v62 = v120;
      *(_OWORD *)(v38 + 112) = v119;
      *(_OWORD *)(v38 + 128) = v62;
      *(_OWORD *)(v38 + 80) = v60;
      *(_OWORD *)(v38 + 96) = v61;
      uint64_t v63 = v121;
      uint64_t v64 = v122;
      unsigned int v65 = v123;
      *(void *)(v38 + 192) = v124;
      *(_OWORD *)(v38 + 160) = v64;
      *(_OWORD *)(v38 + 176) = v65;
      *(_OWORD *)(v38 + 144) = v63;
      do
      {
        while (1)
        {
          v37 += 200LL;
          uint64_t v66 = *(void *)(v37 + 48);
          if (v66 == (void)v102) {
            break;
          }
        }

        uint64_t v67 = *(void *)(v37 + 56);
        int v69 = __OFSUB__(v67, *((void *)&v102 + 1));
        v68 = v67 - *((void *)&v102 + 1) < 0;
        if (v67 == *((void *)&v102 + 1))
        {
          int v70 = *(void *)(v37 + 64);
          int v69 = __OFSUB__(v70, (void)v103);
          v68 = v70 - (uint64_t)v103 < 0;
          if (v70 == (void)v103)
          {
            int v71 = *(void *)(v37 + 80);
            int v69 = __OFSUB__(v71, (void)v104);
            v68 = v71 - (uint64_t)v104 < 0;
            if (v71 == (void)v104)
            {
              unsigned int v72 = *(void *)(v37 + 72);
              int v69 = __OFSUB__(v72, *((void *)&v103 + 1));
              v68 = v72 - *((void *)&v103 + 1) < 0;
            }
          }
        }
      }

      while (v68 != v69
           || *(_OWORD *)(v37 + 64) == v103
           && *(void *)(v37 + 80) == (void)v104
           && v67 == *((void *)&v102 + 1)
           && sub_10085DFAC(v37, (uint64_t)&v99, a3));
      do
      {
LABEL_63:
        while (1)
        {
          v38 -= 200LL;
          int v73 = *(void *)(v38 + 48);
          if (v73 == (void)v102) {
            break;
          }
        }

        int v74 = *(void *)(v38 + 56);
        int v76 = __OFSUB__(v74, *((void *)&v102 + 1));
        int v75 = v74 - *((void *)&v102 + 1) < 0;
        if (v74 == *((void *)&v102 + 1))
        {
          uint64_t v77 = *(void *)(v38 + 64);
          int v76 = __OFSUB__(v77, (void)v103);
          int v75 = v77 - (uint64_t)v103 < 0;
          if (v77 == (void)v103)
          {
            uint64_t v78 = *(void *)(v38 + 80);
            int v76 = __OFSUB__(v78, (void)v104);
            int v75 = v78 - (uint64_t)v104 < 0;
            if (v78 == (void)v104)
            {
              v79 = *(void *)(v38 + 72);
              int v76 = __OFSUB__(v79, *((void *)&v103 + 1));
              int v75 = v79 - *((void *)&v103 + 1) < 0;
            }
          }
        }
      }

      while (v75 == v76
           && (*(_OWORD *)(v38 + 64) != v103
            || v74 != *((void *)&v102 + 1)
            || *(void *)(v38 + 80) != (void)v104
            || !sub_10085DFAC(v38, (uint64_t)&v99, a3)));
LABEL_73:
      ;
    }

    while (v37 < v38);
    int v20 = v37 - 200;
  }

  if ((__int128 *)v20 != a1)
  {
    *a1 = *(_OWORD *)v20;
    uint64_t v80 = *(_OWORD *)(v20 + 16);
    uint64_t v81 = *(_OWORD *)(v20 + 32);
    v82 = *(_OWORD *)(v20 + 64);
    a1[3] = *(_OWORD *)(v20 + 48);
    a1[4] = v82;
    a1[1] = v80;
    a1[2] = v81;
    int v83 = *(_OWORD *)(v20 + 80);
    int v84 = *(_OWORD *)(v20 + 96);
    int v85 = *(_OWORD *)(v20 + 128);
    a1[7] = *(_OWORD *)(v20 + 112);
    a1[8] = v85;
    a1[5] = v83;
    a1[6] = v84;
    unsigned int v86 = *(_OWORD *)(v20 + 144);
    int v87 = *(_OWORD *)(v20 + 160);
    int v88 = *(_OWORD *)(v20 + 176);
    *((void *)a1 + 24) = *(void *)(v20 + 192);
    a1[10] = v87;
    a1[11] = v88;
    a1[9] = v86;
  }

  *(_OWORD *)int v20 = v99;
  int v89 = v100;
  unsigned int v90 = v101;
  v91 = v103;
  *(_OWORD *)(v20 + 48) = v102;
  *(_OWORD *)(v20 + 64) = v91;
  *(_OWORD *)(v20 + 16) = v89;
  *(_OWORD *)(v20 + 32) = v90;
  v92 = v104;
  v93 = v105;
  int v94 = v107;
  *(_OWORD *)(v20 + 112) = v106;
  *(_OWORD *)(v20 + 128) = v94;
  *(_OWORD *)(v20 + 80) = v92;
  *(_OWORD *)(v20 + 96) = v93;
  int v95 = v108;
  int v96 = v109;
  unsigned int v97 = v110;
  *(void *)(v20 + 192) = v111;
  *(_OWORD *)(v20 + 160) = v96;
  *(_OWORD *)(v20 + 176) = v97;
  *(_OWORD *)(v20 + 144) = v95;
  return v20;
}

  if (v21 < (unint64_t)a2)
  {
    int v37 = (unint64_t)a1 + v5 + 200;
    unint64_t v38 = (unint64_t)a2;
    do
    {
      v112 = *(_OWORD *)v37;
      int v39 = *(_OWORD *)(v37 + 16);
      int v40 = *(_OWORD *)(v37 + 32);
      unint64_t v41 = *(_OWORD *)(v37 + 64);
      int v115 = *(_OWORD *)(v37 + 48);
      unsigned int v116 = v41;
      unsigned int v113 = v39;
      v114 = v40;
      unsigned int v42 = *(_OWORD *)(v37 + 80);
      unint64_t v43 = *(_OWORD *)(v37 + 96);
      char v44 = *(_OWORD *)(v37 + 128);
      v119 = *(_OWORD *)(v37 + 112);
      v120 = v44;
      int v117 = v42;
      uint64_t v118 = v43;
      unint64_t v45 = *(_OWORD *)(v37 + 144);
      uint64_t v46 = *(_OWORD *)(v37 + 160);
      unsigned int v47 = *(_OWORD *)(v37 + 176);
      v124 = *(void *)(v37 + 192);
      v122 = v46;
      v123 = v47;
      v121 = v45;
      *(_OWORD *)int v37 = *(_OWORD *)v38;
      int v48 = *(_OWORD *)(v38 + 16);
      int v49 = *(_OWORD *)(v38 + 32);
      int v50 = *(_OWORD *)(v38 + 64);
      *(_OWORD *)(v37 + 48) = *(_OWORD *)(v38 + 48);
      *(_OWORD *)(v37 + 64) = v50;
      *(_OWORD *)(v37 + 16) = v48;
      *(_OWORD *)(v37 + 32) = v49;
      unsigned int v51 = *(_OWORD *)(v38 + 80);
      int v52 = *(_OWORD *)(v38 + 96);
      int v53 = *(_OWORD *)(v38 + 128);
      *(_OWORD *)(v37 + 112) = *(_OWORD *)(v38 + 112);
      *(_OWORD *)(v37 + 128) = v53;
      *(_OWORD *)(v37 + 80) = v51;
      *(_OWORD *)(v37 + 96) = v52;
      int v54 = *(_OWORD *)(v38 + 144);
      unsigned int v55 = *(_OWORD *)(v38 + 160);
      unsigned int v56 = *(_OWORD *)(v38 + 176);
      *(void *)(v37 + 192) = *(void *)(v38 + 192);
      *(_OWORD *)(v37 + 160) = v55;
      *(_OWORD *)(v37 + 176) = v56;
      *(_OWORD *)(v37 + 144) = v54;
      *(_OWORD *)unint64_t v38 = v112;
      unsigned int v57 = v113;
      unsigned int v58 = v114;
      v59 = v116;
      *(_OWORD *)(v38 + 48) = v115;
      *(_OWORD *)(v38 + 64) = v59;
      *(_OWORD *)(v38 + 16) = v57;
      *(_OWORD *)(v38 + 32) = v58;
      unsigned int v60 = v117;
      v61 = v118;
      int v62 = v120;
      *(_OWORD *)(v38 + 112) = v119;
      *(_OWORD *)(v38 + 128) = v62;
      *(_OWORD *)(v38 + 80) = v60;
      *(_OWORD *)(v38 + 96) = v61;
      uint64_t v63 = v121;
      uint64_t v64 = v122;
      unsigned int v65 = v123;
      *(void *)(v38 + 192) = v124;
      *(_OWORD *)(v38 + 160) = v64;
      *(_OWORD *)(v38 + 176) = v65;
      *(_OWORD *)(v38 + 144) = v63;
      do
      {
        while (1)
        {
          v37 += 200LL;
          uint64_t v66 = *(void *)(v37 + 128);
          if (v66 == (void)v107) {
            break;
          }
        }

        uint64_t v67 = *(void *)(v37 + 136);
        int v69 = __OFSUB__(v67, *((void *)&v107 + 1));
        v68 = v67 - *((void *)&v107 + 1) < 0;
        if (v67 == *((void *)&v107 + 1))
        {
          int v70 = *(void *)(v37 + 144);
          int v69 = __OFSUB__(v70, (void)v108);
          v68 = v70 - (uint64_t)v108 < 0;
          if (v70 == (void)v108)
          {
            int v71 = *(void *)(v37 + 160);
            int v69 = __OFSUB__(v71, (void)v109);
            v68 = v71 - (uint64_t)v109 < 0;
            if (v71 == (void)v109)
            {
              unsigned int v72 = *(void *)(v37 + 152);
              int v69 = __OFSUB__(v72, *((void *)&v108 + 1));
              v68 = v72 - *((void *)&v108 + 1) < 0;
            }
          }
        }
      }

      while (v68 != v69
           || *(_OWORD *)(v37 + 144) == v108
           && *(void *)(v37 + 160) == (void)v109
           && v67 == *((void *)&v107 + 1)
           && sub_100862154(v37, (uint64_t)&v99, a3));
      do
      {
LABEL_63:
        while (1)
        {
          v38 -= 200LL;
          int v73 = *(void *)(v38 + 128);
          if (v73 == (void)v107) {
            break;
          }
        }

        int v74 = *(void *)(v38 + 136);
        int v76 = __OFSUB__(v74, *((void *)&v107 + 1));
        int v75 = v74 - *((void *)&v107 + 1) < 0;
        if (v74 == *((void *)&v107 + 1))
        {
          uint64_t v77 = *(void *)(v38 + 144);
          int v76 = __OFSUB__(v77, (void)v108);
          int v75 = v77 - (uint64_t)v108 < 0;
          if (v77 == (void)v108)
          {
            uint64_t v78 = *(void *)(v38 + 160);
            int v76 = __OFSUB__(v78, (void)v109);
            int v75 = v78 - (uint64_t)v109 < 0;
            if (v78 == (void)v109)
            {
              v79 = *(void *)(v38 + 152);
              int v76 = __OFSUB__(v79, *((void *)&v108 + 1));
              int v75 = v79 - *((void *)&v108 + 1) < 0;
            }
          }
        }
      }

      while (v75 == v76
           && (*(_OWORD *)(v38 + 144) != v108
            || v74 != *((void *)&v107 + 1)
            || *(void *)(v38 + 160) != (void)v109
            || !sub_100862154(v38, (uint64_t)&v99, a3)));
LABEL_73:
      ;
    }

    while (v37 < v38);
    int v20 = v37 - 200;
  }

  if ((__int128 *)v20 != a1)
  {
    *a1 = *(_OWORD *)v20;
    uint64_t v80 = *(_OWORD *)(v20 + 16);
    uint64_t v81 = *(_OWORD *)(v20 + 32);
    v82 = *(_OWORD *)(v20 + 64);
    a1[3] = *(_OWORD *)(v20 + 48);
    a1[4] = v82;
    a1[1] = v80;
    a1[2] = v81;
    int v83 = *(_OWORD *)(v20 + 80);
    int v84 = *(_OWORD *)(v20 + 96);
    int v85 = *(_OWORD *)(v20 + 128);
    a1[7] = *(_OWORD *)(v20 + 112);
    a1[8] = v85;
    a1[5] = v83;
    a1[6] = v84;
    unsigned int v86 = *(_OWORD *)(v20 + 144);
    int v87 = *(_OWORD *)(v20 + 160);
    int v88 = *(_OWORD *)(v20 + 176);
    *((void *)a1 + 24) = *(void *)(v20 + 192);
    a1[10] = v87;
    a1[11] = v88;
    a1[9] = v86;
  }

  *(_OWORD *)int v20 = v99;
  int v89 = v100;
  unsigned int v90 = v101;
  v91 = v103;
  *(_OWORD *)(v20 + 48) = v102;
  *(_OWORD *)(v20 + 64) = v91;
  *(_OWORD *)(v20 + 16) = v89;
  *(_OWORD *)(v20 + 32) = v90;
  v92 = v104;
  v93 = v105;
  int v94 = v107;
  *(_OWORD *)(v20 + 112) = v106;
  *(_OWORD *)(v20 + 128) = v94;
  *(_OWORD *)(v20 + 80) = v92;
  *(_OWORD *)(v20 + 96) = v93;
  int v95 = v108;
  int v96 = v109;
  unsigned int v97 = v110;
  *(void *)(v20 + 192) = v111;
  *(_OWORD *)(v20 + 160) = v96;
  *(_OWORD *)(v20 + 176) = v97;
  *(_OWORD *)(v20 + 144) = v95;
  return v20;
}

      *(void *)(a1 + 56) = v21;
    }

    return 1LL;
  }

  uint64_t result = 1LL;
  if (*(_BYTE *)(a1 + 577)) {
    return result;
  }
  *(double *)unint64_t v38 = v8 + 60.0;
  *(_BYTE *)(a1 + 825) = 1;
  int v10 = *a3;
  unsigned int v36 = *a4;
  int v37 = v10;
  if ((sub_100903E8C(a1, v38, &v37, &v36) & 1) != 0)
  {
    unsigned int v36 = 2;
    int v37 = 2;
    if ((sub_100903E8C(a1, v38, &v37, &v36) & 1) != 0)
    {
      *(_BYTE *)(a1 + 825) = 0;
      uint64_t result = 1LL;
      *(_BYTE *)(a1 + 577) = 1;
      return result;
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    unint64_t v31 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
    }

    int v32 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v32)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 == -1) {
        goto LABEL_67;
      }
      goto LABEL_79;
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    unsigned int v29 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
    }

    int v30 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v30)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 == -1)
      {
LABEL_67:
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:updateMotion failed unexpectedly",  &v35,  2,  v35);
LABEL_36:
        int v19 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotionActivi ty::Confidence &)",  "%s\n",  v16);
        if (v19 != buf) {
          free(v19);
        }
        return 0LL;
      }

          unsigned int v47 = (uint64_t *)v13[1];
          if (v47)
          {
            do
            {
              int v18 = v47;
              unsigned int v47 = (uint64_t *)*v47;
            }

            while (v47);
          }

          else
          {
            do
            {
              int v18 = (uint64_t *)v13[2];
              int v48 = *v18 == (void)v13;
              uint64_t v13 = v18;
            }

            while (!v48);
          }
        }

        else
        {
          sub_10097CA9C((uint64_t)(v13 + 6), (uint64_t)(v13 + 7));
          sub_10097CA9C((uint64_t)(v13 + 6), (uint64_t)(v13 + 10));
          int v18 = sub_10097CB60((uint64_t **)a1, (uint64_t)v13);
        }

        uint64_t v13 = v18;
      }

      while (v18 != v14);
      if (v63 != (void **)v62)
      {
        do
        {
          if (*(void *)(a1 + 16) < 0x1F5uLL) {
            break;
          }
          int v49 = (uint64_t *)*v8;
          int v50 = (uint64_t *)*v8;
          unsigned int v51 = v8;
          if (*v8)
          {
            do
            {
              int v52 = v50;
              int v50 = (uint64_t *)v50[1];
            }

            while (v50);
          }

          else
          {
            do
            {
              int v52 = (uint64_t *)v51[2];
              int v48 = *v52 == (void)v51;
              unsigned int v51 = v52;
            }

            while (v48);
          }

          int v53 = (char *)v52[5];
          int v54 = (char *)v52[6];
          if (v53 != v54)
          {
            do
            {
              if (sub_10097C788(a1, (unint64_t *)v53))
              {
                __p[0] = v53;
                unsigned int v55 = sub_10097C7E8((uint64_t **)a1, (unint64_t *)v53, (uint64_t)&unk_1012CF090, (__int128 **)__p);
                sub_10097CA9C((uint64_t)(v55 + 3), (uint64_t)v55 + 56);
                sub_10097CA9C((uint64_t)(v55 + 3), (uint64_t)(v55 + 5));
                sub_10097CBB8((uint64_t **)a1, (unint64_t *)v53);
                if (*(void *)(a1 + 16) < 0x1F5uLL) {
                  break;
                }
              }

              v53 += 16;
            }

            while (v53 != v54);
            int v49 = (uint64_t *)*v8;
          }

          if (v49)
          {
            do
            {
              unsigned int v56 = v49;
              int v49 = (uint64_t *)v49[1];
            }

            while (v49);
          }

          else
          {
            do
            {
              unsigned int v56 = (uint64_t *)v8[2];
              int v48 = *v56 == (void)v8;
              uint64_t v8 = v56;
            }

            while (v48);
          }

          uint64_t v8 = v56;
        }

        while (v56 != v62);
      }
    }

    unsigned int v57 = *(_DWORD *)(a1 + 16);
    *(double *)(a1 + 24) = a2;
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101862CF0);
    }
    unsigned int v58 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0]) = 134349568;
      *(void **)((char *)__p + 4) = *(void **)&a2;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = v7;
      WORD1(__p[2]) = 1026;
      HIDWORD(__p[2]) = v57;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,ClearStoredStaleConnections,szBefore,%{public}d,szAfter,%{public}d",  (uint8_t *)__p,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101862CF0);
      }
      *(_DWORD *)uint64_t v64 = 134349568;
      *(double *)&v64[4] = a2;
      unsigned int v65 = 1026;
      uint64_t v66 = v7;
      uint64_t v67 = 1026;
      v68 = v57;
      LODWORD(v61) = 24;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,ClearStoredStaleConnections,szBefore,%{public}d,szAfter,%{public}d",  v64,  v61);
      unsigned int v60 = (void **)v59;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeoMapFeatureAccessGeometryCommon::CLGeoRoadConnectionsMap::clearStoredStaleConnections(const CFAbsoluteT ime, const double, const double)",  "%s\n",  v59);
      if (v60 != __p) {
        free(v60);
      }
    }
  }

  sub_1004C1CC0((uint64_t)&v62, v63[0]);
}

  if (!qword_1019A1B80)
  {
    int v32 = operator new(0x20uLL);
    sub_1006DC9EC((uint64_t)v32, (uint64_t)"CLMagnetometerCoexistenceNotifier", 2);
    char *v32 = &off_10186E9B8;
    qword_1019A1B80 = (uint64_t)v32;
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10186EA00);
    }
    unint64_t v33 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "Magnetometer coexistence compensation is disabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186EA00);
      }
      LOWORD(v48) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Magnetometer coexistence compensation is disabled",  &v48,  v44);
      unint64_t v35 = (uint8_t *)v34;
      sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v34);
      if (v35 != buf) {
        free(v35);
      }
    }
  }
}

  BOOL v24 = *(_DWORD *)(a1 + 32);
  int v25 = (v24 + v5);
  if (v24 >= 1)
  {
    unint64_t v26 = 0LL;
    do
    {
      uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B20888( *(void *)(*(void *)(a1 + 24) + 8 * v26),  a2);
      int v28 = (int)v27;
      else {
        unsigned int v29 = 1;
      }
      int v25 = (v28 + v25 + v29);
      ++v26;
    }

    while (v26 < *(int *)(a1 + 32));
  }

  *(_DWORD *)(a1 + 68) = v25;
  return v25;
}

  if ((v3 & 0x40) != 0) {
    uint64_t result = v4 + 2;
  }
  else {
    uint64_t result = v4;
  }
LABEL_49:
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_1019A1CE8 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v14,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }

  [v3 setObject:v13 forKey:@"technology"];
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  if ((v7 & 0xFF00) == 0) {
    goto LABEL_96;
  }
  if ((v7 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 396) |= 0x100u;
    int v21 = *(char **)(a1 + 64);
    if (!v21)
    {
      int v21 = (char *)operator new(0x28uLL);
      *(void *)int v21 = off_1018759D8;
      *(_OWORD *)(v21 + 8) = 0u;
      *(_OWORD *)(v21 + 24) = 0u;
      *(void *)(a1 + 64) = v21;
    }

    unsigned int v22 = *(void *)(a2 + 64);
    if (!v22) {
      unsigned int v22 = *(void *)(qword_1019A1D38 + 64);
    }
    sub_100BB8BF0((uint64_t)v21, v22);
    int v7 = *(_DWORD *)(a2 + 396);
    if ((v7 & 0x200) == 0)
    {
LABEL_49:
      if ((v7 & 0x400) == 0) {
        goto LABEL_50;
      }
      goto LABEL_66;
    }
  }

  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_49;
  }

  *(_DWORD *)(a1 + 396) |= 0x200u;
  int v23 = *(char **)(a1 + 72);
  if (!v23)
  {
    int v23 = (char *)operator new(0x50uLL);
    *(void *)int v23 = off_101875A50;
    *((void *)v23 + 9) = 0LL;
    *(_OWORD *)(v23 + 8) = 0u;
    *(_OWORD *)(v23 + 24) = 0u;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 54) = 0u;
    *(void *)(a1 + 72) = v23;
  }

  BOOL v24 = *(void *)(a2 + 72);
  if (!v24) {
    BOOL v24 = *(void *)(qword_1019A1D38 + 72);
  }
  sub_100BB8CD8((uint64_t)v23, v24);
  int v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x400) == 0)
  {
LABEL_50:
    if ((v7 & 0x800) == 0) {
      goto LABEL_51;
    }
    goto LABEL_71;
  }

  int v10 = *(void *)(v5 + 48);
  if (!v10) {
    int v10 = *(void *)(qword_1019A1D38 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_52;
  }

  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

  *((_DWORD *)a2 + 14) = v3;
  *(float64x2_t *)(a2 + 1) = vdivq_f64( *(float64x2_t *)(a2 + 1),  (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v3), 0));
  *((_DWORD *)a2 + 18) = sub_100C6821C(a1, (void *)(a1 + 360));
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187A060);
  }
  unint64_t v41 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v42 = *a2;
    unint64_t v43 = a2[1];
    char v44 = a2[2];
    unint64_t v45 = a2[3];
    uint64_t v46 = a2[4];
    unsigned int v47 = a2[5];
    int v48 = a2[6];
    int v49 = *((_DWORD *)a2 + 14);
    int v50 = *((_DWORD *)a2 + 18);
    *(_DWORD *)buf = 134220032;
    v82 = v42;
    int v83 = 2048;
    int v84 = v43;
    int v85 = 2048;
    unsigned int v86 = v44;
    int v87 = 2048;
    int v88 = v45;
    int v89 = 2048;
    unsigned int v90 = v46;
    v91 = 2048;
    v92 = v47;
    v93 = 2048;
    int v94 = v48;
    int v95 = 1024;
    int v96 = v49;
    unsigned int v97 = 1024;
    int v98 = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d ",  buf,  0x54u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187A060);
    }
    unsigned int v51 = *a2;
    int v52 = a2[1];
    int v53 = a2[2];
    int v54 = a2[3];
    unsigned int v55 = a2[4];
    unsigned int v56 = a2[5];
    unsigned int v57 = a2[6];
    unsigned int v58 = *((_DWORD *)a2 + 14);
    v59 = *((_DWORD *)a2 + 18);
    uint64_t v63 = 134220032;
    uint64_t v64 = v51;
    unsigned int v65 = 2048;
    uint64_t v66 = v52;
    uint64_t v67 = 2048;
    v68 = v53;
    int v69 = 2048;
    int v70 = v54;
    int v71 = 2048;
    unsigned int v72 = v55;
    int v73 = 2048;
    int v74 = v56;
    int v75 = 2048;
    int v76 = v57;
    uint64_t v77 = 1024;
    uint64_t v78 = v58;
    v79 = 1024;
    uint64_t v80 = v59;
    LODWORD(v62) = 84;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d ",  COERCE_DOUBLE(&v63),  v62);
    v61 = (uint8_t *)v60;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAutopauseCalculator::aggregation(AggregateCoord &, const std::deque<CoordAndMotion> &)",  "%s\n",  v60);
    if (v61 != buf) {
      free(v61);
    }
  }

    unint64_t v38 = 16;
LABEL_47:
    if (v19)
    {
      int v39 = (unint64_t *)&v19->__shared_owners_;
      do
        int v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    if ((v38 | 0x10) != 0x10) {
      goto LABEL_85;
    }
    uint64_t v17 = 0;
LABEL_54:
    uint64_t v16 = (uint64_t *)v16[1];
  }

  while (v16 != &v69);
  if ((v17 & 1) != 0) {
    goto LABEL_77;
  }
  unint64_t v38 = 0;
  *a4 = 0;
LABEL_85:
  unint64_t v45 = BYTE4(v56);
LABEL_86:
  unsigned int v42 = (v38 == 0) | v45;
LABEL_87:
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  sub_100890314(&v69);
  uint64_t v46 = v73;
  if (v73)
  {
    unsigned int v47 = (unint64_t *)&v73->__shared_owners_;
    do
      int v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

  return v42 & 1;
}

      ++*(_DWORD *)(a1 + 736);
      *(_DWORD *)(a1 + 712) = a2;
      if (*(_BYTE *)(a1 + 599) && (HIDWORD(v19) = 1081671680, v7 > 400.0))
      {
        int v7 = 400.0;
      }

      else if (v7 <= 0.0)
      {
        LODWORD(v17) = *(_DWORD *)(a1 + 692);
        *(_DWORD *)(a1 + 692) = (fabs(v7) + (double)*(unint64_t *)&v17);
        if (a2) {
          goto LABEL_51;
        }
        goto LABEL_53;
      }

      LODWORD(v19) = *(_DWORD *)(a1 + 688);
      *(_DWORD *)(a1 + 688) = (v7 + (double)*(unint64_t *)&v19);
      if (a2)
      {
LABEL_51:
        unint64_t v41 = v6 + *(void *)(a1 + 80) - 1;
        unsigned int v42 = (void *)(a1 + 56);
        goto LABEL_54;
      }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101884558);
  }
  unint64_t v26 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v27 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v27;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "WIFITILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
    unint64_t v31 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)unint64_t v38 = 67109376;
    *(_DWORD *)&v38[4] = v31;
    *(_WORD *)&v38[8] = 1024;
    *(_DWORD *)&v38[10] = v37;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "WIFITILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u",  v38,  14);
    unint64_t v33 = (char *)v32;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v32);
    if (v33 != buf) {
      free(v33);
    }
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  uint64_t v34 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(void *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,solution jump detected, recomputing without course,solutionDiff,%{public}.2lf",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    *(_DWORD *)v112 = 134349312;
    *(void *)&v112[4] = v18;
    unsigned int v113 = 2050;
    *(double *)v114 = v19;
    LODWORD(v108) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,solution jump detected, recomputing without course,solutionDiff,%{public}.2lf",  v112,  v108);
    unsigned int v86 = (char *)v85;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLP articleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v85);
    if (v86 != buf) {
      free(v86);
    }
  }

  sub_100EB4F44((uint64_t)v112);
  unint64_t v35 = sub_100EB4FEC(a1, a2, a3, a5, 1, 1, (uint64_t)v112);
  if (v124) {
    unsigned int v36 = v35;
  }
  else {
    unsigned int v36 = 1;
  }
  if ((v36 & 1) == 0)
  {
    uint64_t v46 = sub_100EB2B44((uint64_t)v121, (double *)(a1 + 168), v7);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    unsigned int v47 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(void *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,course,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      v127 = 134349568;
      v128 = v18;
      v129 = 2050;
      v130 = v19;
      v131 = 2050;
      v132 = v46;
      LODWORD(v108) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,course,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf",  &v127,  v108);
      int v88 = (char *)v87;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<C LParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v87);
      if (v88 != buf) {
        free(v88);
      }
    }

    if (v46 < v19 * 0.6)
    {
      sub_100EBA65C(a4, (__int128 *)v112);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      unsigned int v58 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&buf[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filter swapped with local filter without course, solutionDiffCheck",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_178;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      v127 = 134349056;
      v128 = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filter swapped with local filter without course, solutionDiffCheck",  &v127,  v108);
      unsigned int v60 = (char *)v59;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<C LParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v59);
      goto LABEL_230;
    }

    if (vabdd_f64(v46, v19) < 2.0)
    {
      sub_100D5DAC4((uint64_t *)(a4 + 256), (uint64_t)buf);
      sub_100D5DAC4(v121, (uint64_t)&v127);
      if (!sub_100BDA328((uint64_t)buf, (uint64_t)&v127))
      {
        int v48 = *(float *)(a3 + 144);
        int v49 = fmod((float)(v48 - *(float *)(a4 + 280)), 360.0);
        if (v49 < 0.0) {
          int v49 = v49 + 360.0;
        }
        if (v49 > 180.0) {
          int v49 = v49 + -360.0;
        }
        int v50 = fabs(v49);
        unsigned int v51 = fmod((float)(v48 - v122), 360.0);
        if (v51 < 0.0) {
          unsigned int v51 = v51 + 360.0;
        }
        if (v51 > 180.0) {
          unsigned int v51 = v51 + -360.0;
        }
        if (v50 > 60.0 && fabs(v51) < 10.0)
        {
          sub_100EBA65C(a4, (__int128 *)v112);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10188A8E0);
          }
          int v52 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(void *)&buf[4] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filter swapped with local filter without course, courseDiffCheck",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10188A8E0);
            }
            v127 = 134349056;
            v128 = v18;
            LODWORD(v108) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filter swapped with local filter without course, courseDiffCheck",  &v127,  v108);
            int v54 = (char *)v53;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::ve ctor<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v53);
            if (v54 != buf) {
              free(v54);
            }
          }
        }
      }
    }
  }

  sub_100ECA708((uint64_t)v112);
  if (*(_BYTE *)(a4 + 897))
  {
    int v37 = *(double **)(a1 + 1904);
    unint64_t v38 = *(double **)(a1 + 1912);
    if (v37 == v38)
    {
      int v40 = -1.0;
      int v39 = -1.0;
    }

    else
    {
      int v39 = -1.0;
      int v40 = -1.0;
      do
      {
        unint64_t v41 = sub_100D2DBDC((double *)(a1 + 168), *(double *)(a3 + 152), *(double *)(a3 + 160), v37[10], v37[11], 0.0);
        if (v41 < v40 || v40 < 0.0) {
          int v40 = v41;
        }
        unint64_t v43 = fmod(v37[13] - *(float *)(a3 + 144), 360.0);
        if (v43 < 0.0) {
          unint64_t v43 = v43 + 360.0;
        }
        if (v43 > 180.0) {
          unint64_t v43 = v43 + -360.0;
        }
        char v44 = fabs(v43);
        if (v44 < v39 || v39 < 0.0) {
          int v39 = v44;
        }
        v37 += 33;
      }

      while (v37 != v38);
    }

    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v70 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(void *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v39;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,solution jump detected,verifying routeHints,courseDiffBetweenPriorSolution,%{public}.2lf,d istanceDiffBetweenPriorSolution,%{public}.2lf",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      *(_DWORD *)v112 = 134349568;
      *(void *)&v112[4] = v18;
      unsigned int v113 = 2050;
      *(double *)v114 = v39;
      *(_WORD *)&v114[8] = 2050;
      *(double *)&v114[10] = v40;
      LODWORD(v108) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,solution jump detected,verifying routeHints,courseDiffBetweenPriorSolution,%{public}.2lf,d istanceDiffBetweenPriorSolution,%{public}.2lf",  v112,  v108);
      unsigned int v90 = (char *)v89;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<C LParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v89);
      if (v90 != buf) {
        free(v90);
      }
    }

    if (v39 >= 30.0 || (v40 >= 4.0 ? (int v71 = v40 < *(double *)(a4 + 856) + *(double *)(a4 + 856)) : (int v71 = 1), !v71))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      int v74 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(void *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,solution jump detected, recomputing without routeHints,solutionDiff,%{public}.2lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        *(_DWORD *)v112 = 134349312;
        *(void *)&v112[4] = v18;
        unsigned int v113 = 2050;
        *(double *)v114 = v19;
        LODWORD(v108) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,solution jump detected, recomputing without routeHints,solutionDiff,%{public}.2lf",  v112,  v108);
        int v98 = (char *)v97;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector <CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v97);
        if (v98 != buf) {
          free(v98);
        }
      }

      sub_100EB4F44((uint64_t)v112);
      int v75 = sub_100EB4FEC(a1, a2, a3, a5, 0, 1, (uint64_t)v112);
      if (v124) {
        int v76 = v75;
      }
      else {
        int v76 = 1;
      }
      uint64_t v77 = v18;
      if ((v76 & 1) != 0) {
        goto LABEL_178;
      }
      uint64_t v78 = sub_100EB2B44((uint64_t)v121, (double *)(a1 + 168), v7);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      v79 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(void *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v78;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        v127 = 134349568;
        v128 = v18;
        v129 = 2050;
        v130 = v19;
        v131 = 2050;
        v132 = v78;
        LODWORD(v108) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf",  &v127,  v108);
        v100 = (char *)v99;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector <CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v99);
        if (v100 != buf) {
          free(v100);
        }
        uint64_t v77 = v18;
      }

      if (v78 >= v123 * 1.5 || v78 <= v123 * 0.1) {
        goto LABEL_178;
      }
      sub_100EBA65C(a4, (__int128 *)v112);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      uint64_t v80 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&buf[4] = v77;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_178;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      v127 = 134349056;
      v128 = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints",  &v127,  v108);
      unsigned int v60 = (char *)v105;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<C LParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v105);
LABEL_230:
      if (v60 != buf) {
        free(v60);
      }
LABEL_178:
      sub_100ECA708((uint64_t)v112);
      return;
    }

    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    unsigned int v72 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&buf[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,solution jump detected,routeHints are OK, skipping recomputation",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      *(_DWORD *)v112 = 134349056;
      *(void *)&v112[4] = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,solution jump detected,routeHints are OK, skipping recomputation",  v112,  v108);
      unsigned int v57 = (char *)v73;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<C LParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v73);
LABEL_155:
      if (v57 != buf) {
        free(v57);
      }
    }
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    unsigned int v55 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&buf[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,solution jump detected,routeHints are not used",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      *(_DWORD *)v112 = 134349056;
      *(void *)&v112[4] = v18;
      LODWORD(v108) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,solution jump detected,routeHints are not used",  v112,  v108);
      unsigned int v57 = (char *)v56;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<C LParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)",  "%s\n",  v56);
      goto LABEL_155;
    }
  }

  int v37 = 0LL;
LABEL_47:
  if (v9)
  {
    unsigned int v42 = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return v37;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 8u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x80000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 148) = v8;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 9u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }

  int v21 = *(void *)(a2 + 304);
  v10 |= 0x400u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 304) = v21;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 100));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200000) != 0) {
    goto LABEL_47;
  }
LABEL_23:
  if ((v5 & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "treadmillDistance", *(float *)(a1 + 108));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
  if ((*(_DWORD *)(v3 + 112) & 0x10) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 36), 0x17u);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 40) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "sqrtMaxAbsLoftAccel", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0x15u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 108));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

        *(_DWORD *)(a1 + 32) = v30;
      }

      else if ((_DWORD)v21 == 1)
      {
        sub_10109B308(v8);
        unsigned int v22 = *(void *)(*(void *)(a1 + 16) - 8LL);
        if (!PB::Reader::placeMark(this, v39, v23, v24)
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v22 + 16LL))(v22, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v39);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      int v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v12 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      int v18 = v2 + 1;
      int v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      int v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        int v12 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  int v18 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 212) |= 0x40000u;
  *(_DWORD *)(a1 + 168) = v18;
  int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "companionAopTs", *(void *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }

  int v10 = *(_BYTE *)(a2 + 104);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_BYTE *)(a1 + 104) = v10;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 2) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "isNonPlanarTp", *(_BYTE *)(a1 + 102));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }

  uint64_t result = *(float *)(a2 + 128);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 128) = result;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "kDetectedAB", *(_BYTE *)(a1 + 148));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }

  int v18 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 100) = v18;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "lastDetectedTransitionTimeEnd", *(void *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0xC9u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }

  uint64_t v14 = *(void *)(a2 + 40);
  v3 |= 0x10uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 40) = v14;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "debugCountOfDmDataDrop", *(_DWORD *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0xCu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 156) = v4;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "computeTime", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 7u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }

  int v7 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 52) = v7;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 100));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x15u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 60) = v6;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "numEffSpads", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 56) = v13;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "oscFrequencySetting", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0xBu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "lidAngle", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

  uint64_t result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 120) = result;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "userAccelMaxX", *(double *)(a1 + 152));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "dramMinTimestamp", *(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 5u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }

  uint64_t result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 112) = result;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ5", *(double *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }

  uint64_t result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *(double *)(a1 + 144));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "floorsDescended", *(_DWORD *)(a1 + 124));
  uint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  uint64_t result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 40) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "medianPocketProbability", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

  int v20 = *(_BYTE *)(a2 + 114);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 114) = v20;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 111), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  int v25 = *(_DWORD *)(a2 + 164);
  v5 |= 0x800000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 164) = v25;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

  int v15 = *(void *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 160) = v15;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "isPrefilteredLocation", *(_BYTE *)(a1 + 216));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 4u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 84);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 84) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_48:
    uint64_t result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 108) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "userAccelInerZMean", *(float *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) != 0) {
    goto LABEL_47;
  }
LABEL_23:
  if ((v5 & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "yawStd", *(float *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
  if ((*(_DWORD *)(v3 + 108) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x17u);
  }
  return result;
}

  int v15 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 60) = v15;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "isInCorrelatedActivity", *(_BYTE *)(a1 + 123));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 123), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }

  int v18 = *(_DWORD *)(a2 + 140);
  v6 |= 0x80000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 140) = v18;
  uint64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "btzStaticPoseDuration", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }

  uint64_t v8 = *(_BYTE *)(a2 + 216);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 216) = v8;
  int v2 = *(void *)(a2 + 224);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "groundContactTimeIsValid", *(_BYTE *)(a1 + 217));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 218), 0xAu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  int v19 = *(void *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 120) = v19;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "kalmanEpsOdometer", *(double *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }

  int v21 = *(void *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 112) = v21;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }

  PB::TextFormatter::format(this, "rotationRateMaxZForwards", *(double *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }

    memset(v20, 0, sizeof(v20));
    goto LABEL_47;
  }

  if (qword_101934970 != -1) {
    goto LABEL_80;
  }
LABEL_42:
  uint64_t v14 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].__r_.__value_.__r.__words[0] = 68289026LL;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Spi, connecting process isn't entitled, they shall not pass}",  (uint8_t *)buf,  0x12u);
  }

  int v15 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.locationd.internalservice.errorDomain",  2LL,  0LL);
  (*((void (**)(id, NSError *))a5 + 2))(a5, v15);

LABEL_68:
  os_activity_scope_leave(&state);
}

  os_activity_scope_leave(&state);
}

LABEL_51:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(_DWORD *)(v5 + 164),  a2,  a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x40000) == 0)
  {
LABEL_30:
    if ((v12 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_53;
  }

  int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 128);
  if ((v21 & 0x80000000) != 0)
  {
    unsigned int v22 = 10;
  }

  else if (v21 >= 0x80)
  {
    unsigned int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 192);
  }

  else
  {
    unsigned int v22 = 1;
  }

  v5 += v22 + 1;
  if ((v3 & 0x1000) != 0) {
    goto LABEL_57;
  }
LABEL_32:
  if ((v3 & 0x4000) == 0) {
    goto LABEL_33;
  }
LABEL_63:
  int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 152);
  if (v25 >= 0x80)
  {
    unint64_t v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 192);
  }

  else
  {
    unint64_t v26 = 1;
  }

  v5 += v26 + 1;
  if ((v3 & 0x8000) != 0)
  {
LABEL_67:
    uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 156);
    if (v27 >= 0x80)
    {
      int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 192);
    }

    else
    {
      int v28 = 1;
    }

    v5 += v28 + 2;
  }

  uint64_t v17 = *(void *)(v5 + 96);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1019A0980 + 96);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v17,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if (!HIBYTE(v5)) {
    return;
  }
  if ((v5 & 0x1000000) != 0)
  {
    unint64_t v31 = *(void *)(a2 + 184);
    *(_DWORD *)(a1 + 228) |= 0x1000000u;
    *(void *)(a1 + 184) = v31;
    uint64_t v5 = *(_DWORD *)(a2 + 228);
    if ((v5 & 0x2000000) == 0)
    {
LABEL_54:
      if ((v5 & 0x4000000) == 0) {
        goto LABEL_55;
      }
      goto LABEL_76;
    }
  }

  else if ((v5 & 0x2000000) == 0)
  {
    goto LABEL_54;
  }

  int v32 = *(void *)(a2 + 192);
  *(_DWORD *)(a1 + 228) |= 0x2000000u;
  *(void *)(a1 + 192) = v32;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_77;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 72),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C,  (int)a2,  *(double *)(v5 + 120),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

  BOOL v24 = *(_BYTE *)(a2 + 97);
  *(_DWORD *)(a1 + 148) |= 0x4000u;
  *(_BYTE *)(a1 + 97) = v24;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x8000) == 0) {
    goto LABEL_57;
  }
LABEL_52:
  *(_DWORD *)(a1 + 148) |= 0x8000u;
  int v25 = *(char **)(a1 + 104);
  if (!v25)
  {
    int v25 = (char *)operator new(0x28uLL);
    *(void *)int v25 = off_1018293E0;
    *(_OWORD *)(v25 + 8) = 0u;
    *(_OWORD *)(v25 + 24) = 0u;
    *(void *)(a1 + 104) = v25;
  }

  unint64_t v26 = *(void *)(a2 + 104);
  if (!v26) {
    unint64_t v26 = *(void *)(qword_1019A0CF0 + 104);
  }
  sub_1001F1BF0((uint64_t)v25, v26);
  uint64_t v5 = *(_DWORD *)(a2 + 148);
LABEL_57:
  if ((v5 & 0xFF0000) == 0) {
    return;
  }
  if ((v5 & 0x10000) != 0)
  {
    uint64_t v27 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 148) |= 0x10000u;
    *(_DWORD *)(a1 + 100) = v27;
    uint64_t v5 = *(_DWORD *)(a2 + 148);
    if ((v5 & 0x20000) == 0)
    {
LABEL_60:
      if ((v5 & 0x40000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_69;
    }
  }

  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_60;
  }

  int v28 = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 148) |= 0x20000u;
  *(_DWORD *)(a1 + 112) = v28;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x40000) == 0)
  {
LABEL_61:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_70;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(_DWORD *)(v5 + 112),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

    int v21 = (void *)CLConnectionMessage::name(*a2);
    unsigned int v22 = *((char *)v21 + 23);
    if (v22 < 0)
    {
      if (v21[1] != 58LL)
      {
LABEL_57:
        int v23 = (void *)CLConnectionMessage::name(*a2);
        BOOL v24 = *((char *)v23 + 23);
        if (v24 < 0)
        {
          if (v23[1] != 52LL) {
            goto LABEL_63;
          }
          int v23 = (void *)*v23;
        }

        else if (v24 != 52)
        {
LABEL_63:
          int v25 = (void *)CLConnectionMessage::name(*a2);
          unint64_t v26 = *((char *)v25 + 23);
          if (v26 < 0)
          {
            if (v25[1] != 62LL) {
              goto LABEL_76;
            }
            int v25 = (void *)*v25;
          }

          else if (v26 != 62)
          {
LABEL_76:
            if (qword_101934780 != -1) {
              dispatch_once(&qword_101934780, &stru_10182B480);
            }
            unint64_t v33 = (os_log_s *)qword_101934788;
            if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_FAULT))
            {
              uint64_t v34 = (uint64_t *)CLConnectionMessage::name(*a2);
              else {
                unint64_t v35 = (uint64_t *)*v34;
              }
              *(_DWORD *)__p = 136446210;
              *(void *)&__p[4] = v35;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "Got unhandled mesage of type %{public}s",  __p,  0xCu);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_101934780 != -1) {
                dispatch_once(&qword_101934780, &stru_10182B480);
              }
              unsigned int v36 = qword_101934788;
              int v37 = CLConnectionMessage::name(*a2);
              unint64_t v38 = *(char *)(v37 + 23) >= 0 ? v37 : *(void *)v37;
              v59 = 136446210;
              unsigned int v60 = v38;
              int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v36,  17LL,  "Got unhandled mesage of type %{public}s",  &v59,  12);
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLPedestrianFenceClient::handleMessage(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v15);
              if (v15 != __p) {
                goto LABEL_90;
              }
            }

            return;
          }

          if (!memcmp(v25, "PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry", 0x3EuLL))
          {
            unsigned int v51 = a2[1];
            v54[0] = *a2;
            v54[1] = v51;
            if (v51)
            {
              int v52 = (unint64_t *)((char *)v51 + 8);
              do
                int v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }

            sub_1002151A4(a1, v54);
            sub_10000AE14((uint64_t)v54);
            return;
          }

          goto LABEL_76;
        }

        if (memcmp(v23, "PedestrianFence/kCLConnectionMessageInertialOdometry", 0x34uLL)) {
          goto LABEL_63;
        }
        unsigned int v47 = *a2;
        int v28 = a2[1];
        v55[0] = v47;
        v55[1] = v28;
        if (v28)
        {
          int v48 = (unint64_t *)((char *)v28 + 8);
          do
            int v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }

        sub_1002150E8(a1, v55);
        if (!v28) {
          return;
        }
        int v50 = (unint64_t *)((char *)v28 + 8);
        do
          int v32 = __ldaxr(v50);
        while (__stlxr(v32 - 1, v50));
LABEL_111:
        if (!v32)
        {
          (*(void (**)(CLConnectionMessage *))(*(void *)v28 + 16LL))(v28);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
        }

        return;
      }

      int v21 = (void *)*v21;
    }

    else if (v22 != 58)
    {
      goto LABEL_57;
    }

    if (!memcmp(v21, "PedestrianFence/kCLConnectionMessagePedestrianFenceSession", 0x3AuLL))
    {
      unint64_t v43 = *a2;
      int v28 = a2[1];
      v56[0] = v43;
      v56[1] = v28;
      if (v28)
      {
        char v44 = (unint64_t *)((char *)v28 + 8);
        do
          unint64_t v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }

      sub_100214EB8(a1, v56);
      if (!v28) {
        return;
      }
      uint64_t v46 = (unint64_t *)((char *)v28 + 8);
      do
        int v32 = __ldaxr(v46);
      while (__stlxr(v32 - 1, v46));
      goto LABEL_111;
    }

    goto LABEL_57;
  }

  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10182B480);
  }
  uint64_t v14 = (os_log_s *)qword_101934788;
  if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Subscription: Client not entitled.", __p, 2u);
  }

  if (!sub_1002921D0(115, 0)) {
    return;
  }
  bzero(__p, 0x65CuLL);
  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10182B480);
  }
  LOWORD(v59) = 0;
  int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934788,  16LL,  "Subscription: Client not entitled.",  &v59,  2);
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLPedestrianFenceClient::handleMessage(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v15);
LABEL_46:
  if (v15 != __p) {
LABEL_90:
  }
    free(v15);
}

  *(void *)((char *)v34
  unint64_t v35 = v32;
  std::streambuf::~streambuf(&v36);
  std::ios::~ios(v37);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

      if (*(_BYTE *)(a1 + 2))
      {
        unint64_t v31 = 2;
LABEL_148:
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        v61 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          int v62 = *(_DWORD *)(a1 + 4);
          if (a6[23] >= 0) {
            uint64_t v63 = a6;
          }
          else {
            uint64_t v63 = *(char **)a6;
          }
          *(_DWORD *)buf = 134349827;
          v102 = v12;
          v103 = 1026;
          *(_DWORD *)int v104 = v62;
          *(_WORD *)&v104[4] = 1026;
          *(_DWORD *)&v104[6] = v31;
          *(_WORD *)&v104[10] = 2081;
          *(void *)&v104[12] = v63;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,fDynamics,%{public}d,dynamics,%{public}d,currentCountry,%{private}s",  buf,  0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10183E5D0);
          }
          int v75 = *(_DWORD *)(a1 + 4);
          if (a6[23] >= 0) {
            int v76 = a6;
          }
          else {
            int v76 = *(char **)a6;
          }
          *(_DWORD *)int v98 = 134349827;
          *(void *)&v98[4] = v12;
          *(_WORD *)&v98[12] = 1026;
          *(_DWORD *)&v98[14] = v75;
          *(_WORD *)&v98[18] = 1026;
          *(_DWORD *)&v98[20] = v31;
          *(_WORD *)&v98[24] = 2081;
          *(void *)&v98[26] = v76;
          LODWORD(v97) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,fDynamics,%{public}d,dynamics,%{public}d,currentCountry,%{private}s",  v98,  v97);
          uint64_t v78 = (uint8_t *)v77;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLo cation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const s td::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)",  "%s\n",  v77);
          if (v78 != buf) {
            free(v78);
          }
        }

        *(_DWORD *)(a1 + 4) = v31;
        return;
      }

      *(void *)(a1 + 24) = 0xBFF0000000000000LL;
      *(double *)(a1 + 8) = v13;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      v59 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v102 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics, pedestrian map-matching not allowed, setting unknown",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        *(_DWORD *)int v98 = 134349056;
        *(void *)&v98[4] = v12;
        LODWORD(v97) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics, pedestrian map-matching not allowed, setting unknown",  v98,  v97,  *(void *)v98,  *(_OWORD *)&v98[8],  *(void *)&v98[24]);
LABEL_227:
        v91 = (uint8_t *)v37;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLoca tion &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std:: string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)",  "%s\n",  v37);
        if (v91 != buf) {
          free(v91);
        }
        goto LABEL_147;
      }

      goto LABEL_147;
    }

    unint64_t v38 = *(double *)(a1 + 32);
    int v39 = v13 - v38 < 30.0 && v38 > 0.0;
    if (CLMotionActivity::isCycling(a4) && (a4->confidence > 0 ? (int v40 = 1) : (int v40 = v39), (v40 & 1) != 0)
      || CLMotionActivity::isTypeCycling(*a5))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      unint64_t v41 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v42 = a4->type;
        unint64_t v43 = *a5;
        *(_DWORD *)buf = 134350080;
        v102 = v12;
        v103 = 2050;
        *(double *)int v104 = v14;
        *(_WORD *)&v104[8] = 1026;
        *(_DWORD *)&v104[10] = v39;
        *(_WORD *)&v104[14] = 1026;
        *(_DWORD *)&v104[16] = v42;
        int v105 = 1026;
        int v106 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,cycling matching,cycling dynamics,speed,%{public}.2lf,wasRecentlyCycling, %{public}d,motion,%{public}d,fitness,%{public}d",  buf,  0x28u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        int v83 = a4->type;
        int v84 = *a5;
        *(_DWORD *)int v98 = 134350080;
        *(void *)&v98[4] = v12;
        *(_WORD *)&v98[12] = 2050;
        *(double *)&v98[14] = v14;
        *(_WORD *)&v98[22] = 1026;
        *(_DWORD *)&v98[24] = v39;
        *(_WORD *)&v98[28] = 1026;
        *(_DWORD *)&v98[30] = v83;
        int v99 = 1026;
        v100 = v84;
        LODWORD(v97) = 40;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,cycling matching,cycling dynamics,speed,%{public}.2lf,wasRecentlyCycling, %{public}d,motion,%{public}d,fitness,%{public}d",  v98,  v97);
        unsigned int v86 = (uint8_t *)v85;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLoca tion &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std:: string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)",  "%s\n",  v85);
        if (v86 != buf) {
          free(v86);
        }
      }

      *(double *)(a1 + 32) = v13;
      if (!*(_BYTE *)(a1 + 1) || (sub_10050BBD0((uint64_t **)(a1 + 96), (const void **)a6, 3, a7) & 1) == 0)
      {
        *(void *)(a1 + 32) = 0xBFF0000000000000LL;
        *(double *)(a1 + 8) = v13;
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        char v44 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v45 = *(unsigned __int8 *)(a1 + 1);
          if (a6[23] >= 0) {
            uint64_t v46 = a6;
          }
          else {
            uint64_t v46 = *(char **)a6;
          }
          *(_DWORD *)buf = 134349571;
          v102 = v12;
          v103 = 1026;
          *(_DWORD *)int v104 = v45;
          *(_WORD *)&v104[4] = 2081;
          *(void *)&v104[6] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics, activity based cycling map-matching not allowed,%{public}d, or country not supported,%{private}s, setting unknown",  buf,  0x1Cu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_147;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        unsigned int v47 = *(unsigned __int8 *)(a1 + 1);
        if (a6[23] >= 0) {
          int v48 = a6;
        }
        else {
          int v48 = *(char **)a6;
        }
        *(_DWORD *)int v98 = 134349571;
        *(void *)&v98[4] = v12;
        *(_WORD *)&v98[12] = 1026;
        *(_DWORD *)&v98[14] = v47;
        *(_WORD *)&v98[18] = 2081;
        *(void *)&v98[20] = v48;
        LODWORD(v97) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics, activity based cycling map-matching not allowed,%{public}d, or country n ot supported,%{private}s, setting unknown",  v98,  v97,  *(void *)v98,  *(_OWORD *)&v98[8],  *(void *)&v98[24]);
        goto LABEL_227;
      }

  int v15 = *(_DWORD *)(a2 + 20);
  a1[37] |= 8u;
  a1[5] = v15;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_53:
    uint64_t v17 = *(_DWORD *)(a2 + 28);
    a1[37] |= 0x20u;
    a1[7] = v17;
    uint64_t v5 = *(_DWORD *)(a2 + 148);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_54;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v5[16],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }

    if (v34 != v33)
    {
      int v39 = v86;
      if (v85 != v86)
      {
        while (v85 == v39)
        {
LABEL_68:
          if (++v34 == v33) {
            goto LABEL_77;
          }
        }

        int v39 = (double ****)v85;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            int v40 = *(double ***)*v34;
            unint64_t v41 = **v39;
            unsigned int v42 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100858868(v40, v41, (unsigned __int8 *)&v105, v42);
            if (!v105.i8[9])
            {
              unint64_t v43 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v43
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }

          if (++v39 == v86)
          {
            unint64_t v33 = v92;
            goto LABEL_68;
          }
        }
      }
    }

    goto LABEL_77;
  }

  char v44 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  unint64_t v45 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int v105 = v44;
  int v106 = v45;
  if (v91 != v92)
  {
    do
    {
      uint64_t v46 = (double *)sub_1008560B0(*v34);
      sub_10084CE24((double *)v105.i64, v46);
      ++v34;
    }

    while (v34 != v92);
    char v44 = v105;
    unint64_t v45 = v106;
  }

  uint64_t v80 = v44;
  uint64_t v81 = v45;
  if (!sub_100857CC8(&v80, &v91, &v88, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_100857CC8(&v80, &v91, &v85, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }

    if (v35 != v34)
    {
      int v40 = v87;
      if (v86 != v87)
      {
        while (v86 == v40)
        {
LABEL_68:
          if (++v35 == v34) {
            goto LABEL_77;
          }
        }

        int v40 = (double ****)v86;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            unint64_t v41 = *(double ***)*v35;
            unsigned int v42 = **v40;
            unint64_t v43 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100858868(v41, v42, (unsigned __int8 *)&v106, v43);
            if (!v106.i8[9])
            {
              char v44 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v44
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }

          if (++v40 == v87)
          {
            uint64_t v34 = v93;
            goto LABEL_68;
          }
        }
      }
    }

    goto LABEL_77;
  }

  unint64_t v45 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v46 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int v106 = v45;
  unsigned int v107 = v46;
  if (v92 != v93)
  {
    do
    {
      unsigned int v47 = (double *)sub_1008560B0(*v35);
      sub_10084CE24((double *)v106.i64, v47);
      ++v35;
    }

    while (v35 != v93);
    unint64_t v45 = v106;
    uint64_t v46 = v107;
  }

  uint64_t v81 = v45;
  v82 = v46;
  if (!sub_100857134( (double *)v81.i64,  (uint64_t **)&v92,  (uint64_t **)&v89,  a4 + 1,  a5,  a6,  a7,  a8,  a9,  a10,  a11)
    || (sub_100857134((double *)v81.i64, (uint64_t **)&v92, (uint64_t **)&v86, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }

  sub_1002F0B04(buf);
  int v54 = (unsigned __int8 *)(a1 + 620);
  unsigned int v55 = sub_1002A6F64(*(uint64_t *)&buf[0], "FenceIssueDelayedTriggers", (BOOL *)(a1 + 620));
  unsigned int v56 = v55;
  unsigned int v57 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_55;
  }
  unsigned int v58 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    if (!v56) {
      goto LABEL_61;
    }
  }

  else
  {
LABEL_55:
    if (!v55) {
      goto LABEL_61;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  unsigned int v60 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    v61 = *v54;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v61;
    _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding FenceIssueDelayedTriggers to %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    v133 = *v54;
    v161 = 67174657;
    LODWORD(v162) = v133;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding FenceIssueDelayedTriggers to %{private}d",  &v161,  v157);
    v135 = (char *)v134;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v134);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  *(_DWORD *)(v5 + 144),  (int)a2,  a4);
  int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x80000) == 0)
  {
LABEL_27:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }

    int v21 = *(double *)(a2 + 88);
    *(_DWORD *)(a1 + 132) |= 0x40u;
    *(double *)(a1 + 88) = v21;
    if ((*(_DWORD *)(a2 + 132) & 0x80) == 0) {
      return *(float *)&v21;
    }
    goto LABEL_52;
  }

  return *(float *)&v21;
}

      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

    ++v8;
  }

  while (v8 != 3);
}

    a1[4] = a1[3];
  }

  sub_1001BA1BC(v45);
  return v6;
}

    uint64_t v9 = 0LL;
LABEL_52:
    if (SHIBYTE(v68) < 0) {
      operator delete(__p[1]);
    }
    if (v12)
    {
      int v37 = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    goto LABEL_59;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_1018819B8);
  }
  uint64_t v5 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,TBA,NULL Island", buf, 2u);
  }

  if (!sub_1002921D0(115, 2)) {
    return 0LL;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_1018819B8);
  }
  LOWORD(v58[0]) = 0;
  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,TBA,NULL Island",  v58,  2);
  int v7 = (uint8_t *)v6;
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)",  "%s\n",  v6);
LABEL_66:
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

  int v30 = *(void *)(a1 + 56);
  if (!v30) {
    int v30 = *(void *)(qword_1019A20E0 + 56);
  }
  unint64_t v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E3E8B0(v30);
  unint64_t v33 = (int)v31;
  else {
    uint64_t v34 = 1;
  }
  uint64_t v4 = (v4 + v33 + v34 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x80) == 0)
  {
LABEL_25:
    if ((v3 & 0x100) == 0) {
      goto LABEL_69;
    }
    goto LABEL_63;
  }

  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  uint64_t v46 = *(void **)a3;
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    unsigned int v47 = 0LL;
    do
    {
      int v48 = sub_1002FAEF4((uint64_t)&v89, &v46[v47]);
      int v49 = v48;
      unsigned int v51 = (char *)a4[1];
      int v50 = (char *)a4[2];
      if (v51 >= v50)
      {
        int v54 = 0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)*a4) >> 3);
        unsigned int v55 = v54 + 1;
        if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unsigned int v56 = 0xAAAAAAAAAAAAAAABLL * ((v50 - (_BYTE *)*a4) >> 3);
        if (2 * v56 > v55) {
          unsigned int v55 = 2 * v56;
        }
        if (v56 >= 0x555555555555555LL) {
          unsigned int v57 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unsigned int v57 = v55;
        }
        if (v57) {
          unsigned int v58 = (char *)sub_10000701C((uint64_t)(a4 + 2), v57);
        }
        else {
          unsigned int v58 = 0LL;
        }
        v59 = &v58[24 * v54];
        unsigned int v60 = *(_OWORD *)v49;
        *((void *)v59 + 2) = *(void *)(v49 + 16);
        *(_OWORD *)v59 = v60;
        int v62 = (char *)*a4;
        v61 = (char *)a4[1];
        uint64_t v63 = v59;
        if (v61 != *a4)
        {
          do
          {
            uint64_t v64 = *(_OWORD *)(v61 - 24);
            *((void *)v63 - 1) = *((void *)v61 - 1);
            *(_OWORD *)(v63 - 24) = v64;
            v63 -= 24;
            v61 -= 24;
          }

          while (v61 != v62);
          v61 = (char *)*a4;
        }

        int v53 = v59 + 24;
        *a4 = v63;
        a4[1] = v59 + 24;
        a4[2] = &v58[24 * v57];
        if (v61) {
          operator delete(v61);
        }
      }

      else
      {
        int v52 = *(_OWORD *)v48;
        *((void *)v51 + 2) = *(void *)(v48 + 16);
        *(_OWORD *)unsigned int v51 = v52;
        int v53 = v51 + 24;
      }

      a4[1] = v53;
      ++v47;
      uint64_t v46 = *(void **)a3;
    }

    while (v47 < (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  }

  sub_100008390((uint64_t)&v89, v90);
}

  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "maxAbsY", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0xDu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfCyclingPostImpact", *(void *)(a1 + 32));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 176), 0x2Cu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000LL) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000LL) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }

  int v10 = *(_DWORD *)(a2 + 96);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 96) = v10;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xEu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }

  unint64_t v26 = *(void *)(a2 + 312);
  v10 |= 0x800u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 312) = v26;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20000) == 0)
  {
LABEL_19:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }

  uint64_t v4 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 128) = v3;
  *(void *)(a1 + 24) = v4;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_28:
    if ((v2 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0) {
      goto LABEL_26;
    }
LABEL_53:
    PB::TextFormatter::format(this, "timestampAccelUnfiltered", *(double *)(a1 + 24));
    if ((*(_DWORD *)(a1 + 128) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x18u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_26:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x1Au);
  }

  int v23 = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 212) |= 0x2000u;
  *(_DWORD *)(a1 + 148) = v23;
  int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x100000) == 0)
  {
LABEL_22:
    if ((v10 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0xBu);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000) == 0)
  {
LABEL_20:
    if ((v14 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

  uint64_t result = *(float *)(a2 + 32);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 32) = result;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "rawRmsMax", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }

  uint64_t result = *(float *)(a2 + 68);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 68) = result;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 1) == 0)
  {
LABEL_24:
    if ((v2 & 2) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "numBarosInEpoch", *(_DWORD *)(a1 + 108));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }

  int v23 = *(_DWORD *)(a2 + 116);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 116) = v23;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "streamEndSpeed", *(float *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0xCEu);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }

  int v19 = *(_DWORD *)(a2 + 96);
  v3 |= 0x10000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 96) = v19;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "freefallTpQualifier", *(_BYTE *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0x11u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "chaosMet", *(_BYTE *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x400000000LL) == 0)
  {
LABEL_5:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_6;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 4u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_53;
  }

  uint64_t v6 = *(_BYTE *)(a2 + 162);
  v3 |= 0x2000000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_BYTE *)(a1 + 162) = v6;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xCu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }

  int v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 40) = v7;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "signalRateBaselineSigmaKcpss", *(float *)(a1 + 100));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 0x17u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }

  int v18 = *(_DWORD *)(a2 + 120);
  v3 |= 0x800000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 120) = v18;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "pearlSessionOffTs", *(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0x10u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }

  uint64_t v4 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 136) = v3;
  *(void *)(a1 + 8) = v4;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "qx", *(float *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 133), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 208) & 2) != 0) {
    goto LABEL_52;
  }
  return result;
}

  int v12 = *(_DWORD *)(a2 + 148);
  v3 |= 0x800000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 148) = v12;
  int v2 = *(void *)(a2 + 212);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "numShortAudio", *(_DWORD *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0xAu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }

  uint64_t result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 152) = result;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ5", *(double *)(a1 + 152));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }

  uint64_t result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 144) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x800) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P95", *(double *)(a1 + 184));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
LABEL_53:
    PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P5", *(double *)(a1 + 200));
    if ((*(_DWORD *)(a1 + 216) & 0x2000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 0x18u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x1Au);
  }

  PB::TextFormatter::format(this, "pushCount", *(_DWORD *)(a1 + 136));
  uint64_t v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x15u);
  uint64_t v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x2000) == 0)
  {
LABEL_28:
    if ((v8 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  uint64_t result = *(float *)(a2 + 104);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 104) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "pressureFFTBin5", *(float *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
LABEL_53:
    PB::TextFormatter::format(this, "stdPressure", *(float *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 116) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x18u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 16), 0x1Au);
  }

  PB::TextFormatter::format(this, "boundaryType", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 181), 5u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000LL) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }

  int v25 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 84) = v25;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80000) == 0)
  {
LABEL_27:
    if ((v2 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "vehicularGpsHint", *(_BYTE *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x17u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }

  int v30 = *(_DWORD *)(a2 + 148);
  v5 |= 0x80000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 148) = v30;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }

  int v20 = *(_DWORD *)(a2 + 180);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 180) = v20;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

  int v19 = *(_DWORD *)(a2 + 148);
  v5 |= 0x8000000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 148) = v19;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "isMoving", *(_DWORD *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 9u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }

  int v20 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 88) = v20;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "likelyOnGymMachine", *(_BYTE *)(a1 + 125));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }

  int v23 = *(_DWORD *)(a2 + 104);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 104) = v23;
  if ((*(_DWORD *)(a2 + 164) & 0x80) != 0)
  {
LABEL_18:
    uint64_t v9 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a1 + 164) = v6 | 0x80;
    *(_DWORD *)(a1 + 92) = v9;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
LABEL_53:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xDu);
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  int v10 = *(_DWORD *)(a2 + 208);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 208) = v10;
  int v2 = *(void *)(a2 + 224);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "isFlat", *(_BYTE *)(a1 + 218));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 204), 0xFu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }

  BOOL v24 = *(_DWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v24;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "kalmanMeasurementNoisePedometer", *(double *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }

  unint64_t v26 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 8) = v26;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x400000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }

  PB::TextFormatter::format(this, "swingAccelMeanXBackwards", *(double *)(a1 + 176));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
LABEL_53:
    PB::TextFormatter::format(this, "userAccelTMeanXBackards", *(double *)(a1 + 192));
    if ((*(_DWORD *)(a1 + 212) & 0x1000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184), 0x18u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 208), 0x1Au);
  }

uint64_t sub_100070A24(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 192);
  if ((v3 & 0x1FE) != 0)
  {
    if ((v3 & 2) != 0)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32),  a2)
         + 1;
      int v3 = *(_DWORD *)(a1 + 192);
    }

    else
    {
      int v4 = 0;
    }

    if ((v3 & 4) != 0) {
      int v6 = v4 + 9;
    }
    else {
      int v6 = v4;
    }
    if ((v3 & 8) != 0)
    {
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v7 & 0x80000000) != 0)
      {
        int v8 = 10;
      }

      else if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 192);
      }

      else
      {
        int v8 = 1;
      }

      v6 += v8 + 1;
    }

    if ((v3 & 0x10) != 0)
    {
      uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
      if ((v9 & 0x80000000) != 0)
      {
        int v10 = 10;
      }

      else if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
        int v3 = *(_DWORD *)(a1 + 192);
      }

      else
      {
        int v10 = 1;
      }

      v6 += v10 + 1;
    }

    if ((v3 & 0x80) != 0) {
      int v5 = v6 + 2;
    }
    else {
      int v5 = v6;
    }
  }

  else
  {
    int v5 = 0;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_71;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 112);
    if (!v11) {
      uint64_t v11 = *(void *)(qword_1019A0880 + 112);
    }
    int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006C8FC(v11, a2);
    int v13 = (int)v12;
    else {
      int v14 = 1;
    }
    v5 += v13 + v14 + 1;
    int v3 = *(_DWORD *)(a1 + 192);
    if ((v3 & 0x200) == 0)
    {
LABEL_29:
      if ((v3 & 0x400) == 0) {
        goto LABEL_30;
      }
      goto LABEL_45;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_29;
  }

  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 108);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    int v3 = *(_DWORD *)(a1 + 192);
  }

  else
  {
    int v16 = 1;
  }

  v5 += v16 + 1;
  if ((v3 & 0x400) == 0)
  {
LABEL_30:
    if ((v3 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_51;
  }

LABEL_87:
  unint64_t v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 168);
  if (v33 >= 0x80)
  {
    int v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2);
    int v3 = *(_DWORD *)(a1 + 192);
  }

  else
  {
    int v34 = 1;
  }

  v5 += v34 + 2;
  if ((v3 & 0x80000) == 0)
  {
LABEL_76:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_77;
    }
LABEL_95:
    int v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 184);
    if (v37 >= 0x80)
    {
      int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2) + 2;
      int v3 = *(_DWORD *)(a1 + 192);
    }

    else
    {
      int v38 = 3;
    }

    v5 += v38;
    if ((v3 & 0x200000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_99;
  }

    int v54 = operator new(0x18uLL);
    *int v54 = 0LL;
    v54[1] = v33;
    v54[2] = v23;
    int v55 = (float)(unint64_t)(*((void *)&v98 + 1) + 1LL);
    if (!v34 || (float)(v99 * (float)v34) < v55)
    {
      int v56 = (v34 & (v34 - 1)) == 0;
      if (v34 < 3) {
        int v56 = 0;
      }
      int v57 = (2 * v34) | !v56;
      int v58 = vcvtps_u32_f32(v55 / v99);
      if (v57 <= v58) {
        prime = (int8x8_t)v58;
      }
      else {
        prime = (int8x8_t)v57;
      }
      if (*(void *)&prime == 1LL)
      {
        prime = (int8x8_t)2LL;
      }

      else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        int v34 = (unint64_t)__p[1];
      }

      if (*(void *)&prime > v34) {
        goto LABEL_99;
      }
      if (*(void *)&prime < v34)
      {
        uint64_t v66 = vcvtps_u32_f32((float)*((unint64_t *)&v98 + 1) / v99);
        if (v34 < 3 || (int v67 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
        {
          uint64_t v66 = std::__next_prime(v66);
        }

        else
        {
          v68 = 1LL << -(char)__clz(v66 - 1);
          if (v66 >= 2) {
            uint64_t v66 = v68;
          }
        }

        if (*(void *)&prime <= v66) {
          prime = (int8x8_t)v66;
        }
        if (*(void *)&prime >= v34)
        {
          int v34 = (unint64_t)__p[1];
        }

        else
        {
          if (prime)
          {
LABEL_99:
            if (*(void *)&prime >> 61) {
              sub_1000070D4();
            }
            unsigned int v60 = operator new(8LL * *(void *)&prime);
            int v61 = __p[0];
            __p[0] = v60;
            if (v61) {
              operator delete(v61);
            }
            int v62 = 0LL;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v62++) = 0LL;
            while (*(void *)&prime != v62);
            int v63 = (void **)v98;
            if ((void)v98)
            {
              uint64_t v64 = *(void *)(v98 + 8);
              int v65 = (uint8x8_t)vcnt_s8(prime);
              v65.i16[0] = vaddlv_u8(v65);
              if (v65.u32[0] > 1uLL)
              {
                if (v64 >= *(void *)&prime) {
                  v64 %= *(void *)&prime;
                }
              }

              else
              {
                v64 &= *(void *)&prime - 1LL;
              }

              *((void *)__p[0] + v64) = &v98;
              for (i = *v63; i; uint64_t v64 = v70)
              {
                int v70 = i[1];
                if (v65.u32[0] > 1uLL)
                {
                  if (v70 >= *(void *)&prime) {
                    v70 %= *(void *)&prime;
                  }
                }

                else
                {
                  v70 &= *(void *)&prime - 1LL;
                }

                if (v70 != v64)
                {
                  if (!*((void *)__p[0] + v70))
                  {
                    *((void *)__p[0] + v70) = v63;
                    goto LABEL_124;
                  }

                  *int v63 = (void *)*i;
                  *uint64_t i = **((void **)__p[0] + v70);
                  **((void **)__p[0] + v70) = i;
                  uint64_t i = v63;
                }

                int v70 = v64;
LABEL_124:
                int v63 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }

            int v34 = (unint64_t)prime;
            goto LABEL_128;
          }

          int v74 = __p[0];
          __p[0] = 0LL;
          if (v74) {
            operator delete(v74);
          }
          int v34 = 0LL;
          __p[1] = 0LL;
        }
      }

  uint64_t result = *(double *)(a2 + 80);
  *(_DWORD *)(a1 + 292) |= 0x400u;
  *(double *)(a1 + 80) = result;
  int v54 = *(_DWORD *)(a2 + 292);
  if ((v54 & 0x800) == 0)
  {
LABEL_75:
    if ((v54 & 0x1000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_89;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  (int)a2,  *(double *)(v5 + 120),  a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }

  unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v29 & 0x80000000) != 0)
  {
    int v30 = 10;
  }

  else if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
    int v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    int v30 = 1;
  }

  int v4 = (v4 + v30 + 1);
  if ((v3 & 0x2000) == 0)
  {
LABEL_64:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_99;
  }

  int v89 = (std::__shared_weak_count *)*((void *)&v179 + 1);
  if (*((void *)&v179 + 1))
  {
    unsigned int v90 = (unint64_t *)(*((void *)&v179 + 1) + 8LL);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }

  v92 = (std::__shared_weak_count *)*((void *)&v180 + 1);
  if (*((void *)&v180 + 1))
  {
    v93 = (unint64_t *)(*((void *)&v180 + 1) + 8LL);
    do
      int v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }

  sub_10049108C(v181);
}

    int v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_workoutType);
    goto LABEL_88;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_endTime),  @"endTime");
  has = (char)self->_has;
  if ((has & 4) != 0) {
    goto LABEL_9;
  }
LABEL_6:
  if ((has & 2) != 0) {
    goto LABEL_89;
  }
LABEL_93:
  sessionId = self->_sessionId;
  if (sessionId) {
    [v3 setObject:sessionId forKey:@"sessionId"];
  }
  return v3;
}

  int v45 = *(void *)(a2 + 144);
  v5 |= 0x20000uLL;
  *int v2 = v5;
  *(void *)(a1 + 144) = v45;
  int v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_89;
  }

  PB::TextFormatter::format(this, "sosConsideredSensorTime", *(void *)(a1 + 312));
  int v6 = *v5;
  if ((*v5 & 0x8000000000LL) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 0x58u);
  int v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 385), 0x36u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_89;
  }

  uint64_t result = *(float *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 136) = result;
  int v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800000000LL) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }

  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 160));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000000000LL) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0x25u);
  int v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_89;
  }

          *(_DWORD *)(a1 + 36) = v35;
          goto LABEL_96;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 2u;
          int v38 = *((void *)this + 1);
          uint64_t v39 = *((void *)this + 2);
          int v40 = *(void *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5LL && v38 + 10 <= v39)
          {
            char v41 = 0;
            uint64_t v42 = 0;
            unint64_t v43 = 0LL;
            do
            {
              int v44 = v38 + 1;
              *((void *)this + 1) = v38 + 1;
              int v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0) {
                goto LABEL_91;
              }
              v41 += 7;
              int v38 = v44;
              int v16 = v42++ > 8;
            }

            while (!v16);
LABEL_73:
            LODWORD(v43) = 0;
            goto LABEL_91;
          }

          int v63 = 0;
          uint64_t v64 = 0;
          unint64_t v43 = 0LL;
          if (v39 <= v38) {
            uint64_t v39 = *((void *)this + 1);
          }
          while (2)
          {
            if (v39 == v38)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v65 = v38 + 1;
              uint64_t v66 = *(_BYTE *)(v40 + v38);
              *((void *)this + 1) = v65;
              v43 |= (unint64_t)(v66 & 0x7F) << v63;
              if (v66 < 0)
              {
                v63 += 7;
                int v38 = v65;
                int v16 = v64++ > 8;
                if (v16) {
                  goto LABEL_73;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v43) = 0;
              }
            }

            break;
          }

            PB::Reader::recallMark(this, v81);
          }

          else
          {
            int v62 = *(char **)(a1 + 16);
            int v61 = *(void *)(a1 + 24);
            if ((unint64_t)v62 >= v61)
            {
              int v69 = (char *)*v10;
              int v70 = (v62 - (_BYTE *)*v10) >> 3;
              int v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61) {
LABEL_132:
              }
                sub_100007008();
              unsigned int v72 = v61 - (void)v69;
              if (v72 >> 2 > v71) {
                int v71 = v72 >> 2;
              }
              else {
                int v73 = v71;
              }
              if (v73)
              {
                int v74 = (char *)sub_1000071BC(v11, v73);
                int v69 = *(char **)(a1 + 8);
                int v62 = *(char **)(a1 + 16);
              }

              else
              {
                int v74 = 0LL;
              }

              uint64_t v77 = &v74[8 * v70];
              *(void *)uint64_t v77 = 0LL;
              unsigned int v60 = v77 + 8;
              while (v62 != v69)
              {
                uint64_t v78 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v77 - 1) = v78;
                v77 -= 8;
              }

              *(void *)(a1 + 8) = v77;
              *(void *)(a1 + 16) = v60;
              *(void *)(a1 + 24) = &v74[8 * v73];
              if (v69) {
                operator delete(v69);
              }
            }

            else
            {
              *(void *)int v62 = 0LL;
              unsigned int v60 = v62 + 8;
            }

            *(void *)(a1 + 16) = v60;
LABEL_118:
            v79 = *((void *)this + 1);
            if (v79 <= 0xFFFFFFFFFFFFFFF7LL && v79 + 8 <= *((void *)this + 2))
            {
              *(v60 - 1) = *(void *)(*(void *)this + v79);
LABEL_122:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_120:
              *((_BYTE *)this + 24) = 1;
            }
          }

  uint64_t result = *(float *)(a2 + 132);
  v5 |= 0x400000uLL;
  *int v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 132) = result;
  int v7 = *v3;
  int v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_22:
    if ((v7 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }

  PB::TextFormatter::format(this, "deltaVZOverEpoch", *(float *)(a1 + 136));
  int v6 = *v5;
  int v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0x11u);
  int v6 = *v4;
  int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_22:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }

  int v16 = *(_BYTE *)(a2 + 276);
  v6 |= 0x100u;
  *int v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 276) = v16;
  int v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_89;
  }

  PB::TextFormatter::format(this, "audioDvEnergyThresholdMax", *(float *)(a1 + 44));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 8u);
  int v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x100) == 0)
  {
LABEL_13:
    if ((v6 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_89;
  }

  uint64_t result = *(float *)(a2 + 48);
  v3 |= 0x40uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 48) = result;
  int v2 = *(void *)(a2 + 172);
  if ((v2 & 0x80) == 0)
  {
LABEL_44:
    if ((v2 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_89;
  }

  PB::TextFormatter::format(this, "rmsSampleCount", *(_DWORD *)(a1 + 136));
  int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x200000000000LL) == 0)
  {
LABEL_41:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0xD0u);
  int v4 = *(void *)(v3 + 172);
  if ((v4 & 1) == 0)
  {
LABEL_42:
    if ((v4 & 2) == 0) {
      goto LABEL_43;
    }
    goto LABEL_89;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  int v2 = *(void *)(a2 + 184);
  if ((v2 & 0x800000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_89;
  }

  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 156));
  int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x800000000LL) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x29u);
  int v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }

  int v38 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 56) = v38;
  int v2 = *(void *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }

  PB::TextFormatter::format(this, "srcUserAccelInertial_Z", *(float *)(a1 + 124));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_89;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x24u);
  int v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000000LL) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }

LABEL_91:
  unint64_t v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 172);
  if (v35 >= 0x80)
  {
    int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2) + 2;
    int v3 = *(_DWORD *)(a1 + 192);
  }

  else
  {
    int v36 = 3;
  }

  v5 += v36;
  if ((v3 & 0x100000) != 0) {
    goto LABEL_95;
  }
LABEL_77:
  if ((v3 & 0x200000) == 0) {
    goto LABEL_108;
  }
LABEL_99:
  uint64_t v39 = *(void *)(a1 + 176);
  int v40 = *(unsigned __int8 *)(v39 + 23);
  char v41 = v40;
  uint64_t v42 = *(void *)(v39 + 8);
  if ((v40 & 0x80u) == 0) {
    unint64_t v43 = *(unsigned __int8 *)(v39 + 23);
  }
  else {
    unint64_t v43 = v42;
  }
  if (v43 >= 0x80)
  {
    int v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v43,  a2);
    int v40 = *(unsigned __int8 *)(v39 + 23);
    uint64_t v42 = *(void *)(v39 + 8);
    char v41 = *(_BYTE *)(v39 + 23);
  }

  else
  {
    int v44 = 1;
  }

  if (v41 < 0) {
    int v40 = v42;
  }
  v5 += v44 + v40 + 2;
LABEL_108:
  int v45 = *(_DWORD *)(a1 + 16);
  int v46 = v45 + v5;
  if (v45 >= 1)
  {
    uint64_t v47 = 0LL;
    do
    {
      int v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006AB44( *(void *)(*(void *)(a1 + 8) + 8 * v47),  a2);
      int v49 = (int)v48;
      else {
        int v50 = 1;
      }
      v46 += v49 + v50;
      ++v47;
    }

    while (v47 < *(int *)(a1 + 16));
  }

  int v51 = *(_DWORD *)(a1 + 64);
  int v52 = v51 + v46;
  if (v51 >= 1)
  {
    uint64_t v53 = 0LL;
    do
    {
      int v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006B2EC( *(void *)(*(void *)(a1 + 56) + 8 * v53),  a2);
      int v55 = (int)v54;
      else {
        int v56 = 1;
      }
      v52 += v55 + v56;
      ++v53;
    }

    while (v53 < *(int *)(a1 + 64));
  }

  int v57 = *(_DWORD *)(a1 + 88);
  int v58 = v57 + v52;
  if (v57 >= 1)
  {
    uint64_t v59 = 0LL;
    do
    {
      unsigned int v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006BC2C( *(void *)(*(void *)(a1 + 80) + 8 * v59),  a2);
      int v61 = (int)v60;
      else {
        int v62 = 1;
      }
      v58 += v61 + v62;
      ++v59;
    }

    while (v59 < *(int *)(a1 + 88));
  }

  int v63 = *(_DWORD *)(a1 + 144);
  if (v63 < 1)
  {
    int v65 = 0;
  }

  else
  {
    uint64_t v64 = 0LL;
    int v65 = 0;
    do
    {
      if ((v66 & 0x80000000) != 0)
      {
        int v67 = 10;
      }

      else if (v66 >= 0x80)
      {
        int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66, a2);
        int v63 = *(_DWORD *)(a1 + 144);
      }

      else
      {
        int v67 = 1;
      }

      v65 += v67;
      ++v64;
    }

    while (v64 < v63);
  }

  uint64_t result = (v65 + v58 + v63);
  *(_DWORD *)(a1 + 188) = result;
  return result;
}

  int v26 = *(void *)(v5 + 160);
  if (!v26) {
    int v26 = *(void *)(qword_1019A0978 + 160);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  v26,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }

    int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 128);
    if ((v25 & 0x80000000) != 0)
    {
      int v26 = 12;
    }

    else if (v25 >= 0x80)
    {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 2;
      int v3 = *(_DWORD *)(a1 + 152);
    }

    else
    {
      int v26 = 3;
    }

    LODWORD(sub_1012279C0(0LL, v4, v5) = v26 + v5;
    if ((v3 & 0x80000) == 0)
    {
LABEL_103:
      unsigned int v29 = v5 + 10;
      if ((v3 & 0x100000) == 0) {
        unsigned int v29 = v5;
      }
      if ((v3 & 0x200000) != 0) {
        int v5 = v29 + 3;
      }
      else {
        int v5 = v29;
      }
      goto LABEL_108;
    }

  int v13 = *(void *)(v5 + 136);
  if (!v13) {
    int v13 = *(void *)(qword_1019A0BA0 + 136);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  v13,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_95;
  }

      if ((v76[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v76[8]);
      }
LABEL_93:
      if (Count == ++v15) {
        goto LABEL_141;
      }
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v25 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v15 + 1;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = *(_DWORD *)v77;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "WifiScan, addAp, %{public}d, badrssi, %{public}d, #CloneMe",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      *(_DWORD *)int v62 = 67240448;
      *(_DWORD *)&v62[4] = v15 + 1;
      *(_WORD *)&v62[8] = 1026;
      *(_DWORD *)&v62[10] = *(_DWORD *)v77;
      LODWORD(v46) = 14;
      int v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiScan, addAp, %{public}d, badrssi, %{public}d, #CloneMe",  v62,  v46);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPo int> &, const char *)",  "%s\n",  v26);
      goto LABEL_122;
    }

    goto LABEL_84;
  }

  uint64_t v17 = 0;
  int v55 = 0;
  uint64_t v53 = 0LL;
  int v16 = 0;
LABEL_141:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  unint64_t v43 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448002;
    *(void *)&buf[4] = a5;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = Count;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&buf[24] = *((void *)&v60 + 1);
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v53;
    uint64_t v81 = 1026;
    v82 = v55;
    int v83 = 1026;
    int v84 = v17;
    int v85 = 1026;
    unsigned int v86 = HIDWORD(v53);
    int v87 = 1026;
    LODWORD(v88) = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "WifiScan, addAps, %{public}s, returned, %{public}ld, unique, %{public}ld, insert, %{public}d, keep, %{public}d, er ror, %{public}d, stale, %{public}d, ignore, %{public}d",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    *(_DWORD *)int v76 = 136448002;
    *(void *)&v76[4] = a5;
    *(_WORD *)&v76[12] = 2050;
    *(void *)&v76[14] = Count;
    *(_WORD *)&v76[22] = 2050;
    *(void *)&v76[24] = *((void *)&v60 + 1);
    *(_WORD *)uint64_t v77 = 1026;
    *(_DWORD *)&v77[2] = v53;
    *(_WORD *)&v77[6] = 1026;
    *(_DWORD *)&v77[8] = v55;
    *(_WORD *)&v77[12] = 1026;
    *(_DWORD *)&v77[14] = v17;
    *(_WORD *)&v77[18] = 1026;
    *(_DWORD *)&v77[20] = HIDWORD(v53);
    *(_WORD *)&v77[24] = 1026;
    *(_DWORD *)&v77[26] = v16;
    LODWORD(v46) = 62;
    int v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "WifiScan, addAps, %{public}s, returned, %{public}ld, unique, %{public}ld, insert, %{public}d, keep, %{public}d, error, %{public}d, stale, %{public}d, ignore, %{public}d",  v76,  v46);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoin t> &, const char *)",  "%s\n",  v45);
    if (v45 != buf) {
      free(v45);
    }
  }

  return sub_100019CEC((uint64_t)&v59);
}

  int v26 = *(void *)(v5 + 160);
  if (!v26) {
    int v26 = *(void *)(qword_1019A11B8 + 160);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  v26,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }

  sub_1002F0B04(buf);
  int v85 = (uint64_t *)(a1 + 768);
  unsigned int v86 = sub_1002A82BC(*(uint64_t *)&buf[0], "FenceMonitorConsolidatedTriggersTimeInterval", (void *)(a1 + 768));
  int v87 = v86;
  int v88 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_95;
  }
  int v89 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    unsigned int v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
    if (!v87) {
      goto LABEL_101;
    }
  }

  else
  {
LABEL_95:
    if (!v86) {
      goto LABEL_101;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  v91 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    v92 = *v85;
    LODWORD(buf[0]) = 134283521;
    *(void *)((char *)buf + 4) = v92;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding fConsolidatedTriggersTimeInterval, %{private}.1lf",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    v145 = *v85;
    v161 = 134283521;
    v162 = v145;
    LODWORD(v157) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding fConsolidatedTriggersTimeInterval, %{private}.1lf",  &v161,  v157);
    v147 = (char *)v146;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v146);
  }

  int v25 = *(void *)(v5 + 168);
  if (!v25) {
    int v25 = *(void *)(qword_1019A1D38 + 168);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  v25,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_97;
  }

    int v16 = 1LL;
LABEL_92:
    if (v43) {
      fseek(a2, v43, 1);
    }
    free(v45);
    if (v67) {
      free(v67);
    }
    if ((v16 & 1) == 0) {
      goto LABEL_195;
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018799E8);
  }
  int v109 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349824;
    *(void *)&buf[4] = 12LL;
    v182 = 1026;
    *(_DWORD *)v183 = (unsigned __int16)v165;
    *(_WORD *)&v183[4] = 1026;
    *(_DWORD *)&v183[6] = WORD1(v165);
    *(_WORD *)v184 = 1026;
    *(_DWORD *)&v184[2] = v166;
    _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_ERROR,  "WifiTile, Invalid section signature, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public }d, sizeBytes, %{public}d, #CloneMe",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018799E8);
    }
    v172 = 134349824;
    v173 = 12LL;
    v174 = 1026;
    *(_DWORD *)v175 = (unsigned __int16)v165;
    *(_WORD *)&v175[4] = 1026;
    *(_DWORD *)&v175[6] = WORD1(v165);
    *(_WORD *)v176 = 1026;
    *(_DWORD *)&v176[2] = v166;
    LODWORD(v153) = 30;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiTile, Invalid section signature, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public }d, sizeBytes, %{public}d, #CloneMe",  &v172,  v153);
    v150 = (char *)v149;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v149);
    if (v150 != buf) {
      free(v150);
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_1018799E8);
  }
  v110 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    unsigned int v111 = *(void *)a3;
    *(_DWORD *)buf = 136447746;
    *(void *)&buf[4] = v111;
    v182 = 2050;
    *(void *)v183 = 12LL;
    *(_WORD *)&v183[8] = 1026;
    *(_DWORD *)v184 = (unsigned __int16)v165;
    *(_WORD *)&v184[4] = 1026;
    *(_DWORD *)&v184[6] = WORD1(v165);
    *(_WORD *)&v184[10] = 1026;
    *(_DWORD *)&v184[12] = v166;
    *(_WORD *)&v184[16] = 1026;
    v185 = HIDWORD(v165);
    v186 = 1026;
    v187 = WORD1(v165);
    _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "WifiTile, message, %{public}s, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, si zeBytes, %{public}d, headerSizeBytes, %{public}d, sectionId, %{public}d, #CloneMe",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018799E8);
    }
    v112 = *(void *)a3;
    v172 = 136447746;
    v173 = v112;
    v174 = 2050;
    *(void *)v175 = 12LL;
    *(_WORD *)&v175[8] = 1026;
    *(_DWORD *)v176 = (unsigned __int16)v165;
    *(_WORD *)&v176[4] = 1026;
    *(_DWORD *)&v176[6] = WORD1(v165);
    *(_WORD *)&v176[10] = 1026;
    *(_DWORD *)&v176[12] = v166;
    *(_WORD *)&v176[16] = 1026;
    v177 = HIDWORD(v165);
    v178 = 1026;
    v179 = WORD1(v165);
    LODWORD(v153) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiTile, message, %{public}s, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, si zeBytes, %{public}d, headerSizeBytes, %{public}d, sectionId, %{public}d, #CloneMe",  &v172,  v153);
    v114 = (char *)v113;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v113);
    if (v114 != buf) {
      free(v114);
    }
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  unsigned int v29 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v30 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfDecimatedLowFrequencyFFT";
    v193 = 2048;
    v194 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v108 = *(void *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfDecimatedLowFrequencyFFT";
    v189 = 2048;
    v190 = v108;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v110 = (uint8_t *)v109;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v109);
    if (v110 != buf) {
      free(v110);
    }
  }

  a4[2] = 1;
  int v10 = *(void *)(a1 + 24);
  if ((v10 & 0x800000) == 0)
  {
LABEL_12:
    if ((v10 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_103;
  }

  if (*(_BYTE *)(a1 + 192)) {
    return 0LL;
  }
  return 2LL;
}

  int v49 = *(void *)(a2 + 296);
  v5 |= 0x1000000000uLL;
  *int v2 = v5;
  *(void *)(a1 + 296) = v49;
  if ((*v3 & 0x2000000000LL) != 0) {
    goto LABEL_92;
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 393), 0x67u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0) {
    goto LABEL_92;
  }
LABEL_32:
  if ((v4 & 0x4000000) != 0) {
LABEL_33:
  }
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 390), 0x69u);
LABEL_34:
  int v5 = *(double **)(v3 + 32);
  int v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    int v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 0x97u);
  }

  int v8 = *(double **)(v3 + 8);
  uint64_t v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    int v10 = *v8++;
    uint64_t result = PB::Writer::write(this, v10, 0x98u);
  }

  uint64_t v11 = *(double **)(v3 + 56);
  int v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    int v13 = *v11++;
    uint64_t result = PB::Writer::write(this, v13, 0x99u);
  }

  int v14 = *(double **)(v3 + 104);
  int v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    int v16 = *v14++;
    uint64_t result = PB::Writer::write(this, v16, 0xA1u);
  }

  uint64_t v17 = *(double **)(v3 + 80);
  int v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    int v19 = *v17++;
    uint64_t result = PB::Writer::write(this, v19, 0xA2u);
  }

  int v20 = *(double **)(v3 + 128);
  int v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    int v22 = *v20++;
    uint64_t result = PB::Writer::write(this, v22, 0xA3u);
  }

  int v23 = *(double **)(v3 + 176);
  int v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    int v25 = *v23++;
    uint64_t result = PB::Writer::write(this, v25, 0xA4u);
  }

  int v26 = *(double **)(v3 + 152);
  uint64_t v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    int v28 = *v26++;
    uint64_t result = PB::Writer::write(this, v28, 0xA5u);
  }

  int v30 = *(double **)(v3 + 200);
  unsigned int v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    unint64_t v31 = *v30++;
    uint64_t result = PB::Writer::write(this, v31, 0xA6u);
  }

  return result;
}

  uint64_t result = *(float *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 132) = result;
  int v2 = *(void *)(a2 + 216);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_93;
  }

  PB::TextFormatter::format(this, "xMin", *(float *)(a1 + 176));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000000000LL) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_93;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0x29u);
  int v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_93;
  }

          *(_DWORD *)(a1 + 32) = v43;
          goto LABEL_96;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 8u;
          int v46 = *((void *)this + 1);
          uint64_t v47 = *((void *)this + 2);
          int v48 = *(void *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5LL && v46 + 10 <= v47)
          {
            int v49 = 0;
            int v50 = 0;
            int v51 = 0LL;
            do
            {
              int v52 = v46 + 1;
              *((void *)this + 1) = v46 + 1;
              uint64_t v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_95;
              }
              v49 += 7;
              int v46 = v52;
              int v16 = v50++ > 8;
            }

            while (!v16);
LABEL_80:
            LODWORD(v51) = 0;
            goto LABEL_95;
          }

          int v67 = 0;
          v68 = 0;
          int v51 = 0LL;
          if (v47 <= v46) {
            uint64_t v47 = *((void *)this + 1);
          }
          break;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          int v54 = *((void *)this + 1);
          if (v54 >= *((void *)this + 2))
          {
            int v57 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v55 = v54 + 1;
            int v56 = *(unsigned __int8 *)(*(void *)this + v54);
            *((void *)this + 1) = v55;
            int v57 = v56 != 0;
          }

          *(_BYTE *)(a1 + 44) = v57;
          goto LABEL_96;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 1u;
          int v58 = *((void *)this + 1);
          if (v58 <= 0xFFFFFFFFFFFFFFF7LL && v58 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v58);
            *((void *)this + 1) += 8LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_96;
        default:
          uint64_t result = PB::Reader::skip(this, v13 >> 3, v13 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_96;
      }

      while (1)
      {
        if (v47 == v46)
        {
          LODWORD(v51) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_95;
        }

        int v69 = v46 + 1;
        int v70 = *(_BYTE *)(v48 + v46);
        *((void *)this + 1) = v69;
        v51 |= (unint64_t)(v70 & 0x7F) << v67;
        if ((v70 & 0x80) == 0) {
          break;
        }
        v67 += 7;
        int v46 = v69;
        int v16 = v68++ > 8;
        if (v16) {
          goto LABEL_80;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v51) = 0;
      }
LABEL_95:
      *(_DWORD *)(a1 + 40) = v51;
LABEL_96:
      int v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v17 = 0;
    int v18 = 0;
    int v13 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      int v19 = v2 + 1;
      int v20 = *(_BYTE *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      int v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        int v13 = 0LL;
        goto LABEL_21;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t result = *(float *)(a2 + 92);
  v5 |= 0x1000uLL;
  *int v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 92) = result;
  int v7 = *v3;
  int v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_93;
  }

  PB::TextFormatter::format(this, "durationZBiggestImpact", *(float *)(a1 + 152));
  int v6 = *v5;
  int v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 2) == 0)
  {
LABEL_25:
    if ((v6 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_93;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x15u);
  int v6 = *v4;
  int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_93;
  }

  uint64_t result = *(float *)(a2 + 100);
  v5 |= 0x400000uLL;
  *int v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 100) = result;
  int v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_93;
  }

  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdMax", *(float *)(a1 + 60));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_93;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0xCu);
  int v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_93;
  }

  uint64_t result = *(float *)(a2 + 288);
  int v8 = v6 >> 16;
  v6 |= 0x20uLL;
  *int v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 288) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  int v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x800) == 0)
  {
LABEL_11:
    if ((v8 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_93;
  }

  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 32));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v7 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_93;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 288), 0x67u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  int v5 = *v4;
  if ((v4[1] & 0x800) == 0)
  {
LABEL_11:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_93;
  }

  int v14 = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 112) = v14;
  int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  int v2 = *(void *)(a2 + 204);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_93;
  }

  PB::TextFormatter::format(this, "chaosOrSaturationMet1", *(_BYTE *)(a1 + 162));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x10000000000LL) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000000000LL) == 0) {
      goto LABEL_13;
    }
    goto LABEL_93;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 168), 0x6Cu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  int v4 = *(void *)(v3 + 204);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_93;
  }

  uint64_t result = *(float *)(a2 + 56);
  v3 |= 0x100uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 56) = result;
  int v2 = *(void *)(a2 + 172);
  if ((v2 & 0x200) == 0)
  {
LABEL_48:
    if ((v2 & 0x400) == 0) {
      goto LABEL_49;
    }
    goto LABEL_93;
  }

  PB::TextFormatter::format(this, "thresholdMaxRMS", *(float *)(a1 + 148));
  int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_45:
    if ((v5 & 4) == 0) {
      goto LABEL_46;
    }
LABEL_93:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 24));
    if ((*(void *)(a1 + 172) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_47;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0xD4u);
  int v4 = *(void *)(v3 + 172);
  if ((v4 & 0x400) == 0)
  {
LABEL_46:
    if ((v4 & 0x800) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 68), 0xD6u);
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  if ((*(void *)(a2 + 184) & 0x100000000LL) == 0) {
    return *(float *)&v4;
  }
LABEL_92:
  LODWORD(v4) = *(_DWORD *)(a2 + 148);
  *(void *)(a1 + 184) = v3 | (unint64_t)&_mh_execute_header;
  *(_DWORD *)(a1 + 148) = v4;
  return *(float *)&v4;
}

  uint64_t v42 = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 64) = v42;
  int v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100000000LL) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }

  PB::TextFormatter::format(this, "srcYawRotationExtremaBuffer", *(float *)(a1 + 140));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000000LL) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0) {
      goto LABEL_42;
    }
    goto LABEL_93;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x28u);
  int v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_93;
  }

void sub_100070F28(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100070F74()
{
  return 1LL;
}

double sub_100070F7C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8),  (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8));
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = v4;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56),  (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 56));
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80),  (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 80));
    char v6 = *(_BYTE *)(a1 + 104);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a2 + 104) = v6;
    uint64_t v7 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a2 + 112) = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(a2 + 108) = v7;
    uint64_t v8 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = v8;
    uint64_t v9 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    double result = *(double *)(a2 + 144);
    *(void *)(a2 + 136) = v9;
    uint64_t v11 = *(void *)(a1 + 144);
    *(double *)(a1 + 144) = result;
    *(void *)(a2 + 144) = v11;
    LODWORD(v9) = *(_DWORD *)(a1 + 152);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 152) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 156);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a2 + 156) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    *(_DWORD *)(a2 + 160) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 164);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
    *(_DWORD *)(a2 + 164) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 168);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    *(_DWORD *)(a2 + 168) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_DWORD *)(a2 + 172) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 184);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a2 + 184) = v9;
    uint64_t v12 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = v12;
    LODWORD(v12) = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    *(_DWORD *)(a2 + 192) = v12;
    LODWORD(v12) = *(_DWORD *)(a1 + 188);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a2 + 188) = v12;
  }

  return result;
}

void *sub_100071128@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.Model");
}

uint64_t sub_100071138(uint64_t a1, _BYTE *a2)
{
  *(void *)a1 = off_10181AEA0;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_100071184(a1, a2);
  return a1;
}

void sub_100071170(_Unwind_Exception *a1)
{
}

void sub_100071184(uint64_t a1, _BYTE *a2)
{
  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  7603LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      char v6 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v6;
      int v5 = *((_DWORD *)a2 + 4);
    }

    if ((v5 & 2) != 0)
    {
      char v7 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_BYTE *)(a1 + 9) = v7;
    }
  }

void sub_10007122C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100071248(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AEA0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100071258(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AEA0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

_WORD *sub_100071278()
{
  double result = operator new(0x18uLL);
  *(void *)double result = off_10181AEA0;
  result[4] = 0;
  *((_DWORD *)result + 3) = 0;
  *((_DWORD *)result + 4) = 0;
  return result;
}

uint64_t sub_1000712A4(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_WORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1000712B8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      int v10 = (char *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v11 = v17;
        uint64_t v12 = (_BYTE *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
      }

      else
      {
        unsigned int v11 = *v10;
        uint64_t v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }

      *(_BYTE *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        uint64_t v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_23:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v13 = v16;
          int v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v13 = *v9;
          int v14 = (unsigned __int8 *)(v9 + 1);
          *((void *)this + 1) = v14;
        }

        *(_BYTE *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_23;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_100071464( uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 16);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(unsigned __int8 *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 16);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 9),  a2,  a4);
  }
  return result;
}

uint64_t sub_1000714BC(uint64_t a1)
{
  unsigned int v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  if ((*(_DWORD *)(a1 + 16) & 2) != 0) {
    v1 += 2;
  }
  else {
    uint64_t v2 = 0LL;
  }
  *(_DWORD *)(a1 + 12) = v2;
  return v2;
}

void sub_1000714E4(uint64_t a1, _BYTE *lpsrc)
{
}

void sub_100071530(uint64_t a1, _BYTE *a2)
{
  if (a2 != (_BYTE *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100071184(a1, a2);
  }

uint64_t sub_100071570()
{
  return 1LL;
}

void *sub_100071578@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.BundleIdFeatures");
}

void sub_100071588(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  7922LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227C8C();
      }
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 4) != 0)
    {
      unint64_t v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 4u;
      uint64_t v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v9 = (std::string *)operator new(0x18uLL);
        v9->__r_.__value_.__l.__size_ = 0LL;
        v9->__r_.__value_.__l.__cap_ = 0LL;
        v9->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v9;
      }

      std::string::operator=(v9, v8);
      int v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 8) == 0)
      {
LABEL_14:
        if ((v5 & 0x10) == 0) {
          return;
        }
        goto LABEL_22;
      }
    }

    else if ((v5 & 8) == 0)
    {
      goto LABEL_14;
    }

    int v10 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    unsigned int v11 = *(std::string **)(a1 + 24);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unsigned int v11 = (std::string *)operator new(0x18uLL);
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 24) = v11;
    }

    std::string::operator=(v11, v10);
    if ((*(_DWORD *)(a2 + 44) & 0x10) != 0)
    {
LABEL_22:
      uint64_t v12 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 0x10u;
      unsigned int v13 = *(std::string **)(a1 + 32);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unsigned int v13 = (std::string *)operator new(0x18uLL);
        v13->__r_.__value_.__l.__size_ = 0LL;
        v13->__r_.__value_.__l.__cap_ = 0LL;
        v13->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 32) = v13;
      }

      std::string::operator=(v13, v12);
    }
  }

void sub_100071748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100071760(void *a1)
{
  uint64_t v2 = a1[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[3];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[4];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

void sub_100071810(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AF18;
  sub_100071760(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100071840(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AF18;
  sub_100071760(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100071874()
{
  v0 = operator new(0x30uLL);
  void *v0 = off_10181AF18;
  *(void *)&double result = 0x100000001LL;
  v0[1] = 0x100000001LL;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[5] = 0LL;
  return result;
}

uint64_t sub_1000718B0(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0x100000001LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 44) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 44) & 0x10) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100071968( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        unint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_24:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v12 = ((1 << v9) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101227C8C();
            }
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }

          unsigned int v13 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            unsigned int v11 = v13 + 1;
            *((void *)this + 1) = v11;
            goto LABEL_36;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if ((_DWORD)result)
        {
          unsigned int v9 = v23;
          goto LABEL_24;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        unsigned int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_36:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v14 = v22;
        }

        else
        {
          unsigned int v14 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v14 - 1 <= 3)
        {
          *(_DWORD *)(a1 + 44) |= 2u;
          *(_DWORD *)(a1 + 12) = v14;
        }

        int v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_46:
        *(_DWORD *)(a1 + 44) |= 4u;
        unsigned int v16 = *(void **)(a1 + 16);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unsigned int v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 16) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_52:
        *(_DWORD *)(a1 + 44) |= 8u;
        int v18 = *(void **)(a1 + 24);
        if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v18 = operator new(0x18uLL);
          v18[1] = 0LL;
          v18[2] = 0LL;
          void *v18 = 0LL;
          *(void *)(a1 + 24) = v18;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v18);
        if (!(_DWORD)result) {
          return result;
        }
        int v19 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v19 + 1;
LABEL_58:
        *(_DWORD *)(a1 + 44) |= 0x10u;
        int v20 = *(void **)(a1 + 32);
        if (v20 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v20 = operator new(0x18uLL);
          v20[1] = 0LL;
          v20[2] = 0LL;
          void *v20 = 0LL;
          *(void *)(a1 + 32) = v20;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v20);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_46;
        }
        goto LABEL_19;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        goto LABEL_52;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_58;
        }
        goto LABEL_19;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_100071CC8( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_100071D78(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_50;
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 44) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    char v10 = v9;
    uint64_t v11 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12,  a2);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v11 = *(void *)(v8 + 8);
      int v3 = *(_DWORD *)(a1 + 44);
      char v10 = *(_BYTE *)(v8 + 23);
    }

    else
    {
      int v13 = 1;
    }

    if (v10 < 0) {
      int v9 = v11;
    }
    uint64_t v4 = (v4 + v13 + v9 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0) {
        goto LABEL_50;
      }
      goto LABEL_41;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }

  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18,  a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v16 = *(_BYTE *)(v14 + 23);
  }

  else
  {
    int v19 = 1;
  }

  if (v16 < 0) {
    int v15 = v17;
  }
  uint64_t v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_41:
    uint64_t v20 = *(void *)(a1 + 32);
    int v21 = *(unsigned __int8 *)(v20 + 23);
    char v22 = v21;
    uint64_t v23 = *(void *)(v20 + 8);
    if ((v21 & 0x80u) == 0) {
      unint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24,  a2);
      int v21 = *(unsigned __int8 *)(v20 + 23);
      uint64_t v23 = *(void *)(v20 + 8);
      char v22 = *(_BYTE *)(v20 + 23);
    }

    else
    {
      int v25 = 1;
    }

    if (v22 < 0) {
      int v21 = v23;
    }
    uint64_t v4 = (v4 + v25 + v21 + 1);
  }

void sub_100071F3C(uint64_t a1, void *lpsrc)
{
}

void sub_100071F88(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100071588(a1, a2);
  }

uint64_t sub_100071FC8()
{
  return 1LL;
}

void *sub_100071FD0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ReceivedEventAction");
}

void sub_100071FE0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  8253LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227CDC();
      }
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 4) != 0)
    {
      uint64_t v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 4u;
      int v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v9 = (std::string *)operator new(0x18uLL);
        v9->__r_.__value_.__l.__size_ = 0LL;
        v9->__r_.__value_.__l.__cap_ = 0LL;
        v9->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v9;
      }

      std::string::operator=(v9, v8);
      int v5 = *(_DWORD *)(a2 + 44);
      if ((v5 & 8) == 0)
      {
LABEL_14:
        if ((v5 & 0x10) == 0) {
          return;
        }
        goto LABEL_22;
      }
    }

    else if ((v5 & 8) == 0)
    {
      goto LABEL_14;
    }

    char v10 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    uint64_t v11 = *(std::string **)(a1 + 24);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v11 = (std::string *)operator new(0x18uLL);
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 24) = v11;
    }

    std::string::operator=(v11, v10);
    if ((*(_DWORD *)(a2 + 44) & 0x10) != 0)
    {
LABEL_22:
      unint64_t v12 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 0x10u;
      int v13 = *(std::string **)(a1 + 32);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v13 = (std::string *)operator new(0x18uLL);
        v13->__r_.__value_.__l.__size_ = 0LL;
        v13->__r_.__value_.__l.__cap_ = 0LL;
        v13->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 32) = v13;
      }

      std::string::operator=(v13, v12);
    }
  }

void sub_1000721A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000721B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AF90;
  sub_100071760(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000721E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181AF90;
  sub_100071760(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007221C()
{
  v0 = operator new(0x30uLL);
  void *v0 = off_10181AF90;
  *(void *)&double result = 0x10000000DLL;
  v0[1] = 0x10000000DLL;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[5] = 0LL;
  return result;
}

uint64_t sub_10007225C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0x10000000DLL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 44) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 44) & 0x10) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100072318( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_24:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v12 = ((1 << v9) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101227CDC();
            }
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }

          int v13 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            uint64_t v11 = v13 + 1;
            *((void *)this + 1) = v11;
            goto LABEL_36;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23);
        if ((_DWORD)result)
        {
          unsigned int v9 = v23;
          goto LABEL_24;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_36:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v14 = v22;
        }

        else
        {
          unsigned int v14 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v14 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 44) |= 2u;
          *(_DWORD *)(a1 + 12) = v14;
        }

        int v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_46:
        *(_DWORD *)(a1 + 44) |= 4u;
        char v16 = *(void **)(a1 + 16);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 16) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_52:
        *(_DWORD *)(a1 + 44) |= 8u;
        unint64_t v18 = *(void **)(a1 + 24);
        if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v18 = operator new(0x18uLL);
          v18[1] = 0LL;
          v18[2] = 0LL;
          void *v18 = 0LL;
          *(void *)(a1 + 24) = v18;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v18);
        if (!(_DWORD)result) {
          return result;
        }
        int v19 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v19 + 1;
LABEL_58:
        *(_DWORD *)(a1 + 44) |= 0x10u;
        uint64_t v20 = *(void **)(a1 + 32);
        if (v20 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v20 = operator new(0x18uLL);
          v20[1] = 0LL;
          v20[2] = 0LL;
          void *v20 = 0LL;
          *(void *)(a1 + 32) = v20;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v20);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_46;
        }
        goto LABEL_19;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        goto LABEL_52;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_58;
        }
        goto LABEL_19;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_100072678( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_100072728(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_50;
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 44) & 2) == 0) {
      goto LABEL_19;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    char v10 = v9;
    uint64_t v11 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12,  a2);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v11 = *(void *)(v8 + 8);
      int v3 = *(_DWORD *)(a1 + 44);
      char v10 = *(_BYTE *)(v8 + 23);
    }

    else
    {
      int v13 = 1;
    }

    if (v10 < 0) {
      int v9 = v11;
    }
    uint64_t v4 = (v4 + v13 + v9 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0) {
        goto LABEL_50;
      }
      goto LABEL_41;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }

  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18,  a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v16 = *(_BYTE *)(v14 + 23);
  }

  else
  {
    int v19 = 1;
  }

  if (v16 < 0) {
    int v15 = v17;
  }
  uint64_t v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_41:
    uint64_t v20 = *(void *)(a1 + 32);
    int v21 = *(unsigned __int8 *)(v20 + 23);
    char v22 = v21;
    uint64_t v23 = *(void *)(v20 + 8);
    if ((v21 & 0x80u) == 0) {
      unint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24,  a2);
      int v21 = *(unsigned __int8 *)(v20 + 23);
      uint64_t v23 = *(void *)(v20 + 8);
      char v22 = *(_BYTE *)(v20 + 23);
    }

    else
    {
      int v25 = 1;
    }

    if (v22 < 0) {
      int v21 = v23;
    }
    uint64_t v4 = (v4 + v25 + v21 + 1);
  }

void sub_1000728EC(uint64_t a1, void *lpsrc)
{
}

void sub_100072938(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100071FE0(a1, a2);
  }

uint64_t sub_100072978()
{
  return 1LL;
}

void *sub_100072980@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.RecordingRequest");
}

void sub_100072990(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  8552LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 32);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227D04();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      uint64_t v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0) {
          return;
        }
        goto LABEL_21;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }

    *(_DWORD *)(a1 + 40) |= 4u;
    int v9 = *(_WORD **)(a1 + 16);
    if (!v9)
    {
      int v9 = operator new(0x18uLL);
      *(void *)int v9 = off_10181AEA0;
      v9[4] = 0;
      *((_DWORD *)v9 + 3) = 0;
      *((_DWORD *)v9 + 4) = 0;
      *(void *)(a1 + 16) = v9;
    }

    char v10 = *(_BYTE **)(a2 + 16);
    if (!v10) {
      char v10 = *(_BYTE **)(qword_1019A08A0 + 16);
    }
    sub_100071184((uint64_t)v9, v10);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_21:
      uint64_t v11 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      unint64_t v12 = *(std::string **)(a1 + 24);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v12 = (std::string *)operator new(0x18uLL);
        v12->__r_.__value_.__l.__size_ = 0LL;
        v12->__r_.__value_.__l.__cap_ = 0LL;
        v12->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 24) = v12;
      }

      std::string::operator=(v12, v11);
    }
  }

void sub_100072B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100072B58(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[3];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  if ((void *)qword_1019A08A0 != a1)
  {
    uint64_t v6 = a1[2];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

void sub_100072C04(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B008;
  sub_100072B58(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100072C34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B008;
  sub_100072B58(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100072C68()
{
  v0 = operator new(0x30uLL);
  *(void *)&double result = 2LL;
  v0[4] = 2LL;
  void *v0 = off_10181B008;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = 0LL;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 10) = 0;
  return result;
}

uint64_t sub_100072CA8(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 2;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    int v3 = *(_DWORD *)(result + 40);
    if ((v3 & 4) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16)) {
          *(_WORD *)(v4 + 8) = 0;
        }
        *(_DWORD *)(v4 + 16) = 0;
        int v3 = *(_DWORD *)(result + 40);
      }
    }

    if ((v3 & 8) != 0)
    {
      uint64_t v5 = *(void *)(result + 24);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100072D4C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v26;
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v11 = ((1 << v9) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
            sub_101227D04();
          }
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 32) = v9;
        }

        unint64_t v12 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_35;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
LABEL_35:
        *(_DWORD *)(a1 + 40) |= 2u;
        char v13 = *(void **)(a1 + 8);
        if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v13 = operator new(0x18uLL);
          v13[1] = 0LL;
          v13[2] = 0LL;
          void *v13 = 0LL;
          *(void *)(a1 + 8) = v13;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v14 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v14 + 1;
LABEL_41:
        *(_DWORD *)(a1 + 40) |= 4u;
        int v15 = *(_WORD **)(a1 + 16);
        if (!v15)
        {
          int v15 = operator new(0x18uLL);
          *(void *)int v15 = off_10181AEA0;
          v15[4] = 0;
          *((_DWORD *)v15 + 3) = 0;
          *((_DWORD *)v15 + 4) = 0;
          *(void *)(a1 + 16) = v15;
        }

        char v16 = (char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v27)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v27 = *v16;
          *((void *)this + 1) = v16 + 1;
        }

        int v17 = *((_DWORD *)this + 14);
        int v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 < v18)
        {
          int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
          if (sub_1000712B8((uint64_t)v15, this, v20))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
              int v21 = *((_DWORD *)this + 14);
              BOOL v22 = __OFSUB__(v21, 1);
              int v23 = v21 - 1;
              if (v23 < 0 == v22) {
                *((_DWORD *)this + 14) = v23;
              }
              unint64_t v24 = (_BYTE *)*((void *)this + 1);
              if ((unint64_t)v24 < *((void *)this + 2) && *v24 == 34)
              {
                *((void *)this + 1) = v24 + 1;
LABEL_55:
                *(_DWORD *)(a1 + 40) |= 8u;
                int v25 = *(void **)(a1 + 24);
                if (v25 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
                {
                  int v25 = operator new(0x18uLL);
                  v25[1] = 0LL;
                  unsigned int v25[2] = 0LL;
                  *int v25 = 0LL;
                  *(void *)(a1 + 24) = v25;
                }

                uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v25);
                if (!(_DWORD)result) {
                  return result;
                }
                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1LL;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_41;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_55;
        }
        goto LABEL_18;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1000730C8( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(4LL, *(void *)(v5 + 24), a2);
  }

uint64_t sub_10007316C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_42;
  }

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v8 = *(_BYTE *)(v6 + 23);
  }

  else
  {
    int v11 = 1;
  }

  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_33;
  }

  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A08A0 + 16);
  }
  int v13 = 2 * (*(_DWORD *)(v12 + 16) & 1);
  if ((*(_DWORD *)(v12 + 16) & 2) != 0) {
    v13 += 2;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(v12 + 12) = v14;
  uint64_t v4 = (v4 + v14 + 2);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_33:
    uint64_t v15 = *(void *)(a1 + 24);
    int v16 = *(unsigned __int8 *)(v15 + 23);
    char v17 = v16;
    uint64_t v18 = *(void *)(v15 + 8);
    if ((v16 & 0x80u) == 0) {
      unint64_t v19 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19,  a2);
      int v16 = *(unsigned __int8 *)(v15 + 23);
      uint64_t v18 = *(void *)(v15 + 8);
      char v17 = *(_BYTE *)(v15 + 23);
    }

    else
    {
      int v20 = 1;
    }

    if (v17 < 0) {
      int v16 = v18;
    }
    uint64_t v4 = (v4 + v20 + v16 + 1);
  }

void sub_1000732E4(uint64_t a1, void *lpsrc)
{
}

void sub_100073330(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100072990(a1, a2);
  }

uint64_t sub_100073370()
{
  return 1LL;
}

void *sub_100073378@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.AppLaunch");
}

void sub_100073388(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  8771LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227D2C();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
    }
  }

void sub_100073488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000734A0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B080;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000734D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B080;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100073504()
{
  v0 = operator new(0x20uLL);
  *(void *)&double result = 4LL;
  v0[2] = 4LL;
  void *v0 = off_10181B080;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 6) = 0;
  return result;
}

uint64_t sub_100073540(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 4;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100073590( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v9 = v15;
      }

      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_101227D2C();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }

      uint64_t v12 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        int v13 = *(void **)(a1 + 8);
        if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v13 = operator new(0x18uLL);
          v13[1] = 0LL;
          v13[2] = 0LL;
          void *v13 = 0LL;
          *(void *)(a1 + 8) = v13;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_100073784( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  }
  return result;
}

uint64_t sub_1000737DC(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }

    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

LABEL_22:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(6LL, *(void *)(v5 + 40), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 53),  a2,  a4);
  if ((*(_DWORD *)(v5 + 84) & 0x400) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(11LL, *(void *)(v5 + 72), a2);
  }
  return result;
}

  if ((v3 & 4) != 0) {
    uint64_t v4 = v4
  }
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16),  a2)
       + 1;
LABEL_24:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    int v14 = v13;
    unsigned int v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      int v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      int v16 = v15;
    }
    if (v16 >= 0x80)
    {
      char v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      unsigned int v15 = *(void *)(v12 + 8);
      int v14 = *(_BYTE *)(v12 + 23);
    }

    else
    {
      char v17 = 1;
    }

    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    int v14 = v13;
    unsigned int v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      int v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      int v16 = v15;
    }
    if (v16 >= 0x80)
    {
      char v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      unsigned int v15 = *(void *)(v12 + 8);
      int v14 = *(_BYTE *)(v12 + 23);
    }

    else
    {
      char v17 = 1;
    }

    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    int v14 = v13;
    unsigned int v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      int v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      int v16 = v15;
    }
    if (v16 >= 0x80)
    {
      char v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      unsigned int v15 = *(void *)(v12 + 8);
      int v14 = *(_BYTE *)(v12 + 23);
    }

    else
    {
      char v17 = 1;
    }

    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    int v14 = v13;
    unsigned int v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      int v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      int v16 = v15;
    }
    if (v16 >= 0x80)
    {
      char v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      unsigned int v15 = *(void *)(v12 + 8);
      int v14 = *(_BYTE *)(v12 + 23);
    }

    else
    {
      char v17 = 1;
    }

    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 56),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181EDA0);
    }
    int v20 = (os_log_s *)qword_1019348D8;
    if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT)) {
      return 28LL;
    }
    int v21 = (char *)operator new(0x28uLL);
    *(_OWORD *)int v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    *(void *)(v21 + 29) = 0LL;
    sub_10000AE6C((uint64_t)v78, v21);
    BOOL v22 = (char)a2[23];
    int v23 = *(unsigned __int8 **)a2;
    unint64_t v24 = sub_1000F0EEC(v10);
    if (v22 >= 0) {
      int v25 = a2;
    }
    else {
      int v25 = v23;
    }
    else {
      unsigned int v26 = *(void *)v24;
    }
    *(_DWORD *)buf = 68289795;
    uint64_t v64 = 0;
    int v65 = 2082;
    uint64_t v66 = "";
    int v67 = 2081;
    v68 = v21;
    int v69 = 2081;
    *(void *)int v70 = v25;
    *(_WORD *)&v70[8] = 2081;
    int v71 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::disconnect, failed because not authorized to disconnect from this ser vice, ServiceUUID:%{private, location:escape_only}s, clientId:%{private, location:escape_only}s, loade dServiceClientId:%{private, location:escape_only}s}",  buf,  0x30u);
    unsigned int v27 = v21;
    goto LABEL_63;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EDA0);
  }
  char v17 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = (char *)operator new(0x28uLL);
    *(_OWORD *)uint64_t v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    *(void *)(v18 + 29) = 0LL;
    sub_10000AE6C((uint64_t)v78, v18);
    *(_DWORD *)buf = 68289283;
    uint64_t v64 = 0;
    int v65 = 2082;
    uint64_t v66 = "";
    int v67 = 2081;
    v68 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::disconnect, failed because not connected to this service, Service UUID:%{private, location:escape_only}s}",  buf,  0x1Cu);
    operator delete(v18);
  }

  return 27LL;
}

  if (!sub_10006418C(v8)) {
    __assert_rtn( "set_recordingrequesttype",  "microlocation.pb.h",  13116,  "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
  }
  *(_DWORD *)(a3 + 44) |= 2u;
  *(_DWORD *)(a3 + 12) = v8;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181F430);
  }
  uint64_t v12 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    if (v8 == 2) {
      int v13 = "YES";
    }
    else {
      int v13 = "NO";
    }
    if (v9) {
      int v14 = (const char *)objc_msgSend(objc_msgSend(v9, "UUIDString"), "UTF8String");
    }
    else {
      int v14 = "";
    }
    if (a2) {
      unsigned int v15 = (const char *)objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
    }
    else {
      unsigned int v15 = "";
    }
    v16[0] = 68290051;
    v16[1] = 0;
    char v17 = 2082;
    uint64_t v18 = "";
    unint64_t v19 = 2082;
    int v20 = v6;
    int v21 = 2082;
    BOOL v22 = v13;
    int v23 = 2081;
    unint64_t v24 = v14;
    int v25 = 2082;
    unsigned int v26 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:client request, recording scan, client:%{public, location:escape_only}s, forced?: %{public, location:escape_only}s, truth label:%{private, location:escape_only}s, recording trigger UUID:%{ public, location:escape_only}s}",  (uint8_t *)v16,  0x3Au);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  if ((*(_DWORD *)(v5 + 92) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  if ((*(_DWORD *)(v5 + 92) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  if ((*(_DWORD *)(v5 + 92) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  if ((*(_DWORD *)(v5 + 92) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  if ((*(_DWORD *)(v5 + 92) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  if ((*(_DWORD *)(v5 + 92) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  }
  return result;
}

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0BD8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 28),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 44),  a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x400) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  a2,  *(float *)(v5 + 48),  a3);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

    uint64_t v12 = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 40) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 24),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 36),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(float *)(v5 + 44),  a3);
  if ((*(_DWORD *)(v5 + 56) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(float *)(v5 + 48),  a3);
  }
  return result;
}

  uint64_t v9 = *(_DWORD *)(a1 + 24);
  unint64_t v10 = v9 + v3;
  if (v9 >= 1)
  {
    int v11 = 0LL;
    do
    {
      uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FF330( *(void *)(*(void *)(a1 + 16) + 8 * v11),  a2);
      int v13 = (int)v12;
      else {
        int v14 = 1;
      }
      v10 += v13 + v14;
      ++v11;
    }

    while (v11 < *(int *)(a1 + 24));
  }

  LODWORD(v15) = *(_DWORD *)(a1 + 48);
  if ((int)v15 < 1)
  {
    char v17 = 0;
  }

  else
  {
    int v16 = 0LL;
    char v17 = 0;
    do
    {
      v17 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(*(void *)(a1 + 40) + 8 * v16++),  a2);
      unsigned int v15 = *(int *)(a1 + 48);
    }

    while (v16 < v15);
  }

  uint64_t result = (v17 + v10 + v15);
  *(_DWORD *)(a1 + 64) = result;
  return result;
}

    unint64_t v10 = *(_DWORD *)(a2 + 28);
    if (v10 >= 4) {
      sub_101230454();
    }
    *(_DWORD *)(a1 + 56) |= 8u;
    *(_DWORD *)(a1 + 28) = v10;
    uint64_t v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  return *(float *)&v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrMax),  @"hrMax");
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_7:
    if ((has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  PBDataWriterWriteDoubleField(a3, 6LL, self->_hrMin);
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_8:
    if ((has & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  *((void *)a3 + 7) = *(void *)&self->_hrMin;
  *((_WORD *)a3 + 52) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_8:
    if ((has & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  *((void *)result + 6) = *(void *)&self->_hrMax;
  *((_WORD *)result + 52) |= 0x20u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_7:
    if ((has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  self->_hrMin = *((double *)a3 + 7);
  *(_WORD *)&self->_has |= 0x40u;
  char v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x200) == 0)
  {
LABEL_8:
    if ((v3 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

    (*(void (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  }

    uint64_t v12 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v12;
    uint64_t v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }

  objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_serviceMaskOperator),  @"serviceMaskOperator");
  has = (__int16)self->_has;
  if ((has & 0x20) != 0) {
    goto LABEL_23;
  }
LABEL_12:
  if ((has & 0x200) != 0) {
LABEL_13:
  }
    objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_clearClient),  @"clearClient");
  return v4;
}

  self->_serviceMaskOperator = *((_DWORD *)a3 + 11);
  *(_WORD *)&self->_has |= 0x40u;
  uint64_t v5 = *((_WORD *)a3 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      return;
    }
    goto LABEL_13;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 72),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  sub_100609F48((uint64_t)buf, v5 + 64, v6, v5);
  int v14 = v13;
  unsigned int v15 = *(void *)(a1 + 80);
  if (v15 != v13)
  {
    do
    {
      v15 -= 64LL;
      sub_100609AE8(a1 + 88, v15);
    }

    while (v15 != v14);
  }

  *(void *)(a1 + 80) = v14;
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101843D20);
  }
  int v16 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    char v17 = a2;
    uint64_t v18 = (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 6;
    *(_DWORD *)buf = 136315394;
    unsigned int v26 = v17;
    unsigned int v27 = 2048;
    int v28 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "CLMM,RouteHints,removeObserver,%s,size,%lu",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101843D20);
    }
    unint64_t v19 = (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 6;
    int v21 = 136315394;
    BOOL v22 = a2;
    int v23 = 2048;
    unint64_t v24 = v19;
    int v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,RouteHints,removeObserver,%s,size,%lu",  (const char *)&v21,  22);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMapRouteHintController::removeObserver(std::string)", "%s\n", v20);
  }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_36;
  }
  if ((v5 & 0x100) != 0)
  {
    int v14 = *(_DWORD *)(a2 + 64);
    if (v14 >= 4) {
      sub_101241494();
    }
    *(_DWORD *)(a1 + 124) |= 0x100u;
    *(_DWORD *)(a1 + 64) = v14;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
  }

  if ((v5 & 0x200) != 0)
  {
    unsigned int v15 = *(_DWORD *)(a2 + 68);
    if (v15 >= 7) {
      sub_10124146C();
    }
    *(_DWORD *)(a1 + 124) |= 0x200u;
    *(_DWORD *)(a1 + 68) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
  }

  if ((v5 & 0x400) != 0)
  {
    uint64_t v18 = *(void *)(a2 + 72);
    *(_DWORD *)(a1 + 124) |= 0x400u;
    *(void *)(a1 + 72) = v18;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x800) == 0)
    {
LABEL_31:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_44;
    }
  }

  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_31;
  }

  unint64_t v19 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 124) |= 0x800u;
  *(void *)(a1 + 80) = v19;
  uint64_t v5 = *(_DWORD *)(a2 + 124);
  if ((v5 & 0x1000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_45;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 52) |= 8u;
  *(_DWORD *)(a1 + 20) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    int v14 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 52) |= 0x20u;
    *(_DWORD *)(a1 + 28) = v14;
    uint64_t v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  uint64_t v6 = v5[20];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  int v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 60) |= 8u;
  *(_DWORD *)(a1 + 20) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    int v14 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v14;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 40),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

    int v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    if ((*(_DWORD *)(a2 + 44) & 0x40) == 0) {
      return;
    }
LABEL_11:
    uint64_t v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v6;
  }

  int v11 = *(void *)(v5 + 40);
  if (!v11) {
    int v11 = *(void *)(qword_1019A1328 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  *(_DWORD *)(a1 + 64) |= 8u;
  int v11 = *(char **)(a1 + 24);
  if (!v11)
  {
    int v11 = (char *)operator new(0x30uLL);
    *(void *)int v11 = &off_101844F90;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *((_DWORD *)v11 + 10) = 0;
    *(void *)(a1 + 24) = v11;
  }

  uint64_t v12 = *(void *)(a2 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A1368 + 24);
  }
  sub_1006237D8((uint64_t)v11, v12);
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_32:
    *(_DWORD *)(a1 + 64) |= 0x20u;
    unsigned int v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      unsigned int v15 = operator new(0x20uLL);
      v15[1] = 0LL;
      v15[2] = 0LL;
      _WORD *v15 = &off_101845710;
      *((_DWORD *)v15 + 6) = 0;
      *(void *)(a1 + 40) = v15;
    }

    int v16 = *(void *)(a2 + 40);
    if (!v16) {
      int v16 = *(void *)(qword_1019A1368 + 40);
    }
    sub_10062BD34((uint64_t)v15, v16);
    uint64_t v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_14;
    }

    goto LABEL_37;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  uint64_t v6 = v5[17];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  *(_DWORD *)(a1 + 24) = v2;
  return v2;
}

  uint64_t v9 = a2[4];
  a1[16] |= 4u;
  a1[4] = v9;
  uint64_t v5 = a2[16];
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 64),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  if ((v3 & 4) != 0) {
    uint64_t v4 = (v4 + 5);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 24);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    int v14 = v13;
    unsigned int v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      int v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      int v16 = v15;
    }
    if (v16 >= 0x80)
    {
      char v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      unsigned int v15 = *(void *)(v12 + 8);
      int v14 = *(_BYTE *)(v12 + 23);
    }

    else
    {
      char v17 = 1;
    }

    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }

    int v54 = ++v7;
  }

  while (v7 != a4);
  if (v16 < 0.1) {
    return &__NSDictionary0__struct;
  }
  int v28 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (v47)
  {
    *(float *)&unsigned int v29 = v16;
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v29),  @"sessionDuration");
  }

  int v30 = 100.0 / v16;
  *(float *)&unsigned int v29 = v30 * *(float *)((char *)v55 + 13);
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v29),  @"percentTimeInNull");
  *(float *)&unint64_t v31 = v30 * *(float *)((char *)&v55[1] + 1);
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v31),  @"percentTimeInKM");
  *(float *)&int v32 = v30 * *(float *)((char *)&v55[1] + 5);
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v32),  @"percentTimeInPDR");
  *(float *)&unint64_t v33 = v30 * *(float *)((char *)&v55[1] + 9);
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v33),  @"percentTimeInPDRSemiStatic");
  *(float *)&int v34 = v30 * *(float *)((char *)&v55[1] + 13);
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v34),  @"percentTimeInStatic");
  *(float *)&unint64_t v35 = v30 * v15;
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v35),  @"percentTimeInPedestrian");
  if (v15 > 0.0)
  {
    *(float *)&int v36 = (float)(100.0 / v15) * *(float *)((char *)&v55[2] + 5);
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v36),  @"percentTimePlacementIsUnknown");
    *(float *)&int v37 = (float)(100.0 / v15) * *(float *)((char *)&v55[2] + 9);
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v37),  @"percentTimePlacementIsOnBody");
    *(float *)&int v38 = (float)(100.0 / v15) * *(float *)((char *)&v55[2] + 13);
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v38),  @"percentTimePlacementIsViewing");
    *(float *)&uint64_t v39 = (float)(100.0 / v15) * *(float *)((char *)&v55[3] + 1);
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v39),  @"percentTimePlacementIsArmSwing");
    *(float *)&int v40 = (float)(100.0 / v15) * *(float *)((char *)&v55[3] + 5);
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v40),  @"percentTimePlacementIsLegSwing");
  }

  *(float *)&int v36 = sqrtf((float)(v14 * v14) + (float)(v50 * v50));
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v36),  @"horizontalDisplacement");
  HIDWORD(v41) = HIDWORD(v51);
  *(float *)&char v41 = v13 - *(float *)&v51;
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v41),  @"maxDeltaElevation");
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v52),  @"distanceTraveled");
  uint64_t v42 = *(float *)&v52;
  if (*(float *)&v52 > 0.000001)
  {
    *(float *)&uint64_t v42 = (float)(100.0 / *(float *)&v52) * (float)(*(float *)&v52 - v12);
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v42),  @"percentDisplacementInKM");
    *(float *)&unint64_t v43 = (float)(100.0 / *(float *)&v52) * v12;
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v43),  @"percentDisplacementInPDR");
  }

  if (v9)
  {
    *(float *)&uint64_t v42 = v11 / (float)v9;
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v42),  @"avgSpeed");
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v49),  @"minSpeed");
    LODWORD(v44) = v10;
    objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v44),  @"maxSpeed");
  }

  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v53),  @"dotJumpCount");
  objc_msgSend( v28,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v53)),  @"placementTransitionCount");
  return v28;
}

  unint64_t v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[11],  v4,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  unint64_t v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[11],  v4,  a4);
  uint64_t v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  sub_1004F2598();
  *(_BYTE *)(a1 + 64) = sub_1001B9A1C();
  return a1;
}

  int v32 = 1;
LABEL_27:
  int v36 = 1;
LABEL_28:
  *a5 = v36;
  if ((v30 & 1) != 0) {
    goto LABEL_29;
  }
  int v38 = vabdd_f64(v31, v16);
  uint64_t v39 = 180.0;
  if (v38 == 180.0) {
    goto LABEL_31;
  }
  int v40 = v31 - v16;
  unsigned int v90 = fabs(v31 - v16);
  v91 = (unint64_t)(*(void *)&v90 - 0x10000000000000LL) >> 53;
  v92 = *(void *)&v90 - 1LL;
  v93 = v91 > 0x3FE && v92 > 0xFFFFFFFFFFFFELL;
  if (!v93 || COERCE__INT64(v31 - v16) == 0)
  {
    int v95 = fabs(v38 + -180.0);
    uint64_t v39 = 180.0;
    if (v38 < 180.0) {
      int v38 = 180.0;
    }
    int v96 = v38 >= 1.0 ? v38 * 2.22044605e-16 : 2.22044605e-16;
    if (v95 <= v96) {
      goto LABEL_31;
    }
  }

  uint64_t v39 = 180.0;
  if (v40 <= 180.0)
  {
    if (v40 >= -180.0) {
      goto LABEL_32;
    }
    uint64_t v39 = fmod(v40 + -180.0, 360.0) + 180.0;
    goto LABEL_31;
  }

  int v40 = fmod(v40 + 180.0, 360.0) + -180.0;
  if (v40 == -180.0) {
    goto LABEL_31;
  }
  unsigned int v97 = ((*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
     && (*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v97 || *(void *)&v40 == 0LL)
  {
    uint64_t v39 = 180.0;
    int v99 = fabs(v40 + 180.0);
    v100 = fabs(v40);
    if (v100 < 180.0) {
      v100 = 180.0;
    }
    v101 = v100 >= 1.0 ? v100 * 2.22044605e-16 : 2.22044605e-16;
    if (v99 <= v101) {
LABEL_31:
    }
      int v40 = v39;
  }

          int v38 = sub_10085D548((__int128 *)a1, a2, a3);
          if ((v39 & 1) == 0) {
            goto LABEL_25;
          }
          int v40 = sub_10085DA94(a1, v38, a3);
          unint64_t v10 = v38 + 200;
          if (!sub_10085DA94(v38 + 200, (uint64_t)a2, a3))
          {
            int v11 = v12 + 1;
            if (v40) {
              continue;
            }
LABEL_25:
            sub_10085BD2C(a1, v38, a3, -v12, a5 & 1);
            unint64_t v10 = v38 + 200;
LABEL_27:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }

          a4 = -v12;
          a2 = (void *)v38;
          if (v40) {
            return result;
          }
          goto LABEL_1;
        }

        if ((void *)v10 != a2) {
          sub_10085ED38(v10, (uint64_t)a2, (uint64_t)a2, a3);
        }
        return result;
    }
  }

    if (v8 >= 201)
    {
      unint64_t v31 = v8 / 0xC8uLL;
      int v32 = a2 - 200;
      do
      {
        int v65 = *(_OWORD *)(a1 + 160);
        int v67 = *(_OWORD *)(a1 + 176);
        int v69 = *(void *)(a1 + 192);
        int v57 = *(_OWORD *)(a1 + 96);
        uint64_t v59 = *(_OWORD *)(a1 + 112);
        int v61 = *(_OWORD *)(a1 + 128);
        int v63 = *(_OWORD *)(a1 + 144);
        int v49 = *(_OWORD *)(a1 + 32);
        int v51 = *(_OWORD *)(a1 + 48);
        uint64_t v53 = *(_OWORD *)(a1 + 64);
        int v55 = *(_OWORD *)(a1 + 80);
        int v45 = *(_OWORD *)a1;
        uint64_t v47 = *(_OWORD *)(a1 + 16);
        unint64_t v33 = sub_10085F5A4(a1, a4, v31);
        if (v32 == v33)
        {
          *(_OWORD *)(v33 + 160) = v65;
          *(_OWORD *)(v33 + 176) = v67;
          *(void *)(v33 + 192) = v69;
          *(_OWORD *)(v33 + 96) = v57;
          *(_OWORD *)(v33 + 112) = v59;
          *(_OWORD *)(v33 + 128) = v61;
          *(_OWORD *)(v33 + 144) = v63;
          *(_OWORD *)(v33 + 32) = v49;
          *(_OWORD *)(v33 + 48) = v51;
          *(_OWORD *)(v33 + 64) = v53;
          *(_OWORD *)(v33 + 80) = v55;
          *(_OWORD *)unint64_t v33 = v45;
          *(_OWORD *)(v33 + 16) = v47;
        }

        else
        {
          *(_OWORD *)unint64_t v33 = *(_OWORD *)v32;
          int v34 = *(_OWORD *)(v32 + 16);
          unint64_t v35 = *(_OWORD *)(v32 + 32);
          int v36 = *(_OWORD *)(v32 + 64);
          *(_OWORD *)(v33 + 48) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v33 + 64) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          *(_OWORD *)(v33 + 32) = v35;
          int v37 = *(_OWORD *)(v32 + 80);
          int v38 = *(_OWORD *)(v32 + 96);
          uint64_t v39 = *(_OWORD *)(v32 + 128);
          *(_OWORD *)(v33 + 112) = *(_OWORD *)(v32 + 112);
          *(_OWORD *)(v33 + 128) = v39;
          *(_OWORD *)(v33 + 80) = v37;
          *(_OWORD *)(v33 + 96) = v38;
          int v40 = *(_OWORD *)(v32 + 144);
          char v41 = *(_OWORD *)(v32 + 160);
          uint64_t v42 = *(_OWORD *)(v32 + 176);
          *(void *)(v33 + 192) = *(void *)(v32 + 192);
          *(_OWORD *)(v33 + 160) = v41;
          *(_OWORD *)(v33 + 176) = v42;
          *(_OWORD *)(v33 + 144) = v40;
          *(_OWORD *)(v32 + 160) = v65;
          *(_OWORD *)(v32 + 176) = v67;
          *(void *)(v32 + 192) = v69;
          *(_OWORD *)(v32 + 96) = v57;
          *(_OWORD *)(v32 + 112) = v59;
          *(_OWORD *)(v32 + 128) = v61;
          *(_OWORD *)(v32 + 144) = v63;
          *(_OWORD *)(v32 + 32) = v49;
          *(_OWORD *)(v32 + 48) = v51;
          *(_OWORD *)(v32 + 64) = v53;
          *(_OWORD *)(v32 + 80) = v55;
          *(_OWORD *)int v32 = v45;
          *(_OWORD *)(v32 + 16) = v47;
          sub_10085F730(a1, v33 + 200, a4, 0x8F5C28F5C28F5C29LL * ((v33 + 200 - a1) >> 3));
        }

        v32 -= 200LL;
        unint64_t v19 = v31-- <= 2;
      }

      while (!v19);
    }

    return v13;
  }

  return v4;
}

          int v38 = sub_1008616F0((__int128 *)a1, a2, a3);
          if ((v39 & 1) == 0) {
            goto LABEL_25;
          }
          int v40 = sub_100861C3C(a1, v38, a3);
          unint64_t v10 = v38 + 200;
          if (!sub_100861C3C(v38 + 200, (uint64_t)a2, a3))
          {
            int v11 = v12 + 1;
            if (v40) {
              continue;
            }
LABEL_25:
            sub_10085FEEC(a1, v38, a3, -v12, a5 & 1);
            unint64_t v10 = v38 + 200;
LABEL_27:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }

          a4 = -v12;
          a2 = (void *)v38;
          if (v40) {
            return result;
          }
          goto LABEL_1;
        }

        if ((void *)v10 != a2) {
          sub_100862EE0(v10, (uint64_t)a2, (uint64_t)a2, a3);
        }
        return result;
    }
  }

    if (v8 >= 201)
    {
      unint64_t v31 = v8 / 0xC8uLL;
      int v32 = a2 - 200;
      do
      {
        int v65 = *(_OWORD *)(a1 + 160);
        int v67 = *(_OWORD *)(a1 + 176);
        int v69 = *(void *)(a1 + 192);
        int v57 = *(_OWORD *)(a1 + 96);
        uint64_t v59 = *(_OWORD *)(a1 + 112);
        int v61 = *(_OWORD *)(a1 + 128);
        int v63 = *(_OWORD *)(a1 + 144);
        int v49 = *(_OWORD *)(a1 + 32);
        int v51 = *(_OWORD *)(a1 + 48);
        uint64_t v53 = *(_OWORD *)(a1 + 64);
        int v55 = *(_OWORD *)(a1 + 80);
        int v45 = *(_OWORD *)a1;
        uint64_t v47 = *(_OWORD *)(a1 + 16);
        unint64_t v33 = sub_10086374C(a1, a4, v31);
        if (v32 == v33)
        {
          *(_OWORD *)(v33 + 160) = v65;
          *(_OWORD *)(v33 + 176) = v67;
          *(void *)(v33 + 192) = v69;
          *(_OWORD *)(v33 + 96) = v57;
          *(_OWORD *)(v33 + 112) = v59;
          *(_OWORD *)(v33 + 128) = v61;
          *(_OWORD *)(v33 + 144) = v63;
          *(_OWORD *)(v33 + 32) = v49;
          *(_OWORD *)(v33 + 48) = v51;
          *(_OWORD *)(v33 + 64) = v53;
          *(_OWORD *)(v33 + 80) = v55;
          *(_OWORD *)unint64_t v33 = v45;
          *(_OWORD *)(v33 + 16) = v47;
        }

        else
        {
          *(_OWORD *)unint64_t v33 = *(_OWORD *)v32;
          int v34 = *(_OWORD *)(v32 + 16);
          unint64_t v35 = *(_OWORD *)(v32 + 32);
          int v36 = *(_OWORD *)(v32 + 64);
          *(_OWORD *)(v33 + 48) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v33 + 64) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          *(_OWORD *)(v33 + 32) = v35;
          int v37 = *(_OWORD *)(v32 + 80);
          int v38 = *(_OWORD *)(v32 + 96);
          uint64_t v39 = *(_OWORD *)(v32 + 128);
          *(_OWORD *)(v33 + 112) = *(_OWORD *)(v32 + 112);
          *(_OWORD *)(v33 + 128) = v39;
          *(_OWORD *)(v33 + 80) = v37;
          *(_OWORD *)(v33 + 96) = v38;
          int v40 = *(_OWORD *)(v32 + 144);
          char v41 = *(_OWORD *)(v32 + 160);
          uint64_t v42 = *(_OWORD *)(v32 + 176);
          *(void *)(v33 + 192) = *(void *)(v32 + 192);
          *(_OWORD *)(v33 + 160) = v41;
          *(_OWORD *)(v33 + 176) = v42;
          *(_OWORD *)(v33 + 144) = v40;
          *(_OWORD *)(v32 + 160) = v65;
          *(_OWORD *)(v32 + 176) = v67;
          *(void *)(v32 + 192) = v69;
          *(_OWORD *)(v32 + 96) = v57;
          *(_OWORD *)(v32 + 112) = v59;
          *(_OWORD *)(v32 + 128) = v61;
          *(_OWORD *)(v32 + 144) = v63;
          *(_OWORD *)(v32 + 32) = v49;
          *(_OWORD *)(v32 + 48) = v51;
          *(_OWORD *)(v32 + 64) = v53;
          *(_OWORD *)(v32 + 80) = v55;
          *(_OWORD *)int v32 = v45;
          *(_OWORD *)(v32 + 16) = v47;
          sub_1008638D8(a1, v33 + 200, a4, 0x8F5C28F5C28F5C29LL * ((v33 + 200 - a1) >> 3));
        }

        v32 -= 200LL;
        unint64_t v19 = v31-- <= 2;
      }

      while (!v19);
    }

    return v13;
  }

  return v4;
}

      int v40 = *(unsigned __int8 *)(a1 + 472);
      *(_DWORD *)(a1 + 888) = 0;
      if (v40)
      {
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        char v41 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v34;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2048;
          v166 = v36;
          v167 = 2048;
          v168 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "accM, (%.4f, %.4f, %.4f), mag, %.3f",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_101860170);
          }
          *(_DWORD *)v153 = 134218752;
          *(double *)&v153[4] = v34;
          *(_WORD *)&v153[12] = 2048;
          *(double *)&v153[14] = v35;
          *(_WORD *)&v153[22] = 2048;
          v154 = v36;
          v155 = 2048;
          v156 = v38;
          LODWORD(v138) = 42;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "accM, (%.4f, %.4f, %.4f), mag, %.3f",  COERCE_DOUBLE(v153),  v138,  v139,  v140);
          v114 = (char *)v113;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v113);
          if (v114 != buf) {
            free(v114);
          }
        }
      }

  int v16 = *a3;
  char v17 = a3[1];
  if (*a3 != v17)
  {
    uint64_t v18 = 0LL;
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
    int v20 = *a2 + 16LL;
    do
    {
      if (v18 < v19)
      {
        int v21 = *(double *)v16;
        BOOL v22 = v20 + 40 * v18;
        do
        {
          int v23 = (*(double *)(v22 - 8) + *(double *)v22) * 0.5;
          if (v23 >= v21)
          {
            *(_DWORD *)(v22 + 12) = *(_DWORD *)(v16 + 16);
          }

          ++v18;
          v22 += 40LL;
        }

        while (v19 != v18);
        uint64_t v18 = v19;
      }

        char v8 = (unint64_t)v18;
        if (v18 < v20)
        {
          unint64_t v24 = v20;
          do
          {
            int v25 = *(void *)v8;
            *(void *)char v8 = *(void *)v24;
            *(void *)unint64_t v24 = v25;
            do
            {
              unsigned int v26 = *(float *)(v8 + 12);
              v8 += 8LL;
            }

            while (v26 > v14);
            do
            {
              unsigned int v27 = *(v24 - 1);
              v24 -= 2;
            }

            while (v27 <= v14);
          }

          while (v8 < (unint64_t)v24);
        }

        *(float *)(v8 - 8) = v16;
        *(float *)(v8 - 4) = v14;
        if (v18 < v20)
        {
LABEL_33:
          uint64_t result = (float *)sub_10095014C(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        int v28 = sub_1009508C8((uint64_t)v7, v8 - 8);
        uint64_t result = (float *)sub_1009508C8(v8, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v28) {
            continue;
          }
          goto LABEL_33;
        }

        a2 = (float *)(v8 - 8);
        if (!v28) {
          goto LABEL_2;
        }
        return result;
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_gradeType),  @"gradeType");
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_8:
    if ((has & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  PBDataWriterWriteDoubleField(a3, 7LL, self->_grade);
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_9:
    if ((has & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  *((void *)a3 + 2) = *(void *)&self->_grade;
  *((_WORD *)a3 + 38) |= 2u;
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_9:
    if ((has & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  *((_DWORD *)result + 12) = self->_gradeType;
  *((_WORD *)result + 38) |= 0x20u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_8:
    if ((has & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  self->_grade = *((double *)a3 + 2);
  *(_WORD *)&self->_has |= 2u;
  char v3 = *((_WORD *)a3 + 38);
  if ((v3 & 0x800) == 0)
  {
LABEL_9:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

    int v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    if ((*(_DWORD *)(a2 + 44) & 0x40) == 0) {
      return;
    }
LABEL_11:
    uint64_t v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v6;
  }

  uint64_t v12 = *(_BYTE *)(a2 + 11);
  *(_DWORD *)(a1 + 24) |= 8u;
  *(_BYTE *)(a1 + 11) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    int v14 = *(_BYTE *)(a2 + 13);
    *(_DWORD *)(a1 + 24) |= 0x20u;
    *(_BYTE *)(a1 + 13) = v14;
    uint64_t v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(void *)(v5 + 24),  (unint64_t)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  unsigned int v27 = 0x4088600000000000LL;
  int v28 = 0x405E000000000000LL;
  int v11 = atomic_load((unsigned __int8 *)&qword_10199A410);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_10199A410))
  {
    sub_101204164(buf, "kMaxTimeSinceLastWalkingStateBeforeResetEarlyWorkoutDetectionS", &v28, 0);
    qword_10199A408 = *(void *)&v36[4];
    __cxa_guard_release(&qword_10199A410);
  }

  uint64_t v12 = atomic_load((unsigned __int8 *)&qword_10199A420);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_10199A420))
  {
    sub_101204164(buf, "kMaxTimeSinceEscalationBeforeResetEarlyWorkoutDetectionS", &v27, 0);
    qword_10199A418 = *(void *)&v36[4];
    __cxa_guard_release(&qword_10199A420);
  }

  if (*(_BYTE *)(a1 + 504))
  {
    int v13 = vabdd_f64(v4, *(double *)(a1 + 496));
    if (v13 >= *(double *)&qword_10199A408)
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      int v14 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)int v36 = v13;
        *(_WORD *)&v36[8] = 2048;
        *(void *)&v36[10] = qword_10199A408;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "CLAS,enable early workout detection due to non-walking timeout,timeSinceLastWalkingStateS,%.1lf,maxTimeSinceLa stWalkingStateBeforeResetEarlyWorkoutDetectionS,%.0lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        unsigned int v29 = 134218240;
        int v30 = v13;
        unint64_t v31 = 2048;
        int v32 = qword_10199A408;
        LODWORD(v26) = 22;
        char v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,enable early workout detection due to non-walking timeout,timeSinceLastWalkingStateS,%.1lf, maxTimeSinceLastWalkingStateBeforeResetEarlyWorkoutDetectionS,%.0lf",  COERCE_DOUBLE(&v29),  v26);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)",  "%s\n",  v17);
      }

      sub_100250CC0(a1 + 1552, (void *)(a1 + 592), *(void *)(a1 + 512), *(void *)(a1 + 520), 0);
      sub_100A78754(a1, 0);
      if (*(_BYTE *)(a1 + 504)) {
        *(_BYTE *)(a1 + 504) = 0;
      }
    }
  }

  else
  {
    if (!*(_BYTE *)(a1 + 520)) {
      sub_100036CD8();
    }
    if (v4 - *(double *)(a1 + 512) > *(double *)&qword_10199A418)
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      unsigned int v15 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(_BYTE *)(a1 + 520)) {
          sub_100036CD8();
        }
        int v16 = *(void *)(a1 + 512);
        *(_DWORD *)buf = 134349568;
        *(void *)int v36 = v16;
        *(_WORD *)&v36[8] = 2050;
        *(double *)&v36[10] = v4;
        int v37 = 2048;
        int v38 = qword_10199A418;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "CLAS,enable early workout detection due to time out since first escalated,last update,%{public}.1lf,current ti me,%{public}.1lf,maxTimeInSecondsBeforeResetEarlyWorkoutDetection,%.0lf",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        if (!*(_BYTE *)(a1 + 520)) {
          sub_100036CD8();
        }
        unint64_t v24 = *(double *)(a1 + 512);
        unsigned int v29 = 134349568;
        int v30 = v24;
        unint64_t v31 = 2050;
        int v32 = *(void *)&v4;
        unint64_t v33 = 2048;
        int v34 = qword_10199A418;
        LODWORD(v26) = 32;
        int v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,enable early workout detection due to time out since first escalated,last update,%{public}. 1lf,current time,%{public}.1lf,maxTimeInSecondsBeforeResetEarlyWorkoutDetection,%.0lf",  &v29,  *(void *)&v26,  v27,  v28);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)",  "%s\n",  v25);
      }

      sub_100250CC0(a1 + 1552, (void *)(a1 + 592), *(void *)(a1 + 512), *(void *)(a1 + 520), 0);
      sub_100A78754(a1, 0);
    }
  }

  if (v9 != 100)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D2D0);
    }
    int v40 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "ExerciseMinuteThresholdUpdater, could not get records from VO2MaxOutputStore, CMError, %d",  buf,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_63;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D2D0);
    }
    int v52 = 67109120;
    LODWORD(v53) = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "ExerciseMinuteThresholdUpdater, could not get records from VO2MaxOutputStore, CMError, %d",  &v52);
    uint64_t v42 = (char *)v41;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)",  "%s\n",  v41);
    goto LABEL_74;
  }

  if (__p != v10)
  {
    int v20 = a2[13];
    sub_1004CAC18(a2);
    if (v20 == -1.0) {
      int v23 = v21;
    }
    else {
      int v23 = v20;
    }
    unint64_t v24 = *((double *)v50 - 14);
    int v25 = (float)(v24 * 0.492) / 3.5;
    if (v25 < 2.2) {
      int v25 = 2.2;
    }
    BOOL v22 = v21;
    if (v25 <= v22) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v21;
    }
    unsigned int v27 = sub_100295E8C();
    *(void *)buf = 0xBFF0000000000000LL;
    int v28 = sub_1002F8DDC();
    sub_1002A82BC(v28, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", buf);
    unsigned int v29 = 0.0;
    int v30 = fmin(v29, 1.0);
    unint64_t v31 = a1 + 12;
    if (v26 > v23) {
      unint64_t v31 = a1;
    }
    int v32 = (float)(*(float *)(v31 + 4) / 100.0) * v30;
    if (v32 < 0.0) {
      int v32 = 0.0;
    }
    if (v32 <= 1.0) {
      unint64_t v33 = v32;
    }
    else {
      unint64_t v33 = 1.0;
    }
    int v34 = sub_100295E8C();
    sub_100A9FE20(v34);
    unint64_t v35 = 1.0 - v33;
    int v36 = v26 * v33;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D2D0);
    }
    int v7 = v36 + (float)(v23 * v35);
    int v37 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134284545;
      *(double *)&buf[4] = v23;
      int v63 = 2049;
      uint64_t v64 = v26;
      int v65 = 2049;
      uint64_t v66 = v24;
      int v67 = 2049;
      v68 = v7;
      int v69 = 2050;
      int v70 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "ExerciseMinuteThresholdUpdater, previousValue, %{private}f, targetValue, %{private}f, lastVo2max, %{private}f, u pdateValue, %{private}f, daysElapsed, %{public}f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D2D0);
      }
      int v52 = 134284545;
      uint64_t v53 = v23;
      int v54 = 2049;
      int v55 = v26;
      int v56 = 2049;
      int v57 = v24;
      int v58 = 2049;
      uint64_t v59 = v7;
      unsigned int v60 = 2050;
      int v61 = v30;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "ExerciseMinuteThresholdUpdater, previousValue, %{private}f, targetValue, %{private}f, lastVo2max, %{private}f, u pdateValue, %{private}f, daysElapsed, %{public}f",  &v52,  52);
      uint64_t v39 = (char *)v38;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)",  "%s\n",  v38);
      if (v39 != buf) {
        free(v39);
      }
    }

    goto LABEL_64;
  }

  unint64_t v43 = sub_100295E8C();
  sub_100A9FE20(v43);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10186D2D0);
  }
  int v44 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "ExerciseMinuteThresholdUpdater, no vo2max records found for update",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D2D0);
    }
    LOWORD(v52) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "ExerciseMinuteThresholdUpdater, no vo2max records found for update",  &v52,  2);
    uint64_t v42 = (char *)v48;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)",  "%s\n",  v48);
LABEL_74:
    if (v42 != buf) {
      free(v42);
    }
  }

  sub_1002F0B04(buf);
  if (sub_1002A6F64( *(uint64_t *)buf,  "LCFusionAlwaysYieldOnReceivingLocationNotification",  (BOOL *)(a1 + 165)))
  {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 165);
    int v13 = v87;
    if (!v87) {
      goto LABEL_27;
    }
    int v14 = (unint64_t *)&v87->__shared_owners_;
    do
      unsigned int v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v12) {
        goto LABEL_43;
      }
    }

    else
    {
LABEL_27:
      if (!v12) {
        goto LABEL_43;
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v16 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "LCFusion to always yield on receiving any location notification",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion to always yield on receiving any location notification",  v85,  v84);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

  else
  {
    unint64_t v19 = v87;
    if (v87)
    {
      int v20 = (unint64_t *)&v87->__shared_owners_;
      do
        int v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 27),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 32),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 36),  (BOOL)a2,  a4);
  }
  return result;
}

  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A1C80 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      int v14 = *(_DWORD *)(a2 + 48);
      if (!sub_10006ED58(v14)) {
        sub_10125FBF8();
      }
      *(_DWORD *)(a1 + 60) |= 0x100u;
      *(_DWORD *)(a1 + 48) = v14;
      uint64_t v5 = *(_DWORD *)(a2 + 60);
    }

    if ((v5 & 0x200) != 0)
    {
      unsigned int v15 = *(_DWORD *)(a2 + 52);
      if (!sub_1000641E0(v15)) {
        sub_10125FBD0();
      }
      *(_DWORD *)(a1 + 60) |= 0x200u;
      *(_DWORD *)(a1 + 52) = v15;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v4,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  int v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 56) |= 8u;
  *(_DWORD *)(a1 + 20) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    int v13 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_DWORD *)(a1 + 28) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 44),  a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x400) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 48),  a2,  a4);
  }
  return result;
}

  uint64_t v9 = *(unsigned int **)(a1 + 16);
  if (!v9) {
    uint64_t v9 = *(unsigned int **)(qword_1019A1E40 + 16);
  }
  unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC799C(v9, a2);
  int v11 = (int)v10;
  else {
    uint64_t v12 = 1;
  }
  uint64_t v4 = (v4 + v11 + v12 + 1);
  char v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

      uint64_t v12 = [v5 objectAtIndexedSubscript:v11];
      goto LABEL_23;
    }

    unint64_t v10 = 2LL;
LABEL_12:
    if ((id)v10 == [v5 count]) {
      goto LABEL_41;
    }
LABEL_37:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018774E8);
    }
    char v17 = (os_log_s *)qword_101934988;
    if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
      return (CLClientKeyPath *)+[CLClientKeyPath nullClientKeyPath](&OBJC_CLASS___CLClientKeyPath, "nullClientKeyPath");
    }
    *(_DWORD *)buf = 68289282;
    int v20 = 0;
    int v21 = 2082;
    BOOL v22 = "";
    int v23 = 2114;
    unint64_t v24 = a3;
    uint64_t v18 = "{msg%{public}.0s:#Warning creating #CLCKP from clientKey with incorrect number of components. Returning "
          "nullCKP, clientKey:%{public, location:escape_only}@}";
    goto LABEL_45;
  }

  if (v7 != (id)3)
  {
    unint64_t v10 = 3LL;
    goto LABEL_12;
  }

  if (objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "length")) {
    char v8 = [v5 objectAtIndexedSubscript:0];
  }
  else {
    char v8 = 0LL;
  }
  if (objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "length")) {
    uint64_t v9 = [v5 objectAtIndexedSubscript:1];
  }
  else {
    uint64_t v9 = 0LL;
  }
  int v11 = 2LL;
  int v13 = 3LL;
  if (objc_msgSend(objc_msgSend(v5, "objectAtIndexedSubscript:", 2), "length")) {
    goto LABEL_22;
  }
  uint64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_27;
  }
LABEL_24:
  int v14 = [v9 characterAtIndex:0];
  uint64_t v9 = [v9 substringFromIndex:1];
  if (v12)
  {
LABEL_25:
    unsigned int v15 = [v12 characterAtIndex:0];
    uint64_t v12 = [v12 substringFromIndex:1];
    goto LABEL_29;
  }

    *uint64_t v5 = v2;
    unint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }

  int v14 = *v6;
  unsigned int v15 = &v5[-*v6];
  int v16 = (unint64_t)(v15 + 1);
  char v17 = v13 - v14;
  if (2 * v17 > v16) {
    int v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = v16;
  }
  if (v18) {
    uint64_t v12 = operator new(v18);
  }
  else {
    uint64_t v12 = 0LL;
  }
  int v20 = &v15[(void)v12];
  int v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  unint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    unsigned int v29 = &v5[~v14];
    do
    {
      int v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }

    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }

    *uint64_t v5 = v2;
    unint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }

  int v14 = *v6;
  unsigned int v15 = &v5[-*v6];
  int v16 = (unint64_t)(v15 + 1);
  char v17 = v13 - v14;
  if (2 * v17 > v16) {
    int v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = v16;
  }
  if (v18) {
    uint64_t v12 = operator new(v18);
  }
  else {
    uint64_t v12 = 0LL;
  }
  int v20 = &v15[(void)v12];
  int v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  unint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    unsigned int v29 = &v5[~v14];
    do
    {
      int v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }

    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
}

              uint64_t v12 = -[CLClientKeyPath subIdentityId](v6, "subIdentityId");
              int v13 = v6;
              if (v12) {
                int v13 = -[CLClientKeyPath anchorKeyPath](v6, "anchorKeyPath");
              }
              int v14 = -[CLAuthorizationDatabase _valueForKey:atKeyPath:]( self,  "_valueForKey:atKeyPath:",  @"Authorization",  v13);
              unsigned int v15 =  objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v6, "clientKey")),  "mutableCopy");
              [v15 removeObjectForKey:@"SubIdentities"];
              [v15 removeObjectForKey:@"AnchorKeyPath"];
              if (v14) {
                [v15 setObject:v14 forKeyedSubscript:@"Authorization"];
              }
              [v96 setObject:v15 forKeyedSubscript:v8];
              goto LABEL_27;
            }

            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101879AA8);
            }
            int v21 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289282;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = (CLClientKeyPath *)v8;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #SystemServiceSetup #AuthorizationDatabase has record of bundlePath whic h was previously known as a system service but currently is not considered a system service. Removing Sy stem Service privileges., BundlePath:%{public, location:escape_only}@}",  buf,  0x1Cu);
            }

            -[CLAuthorizationDatabase removeValueForKey:atKeyPath:]( self,  "removeValueForKey:atKeyPath:",  @"isSystemService",  v6);
            -[CLAuthorizationDatabase removeValueForKey:atKeyPath:]( self,  "removeValueForKey:atKeyPath:",  @"AnchorKeyPath",  v6);
            -[CLAuthorizationDatabase removeValueForKey:atKeyPath:]( self,  "removeValueForKey:atKeyPath:",  @"SubIdentities",  v6);
            BOOL v22 =   -[NSMutableDictionary objectForKeyedSubscript:]( -[CLPersistentDictionary underlyingDictionary](self, "underlyingDictionary"),  "objectForKeyedSubscript:",  -[CLClientKeyPath clientKey](v6, "clientKey"));
            -[CLAuthorizationDatabase _removeDictionaryAtKeyPath:shouldLog:]( self,  "_removeDictionaryAtKeyPath:shouldLog:",  v6,  0LL);
            if (-[CLAuthorizationDatabase _isBundlePathReachable:](self, "_isBundlePathReachable:", v8))
            {
              -[CLAuthorizationDatabase setupDictionary:atKeyPath:]( self,  "setupDictionary:atKeyPath:",  v22,  +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithUserName:clientAnchor:anchorType:",  -[CLClientKeyPath userName](v6, "userName"),  v8,  112LL));
              goto LABEL_27;
            }

            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101879AA8);
            }
            int v23 = qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289282;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = (CLClientKeyPath *)v8;
              unint64_t v19 = (os_log_s *)v23;
              int v20 = "{msg%{public}.0s:#Warning #SystemServiceSetup #AuthorizationDatabaseDroppingData bundlePath pr"
                    "eviously known as system service is not reachable on disk. Removing record., BundlePath:%{publ"
                    "ic, location:escape_only}@}";
              goto LABEL_52;
            }
          }

          else
          {
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101879AA8);
            }
            uint64_t v18 = qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289282;
              v132 = 0;
              v133 = 2082;
              v134 = "";
              v135 = 2114;
              v136 = (CLClientKeyPath *)v8;
              unint64_t v19 = (os_log_s *)v18;
              int v20 = "{msg%{public}.0s:#SystemServiceSetup #AuthorizationDatabase bundlePath client was not and curr"
                    "ently is not a system service. Skipping., BundlePath:%{public, location:escape_only}@}";
LABEL_52:
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0x1Cu);
            }
          }
        }

        else if (-[CLAuthorizationDatabase BOOLForKey:atKeyPath:defaultValue:]( self,  "BOOLForKey:atKeyPath:defaultValue:",  @"isSystemService",  v6,  0LL))
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101879AA8);
          }
          unint64_t v10 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289282;
            v132 = 0;
            v133 = 2082;
            v134 = "";
            v135 = 2114;
            v136 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthorizationDatabase #SystemServiceSetup Clients known by anything other than bun dle path CANNOT be System Services! Removing isSystemService flag, Client:%{public, location:escape_only}@}",  buf,  0x1Cu);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101879AA8);
            }
          }

          int v11 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            *(_DWORD *)buf = 68289282;
            v132 = 0;
            v133 = 2082;
            v134 = "";
            v135 = 2114;
            v136 = v6;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#AuthorizationDatabase #SystemServiceSetup Clients known by anything other than bundle path CANNOT be Syst em Services! Removing isSystemService flag",  "{msg%{public}.0s:#AuthorizationDatabase #SystemServiceSetup Clients known by anything other than bun dle path CANNOT be System Services! Removing isSystemService flag, Client:%{public, location:escape_only}@}",  buf,  0x1Cu);
          }

          -[CLAuthorizationDatabase removeValueForKey:atKeyPath:]( self,  "removeValueForKey:atKeyPath:",  @"isSystemService",  v6);
        }

  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v21);
  }
}

  tropicalSavannaProximity = self->_tropicalSavannaProximity;
  if (tropicalSavannaProximity >= 6) {
    int v7 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_tropicalSavannaProximity);
  }
  else {
    int v7 = (NSString *)*(&off_10187F910 + tropicalSavannaProximity);
  }
  [v3 setObject:v7 forKey:@"tropicalSavannaProximity"];
  has = (__int16)self->_has;
  if ((has & 0x200) != 0) {
    goto LABEL_26;
  }
LABEL_11:
  if ((has & 0x100) != 0) {
LABEL_12:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  self->_tropicalSavannaTreeId),  @"tropicalSavannaTreeId");
  return v3;
}

  PBDataWriterWriteUint32Field(a3, self->_tropicalSavannaBranchCount, 10LL);
  if ((*(_WORD *)&self->_has & 0x100) != 0) {
    goto LABEL_23;
  }
}

  *((_DWORD *)a3 + 20) = self->_tropicalSavannaBranchCount;
  *((_WORD *)a3 + 44) |= 0x200u;
  if ((*(_WORD *)&self->_has & 0x100) != 0) {
    goto LABEL_23;
  }
}

  *((_DWORD *)result + 21) = self->_tropicalSavannaProximity;
  *((_WORD *)result + 44) |= 0x400u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_11:
    if ((has & 0x100) == 0) {
      return result;
    }
    goto LABEL_12;
  }

  self->_tropicalSavannaBranchCount = *((_DWORD *)a3 + 20);
  *(_WORD *)&self->_has |= 0x200u;
  if ((*((_WORD *)a3 + 44) & 0x100) != 0) {
    goto LABEL_23;
  }
}

  unsigned int v15 = a1[3];
  if (v15 != 0.0 && vabdd_f64(a4, v15) <= 0.005)
  {
    unint64_t v19 = *a1;
    goto LABEL_38;
  }

  if (a4 <= 90.0 && a4 >= -90.0)
  {
    a1[2] = a4 * 0.0174532925;
    a1[3] = a4;
    int v16 = __sincos_stret(a4 * 0.0174532925);
    char v17 = v16.__sinval * -0.00669437999 * v16.__sinval + 1.0;
    uint64_t v18 = sqrt(v17);
    unint64_t v19 = 6335439.33 / (v17 * v18);
    *a1 = v19;
    a1[1] = 6378137.0 / v18;
    a1[4] = v16.__cosval;
LABEL_38:
    *a2 = v10 + v19;
    int v25 = (v10 + a1[1]) * a1[4];
    if (v25 < 10.0) {
      int v25 = 10.0;
    }
    *a3 = v25;
    return 1LL;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018801B8);
  }
  int v20 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134217984;
    unsigned int v29 = a4;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "latitude,%.7lf,is out of bounds", buf, 0xCu);
  }

  int v21 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v21)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018801B8);
    }
    unsigned int v26 = 134217984;
    unsigned int v27 = a4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "latitude,%.7lf,is out of bounds",  COERCE_DOUBLE(&v26));
    unint64_t v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLDistanceCalc::calc_dNdE(double, double, double &, double &)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
    return 0LL;
  }

  return result;
}

    if (++v8 != 2) {
      continue;
    }
    break;
  }

  int v23 = 0LL;
LABEL_24:
  for (uint64_t i = 0LL; i != -48; i -= 24LL)
  {
  }

  return v23;
}

  if (*(void *)(v1 + 24)) {
    goto LABEL_36;
  }
  uint64_t result = (void *)sub_1001B9A1C();
  if (!(_DWORD)result) {
    goto LABEL_36;
  }
  int v11 = operator new(0x40uLL);
  unsigned int v29 = v28;
  v26[0] = &off_1018867A0;
  unsigned int v27 = v26;
  v28[0] = &off_101886710;
  sub_100E2D690(v11, (uint64_t)v28, (uint64_t)v26, (uint64_t)sub_100E2A64C, v1);
  uint64_t v12 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  int v13 = v27;
  if (v27 == v26)
  {
    int v14 = 4LL;
    int v13 = v26;
    goto LABEL_30;
  }

  if (v27)
  {
    int v14 = 5LL;
LABEL_30:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }

  uint64_t result = v29;
  if (v29 == v28)
  {
    unsigned int v15 = 4LL;
    uint64_t result = v28;
    goto LABEL_35;
  }

  if (v29)
  {
    unsigned int v15 = 5LL;
LABEL_35:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v15))();
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 23),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 32) & 0x200) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 24),  (BOOL)a2,  a4);
  }
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v4,  *(float *)(v5 + 36),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  unint64_t v10 = *(_BYTE *)(a2 + 50);
  v3 |= 0x1000u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 50) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "fallTime", *(void *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 44), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  unint64_t v10 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 68) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "repetitiveMotion", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 40) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "isValidToeOff", *(_BYTE *)(a1 + 86));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = *(float *)(a2 + 20);
  v3 |= 8u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 20) = result;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(float *)(a2 + 24);
    *(_WORD *)(a1 + 52) = v3 | 0x10;
    *(float *)(a1 + 24) = result;
    return result;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 0xAu);
  if ((*(_WORD *)(v3 + 52) & 0x10) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 0xBu);
  }
  return result;
}

  int v11 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 16) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 37), 8u);
  int v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 96));
  unint64_t v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 1) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    PB::TextFormatter::format(this, "tip", *(float *)(a1 + 100));
    if ((*(_BYTE *)(a1 + 108) & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_25;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "deltaVelocityZ", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  int v16 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 120) |= 8u;
  *(_DWORD *)(a1 + 100) = v16;
  unint64_t v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 0x40) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    uint64_t v18 = *(_DWORD *)(a2 + 108);
    *(_WORD *)(a1 + 120) |= 0x20u;
    *(_DWORD *)(a1 + 108) = v18;
    if ((*(_WORD *)(a2 + 120) & 0x10) == 0) {
      return a1;
    }
    goto LABEL_17;
  }

  uint64_t v12 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 16) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_24:
    int v14 = *(void *)(a2 + 32);
    *(_WORD *)(result + 68) = v3 | 8;
    *(void *)(result + 32) = v14;
    return result;
  }

  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x200) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xAu);
  if ((*(_WORD *)(v3 + 68) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0xBu);
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 88) = result;
  uint64_t v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  int v11 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 8) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "isPeriodic", *(_BYTE *)(a1 + 61));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x12Eu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  uint64_t v6 = *(_BYTE *)(a2 + 49);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 52) = v3;
  *(_BYTE *)(a1 + 49) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 52) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 50), 0xAu);
  if ((*(_WORD *)(v3 + 52) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  }
  return result;
}

  unsigned int v15 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 104) |= 0x20u;
  *(_DWORD *)(a1 + 88) = v15;
  uint64_t v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  PB::TextFormatter::format(this, "windowAfterArmGreenFieldPercentage", *(float *)(a1 + 92));
  uint64_t v9 = *(_WORD *)(a1 + 104);
  if ((v9 & 0x80) == 0)
  {
LABEL_13:
    if ((v9 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 5u);
  int v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 7u);
    if ((*(_WORD *)(v3 + 104) & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "btHint", *(void *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 94), 0xCAu);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

    if ((v14 & 7) == 4)
    {
      uint64_t v5 = 0;
      return v5 == 0;
    }

    if ((PB::Reader::skip(this, v14 >> 3, v14 & 7, 0) & 1) == 0) {
      return 0LL;
    }
  }

  int v14 = *(_DWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) |= 0x20u;
  *(_DWORD *)(a1 + 176) = v14;
  uint64_t v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x10) == 0)
  {
LABEL_12:
    if ((v6 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  int v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "rawPressure", *(float *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_24:
    int v14 = *(_BYTE *)(a2 + 46);
    *(_WORD *)(result + 48) = v3 | 0x200;
    *(_BYTE *)(result + 46) = v14;
    return result;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 48) & 0x200) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 46), 0xBu);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 8u);
  if ((*(_BYTE *)(v3 + 144) & 0x10) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 136), 9u);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 36);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 36) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "gender", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  return a1;
}

  uint64_t v12 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      return result;
    }
LABEL_24:
    int v14 = *(_BYTE *)(a2 + 56);
    *(_WORD *)(result + 60) = v3 | 0x400;
    *(_BYTE *)(result + 56) = v14;
    return result;
  }

  PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 0x400) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0xBu);
  }
  return result;
}

  PB::TextFormatter::format(this, "deltaTime", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "pocketProbabilityVar", *(float *)(a1 + 88));
  int v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x100) != 0) {
    goto LABEL_23;
  }
LABEL_13:
  if ((v11 & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 8u);
  unint64_t v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x20) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_24;
  }

  uint64_t result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 8) = result;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 60) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }

  PB::TextFormatter::format(this, "userHasOnboarded", *(_BYTE *)(a1 + 55));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "writtenToHealthKit", *(_BYTE *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 0x10) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  }
  return result;
}

  int v16 = *(void *)(a2 + 40);
  v6 |= 8u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 40) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t v12 = *(_BYTE *)(a2 + 70);
  v3 |= 0x400u;
  *(_WORD *)(result + 72) = v3;
  *(_BYTE *)(result + 70) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      return result;
    }
LABEL_24:
    int v14 = *(_BYTE *)(a2 + 68);
    *(_WORD *)(result + 72) = v3 | 0x100;
    *(_BYTE *)(result + 68) = v14;
    return result;
  }

  PB::TextFormatter::format(this, "rawPaceDidJump", *(_BYTE *)(a1 + 69));
  uint64_t v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "stepCadenceIsCalibrated", *(_BYTE *)(a1 + 70));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  if ((*(_WORD *)(v3 + 72) & 0x100) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 0xBu);
  }
  return result;
}

  uint64_t v18 = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 100) |= 0x80u;
  *(void *)(a1 + 80) = v18;
  int v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 0x20) == 0)
  {
LABEL_11:
    if ((v13 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "pedometerDistanceSource", *(_DWORD *)(a1 + 92));
  int v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 8u);
  uint64_t v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  uint64_t result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 16) = result;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(double *)(a2 + 8);
    *(_WORD *)(a1 + 96) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }

  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(double *)(a1 + 72));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "timeSinceLastStepSec", *(double *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 0xAu);
  if ((*(_WORD *)(v3 + 96) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xBu);
  }
  return result;
}

  int v11 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 64) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "runningFormStrideLengthMetrics", *(_DWORD *)(a1 + 80));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  char v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(float *)(a2 + 36);
    *(_WORD *)(a1 + 56) = v3 | 0x40;
    *(float *)(a1 + 36) = result;
    return result;
  }

  PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  uint64_t v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x200) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "zoh", *(_BYTE *)(a1 + 52));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xAu);
  if ((*(_WORD *)(v3 + 56) & 0x40) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  }
  return result;
}

  int v11 = *(_DWORD *)(a2 + 28);
  v4 |= 8u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 28) = v11;
  char v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v3 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "peakValue", *(float *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  int v16 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 104) |= 2u;
  *(void *)(a1 + 40) = v16;
  uint64_t v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 4) == 0)
  {
LABEL_12:
    if ((v9 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "sentCftime", *(double *)(a1 + 48));
  char v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  char v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "listenerRoll", *(float *)(a1 + 84));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  int v16 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 112) |= 4u;
  *(void *)(a1 + 48) = v16;
  unint64_t v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x80) == 0)
  {
LABEL_15:
    if ((v10 & 0x100) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    uint64_t v18 = *(void *)(a2 + 96);
    *(_WORD *)(a1 + 112) |= 0x100u;
    *(void *)(a1 + 96) = v18;
    if ((*(_WORD *)(a2 + 112) & 0x40) == 0) {
      return a1;
    }
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "predictionComputeTimeMeta", *(double *)(a1 + 80));
  uint64_t v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  char v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  uint64_t result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 16) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 24));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 28) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 60) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 0xBu);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 60) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "looseCoveredObstructed", *(float *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 9u);
  if ((*(_WORD *)(v3 + 76) & 0x20) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xAu);
  }
  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  char v8 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 48) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "isWalkingRaw", *(_BYTE *)(a1 + 59));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  unsigned int v15 = *(void *)(a2 + 120);
  if (v15)
  {
    int v16 = operator new(0x38uLL);
    *(void *)(a1 + 120) = sub_1011498C8((uint64_t)v16, v15);
  }

  char v17 = *(void *)(a2 + 112);
  if (v17)
  {
    uint64_t v18 = operator new(0x60uLL);
    sub_101147E18((uint64_t)v18, v17);
    *(void *)(a1 + 112) = v19;
  }

  int v20 = *(void *)(a2 + 104);
  if (v20)
  {
    int v21 = operator new(0x38uLL);
    *(void *)(a1 + 104) = sub_1011498C8((uint64_t)v21, v20);
  }

  BOOL v22 = *(void *)(a2 + 96);
  if (v22)
  {
    int v23 = operator new(0xB8uLL);
    sub_101147030((uint64_t)v23, v22);
    *(void *)(a1 + 96) = v24;
  }

  int v25 = *(void *)(a2 + 152);
  if (v25)
  {
    unsigned int v26 = operator new(0x38uLL);
    *(void *)(a1 + 152) = sub_1011498C8((uint64_t)v26, v25);
  }

  unsigned int v27 = *(void *)(a2 + 144);
  if (v27)
  {
    int v28 = operator new(0x30uLL);
    sub_10114A2E4((uint64_t)v28, v27);
    *(void *)(a1 + 144) = v29;
  }

  int v30 = *(void *)(a2 + 168);
  if (v30)
  {
    unint64_t v31 = operator new(0x38uLL);
    *(void *)(a1 + 168) = sub_1011498C8((uint64_t)v31, v30);
  }

  int v32 = *(void *)(a2 + 160);
  if (v32)
  {
    unint64_t v33 = operator new(0xE0uLL);
    sub_10114A73C((uint64_t)v33, v32);
    *(void *)(a1 + 160) = v34;
  }

  if ((*(_BYTE *)(a2 + 246) & 0x10) != 0)
  {
    unint64_t v35 = *(_BYTE *)(a2 + 236);
    v6 |= 0x100000u;
    *(_DWORD *)(a1 + 244) = v6;
    *(_BYTE *)(a1 + 236) = v35;
  }

  int v36 = *(void *)(a2 + 88);
  if (v36)
  {
    int v37 = operator new(0x30uLL);
    sub_101146BD8((uint64_t)v37, v36);
    *uint64_t v4 = v38;
  }

  uint64_t v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 1) != 0)
  {
    int v57 = *(void *)(a2 + 8);
    v6 |= 1u;
    *(_DWORD *)(a1 + 244) = v6;
    *(void *)(a1 + 8) = v57;
    uint64_t v39 = *(_DWORD *)(a2 + 244);
    if ((v39 & 8) == 0)
    {
LABEL_44:
      if ((v39 & 0x20000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_74;
    }
  }

  else if ((v39 & 8) == 0)
  {
    goto LABEL_44;
  }

  int v58 = *(void *)(a2 + 32);
  v6 |= 8u;
  *(_DWORD *)(a1 + 244) = v6;
  *(void *)(a1 + 32) = v58;
  uint64_t v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x20000) == 0)
  {
LABEL_45:
    if ((v39 & 0x1000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_75;
  }

  unint64_t v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 44) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "intervalWakeDetectedToSleepDetected", *(float *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  unint64_t v10 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 32) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "locationLoggingEnabled", *(_DWORD *)(a1 + 92));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  int v11 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 64) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  uint64_t v12 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 32) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_24:
    int v14 = *(_BYTE *)(a2 + 64);
    *(_WORD *)(result + 68) = v3 | 0x200;
    *(_BYTE *)(result + 64) = v14;
    return result;
  }

  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x10) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xAu);
  if ((*(_WORD *)(v3 + 68) & 0x200) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 64), 0xBu);
  }
  return result;
}

  uint64_t v9 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 48) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  unint64_t v10 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "positionUncY", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 64), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  uint64_t result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 16) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 88) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }

  PB::TextFormatter::format(this, "x", *(double *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x100) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xBu);
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_24:
    uint64_t result = *(double *)(a2 + 56);
    *(_WORD *)(a1 + 84) = v3 | 0x40;
    *(double *)(a1 + 56) = result;
    return result;
  }

  PB::TextFormatter::format(this, "pocketProbability", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x40) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if ((v5 & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "ts", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0xAu);
  if ((*(_WORD *)(v3 + 84) & 0x40) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 64) = result;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 32));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "qStartZ", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 56) = result;
  uint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "centripetalAccelZ", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

  PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

  qword_1019A0F70 = (uint64_t)v9;
  unint64_t v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      uint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

void sub_1000738B0(uint64_t a1, void *lpsrc)
{
}

void sub_1000738FC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100073388(a1, a2);
  }

uint64_t sub_10007393C()
{
  return 1LL;
}

void *sub_100073944@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.BacklightOn");
}

void sub_100073954(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  8945LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101227D54();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100073A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100073A20(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B0F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100073A30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B0F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100073A50()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181B0F8;
  *(void *)&double result = 5LL;
  v0[1] = 5LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_100073A84(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 5;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100073A9C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      char v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101227D54();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100073BFC( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100073C18(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100073C70(uint64_t a1, void *lpsrc)
{
}

void sub_100073CBC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100073954(a1, a2);
  }

uint64_t sub_100073CFC()
{
  return 1LL;
}

void *sub_100073D04@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.BatteryChargerConnected");
}

void sub_100073D14(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  9226LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 32);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227D7C();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 2) != 0)
    {
      char v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      unsigned int v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unsigned int v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0) {
          return;
        }
        goto LABEL_19;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }

    BOOL v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    unint64_t v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v10 = (std::string *)operator new(0x18uLL);
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 16) = v10;
    }

    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_19:
      int v11 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      unsigned int v12 = *(std::string **)(a1 + 24);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unsigned int v12 = (std::string *)operator new(0x18uLL);
        v12->__r_.__value_.__l.__size_ = 0LL;
        v12->__r_.__value_.__l.__cap_ = 0LL;
        v12->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 24) = v12;
      }

      std::string::operator=(v12, v11);
    }
  }

void sub_100073EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100073ED0(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[2];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[3];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

void sub_100073F80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B170;
  sub_100073ED0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100073FB0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B170;
  sub_100073ED0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100073FE4()
{
  v0 = operator new(0x30uLL);
  *(void *)&double result = 14LL;
  v0[4] = 14LL;
  void *v0 = off_10181B170;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 10) = 0;
  return result;
}

uint64_t sub_100074024(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 14;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 40) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 40) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1000740DC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          int v7 = TagFallback & 7;
          unsigned int v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v9 = v18;
          }

          else
          {
            unsigned int v9 = *v8;
            *((void *)this + 1) = v8 + 1;
          }

          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101227D7C();
            }
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }

          int v11 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
          {
            *((void *)this + 1) = v11 + 1;
            goto LABEL_35;
          }

          continue;
        case 2u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_18;
          }
LABEL_35:
          *(_DWORD *)(a1 + 40) |= 2u;
          unsigned int v12 = *(void **)(a1 + 8);
          if (v12 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            unsigned int v12 = operator new(0x18uLL);
            v12[1] = 0LL;
            v12[2] = 0LL;
            void *v12 = 0LL;
            *(void *)(a1 + 8) = v12;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v12);
          if (!(_DWORD)result) {
            return result;
          }
          char v13 = (_BYTE *)*((void *)this + 1);
          *((void *)this + 1) = v13 + 1;
LABEL_41:
          *(_DWORD *)(a1 + 40) |= 4u;
          int v14 = *(void **)(a1 + 16);
          if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            int v14 = operator new(0x18uLL);
            v14[1] = 0LL;
            v14[2] = 0LL;
            *int v14 = 0LL;
            *(void *)(a1 + 16) = v14;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v14);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = (_BYTE *)*((void *)this + 1);
          *((void *)this + 1) = v15 + 1;
LABEL_47:
          *(_DWORD *)(a1 + 40) |= 8u;
          int v16 = *(void **)(a1 + 24);
          if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            int v16 = operator new(0x18uLL);
            v16[1] = 0LL;
            v16[2] = 0LL;
            void *v16 = 0LL;
            *(void *)(a1 + 24) = v16;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
          if (!(_DWORD)result) {
            return result;
          }
          if (*((void *)this + 1) != *((void *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }

          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        case 3u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_41;
          }
          goto LABEL_18;
        case 4u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_47;
          }
          goto LABEL_18;
        default:
          int v7 = TagFallback & 7;
LABEL_18:
          if (v7 == 4) {
            return 1LL;
          }
          return 0LL;
      }
    }

    break;
  }

  TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = (_DWORD)TagFallback;
  if ((_DWORD)TagFallback) {
    goto LABEL_6;
  }
  return 1LL;
}

uint64_t sub_1000743BC( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  }

uint64_t sub_100074450(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_43;
  }

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v8 = *(_BYTE *)(v6 + 23);
  }

  else
  {
    int v11 = 1;
  }

  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }

  uint64_t v12 = *(void *)(a1 + 16);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v14 = *(_BYTE *)(v12 + 23);
  }

  else
  {
    int v17 = 1;
  }

  if (v14 < 0) {
    int v13 = v15;
  }
  uint64_t v4 = (v4 + v17 + v13 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_34:
    uint64_t v18 = *(void *)(a1 + 24);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    char v20 = v19;
    uint64_t v21 = *(void *)(v18 + 8);
    if ((v19 & 0x80u) == 0) {
      unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 >= 0x80)
    {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22,  a2);
      int v19 = *(unsigned __int8 *)(v18 + 23);
      uint64_t v21 = *(void *)(v18 + 8);
      char v20 = *(_BYTE *)(v18 + 23);
    }

    else
    {
      int v23 = 1;
    }

    if (v20 < 0) {
      int v19 = v21;
    }
    uint64_t v4 = (v4 + v23 + v19 + 1);
  }

void sub_1000745DC(uint64_t a1, void *lpsrc)
{
}

void sub_100074628(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100073D14(a1, a2);
  }

uint64_t sub_100074668()
{
  return 1LL;
}

void *sub_100074670@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.TruthLabelDonation");
}

void sub_100074680(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  9408LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101227DA4();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100074734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007474C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B1E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007475C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B1E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_10007477C()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181B1E8;
  *(void *)&double result = 7LL;
  v0[1] = 7LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_1000747B0(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 7;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1000747C8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      char v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101227DA4();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100074928( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100074944(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_10007499C(uint64_t a1, void *lpsrc)
{
}

void sub_1000749E8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100074680(a1, a2);
  }

uint64_t sub_100074A28()
{
  return 1LL;
}

void *sub_100074A30@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ForcedRecording");
}

void sub_100074A40(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v34,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  10084LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v34,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v33, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v34);
  }

  int v5 = *(_DWORD *)(a2 + 116);
  if (!(_BYTE)v5) {
    goto LABEL_38;
  }
  if ((v5 & 1) != 0)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 64);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
      sub_101227DCC();
    }
    *(_DWORD *)(a1 + 116) |= 1u;
    *(_DWORD *)(a1 + 64) = v6;
    int v5 = *(_DWORD *)(a2 + 116);
  }

  if ((v5 & 2) != 0)
  {
    char v7 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 116) |= 2u;
    unsigned int v8 = *(std::string **)(a1 + 8);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unsigned int v8 = (std::string *)operator new(0x18uLL);
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 8) = v8;
    }

    std::string::operator=(v8, v7);
    int v5 = *(_DWORD *)(a2 + 116);
    if ((v5 & 4) == 0)
    {
LABEL_11:
      if ((v5 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }

  BOOL v9 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 116) |= 4u;
  unint64_t v10 = *(std::string **)(a1 + 16);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unint64_t v10 = (std::string *)operator new(0x18uLL);
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 16) = v10;
  }

  std::string::operator=(v10, v9);
  int v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

LABEL_23:
  int v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 116) |= 8u;
  unsigned int v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unsigned int v12 = (std::string *)operator new(0x18uLL);
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 24) = v12;
  }

  std::string::operator=(v12, v11);
  int v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_13:
    if ((v5 & 0x20) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    uint64_t v15 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 116) |= 0x20u;
    unint64_t v16 = *(std::string **)(a1 + 40);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v16 = (std::string *)operator new(0x18uLL);
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      v16->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 40) = v16;
    }

    std::string::operator=(v16, v15);
    int v5 = *(_DWORD *)(a2 + 116);
    if ((v5 & 0x40) == 0)
    {
LABEL_15:
      if ((v5 & 0x80) == 0) {
        goto LABEL_38;
      }
      goto LABEL_35;
    }

    goto LABEL_32;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7LL, *(void *)(v5 + 48), a2);
  unsigned int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  int v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 84) |= 8u;
  unsigned int v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unsigned int v12 = (std::string *)operator new(0x18uLL);
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 24) = v12;
  }

  std::string::operator=(v12, v11);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_13:
    if ((v5 & 0x20) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    uint64_t v15 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 84) |= 0x20u;
    unint64_t v16 = *(std::string **)(a1 + 40);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v16 = (std::string *)operator new(0x18uLL);
      v16->__r_.__value_.__l.__size_ = 0LL;
      v16->__r_.__value_.__l.__cap_ = 0LL;
      v16->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 40) = v16;
    }

    std::string::operator=(v16, v15);
    int v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x40) == 0)
    {
LABEL_15:
      if ((v5 & 0x80) == 0) {
        goto LABEL_38;
      }
      goto LABEL_35;
    }

    goto LABEL_32;
  }

  *(_DWORD *)(a1 + 292) |= 4u;
  unint64_t v10 = *(void **)(a1 + 24);
  if (!v10)
  {
    unint64_t v10 = operator new(0x20uLL);
    v10[2] = 4LL;
    *unint64_t v10 = off_10181B080;
    v10[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v10 + 6) = 0;
    *(void *)(a1 + 24) = v10;
  }

  int v11 = *(void *)(a2 + 24);
  if (!v11) {
    int v11 = *(void *)(qword_1019A0978 + 24);
  }
  sub_100073388((uint64_t)v10, v11);
  int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  unsigned int v8 = *(void *)(v5 + 16);
  if (!v8) {
    unsigned int v8 = *(void *)(qword_1019A0980 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 60),  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(12LL, *(void *)(v5 + 64), a2);
  }

    std::string::operator=(&v22, *(const std::string **)(v6 + 16));
    unsigned int v6 = *(void *)(a2 + 16);
    if (v6) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  if ((*(_BYTE *)(v6 + 44) & 4) != 0) {
    goto LABEL_23;
  }
LABEL_25:
  if ((*(_BYTE *)(v6 + 44) & 0x10) != 0)
  {
LABEL_26:
    sub_1001014F0(*(uint64_t ***)(v6 + 32), buf);
    int v30 = *(_OWORD *)buf;
    unint64_t v31 = buf[16];
  }

    mach_msg_destroy(&msg);
    return v12;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

  *(_DWORD *)(a1 + 92) |= 4u;
  int v11 = *(char **)(a1 + 24);
  if (!v11)
  {
    int v11 = (char *)operator new(0x88uLL);
    *(void *)int v11 = &off_101827598;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(void *)(a1 + 24) = v11;
  }

  unsigned int v12 = *(void *)(a2 + 24);
  if (!v12) {
    unsigned int v12 = *(void *)(qword_1019A0AF0 + 24);
  }
  uint64_t result = sub_1001C7DF0((uint64_t)v11, v12);
  unsigned int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  if ((v6 & 0xFF0000) == 0) {
    return result;
  }
  if ((v6 & 0x10000) != 0)
  {
    uint64_t result = *(double *)(a2 + 120);
    *(_DWORD *)(a1 + 160) |= 0x10000u;
    *(double *)(a1 + 120) = result;
    unsigned int v6 = *(_DWORD *)(a2 + 160);
    if ((v6 & 0x20000) == 0)
    {
LABEL_26:
      if ((v6 & 0x40000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_52;
    }
  }

  else if ((v6 & 0x20000) == 0)
  {
    goto LABEL_26;
  }

  uint64_t result = *(double *)(a2 + 128);
  *(_DWORD *)(a1 + 160) |= 0x20000u;
  *(double *)(a1 + 128) = result;
  unsigned int v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x40000) == 0)
  {
LABEL_27:
    if ((v6 & 0x80000) == 0) {
      return result;
    }
    goto LABEL_28;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 48),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

      if (v7 == 4) {
        return 1LL;
      }
    }

    char v7 = TagFallback & 7;
    if (v7 != 1) {
      goto LABEL_23;
    }
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0LL;
    }
    *(void *)(a1 + 8) = v12;
    unsigned int v8 = *(_DWORD *)(a1 + 28) | 1;
    *(_DWORD *)(a1 + 28) = v8;
    BOOL v9 = (_BYTE *)*((void *)this + 1);
    if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 18)
    {
      *((void *)this + 1) = v9 + 1;
LABEL_15:
      *(_DWORD *)(a1 + 28) = v8 | 2;
      unint64_t v10 = *(void **)(a1 + 16);
      if (v10 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v10 = operator new(0x18uLL);
        v10[1] = 0LL;
        v10[2] = 0LL;
        *unint64_t v10 = 0LL;
        *(void *)(a1 + 16) = v10;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v10);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }

  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(float *)(v5 + 24),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 48),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

    int v13 = *(_BYTE *)(a2 + 41);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_BYTE *)(a1 + 41) = v13;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_12;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 80) & 0x10) != 0) {
LABEL_6:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 48),  (int)a2,  a4);
LABEL_7:
  if (*(int *)(v5 + 40) >= 1)
  {
    char v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(*(void *)(v5 + 32) + 8 * v7++),  a3);
    while (v7 < *(int *)(v5 + 40));
  }

  if (*(int *)(v5 + 64) >= 1)
  {
    unsigned int v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(*(void *)(v5 + 56) + 8 * v8++),  a3);
    while (v8 < *(int *)(v5 + 64));
  }

  BOOL v9 = *(_DWORD *)(v5 + 80);
  if ((v9 & 0x80) == 0)
  {
    if ((v9 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 72),  (int)a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 52),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 80) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 72),  (int)a2,  a4);
  }
  return result;
}

  BOOL v9 = *(void *)(v5 + 32);
  if (!v9) {
    BOOL v9 = *(void *)(qword_1019A0CB0 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v9,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 40),  (BOOL)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  BOOL v9 = *(void *)(v5 + 32);
  if (!v9) {
    BOOL v9 = *(void *)(qword_1019A0D70 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v9,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

    uint64_t v15 = *(_BYTE *)(a2 + 80);
    *(_DWORD *)(a1 + 88) |= 8u;
    *(_BYTE *)(a1 + 80) = v15;
    char v14 = *(_DWORD *)(a2 + 88);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }

  *(_DWORD *)(a1 + 68) |= 4u;
  int v11 = *(char **)(a1 + 24);
  if (!v11)
  {
    int v11 = (char *)operator new(0x28uLL);
    *(void *)int v11 = off_101827B80;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(void *)(a1 + 24) = v11;
  }

  unsigned int v12 = *(void *)(a2 + 24);
  if (!v12) {
    unsigned int v12 = *(void *)(qword_1019A0DE8 + 24);
  }
  uint64_t result = sub_1001D323C((uint64_t)v11, v12);
  unsigned int v6 = *(_DWORD *)(a2 + 68);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_33:
    *(_DWORD *)(a1 + 68) |= 0x10u;
    uint64_t v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      uint64_t v15 = operator new(0x28uLL);
      const std::string *v15 = off_10182A2E0;
      v15[1] = 0LL;
      v15[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v15[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v15[4] = 0LL;
      *(void *)(a1 + 40) = v15;
    }

    unint64_t v16 = *(void *)(a2 + 40);
    if (!v16) {
      unint64_t v16 = *(void *)(qword_1019A0DE8 + 40);
    }
    sub_100204614((uint64_t)v15, v16);
    unsigned int v6 = *(_DWORD *)(a2 + 68);
    if ((v6 & 0x20) == 0)
    {
LABEL_10:
      if ((v6 & 0x40) == 0) {
        return result;
      }
      goto LABEL_11;
    }

    goto LABEL_38;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(float *)(v5 + 28),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrMin),  @"hrMin");
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_8:
    if ((has & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  PBDataWriterWriteDoubleField(a3, 7LL, self->_variance);
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_9:
    if ((has & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  *((void *)a3 + 10) = *(void *)&self->_variance;
  *((_WORD *)a3 + 52) |= 0x200u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_9:
    if ((has & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  *((void *)result + 7) = *(void *)&self->_hrMin;
  *((_WORD *)result + 52) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_8:
    if ((has & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  self->_variance = *((double *)a3 + 10);
  *(_WORD *)&self->_has |= 0x200u;
  int v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

      a1 = v2;
      unint64_t v10 = 5;
      goto LABEL_24;
    }

    ++v5;
LABEL_6:
    int v5 = (uint64_t *)*v5;
  }

  while (v5);
  char v7 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 7);
    if (v8 <= 1) {
      break;
    }
LABEL_11:
    char v7 = (uint64_t *)*v7;
    if (!v7)
    {
      do
      {
        BOOL v9 = *((_DWORD *)v3 + 7);
        if (v9 <= 2)
        {
          if (v9 == 2) {
            goto LABEL_17;
          }
          ++v3;
        }

        int v3 = (uint64_t *)*v3;
      }

      while (v3);
      goto LABEL_16;
    }
  }

  if (v8 != 1)
  {
    ++v7;
    goto LABEL_11;
  }

          if (v6 - 1 == v5 || v6 - 2 == v5 && v6 - 1 == *(_DWORD *)(v2 + 308))
          {
            if (v8 >= 0) {
              uint64_t v15 = (uint64_t)v7;
            }
            else {
              uint64_t v15 = *(void *)v7;
            }
            sub_10000CF44(&v22, v15, v9);
          }

          else
          {
            if (v8 >= 0) {
              unint64_t v16 = (uint64_t)v7;
            }
            else {
              unint64_t v16 = *(void *)v7;
            }
            int v17 = sub_10000CF44(&v22, v16, v9);
            sub_10000CF44(v17, (uint64_t)",", 1LL);
          }
        }

    dispatch_once(&qword_101934A70, &stru_10182FBB8);
    goto LABEL_5;
  }

  if (v18 == 1)
  {
    uint64_t v21 = @"sign-sap-setup-buffer";
    unint64_t v22 = v9;
    int v11 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL),  100LL,  0LL,  0LL);
    unsigned int v12 = +[NSMutableURLRequest requestWithURL:]( &OBJC_CLASS___NSMutableURLRequest,  "requestWithURL:",  +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v7->_mescalExchangeURL));
    -[NSMutableURLRequest setValue:forHTTPHeaderField:]( v12,  "setValue:forHTTPHeaderField:",  @"application/x-apple-plist",  @"content-type");
    -[NSMutableURLRequest setHTTPMethod:](v12, "setHTTPMethod:", @"POST");
    -[NSMutableURLRequest setHTTPBody:](v12, "setHTTPBody:", v11);
    int v13 = -[CLMescalSigner _mescalSignerNSURLSession](v7, "_mescalSignerNSURLSession");
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    unsigned int v17[2] = sub_1002CE484;
    v17[3] = &unk_10182FB48;
    v17[4] = v7;
    v17[5] = v4;
    objc_msgSend(objc_msgSend(v13, "dataTaskWithRequest:completionHandler:", v12, v17), "resume");
    [v13 finishTasksAndInvalidate];
  }

  else
  {
    if (v18)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182FBB8);
      }
      char v14 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v26) = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "MESCAL: SAPExchange unexpect non-erroneous return code: %{public}d",  buf,  8u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_8;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182FBB8);
      }
      int v23 = 67240192;
      LODWORD(v24) = v18;
      uint64_t v15 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "MESCAL: SAPExchange unexpect non-erroneous return code: %{public}d",  &v23,  8);
      goto LABEL_27;
    }

    v4[2](v4, 1LL);
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101835C50);
  }
  char v14 = (os_log_s *)off_101934A28;
  int v13 = 0LL;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
  {
    if (a1[23] >= 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = *(const char **)a1;
    }
    ppStmt = (sqlite3_stmt *)68290050;
    int v23 = 2082;
    unint64_t v24 = "";
    char v25 = 2082;
    char v26 = v15;
    unsigned int v27 = 1040;
    int v28 = 4;
    unsigned int v29 = 2098;
    int v30 = &v18;
    unint64_t v31 = 2082;
    int v32 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning integrity check failed, path:%{public, location:escape_only}s, rc:%{publ ic, location:SqliteResult}.*P, integrtiy_result:%{public, location:escape_only}s}",  (uint8_t *)&ppStmt,  0x36u);
    int v13 = 0LL;
  }

  *(double *)(a1 + 136) = v19 - v20;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  if ((*(unsigned int (**)(void, __int128 *, __int128 *, double))(**(void **)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  &v102,  &v100,  a2))
  {
    unsigned int v27 = *((void *)&v103 + 1);
    if (*((void *)&v103 + 1) != *((void *)&v101 + 1))
    {
      int v28 = (uint64_t *)v103;
      unsigned int v29 = *(void *)v103;
      int v30 = *(void *)v103;
      int v32 = *((void *)&v103 + 1);
      unint64_t v31 = (uint64_t *)v103;
      while (1)
      {
        char v33 = *((void *)&v103 + 1);
        if (*((void *)&v103 + 1) == v29) {
          char v33 = *(void *)(v103 - 8) + 4048LL;
        }
        int v34 = v32;
        if (v32 == v30) {
          int v34 = *(v31 - 1) + 4048;
        }
        if (*(double *)(v33 - 168) - *(double *)(v34 - 168) > 0.0)
        {
          unint64_t v35 = *((void *)&v103 + 1);
          if (*((void *)&v103 + 1) == v29) {
            unint64_t v35 = *(void *)(v103 - 8) + 4048LL;
          }
          int v36 = v32;
          if (v32 == v30) {
            int v36 = *(v31 - 1) + 4048;
          }
          if (*(double *)(v35 - 168) - *(double *)(v36 - 168) < 60.0)
          {
            int v37 = *((void *)&v103 + 1);
            if (*((void *)&v103 + 1) == v29) {
              int v37 = *(void *)(v103 - 8) + 4048LL;
            }
            int v38 = v32;
            if (v32 == v30) {
              int v38 = *(v31 - 1) + 4048;
            }
          }
        }

        if (v32 == v30)
        {
          uint64_t v39 = *--v31;
          int v30 = v39;
          int v32 = v39 + 4048;
        }

        v32 -= 176LL;
        if (v32 == *((void *)&v101 + 1)) {
          goto LABEL_93;
        }
      }

      if (*((void *)&v103 + 1) == v29)
      {
        int v44 = *(void **)(v103 - 8);
        int v40 = v44 + 484;
        char v41 = v44 + 485;
        uint64_t v42 = v44 + 486;
        unint64_t v43 = v44 + 506;
      }

      else
      {
        int v40 = (void *)(*((void *)&v103 + 1) - 176LL);
        char v41 = (uint64_t *)(*((void *)&v103 + 1) - 168LL);
        uint64_t v42 = (uint64_t *)(*((void *)&v103 + 1) - 160LL);
        unint64_t v43 = (void *)*((void *)&v103 + 1);
      }

      int v45 = *v42;
      int v46 = *v41;
      *(void *)(a1 + 376) = *v40;
      *(void *)(a1 + 384) = v46;
      *(void *)(a1 + 392) = v45;
      uint64_t v47 = v32;
      if (v32 == v30) {
        uint64_t v47 = *(v31 - 1) + 4048;
      }
      *(_DWORD *)(a1 + 400) = *((_DWORD *)v43 - 38) - *(_DWORD *)(v47 - 152);
      int v48 = v27;
      if (v27 == v29) {
        int v48 = *(v28 - 1) + 4048;
      }
      int v49 = *(double *)(v48 - 144);
      int v50 = v32;
      if (v32 == v30) {
        int v50 = *(v31 - 1) + 4048;
      }
      *(double *)(a1 + 408) = v49 - *(double *)(v50 - 144);
      int v51 = v27;
      if (v27 == v29) {
        int v51 = *(v28 - 1) + 4048;
      }
      int v52 = *(double *)(v51 - 136);
      uint64_t v53 = v32;
      if (v32 == v30) {
        uint64_t v53 = *(v31 - 1) + 4048;
      }
      *(double *)(a1 + 416) = v52 - *(double *)(v53 - 136);
      int v54 = v27;
      if (v27 == v29) {
        int v54 = *(v28 - 1) + 4048;
      }
      int v55 = *(_DWORD *)(v54 - 112);
      int v56 = v32;
      if (v32 == v30) {
        int v56 = *(v31 - 1) + 4048;
      }
      *(_DWORD *)(a1 + 440) = v55 - *(_DWORD *)(v56 - 112);
      int v57 = v27;
      if (v27 == v29) {
        int v57 = *(v28 - 1) + 4048;
      }
      int v58 = *(_DWORD *)(v57 - 108);
      uint64_t v59 = v32;
      if (v32 == v30) {
        uint64_t v59 = *(v31 - 1) + 4048;
      }
      *(_DWORD *)(a1 + 444) = v58 - *(_DWORD *)(v59 - 108);
      if (v27 == v29)
      {
        int v63 = *(v28 - 1);
        unsigned int v60 = (void *)(v63 + 3944);
        int v61 = (uint64_t *)(v63 + 3952);
        int v62 = v63 + 4048;
      }

      else
      {
        unsigned int v60 = (void *)(v27 - 104);
        int v61 = (uint64_t *)(v27 - 96);
        int v62 = v27;
      }

      uint64_t v64 = *v61;
      *(void *)(a1 + 448) = *v60;
      *(void *)(a1 + 456) = v64;
      int v65 = v32;
      if (v32 == v30) {
        int v65 = *(v31 - 1) + 4048;
      }
      *(double *)(a1 + 464) = *(double *)(v62 - 88) - *(double *)(v65 - 88);
      *(_DWORD *)(a1 + 472) = -1;
      *(void *)(a1 + 480) = 0LL;
      if (v27 == *v28)
      {
        v68 = *(v28 - 1);
        uint64_t v66 = (_BYTE *)(v68 + 3984);
        int v67 = v68 + 4048;
      }

      else
      {
        uint64_t v66 = (_BYTE *)(v27 - 64);
        int v67 = v27;
      }

      *(_BYTE *)(a1 + 488) = *v66;
      *(_BYTE *)(a1 + 489) = *(_BYTE *)(v67 - 63);
      *(void *)(a1 + 504) = 0LL;
      *(void *)(a1 + 512) = 0LL;
      *(void *)(a1 + 496) = 0LL;
      int v69 = *v28;
      int v70 = v27;
      if (v27 == *v28) {
        int v70 = *(v28 - 1) + 4048;
      }
      int v71 = *(_DWORD *)(v70 - 32);
      unsigned int v72 = *v31;
      int v73 = v32;
      if (v32 == *v31) {
        int v73 = *(v31 - 1) + 4048;
      }
      *(_DWORD *)(a1 + 520) = v71 - *(_DWORD *)(v73 - 32);
      if (v27 == v69)
      {
        uint64_t v77 = *(v28 - 1);
        int v74 = (_DWORD *)(v77 + 4020);
        int v75 = (char *)(v77 + 4024);
        int v76 = v77 + 4048;
      }

      else
      {
        int v74 = (_DWORD *)(v27 - 28);
        int v75 = (char *)(v27 - 24);
        int v76 = v27;
      }

      uint64_t v78 = *v75;
      *(_DWORD *)(a1 + 524) = *v74;
      *(_BYTE *)(a1 + 528) = v78;
      v79 = v32;
      if (v32 == v72) {
        v79 = *(v31 - 1) + 4048;
      }
      *(double *)(a1 + 136) = *(double *)(v76 - 168) - *(double *)(v79 - 168);
      uint64_t v80 = v27;
      if (v27 == v69) {
        uint64_t v80 = *(v28 - 1) + 4048;
      }
      *(void *)(a1 + 1344) = *(void *)(v80 - 168);
      uint64_t v81 = v32;
      if (v32 == v72) {
        uint64_t v81 = *(v31 - 1) + 4048;
      }
      *(void *)(a1 + 1336) = *(void *)(v81 - 168);
      if (v27 == v69)
      {
        int v83 = *(v28 - 1);
        v82 = (_BYTE *)(v83 + 4038);
        unsigned int v27 = v83 + 4048;
      }

      else
      {
        v82 = (_BYTE *)(v27 - 10);
      }

      *(_BYTE *)(a1 + 542) = *v82;
      int v84 = *(_DWORD *)(v27 - 32);
      if (v32 == v72) {
        int v32 = *(v31 - 1) + 4048;
      }
      *(_DWORD *)(a1 + 520) = v84 - *(_DWORD *)(v32 - 32);
    }
  }

    int v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_12;
    }

  self->_provenance = *((_DWORD *)a3 + 10);
  *(_WORD *)&self->_has |= 0x20u;
  if ((*((_WORD *)a3 + 36) & 0x200) == 0) {
    return;
  }
LABEL_13:
  self->_clearClient = *((_BYTE *)a3 + 68);
  *(_WORD *)&self->_has |= 0x200u;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 76),  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 88),  a2,  a4);
  }

  if (v10 == 1)
  {
    if (*(float *)(a1 + 64) >= -48.0
      && *(float *)(a1 + 276) <= 30.0
      && *(float *)(a1 + 260) <= 0.5
      && *(float *)(a1 + 124) <= 10.0)
    {
      unint64_t v10 = 1;
    }

    else
    {
      unint64_t v10 = 5;
    }
  }

  else if (!v10)
  {
    if ((sub_1004F97F4() & 0x40000000) != 0) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = 5;
    }
  }

  a3[1] = sub_1001B54F4(v10);
  *a3 = *(void *)(a1 + 8);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10183F828);
  }
  char v14 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = sub_1001B54F4(v10);
    int v17 = *a3;
    unint64_t v16 = a3[1];
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 2048;
    *(void *)&buf[10] = v15;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v16;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Tier2WorkoutClass,%d,CMWorkoutType,%ld,SmoothedCMWorkoutType,%ld,startTime,%f",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10183F828);
    }
    int v34 = qword_101934688;
    unint64_t v35 = sub_1001B54F4(v10);
    int v37 = *a3;
    int v36 = a3[1];
    *(_WORD *)&v57[8] = 2048;
    *(void *)&v57[10] = v35;
    *(_WORD *)&v57[18] = 2048;
    *(void *)&v57[20] = v36;
    *(_WORD *)&v57[28] = 2048;
    *(void *)&v57[30] = v37;
    LODWORD(v56) = 38;
    int v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v34,  0LL,  "Tier2WorkoutClass,%d,CMWorkoutType,%ld,SmoothedCMWorkoutType,%ld,startTime,%f",  v57,  *(void *)&v56,  __PAIR64__(v10, 67109888),  *(double *)&v57[8]);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::Workou tClassifierResult &)",  "%s\n",  v38);
    if (v38 != buf) {
      free(v38);
    }
  }

  sub_100F4BD18(a1 + 16, (uint64_t)buf);
  uint64_t v18 = *(_OWORD *)&buf[16];
  *((_OWORD *)a3 + 1) = *(_OWORD *)buf;
  *((_OWORD *)a3 + 2) = v18;
  *((_OWORD *)a3 + 3) = *(_OWORD *)&buf[32];
  *((_DWORD *)a3 + 16) = *(_DWORD *)(a1 + 696);
  *((_DWORD *)a3 + 17) = *(_DWORD *)(a1 + 700);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10183F828);
  }
  int v19 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    char v20 = *((float *)a3 + 7);
    uint64_t v21 = *((float *)a3 + 8);
    unint64_t v22 = *((float *)a3 + 9);
    int v23 = *((float *)a3 + 10);
    unint64_t v24 = *((float *)a3 + 11);
    char v25 = *((float *)a3 + 12);
    char v26 = *((float *)a3 + 13);
    unsigned int v27 = *((float *)a3 + 14);
    int v28 = a3[2];
    unsigned int v29 = *((float *)a3 + 6);
    int v30 = *((float *)a3 + 16);
    unint64_t v31 = *((float *)a3 + 17);
    int v32 = *a3;
    *(_DWORD *)buf = 134221056;
    *(double *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v21;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v22;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = v23;
    *(_WORD *)&buf[42] = 2048;
    *(double *)&buf[44] = v24;
    int v74 = 2048;
    int v75 = v25;
    int v76 = 2048;
    uint64_t v77 = v26;
    uint64_t v78 = 2048;
    v79 = v27;
    uint64_t v80 = 2048;
    uint64_t v81 = v28;
    v82 = 2048;
    int v83 = v29;
    int v84 = 2048;
    int v85 = v30;
    unsigned int v86 = 2048;
    int v87 = v31;
    int v88 = 2048;
    int v89 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "XGBoostWorkoutPrediction,otherProb,%f,indoorCyclingProb,%f,outdoorCyclingProb,%f,swimmingProb,%f,runningProb,%f,wa lkingProb,%f,rowingProb,%f,ellipticalProb,%f,type,%ld,conf,%f,yawRange,%f,yawRangeStd,%f,startTime,%f",  buf,  0x84u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10183F828);
    }
    uint64_t v39 = *((float *)a3 + 7);
    int v40 = *((float *)a3 + 8);
    char v41 = *((float *)a3 + 9);
    uint64_t v42 = *((float *)a3 + 10);
    unint64_t v43 = *((float *)a3 + 11);
    int v44 = *((float *)a3 + 12);
    int v45 = *((float *)a3 + 13);
    int v46 = *((float *)a3 + 14);
    uint64_t v47 = a3[2];
    int v48 = *((float *)a3 + 6);
    int v49 = *((float *)a3 + 16);
    int v50 = *((float *)a3 + 17);
    int v51 = *a3;
    *(_DWORD *)int v57 = 134221056;
    *(double *)&v57[4] = v39;
    *(_WORD *)&v57[12] = 2048;
    *(double *)&v57[14] = v40;
    *(_WORD *)&v57[22] = 2048;
    *(double *)&v57[24] = v41;
    *(_WORD *)&v57[32] = 2048;
    *(double *)&v57[34] = v42;
    *(_WORD *)&v57[42] = 2048;
    *(double *)&v57[44] = v43;
    *(_WORD *)&v57[52] = 2048;
    *(double *)&v57[54] = v44;
    *(_WORD *)&v57[62] = 2048;
    *(double *)&v57[64] = v45;
    *(_WORD *)&v57[72] = 2048;
    *(double *)&v57[74] = v46;
    *(_WORD *)&v57[82] = 2048;
    *(void *)&v57[84] = v47;
    *(_WORD *)&v57[92] = 2048;
    *(double *)&v57[94] = v48;
    *(_WORD *)&v57[102] = 2048;
    *(double *)&v57[104] = v49;
    *(_WORD *)&v57[112] = 2048;
    *(double *)&v57[114] = v50;
    *(_WORD *)&v57[122] = 2048;
    *(void *)&v57[124] = v51;
    LODWORD(v56) = 132;
    int v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "XGBoostWorkoutPrediction,otherProb,%f,indoorCyclingProb,%f,outdoorCyclingProb,%f,swimmingProb,%f,run ningProb,%f,walkingProb,%f,rowingProb,%f,ellipticalProb,%f,type,%ld,conf,%f,yawRange,%f,yawRangeStd,%f,startTime,%f",  COERCE_DOUBLE(v57),  v56);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::Workou tClassifierResult &)",  "%s\n",  v52);
    if (v52 != buf) {
      free(v52);
    }
  }

  *(void *)(a1 + 8) = 0LL;
  return v5;
}

    unint64_t v16 = 1;
    goto LABEL_24;
  }

  unint64_t v16 = 0;
LABEL_24:
  uint64_t v18 = [*(id *)(a1 + 416) objectForKey:v6];
  int v19 = v18;
  if (v18)
  {
    [v18 decrementAttributionCountForServiceType:a3];
    if (v16)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      char v20 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        __p = (void *)68289794;
        char v25 = 2082;
        char v26 = "";
        unsigned int v27 = 1026;
        *(_DWORD *)int v28 = a3;
        *(_WORD *)&v28[4] = 2114;
        *(void *)&v28[6] = v6;
        unsigned int v29 = 2114;
        int v30 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#SystemStatusAttribution #AttributionRecord servicetype count decremented, ServiceT ype:%{public}d, Client:%{public, location:escape_only}@, Record:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x2Cu);
      }

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      uint64_t v21 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        __p = (void *)68289282;
        char v25 = 2082;
        char v26 = "";
        unsigned int v27 = 2114;
        *(void *)int v28 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#SystemStatusAttribution No subscriptions remaining after deattribution; removing Attri"
          "butionRecord for client and ending system status attribution, Client:%{public, location:escape_only}@}",
          (uint8_t *)&__p,
          0x1Cu);
      }
    }

    else if ([v19 totalAttributionCount])
    {
      return;
    }

    int v23 = (sub_100AE00C4(v14) & 6) == 0 || !sub_10053D890(a1, (uint64_t)v6);
    sub_10054C700(a1, v6, v19, v23);
    return;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  unint64_t v22 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
  {
    __p = (void *)68289282;
    char v25 = 2082;
    char v26 = "";
    unsigned int v27 = 2114;
    *(void *)int v28 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattribut ion., Client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  int v11 = (os_log_s *)qword_101934988;
  if (os_signpost_enabled((os_log_t)qword_101934988))
  {
    __p = (void *)68289282;
    char v25 = 2082;
    char v26 = "";
    unsigned int v27 = 2114;
    *(void *)int v28 = v6;
    unsigned int v12 = "#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattribution.";
    int v13 = "{msg%{public}.0s:#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattr"
          "ibution., Client:%{public, location:escape_only}@}";
    goto LABEL_12;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v5 + 24),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  int v13 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 0x10u;
  *(_DWORD *)(a1 + 24) = v13;
  int v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_25:
  uint64_t v15 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) |= 0x40u;
  *(_DWORD *)(a1 + 32) = v15;
  int v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unsigned int v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 52) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v6;
    int v5 = *(_DWORD *)(a2 + 52);
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if (v11 >= 0x80)
  {
    unsigned int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int v3 = a1[13];
  }

  else
  {
    unsigned int v12 = 2;
  }

  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if (v11 >= 0x80)
  {
    unsigned int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int v3 = a1[11];
  }

  else
  {
    unsigned int v12 = 2;
  }

  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 32),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  unsigned int v6 = v5[20];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  *(_DWORD *)(a1 + 60) |= 0x10u;
  unsigned int v12 = *(void **)(a1 + 24);
  if (!v12)
  {
    unsigned int v12 = operator new(0x20uLL);
    v12[1] = 0LL;
    v12[2] = 0LL;
    std::string *v12 = off_101844B58;
    *((_DWORD *)v12 + 6) = 0;
    *(void *)(a1 + 24) = v12;
  }

  int v13 = *(void *)(a2 + 24);
  if (!v13) {
    int v13 = *(void *)(qword_1019A12D0 + 24);
  }
  sub_10061F8CC(v12, v13);
  int v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  uint64_t v15 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 60) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v15;
  int v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unsigned int v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    int v5 = *(_DWORD *)(a2 + 60);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 44),  (int)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 52),  a2,  a4);
  }

    uint64_t v18 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 72) |= 8u;
    *(_DWORD *)(a1 + 32) = v18;
    char v14 = *(_DWORD *)(a2 + 72);
    if ((v14 & 0x10) == 0)
    {
LABEL_18:
      if ((v14 & 0x20) == 0) {
        return;
      }
      goto LABEL_19;
    }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  unsigned int v6 = v5[17];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  if ((v5 & 0xFF0000) == 0) {
    goto LABEL_33;
  }
  if ((v5 & 0x10000) != 0)
  {
    char v26 = *(_DWORD *)(a2 + 72);
    a1[37] |= 0x10000u;
    a1[18] = v26;
    int v5 = *(_DWORD *)(a2 + 148);
    if ((v5 & 0x20000) == 0)
    {
LABEL_26:
      if ((v5 & 0x40000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_66;
    }
  }

  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_26;
  }

  unsigned int v27 = *(_DWORD *)(a2 + 76);
  a1[37] |= 0x20000u;
  a1[19] = v27;
  int v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x40000) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_67;
  }

  unint64_t v10 = a2[5];
  a1[16] |= 8u;
  a1[5] = v10;
  int v5 = a2[16];
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_25:
    unsigned int v12 = a2[7];
    a1[16] |= 0x20u;
    a1[7] = v12;
    int v5 = a2[16];
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_26;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v5[10],  a2,  a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  *(_DWORD *)(a1 + 68) |= 4u;
  int v17 = *(void **)(a1 + 16);
  if (!v17)
  {
    int v17 = operator new(0x20uLL);
    v17[1] = 0LL;
    unsigned int v17[2] = 0LL;
    const std::string *v17 = &off_101846520;
    *((_DWORD *)v17 + 6) = 0;
    *(void *)(a1 + 16) = v17;
  }

  uint64_t v18 = *(void *)(a2 + 16);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_1019A1470 + 16);
  }
  sub_10063BF44((uint64_t)v17, v18);
  int v13 = *(_DWORD *)(a2 + 68);
  if ((v13 & 0x10) == 0)
  {
LABEL_16:
    if ((v13 & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_29:
    char v20 = *(_DWORD *)(a2 + 52);
    if (v20 >= 6) {
      sub_101241AD4();
    }
    *(_DWORD *)(a1 + 68) |= 0x20u;
    *(_DWORD *)(a1 + 52) = v20;
    int v13 = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x40) == 0)
    {
LABEL_18:
      if ((v13 & 0x80) == 0) {
        return;
      }
      goto LABEL_19;
    }

    goto LABEL_31;
  }

    sub_1003C05BC(a1);
    int v23 = 0LL;
    if (!v10) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  sub_1003C05BC(a1);
  int v23 = 1LL;
  if (v10) {
LABEL_24:
  }
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
LABEL_25:
  *(void *)((char *)v32
  char v33 = v25;
  std::streambuf::~streambuf(&v34);
  std::ios::~ios(&v35);
  return v23;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 68),  (int)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 73),  (BOOL)a2,  a4);
  }

  if (((v20 && v22) & v9 & 1) != 0 || (v3 & 1) != 0) {
    goto LABEL_26;
  }
LABEL_25:
  char v1 = 0;
LABEL_26:
  unint64_t v24 = v19 + *a1 - 1;
  char v25 = *((unsigned int *)a1 + 1);
  if (v24 < v25) {
    char v25 = 0LL;
  }
  char v26 = &a1[16 * (v24 - v25)];
  unsigned int v27 = *((void *)v26 + 3);
  unsigned int v29 = *((float *)v26 + 3) > 0.1 && *((float *)v26 + 4) > 8.0 && fabsf(*((float *)v26 + 2)) < 0.5;
  if (v27 == 12) {
    unsigned int v29 = 1;
  }
  int v23 = v27 != 1 && v29;
  return v1 | (v23 << 8);
}

  char v25 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 6);
  if (v23 < -191)
  {
    int v30 = 19 - v25;
    unint64_t v31 = ((19 - v25) * (unsigned __int128)0x8618618618618619LL) >> 64;
    int v32 = (v31 + ((v30 - v31) >> 1)) >> 4;
    unsigned int v29 = &v22[-v32];
    unint64_t v24 = *v29 + 192 * (21 * v32 - v30) + 3840;
  }

  else
  {
    char v26 = v25 + 1;
    unsigned int v27 = ((v25 + 1) * (unsigned __int128)0x8618618618618619LL) >> 64;
    int v28 = (v27 + ((v26 - v27) >> 1)) >> 4;
    unsigned int v29 = &v22[v28];
    unint64_t v24 = *v29 + 192 * (v26 - 21 * v28);
  }

  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v24;
  int v19 = a3[3];
  return v24 != v19;
}

  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10184FFD8);
  }
  int v36 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEFAULT))
  {
    int v37 = v2[1] == *v2;
    int v38 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v2[1] - *v2) >> 3);
    buf = 134219266;
    uint64_t v39 = out;
    if (v37) {
      uint64_t v39 = "--";
    }
    v82 = v38;
    int v40 = (char *)out_34 + 3;
    int v83 = 2080;
    if (v37) {
      int v40 = "--";
    }
    int v84 = v39;
    int v85 = 2080;
    unsigned int v86 = v40;
    int v87 = 1024;
    *(_DWORD *)int v88 = v6;
    *(_WORD *)&v88[4] = 1024;
    *(_DWORD *)&v88[6] = v5;
    LOWORD(v89) = 1024;
    *(_DWORD *)((char *)&v89 + 2) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "SWOLF, totalEntries, %lu, sourceId, %s, session id, %s, openWaterEntries, %d, poolEntries, %d, SWOLF entries, %d",  (uint8_t *)&buf,  0x32u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10184FFD8);
    }
    char v41 = v2[1] == *v2;
    uint64_t v42 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v2[1] - *v2) >> 3);
    unint64_t v43 = "--";
    int v44 = out;
    if (v2[1] == *v2) {
      int v44 = "--";
    }
    int v58 = 134219266;
    if (!v41) {
      unint64_t v43 = (char *)out_34 + 3;
    }
    uint64_t v59 = v42;
    unsigned int v60 = 2080;
    int v61 = v44;
    int v62 = 2080;
    int v63 = v43;
    uint64_t v64 = 1024;
    *(_DWORD *)int v65 = v6;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = v5;
    LOWORD(v66) = 1024;
    *(_DWORD *)((char *)&v66 + 2) = v7;
    LODWORD(v47) = 50;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  0LL,  "SWOLF, totalEntries, %lu, sourceId, %s, session id, %s, openWaterEntries, %d, poolEntries, %d, SWOLF entries, %d",  &v58,  v47,  v48,  (_DWORD)v49,  v50.n128_u32[0],  v50.n128_u32[2]);
    int v46 = (int *)v45;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSWOLFUtil::logEntries(const std::vector<CLSwimEntry> &)", "%s\n", v45);
    if (v46 != &buf) {
      free(v46);
    }
  }

  int v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 24) = v11;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_25:
    int v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_26;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[12],  v4,  a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[14],  v4,  a4);
  }

  int v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 24) = v11;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_25:
    int v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    int v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_26;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[12],  v4,  a4);
  unsigned int v6 = v5[16];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[14],  v4,  a4);
  }

  unint64_t v10 = *(void *)(v5 + 40);
  if (!v10) {
    unint64_t v10 = *(void *)(qword_1019A17B8 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v10,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  *(_DWORD *)(a1 + 72) |= 4u;
  unint64_t v10 = *(void **)(a1 + 24);
  if (!v10)
  {
    unint64_t v10 = operator new(0x28uLL);
    v10[1] = 0LL;
    v10[2] = 0LL;
    *unint64_t v10 = off_101858EB8;
    *((_DWORD *)v10 + 6) = 0;
    v10[4] = 0LL;
    *(void *)(a1 + 24) = v10;
  }

  int v11 = *(void *)(a2 + 24);
  if (!v11) {
    int v11 = *(void *)(qword_1019A17D0 + 24);
  }
  sub_100810EA8(v10, v11);
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(_DWORD *)(v5 + 64),  (int)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    goto LABEL_27;
  }

  unint64_t v22 = v20 >> 6;
  if (v20 < -63)
  {
    char v25 = 62 - v22;
    int v23 = ~(_BYTE)v25;
    unint64_t v24 = &v19[-(v25 >> 6)];
  }

  else
  {
    int v23 = v22 + 1;
    unint64_t v24 = &v19[(unint64_t)(v22 + 1) >> 6];
  }

  uint64_t v21 = *v24 + ((unint64_t)(v23 & 0x3F) << 6);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v21;
  unint64_t v16 = a3[3];
  return v21 != v16;
}

  int v19 = *(void *)(a1 + 176);
  if (v19 >= 0xA)
  {
    do
    {
      *(void *)(a1 + 176) = v19 - 1;
      ++*(void *)(a1 + 168);
      sub_1002109A4(a1 + 136, 1);
      int v19 = *(void *)(a1 + 176);
    }

    while (v19 > 9);
  }
}
}

  unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 6);
  if (v20 < -319)
  {
    char v25 = 14 - v22;
    int v23 = ~(_BYTE)v25;
    unint64_t v24 = &v19[-(v25 >> 4)];
  }

  else
  {
    int v23 = v22 + 1;
    unint64_t v24 = &v19[(v22 + 1) >> 4];
  }

  uint64_t v21 = *v24 + 320LL * (v23 & 0xF);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v21;
  unint64_t v16 = a3[3];
  return v21 != v16;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_grade),  @"grade");
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_9:
    if ((has & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  PBDataWriterWriteBOOLField(a3, self->_hasGPS, 8LL);
  has = (__int16)self->_has;
  if ((has & 0x1000) == 0)
  {
LABEL_10:
    if ((has & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  *((_BYTE *)a3 + 72) = self->_hasGPS;
  *((_WORD *)a3 + 38) |= 0x800u;
  has = (__int16)self->_has;
  if ((has & 0x1000) == 0)
  {
LABEL_10:
    if ((has & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  *((void *)result + 2) = *(void *)&self->_grade;
  *((_WORD *)result + 38) |= 2u;
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_9:
    if ((has & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  self->_hasGPS = *((_BYTE *)a3 + 72);
  *(_WORD *)&self->_has |= 0x800u;
  int v3 = *((_WORD *)a3 + 38);
  if ((v3 & 0x1000) == 0)
  {
LABEL_10:
    if ((v3 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  int v13 = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 24) |= 0x10u;
  *(_BYTE *)(a1 + 12) = v13;
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_25:
  uint64_t v15 = *(_BYTE *)(a2 + 14);
  *(_DWORD *)(a1 + 24) |= 0x40u;
  *(_BYTE *)(a1 + 14) = v15;
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unsigned int v6 = *(_BYTE *)(a2 + 15);
    *(_DWORD *)(a1 + 24) |= 0x80u;
    *(_BYTE *)(a1 + 15) = v6;
    int v5 = *(_DWORD *)(a2 + 24);
  }

  unint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    unint64_t v10 = *(void *)(qword_1019A1A48 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  unsigned int v8 = *(void *)(v5 + 16);
  if (!v8) {
    unsigned int v8 = *(void *)(qword_1019A1A88 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }

  unint64_t v10 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 112) |= 4u;
  *(void *)(a1 + 24) = v10;
  int v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

        uint64_t result = sub_100AA469C(v3, (double *)v1 + 4);
      }

      int v17 = (void *)v1[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          int v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v1[2];
          int v13 = *v18 == (void)v1;
          char v1 = v18;
        }

        while (!v13);
      }

      char v1 = v18;
      if (v18 == v2) {
        return result;
      }
    }

    sub_100449C00(v4, (double *)v1 + 4, (__int128 *)(v1 + 5));
    goto LABEL_23;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  if ((v5 & 0x100) != 0)
  {
    int v11 = *(_BYTE *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_BYTE *)(a1 + 36) = v11;
  }

  technology = self->_technology;
  if (technology > 31)
  {
    if (technology > 127)
    {
      if (technology == 128)
      {
        int v13 = @"kRadioAccessTechnologySCDMA";
        goto LABEL_46;
      }

      if (technology == 256)
      {
        int v13 = @"kRadioAccessTechnologyNR5G";
        goto LABEL_46;
      }
    }

    else
    {
      if (technology == 32)
      {
        int v13 = @"kRadioAccessTechnologyCDMAHybrid";
        goto LABEL_46;
      }

      if (technology == 64)
      {
        int v13 = @"kRadioAccessTechnologyLTE";
        goto LABEL_46;
      }
    }

  unint64_t v10 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(void *)(a1 + 24) = v10;
  int v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(unsigned __int8 *)(v5 + 65),  v4,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  unsigned int v12 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(_DWORD *)(a1 + 24) = v12;
  int v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_25:
  char v14 = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 0x40u;
  *(_BYTE *)(a1 + 32) = v14;
  int v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unsigned int v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 56) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v6;
    int v5 = *(_DWORD *)(a2 + 56);
  }

  switch(v4)
  {
    case 'e':
      sub_1010DDBC0(&__str, (char *)[v5 UTF8String]);
      std::string::operator=((std::string *)&retstr->fUserName.__r_.var0, (const std::string *)&__str);
      if ((__str_20[3] & 0x80000000) == 0) {
        goto LABEL_65;
      }
      unsigned int v12 = (void *)__str;
LABEL_64:
      operator delete(v12);
      goto LABEL_65;
    case 'p':
      sub_1010DDBC0(&v17, (char *)[v5 UTF8String]);
      sub_100FE2DDC(&v17, (uint64_t)&__str);
      goto LABEL_47;
    case 'i':
      sub_1010DDBC0(&v17, (char *)[v5 UTF8String]);
      sub_100FE2D54(&v17, (uint64_t)&__str);
      goto LABEL_47;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018774E8);
  }
  unint64_t v10 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    __str = 68289282LL;
    __str_8 = 2082;
    __str_10 = "";
    __str_18 = 2114;
    *(void *)__str_20 = v2;
    int v11 = "{msg%{public}.0s:#Warning #CLCKP creating Name from CKP without valid anchor type. The resulting Name wi"
          "ll have the following client key: 'com.apple.locationd.executable-', CKP:%{public, location:escape_only}@}";
    goto LABEL_38;
  }

    *(_DWORD *)a2 = -992;
    return result;
  }

  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

    LOBYTE(v16) = 0;
    return v16;
  }

  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_101879420);
  }
  uint64_t v15 = (os_log_s *)qword_1019346A8;
  unint64_t v16 = os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    int v19 = 68289538;
    char v20 = 0;
    uint64_t v21 = 2082;
    unint64_t v22 = "";
    int v23 = 2050;
    *(void *)unint64_t v24 = a3;
    *(_WORD *)&v24[8] = 2050;
    *(void *)char v25 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Warning,Requested unsupported harvest type, loiType:%{public}ld, calibrationType:%{public}ld}",  (uint8_t *)&v19,  0x26u);
    goto LABEL_23;
  }

  return v16;
}

  *((_DWORD *)result + 20) = self->_tropicalSavannaBranchCount;
  *((_WORD *)result + 44) |= 0x200u;
  if ((*(_WORD *)&self->_has & 0x100) == 0) {
    return result;
  }
LABEL_12:
  *((void *)result + 9) = self->_tropicalSavannaTreeId;
  *((_WORD *)result + 44) |= 0x100u;
  return result;
}

      sub_100D33D60((double *)a1, v10);
      return;
    }

    sub_100D33FE0(a1);
  }

  else
  {
    if (*(_BYTE *)(a1 + 288))
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101880630);
      }
      int v5 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unsigned int v12 = 0;
        unsigned int v6 = sub_100247620(a1, (int *)v12, 1LL);
        char v7 = *(unsigned __int8 *)(a1 + 248);
        *(void *)unsigned int v12 = 68289538LL;
        *(_WORD *)&v12[8] = 2082;
        *(void *)&v12[10] = "";
        int v13 = 1026;
        char v14 = v6 != 0;
        uint64_t v15 = 1026;
        unint64_t v16 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Awareness Shutting down, hasClients:%{public}hhd, bigSwitch:%{public}hhd}",  v12,  0x1Eu);
      }

      sub_100D32C78(a1);
    }

    *(_BYTE *)(a1 + 288) = 0;
  }

    if (SHIBYTE(v52) < 0) {
      operator delete(*((void **)&v51 + 1));
    }
    if ((v22 & 1) == 0) {
      break;
    }
    if (++v15 == 30)
    {
      int v32 = 1;
      goto LABEL_38;
    }
  }

  int v32 = v40;
LABEL_38:
  char v33 = v68;
  if (v68)
  {
    int v34 = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  return v32 & 1;
}

  sub_100DF66A0(a3, v10, *(__int128 **)(a3 + 8));
  char v14 = *(void *)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  if (*(void *)a3 == v15) {
    goto LABEL_96;
  }
LABEL_24:
  unint64_t v16 = sub_100C34E40();
  int v17 = *(char *)(v14 + 23);
  uint64_t v18 = v17 < 0;
  if (v17 >= 0) {
    int v19 = v14;
  }
  else {
    int v19 = *(void *)v14;
  }
  char v20 = *(unsigned __int8 *)(v14 + 23);
  if (v18) {
    char v20 = *(void *)(v14 + 8);
  }
  uint64_t v21 = *((char *)v16 + 23);
  unint64_t v22 = v21 < 0;
  if (v21 >= 0) {
    int v23 = v16;
  }
  else {
    int v23 = (void *)*v16;
  }
  unint64_t v24 = *((unsigned __int8 *)v16 + 23);
  if (v22) {
    unint64_t v24 = v16[1];
  }
  char v25 = v19 - 1;
  char v26 = (char *)v23 - 1;
  while (v20 && v24)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + v20);
    int v28 = v26[v24];
    --v20;
    --v24;
    if (v27 != v28)
    {
LABEL_40:
      unsigned int v29 = sub_100C1001C();
      int v30 = *(char *)(v14 + 23);
      unint64_t v31 = v30 < 0;
      if (v30 >= 0) {
        int v32 = v14;
      }
      else {
        int v32 = *(void *)v14;
      }
      char v33 = *(unsigned __int8 *)(v14 + 23);
      if (v31) {
        char v33 = *(void *)(v14 + 8);
      }
      int v34 = *((char *)v29 + 23);
      unint64_t v35 = v34 < 0;
      if (v34 >= 0) {
        int v36 = v29;
      }
      else {
        int v36 = (void *)*v29;
      }
      int v37 = *((unsigned __int8 *)v29 + 23);
      if (v35) {
        int v37 = v29[1];
      }
      int v38 = v32 - 1;
      uint64_t v39 = (char *)v36 - 1;
      while (v33 && v37)
      {
        int v40 = *(unsigned __int8 *)(v38 + v33);
        char v41 = v39[v37];
        --v33;
        --v37;
        if (v40 != v41) {
          goto LABEL_56;
        }
      }

      if (!v37) {
        goto LABEL_58;
      }
LABEL_56:
      v14 += 24LL;
      if (v14 == v15)
      {
        uint64_t v42 = v15;
        goto LABEL_97;
      }

      goto LABEL_24;
    }
  }

  if (v24) {
    goto LABEL_40;
  }
LABEL_58:
  if (v14 == v15 || (unint64_t v43 = v14 + 24, v14 + 24 == v15))
  {
LABEL_96:
    uint64_t v42 = v14;
    goto LABEL_97;
  }

  uint64_t v42 = v14;
  do
  {
    int v44 = v14;
    char v14 = v43;
    int v45 = sub_100C34E40();
    int v46 = *(char *)(v44 + 47);
    uint64_t v47 = v46 < 0;
    if (v46 >= 0) {
      int v48 = v14;
    }
    else {
      int v48 = *(void *)v14;
    }
    int v49 = *(unsigned __int8 *)(v44 + 47);
    if (v47) {
      int v49 = *(void *)(v44 + 32);
    }
    int v50 = *((char *)v45 + 23);
    int v51 = v50 < 0;
    int v52 = (void *)*v45;
    if (v50 >= 0) {
      int v52 = v45;
    }
    uint64_t v53 = *((unsigned __int8 *)v45 + 23);
    if (v51) {
      uint64_t v53 = v45[1];
    }
    int v54 = v48 - 1;
    int v55 = (char *)v52 - 1;
    while (v49 && v53)
    {
      int v56 = *(unsigned __int8 *)(v54 + v49);
      int v57 = v55[v53];
      --v49;
      --v53;
      if (v56 != v57) {
        goto LABEL_76;
      }
    }

    if (!v53) {
      goto LABEL_94;
    }
LABEL_76:
    int v58 = sub_100C1001C();
    uint64_t v59 = *(char *)(v44 + 47);
    unsigned int v60 = v59 < 0;
    if (v59 >= 0) {
      int v61 = v14;
    }
    else {
      int v61 = *(void *)v14;
    }
    int v62 = *(unsigned __int8 *)(v44 + 47);
    if (v60) {
      int v62 = *(void *)(v44 + 32);
    }
    int v63 = *((char *)v58 + 23);
    uint64_t v64 = v63 < 0;
    int v65 = (void *)*v58;
    if (v63 >= 0) {
      int v65 = v58;
    }
    uint64_t v66 = *((unsigned __int8 *)v58 + 23);
    if (v64) {
      uint64_t v66 = v58[1];
    }
    int v67 = v61 - 1;
    v68 = (char *)v65 - 1;
    while (v62 && v66)
    {
      int v69 = *(unsigned __int8 *)(v67 + v62);
      int v70 = v68[v66];
      --v62;
      --v66;
      if (v69 != v70) {
        goto LABEL_91;
      }
    }

    if (!v66) {
      goto LABEL_94;
    }
LABEL_91:
    int v71 = *(_OWORD *)v14;
    *(void *)(v42 + 16) = *(void *)(v14 + 16);
    *(_OWORD *)uint64_t v42 = v71;
    v42 += 24LL;
    *(_BYTE *)(v44 + 47) = 0;
    *(_BYTE *)char v14 = 0;
LABEL_94:
    unint64_t v43 = v14 + 24;
  }

  while (v14 + 24 != v15);
LABEL_97:
  sub_100DF66A0(a3, v42, *(__int128 **)(a3 + 8));
  unsigned int v72 = *(std::string **)a3;
  int v73 = *(std::string **)(a3 + 8);
  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
  if (v72 != v73)
  {
    while ((sub_100E005C8(&v88, v72) & 1) == 0)
    {
      if (++v72 == v73)
      {
        unsigned int v72 = v73;
        goto LABEL_109;
      }
    }

    if (v72 != v73)
    {
      for (j = v72 + 1; j != v73; ++j)
      {
        if ((sub_100E005C8(&v88, j) & 1) == 0)
        {
          int v75 = *(_OWORD *)&j->__r_.__value_.__l.__data_;
          v72->__r_.__value_.__l.__cap_ = j->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v75;
          ++v72;
          j->__r_.__value_.__s.__size_ = 0;
          j->__r_.__value_.__s.__data_[0] = 0;
        }
      }
    }
  }

  uint64_t v18 = sub_1006E27E8();
  sub_100413284(v18, buf);
  int v19 = sub_1002A6F64(*(uint64_t *)&buf[0], "ForceNoThrottlingOnBody", (BOOL *)(a1 + 17537));
  char v20 = v19;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (*((void *)&buf[0] + 1))
  {
    unint64_t v22 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
    do
      int v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if ((v20 & 1) != 0) {
        return a1;
      }
      goto LABEL_28;
    }
  }

  if ((v19 & 1) == 0) {
LABEL_28:
  }
    *(_BYTE *)(a1 + 17537) = 0;
  return a1;
}

  int v11 = *(void *)(v5 + 40);
  if (!v11) {
    int v11 = *(void *)(qword_1019A20E0 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v11,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

    int v11 = *(_DWORD *)(a2 + 24);
    if (v11 >= 3) {
      sub_1012738AC();
    }
    *(_DWORD *)(a1 + 52) |= 4u;
    *(_DWORD *)(a1 + 24) = v11;
    unsigned int v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }

  if (*(double *)(a1 + 352) > 0.0)
  {
    unint64_t v24 = *(double *)(a1 + 264);
    if (v24 >= 0.0 && v24 < 0.001) {
      goto LABEL_87;
    }
  }

  char v25 = 0;
  if (!*(_BYTE *)(a1 + 396))
  {
LABEL_98:
    uint64_t v2 = 1LL;
    goto LABEL_99;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 40),  v4,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

      uint64_t v21 = *(double *)(a1 + 64) - v1;
      unint64_t v22 = &v21;
      int v23 = v19;
      unint64_t v24 = &v22;
      sub_100F5DD84(v19, &v24);
      break;
    default:
      return;
  }

  unint64_t v10 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v10;
  unsigned int v6 = *(_DWORD *)(a2 + 48);
  if ((v6 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_17:
  if ((v6 & 0x40) == 0) {
    goto LABEL_18;
  }
LABEL_26:
  uint64_t result = *(float *)(a2 + 36);
  *(_DWORD *)(a1 + 48) |= 0x40u;
  *(float *)(a1 + 36) = result;
  if ((*(_DWORD *)(a2 + 48) & 0x80) != 0)
  {
LABEL_19:
    uint64_t result = *(float *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x80u;
    *(float *)(a1 + 40) = result;
  }

  return result;
}

  uint64_t result = *(__n128 *)v5;
  unint64_t v35 = *((_OWORD *)v5 + 1);
  *a3 = *(_OWORD *)v5;
  a3[1] = v35;
  return result;
}

  int v11 = *(_BYTE *)(a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 44) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "impactOperatingMode", *(_DWORD *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 45), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  int v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 48) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "repetitiveMotionEndTs", *(void *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "impactMaxAccelNormAlertThreshold", *(float *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 64) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "meanRotationZ", *(double *)(a1 + 24));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 52) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

  unsigned int v12 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 24) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 60) & 0x800) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0xCu);
  }

  int v17 = *(void *)(a2 + 152);
  *(_WORD *)(a1 + 172) |= 0x40u;
  *(void *)(a1 + 152) = v17;
  unsigned int v12 = *(_WORD *)(a2 + 172);
  if ((v12 & 8) != 0) {
    goto LABEL_24;
  }
LABEL_18:
  if ((v12 & 4) != 0)
  {
LABEL_19:
    int v13 = *(void *)(a2 + 120);
    *(_WORD *)(a1 + 172) |= 4u;
    *(void *)(a1 + 120) = v13;
  }

  return a1;
}

  PB::TextFormatter::format(this, "partialin", *(_BYTE *)(a1 + 39));
  if ((*(_WORD *)(a1 + 48) & 0x40) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "stable", *(_BYTE *)(a1 + 40));
LABEL_12:
  unsigned int v8 = *(void *)(a1 + 16);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))(v8, this, "threshold");
  }
  BOOL v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    BOOL v9 = *(_WORD *)(a1 + 48);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_27;
    }
  }

  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "upright", *(_BYTE *)(a1 + 41));
  BOOL v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
LABEL_28:
    PB::TextFormatter::format(this, "vertical", *(_BYTE *)(a1 + 43));
    if ((*(_WORD *)(a1 + 48) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_19;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 9u);
  char v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x200) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  unint64_t v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 0x80) == 0) {
    goto LABEL_17;
  }
LABEL_25:
  PB::TextFormatter::format(this, "upright", *(_BYTE *)(a1 + 104));
LABEL_17:
  int v11 = *(float **)(a1 + 32);
  unsigned int v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    int v13 = *v11++;
    PB::TextFormatter::format(this, "variance", v13);
  }

  return PB::TextFormatter::endObject(this);
}

  unint64_t v10 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "isBIO", *(_BYTE *)(a1 + 64));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  int v17 = *(_DWORD *)(a2 + 112);
  *(_WORD *)(a1 + 120) |= 0x40u;
  *(_DWORD *)(a1 + 112) = v17;
  unint64_t v10 = *(_WORD *)(a2 + 120);
  if ((v10 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 0x10) != 0)
  {
LABEL_17:
    int v11 = *(_DWORD *)(a2 + 104);
    *(_WORD *)(a1 + 120) |= 0x10u;
    *(_DWORD *)(a1 + 104) = v11;
  }

  return a1;
}

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  return a1;
}

  int v13 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 44) = v13;
  if ((*(_WORD *)(a2 + 68) & 8) != 0) {
    goto LABEL_24;
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 64) = result;
  uint64_t v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 72));
  int v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 88));
    if ((*(_WORD *)(a1 + 104) & 0x800) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xCu);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  unsigned int v12 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 64) = v3;
  *(void *)(result + 16) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "numDmSamplesEpoch", *(_DWORD *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    PB::TextFormatter::format(this, "timeVariation", *(_DWORD *)(a1 + 56));
    if ((*(_WORD *)(a1 + 64) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0x12Fu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0x131u);
  }

  char v7 = *(_BYTE *)(a2 + 50);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 52) = v3;
  *(_BYTE *)(a1 + 50) = v7;
  if ((*(_WORD *)(a2 + 52) & 2) != 0) {
    goto LABEL_24;
  }
  return result;
}

  unint64_t v16 = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 104) |= 2u;
  *(void *)(a1 + 64) = v16;
  if ((*(_WORD *)(a2 + 104) & 4) != 0)
  {
LABEL_11:
    char v7 = *(void *)(a2 + 72);
    *(_WORD *)(a1 + 104) |= 4u;
    *(void *)(a1 + 72) = v7;
  }

  PB::TextFormatter::format(this, "windowAfterArmHighImuDrivingConfidencePercentage", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 104) & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "windowAfterArmHighRotationPercentage", *(float *)(a1 + 100));
LABEL_15:
  unint64_t v10 = *(unsigned int **)(a1 + 32);
  int v11 = *(unsigned int **)(a1 + 40);
  while (v10 != v11)
  {
    unsigned int v12 = *v10++;
    PB::TextFormatter::format(this, "windowAfterArmMeanPoseAngleXHistogram", v12);
  }

  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 6u);
  char v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 2) != 0) {
    goto LABEL_24;
  }
LABEL_11:
  if ((v7 & 4) != 0) {
LABEL_12:
  }
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 72), 8u);
LABEL_13:
  unsigned int v8 = *(unsigned int **)(v3 + 8);
  BOOL v9 = *(unsigned int **)(v3 + 16);
  while (v8 != v9)
  {
    unint64_t v10 = *v8++;
    uint64_t result = PB::Writer::writeVarInt(this, v10, 9u);
  }

  int v11 = *(_WORD *)(v3 + 104);
  if ((v11 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xAu);
    int v11 = *(_WORD *)(v3 + 104);
  }

  if ((v11 & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  }
  return result;
}

  unsigned int v8 = *(_BYTE *)(a2 + 94);
  v3 |= 0x8000u;
  *(_WORD *)(result + 96) = v3;
  *(_BYTE *)(result + 94) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 93), 0xCBu);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 172);
  *(_WORD *)(a1 + 192) |= 0x10u;
  *(_DWORD *)(a1 + 172) = v15;
  if ((*(_WORD *)(a2 + 192) & 2) != 0)
  {
LABEL_13:
    char v7 = *(_DWORD *)(a2 + 160);
    *(_WORD *)(a1 + 192) |= 2u;
    *(_DWORD *)(a1 + 160) = v7;
  }

  unsigned int v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "rawPressureTemperature", *(float *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 16));
    if ((*(_WORD *)(a1 + 64) & 0x400) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 60), 0xCu);
  }

  int v13 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 24) = v13;
  if ((*(_WORD *)(a2 + 48) & 0x200) != 0) {
    goto LABEL_24;
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 32);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "heightM", *(float *)(a1 + 28));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  int v13 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 24) = v13;
  if ((*(_WORD *)(a2 + 60) & 0x400) != 0) {
    goto LABEL_24;
  }
  return result;
}

  PB::TextFormatter::format(this, "didEstimate", *(_BYTE *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel", *(_DWORD *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 9u);
  unint64_t v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x40) == 0)
  {
LABEL_16:
    if ((v10 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xBu);
  }

          unsigned int v12 = v43;
          ++v13;
          if (v42 != v43) {
            continue;
          }
          unsigned int v6 = 0LL;
          break;
        default:
          sub_100BFBA30();
      }

      break;
    }
  }

  *(void *)int v37 = &v42;
  sub_100BFBF8C((void ***)v37);
  return v6;
}

  uint64_t result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_WORD *)(a2 + 60) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

  int v17 = *(void *)(a2 + 64);
  v6 |= 0x20u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 64) = v17;
  int v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  int v13 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 72) = v3;
  *(void *)(result + 16) = v13;
  if ((*(_WORD *)(a2 + 72) & 0x100) != 0) {
    goto LABEL_24;
  }
  return result;
}

  int v19 = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 100) |= 0x20u;
  *(void *)(a1 + 64) = v19;
  int v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 0x40) == 0)
  {
LABEL_12:
    if ((v13 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "speedStdDevOdometer", *(double *)(a1 + 40));
  char v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 9u);
  unsigned int v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 64) = result;
  if ((*(_WORD *)(a2 + 96) & 1) != 0) {
    goto LABEL_24;
  }
  return result;
}

  unsigned int v12 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 48) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "session", *(_DWORD *)(a1 + 84));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 92) & 0x800) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  }

  BOOL v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 44) = v9;
  if ((*(_WORD *)(a2 + 56) & 0x40) != 0) {
    goto LABEL_24;
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v4 |= 0x100u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  int v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x80) == 0)
  {
LABEL_14:
    if ((v3 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "strideDirection", *(_DWORD *)(a1 + 52));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
    if ((*(_WORD *)(a1 + 64) & 0x800) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 0xCu);
  }

  int v17 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 104) |= 4u;
  *(void *)(a1 + 48) = v17;
  BOOL v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 0x10) == 0)
  {
LABEL_13:
    if ((v9 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 96));
  unsigned int v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 9u);
  unsigned int v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "listenerYaw", *(float *)(a1 + 88));
  if ((*(_WORD *)(a1 + 96) & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "machAbsTimestamp", *(double *)(a1 + 40));
LABEL_10:
  unsigned int v6 = *(float **)(a1 + 8);
  char v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    unsigned int v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }

  BOOL v9 = *(_WORD *)(a1 + 96);
  if ((v9 & 4) == 0)
  {
    if ((v9 & 8) == 0) {
      goto LABEL_14;
    }
LABEL_26:
    PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 96) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "receivedAuxTimestamp", *(double *)(a1 + 48));
  BOOL v9 = *(_WORD *)(a1 + 96);
  if ((v9 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_14:
  if ((v9 & 0x10) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 8u);
  unsigned int v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  int v17 = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 112) |= 0x80u;
  *(void *)(a1 + 88) = v17;
  unint64_t v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x100) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 0x40) != 0)
  {
LABEL_17:
    int v11 = *(void *)(a2 + 80);
    *(_WORD *)(a1 + 112) |= 0x40u;
    *(void *)(a1 + 80) = v11;
  }

  return a1;
}

  PB::TextFormatter::format(this, "predictionTimeMeta", *(double *)(a1 + 88));
  if ((*(_WORD *)(a1 + 112) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "propagationTimeMeta", *(double *)(a1 + 96));
LABEL_11:
  unsigned int v6 = *(double **)(a1 + 8);
  char v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    unsigned int v8 = *v6++;
    PB::TextFormatter::format(this, "rotationMatrixElement", v8);
  }

  if ((*(_WORD *)(a1 + 112) & 0x200) != 0) {
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 104));
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 9u);
  unsigned int v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) == 0)
  {
LABEL_14:
    if ((v8 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 80), 0xBu);
  }

  unsigned int v6 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 72) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "heartRateConfidence", *(double *)(a1 + 32));
  int v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  char v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 32) = v7;
  if ((*(_WORD *)(a2 + 60) & 2) != 0) {
    goto LABEL_24;
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 48) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "looseCoveredPocketObstructed", *(float *)(a1 + 44));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "enableStateDetected", *(_BYTE *)(a1 + 77));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  BOOL v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "maxSampleDeltaInSecond", *(float *)(a1 + 20));
  int v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  int v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "shouldNotify", *(_BYTE *)(a1 + 60));
  int v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  int v11 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 8) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  unsigned int v12 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 16) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 56));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
LABEL_25:
    PB::TextFormatter::format(this, "uncertaintyOfGeoLocation", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 88), 0xCu);
  }

  int v13 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(void *)(result + 8) = v13;
  if ((*(_WORD *)(a2 + 68) & 0x200) != 0) {
    goto LABEL_24;
  }
  return result;
}

  unint64_t v10 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 40) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "originDevice", *(_DWORD *)(a1 + 84));
  int v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  int v11 = *(_BYTE *)(a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "positionUncZ", *(float *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 88);
  v6 |= 2u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 88) = v15;
  int v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  unsigned int v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 40) = v8;
  uint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 6u);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  if ((*(_WORD *)(a2 + 88) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 84) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  if ((*(_WORD *)(a2 + 84) & 0x40) != 0) {
    goto LABEL_24;
  }
  return result;
}

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 72) = result;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 40));
  int v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 88), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "qStopW", *(float *)(a1 + 48));
  int v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 64) = result;
  uint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "centripetalRotationRateX", *(double *)(a1 + 56));
  int v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  PB::TextFormatter::format(this, "formBasedStartTime", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }

LABEL_58:
  unsigned int v29 = *(const std::string **)(a2 + 96);
  *(_DWORD *)(a1 + 116) |= 0x2000u;
  int v30 = *(std::string **)(a1 + 96);
  if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v30 = (std::string *)operator new(0x18uLL);
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 96) = v30;
  }

  std::string::operator=(v30, v29);
  if ((*(_DWORD *)(a2 + 116) & 0x4000) != 0)
  {
LABEL_61:
    unint64_t v31 = *(const std::string **)(a2 + 104);
    *(_DWORD *)(a1 + 116) |= 0x4000u;
    int v32 = *(std::string **)(a1 + 104);
    if (v32 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v32 = (std::string *)operator new(0x18uLL);
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 104) = v32;
    }

    std::string::operator=(v32, v31);
  }

  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A0978 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v15,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  (int)a2,  *(double *)(v5 + 176),  a3);
  if ((*(_DWORD *)(v5 + 292) & 0x80000) != 0) {
LABEL_26:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  *(void *)(v5 + 184),  (unint64_t)a2,  a4);
LABEL_27:
  if (*(int *)(v5 + 200) >= 1)
  {
    unint64_t v10 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  *(void *)(*(void *)(v5 + 192) + 8 * v10++),  a2,  a4);
    while (v10 < *(int *)(v5 + 200));
  }

  if (*(int *)(v5 + 224) >= 1)
  {
    int v11 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  *(void *)(*(void *)(v5 + 216) + 8 * v11++),  a2,  a4);
    while (v11 < *(int *)(v5 + 224));
  }

  if (*(int *)(v5 + 248) >= 1)
  {
    unsigned int v12 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  *(void *)(*(void *)(v5 + 240) + 8 * v12++),  a2,  a4);
    while (v12 < *(int *)(v5 + 248));
  }

  if (*(int *)(v5 + 272) >= 1)
  {
    int v13 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  *(void *)(*(void *)(v5 + 264) + 8 * v13++),  a2,  a4);
    while (v13 < *(int *)(v5 + 272));
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3D,  (int)a2,  *(double *)(v5 + 184),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }

  unint64_t v22 = *(void (****)(void, double))(a1 + 152);
  if (*(_BYTE *)(a1 + 144))
  {
    (**v22)(v22, *(double *)(a1 + 136) + 180.0);
    unint64_t v22 = *(void (****)(void, double))(a1 + 152);
    int v23 = 2LL;
  }

  else
  {
    int v23 = 3LL;
  }

  return ((uint64_t (*)(void))(*v22)[v23])();
}

  unsigned int v6 = 0LL;
LABEL_59:
  objc_autoreleasePoolPop(v12);
LABEL_60:
  return v6;
}

  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A11B8 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v15,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 48);
  a1[37] |= 0x400u;
  a1[12] = v21;
  int v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  v5[23],  a2,  a4);
  unsigned int v6 = v5[37];
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }

  int v37 = *((_DWORD *)a1 + 30);
  if (v37 >= 3)
  {
    char v26 = 0;
    int v38 = *((double *)a1 + 11);
    if (v38 > 1.6777 || v38 < 0.0909) {
      goto LABEL_61;
    }
  }

  unsigned int v27 = *(void *)(a1 + 48);
  int v28 = *(unsigned __int8 *)(v27 + 23);
  unsigned int v29 = v28;
  int v30 = *(void *)(v27 + 8);
  if ((v28 & 0x80u) == 0) {
    unint64_t v31 = *(unsigned __int8 *)(v27 + 23);
  }
  else {
    unint64_t v31 = v30;
  }
  if (v31 >= 0x80)
  {
    int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v31,  a2);
    int v28 = *(unsigned __int8 *)(v27 + 23);
    int v30 = *(void *)(v27 + 8);
    int v3 = *(_DWORD *)(a1 + 88);
    unsigned int v29 = *(_BYTE *)(v27 + 23);
  }

  else
  {
    int v32 = 1;
  }

  if (v29 < 0) {
    int v28 = v30;
  }
  uint64_t v4 = (v4 + v32 + v28 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_67:
    char v33 = *(void *)(a1 + 56);
    if (!v33) {
      char v33 = *(void *)(qword_1019A17B8 + 56);
    }
    int v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100810DB8(v33, a2);
    unint64_t v35 = (int)v34;
    else {
      int v36 = 1;
    }
    uint64_t v4 = (v4 + v35 + v36 + 1);
    int v3 = *(_DWORD *)(a1 + 88);
  }

                PBReaderRecallMark(a2, v47);
              }

              else
              {
                unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v43 <= 0xFFFFFFFFFFFFFFF7LL && v43 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  int v44 = *(double *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 8;
                }

                else
                {
                  *(_BYTE *)(a2 + v11) = 1;
                  int v44 = 0.0;
                }

                PBRepeatedDoubleAdd(a1 + 32, a2, v44);
              }

      if ((char)v104.__r_.__value_.__s.__size_ < 0)
      {
        int v38 = v104.__r_.__value_.__l.__size_ == 3
           && *(_WORD *)v104.__r_.__value_.__l.__data_ == 27745
           && *(_BYTE *)(v104.__r_.__value_.__r.__words[0] + 2) == 115;
        if (v104.__r_.__value_.__l.__size_ != 4)
        {
          uint64_t v39 = 0LL;
          goto LABEL_80;
        }

        uint64_t v42 = (std::string *)v104.__r_.__value_.__r.__words[0];
        goto LABEL_78;
      }

      int v38 = 0LL;
      if (v104.__r_.__value_.__s.__size_ == 4)
      {
        uint64_t v42 = &v104;
LABEL_78:
        uint64_t v39 = LODWORD(v42->__r_.__value_.__l.__data_) == 1701603700;
        goto LABEL_79;
      }

      uint64_t v39 = 0LL;
      if (v104.__r_.__value_.__s.__size_ == 3)
      {
        uint64_t v39 = 0LL;
        int v38 = LOWORD(v104.__r_.__value_.__l.__data_) == 27745 && v104.__r_.__value_.__s.__data_[2] == 115;
        goto LABEL_80;
      }

      dispatch_once(&qword_101934830, &stru_101860CB0);
      goto LABEL_8;
    }
  }

  else if (*a5 == 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v11 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:dN == 0", buf, 2u);
    }

    unsigned int v12 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 == -1) {
        goto LABEL_8;
      }
      goto LABEL_58;
    }
  }

  else
  {
    uint64_t v15 = *a6;
    if ((char *)a6[1] - (char *)*a6 == 32)
    {
      if (a3[1] - *a3 == 32LL)
      {
        const std::string *v15 = *v15 + *(double *)*a3 * *a2 / *a4;
        int v17 = sub_10090D568(a1, v15);
        if (v17)
        {
          uint64_t v18 = *a6 + 1;
          std::string *v18 = *(double *)(*a3 + 8LL) * *a2 / *a5 + *v18;
          if ((sub_10090D784(v17, v18) & 1) != 0)
          {
            int v19 = *a3;
            char v20 = *a6;
            uint64_t v21 = (*a6)[3];
            v20[2] = *(double *)(*a3 + 16LL) * *a2 + (*a6)[2];
            v20[3] = v21 + *(double *)(v19 + 24) * *a2;
            return 1LL;
          }

          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          int v28 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
          }

          unsigned int v29 = sub_1002921D0(115, 0);
          uint64_t result = 0LL;
          if (v29)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101860CB0);
            }
            LOWORD(v31[0]) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:boundLongitude failed",  v31,  2,  v31[0]);
            goto LABEL_55;
          }
        }

        else
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          char v26 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
          }

          unsigned int v27 = sub_1002921D0(115, 0);
          uint64_t result = 0LL;
          if (v27)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101860CB0);
            }
            LOWORD(v31[0]) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:boundLatitude failed",  v31,  2,  v31[0]);
            goto LABEL_55;
          }
        }
      }

      else
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        unint64_t v24 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "KF:k is not dimensioned, innovation not applied",  buf,  2u);
        }

        char v25 = sub_1002921D0(115, 0);
        uint64_t result = 0LL;
        if (v25)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          LOWORD(v31[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:k is not dimensioned, innovation not applied",  v31,  2,  v31[0]);
          goto LABEL_55;
        }
      }
    }

    else
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      unint64_t v22 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "KF:x is not dimensioned, innovation not applied",  buf,  2u);
      }

      int v23 = sub_1002921D0(115, 0);
      uint64_t result = 0LL;
      if (v23)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        LOWORD(v31[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:x is not dimensioned, innovation not applied",  v31,  2,  v31[0]);
        goto LABEL_55;
      }
    }
  }

  return result;
}

              container_query_free(v6);
              goto LABEL_59;
            }

            last_error = container_query_get_last_error(v6);
            unint64_t v35 = (NSURL *)container_error_copy_unlocalized_description(last_error);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101860E58);
            }
            int v36 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
            {
              *(void *)buf = 68289282LL;
              uint64_t v78 = 2082;
              v79 = "";
              uint64_t v80 = 2082;
              uint64_t v81 = v35;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor Error executing query for container, error:%{public, location:escape_only}s}",  buf,  0x1Cu);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101860E58);
              }
            }

            int v37 = (os_log_s *)qword_101934988;
            if (os_signpost_enabled((os_log_t)qword_101934988))
            {
              *(void *)buf = 68289282LL;
              uint64_t v78 = 2082;
              v79 = "";
              uint64_t v80 = 2082;
              uint64_t v81 = v35;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v37,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor Error executing query for container",  "{msg%{public}.0s:#monitor Error executing query for container, error:%{public, location:escape_only}s}",  buf,  0x1Cu);
            }

            free(v35);
LABEL_57:
            unint64_t v16 = 0LL;
            goto LABEL_58;
          }

          int v19 = 0;
          goto LABEL_31;
        }

    char v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 96);
    if ((v20 & 0x80000000) != 0)
    {
      uint64_t v21 = 10;
    }

    else if (v20 >= 0x80)
    {
      uint64_t v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
      int v3 = *(_DWORD *)(a1 + 172);
    }

    else
    {
      uint64_t v21 = 1;
    }

    v5 += v21 + 1;
    if ((v3 & 0x2000) == 0)
    {
LABEL_38:
      if ((v3 & 0x8000) == 0) {
        goto LABEL_76;
      }
LABEL_70:
      unint64_t v24 = *(void *)(a1 + 128);
      if (!v24) {
        unint64_t v24 = *(void *)(qword_1019A1AE0 + 128);
      }
      char v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A50614(v24);
      char v26 = (int)v25;
      else {
        unsigned int v27 = 1;
      }
      v5 += v26 + v27 + 2;
      int v3 = *(_DWORD *)(a1 + 172);
      goto LABEL_76;
    }

  uint64_t v18 = *(void *)(v5 + 96);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_1019A1CE8 + 96);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v18,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }

  char v14 = *(void *)(v5 + 80);
  if (!v14) {
    char v14 = *(void *)(qword_1019A1D38 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v14,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_64;
  }

    sub_100BFF03C();
  }

  if (v12 == 42)
  {
    int v13 = a2 + 1;
    if (v11) {
      int v19 = 1;
    }
    else {
      int v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      int v13 = a2 + 2;
      char v14 = 0LL;
      goto LABEL_26;
    }

    char v14 = 0LL;
    goto LABEL_36;
  }

  int v13 = a2;
  if (v12 == 43)
  {
    int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      int v13 = a2 + 2;
      char v14 = 1LL;
LABEL_26:
      uint64_t v18 = -1LL;
      goto LABEL_33;
    }

    char v14 = 1LL;
    goto LABEL_36;
  }

  return v13;
}

  return v21;
}

  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
}

    operator delete(__s1[0]);
    if (!v37)
    {
LABEL_59:
      if (sub_100D504C0(*(double *)(a1 + 1432) - *((float *)&v76 + 2)) >= *a3)
      {
        int v38 = 0;
      }

      else
      {
        int v38 = 1;
        *a4 = 1;
        HIDWORD(v56) = 1;
      }

      goto LABEL_47;
    }

  uint64_t v42 = 0LL;
  if (!v13) {
    return v42;
  }
LABEL_68:
  int v45 = (unint64_t *)&v13->__shared_owners_;
  do
    int v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }

  return v42;
}

  unsigned int v8 = *(_BYTE *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 152) = v8;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000000LL) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 92));
  int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x14u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }

  unint64_t v16 = *(_DWORD *)(a2 + 360);
  v5 |= 0x100000000000uLL;
  *uint64_t v2 = v5;
  *(_DWORD *)(a1 + 360) = v16;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfOffBody", *(void *)(a1 + 88));
  unsigned int v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 200), 0x33u);
  int v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }

  unint64_t v16 = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 124) = v16;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800000000LL) == 0)
  {
LABEL_25:
    if ((v2 & 0x100000000LL) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "numNonzeroStepEpochs", *(_DWORD *)(a1 + 92));
  int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 155), 0x15u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000LL) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }

  char v33 = *(void *)(a2 + 240);
  v10 |= 4u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 240) = v33;
  BOOL v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }

  uint64_t result = *(float *)(a2 + 192);
  v3 |= 0x80000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 192) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40000000000LL) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000000000LL) == 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "aopTsSensor", *(void *)(a1 + 16));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 188), 8u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000000LL) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }

  int v30 = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 212) |= 0x4000000u;
  *(_DWORD *)(a1 + 200) = v30;
  unint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "nFullAccel", *(_DWORD *)(a1 + 152));
  BOOL v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x12u);
  char v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100) == 0)
  {
LABEL_27:
    if ((v14 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }

  uint64_t result = *(float *)(a2 + 64);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 64) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40) == 0) {
      goto LABEL_32;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "pressureMedian", *(float *)(a1 + 132));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x1Bu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 8) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }

  int v30 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 68) = v30;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x2000000) == 0) {
      return result;
    }
LABEL_60:
    int v32 = *(_BYTE *)(a2 + 125);
    *(_DWORD *)(result + 132) = v3 | 0x2000000;
    *(_BYTE *)(result + 125) = v32;
    return result;
  }

  PB::TextFormatter::format(this, "transitionSpeedStart", *(float *)(a1 + 116));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800000) != 0) {
    goto LABEL_59;
  }
LABEL_29:
  if ((v5 & 0x10) != 0) {
LABEL_30:
  }
    PB::TextFormatter::format(this, "transitionTimeStart", *(void *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 128), 0x130u);
  if ((*(_DWORD *)(v3 + 132) & 0x2000000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 125), 0x131u);
  }
  return result;
}

  char v26 = *(_DWORD *)(a2 + 84);
  v3 |= 0x2000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 84) = v26;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "metaDtBwFirstFreeFall", *(void *)(a1 + 32));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x18u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }

  uint64_t result = *(float *)(a2 + 92);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 92) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x100000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
  int v5 = *(void *)(a1 + 172);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xBu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_60;
  }

              *(void *)(a1 + 8) = v24;
              goto LABEL_59;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 25) = v28;
              goto LABEL_59;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v30 = v29 != 0;
              }

              *(_BYTE *)(a1 + 24) = v30;
              goto LABEL_59;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_40;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_53;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_53:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_40:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_59;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
LABEL_59:
              int v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "now", *(float *)(a1 + 84));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0x13u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }

  char v25 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 88) = v25;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "regValAmbientWindowEvents", *(_DWORD *)(a1 + 116));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x17u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "sensorCovered", *(_BYTE *)(a1 + 132));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x1Au);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }

    sub_100BFF03C();
  }

  if (v12 == 42)
  {
    int v13 = a2 + 1;
    if (v11) {
      int v19 = 1;
    }
    else {
      int v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      int v13 = a2 + 2;
      char v14 = 0LL;
      goto LABEL_26;
    }

    char v14 = 0LL;
    goto LABEL_36;
  }

  if (v12 == 43)
  {
    int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      int v13 = a2 + 2;
      char v14 = 1LL;
LABEL_26:
      uint64_t v18 = -1LL;
      goto LABEL_33;
    }

    char v14 = 1LL;
    goto LABEL_36;
  }

  return a2;
}

  int v19 = *(_DWORD *)(a2 + 156);
  v3 |= 0x2000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 156) = v19;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "planarMaxSaturation", *(float *)(a1 + 144));
  int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x4000000000LL) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 188), 0x11u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }

  uint64_t result = *(double *)(a2 + 216);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 216) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtCv", *(double *)(a1 + 208));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 224), 0x1Bu);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }

  int v45 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 152) |= 0x800u;
  *(_DWORD *)(a1 + 108) = v45;
  int v32 = *(_DWORD *)(a2 + 152);
  if ((v32 & 0x2000) == 0)
  {
LABEL_45:
    if ((v32 & 0x200) == 0) {
      goto LABEL_46;
    }
LABEL_60:
    uint64_t v47 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 152) |= 0x200u;
    *(_DWORD *)(a1 + 100) = v47;
    if ((*(_DWORD *)(a2 + 152) & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }

  PB::TextFormatter::format(this, "dailyFlights30daysMean", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 220), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_60;
  }

  uint64_t v4 = *(void *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(a1 + 184) = v3;
  *(void *)(a1 + 16) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "doubleSupportPercentageIsValid", *(_BYTE *)(a1 + 177));
  int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xCu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000000000LL) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }

  int v36 = *(_DWORD *)(a2 + 160);
  v5 |= 0x400000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 160) = v36;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_59;
  }
LABEL_28:
  if ((v4 & 0x100000) != 0)
  {
LABEL_29:
    unsigned int v8 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a1 + 180) = v5 | 0x100000;
    *(_DWORD *)(a1 + 152) = v8;
  }

  unsigned int v27 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 48) = v27;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0x19u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }

  char v26 = *(void *)(a2 + 16);
  v5 |= 2uLL;
  *(void *)(a1 + 192) = v5;
  *(void *)(a1 + 16) = v26;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "rawConfidence", *(_DWORD *)(a1 + 112));
  int v5 = *(void *)(a1 + 192);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 0x10u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }

  BOOL v9 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 28) = v9;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "auxUserAccelInertial_X", *(float *)(a1 + 36));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 7u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_60;
  }

  unsigned int v27 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 56) = v27;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravShort", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0x19u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }

  unsigned int v29 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 164) |= 4u;
  *(_DWORD *)(a1 + 72) = v29;
  unint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "rBoresight_Z", *(float *)(a1 + 116));
  BOOL v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x14u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }

  uint64_t result = *(double *)(a2 + 32);
  v3 |= 8uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }

  PB::TextFormatter::format(this, "strideLengthPace", *(double *)(a1 + 96));
  int v5 = *(void *)(a1 + 224);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x16u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }

    v8.n128_f64[0] = (float)(*v27 - *v29);
  }

  (*(void (**)(uint64_t, const __CFString *, __n128))(*(void *)a1 + 328LL))( a1,  @"TemperatureSpan",  v8);
  int v36 = *(void *)(a1 + 296);
  int v37 = (v36 - v9) >> 5;
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3578);
  }
  int v38 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v39 = ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5) - v37;
    *(_DWORD *)buf = 134218240;
    *(void *)&buf[4] = (v36 - v9) >> 5;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Point gyro database prune, deleted %zu samples, %zu remain.",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    int v55 = ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5) - v37;
    LODWORD(v60.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (v36 - v9) >> 5;
    WORD2(v60.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = v55;
    int v56 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Point gyro database prune, deleted %zu samples, %zu remain.",  (size_t)&v60,  22);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGyroCalibrationDatabaseLocalShared::prune()", "%s\n", v56);
    if (v56 != buf) {
      free(v56);
    }
  }

  if (v36 != v9)
  {
    sub_10000CE18((uint64_t)buf);
    int v40 = sub_10000CF44(&buf[16], (uint64_t)"UPDATE ", 7LL);
    char v41 = sub_10000CF44(v40, (uint64_t)"GyroPointCalibration", 20LL);
    uint64_t v42 = sub_10000CF44(v41, (uint64_t)" SET Active = ", 14LL);
    unint64_t v43 = (void *)std::ostream::operator<<(v42, 0LL);
    int v44 = sub_10000CF44(v43, (uint64_t)" WHERE ", 7LL);
    int v45 = sub_10000CF44(v44, (uint64_t)"Id", 2LL);
    sub_10000CF44(v45, (uint64_t)" = ?", 4LL);
    if (*(_BYTE *)(a1 + 249))
    {
      std::stringbuf::str(&v60, (const std::stringbuf *)&buf[24]);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v46 = &v60;
      }
      else {
        int v46 = (std::stringbuf::string_type *)v60.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(a1 + 112, (char *)v46, &v57);
      uint64_t v47 = v57;
      int v57 = 0LL;
    }

    else
    {
      sub_1003C0D54(a1 + 112, "DELETE FROM GyroPointCalibration WHERE Id = ?", &v57);
      uint64_t v47 = v57;
    }

    sub_1003C0454(a1 + 112);
    int v48 = *(void *)(a1 + 296);
    if (v9 != v48)
    {
      int v49 = v9;
      do
      {
        int v50 = *(void *)(v49 + 24);
        int v51 = (sqlite3_stmt *)sub_100019240(v47);
        if (sub_1003C2D24(v51, 1, v50))
        {
          int v52 = (sqlite3_stmt *)sub_100019240(v47);
          sub_1003BB2BC(a1 + 112, v52);
        }

        v49 += 32LL;
      }

      while (v49 != v48);
    }

    sub_1003C05BC(a1 + 112);
    else {
      uint64_t v53 = *(void *)(a1 + 200);
    }
    sub_1003C1EC0(a1 + 112, v53);
    if (v9 != *(void *)(a1 + 296)) {
      *(void *)(a1 + 296) = v9;
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
    sub_101201B2C(a1);
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
    }
    *(void *)&buf[16] = v54;
    if (v63 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf(&buf[24]);
    std::ios::~ios(&v64);
  }

  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }

void sub_100074EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100074EF4(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[2];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[3];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

  uint64_t v8 = a1[4];
  if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v8 != 0)
  {
    operator delete((void *)v8);
  }

  uint64_t v10 = a1[5];
  if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v10)
  {
    operator delete((void *)v10);
  }

  uint64_t v11 = a1[6];
  if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v11)
  {
    operator delete((void *)v11);
  }

  uint64_t v12 = a1[7];
  if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v12)
  {
    operator delete((void *)v12);
  }

  uint64_t v13 = a1[9];
  if ((_UNKNOWN *)v13 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v13)
  {
    operator delete((void *)v13);
  }

  uint64_t v14 = a1[10];
  if ((_UNKNOWN *)v14 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v14)
  {
    operator delete((void *)v14);
  }

  uint64_t v15 = a1[11];
  if ((_UNKNOWN *)v15 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v15)
  {
    operator delete((void *)v15);
  }

  uint64_t v16 = a1[12];
  if ((_UNKNOWN *)v16 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v16)
  {
    operator delete((void *)v16);
  }

  uint64_t v17 = a1[13];
  if ((_UNKNOWN *)v17 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v17)
  {
    operator delete((void *)v17);
  }

void sub_10007510C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B260;
  sub_100074EF4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007513C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B260;
  sub_100074EF4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

_DWORD *sub_100075170()
{
  uint64_t result = operator new(0x78uLL);
  result[16] = 9;
  *(void *)uint64_t result = off_10181B260;
  *((void *)result + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 10) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_WORD *)result + 34) = 0;
  *((void *)result + 11) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 12) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 13) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 14) = 0LL;
  return result;
}

uint64_t sub_1000751C0(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 116);
  if (v1)
  {
    *(_DWORD *)(result + 64) = 9;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 116) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 116) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 116) & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 116) & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(result + 40);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 116) & 0x40) != 0)
    {
      uint64_t v7 = *(void *)(result + 48);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 116) & 0x80) != 0)
    {
      uint64_t v8 = *(void *)(result + 56);
      if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
  }

  int v9 = *(_DWORD *)(result + 116);
  if ((v9 & 0xFF00) != 0)
  {
    if ((v9 & 0x100) != 0)
    {
      uint64_t v10 = *(void *)(result + 72);
      if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 117) & 2) != 0)
    {
      uint64_t v11 = *(void *)(result + 80);
      if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }

    *(_WORD *)(result + 68) = 0;
    if ((*(_BYTE *)(result + 117) & 0x10) != 0)
    {
      uint64_t v12 = *(void *)(result + 88);
      if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 117) & 0x20) != 0)
    {
      uint64_t v13 = *(void *)(result + 96);
      if ((_UNKNOWN *)v13 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 117) & 0x40) != 0)
    {
      uint64_t v14 = *(void *)(result + 104);
      if ((_UNKNOWN *)v14 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(_BYTE **)uint64_t v14 = 0;
          *(void *)(v14 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v14 = 0;
          *(_BYTE *)(v14 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_100075480( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_44:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v14 = ((1 << v9) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101227DCC();
            }
            *(_DWORD *)(a1 + 116) |= 1u;
            *(_DWORD *)(a1 + 64) = v9;
          }

          uint64_t v15 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 18)
          {
            *((void *)this + 1) = v15 + 1;
            goto LABEL_56;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v44);
        if ((_DWORD)result)
        {
          unsigned int v9 = v44;
          goto LABEL_44;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_39;
        }
LABEL_56:
        *(_DWORD *)(a1 + 116) |= 2u;
        uint64_t v16 = *(void **)(a1 + 8);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 8) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_62:
        *(_DWORD *)(a1 + 116) |= 4u;
        uint64_t v18 = *(void **)(a1 + 16);
        if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v18 = operator new(0x18uLL);
          v18[1] = 0LL;
          v18[2] = 0LL;
          void *v18 = 0LL;
          *(void *)(a1 + 16) = v18;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result) {
          return result;
        }
        int v19 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v19 + 1;
LABEL_68:
        *(_DWORD *)(a1 + 116) |= 8u;
        char v20 = *(void **)(a1 + 24);
        if (v20 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v20 = operator new(0x18uLL);
          v20[1] = 0LL;
          v20[2] = 0LL;
          void *v20 = 0LL;
          *(void *)(a1 + 24) = v20;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v20);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v21 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v21 + 1;
LABEL_74:
        *(_DWORD *)(a1 + 116) |= 0x10u;
        unint64_t v22 = *(void **)(a1 + 32);
        if (v22 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v22 = operator new(0x18uLL);
          v22[1] = 0LL;
          v22[2] = 0LL;
          *unint64_t v22 = 0LL;
          *(void *)(a1 + 32) = v22;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v22);
        if (!(_DWORD)result) {
          return result;
        }
        int v23 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v23 + 1;
LABEL_80:
        *(_DWORD *)(a1 + 116) |= 0x20u;
        unint64_t v24 = *(void **)(a1 + 40);
        if (v24 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v24 = operator new(0x18uLL);
          v24[1] = 0LL;
          unsigned int v24[2] = 0LL;
          *unint64_t v24 = 0LL;
          *(void *)(a1 + 40) = v24;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v24);
        if (!(_DWORD)result) {
          return result;
        }
        char v25 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v25 + 1;
LABEL_86:
        *(_DWORD *)(a1 + 116) |= 0x40u;
        char v26 = *(void **)(a1 + 48);
        if (v26 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v26 = operator new(0x18uLL);
          v26[1] = 0LL;
          unsigned int v26[2] = 0LL;
          void *v26 = 0LL;
          *(void *)(a1 + 48) = v26;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v26);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v27 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v27 + 1;
LABEL_92:
        *(_DWORD *)(a1 + 116) |= 0x80u;
        int v28 = *(void **)(a1 + 56);
        if (v28 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v28 = operator new(0x18uLL);
          v28[1] = 0LL;
          v28[2] = 0LL;
          void *v28 = 0LL;
          *(void *)(a1 + 56) = v28;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v28);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v29 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v29 + 1;
LABEL_98:
        *(_DWORD *)(a1 + 116) |= 0x100u;
        int v30 = *(void **)(a1 + 72);
        if (v30 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v30 = operator new(0x18uLL);
          v30[1] = 0LL;
          v30[2] = 0LL;
          void *v30 = 0LL;
          *(void *)(a1 + 72) = v30;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v30);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v31 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v31 + 1;
LABEL_104:
        *(_DWORD *)(a1 + 116) |= 0x200u;
        int v32 = *(void **)(a1 + 80);
        if (v32 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v32 = operator new(0x18uLL);
          v32[1] = 0LL;
          unsigned int v32[2] = 0LL;
          void *v32 = 0LL;
          *(void *)(a1 + 80) = v32;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v32);
        if (!(_DWORD)result) {
          return result;
        }
        char v33 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        uint64_t v13 = v33 + 1;
        *((void *)this + 1) = v13;
LABEL_110:
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v46);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v34 = v46;
          unint64_t v35 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v34 = *v13;
          unint64_t v35 = v13 + 1;
          *((void *)this + 1) = v35;
        }

        *(_BYTE *)(a1 + 68) = v34 != 0;
        *(_DWORD *)(a1 + 116) |= 0x400u;
        uint64_t v11 = v35 + 1;
        *((void *)this + 1) = v11;
LABEL_118:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v36 = v45;
          int v37 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v36 = *v11;
          int v37 = v11 + 1;
          *((void *)this + 1) = v37;
        }

        *(_BYTE *)(a1 + 69) = v36 != 0;
        int v12 = *(_DWORD *)(a1 + 116) | 0x800;
        *(_DWORD *)(a1 + 116) = v12;
        *((void *)this + 1) = v37 + 1;
LABEL_126:
        *(_DWORD *)(a1 + 116) = v12 | 0x1000;
        int v38 = *(void **)(a1 + 88);
        if (v38 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v38 = operator new(0x18uLL);
          v38[1] = 0LL;
          v38[2] = 0LL;
          *int v38 = 0LL;
          *(void *)(a1 + 88) = v38;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v38);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v39 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v39 + 1;
LABEL_132:
        *(_DWORD *)(a1 + 116) |= 0x2000u;
        int v40 = *(void **)(a1 + 96);
        if (v40 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v40 = operator new(0x18uLL);
          v40[1] = 0LL;
          v40[2] = 0LL;
          *int v40 = 0LL;
          *(void *)(a1 + 96) = v40;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v40);
        if (!(_DWORD)result) {
          return result;
        }
        char v41 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v41 + 1;
LABEL_138:
        *(_DWORD *)(a1 + 116) |= 0x4000u;
        uint64_t v42 = *(void **)(a1 + 104);
        if (v42 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v42 = operator new(0x18uLL);
          v42[1] = 0LL;
          v42[2] = 0LL;
          void *v42 = 0LL;
          *(void *)(a1 + 104) = v42;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v42);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_62;
        }
        goto LABEL_39;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_68;
        }
        goto LABEL_39;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_74;
        }
        goto LABEL_39;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_80;
        }
        goto LABEL_39;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_86;
        }
        goto LABEL_39;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_92;
        }
        goto LABEL_39;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_98;
        }
        goto LABEL_39;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_104;
        }
        goto LABEL_39;
      case 0xBu:
        int v7 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_110;
      case 0xCu:
        int v7 = TagFallback & 7;
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_118;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_39;
        }
        int v12 = *(_DWORD *)(a1 + 116);
        goto LABEL_126;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_39;
        }
        goto LABEL_132;
      case 0xFu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_138;
        }
        goto LABEL_39;
      default:
        int v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_100075C24( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 116);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 64),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 116);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

LABEL_25:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(9LL, *(void *)(v5 + 72), a2);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  *(_DWORD *)(a1 + 128) |= 8u;
  uint64_t v11 = *(void **)(a1 + 24);
  if (!v11)
  {
    uint64_t v11 = operator new(0x30uLL);
    v11[4] = 2LL;
    *uint64_t v11 = off_10181B008;
    v11[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v11[2] = 0LL;
    v11[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v11 + 10) = 0;
    *(void *)(a1 + 24) = v11;
  }

  int v12 = *(void *)(a2 + 24);
  if (!v12) {
    int v12 = *(void *)(qword_1019A0980 + 24);
  }
  sub_100072990((uint64_t)v11, v12);
  int v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 0x10) == 0)
  {
LABEL_15:
    if ((v6 & 0x20) == 0) {
      goto LABEL_16;
    }
LABEL_35:
    *(_DWORD *)(a1 + 128) |= 0x20u;
    uint64_t v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      uint64_t v15 = operator new(0x18uLL);
      _BYTE *v15 = off_10181B0F8;
      v15[1] = 5LL;
      *((_DWORD *)v15 + 4) = 0;
      *(void *)(a1 + 40) = v15;
    }

    uint64_t v16 = *(void *)(a2 + 40);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_1019A0980 + 40);
    }
    sub_100073954((uint64_t)v15, v16);
    int v6 = *(_DWORD *)(a2 + 128);
    if ((v6 & 0x40) == 0)
    {
LABEL_17:
      if ((v6 & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_45;
    }

    goto LABEL_40;
  }

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(void **)(a1 + 8);
    if (!v12)
    {
      int v12 = operator new(0x28uLL);
      v12[1] = 0LL;
      v12[2] = 0LL;
      std::string *v12 = off_10181AB58;
      *((_DWORD *)v12 + 6) = 0;
      v12[4] = 0LL;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  sub_1000E2320(buf);
  sub_10008DBE0((void *)(a1 + 8), (uint64_t)buf);
  *(void *)buf = &off_10181D7E8;
}

    uint64_t v11 = (v28 - 1) & v28;
    int v38 = v29;
    BOOL v14 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_12:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v14);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    int v19 = type metadata accessor for SymmetricKey(0LL);
    char v20 = *(void *)(v19 - 8);
    uint64_t v21 = __chkstk_darwin(v19);
    int v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v24 = *(void *)(v20 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t, double))(v20 + 16))( v23,  *(void *)(v12 + 56) + v24,  v19,  v21);
    char v25 = v37;
    char v26 = (void *)(*(void *)(v37 + 48) + v15);
    void *v26 = v18;
    v26[1] = v17;
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(*(void *)(v25 + 56) + v24, v23, v19);
    uint64_t result = (void *)swift_bridgeObjectRetain(v17);
    uint64_t v8 = v38;
  }

  int v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v36);
    unint64_t v31 = v33;
    int v32 = v37;
    goto LABEL_28;
  }

  int v28 = *(void *)(v34 + 8 * v30);
  if (v28)
  {
    unsigned int v29 = v30;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v29 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v29 >= v35) {
      goto LABEL_26;
    }
    int v28 = *(void *)(v34 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_25;
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 64),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 80),  a3);
  }

  uint64_t result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 92) |= 4u;
  *(double *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 92) |= 4u;
  *(double *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 92) |= 4u;
  *(double *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 92) |= 4u;
  *(double *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 92) |= 4u;
  *(double *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 92) |= 4u;
  *(double *)(a1 + 24) = result;
  int v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  int v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  unint64_t v10 = *(void *)(v5 + 40);
  if (!v10) {
    unint64_t v10 = *(void *)(qword_1019A0BD8 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 29),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 72),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  if ((v3 & 4) != 0)
  {
    uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v11 & 0x80000000) != 0)
    {
      int v12 = 11;
    }

    else if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 80);
    }

    else
    {
      int v12 = 2;
    }

    v4 += v12;
    if ((v3 & 8) == 0)
    {
LABEL_27:
      if ((v3 & 0x10) == 0) {
        goto LABEL_47;
      }
      goto LABEL_41;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_27;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if ((v13 & 0x80000000) != 0)
  {
    BOOL v14 = 11;
  }

  else if (v13 >= 0x80)
  {
    BOOL v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 80);
  }

  else
  {
    BOOL v14 = 2;
  }

  v4 += v14;
  if ((v3 & 0x10) != 0)
  {
LABEL_41:
    uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 80);
    }

    else
    {
      uint64_t v16 = 2;
    }

    v4 += v16;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(float *)(v5 + 48),  a3);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x200) != 0) {
    goto LABEL_26;
  }
LABEL_11:
  if ((v6 & 0x400) == 0) {
    return result;
  }
LABEL_27:
  unsigned int v9 = *(void *)(v5 + 56);
  if (!v9) {
    unsigned int v9 = *(void *)(qword_1019A0D10 + 56);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v9,  a2,  a4);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 45),  (BOOL)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(float *)(v5 + 48),  a3);
  }

  int v12 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 56) |= 8u;
  *(_DWORD *)(a1 + 28) = v12;
  int v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 28);
  if (v13 >= 4) {
    sub_1012301FC();
  }
  *(_DWORD *)(a1 + 56) |= 8u;
  *(_DWORD *)(a1 + 28) = v13;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    uint64_t v15 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  uint64_t v11 = *(_DWORD *)(a2 + 20);
  if (v11 >= 0xF) {
    sub_10123024C();
  }
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_DWORD *)(a1 + 20) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

    uint64_t result = *(double *)(a2 + 56);
    *(_DWORD *)(a1 + 88) |= 0x20u;
    *(double *)(a1 + 56) = result;
    BOOL v14 = *(_DWORD *)(a2 + 88);
    if ((v14 & 0x40) == 0)
    {
LABEL_18:
      if ((v14 & 0x80) == 0) {
        return result;
      }
      goto LABEL_19;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(float *)(v5 + 36),  a3);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_filteredVo2Max),  @"filteredVo2Max");
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_10:
    if ((has & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PBDataWriterWriteInt32Field(a3, self->_sessionType, 9LL);
  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_11:
    if ((has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  *((_DWORD *)a3 + 23) = self->_sessionType;
  *((_WORD *)a3 + 52) |= 0x800u;
  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_11:
    if ((has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  *((void *)result + 5) = *(void *)&self->_filteredVo2Max;
  *((_WORD *)result + 52) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x800) == 0)
  {
LABEL_10:
    if ((has & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  self->_sessionType = *((_DWORD *)a3 + 23);
  *(_WORD *)&self->_has |= 0x800u;
  uint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x4000) == 0)
  {
LABEL_11:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  *(void *)(v26 + 16) = v41;
  *(_OWORD *)char v26 = v40;
  *(_DWORD *)(v26 + 24) = v19;
  *(void *)(v26 + 28) = v38;
  *(_DWORD *)(v26 + 36) = v39;
  *(double *)(v26 + 40) = v20;
  *(void *)(v26 + 48) = v21;
  *(_DWORD *)(v26 + 56) = v17;
  *(_OWORD *)(v26 + 60) = *(_OWORD *)v43;
  *(_OWORD *)(v26 + 73) = *(_OWORD *)&v43[13];
  if (++v16 != 8) {
    goto LABEL_26;
  }
  return v14 + 96 == a2;
}

  *(_OWORD *)char v25 = v38;
  *(void *)(v25 + 16) = v39;
  *(_DWORD *)(v25 + 24) = v19;
  *(_DWORD *)(v25 + 28) = v20;
  *(double *)(v25 + 32) = v21;
  *(_OWORD *)(v25 + 40) = v37;
  *(_DWORD *)(v25 + 56) = v17;
  *(_OWORD *)(v25 + 60) = *(_OWORD *)v41;
  *(_OWORD *)(v25 + 73) = *(_OWORD *)&v41[13];
  if (++v16 != 8) {
    goto LABEL_26;
  }
  return v14 + 96 == a2;
}

    int v12 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(void *)(a1 + 32) = v12;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0) {
      return;
    }
    goto LABEL_26;
  }

    if (a3 != -1 && (a4 & 1) != 0)
    {
      -[CLAttributionRecord incrementAttributionCountForServiceType:]( v21,  "incrementAttributionCountForServiceType:",  a3);
      if (v19)
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        unint64_t v22 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          int v40 = 2082;
          char v41 = "";
          uint64_t v42 = 1026;
          *(_DWORD *)unint64_t v43 = a3;
          *(_WORD *)&v43[4] = 2114;
          *(void *)&v43[6] = v18;
          *(_WORD *)&v43[14] = 2114;
          *(void *)&v43[16] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#SystemStatusAttribution #AttributionRecord servicetype count incremented, Servic eType:%{public}d, Client:%{public, location:escape_only}@, Record:%{public, location:escape_only}@}",  buf,  0x2Cu);
        }
      }
    }

    goto LABEL_41;
  }

  if (a3 != -1 && a4) {
    -[CLAttributionRecord incrementAttributionCountForServiceType:](v21, "incrementAttributionCountForServiceType:", a3);
  }
LABEL_41:
  unsigned int v27 = 10.0;
  if (a5 > 0.0)
  {
    int v28 = a5 > 60.0 ? v19 : 0;
    unsigned int v27 = a5 <= 60.0 ? a5 : 60.0;
    if (v28 == 1)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      unsigned int v29 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        int v40 = 2082;
        char v41 = "";
        uint64_t v42 = 2114;
        *(void *)unint64_t v43 = v18;
        *(_WORD *)&v43[8] = 2050;
        *(double *)&v43[10] = a5;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#SystemStatusAttribtuion attributionDuration longer than 1m. Shortening attribution dur ation to 1m, client:%{public, location:escape_only}@, attributionDuration:%{public}f}",  buf,  0x26u);
      }

      unsigned int v27 = 60.0;
    }
  }

  -[CLTimer nextFireDelay](-[CLAttributionRecord attributionTimer](v21, "attributionTimer"), "nextFireDelay");
  if (v30 == 1.79769313e308)
  {
    sub_100550AEC(a1, v10, (uint64_t)-[CLAttributionRecord attributionIdentifier](v21, "attributionIdentifier"));
    -[CLTimer setNextFireDelay:]( -[CLAttributionRecord attributionTimer](v21, "attributionTimer"),  "setNextFireDelay:",  v27);
    if (v19)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      unsigned int v36 = qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        int v40 = 2082;
        char v41 = "";
        uint64_t v42 = 2114;
        *(void *)unint64_t v43 = v18;
        *(_WORD *)&v43[8] = 2114;
        *(void *)&v43[10] = v21;
        char v33 = "{msg%{public}.0s:#SystemStatusAttribution Started attribution timer for client, Client:%{publi"
              "c, location:escape_only}@, Record:%{public, location:escape_only}@}";
        unsigned int v34 = (os_log_s *)v36;
        unint64_t v35 = 38;
        goto LABEL_67;
      }
    }
  }

  else
  {
    -[CLTimer nextFireDelay](-[CLAttributionRecord attributionTimer](v21, "attributionTimer"), "nextFireDelay");
    if (v27 > v31) {
      -[CLTimer setNextFireDelay:]( -[CLAttributionRecord attributionTimer](v21, "attributionTimer"),  "setNextFireDelay:",  v27);
    }
    if (v19)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      int v32 = qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        int v40 = 2082;
        char v41 = "";
        uint64_t v42 = 2114;
        *(void *)unint64_t v43 = v18;
        *(_WORD *)&v43[8] = 2114;
        *(void *)&v43[10] = v21;
        *(_WORD *)&v43[18] = 2050;
        *(double *)&v43[20] = v27;
        char v33 = "{msg%{public}.0s:#SystemStatusAttribution Extended attribution timer for client, Client:%{publ"
              "ic, location:escape_only}@, Record:%{public, location:escape_only}@, Duration:%{public}f}";
        unsigned int v34 = (os_log_s *)v32;
        unint64_t v35 = 48;
LABEL_67:
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
      }
    }
  }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018441C0);
    }
    uint64_t v18 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026LL;
      unint64_t v31 = 2082;
      int v32 = "";
      int v19 = "{msg%{public}.0s:#usesync #warning Couldn't find a matching IDS device}";
      goto LABEL_29;
    }
  }

  else
  {
LABEL_20:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018441C0);
    }
    uint64_t v18 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026LL;
      unint64_t v31 = 2082;
      int v32 = "";
      int v19 = "{msg%{public}.0s:#usesync #warning Couldn't find an active device}";
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&buf, 0x12u);
    }
  }

  return 0LL;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(v5 + 40),  a3);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 48),  a3);
  int v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  int v6 = v5[20];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(char **)(a1 + 8);
    if (!v12)
    {
      int v12 = (char *)operator new(0x28uLL);
      *(void *)int v12 = off_101844E28;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(char **)(a1 + 8);
    if (!v12)
    {
      int v12 = (char *)operator new(0x28uLL);
      *(void *)int v12 = off_1018451E8;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  int v12 = *(void *)(v5 + 48);
  if (!v12) {
    int v12 = *(void *)(qword_1019A1328 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v12,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 64),  a2,  a4);
  }

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(char **)(a1 + 8);
    if (!v12)
    {
      int v12 = (char *)operator new(0x50uLL);
      *(void *)int v12 = off_101845698;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *((_DWORD *)v12 + 18) = 0;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(char **)(a1 + 8);
    if (!v12)
    {
      int v12 = (char *)operator new(0x30uLL);
      *(void *)int v12 = off_101845968;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *((void *)v12 + 5) = 0LL;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(void **)(a1 + 8);
    if (!v12)
    {
      int v12 = operator new(0x38uLL);
      v12[5] = 0LL;
      *((_DWORD *)v12 + 12) = 0;
      std::string *v12 = off_101845B48;
      v12[1] = 0LL;
      v12[2] = 0LL;
      v12[3] = 0LL;
      *((_DWORD *)v12 + 8) = 0;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  int v12 = *(_DWORD *)(a1 + 32);
  uint64_t v13 = (v12 + v4);
  if (v12 >= 1)
  {
    BOOL v14 = 0LL;
    do
    {
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100636398( *(void *)(*(void *)(a1 + 24) + 8 * v14),  a2);
      uint64_t v16 = (int)v15;
      else {
        uint64_t v17 = 1;
      }
      uint64_t v13 = (v16 + v13 + v17);
      ++v14;
    }

    while (v14 < *(int *)(a1 + 32));
  }

  *(_DWORD *)(a1 + 48) = v13;
  return v13;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

        if (v12 == 4) {
          return 1LL;
        }
        return 0LL;
      case 4u:
        int v12 = TagFallback & 7;
        uint64_t v18 = (char *)*((void *)this + 1);
        uint64_t v13 = *((void *)this + 2);
        goto LABEL_56;
      case 5u:
        int v12 = TagFallback & 7;
        int v19 = (char *)*((void *)this + 1);
        uint64_t v13 = *((void *)this + 2);
        goto LABEL_64;
      case 6u:
        int v12 = TagFallback & 7;
        char v20 = (char *)*((void *)this + 1);
        uint64_t v13 = *((void *)this + 2);
        goto LABEL_72;
      case 7u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_25;
        }
        goto LABEL_80;
      default:
        int v12 = TagFallback & 7;
        goto LABEL_25;
    }
  }

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(void **)(a1 + 8);
    if (!v12)
    {
      int v12 = operator new(0x20uLL);
      std::string *v12 = off_1018464A8;
      v12[1] = 0LL;
      v12[2] = 0LL;
      v12[3] = 0LL;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  uint64_t v18 = *(_DWORD *)(a2 + 20);
  a1[17] |= 8u;
  a1[5] = v18;
  uint64_t v13 = *(_DWORD *)(a2 + 68);
  if ((v13 & 0x20) == 0)
  {
LABEL_17:
    if ((v13 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_27;
  }

  uint64_t v11 = a2[5];
  a1[17] |= 8u;
  a1[5] = v11;
  uint64_t v5 = a2[17];
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_27:
    uint64_t v13 = a2[7];
    a1[17] |= 0x20u;
    a1[7] = v13;
    uint64_t v5 = a2[17];
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_28;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[11],  a2,  a4);
  int v6 = v5[17];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v5[12],  a2,  a4);
  int v6 = v5[16];
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v5[14],  a2,  a4);
  }

  uint64_t v8 = *(void *)(v5 + 40);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A14B0 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x400) != 0) {
    goto LABEL_28;
  }
LABEL_12:
  if ((v6 & 0x800) == 0) {
    return result;
  }
LABEL_29:
  unsigned int v9 = *(void *)(v5 + 48);
  if (!v9) {
    unsigned int v9 = *(void *)(qword_1019A14B0 + 48);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v9,  a2,  a4);
}

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(char **)(a1 + 8);
    if (!v12)
    {
      int v12 = (char *)operator new(0x58uLL);
      *(void *)int v12 = off_101849DB0;
      *((void *)v12 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v12 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v12 + 19) = 0;
      *((_DWORD *)v12 + 20) = 0;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *((_WORD *)v12 + 36) = 0;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

    *(_DWORD *)(a1 + 24) |= 2u;
    int v12 = *(char **)(a1 + 8);
    if (!v12)
    {
      int v12 = (char *)operator new(0x58uLL);
      *(void *)int v12 = off_101849DB0;
      *((void *)v12 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v12 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v12 + 19) = 0;
      *((_DWORD *)v12 + 20) = 0;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *((_WORD *)v12 + 36) = 0;
      *(void *)(a1 + 8) = v12;
    }

    uint64_t v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
    }

    else
    {
      unint64_t v22 = *v13;
      *((void *)this + 1) = v13 + 1;
    }

    BOOL v14 = *((_DWORD *)this + 14);
    uint64_t v15 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v14 + 1;
    if (v14 >= v15) {
      return 0LL;
    }
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
    uint64_t v18 = *((_DWORD *)this + 14);
    int v19 = __OFSUB__(v18, 1);
    char v20 = v18 - 1;
    if (v20 < 0 == v19) {
      *((_DWORD *)this + 14) = v20;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1LL;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }

  int v19 = 2LL;
LABEL_32:
  unsigned int v29 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v30
  unint64_t v31 = v23;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v33);
  return v19;
}

  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
  }

  else if ((*((_BYTE *)a3 + 56) & 2) != 0)
  {
    goto LABEL_34;
  }

  LOBYTE(v7) = (*((_BYTE *)a3 + 56) & 4) == 0;
  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
    LOBYTE(v7) = 1;
  }

  return v7;
}

      dispatch_once(&qword_101934660, &stru_101859F20);
      goto LABEL_23;
    }

    return 0LL;
  }

  uint64_t result = sub_1008323F0((void *)a1);
  if (result)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 24);
    sub_100831DBC((void *)a1);
    sub_100CCCC8C(a1 + 8, 3, (uint64_t)&v14 + 7);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    unint64_t v10 = (os_log_s *)qword_101934668;
    if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 67109632;
      uint64_t v17 = v9;
      uint64_t v18 = 1024;
      int v19 = 3;
      char v20 = 1024;
      uint64_t v21 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "State from, %d, event, %d, to, %d",  buf,  0x14u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934660 == -1) {
      goto LABEL_23;
    }
    goto LABEL_25;
  }

  return result;
}

  if (v35 == 0.0) {
    goto LABEL_26;
  }
  if ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v85 = fabs(v35);
    unsigned int v86 = 2.22044605e-16;
    if (v85 >= 1.0) {
      unsigned int v86 = v85 * 2.22044605e-16;
    }
    if (v85 <= v86)
    {
LABEL_26:
      int v32 = 0;
      goto LABEL_27;
    }
  }

  int v87 = fabs(v13);
  if (v87 != 90.0)
  {
    if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      unsigned int v36 = 0;
    }

    else
    {
      int v88 = fabs(v87 + -90.0);
      if (v87 < 90.0) {
        int v87 = 90.0;
      }
      if (v87 >= 1.0) {
        int v89 = v87 * 2.22044605e-16;
      }
      else {
        int v89 = 2.22044605e-16;
      }
      unsigned int v36 = v88 <= v89;
    }

    int v32 = 1;
    goto LABEL_28;
  }

  unint64_t v24 = (uint64_t *)__p;
  if (a4 > ((char *)v16 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v42 - (_BYTE *)v41) >> 3 < a4)
  {
    if (__p != v16)
    {
      char v25 = v42;
      if (v41 != v42)
      {
        while (1)
        {
          char v26 = (uint64_t *)v41;
          if (v41 != v25) {
            break;
          }
LABEL_36:
          if (++v24 == v16) {
            goto LABEL_37;
          }
        }

        while ((sub_10084CBD8(a5, *v24, *v26) & 1) != 0)
        {
          if (++v26 == v42)
          {
            uint64_t v16 = v39;
            char v25 = v26;
            goto LABEL_36;
          }
        }

        goto LABEL_40;
      }
    }
  }

  else if ((sub_10084E2F8((double *)v37, (uint64_t **)&__p, (uint64_t **)&v41, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
  {
    goto LABEL_40;
  }

  char v26 = (uint64_t *)__p;
  if (a4 > ((char *)v18 - (_BYTE *)__p) >> 3 || a3 > 0x63 || ((char *)v44 - (_BYTE *)v43) >> 3 < a4)
  {
    if (__p != v18)
    {
      unsigned int v27 = v44;
      if (v43 != v44)
      {
        while (1)
        {
          int v28 = (uint64_t *)v43;
          if (v43 != v27) {
            break;
          }
LABEL_36:
          if (++v26 == v18) {
            goto LABEL_37;
          }
        }

        while ((sub_10084CBD8(a5, *v26, *v28) & 1) != 0)
        {
          if (++v28 == v44)
          {
            uint64_t v18 = v41;
            unsigned int v27 = v28;
            goto LABEL_36;
          }
        }

        goto LABEL_40;
      }
    }
  }

  else if ((sub_10084DB1C((double *)v39, (uint64_t **)&__p, (uint64_t **)&v43, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
  {
    goto LABEL_40;
  }

    if (*(_DWORD *)(a3 + 120) != 2) {
      *(_BYTE *)(v6 + 20) = 1;
    }
LABEL_27:
    *(void *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = v3;
  }

  return result;
}

    if (*(_DWORD *)(a3 + 40) != 2) {
      *(_BYTE *)(v6 + 20) = 1;
    }
LABEL_27:
    *(void *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = v3;
  }

  return result;
}

  if (v32 < 0) {
    operator delete(*(void **)buf);
  }
}

  uint64_t v17 = a1[23];
  if (v17 >= 0) {
    uint64_t v18 = a1[23];
  }
  else {
    uint64_t v18 = *((void *)a1 + 1);
  }
  int v19 = a2[23];
  if ((v19 & 0x80u) == 0) {
    char v20 = a2[23];
  }
  else {
    char v20 = *((void *)a2 + 1);
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = *(unsigned __int8 **)a2;
  }
  if (v18 != v20) {
    goto LABEL_42;
  }
  if ((a1[23] & 0x80) != 0)
  {
LABEL_42:
    if (v17 >= 0) {
      char v25 = a1;
    }
    else {
      char v25 = *(const void **)a1;
    }
    if (v20 >= v18) {
      char v26 = v18;
    }
    else {
      char v26 = v20;
    }
    uint64_t v15 = memcmp(v25, v21, v26);
    uint64_t v16 = v18 >= v20;
    goto LABEL_72;
  }

  if (a1[23])
  {
    unint64_t v22 = v21;
    int v23 = a1;
    unint64_t v24 = a1[23];
    while (*v23 == *v22)
    {
      ++v23;
      ++v22;
      if (!--v24) {
        goto LABEL_49;
      }
    }

    goto LABEL_42;
  }

  int v40 = +[RBSDomainAttribute attributeWithDomain:name:]( &OBJC_CLASS___RBSDomainAttribute,  "attributeWithDomain:name:",  @"com.apple.locationd",  @"ShowAlert");
  uint64_t v16 = @"locationd.fence.elevatedPriority";
  uint64_t v17 = &v40;
LABEL_26:
  uint64_t v18 = objc_msgSend( [RBSAssertion alloc],  "initWithExplanation:target:attributes:",  v16,  +[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", *a2),  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v17, 1));
  int v19 = objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLClientManager");
  else {
    char v20 = *a3;
  }
  objc_msgSend( v19,  "appLaunchedByAppLifecycleManager:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
  int v30 = 0LL;
  if ([v18 acquireWithError:&v30])
  {
    uint64_t v21 = *a2;
    else {
      unint64_t v22 = *a3;
    }
    int v23 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v22);
    unint64_t v24 = [*a1 silo];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_10095BB28;
    v28[3] = &unk_101862178;
    unsigned int v29 = v21;
    v28[4] = v23;
    v28[5] = v18;
    [v24 afterInterval:v28 async:10.0];
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101862238);
    }
    char v25 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      char v26 = *a2;
      else {
        unsigned int v27 = (void *)*a3;
      }
      *(_DWORD *)buf = 68289794;
      int v32 = 0;
      char v33 = 2082;
      unsigned int v34 = "";
      unint64_t v35 = 1026;
      unsigned int v36 = v26;
      int v37 = 2082;
      *(void *)int v38 = v27;
      *(_WORD *)&v38[8] = 2114;
      *(void *)&v38[10] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning ALM: Couldn't create assertion for process, processId:%{public}u, client :%{public, location:escape_only}s, error:%{public, location:escape_only}@}",  buf,  0x2Cu);
    }

    [v18 invalidate];
  }

    *(void *)(a1 + 8) = v13;
    return result;
  }

  uint64_t result = *(void *)(a1 + 8);
  uint64_t v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    uint64_t v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      int v19 = 16 * v17;
      do
      {
        uint64_t result = (uint64_t)sub_1000F2F30(v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16LL;
      }

      while (v19);
      uint64_t v8 = *(uint64_t **)(a1 + 8);
    }

    uint64_t v13 = v8;
    if (v18 != a3)
    {
      uint64_t v13 = v8;
      do
      {
        char v20 = v18[1];
        char *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          uint64_t v21 = (unint64_t *)(v20 + 8);
          do
            unint64_t v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }

        v18 += 2;
        v13 += 2;
      }

      while (v18 != a3);
    }

    goto LABEL_25;
  }

  if (a2 == a3)
  {
    int v23 = v8;
  }

  else
  {
    int v23 = v8;
    do
    {
      sub_1000F2F30(v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }

    while (v6 != a3);
    uint64_t result = *(void *)(a1 + 8);
  }

  *(void *)(a1 + 8) = v23;
  return result;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_hasStrideCal),  @"hasStrideCal");
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_11:
    if ((has & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  PBDataWriterWriteInt32Field(a3, self->_workoutType, 10LL);
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_12:
    if ((has & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  *((_DWORD *)a3 + 17) = self->_workoutType;
  *((_WORD *)a3 + 38) |= 0x400u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_12:
    if ((has & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  *((_BYTE *)result + 73) = self->_hasStrideCal;
  *((_WORD *)result + 38) |= 0x1000u;
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_11:
    if ((has & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  self->_workoutType = *((_DWORD *)a3 + 17);
  *(_WORD *)&self->_has |= 0x400u;
  uint64_t v3 = *((_WORD *)a3 + 38);
  if ((v3 & 1) == 0)
  {
LABEL_12:
    if ((v3 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  *(_DWORD *)(a1 + 96) |= 8u;
  uint64_t v11 = *(void **)(a1 + 24);
  if (!v11)
  {
    uint64_t v11 = operator new(0x18uLL);
    *uint64_t v11 = off_101868C18;
    v11[1] = 0LL;
    *((_DWORD *)v11 + 4) = 0;
    *(void *)(a1 + 24) = v11;
  }

  int v12 = *(_BYTE **)(a2 + 24);
  if (!v12) {
    int v12 = *(_BYTE **)(qword_1019A1A48 + 24);
  }
  sub_100A43240((uint64_t)v11, v12);
  uint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_35:
    *(_DWORD *)(a1 + 96) |= 0x20u;
    uint64_t v15 = *(void **)(a1 + 40);
    if (!v15)
    {
      uint64_t v15 = operator new(0x18uLL);
      _BYTE *v15 = off_101868D08;
      v15[1] = 0LL;
      *((_DWORD *)v15 + 4) = 0;
      *(void *)(a1 + 40) = v15;
    }

    uint64_t v16 = *(_BYTE **)(a2 + 40);
    if (!v16) {
      uint64_t v16 = *(_BYTE **)(qword_1019A1A48 + 40);
    }
    sub_100A43DF8((uint64_t)v15, v16);
    uint64_t v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_45;
    }

    goto LABEL_40;
  }

    if (v8 == 4) {
      return 1LL;
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0LL;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0LL;
}

    if (v8 == 4) {
      return 1LL;
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0LL;
}

  int v12 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 112) |= 0x10u;
  *(void *)(a1 + 40) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x20) != 0) {
    goto LABEL_26;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_31:
  *(_DWORD *)(a1 + 112) |= 0x40u;
  uint64_t v15 = *(_DWORD **)(a1 + 56);
  if (!v15)
  {
    uint64_t v15 = operator new(0x28uLL);
    v15[7] = 0;
    v15[8] = 0;
    *((void *)v15 + 1) = 0LL;
    *((void *)v15 + 2) = 0LL;
    *(void *)uint64_t v15 = off_101869050;
    *((_BYTE *)v15 + 24) = 0;
    *(void *)(a1 + 56) = v15;
  }

  uint64_t v16 = *(void *)(a2 + 56);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A1A90 + 56);
  }
  sub_100A4797C((uint64_t)v15, v16);
  uint64_t v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x80) != 0)
  {
LABEL_36:
    *(_DWORD *)(a1 + 112) |= 0x80u;
    uint64_t v17 = *(char **)(a1 + 64);
    if (!v17)
    {
      uint64_t v17 = (char *)operator new(0x38uLL);
      *(void *)uint64_t v17 = off_101869140;
      *((_DWORD *)v17 + 11) = 0;
      *((_DWORD *)v17 + 12) = 0;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      v17[40] = 0;
      *(void *)(a1 + 64) = v17;
    }

    uint64_t v18 = *(void *)(a2 + 64);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_1019A1A90 + 64);
    }
    sub_100A48300((uint64_t)v17, v18);
    uint64_t v5 = *(_DWORD *)(a2 + 112);
  }

  unsigned int v9 = *(void *)(v5 + 48);
  if (!v9) {
    unsigned int v9 = *(void *)(qword_1019A1A90 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }

    sub_100036CD8();
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 36),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t v17 = v4 + 2;
  if ((v3 & 0x10) == 0) {
    uint64_t v17 = v4;
  }
  if ((v3 & 0x20) != 0) {
    v17 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v17 + 2;
  }
  else {
    uint64_t result = v17;
  }
LABEL_32:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

  unint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    unint64_t v10 = *(void *)(qword_1019A1C80 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v10,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }

  PBDataWriterWriteDoubleField(a3, 3LL, self->_durationInSeconds);
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_5:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  *((void *)a3 + 2) = *(void *)&self->_durationInSeconds;
  *((_DWORD *)a3 + 41) |= 2u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_5:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  self->_durationInSeconds = *((double *)a3 + 2);
  *(_DWORD *)&self->_has |= 2u;
  uint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x1000) == 0)
  {
LABEL_5:
    if ((v3 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  int v12 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 76) |= 0x10u;
  *(void *)(a1 + 32) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x20) != 0) {
    goto LABEL_26;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_27:
  BOOL v14 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 76) |= 0x40u;
  *(void *)(a1 + 48) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 76) |= 0x80u;
    *(void *)(a1 + 56) = v6;
    uint64_t v5 = *(_DWORD *)(a2 + 76);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 67),  v4,  a4);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(unsigned __int8 *)(v5 + 69),  v4,  a4);
  }

  a1[4].__r_.__value_.__s.__data_[20] = 0;
  a1[4].__r_.__value_.__s.__data_[21] = sub_100C059B0();
  a1[4].__r_.__value_.__s.__data_[22] = sub_100C05BD8();
}

    char v20 = sub_100C1001C();
    uint64_t v21 = *(char *)(a1 + 23);
    unint64_t v22 = v21 < 0;
    if (v21 >= 0) {
      int v23 = a1;
    }
    else {
      int v23 = *(void *)a1;
    }
    unint64_t v24 = *(unsigned __int8 *)(a1 + 23);
    if (v22) {
      unint64_t v24 = *(void *)(a1 + 8);
    }
    char v25 = *((char *)v20 + 23);
    char v26 = v25 < 0;
    if (v25 >= 0) {
      unsigned int v27 = v20;
    }
    else {
      unsigned int v27 = (void *)*v20;
    }
    int v28 = *((unsigned __int8 *)v20 + 23);
    if (v26) {
      int v28 = v20[1];
    }
    unsigned int v29 = v23 - 1;
    int v30 = (char *)v27 - 1;
    while (v24 && v28)
    {
      unint64_t v31 = *(unsigned __int8 *)(v29 + v24);
      int v32 = v30[v28];
      --v24;
      --v28;
      if (v31 != v32) {
        goto LABEL_41;
      }
    }

    if (!v28) {
      goto LABEL_42;
    }
LABEL_41:
    int v6 = 0;
    uint64_t v5 = 1;
  }

        int v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v19 objects:v31 count:16];
    }

    while (v5);
  }

  unint64_t v35 = *(_DWORD *)(a1 + 188);
LABEL_26:
  switch(v35)
  {
    case 0u:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
      unsigned int v36 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)uint64_t v59 = 2082;
        *(void *)&unsigned int v59[2] = "";
        int v37 = "{msg%{public}.0s:PAUSE: Override AutoPause to None}";
        goto LABEL_43;
      }

      break;
    case 1u:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
      unsigned int v36 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)uint64_t v59 = 2082;
        *(void *)&unsigned int v59[2] = "";
        int v37 = "{msg%{public}.0s:PAUSE: Override AutoPause to Off for all clients}";
        goto LABEL_43;
      }

      break;
    case 2u:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
      unsigned int v36 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)uint64_t v59 = 2082;
        *(void *)&unsigned int v59[2] = "";
        int v37 = "{msg%{public}.0s:PAUSE: Override AutoPause to On for all clients}";
        goto LABEL_43;
      }

      break;
    case 3u:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
      unsigned int v36 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)uint64_t v59 = 2082;
        *(void *)&unsigned int v59[2] = "";
        int v37 = "{msg%{public}.0s:PAUSE: Override AutoPause to On for all clients linked with SDK that predates 6.0}";
LABEL_43:
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, v37, buf, 0x12u);
      }

      break;
    default:
      break;
  }

  sub_1002F0B04(buf);
  int v38 = sub_1002A6F64(*(uint64_t *)buf, "AutoPauseLogUI", (BOOL *)(a1 + 192));
  uint64_t v39 = v38;
  int v40 = *(std::__shared_weak_count **)v59;
  if (!*(void *)v59) {
    goto LABEL_48;
  }
  char v41 = (unint64_t *)(*(void *)v59 + 8LL);
  do
    uint64_t v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (v42)
  {
LABEL_48:
    if ((v38 & 1) != 0) {
      goto LABEL_49;
    }
LABEL_55:
    std::string *v12 = 0;
    goto LABEL_56;
  }

  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  if ((v39 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_49:
  if (*v12)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101883130);
    }
    unint64_t v43 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)uint64_t v59 = 2082;
      *(void *)&unsigned int v59[2] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:PAUSE: AutoPause log UI Enabled}",  buf,  0x12u);
    }
  }

    char v20 = sub_100C1001C();
    uint64_t v21 = *(char *)(a1 + 23);
    unint64_t v22 = v21 < 0;
    if (v21 >= 0) {
      int v23 = a1;
    }
    else {
      int v23 = *(void *)a1;
    }
    unint64_t v24 = *(unsigned __int8 *)(a1 + 23);
    if (v22) {
      unint64_t v24 = *(void *)(a1 + 8);
    }
    char v25 = *((char *)v20 + 23);
    char v26 = v25 < 0;
    if (v25 >= 0) {
      unsigned int v27 = v20;
    }
    else {
      unsigned int v27 = (void *)*v20;
    }
    int v28 = *((unsigned __int8 *)v20 + 23);
    if (v26) {
      int v28 = v20[1];
    }
    unsigned int v29 = v23 - 1;
    int v30 = (char *)v27 - 1;
    while (v24 && v28)
    {
      unint64_t v31 = *(unsigned __int8 *)(v29 + v24);
      int v32 = v30[v28];
      --v24;
      --v28;
      if (v31 != v32) {
        goto LABEL_41;
      }
    }

    if (!v28) {
      goto LABEL_42;
    }
LABEL_41:
    int v6 = 0;
    uint64_t v5 = 1;
  }

    if (a3 != 1 || a4) {
      return;
    }
LABEL_33:
    *(_DWORD *)buf = sub_100DDA8C0(v20);
    sub_100DDCC44(a1, (int *)buf);
    return;
  }

  char v25 = v24;
  if (((1 << v20) & 0xC) != 0) {
    goto LABEL_20;
  }
  if (v20 != 4)
  {
LABEL_34:
    unsigned int v27 = (os_log_s *)v8[173];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)int v61 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "Device motion mode (%{public}d) not supported, can't process client change",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      char v41 = v8[173];
      int v48 = 67240192;
      *(_DWORD *)int v49 = a2;
      LODWORD(v44) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v41,  17LL,  "Device motion mode (%{public}d) not supported, can't process client change",  &v48,  v44);
      unint64_t v43 = (uint8_t *)v42;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)",  "%s\n",  v42);
      if (v43 != buf) {
        free(v43);
      }
    }

    return;
  }

  if (a3 || a4 != 1)
  {
    if (a3 == 1 && !a4) {
      sub_100DDC4A4((uint64_t)a1);
    }
  }

  else
  {
    sub_100DDC2A0((uint64_t)a1);
  }

    int v12 = *(_DWORD *)(a2 + 28);
    if (v12 >= 4) {
      sub_101273884();
    }
    *(_DWORD *)(a1 + 52) |= 8u;
    *(_DWORD *)(a1 + 28) = v12;
    int v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(double *)(a1 + 32) = result;
    int v6 = *(_DWORD *)(a2 + 52);
LABEL_10:
    if ((v6 & 0x20) != 0)
    {
      uint64_t result = *(double *)(a2 + 40);
      *(_DWORD *)(a1 + 52) |= 0x20u;
      *(double *)(a1 + 40) = result;
    }
  }

  return result;
}

  int v12 = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(a1 + 32) |= 4u;
  *(_BYTE *)(a1 + 17) = v12;
  uint64_t v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  *uint64_t v4 = 0;
}

      if (v33 < 0) {
        operator delete(*(void **)&v32[4]);
      }
      if ((v32[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    sub_100F01E28((uint64_t)a1, (std::string *)(i + 7), 1LL);
    sub_1009EB6B8(&v18, (const void **)buf, (__int128 *)buf);
    unint64_t v10 = sub_1007F14D0((uint64_t)v24, 0LL, 0LL, (uint64_t)(i + 2));
    uint64_t v11 = v24[0];
    *unint64_t v10 = v24[0];
    v10[1] = v24;
    *(void *)(v11 + 8) = v10;
    v24[0] = (uint64_t)v10;
    ++v25;
    goto LABEL_25;
  }

  if (qword_101934840 != -1) {
    dispatch_once(&qword_101934840, &stru_10188C1A8);
  }
  int v7 = (os_log_s *)qword_101934848;
  if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning Unable to retrieve all fences from the database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    LOWORD(v24[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  0LL,  "#Warning Unable to retrieve all fences from the database",  v24,  2);
    int v6 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBeaconFenceAuthorizationManager::unlockedNotifyAllWithResumeFences()",  "%s\n",  v8);
    goto LABEL_19;
  }

        int v12 = 0.0;
      }

      else
      {
        switch(v18)
        {
          case 1:
          case 2:
          case 10:
          case 11:
            unint64_t v10 = 0.0;
            BOOL v14 = v17 + 0.0;
            goto LABEL_25;
          case 4:
            goto LABEL_22;
          case 5:
            goto LABEL_20;
          case 8:
            unint64_t v10 = 0.0;
            int v12 = v17 + 0.0;
            break;
          default:
            goto LABEL_24;
        }
      }
    }

    if (a9 >= 2)
    {
      char v20 = a10[4];
      uint64_t v21 = a10[1];
      unint64_t v22 = a9 - 1LL;
      do
      {
        int v23 = *(void *)(v21 + (((v20 + 1) >> 5) & 0x7FFFFFFFFFFFFF8LL));
        unint64_t v24 = (v20 + 1);
        if (v25 <= 0.0) {
          goto LABEL_2;
        }
        char v26 = *(_DWORD *)(v23 + 16 * v24 + 8);
        if (v26 > 40)
        {
          if (v26 == 41)
          {
LABEL_36:
            uint64_t v13 = v13 + v25;
          }

          else if (v26 == 52 || v26 == 56)
          {
LABEL_35:
            uint64_t v11 = v11 + v25;
          }

          else
          {
LABEL_38:
            unint64_t v10 = v10 + v25;
          }
        }

        else
        {
          switch(v26)
          {
            case 1:
            case 2:
            case 10:
            case 11:
              BOOL v14 = v14 + v25;
              break;
            case 4:
              goto LABEL_36;
            case 5:
              goto LABEL_35;
            case 8:
              int v12 = v12 + v25;
              break;
            default:
              goto LABEL_38;
          }
        }

        ++v20;
      }

      while (--v22);
    }

    if (a2 <= 0.0) {
      goto LABEL_52;
    }
    unsigned int v27 = a10[4];
    int v28 = a10[1];
    uint64_t result = a2
           - (result
    if (result > 0.0)
    {
      unsigned int v29 = *(_DWORD *)(*(void *)(v28 + (((unint64_t)(v27 + a9) >> 5) & 0x7FFFFFFFFFFFFF8LL))
      if (v29 > 40)
      {
        if (v29 == 41)
        {
LABEL_49:
          uint64_t v13 = v13 + result;
        }

        else if (v29 == 52 || v29 == 56)
        {
LABEL_48:
          uint64_t v11 = v11 + result;
        }

        else
        {
LABEL_51:
          unint64_t v10 = v10 + result;
        }
      }

      else
      {
        switch(v29)
        {
          case 1:
          case 2:
          case 10:
          case 11:
            BOOL v14 = v14 + result;
            break;
          case 4:
            goto LABEL_49;
          case 5:
            goto LABEL_48;
          case 8:
            int v12 = v12 + result;
            break;
          default:
            goto LABEL_51;
        }
      }

  uint64_t v11 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 24) = v11;
  uint64_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_27:
    uint64_t v13 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v13;
    uint64_t v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_28;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 48),  v4,  a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  uint64_t v8 = v4 | (v3 << 16);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10188E1B8);
  }
  unsigned int v9 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CELL_LOC: sec_key, 0x%016llX",  (uint8_t *)__p,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10188E1B8);
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "CELL_LOC: sec_key, 0x%016llX",  &buf);
    int v12 = (std::stringbuf::string_type *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "unsigned long long CLCell::getSecKey() const", "%s\n", v11);
    if (v12 != __p) {
      free(v12);
    }
  }

  return v8;
}

  sub_100ECC910((void *)(a1 + 104), a2, (uint64_t)v85, a1 + 8, &v83, a5);
  unsigned int v29 = *a2;
  int v30 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v84 - (_BYTE *)v83) >> 3) != (v30 - *a2) >> 3)
  {
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10188FC48);
    }
    unint64_t v43 = &OBJC_METACLASS___CLPrivacyManager.vtable;
    uint64_t v42 = qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = (a2[1] - *a2) >> 3;
      *(_DWORD *)buf = 134349312;
      *(void *)&buf[4] = v53;
      *(_WORD *)&buf[12] = 2050;
      *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((v84 - (_BYTE *)v83) >> 3);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v42,  OS_LOG_TYPE_ERROR,  "expecting equal length, input, %{public}lu, output, %{public}lu",  buf,  0x16u);
    }

    int v54 = sub_1002921D0(115, 0);
    if ((_DWORD)v54)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10188FC48);
      }
      int v62 = (a2[1] - *a2) >> 3;
      int v95 = 134349312;
      int v96 = v62;
      unsigned int v97 = 2050;
      int v98 = 0xAAAAAAAAAAAAAAABLL * ((v84 - (_BYTE *)v83) >> 3);
      LODWORD(v65) = 22;
      p_vtable = (void **)buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "expecting equal length, input, %{public}lu, output, %{public}lu",  &v95);
      a2 = (uint64_t *)v63;
      int v54 = sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddre sses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const",  "%s\n",  v63);
    }

    sub_10127AC38( v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v74[0],  v74[1],  v74[2],  v75[0],  v75[1],  v75[2],  (uint64_t)__p);
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm",  328,  "findLocationsOfMacAddresses");
    __break(1u);
LABEL_75:
    dispatch_once(&qword_101934850, &stru_10188FC08);
LABEL_63:
    int v48 = qword_101934858;
    int v49 = (unint64_t)(a2[1] - *a2) >> 3;
    int v95 = 67240704;
    LODWORD(v96) = v49;
    WORD2(v96) = 1026;
    *(_DWORD *)((char *)p_vtable + 218) = a3;
    LOWORD(v98) = 1026;
    *(_DWORD *)((char *)&v98 + 2) = (_DWORD)v43;
    LODWORD(v65) = 20;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  1LL,  "@TileSearch, wifi, results, searched, %{public}d, in_tiles, %{public}d, ALS, %{public}d",  &v95,  v65);
    int v51 = (char *)v50;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(con st std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const",  "%s\n",  v50);
    if (v51 != buf) {
      free(v51);
    }
    goto LABEL_53;
  }

  v82[0] = 0LL;
  v82[1] = 0LL;
  v80[1] = 0LL;
  uint64_t v81 = (uint64_t *)v82;
  v79 = v80;
  v80[0] = 0LL;
  if (v30 != v29)
  {
    unint64_t v31 = 0LL;
    int v32 = 0LL;
    char v33 = 0LL;
    int v73 = 0;
    while (1)
    {
      unsigned int v34 = (char *)v83 + v32;
      if (*((_BYTE *)v83 + v32 + 20))
      {
        unint64_t v35 = (uint64_t *)(v29 + v31);
        unsigned int v36 = *(_DWORD *)(v34 + 6);
        int v37 = *(void *)(v34 + 12);
      }

  *int v6 = *(int32x2_t *)(a2 + 64);
  *(void *)(a1 + 560) = *(void *)(a2 + 88);
  *(void *)(a1 + 600) = *(void *)(a2 + 156);
  return 0LL;
}

  uint64_t v13 = *(_BYTE *)(a2 + 46);
  v3 |= 0x100u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 46) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "isOtherStateMachineProcessingNearbyImpact", *(_BYTE *)(a1 + 50));
  uint64_t v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    PB::TextFormatter::format(this, "refereeOperatingMode", *(_DWORD *)(a1 + 40));
    if ((*(_WORD *)(a1 + 52) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 47), 0x15u);
  uint64_t v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 49), 0x17u);
  }

  uint64_t v13 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 60) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "seq", *(_DWORD *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 72));
    if ((*(_WORD *)(a1 + 80) & 0x1000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0xDu);
  }

  uint64_t v8 = *(_DWORD *)(a2 + 64);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 64) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *(float *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  int v6 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 76) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "relativeToeOffTime", *(double *)(a1 + 40));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 85), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  BOOL v14 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 32) = v14;
  if ((*(_WORD *)(a2 + 60) & 4) != 0) {
    goto LABEL_26;
  }
  return result;
}

  unint64_t v24 = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 48) |= 4u;
  *(_BYTE *)(a1 + 36) = v24;
  int v19 = *(_WORD *)(a2 + 48);
  if ((v19 & 8) == 0)
  {
LABEL_16:
    if ((v19 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 42), 0xBu);
  int v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x10) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 0xDu);
  }

  int v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "isWristLooselyLevel", *(_BYTE *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  uint64_t v15 = *(_DWORD *)(a2 + 188);
  v8 |= 0x400u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 188) = v15;
  int v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x2000) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "gpsSpeedMetersPerSecond", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x65u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

      unint64_t v31 = v22 & 7;
      uint64_t v11 = *v12;
      if (*v12) {
        int v32 = 1;
      }
      else {
        int v32 = v31 == 4;
      }
      if (v32) {
        break;
      }
      char v33 = v22 >> 3;
      if ((int)(v22 >> 3) > 400)
      {
        if ((int)v33 <= 900)
        {
          if ((int)v33 > 600)
          {
            if ((int)v33 > 700)
            {
              switch((int)v33)
              {
                case 801:
                  *v18 |= 0x100000uLL;
                  v68 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
                    goto LABEL_513;
                  }
                  v17[30] = *(_DWORD *)(*(void *)this + v68);
                  goto LABEL_942;
                case 802:
                  *v18 |= 0x400uLL;
                  v440 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v440 + 4 > *((void *)this + 2)) {
                    goto LABEL_513;
                  }
                  v17[20] = *(_DWORD *)(*(void *)this + v440);
                  goto LABEL_942;
                case 803:
                  *v18 |= 0x200000uLL;
                  v441 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v441 + 4 > *((void *)this + 2)) {
                    goto LABEL_513;
                  }
                  v17[31] = *(_DWORD *)(*(void *)this + v441);
                  goto LABEL_942;
                case 804:
                  *v18 |= 0x800uLL;
                  v442 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v442 + 4 > *((void *)this + 2)) {
                    goto LABEL_513;
                  }
                  v17[21] = *(_DWORD *)(*(void *)this + v442);
LABEL_942:
                  *((void *)this + 1) += 4LL;
                  break;
                default:
                  if ((_DWORD)v33 == 701)
                  {
                    *v18 |= 0x800000000000uLL;
                    v461 = *((void *)this + 1);
                    v462 = *((void *)this + 2);
                    v463 = *(void *)this;
                    if (v461 > 0xFFFFFFFFFFFFFFF5LL || v461 + 10 > v462)
                    {
                      v707 = 0;
                      v708 = 0;
                      v466 = 0LL;
                      if (v462 <= v461) {
                        v462 = *((void *)this + 1);
                      }
                      while (1)
                      {
                        if (v462 == v461)
                        {
                          LODWORD(v466) = 0;
                          std::string *v12 = 1;
                          goto LABEL_1070;
                        }

                        v709 = v461 + 1;
                        v710 = *(_BYTE *)(v463 + v461);
                        *unint64_t v10 = v709;
                        v466 |= (unint64_t)(v710 & 0x7F) << v707;
                        if ((v710 & 0x80) == 0) {
                          break;
                        }
                        v707 += 7;
                        v461 = v709;
                        char v25 = v708++ > 8;
                        if (v25)
                        {
LABEL_835:
                          LODWORD(v466) = 0;
                          goto LABEL_1070;
                        }
                      }

                      if (*v12) {
                        LODWORD(v466) = 0;
                      }
                    }

                    else
                    {
                      v464 = 0;
                      v465 = 0;
                      v466 = 0LL;
                      while (1)
                      {
                        v467 = v461 + 1;
                        *unint64_t v10 = v461 + 1;
                        v468 = *(_BYTE *)(v463 + v461);
                        v466 |= (unint64_t)(v468 & 0x7F) << v464;
                        if ((v468 & 0x80) == 0) {
                          break;
                        }
                        v464 += 7;
                        v461 = v467;
                        char v25 = v465++ > 8;
                        if (v25) {
                          goto LABEL_835;
                        }
                      }
                    }

  uint64_t result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 104) & 4) != 0) {
    goto LABEL_26;
  }
  return result;
}

  PB::TextFormatter::format(this, "epochCounter", *(void *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  BOOL v14 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v14;
  if ((*(_WORD *)(a2 + 64) & 0x80) != 0) {
    goto LABEL_26;
  }
  return result;
}

  unint64_t v10 = *(_BYTE *)(a2 + 92);
  v3 |= 0x2000u;
  *(_WORD *)(result + 96) = v3;
  *(_BYTE *)(result + 92) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "firstTriggerTimestamp", *(void *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xCDu);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  BOOL v14 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 36) = v14;
  if ((*(_WORD *)(a2 + 64) & 0x800) != 0) {
    goto LABEL_26;
  }
  return result;
}

  uint64_t v17 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 116) |= 0x10u;
  *(_DWORD *)(a1 + 88) = v17;
  unsigned int v9 = *(_WORD *)(a2 + 116);
  if ((v9 & 0x100) == 0)
  {
LABEL_10:
    if ((v9 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 5u);
  uint64_t v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = *(float *)(a2 + 44);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 44) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "hrmin", *(float *)(a1 + 36));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "calibrationLevel", *(_DWORD *)(a1 + 28));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "coverage3d", *(float *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "deviceSide", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  unsigned int v9 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "elevationAscended", *(void *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  uint64_t v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 96) = v3;
  *(void *)(result + 8) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  int v19 = *(_DWORD *)(a2 + 124);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 124) = v19;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }

  uint64_t v21 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 100) |= 4u;
  *(void *)(a1 + 40) = v21;
  uint64_t v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 8) == 0)
  {
LABEL_14:
    if ((v13 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "speedStdDevResidualTolerance", *(double *)(a1 + 56));
  int v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0) {
      goto LABEL_15;
    }
LABEL_27:
    PB::TextFormatter::format(this, "totalDistanceFused", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 100) & 0x80) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_16;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0xBu);
  int v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xDu);
  }

  BOOL v14 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 56) = v14;
  if ((*(_WORD *)(a2 + 92) & 0x200) != 0) {
    goto LABEL_26;
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v4 |= 0x40u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  if ((*(_WORD *)(a2 + 64) & 1) != 0) {
    goto LABEL_26;
  }
  return result;
}

  int v19 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 104) |= 0x20u;
  *(void *)(a1 + 72) = v19;
  unsigned int v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 1) != 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v9 & 8) != 0)
  {
LABEL_16:
    unint64_t v10 = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 104) |= 8u;
    *(void *)(a1 + 56) = v10;
  }

  return a1;
}

  PB::TextFormatter::format(this, "sourceReceiveCftime", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 104) & 0x20) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "sourceReceiveSensorTimestamp", *(double *)(a1 + 72));
LABEL_14:
  unsigned int v9 = *(void *)(a1 + 80);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))(v9, this, "super");
  }
  if ((*(_WORD *)(a1 + 104) & 0x200) != 0) {
    PB::TextFormatter::format(this, "version", *(float *)(a1 + 100));
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 104) & 8) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 56), 0xCu);
  }
  return result;
}

  uint64_t v17 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 96) |= 8u;
  *(void *)(a1 + 56) = v17;
  unint64_t v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 1) == 0)
  {
LABEL_16:
    if ((v10 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_27:
    int v19 = *(void *)(a2 + 48);
    *(_WORD *)(a1 + 96) |= 4u;
    *(void *)(a1 + 48) = v19;
    if ((*(_WORD *)(a2 + 96) & 2) == 0) {
      return a1;
    }
    goto LABEL_18;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xAu);
  uint64_t v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) == 0)
  {
LABEL_15:
    if ((v8 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  }

  uint64_t result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "isStroller", *(_BYTE *)(a1 + 86));
  uint64_t v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 84), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  uint64_t result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 56) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "otherObstructed", *(float *)(a1 + 52));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
    if ((*(_WORD *)(a1 + 64) & 0x1000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 40), 0xDu);
  }

  PB::TextFormatter::format(this, "filteredGravityY", *(float *)(a1 + 28));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t v8 = *(_BYTE *)(a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 76) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "gestureDetectionDelay", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 81), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t v11 = *(_BYTE *)(a2 + 59);
  v3 |= 0x4000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 59) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "pedEnergyZ", *(float *)(a1 + 28));
  uint64_t v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 58), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 32) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "sleepType", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 64) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0xDu);
  }

  uint64_t v13 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 16) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 64));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 96));
    if ((*(_WORD *)(a1 + 100) & 0x200) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xDu);
  }

  BOOL v14 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 92) = v3;
  *(void *)(result + 32) = v14;
  if ((*(_WORD *)(a2 + 92) & 0x800) != 0) {
    goto LABEL_26;
  }
  return result;
}

  int v12 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 72) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "rawSpeed", *(double *)(a1 + 48));
  uint64_t v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 28) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "positionY", *(float *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 68) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0xDu);
  }

  PB::TextFormatter::format(this, "height", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 124) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 100));
LABEL_6:
  int v6 = *(float **)(a1 + 8);
  int v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "origin", v8);
  }

  if ((*(_WORD *)(a1 + 124) & 0x20) != 0) {
    PB::TextFormatter::format(this, "pitch", *(float *)(a1 + 104));
  }
  unsigned int v9 = *(float **)(a1 + 32);
  unint64_t v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    PB::TextFormatter::format(this, "principlePoint", v11);
  }

  int v12 = *(_WORD *)(a1 + 124);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "roll", *(float *)(a1 + 108));
    int v12 = *(_WORD *)(a1 + 124);
  }

  if ((v12 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  }
  uint64_t v13 = *(float **)(a1 + 56);
  BOOL v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    uint64_t v15 = *v13++;
    PB::TextFormatter::format(this, "transform", v15);
  }

  uint64_t v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x80) == 0)
  {
    if ((*(_WORD *)(a1 + 124) & 0x100) == 0) {
      goto LABEL_20;
    }
LABEL_28:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 116));
    if ((*(_WORD *)(a1 + 124) & 0x200) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_21;
  }

  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 112));
  uint64_t v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x100) != 0) {
    goto LABEL_28;
  }
LABEL_20:
  if ((v16 & 0x200) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 120));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }

  unint64_t v10 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 16) = v10;
  uint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "isIndoor", *(_BYTE *)(a1 + 112));
  uint64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96), 8u);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  int v6 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 84) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "revokeReason", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    PB::TextFormatter::format(this, "velocityX", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xDu);
  }

  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "qStopY", *(float *)(a1 + 56));
  uint64_t v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "covariancePostMeasurement11", *(float *)(a1 + 28));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }

  uint64_t result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "centripetalRotationRateZ", *(double *)(a1 + 72));
  uint64_t v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 48) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  PB::TextFormatter::format(this, "heightCM", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }

  sub_1002F0B04(buf);
  sub_1002ABC7C(*(uint64_t *)buf, "CLSilo.Version", (unsigned int *)&dword_101993270);
  uint64_t v16 = *(std::__shared_weak_count **)v80;
  if (*(void *)v80)
  {
    uint64_t v17 = (unint64_t *)(*(void *)v80 + 8LL);
    do
      uint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  *(void *)buf = 0LL;
  *(void *)uint64_t v80 = 0LL;
  *(void *)&v80[8] = 0LL;
  sub_1002F0B04(__p);
  int v19 = sub_1002A8560((uint64_t)__p[0], "CLSilo.SyncgetGraphFile", (std::string *)buf);
  char v20 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    uint64_t v21 = (unint64_t *)((char *)__p[1] + 8);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if (v19)
  {
    if (v80[15] >= 0) {
      int v23 = buf;
    }
    else {
      int v23 = *(uint8_t **)buf;
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v23),  @"SyncgetGraphFile");
  }

  else
  {
    unint64_t v24 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
    sub_10030A238(&v75);
    if (byte_1019A0677 >= 0) {
      char v25 = (const std::string::value_type *)&qword_1019A0660;
    }
    else {
      char v25 = (const std::string::value_type *)qword_1019A0660;
    }
    if (byte_1019A0677 >= 0) {
      char v26 = byte_1019A0677;
    }
    else {
      char v26 = unk_1019A0668;
    }
    unsigned int v27 = std::string::append(&v75, v25, v26);
    int v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    cap = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)__p = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      unsigned int v29 = __p;
    }
    else {
      unsigned int v29 = (void **)__p[0];
    }
    int v30 = -[NSFileManager fileExistsAtPath:]( v24,  "fileExistsAtPath:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v29));
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if ((char)v75.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(v75.__r_.__value_.__l.__data_);
      if (!v30) {
        goto LABEL_68;
      }
    }

    else if (!v30)
    {
      goto LABEL_68;
    }

    sub_10030A238(&v75);
    if (byte_1019A0677 >= 0) {
      unint64_t v31 = (const std::string::value_type *)&qword_1019A0660;
    }
    else {
      unint64_t v31 = (const std::string::value_type *)qword_1019A0660;
    }
    if (byte_1019A0677 >= 0) {
      int v32 = byte_1019A0677;
    }
    else {
      int v32 = unk_1019A0668;
    }
    char v33 = std::string::append(&v75, v31, v32);
    unsigned int v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    cap = v33->__r_.__value_.__l.__cap_;
    *(_OWORD *)__p = v34;
    v33->__r_.__value_.__l.__size_ = 0LL;
    v33->__r_.__value_.__l.__cap_ = 0LL;
    v33->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      unint64_t v35 = __p;
    }
    else {
      unint64_t v35 = (void **)__p[0];
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v35),  @"SyncgetGraphFile");
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

uint64_t sub_100075DEC(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 116);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_82;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 10;
    }

    else if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      int v3 = *(_DWORD *)(a1 + 116);
    }

    else
    {
      int v6 = 1;
    }

    uint64_t v4 = (v6 + 1);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }

  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 23);
  char v9 = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v10 = *(void *)(v7 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v9 = *(_BYTE *)(v7 + 23);
  }

  else
  {
    int v12 = 1;
  }

  if (v9 < 0) {
    int v8 = v10;
  }
  uint64_t v4 = (v4 + v12 + v8 + 1);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17,  a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v15 = *(_BYTE *)(v13 + 23);
    }

    else
    {
      int v18 = 1;
    }

    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v4 = (v4 + v18 + v14 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }

  uint64_t v19 = *(void *)(a1 + 24);
  int v20 = *(unsigned __int8 *)(v19 + 23);
  char v21 = v20;
  uint64_t v22 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    unint64_t v23 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    unint64_t v23 = v22;
  }
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23,  a2);
    int v20 = *(unsigned __int8 *)(v19 + 23);
    uint64_t v22 = *(void *)(v19 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v21 = *(_BYTE *)(v19 + 23);
  }

  else
  {
    int v24 = 1;
  }

  if (v21 < 0) {
    int v20 = v22;
  }
  uint64_t v4 = (v4 + v24 + v20 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

LABEL_82:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_139;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v49 = *(void *)(a1 + 72);
    int v50 = *(unsigned __int8 *)(v49 + 23);
    char v51 = v50;
    uint64_t v52 = *(void *)(v49 + 8);
    if ((v50 & 0x80u) == 0) {
      unint64_t v53 = *(unsigned __int8 *)(v49 + 23);
    }
    else {
      unint64_t v53 = v52;
    }
    if (v53 >= 0x80)
    {
      int v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v53,  a2);
      int v50 = *(unsigned __int8 *)(v49 + 23);
      uint64_t v52 = *(void *)(v49 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v51 = *(_BYTE *)(v49 + 23);
    }

    else
    {
      int v54 = 1;
    }

    if (v51 < 0) {
      int v50 = v52;
    }
    LODWORD(v4) = v4 + v54 + v50 + 1;
  }

  if ((v3 & 0x200) != 0)
  {
    uint64_t v55 = *(void *)(a1 + 80);
    int v56 = *(unsigned __int8 *)(v55 + 23);
    char v57 = v56;
    uint64_t v58 = *(void *)(v55 + 8);
    if ((v56 & 0x80u) == 0) {
      unint64_t v59 = *(unsigned __int8 *)(v55 + 23);
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59 >= 0x80)
    {
      int v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v59,  a2);
      int v56 = *(unsigned __int8 *)(v55 + 23);
      uint64_t v58 = *(void *)(v55 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v57 = *(_BYTE *)(v55 + 23);
    }

    else
    {
      int v60 = 1;
    }

    if (v57 < 0) {
      int v56 = v58;
    }
    LODWORD(v4) = v4 + v60 + v56 + 1;
  }

  unsigned int v61 = v4 + 2;
  if ((v3 & 0x400) == 0) {
    unsigned int v61 = v4;
  }
  if ((v3 & 0x800) != 0) {
    uint64_t v4 = v61 + 2;
  }
  else {
    uint64_t v4 = v61;
  }
  if ((v3 & 0x1000) != 0)
  {
    uint64_t v62 = *(void *)(a1 + 88);
    int v63 = *(unsigned __int8 *)(v62 + 23);
    char v64 = v63;
    uint64_t v65 = *(void *)(v62 + 8);
    if ((v63 & 0x80u) == 0) {
      unint64_t v66 = *(unsigned __int8 *)(v62 + 23);
    }
    else {
      unint64_t v66 = v65;
    }
    if (v66 >= 0x80)
    {
      int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v66,  a2);
      int v63 = *(unsigned __int8 *)(v62 + 23);
      uint64_t v65 = *(void *)(v62 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v64 = *(_BYTE *)(v62 + 23);
    }

    else
    {
      int v67 = 1;
    }

    if (v64 < 0) {
      int v63 = v65;
    }
    uint64_t v4 = (v4 + v67 + v63 + 1);
    if ((v3 & 0x2000) == 0)
    {
LABEL_110:
      if ((v3 & 0x4000) == 0) {
        goto LABEL_139;
      }
      goto LABEL_130;
    }
  }

  else if ((v3 & 0x2000) == 0)
  {
    goto LABEL_110;
  }

  uint64_t v68 = *(void *)(a1 + 96);
  int v69 = *(unsigned __int8 *)(v68 + 23);
  char v70 = v69;
  uint64_t v71 = *(void *)(v68 + 8);
  if ((v69 & 0x80u) == 0) {
    unint64_t v72 = *(unsigned __int8 *)(v68 + 23);
  }
  else {
    unint64_t v72 = v71;
  }
  if (v72 >= 0x80)
  {
    int v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v72,  a2);
    int v69 = *(unsigned __int8 *)(v68 + 23);
    uint64_t v71 = *(void *)(v68 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v70 = *(_BYTE *)(v68 + 23);
  }

  else
  {
    int v73 = 1;
  }

  if (v70 < 0) {
    int v69 = v71;
  }
  uint64_t v4 = (v4 + v73 + v69 + 1);
  if ((v3 & 0x4000) != 0)
  {
LABEL_130:
    uint64_t v74 = *(void *)(a1 + 104);
    int v75 = *(unsigned __int8 *)(v74 + 23);
    char v76 = v75;
    uint64_t v77 = *(void *)(v74 + 8);
    if ((v75 & 0x80u) == 0) {
      unint64_t v78 = *(unsigned __int8 *)(v74 + 23);
    }
    else {
      unint64_t v78 = v77;
    }
    if (v78 >= 0x80)
    {
      int v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v78,  a2);
      int v75 = *(unsigned __int8 *)(v74 + 23);
      uint64_t v77 = *(void *)(v74 + 8);
      char v76 = *(_BYTE *)(v74 + 23);
    }

    else
    {
      int v79 = 1;
    }

    if (v76 < 0) {
      int v75 = v77;
    }
    uint64_t v4 = (v4 + v79 + v75 + 1);
  }

  if ((v3 & 0xFF00) != 0)
  {
    uint64_t v49 = v4 + 2;
    if ((v3 & 0x100) == 0) {
      uint64_t v49 = v4;
    }
    if ((v3 & 0x200) != 0) {
      uint64_t v4 = v49 + 2;
    }
    else {
      uint64_t v4 = v49;
    }
    if ((v3 & 0x400) != 0)
    {
      int v50 = *(void *)(a1 + 72);
      char v51 = *(unsigned __int8 *)(v50 + 23);
      uint64_t v52 = v51;
      unint64_t v53 = *(void *)(v50 + 8);
      if ((v51 & 0x80u) == 0) {
        int v54 = *(unsigned __int8 *)(v50 + 23);
      }
      else {
        int v54 = v53;
      }
      if (v54 >= 0x80)
      {
        uint64_t v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v54,  a2);
        char v51 = *(unsigned __int8 *)(v50 + 23);
        unint64_t v53 = *(void *)(v50 + 8);
        uint64_t v52 = *(_BYTE *)(v50 + 23);
      }

      else
      {
        uint64_t v55 = 1;
      }

      if (v52 < 0) {
        char v51 = v53;
      }
      uint64_t v4 = (v4 + v55 + v51 + 1);
    }
  }

  *(_DWORD *)(a1 + 80) = v4;
  return v4;
}

  unint64_t v23 = *(void *)(v5 + 136);
  if (!v23) {
    unint64_t v23 = *(void *)(qword_1019A0978 + 136);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  v23,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_88;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  *(_DWORD *)(v5 + 96),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_84;
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101835C50);
  }
  uint64_t v40 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v41 = (char *)(a1 + 96);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)int v60 = 2082;
    *(void *)&v60[2] = "";
    unsigned int v61 = 2082;
    uint64_t v62 = v41;
    int v63 = 2081;
    char v64 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:The CL version has changed since CLSqliteDatabase::createTableIfNecessary() was last invoke d for this pair. Checking schema, path:%{public, location:escape_only}s, table:%{private, location:escape_only}s}",  buf,  0x26u);
  }

  sub_1003BF200(a1, a2);
  if (!sub_1003B3948(a1, a2, a3, a4, 0))
  {
LABEL_90:
    int v20 = 0LL;
    goto LABEL_91;
  }

  sub_1003BF200(a1, a2);
  int v20 = 1LL;
LABEL_91:
  if (SHIBYTE(v53) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(__s1);
  }
  (*(void (**)(uint64_t))(*(void *)v47 + 24LL))(v47);
  return v20;
}

  sub_1002F0B04(__p);
  char v64 = sub_1002A82BC( (uint64_t)__p[0].__r_.__value_.__l.__data_,  "CLClientManager::UninstalledExpirationTimeInterval",  v161);
  uint64_t v65 = v64;
  unint64_t v66 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (!__p[0].__r_.__value_.__l.__size_) {
    goto LABEL_86;
  }
  int v67 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
  do
    uint64_t v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    if (!v65) {
      goto LABEL_94;
    }
  }

  else
  {
LABEL_86:
    if (!v64) {
      goto LABEL_94;
    }
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  int v69 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    char v70 = *v161;
    __p[0].__r_.__value_.__r.__words[0] = 68289282LL;
    LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2050;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = v70;
    _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning uninstalled expiration time interval overridden, uninstalledExpirationTimeInte rval:%{public}f}",  (uint8_t *)__p,  0x1Cu);
  }

  unint64_t v23 = *(void *)(v5 + 136);
  if (!v23) {
    unint64_t v23 = *(void *)(qword_1019A11B8 + 136);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v23,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_88;
  }

  char v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[16];
  if ((v33 & 0x80000000) != 0)
  {
    uint64_t v34 = 11;
  }

  else if (v33 >= 0x80)
  {
    uint64_t v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2) + 1;
    int v3 = a1[20];
  }

  else
  {
    uint64_t v34 = 2;
  }

  uint64_t v4 = (v34 + v4);
  if ((v3 & 0x8000) == 0)
  {
LABEL_56:
    if ((v3 & 0x10000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_92;
  }

  [v3 setObject:v5 forKey:@"activityType"];
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_isStanding),  @"isStanding");
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_mets),  @"mets");
  metSource = self->_metSource;
  if (metSource >= 4) {
    uint64_t v7 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_metSource);
  }
  else {
    uint64_t v7 = (NSString *)*(&off_101859A98 + metSource);
  }
  [v3 setObject:v7 forKey:@"metSource"];
  *(float *)&int v8 = self->_meanAngleX;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8),  @"meanAngleX");
  *(float *)&char v9 = self->_energyMagnitude;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9),  @"energyMagnitude");
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_timestamp),  @"timestamp");
  }
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_regularEntry),  @"regularEntry");
  has = (char)self->_has;
  if ((has & 2) != 0)
  {
    *(float *)&uint64_t v10 = self->_metsHR;
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10),  @"metsHR");
    has = (char)self->_has;
  }

  if ((has & 4) != 0)
  {
    *(float *)&uint64_t v10 = self->_metsWR;
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10),  @"metsWR");
  }

  return v3;
}

  int v42 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 172) |= 0x10u;
  *(void *)(a1 + 48) = v42;
  char v21 = *(_DWORD *)(a2 + 172);
  if ((v21 & 0x20) != 0) {
    goto LABEL_83;
  }
LABEL_25:
  if ((v21 & 0x40) == 0) {
    goto LABEL_26;
  }
LABEL_84:
  int v44 = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 172) |= 0x40u;
  *(void *)(a1 + 72) = v44;
  char v21 = *(_DWORD *)(a2 + 172);
  if ((v21 & 0x80) != 0)
  {
LABEL_27:
    uint64_t v22 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 172) |= 0x80u;
    *(_DWORD *)(a1 + 60) = v22;
    char v21 = *(_DWORD *)(a2 + 172);
  }

  int v26 = *(void *)(v5 + 160);
  if (!v26) {
    int v26 = *(void *)(qword_1019A1CE8 + 160);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  v26,  a2,  a4);
  if ((*(_DWORD *)(v5 + 184) & 0x200000) != 0)
  {
LABEL_85:
    char v27 = *(void *)(v5 + 168);
    if (!v27) {
      char v27 = *(void *)(qword_1019A1CE8 + 168);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  v27,  a2,  a4);
  }

  return result;
}

  uint64_t v22 = *(void *)(v5 + 144);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_1019A1D38 + 144);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  v22,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }

  unint64_t v41 = *(void *)(a1 + 88);
  if (!v41) {
    unint64_t v41 = *(void *)(qword_1019A1D38 + 88);
  }
  int v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC286C(v41, a2);
  uint64_t v43 = (int)v42;
  else {
    int v44 = 1;
  }
  v4 += v43 + v44 + 1;
  int v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x1000) == 0)
  {
LABEL_60:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_94;
  }

        uint64_t v71 = sqrt(v65);
        unint64_t v72 = sqrt(v70);
        int v73 = v60 < 0.0;
        if (v72 < v60) {
          int v73 = 1;
        }
        uint64_t v74 = v59 + v71 * v68;
        if (v73)
        {
          int v60 = v72;
          unsigned int v61 = v74;
        }

        unint64_t v59 = v59 + v71;
        *(_OWORD *)buf = v161;
        v57 += 16LL;
        --v58;
      }

      while (v58);
      int v79 = v61 / v59;
      if (v59 < 0.001) {
        int v79 = 0.0;
      }
      int v117 = *(void *)&v79;
      uint64_t v80 = *(_DWORD *)(*v45 + 72) != 2;
      if (sub_100D3F3A8(v116, (uint64_t)v129, (double **)v45, v80, (double *)&v117, 1))
      {
        sub_1000F2F30(&v152, v45);
        uint64_t v81 = v60;
        v153 = v81;
        v156 = v139;
        v82 = *(double *)&v140;
        v155 = v82;
        v157 = v117;
        v154 = v80;
        sub_100C7865C((__n128 **)a2, &v152);
        unint64_t v78 = 1;
        goto LABEL_110;
      }

      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      int v83 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        int v84 = *(void *)(v116 + 8);
        *(_DWORD *)buf = 134349056;
        *(void *)&buf[4] = v84;
        _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,interpolateOnRoad returned false",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        v93 = *(void *)(v116 + 8);
        LODWORD(v161) = 134349056;
        *(void *)((char *)&v161 + 4) = v93;
        LODWORD(v112) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,interpolateOnRoad returned false",  &v161,  v112);
        int v95 = (uint8_t *)v94;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, cons t CLMapCrumb &, double, BOOL) const",  "%s\n",  v94);
        if (v95 != buf) {
          free(v95);
        }
        goto LABEL_99;
      }

  [v3 setObject:v5 forKey:@"activityType"];
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_isStanding),  @"isStanding");
  has = (char)self->_has;
  if ((has & 4) != 0)
  {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_mets),  @"mets");
    has = (char)self->_has;
  }

  if ((has & 0x10) != 0)
  {
    *(float *)&int v6 = self->_basalMETs;
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"basalMETs");
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", self->_natalies),  @"natalies");
  int v8 = (char)self->_has;
  if ((v8 & 1) == 0)
  {
    if ((*(_BYTE *)&self->_has & 8) == 0) {
      goto LABEL_88;
    }
LABEL_92:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_timestamp),  @"timestamp");
    if ((*(_BYTE *)&self->_has & 2) == 0) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", self->_basalNatalies),  @"basalNatalies");
  int v8 = (char)self->_has;
  if ((v8 & 8) != 0) {
    goto LABEL_92;
  }
LABEL_88:
  if ((v8 & 2) != 0) {
LABEL_89:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_duration),  @"duration");
LABEL_90:
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_regularEntry),  @"regularEntry");
  return v3;
}

  uint64_t v40 = *(void *)(a2 + 232);
  v5 |= 0x10000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 232) = v40;
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_84;
  }

  PB::TextFormatter::format(this, "sosCanceledBecauseOfActive", *(void *)(a1 + 272));
  int v6 = *v5;
  if ((*v5 & 0x400000000LL) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_84;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 112), 0x53u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }

  PB::TextFormatter::format(this, "lastLockedStateDurationPreStart", *(double *)(a1 + 320));
  char v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_84;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 240), 0x2Au);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_84;
  }

  uint64_t result = *(float *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 152) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800) == 0)
  {
LABEL_36:
    if ((v2 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }

  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_84;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x20u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_84;
  }

  uint64_t result = *(float *)(a2 + 144);
  v5 |= 0x2000000uLL;
  *uint64_t v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 144) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_84;
  }

  PB::TextFormatter::format(this, "deltaVXYUnconditional", *(float *)(a1 + 116));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_84;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0xCu);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v6 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_84;
  }

  uint64_t v22 = *(_DWORD *)(a2 + 136);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 136) = v22;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 4) == 0)
  {
LABEL_39:
    if ((v2 & 8) == 0) {
      goto LABEL_40;
    }
    goto LABEL_84;
  }

  PB::TextFormatter::format(this, "maxSaturation", *(float *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0xCBu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 8) == 0)
  {
LABEL_37:
    if ((v4 & 0x10) == 0) {
      goto LABEL_38;
    }
    goto LABEL_84;
  }

              *(void *)(a1 + 8) = v24;
              goto LABEL_93;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 28) = v28;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              unint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                unint64_t v47 = 0;
                int v48 = 0;
                char v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }

                  uint64_t v49 = v29++;
                  int v50 = *(_BYTE *)(v30 + v49);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  int v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_86;
              }

              uint64_t v31 = 0;
              int v32 = 0;
              char v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_87;
                }
                v31 += 7;
                unint64_t v29 = v2;
                int v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_93;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              unint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                char v51 = 0;
                uint64_t v52 = 0;
                char v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }

                  unint64_t v53 = v35++;
                  int v54 = *(_BYTE *)(v36 + v53);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  int v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_91;
              }

              uint64_t v37 = 0;
              int v38 = 0;
              char v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                uint64_t v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_92;
                }
                v37 += 7;
                unint64_t v35 = v2;
                int v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 24) = v39;
LABEL_93:
              int v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_BYTE *)(a1 + 32) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v42 = v41 != 0;
              }

              *(_BYTE *)(a1 + 29) = v42;
              goto LABEL_93;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_93;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_93;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 28) = v28;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              unint64_t v29 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                unint64_t v47 = 0;
                int v48 = 0;
                char v33 = 0LL;
                if (v2 <= v29) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }

                  uint64_t v49 = v29++;
                  int v50 = *(_BYTE *)(v30 + v49);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  int v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_86;
              }

              uint64_t v31 = 0;
              int v32 = 0;
              char v33 = 0LL;
              do
              {
                uint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                uint64_t v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_87;
                }
                v31 += 7;
                unint64_t v29 = v2;
                int v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_93;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              unint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                char v51 = 0;
                uint64_t v52 = 0;
                char v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }

                  unint64_t v53 = v35++;
                  int v54 = *(_BYTE *)(v36 + v53);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  int v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    uint64_t v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_91;
              }

              uint64_t v37 = 0;
              int v38 = 0;
              char v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                uint64_t v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_92;
                }
                v37 += 7;
                unint64_t v35 = v2;
                int v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 24) = v39;
LABEL_93:
              int v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_BYTE *)(a1 + 32) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v42 = v41 != 0;
              }

              *(_BYTE *)(a1 + 29) = v42;
              goto LABEL_93;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_93;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  int v67 = *(void *)(a2 + 48);
  v6 |= 0x20u;
  *(_DWORD *)(a1 + 244) = v6;
  *(void *)(a1 + 48) = v67;
  if ((*(_DWORD *)(a2 + 244) & 4) != 0)
  {
LABEL_54:
    uint64_t v40 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 244) = v6 | 4;
    *(void *)(a1 + 24) = v40;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x40) == 0) {
      goto LABEL_41;
    }
    goto LABEL_84;
  }

  PB::TextFormatter::format(this, "stepLengthRejectionStatus", *(_DWORD *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_84;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0x24u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          int v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7LL || v44 + 8 > *((void *)this + 2)) {
            goto LABEL_81;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v44);
LABEL_55:
          char v45 = *((void *)this + 1) + 8LL;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_82;
      }
    }

    uint64_t v19 = 0;
    int v20 = 0;
    char v15 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      char v21 = v4 + 1;
      uint64_t v22 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      uint64_t v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        char v15 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 2u;
          int v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_79;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_81;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 1u;
          char v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_79;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_81;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_82;
      }
    }

    uint64_t v19 = 0;
    int v20 = 0;
    char v15 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      char v21 = v4 + 1;
      uint64_t v22 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      uint64_t v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        char v15 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

  char v33 = *(_DWORD *)(a2 + 156);
  v3 |= 0x1000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 156) = v33;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }

  PB::TextFormatter::format(this, "srcOmegaInertial_X", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_84;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000000LL) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_84;
  }

LABEL_139:
  *(_DWORD *)(a1 + 112) = v4;
  return v4;
}

    if (sub_100852AE8( (double *)v7,  (double *)v6,  (double *)v5,  v4,  &v267,  (uint64_t)&v264,  &v259,  &v273,  &v270,  &v258,  &v279,  v58))
    {
      if (v258 >= 0.0) {
        v114 = v279;
      }
      else {
        v114 = -v279;
      }
      if (v258 >= 0.0) {
        int v115 = v258;
      }
      else {
        int v115 = -v258;
      }
      unsigned int v116 = 0.0;
      if (v115 != 0.0) {
        unsigned int v116 = v114 * 1000000.0 / v115;
      }
      int v117 = 40LL;
      do
      {
        uint64_t v118 = (char *)&v282 + v117;
        *(_OWORD *)uint64_t v118 = xmmword_1013394A0;
        *((void *)v118 + 2) = 0LL;
        *((void *)v118 + 3) = 0LL;
        *((_OWORD *)v118 + 2) = xmmword_1012E0180;
        v118[48] = 0;
        v117 += 56LL;
      }

      while (v118 + 56 != (char *)v291);
      *(void *)&v282 = 1LL;
      *((void *)&v282 + 1) = *(void *)v277[0];
      *(void *)&v283 = *(void *)(v277[0] + 8);
      v119 = atomic_load((unsigned __int8 *)&qword_10198D608);
      if ((v119 & 1) == 0)
      {
        v243 = v115;
        v241 = v116;
        v242 = __cxa_guard_acquire(&qword_10198D608);
        unsigned int v116 = v241;
        int v115 = v243;
        if (v242)
        {
          xmmword_10198D5F0 = xmmword_1013394A0;
          qword_10198D600 = 0LL;
          __cxa_guard_release(&qword_10198D608);
          unsigned int v116 = v241;
          int v115 = v243;
        }
      }

      BYTE8(v286) = 1;
      *(_OWORD *)&v284[8] = xmmword_10198D5F0;
      *(void *)&v284[24] = qword_10198D600;
      *(double *)&v285 = v114;
      *((double *)&v285 + 1) = v115;
      *(double *)&v286 = v116;
      memset((char *)v291 + 2, 0, 40);
      v120 = v288;
      *(_OWORD *)(a3 + 96) = v287;
      *(_OWORD *)(a3 + 112) = v120;
      *(_OWORD *)(a3 + 128) = v289;
      *(void *)(a3 + 144) = v290;
      v121 = *(_OWORD *)&v284[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v284;
      *(_OWORD *)(a3 + 48) = v121;
      v122 = v286;
      *(_OWORD *)(a3 + 64) = v285;
      *(_OWORD *)(a3 + 80) = v122;
      v123 = v283;
      *(_OWORD *)a3 = v282;
      *(_OWORD *)(a3 + 16) = v123;
      *(_WORD *)(a3 + 152) = 48;
      v82 = v291[1];
      *(_OWORD *)(a3 + 154) = v291[0];
      goto LABEL_460;
    }

    *(void *)&v282 = 0LL;
    v125 = 40LL;
    do
    {
      v126 = (char *)&v282 + v125;
      *(_OWORD *)v126 = xmmword_1013394A0;
      *((void *)v126 + 2) = 0LL;
      *((void *)v126 + 3) = 0LL;
      *((_OWORD *)v126 + 2) = xmmword_1012E0180;
      v126[48] = 0;
      v125 += 56LL;
    }

    while (v126 + 56 != (char *)v291);
    goto LABEL_458;
  }

  if (!v99)
  {
    int v105 = (char *)&v262 + 4;
    LODWORD(v262) = 0;
    goto LABEL_137;
  }

  v100 = v66 * v55 + v65 * v54 + v64 * v52;
  v101 = fabs(v100);
  if (v101 == 1.0
    || COERCE_UNSIGNED_INT64(fabs(v66 * v55 + v65 * v54 + v64 * v52)) <= 0x7FEFFFFFFFFFFFFFLL
    && ((v139 = fabs(v101 + -1.0), v101 >= 1.0) ? (v140 = v101 * 2.22044605e-16) : (v140 = 2.22044605e-16), v139 <= v140))
  {
    v262 = 0LL;
    v263 = 0LL;
    if (!v70) {
      goto LABEL_109;
    }
    goto LABEL_139;
  }

  if ((v70 | v84) == 1)
  {
    *(void *)&v282 = 0LL;
    v141 = 40LL;
    do
    {
      v142 = (char *)&v282 + v141;
      *(_OWORD *)v142 = xmmword_1013394A0;
      *((void *)v142 + 2) = 0LL;
      *((void *)v142 + 3) = 0LL;
      *((_OWORD *)v142 + 2) = xmmword_1012E0180;
      v142[48] = 0;
      v141 += 56LL;
    }

    while (v142 + 56 != (char *)v291);
    goto LABEL_458;
  }

  if (sub_100852EF4( (double *)v5,  (double *)v4,  (double *)v7,  (double *)v6,  &v273,  &v270,  &v267,  &v264,  &v255,  &v259,  (uint64_t)&v278,  &v262,  (double *)&v254 + 1,  &v258,  (double *)v291,  &v279,  &v248,  (int *)&v246))
  {
    *(void *)&v286 = &v278;
    v179 = v279;
    v180 = *((double *)&v254 + 1);
    *((double *)&v283 + 1) = v279;
    *(void *)v284 = *((void *)&v254 + 1);
    if (*((double *)&v254 + 1) < 0.0)
    {
      v179 = -v279;
      v180 = -*((double *)&v254 + 1);
      *((double *)&v283 + 1) = -v279;
      *(double *)v284 = -*((double *)&v254 + 1);
    }

    v181 = 0.0;
    if (v180 != 0.0) {
      v181 = v179 * 1000000.0 / v180;
    }
    v182 = v248;
    *(double *)&v284[8] = v181;
    *(double *)&v284[16] = v248;
    v183 = v258;
    *(double *)&v284[24] = v258;
    if (v258 < 0.0)
    {
      v182 = -v248;
      v183 = -v258;
      *(double *)&v284[16] = -v248;
      *(double *)&v284[24] = -v258;
    }

    v184 = 0.0;
    if (v183 != 0.0) {
      v184 = v182 * 1000000.0 / v183;
    }
    *(double *)&v285 = v184;
    v282 = v291[0];
    *(void *)&v283 = *(void *)&v291[1];
    DWORD2(v285) = v246;
    sub_100853720((int *)&v262, (uint64_t)&v282, v277, (uint64_t *)v276, a3);
  }

  else
  {
    sub_1008528D0(a3);
  }

  int v75 = *(void *)(a1 + 144);
  if (!v75) {
    int v75 = *(void *)(qword_1019A1CE8 + 144);
  }
  char v76 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2FC6C(v75, a2);
  uint64_t v77 = (int)v76;
  else {
    unint64_t v78 = 1;
  }
  uint64_t v4 = (v4 + v77 + v78 + 2);
  int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_151;
  }

  int v38 = *(void *)(v5 + 272);
  if (!v38) {
    int v38 = *(void *)(qword_1019A1D38 + 272);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3E,  v38,  a2,  a4);
  int v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 0x10) == 0)
  {
LABEL_129:
    if ((v36 & 0x20) == 0) {
      goto LABEL_130;
    }
    goto LABEL_145;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  char v45 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v46 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfFeatureDisabled";
    v193 = 2048;
    v194 = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v132 = *(void *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfFeatureDisabled";
    v189 = 2048;
    v190 = v132;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v134 = (uint8_t *)v133;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v133);
    if (v134 != buf) {
      free(v134);
    }
  }

  a4[10] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v10 & 0x100000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_151;
  }

  uint64_t result = *(float *)(a2 + 172);
  v5 |= 0x10000000000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 172) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000000000LL) == 0)
  {
LABEL_66:
    if ((v4 & 0x80000000000LL) == 0) {
      goto LABEL_67;
    }
    goto LABEL_141;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudioPeakPressureThreshold", *(float *)(a1 + 212));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000000LL) == 0)
  {
LABEL_65:
    if ((v6 & 0x10000000000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_141;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184), 0x3Cu);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000LL) == 0)
  {
LABEL_65:
    if ((v5 & 0x100000000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_141;
  }

  uint64_t result = *(float *)(a2 + 104);
  v5 |= 0x800000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 104) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000LL) == 0)
  {
LABEL_59:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_60;
    }
    goto LABEL_141;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudioParBaroCumulativeRotationThreshold", *(float *)(a1 + 192));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x400000000000LL) == 0)
  {
LABEL_58:
    if ((v6 & 0x800000000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_141;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xF9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000LL) == 0)
  {
LABEL_59:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_60;
    }
    goto LABEL_141;
  }

  uint64_t v28 = *(_BYTE *)(a2 + 333);
  v6 |= 0x400000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 333) = v28;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x800000) == 0)
  {
LABEL_34:
    if ((v7 & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_141;
  }

  PB::TextFormatter::format(this, "kFinalDecision", *(_BYTE *)(a1 + 337));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_141;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 333), 0x6Eu);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((v6 & 0x800000) == 0)
  {
LABEL_34:
    if ((v6 & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_141;
  }

  char v70 = *(_BYTE *)(a2 + 199);
  uint64_t v71 = v4 >> 16;
  v4 |= 0x1000uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v71;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 199) = v70;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x1000) == 0)
  {
LABEL_61:
    if ((v2 & 0x100) == 0) {
      goto LABEL_62;
    }
    goto LABEL_141;
  }

  PB::TextFormatter::format(this, "maxChaos0", *(float *)(a1 + 96));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x80000) == 0)
  {
LABEL_60:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_141;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 186), 0x45Du);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x8000000000000LL) == 0)
  {
LABEL_61:
    if ((v5 & 0x80) == 0) {
      goto LABEL_62;
    }
    goto LABEL_141;
  }

          *(_DWORD *)(a1 + 40) = v46;
          goto LABEL_166;
        case 5u:
          if ((_DWORD)v23 == 2)
          {
            if ((PB::Reader::placeMark(this, v109, v23, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              uint64_t v49 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v49 >= *v11)
                {
                  int v50 = (char *)*v10;
                  char v51 = (v49 - (_BYTE *)*v10) >> 2;
                  uint64_t v52 = v51 + 1;
                  unint64_t v53 = *v11 - (void)v50;
                  if (v53 >> 1 > v52) {
                    uint64_t v52 = v53 >> 1;
                  }
                  else {
                    int v54 = v52;
                  }
                  if (v54)
                  {
                    uint64_t v55 = (char *)sub_10000956C((uint64_t)v11, v54);
                    int v50 = *(char **)(a1 + 8);
                    uint64_t v49 = *(char **)(a1 + 16);
                  }

                  else
                  {
                    uint64_t v55 = 0LL;
                  }

                  int v56 = &v55[4 * v51];
                  *(_DWORD *)int v56 = 0;
                  char v57 = v56 + 4;
                  while (v49 != v50)
                  {
                    uint64_t v58 = *((_DWORD *)v49 - 1);
                    v49 -= 4;
                    *((_DWORD *)v56 - 1) = v58;
                    v56 -= 4;
                  }

                  *(void *)(a1 + 8) = v56;
                  *(void *)(a1 + 16) = v57;
                  *(void *)(a1 + 24) = &v55[4 * v54];
                  if (v50) {
                    operator delete(v50);
                  }
                  uint64_t v49 = v57;
                }

                else
                {
                  *(_DWORD *)uint64_t v49 = 0;
                  v49 += 4;
                }

                *(void *)(a1 + 16) = v49;
                int v60 = *((void *)this + 1);
                unint64_t v59 = *((void *)this + 2);
                unsigned int v61 = *(void *)this;
                uint64_t v62 = v60 > 0xFFFFFFFFFFFFFFF5LL || v60 + 10 > v59;
                if (!v62)
                {
                  uint64_t v68 = 0;
                  int v69 = 0;
                  char v70 = 0LL;
                  while (1)
                  {
                    uint64_t v71 = v60 + 1;
                    *((void *)this + 1) = v60 + 1;
                    unint64_t v72 = *(_BYTE *)(v61 + v60);
                    v70 |= (unint64_t)(v72 & 0x7F) << v68;
                    if ((v72 & 0x80) == 0) {
                      goto LABEL_91;
                    }
                    v68 += 7;
                    int v60 = v71;
                    uint64_t v62 = v69++ > 8;
                    if (v62)
                    {
                      LODWORD(v70) = 0;
                      goto LABEL_91;
                    }
                  }
                }

                int v63 = 0;
                char v64 = 0;
                char v70 = 0LL;
                if (v59 <= v60) {
                  uint64_t v65 = *((void *)this + 1);
                }
                else {
                  uint64_t v65 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v65 == v60)
                  {
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v49 - 1) = 0;
                    goto LABEL_127;
                  }

                  unint64_t v66 = v60++;
                  int v67 = *(_BYTE *)(v61 + v66);
                  *((void *)this + 1) = v60;
                  v70 |= (unint64_t)(v67 & 0x7F) << v63;
                  if ((v67 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  uint64_t v62 = v64++ > 8;
                  if (v62)
                  {
                    LODWORD(v70) = 0;
                    goto LABEL_90;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v70) = 0;
                }
LABEL_90:
                uint64_t v71 = v66 + 1;
LABEL_91:
                *((_DWORD *)v49 - 1) = v70;
              }

              while (v71 < v59 && !*((_BYTE *)this + 24));
            }

        *(_DWORD *)(a1 + 36) = v26;
        goto LABEL_158;
      case 2u:
        *(_BYTE *)(a1 + 64) |= 8u;
        int v30 = *((void *)this + 1);
        uint64_t v31 = *((void *)this + 2);
        int v32 = *(void *)this;
        if (v30 <= 0xFFFFFFFFFFFFFFF5LL && v30 + 10 <= v31)
        {
          char v33 = 0;
          uint64_t v34 = 0;
          unint64_t v35 = 0LL;
          do
          {
            int v36 = v30 + 1;
            *((void *)this + 1) = v30 + 1;
            uint64_t v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              goto LABEL_142;
            }
            v33 += 7;
            int v30 = v36;
            char v15 = v34++ > 8;
          }

          while (!v15);
LABEL_92:
          LODWORD(v35) = 0;
          goto LABEL_142;
        }

        int v89 = 0;
        unsigned int v90 = 0;
        unint64_t v35 = 0LL;
        if (v31 <= v30) {
          uint64_t v31 = *((void *)this + 1);
        }
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v91 = v30 + 1;
            v92 = *(_BYTE *)(v32 + v30);
            *((void *)this + 1) = v91;
            v35 |= (unint64_t)(v92 & 0x7F) << v89;
            if (v92 < 0)
            {
              v89 += 7;
              int v30 = v91;
              char v15 = v90++ > 8;
              if (v15) {
                goto LABEL_92;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v35) = 0;
            }
          }

          break;
        }

          *(_DWORD *)(a1 + 72) = v71;
          goto LABEL_160;
        case 9u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          uint64_t v74 = *((void *)this + 1);
          if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v74);
          goto LABEL_158;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 0x40u;
          int v75 = *((void *)this + 1);
          if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v75);
          goto LABEL_158;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 1u;
          char v76 = *((void *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFF7LL || v76 + 8 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v76);
LABEL_102:
          uint64_t v77 = *((void *)this + 1) + 8LL;
          goto LABEL_159;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_160;
      }
    }

    char v21 = 0;
    uint64_t v22 = 0;
    unint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

        if (PB::Reader::placeMark(this, v130, v54, v55)
          && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(void *)v56 + 16LL))(v56, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v130);
LABEL_203:
          uint64_t v2 = *((void *)this + 1);
          int v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_203;
    }
  }

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_139;
      }
    }

    char v21 = 0;
    uint64_t v22 = 0;
    unint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

void sub_1000762C8(uint64_t a1, void *lpsrc)
{
}

void sub_100076314(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100074A40(a1, a2);
  }

uint64_t sub_100076354()
{
  return 1LL;
}

void *sub_10007635C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.HomeKitAccessory");
}

void sub_10007636C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v26,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  10670LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v26,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v25, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }

  int v5 = *(_DWORD *)(a2 + 84);
  if (!(_BYTE)v5) {
    goto LABEL_38;
  }
  if ((v5 & 1) != 0)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 48);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
      sub_101227DF4();
    }
    *(_DWORD *)(a1 + 84) |= 1u;
    *(_DWORD *)(a1 + 48) = v6;
    int v5 = *(_DWORD *)(a2 + 84);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 84) |= 2u;
    int v8 = *(std::string **)(a1 + 8);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v8 = (std::string *)operator new(0x18uLL);
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 8) = v8;
    }

    std::string::operator=(v8, v7);
    int v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 4) == 0)
    {
LABEL_11:
      if ((v5 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }

  char v9 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 84) |= 4u;
  uint64_t v10 = *(std::string **)(a1 + 16);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v10 = (std::string *)operator new(0x18uLL);
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 16) = v10;
  }

  std::string::operator=(v10, v9);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }

void sub_1000766D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000766F0(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[2];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[3];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

  uint64_t v8 = a1[4];
  if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v8 != 0)
  {
    operator delete((void *)v8);
  }

  uint64_t v10 = a1[5];
  if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v10)
  {
    operator delete((void *)v10);
  }

  uint64_t v11 = a1[7];
  if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v11)
  {
    operator delete((void *)v11);
  }

  uint64_t v12 = a1[8];
  if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v12)
  {
    operator delete((void *)v12);
  }

  uint64_t v13 = a1[9];
  if ((_UNKNOWN *)v13 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v13)
  {
    operator delete((void *)v13);
  }

void sub_100076868(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B2D8;
  sub_1000766F0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100076898(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B2D8;
  sub_1000766F0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

_DWORD *sub_1000768CC()
{
  uint64_t result = operator new(0x58uLL);
  result[12] = 10;
  *(void *)uint64_t result = off_10181B2D8;
  *((void *)result + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_WORD *)result + 26) = 0;
  *((void *)result + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 10) = 0LL;
  return result;
}

uint64_t sub_100076914(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 84);
  if (v1)
  {
    *(_DWORD *)(result + 48) = 10;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 84) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 84) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 84) & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 84) & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(result + 40);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 84) & 0x40) != 0)
    {
      uint64_t v7 = *(void *)(result + 56);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 84) & 0x80) != 0)
    {
      uint64_t v8 = *(void *)(result + 64);
      if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
  }

  int v9 = *(_DWORD *)(result + 84);
  if ((v9 & 0xFF00) != 0)
  {
    *(_WORD *)(result + 52) = 0;
    if ((v9 & 0x400) != 0)
    {
      uint64_t v10 = *(void *)(result + 72);
      if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 84) = 0;
  return result;
}

uint64_t sub_100076AE4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_37:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v14 = ((1 << v9) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101227DF4();
            }
            *(_DWORD *)(a1 + 84) |= 1u;
            *(_DWORD *)(a1 + 48) = v9;
          }

          char v15 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 18)
          {
            *((void *)this + 1) = v15 + 1;
            goto LABEL_49;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36);
        if ((_DWORD)result)
        {
          unsigned int v9 = v36;
          goto LABEL_37;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_32;
        }
LABEL_49:
        *(_DWORD *)(a1 + 84) |= 2u;
        uint64_t v16 = *(void **)(a1 + 8);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 8) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_55:
        *(_DWORD *)(a1 + 84) |= 4u;
        int v18 = *(void **)(a1 + 16);
        if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v18 = operator new(0x18uLL);
          v18[1] = 0LL;
          v18[2] = 0LL;
          void *v18 = 0LL;
          *(void *)(a1 + 16) = v18;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v19 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v19 + 1;
LABEL_61:
        *(_DWORD *)(a1 + 84) |= 8u;
        int v20 = *(void **)(a1 + 24);
        if (v20 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v20 = operator new(0x18uLL);
          v20[1] = 0LL;
          v20[2] = 0LL;
          void *v20 = 0LL;
          *(void *)(a1 + 24) = v20;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v20);
        if (!(_DWORD)result) {
          return result;
        }
        char v21 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v21 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 84) |= 0x10u;
        char v22 = *(void **)(a1 + 32);
        if (v22 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v22 = operator new(0x18uLL);
          v22[1] = 0LL;
          v22[2] = 0LL;
          *char v22 = 0LL;
          *(void *)(a1 + 32) = v22;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v22);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v23 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v23 + 1;
LABEL_73:
        *(_DWORD *)(a1 + 84) |= 0x20u;
        int v24 = *(void **)(a1 + 40);
        if (v24 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v24 = operator new(0x18uLL);
          v24[1] = 0LL;
          unsigned int v24[2] = 0LL;
          *int v24 = 0LL;
          *(void *)(a1 + 40) = v24;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v24);
        if (!(_DWORD)result) {
          return result;
        }
        char v25 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v25 + 1;
LABEL_79:
        *(_DWORD *)(a1 + 84) |= 0x40u;
        int v26 = *(void **)(a1 + 56);
        if (v26 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v26 = operator new(0x18uLL);
          v26[1] = 0LL;
          unsigned int v26[2] = 0LL;
          void *v26 = 0LL;
          *(void *)(a1 + 56) = v26;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v26);
        if (!(_DWORD)result) {
          return result;
        }
        char v27 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v27 + 1;
LABEL_85:
        *(_DWORD *)(a1 + 84) |= 0x80u;
        uint64_t v28 = *(void **)(a1 + 64);
        if (v28 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v28 = operator new(0x18uLL);
          v28[1] = 0LL;
          v28[2] = 0LL;
          void *v28 = 0LL;
          *(void *)(a1 + 64) = v28;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v28);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v29 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        uint64_t v12 = v29 + 1;
        *((void *)this + 1) = v12;
LABEL_91:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v30 = v38;
          uint64_t v31 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v30 = *v12;
          uint64_t v31 = v12 + 1;
          *((void *)this + 1) = v31;
        }

        *(_BYTE *)(a1 + 52) = v30 != 0;
        *(_DWORD *)(a1 + 84) |= 0x100u;
        uint64_t v11 = v31 + 1;
        *((void *)this + 1) = v11;
LABEL_99:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v32 = v37;
          char v33 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v32 = *v11;
          char v33 = v11 + 1;
          *((void *)this + 1) = v33;
        }

        *(_BYTE *)(a1 + 53) = v32 != 0;
        int v13 = *(_DWORD *)(a1 + 84) | 0x200;
        *(_DWORD *)(a1 + 84) = v13;
        *((void *)this + 1) = v33 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 84) = v13 | 0x400;
        uint64_t v34 = *(void **)(a1 + 72);
        if (v34 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v34 = operator new(0x18uLL);
          v34[1] = 0LL;
          v34[2] = 0LL;
          void *v34 = 0LL;
          *(void *)(a1 + 72) = v34;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v34);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_55;
        }
        goto LABEL_32;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_61;
        }
        goto LABEL_32;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_67;
        }
        goto LABEL_32;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_73;
        }
        goto LABEL_32;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_79;
        }
        goto LABEL_32;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_85;
        }
        goto LABEL_32;
      case 9u:
        int v7 = TagFallback & 7;
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_91;
      case 0xAu:
        int v7 = TagFallback & 7;
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_99;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_32;
        }
        int v13 = *(_DWORD *)(a1 + 84);
        goto LABEL_107;
      default:
        int v7 = TagFallback & 7;
LABEL_32:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1000770D8( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 84);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 48),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_100077230(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 84);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_82;
  }

  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 10;
    }

    else if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      int v3 = *(_DWORD *)(a1 + 84);
    }

    else
    {
      int v6 = 1;
    }

    uint64_t v4 = (v6 + 1);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }

  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 23);
  char v9 = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v10 = *(void *)(v7 + 8);
    int v3 = *(_DWORD *)(a1 + 84);
    char v9 = *(_BYTE *)(v7 + 23);
  }

  else
  {
    int v12 = 1;
  }

  if (v9 < 0) {
    int v8 = v10;
  }
  uint64_t v4 = (v4 + v12 + v8 + 1);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17,  a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 84);
      char v15 = *(_BYTE *)(v13 + 23);
    }

    else
    {
      int v18 = 1;
    }

    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v4 = (v4 + v18 + v14 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }

  uint64_t v19 = *(void *)(a1 + 24);
  int v20 = *(unsigned __int8 *)(v19 + 23);
  char v21 = v20;
  uint64_t v22 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    unint64_t v23 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    unint64_t v23 = v22;
  }
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23,  a2);
    int v20 = *(unsigned __int8 *)(v19 + 23);
    uint64_t v22 = *(void *)(v19 + 8);
    int v3 = *(_DWORD *)(a1 + 84);
    char v21 = *(_BYTE *)(v19 + 23);
  }

  else
  {
    int v24 = 1;
  }

  if (v21 < 0) {
    int v20 = v22;
  }
  uint64_t v4 = (v4 + v24 + v20 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

void sub_1000775A0(uint64_t a1, void *lpsrc)
{
}

void sub_1000775EC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007636C(a1, a2);
  }

uint64_t sub_10007762C()
{
  return 1LL;
}

void *sub_100077634@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.HomeKitScene");
}

void sub_100077644(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  10947LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }

    else if ((*(_BYTE *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }

    int v7 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(_DWORD *)(a1 + 12) = v7;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0) {
      return;
    }
LABEL_10:
    int v8 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 4u;
    char v9 = *(std::string **)(a1 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      char v9 = (std::string *)operator new(0x18uLL);
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 16) = v9;
    }

    std::string::operator=(v9, v8);
  }

void sub_100077740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100077758(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B350;
  sub_100069200((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100077788(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B350;
  sub_100069200((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_1000777BC()
{
  v0 = operator new(0x20uLL);
  void *v0 = off_10181B350;
  double result = 0.0;
  v0[1] = 0LL;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[3] = 0LL;
  return result;
}

uint64_t sub_1000777F8(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0LL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100077844( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 8);
  int v6 = (unsigned int *)(a1 + 12);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v7 = (char *)*((void *)this + 1);
          if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((void *)this + 1) = v7 + 1;
            if (!(_DWORD)TagFallback) {
              return 1LL;
            }
          }

          unsigned int v9 = TagFallback >> 3;
          int v10 = TagFallback & 7;
          uint64_t v13 = (char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
            if (!(_DWORD)result) {
              return result;
            }
            int v14 = (_BYTE *)*((void *)this + 1);
            unint64_t v12 = *((void *)this + 2);
          }

          else
          {
            *int v5 = *v13;
            int v14 = v13 + 1;
            *((void *)this + 1) = v14;
          }

          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            char v15 = v14 + 1;
            *((void *)this + 1) = v15;
            goto LABEL_27;
          }
        }

        if (v9 != 2) {
          break;
        }
        int v10 = TagFallback & 7;
        char v15 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
LABEL_27:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v16 = (_BYTE *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          *int v6 = *v15;
          uint64_t v16 = v15 + 1;
          *((void *)this + 1) = v16;
        }

        int v11 = *(_DWORD *)(a1 + 28) | 2;
        *(_DWORD *)(a1 + 28) = v11;
        if ((unint64_t)v16 < v12 && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_35;
        }
      }

      if (v9 != 3) {
        break;
      }
      int v10 = TagFallback & 7;
      if (v10 != 2) {
        goto LABEL_19;
      }
      int v11 = *(_DWORD *)(a1 + 28);
LABEL_35:
      *(_DWORD *)(a1 + 28) = v11 | 4;
      unint64_t v17 = *(void **)(a1 + 16);
      if (v17 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v17 = operator new(0x18uLL);
        v17[1] = 0LL;
        unsigned int v17[2] = 0LL;
        void *v17 = 0LL;
        *(void *)(a1 + 16) = v17;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v17);
      if (!(_DWORD)result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v10 = TagFallback & 7;
LABEL_19:
    if (v10 == 4) {
      return 1LL;
    }
  }

uint64_t sub_100077A64( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 28);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 3LL,  *(void *)(v5 + 16),  a2);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_100077ADC(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_24;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_14;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_14;
    }
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }

  else
  {
    int v7 = 2;
  }

  uint64_t v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    char v10 = v9;
    uint64_t v11 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12,  a2);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v11 = *(void *)(v8 + 8);
      char v10 = *(_BYTE *)(v8 + 23);
    }

    else
    {
      int v13 = 1;
    }

    if (v10 < 0) {
      int v9 = v11;
    }
    uint64_t v4 = (v4 + v13 + v9 + 1);
  }

void sub_100077BC8(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100077C14()
{
  return 1LL;
}

void *sub_100077C1C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.NowPlayingOutputDevice");
}

uint64_t sub_100077C2C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = off_10181B3C8;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = 12LL;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  sub_100077CB0(a1, a2);
  return a1;
}

void sub_100077C90(_Unwind_Exception *a1)
{
}

void sub_100077CB0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v23,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  11300LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v23,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v22, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32),  *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 44);
      uint64_t v8 = *(int *)(a1 + 40);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32),  v7 + 1);
          int v7 = *(_DWORD *)(a1 + 44);
        }

        *(_DWORD *)(a1 + 44) = v7 + 1;
        char v10 = operator new(0x20uLL);
        *char v10 = off_10181B350;
        v10[1] = 0LL;
        v10[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v10[3] = 0LL;
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(int *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)(a1 + 40) = v8 + 1;
        char v10 = *(void **)(v9 + 8 * v8);
      }

      sub_100077644((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 40));
  }

  LOBYTE(v13) = *(_BYTE *)(a2 + 68);
  if (!(_BYTE)v13) {
    return;
  }
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    unsigned int v14 = *(_DWORD *)(a2 + 16);
    if (v14 - 31 >= 0x19 && (v14 > 0xE || ((1 << v14) & 0x76B6) == 0)) {
      sub_101227E1C();
    }
    *(_DWORD *)(a1 + 68) |= 1u;
    *(_DWORD *)(a1 + 16) = v14;
    int v13 = *(_DWORD *)(a2 + 68);
  }

  if ((v13 & 2) == 0)
  {
    if ((v13 & 4) == 0) {
      goto LABEL_19;
    }
LABEL_25:
    int v17 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 68) |= 4u;
    *(_DWORD *)(a1 + 20) = v17;
    int v13 = *(_DWORD *)(a2 + 68);
    if ((v13 & 8) == 0)
    {
LABEL_20:
      if ((v13 & 0x20) == 0) {
        return;
      }
      goto LABEL_29;
    }

    goto LABEL_26;
  }

  char v15 = *(const std::string **)(a2 + 8);
  *(_DWORD *)(a1 + 68) |= 2u;
  uint64_t v16 = *(std::string **)(a1 + 8);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v16 = (std::string *)operator new(0x18uLL);
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 8) = v16;
  }

  std::string::operator=(v16, v15);
  int v13 = *(_DWORD *)(a2 + 68);
  if ((v13 & 4) != 0) {
    goto LABEL_25;
  }
LABEL_19:
  if ((v13 & 8) == 0) {
    goto LABEL_20;
  }
LABEL_26:
  int v18 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 68) |= 8u;
  uint64_t v19 = *(std::string **)(a1 + 24);
  if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v19 = (std::string *)operator new(0x18uLL);
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 24) = v19;
  }

  std::string::operator=(v19, v18);
  if ((*(_DWORD *)(a2 + 68) & 0x20) != 0)
  {
LABEL_29:
    *(_DWORD *)(a1 + 68) |= 0x20u;
    int v20 = *(_WORD **)(a1 + 56);
    if (!v20)
    {
      int v20 = operator new(0x18uLL);
      *(void *)int v20 = off_10181AEA0;
      v20[4] = 0;
      *((_DWORD *)v20 + 3) = 0;
      *((_DWORD *)v20 + 4) = 0;
      *(void *)(a1 + 56) = v20;
    }

    char v21 = *(_BYTE **)(a2 + 56);
    if (!v21) {
      char v21 = *(_BYTE **)(qword_1019A08E0 + 56);
    }
    sub_100071184((uint64_t)v20, v21);
  }

void sub_100077F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100077F7C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B3C8;
  uint64_t v2 = (uint64_t)a1 + 32;
  sub_100077FBC(a1);
  sub_10008D0EC(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100077FBC(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[3];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  if ((void *)qword_1019A08E0 != a1)
  {
    uint64_t v6 = a1[7];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

void sub_10007806C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

double sub_100078080()
{
  v0 = operator new(0x48uLL);
  v0[5] = 0LL;
  *((_DWORD *)v0 + 12) = 0;
  void *v0 = off_10181B3C8;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 12LL;
  v0[2] = 12LL;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[4] = 0LL;
  v0[7] = 0LL;
  v0[8] = 0LL;
  return result;
}

uint64_t sub_1000780C8(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 68);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 12;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 8);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 20) = 0;
    if ((*(_BYTE *)(result + 68) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 68) & 0x20) != 0)
    {
      uint64_t v5 = *(void *)(result + 56);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 16)) {
          *(_WORD *)(v5 + 8) = 0;
        }
        *(_DWORD *)(v5 + 16) = 0;
      }
    }
  }

  if (*(int *)(result + 40) >= 1)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v1 + 32) + 8 * v6);
      double result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32LL))(v7);
      ++v6;
    }

    while (v6 < *(int *)(v1 + 40));
  }

  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 68) = 0;
  return result;
}

uint64_t sub_1000781C0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 20);
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32);
LABEL_2:
  while (2)
  {
    uint64_t v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        char v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v46);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v11 = v46;
        }

        else
        {
          unsigned int v11 = *v10;
          *((void *)this + 1) = v10 + 1;
        }

        if (v11 - 31 < 0x19 || (v11 <= 0xE ? (BOOL v16 = ((1 << v11) & 0x76B6) == 0) : (BOOL v16 = 1), !v16))
        {
          if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0)) {
            sub_101227E1C();
          }
          *(_DWORD *)(a1 + 68) |= 1u;
          *(_DWORD *)(a1 + 16) = v11;
        }

        int v17 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 18)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_40;
        }

        continue;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_23;
        }
LABEL_40:
        *(_DWORD *)(a1 + 68) |= 2u;
        int v18 = *(void **)(a1 + 8);
        if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v18 = operator new(0x18uLL);
          v18[1] = 0LL;
          v18[2] = 0LL;
          void *v18 = 0LL;
          *(void *)(a1 + 8) = v18;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v19 = (_BYTE *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        int v13 = v19 + 1;
        *((void *)this + 1) = v13;
LABEL_46:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          int v20 = (_BYTE *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          *uint64_t v5 = *v13;
          int v20 = v13 + 1;
          *((void *)this + 1) = v20;
        }

        int v14 = *(_DWORD *)(a1 + 68) | 4;
        *(_DWORD *)(a1 + 68) = v14;
        *((void *)this + 1) = v20 + 1;
LABEL_54:
        *(_DWORD *)(a1 + 68) = v14 | 8;
        char v21 = *(void **)(a1 + 24);
        if (v21 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v21 = operator new(0x18uLL);
          v21[1] = 0LL;
          unsigned int v21[2] = 0LL;
          *char v21 = 0LL;
          *(void *)(a1 + 24) = v21;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v21);
        if (!(_DWORD)result) {
          return result;
        }
        char v22 = (_BYTE *)*((void *)this + 1);
        do
        {
          *((void *)this + 1) = v22 + 1;
LABEL_60:
          int v23 = *(_DWORD *)(a1 + 44);
          uint64_t v24 = *(int *)(a1 + 40);
          if ((int)v24 >= v23)
          {
            if (v23 == *(_DWORD *)(a1 + 48))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v23 + 1);
              int v23 = *(_DWORD *)(a1 + 44);
            }

            *(_DWORD *)(a1 + 44) = v23 + 1;
            int v26 = operator new(0x20uLL);
            void *v26 = off_10181B350;
            v26[1] = 0LL;
            unsigned int v26[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
            v26[3] = 0LL;
            uint64_t v27 = *(void *)(a1 + 32);
            uint64_t v28 = *(int *)(a1 + 40);
            *(_DWORD *)(a1 + 40) = v28 + 1;
            *(void *)(v27 + 8 * v28) = v26;
          }

          else
          {
            uint64_t v25 = *(void *)(a1 + 32);
            *(_DWORD *)(a1 + 40) = v24 + 1;
            int v26 = *(void **)(v25 + 8 * v24);
          }

          unint64_t v29 = (char *)*((void *)this + 1);
          if ((unint64_t)v29 >= *((void *)this + 2) || *v29 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v47)) {
              return 0LL;
            }
          }

          else
          {
            unsigned int v47 = *v29;
            *((void *)this + 1) = v29 + 1;
          }

          int v30 = *((_DWORD *)this + 14);
          int v31 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v30 + 1;
          if (v30 >= v31) {
            return 0LL;
          }
          int v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v47);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
          int v34 = *((_DWORD *)this + 14);
          BOOL v35 = __OFSUB__(v34, 1);
          int v36 = v34 - 1;
          if (v36 < 0 == v35) {
            *((_DWORD *)this + 14) = v36;
          }
          char v22 = (_BYTE *)*((void *)this + 1);
          int v37 = *v22;
        }

        while (v37 == 42);
        if (v37 != 50) {
          continue;
        }
        *((void *)this + 1) = v22 + 1;
LABEL_78:
        *(_DWORD *)(a1 + 68) |= 0x20u;
        int v38 = *(_WORD **)(a1 + 56);
        if (!v38)
        {
          int v38 = operator new(0x18uLL);
          *(void *)int v38 = off_10181AEA0;
          v38[4] = 0;
          *((_DWORD *)v38 + 3) = 0;
          *((_DWORD *)v38 + 4) = 0;
          *(void *)(a1 + 56) = v38;
        }

        char v39 = (char *)*((void *)this + 1);
        if ((unint64_t)v39 >= *((void *)this + 2) || *v39 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v48)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v48 = *v39;
          *((void *)this + 1) = v39 + 1;
        }

        int v40 = *((_DWORD *)this + 14);
        int v41 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v40 + 1;
        if (v40 < v41)
        {
          int v42 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v48);
          if (sub_1000712B8((uint64_t)v38, this, v43))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v42);
              int v44 = *((_DWORD *)this + 14);
              BOOL v35 = __OFSUB__(v44, 1);
              int v45 = v44 - 1;
              if (v45 < 0 == v35) {
                *((_DWORD *)this + 14) = v45;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1LL;
                *((_BYTE *)this + 36) = 1;
                return result;
              }

              continue;
            }
          }
        }

        return 0LL;
      case 3u:
        int v9 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_46;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_23;
        }
        int v14 = *(_DWORD *)(a1 + 68);
        goto LABEL_54;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_60;
        }
        goto LABEL_23;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_78;
        }
        goto LABEL_23;
      default:
        int v9 = TagFallback & 7;
LABEL_23:
        if (v9 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_100078708( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 68);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

uint64_t sub_100078808(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 68);
  if (!(_BYTE)v3)
  {
    int v4 = 0;
    goto LABEL_47;
  }

  if ((*(_BYTE *)(a1 + 68) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      int v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 68);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    int v4 = 0;
    if ((*(_BYTE *)(a1 + 68) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 68);
    char v8 = *(_BYTE *)(v6 + 23);
  }

  else
  {
    int v11 = 1;
  }

  if (v8 < 0) {
    int v7 = v9;
  }
  v4 += v11 + v7 + 1;
LABEL_22:
  if ((v3 & 4) != 0)
  {
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 68);
    }

    else
    {
      int v13 = 2;
    }

    v4 += v13;
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x20) == 0) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }

  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18,  a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 68);
    char v16 = *(_BYTE *)(v14 + 23);
  }

  else
  {
    int v19 = 1;
  }

  if (v16 < 0) {
    int v15 = v17;
  }
  v4 += v19 + v15 + 1;
  if ((v3 & 0x20) != 0)
  {
LABEL_39:
    uint64_t v20 = *(void *)(a1 + 56);
    if (!v20) {
      uint64_t v20 = *(void *)(qword_1019A08E0 + 56);
    }
    int v21 = 2 * (*(_DWORD *)(v20 + 16) & 1);
    if ((*(_DWORD *)(v20 + 16) & 2) != 0) {
      v21 += 2;
    }
    else {
      int v22 = 0;
    }
    *(_DWORD *)(v20 + 12) = v22;
    v4 += v22 + 2;
  }

LABEL_47:
  int v23 = *(_DWORD *)(a1 + 40);
  uint64_t v24 = (v23 + v4);
  if (v23 >= 1)
  {
    uint64_t v25 = 0LL;
    do
    {
      int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100077ADC( *(void *)(*(void *)(a1 + 32) + 8 * v25),  a2);
      int v27 = (int)v26;
      else {
        int v28 = 1;
      }
      uint64_t v24 = (v27 + v24 + v28);
      ++v25;
    }

    while (v25 < *(int *)(a1 + 40));
  }

  *(_DWORD *)(a1 + 64) = v24;
  return v24;
}

  char v16 = *(void *)(v5 + 88);
  if (!v16) {
    char v16 = *(void *)(qword_1019A0980 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v16,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181EDA0);
        }
        int v34 = (os_log_s *)qword_1019348D8;
        if (!os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT)) {
          return 28LL;
        }
        BOOL v35 = (char *)operator new(0x28uLL);
        *(_OWORD *)BOOL v35 = 0u;
        *((_OWORD *)v35 + 1) = 0u;
        *(void *)(v35 + 29) = 0LL;
        sub_10000AE6C((uint64_t)v78, v35);
        if ((a2[23] & 0x80u) == 0) {
          int v36 = a2;
        }
        else {
          int v36 = *(unsigned __int8 **)a2;
        }
        int v37 = sub_1000F0EEC(v10);
        int v38 = *(char *)(v37 + 23);
        char v39 = *(void *)v37;
        int v40 = (char)a5[23];
        int v41 = *(unsigned __int8 **)a5;
        int v42 = sub_1000F0EF4(v10);
        if (v40 >= 0) {
          unsigned int v43 = a5;
        }
        else {
          unsigned int v43 = v41;
        }
        if (v38 >= 0) {
          int v44 = v37;
        }
        else {
          int v44 = v39;
        }
        else {
          int v45 = *(void *)v42;
        }
        *(_DWORD *)buf = 68290307;
        char v64 = 0;
        uint64_t v65 = 2082;
        unint64_t v66 = "";
        int v67 = 2081;
        uint64_t v68 = v35;
        int v69 = 2081;
        *(void *)char v70 = v36;
        *(_WORD *)&v70[8] = 2081;
        uint64_t v71 = v44;
        unint64_t v72 = 2081;
        int v73 = v43;
        uint64_t v74 = 2081;
        __p[0] = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::disconnect, failed because not authorized to disconnect from this service created by another user, ServiceUUID:%{private, location:escape_only}s, clientId:%{private, location:escape_only}s, loadedServiceClientId:%{private, location:escape_only}s, userId:%{private, lo cation:escape_only}s, loadedServiceUserId:%{private, location:escape_only}s}",  buf,  0x44u);
        int v27 = v35;
LABEL_63:
        operator delete(v27);
        return 28LL;
      }
    }

  *(_DWORD *)(a1 + 56) = v4;
  return v4;
}

  uint64_t result = *(double *)(a2 + 96);
  *(_DWORD *)(a1 + 160) |= 0x2000u;
  *(double *)(a1 + 96) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x4000) == 0)
  {
LABEL_21:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(void *)(v5 + 40),  (unint64_t)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  (int)a2,  *(double *)(v5 + 88),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  *(_DWORD *)(v5 + 132),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  *(unsigned __int8 *)(v5 + 144),  (BOOL)a2,  a4);
  }

  if ((v3 & 0x80) != 0) {
    v4 += 2;
  }
  if ((v3 & 0x100) != 0)
  {
LABEL_50:
    uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
    if ((v17 & 0x80000000) != 0)
    {
      unint64_t v18 = 11;
    }

    else if (v17 >= 0x80)
    {
      unint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    }

    else
    {
      unint64_t v18 = 2;
    }

    v4 += v18;
  }

  int v21 = *(const std::string **)(a2 + 88);
  *(_DWORD *)(a1 + 148) |= 0x1000u;
  int v22 = *(std::string **)(a1 + 88);
  if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v22 = (std::string *)operator new(0x18uLL);
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 88) = v22;
  }

  std::string::operator=(v22, v21);
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  unint64_t v10 = *(void *)(v5 + 104);
  if (!v10) {
    unint64_t v10 = *(void *)(qword_1019A0CF0 + 104);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

    int v22 = 0;
    int v21 = 0;
LABEL_49:
    uint64_t v24 = 0;
    return (v21 | ~v18) & (!v22 && !v24);
  }

  if (v10 < 24) {
    goto LABEL_47;
  }
  uint64_t v20 = v19;
  int v21 = v19 <= -20.0;
LABEL_43:
  if (v16 == -999.0)
  {
    int v22 = 0;
    goto LABEL_49;
  }

  int v22 = v16 > 75.0;
  int v23 = *(double *)(a1 + 592);
  uint64_t v24 = v16 > v23 + 10.0;
  if (v23 == -999.0) {
    uint64_t v24 = 0;
  }
  return (v21 | ~v18) & (!v22 && !v24);
}

  int v22 = *(_DWORD *)(a2 + 100);
  if (v22 >= 0x11) {
    sub_10124141C();
  }
  *(_DWORD *)(a1 + 124) |= 0x4000u;
  *(_DWORD *)(a1 + 100) = v22;
  uint64_t v5 = *(_DWORD *)(a2 + 124);
  if ((v5 & 0x8000) != 0)
  {
LABEL_35:
    char v16 = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 124) |= 0x8000u;
    *(_BYTE *)(a1 + 104) = v16;
    uint64_t v5 = *(_DWORD *)(a2 + 124);
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_56;
  }
  if ((v3 & 0x100) != 0)
  {
    int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
    if (v21 >= 0x80)
    {
      int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
      int v3 = a1[20];
    }

    else
    {
      int v22 = 1;
    }

    int v4 = (v4 + v22 + 1);
    if ((v3 & 0x200) == 0)
    {
LABEL_50:
      if ((v3 & 0x400) == 0) {
        goto LABEL_51;
      }
      goto LABEL_66;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_50;
  }

  int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
  if (v23 >= 0x80)
  {
    uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    int v3 = a1[20];
  }

  else
  {
    uint64_t v24 = 2;
  }

  int v4 = (v24 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_51:
    if ((v3 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_70;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_66;
  }
  if ((v3 & 0x100) != 0)
  {
    int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if ((v23 & 0x80000000) != 0)
    {
      uint64_t v24 = 11;
    }

    else if (v23 >= 0x80)
    {
      uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 60);
    }

    else
    {
      uint64_t v24 = 2;
    }

    int v4 = (v24 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_50:
      if ((v3 & 0x400) == 0) {
        goto LABEL_66;
      }
      goto LABEL_62;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_50;
  }

  uint64_t v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v25 >= 0x80)
  {
    int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 60);
  }

  else
  {
    int v26 = 2;
  }

  int v4 = (v26 + v4);
  if ((v3 & 0x400) != 0)
  {
LABEL_62:
    int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    else {
      int v28 = 2;
    }
    int v4 = (v28 + v4);
  }

  int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
  if (v19 >= 0x80)
  {
    uint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    int v3 = a1[12];
  }

  else
  {
    uint64_t v20 = 2;
  }

  int v4 = (v20 + v4);
  if ((v3 & 0x100) != 0)
  {
LABEL_51:
    int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
    else {
      int v22 = 2;
    }
    int v4 = (v22 + v4);
  }

  int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
  if (v19 >= 0x80)
  {
    uint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    int v3 = a1[12];
  }

  else
  {
    uint64_t v20 = 2;
  }

  int v4 = (v20 + v4);
  if ((v3 & 0x100) != 0)
  {
LABEL_51:
    int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
    else {
      int v22 = 2;
    }
    int v4 = (v22 + v4);
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_83;
  }
  if ((v3 & 0x100) != 0)
  {
    int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[10];
    if (v21 >= 0x80)
    {
      int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      int v3 = a1[17];
    }

    else
    {
      int v22 = 2;
    }

    int v4 = (v22 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_50:
      if ((v3 & 0x400) == 0) {
        goto LABEL_51;
      }
      goto LABEL_63;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_50;
  }

  int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[11];
  if (v23 >= 0x80)
  {
    uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    int v3 = a1[17];
  }

  else
  {
    uint64_t v24 = 2;
  }

  int v4 = (v24 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_51:
    if ((v3 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_67;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v5[12],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0) {
      int v21 = v4 + 2;
    }
    else {
      int v21 = v4;
    }
    if ((v3 & 0x200) != 0)
    {
      int v22 = *(void *)(a1 + 40);
      if (!v22) {
        int v22 = *(void *)(qword_1019A14B0 + 40);
      }
      int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100646114(v22, a2);
      uint64_t v24 = (int)v23;
      else {
        uint64_t v25 = 1;
      }
      v21 += v24 + v25 + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }

    if ((v3 & 0x400) != 0) {
      int v4 = v21 + 2;
    }
    else {
      int v4 = v21;
    }
    if ((v3 & 0x800) != 0)
    {
      int v26 = *(void *)(a1 + 48);
      if (!v26) {
        int v26 = *(void *)(qword_1019A14B0 + 48);
      }
      int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100646524(v26, a2);
      unint64_t v29 = (int)v27;
      else {
        int v30 = 1;
      }
      int v4 = (v4 + v29 + v30 + 1);
    }
  }

  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 68);
      if ((v26 & 0x80000000) != 0)
      {
        int v27 = 11;
      }

      else if (v26 >= 0x80)
      {
        int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 80);
      }

      else
      {
        int v27 = 2;
      }

      LODWORD(sub_1012279C0(0LL, v4, v5) = v27 + v5;
    }

    int v28 = v5 + 2;
    if ((v3 & 0x200) == 0) {
      int v28 = v5;
    }
    if ((v3 & 0x400) != 0) {
      uint64_t v5 = v28 + 2;
    }
    else {
      uint64_t v5 = v28;
    }
  }

  *(_DWORD *)(a1 + 76) = v5;
  return v5;
}

    uint64_t v6 = (uint64_t *)v6[1];
    if (v6 == a1) {
      goto LABEL_80;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10184C310);
  }
  int v19 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    else {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    int v21 = &v81;
    sub_1000392EC((uint64_t)&v81, v20 + 1);
    if ((v81.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v21 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      else {
        int v22 = *(const void **)a2;
      }
      memmove(v21, v22, v20);
    }

    *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 47;
    int v23 = *(char *)(a2 + 47);
    if (v23 >= 0) {
      uint64_t v24 = (const std::string::value_type *)(a2 + 24);
    }
    else {
      uint64_t v24 = *(const std::string::value_type **)(a2 + 24);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      uint64_t v25 = *(void *)(a2 + 32);
    }
    int v26 = std::string::append(&v81, v24, v25);
    int v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0LL;
    v26->__r_.__value_.__l.__cap_ = 0LL;
    v26->__r_.__value_.__r.__words[0] = 0LL;
    int v28 = &buf;
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v28 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v81.__r_.__value_.__l.__data_) = 134283779;
    *(double *)((char *)v81.__r_.__value_.__r.__words + 4) = v7;
    WORD2(v81.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "FenceCal: combine large fences, distance, %{private}.1lf, %{private}s",  (uint8_t *)&v81,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v81, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10184C310);
    }
    int v73 = qword_101934878;
    sub_10065EF44((const void **)a2, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v74 = &buf;
    }
    else {
      uint64_t v74 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    uint64_t v77 = 134283779;
    unint64_t v78 = v7;
    int v79 = 2081;
    uint64_t v80 = v74;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v81,  1628LL,  &_mh_execute_header,  v73,  2LL,  "FenceCal: combine large fences, distance, %{private}.1lf, %{private}s",  &v77,  22);
    unsigned int v49 = v75;
    goto LABEL_195;
  }

  int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v22 & 0x80000000) != 0)
  {
    int v23 = 11;
  }

  else if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 52);
  }

  else
  {
    int v23 = 2;
  }

  int v4 = (v23 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_53:
    uint64_t v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if ((v24 & 0x80000000) != 0)
    {
      uint64_t v25 = 11;
    }

    else if (v24 >= 0x80)
    {
      uint64_t v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
    }

    else
    {
      uint64_t v25 = 2;
    }

    int v4 = (v25 + v4);
  }

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 88) |= 0x100u;
      int v22 = *(void **)(a1 + 64);
      if (!v22)
      {
        int v22 = operator new(0x28uLL);
        v22[1] = 0LL;
        v22[2] = 0LL;
        *int v22 = off_101858E40;
        *((_DWORD *)v22 + 6) = 0;
        v22[4] = 0LL;
        *(void *)(a1 + 64) = v22;
      }

      int v23 = *(void *)(a2 + 64);
      if (!v23) {
        int v23 = *(void *)(qword_1019A17B8 + 64);
      }
      sub_100810938(v22, v23);
      uint64_t v6 = *(_DWORD *)(a2 + 88);
    }

    if ((v6 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 88) |= 0x200u;
      uint64_t v24 = *(void **)(a1 + 72);
      if (!v24)
      {
        uint64_t v24 = operator new(0x20uLL);
        *uint64_t v24 = off_101858F30;
        v24[1] = 0LL;
        unsigned int v24[2] = 0LL;
        v24[3] = 0LL;
        *(void *)(a1 + 72) = v24;
      }

      uint64_t v25 = *(void *)(a2 + 72);
      if (!v25) {
        uint64_t v25 = *(void *)(qword_1019A17B8 + 72);
      }
      return sub_100811418((uint64_t)v24, v25);
    }
  }

  return result;
}

  if (byte_10198E4A8)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101861E70);
    }
    int v31 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      v55.__r_.__value_.__r.__words[0] = *(void *)a1;
      sub_1007EC454(&buf);
      int v32 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &buf
          : (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      unsigned int v33 = *(void *)(a1 + 32);
      int v34 = *(_DWORD *)(a1 + 52);
      BOOL v35 = *(void *)(a1 + 8);
      int v36 = *(void *)(a1 + 16);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136317698;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = a8;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = a7;
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = a2;
      int v75 = 2048;
      char v76 = v16;
      uint64_t v77 = 1024;
      unint64_t v78 = a5;
      int v79 = 2080;
      uint64_t v80 = v32;
      uint64_t v81 = 2048;
      v82 = v33;
      int v83 = 1024;
      int v84 = v34;
      int v85 = 2048;
      unsigned int v86 = v35;
      int v87 = 2048;
      int v88 = v36;
      int v89 = 1024;
      unsigned int v90 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d",  (uint8_t *)&__p,  0x5Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101861E70);
      }
      int v38 = qword_101934878;
      uint64_t v53 = *(const char **)a1;
      sub_1007EC454(&v55);
      if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v39 = &v55;
      }
      else {
        char v39 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      int v40 = *(void *)(a1 + 32);
      int v41 = *(_DWORD *)(a1 + 52);
      int v42 = *(void *)(a1 + 8);
      unsigned int v43 = *(void *)(a1 + 16);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136317698;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a8;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a7;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = a2;
      uint64_t v58 = 2048;
      unint64_t v59 = v16;
      int v60 = 1024;
      unsigned int v61 = a5;
      uint64_t v62 = 2080;
      int v63 = v39;
      char v64 = 2048;
      uint64_t v65 = v40;
      unint64_t v66 = 1024;
      int v67 = v41;
      uint64_t v68 = 2048;
      int v69 = v42;
      char v70 = 2048;
      uint64_t v71 = v43;
      unint64_t v72 = 1024;
      int v73 = v25;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v38,  2LL,  "FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d",  (const char *)&buf,  92,  v51,  a8,  (_DWORD)v53,  v54,  *(double *)&v55.__r_.__value_.__l.__data_,  LODWORD(v55.__r_.__value_.__r.__words[1]),  *(double *)&v55.__r_.__value_.__l.__cap_,  v56);
      int v45 = v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, BOOL, std::map<CLMacAddress, CLWifiAP Location> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLoca tion> &, unsigned int, const char *)",  "%s\n",  (const char *)v45);
      if (v45 != &__p) {
        free(v45);
      }
    }
  }

  return v25;
}

  unsigned int v33 = *v32;
  *(double *)(a1 + 2008) = *v32;
  int v34 = sub_10098F32C(a1, &v294, v26, v33);
  if (v34 & v24)
  {
    v287[0] = v297;
    v287[1] = v298;
    v285 = v295;
    v286 = v296;
    if ((sub_10098F54C(v34, (uint64_t)v287, (uint64_t)&v285) & 1) != 0
      || (sub_10098F650(a1, v23, v21, &v292, &v293, a3) | v23) != 1)
    {
      goto LABEL_55;
    }

    BOOL v35 = *((void *)&v298 + 1);
    if (*((void *)&v298 + 1) == *(void *)v298) {
      BOOL v35 = *(void *)(v298 - 8) + 5120LL;
    }
    if (*(double *)(v35 - 80) <= 0.0)
    {
LABEL_55:
      int v30 = 0LL;
      unint64_t v29 = 1;
      v255 = a3;
    }

    else
    {
      unint64_t v29 = 1;
      v255 = a3;
      int v30 = 1LL;
    }

    uint64_t v24 = 1;
  }

  else
  {
    unint64_t v29 = 0;
    int v30 = 0LL;
    v255 = a3;
  }

  *(_DWORD *)(a1 + 116) |= 0x10u;
  uint64_t v24 = *(void **)(a1 + 32);
  if (!v24)
  {
    uint64_t v24 = operator new(0x20uLL);
    v24[1] = 0LL;
    unsigned int v24[2] = 0LL;
    *uint64_t v24 = off_1018692A8;
    *((_DWORD *)v24 + 6) = 0;
    *(void *)(a1 + 32) = v24;
  }

  uint64_t v25 = *(void *)(a2 + 32);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_1019A1A88 + 32);
  }
  sub_100A49568((uint64_t)v24, v25);
  int v13 = *(_DWORD *)(a2 + 116);
  if ((v13 & 0x20) != 0) {
    goto LABEL_52;
  }
LABEL_18:
  if ((v13 & 0x40) == 0) {
    goto LABEL_19;
  }
LABEL_57:
  int v28 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 116) |= 0x40u;
  *(_DWORD *)(a1 + 48) = v28;
  int v13 = *(_DWORD *)(a2 + 116);
  if ((v13 & 0x80) != 0)
  {
LABEL_20:
    uint64_t v14 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 116) |= 0x80u;
    *(_DWORD *)(a1 + 52) = v14;
    int v13 = *(_DWORD *)(a2 + 116);
  }

  wifiGranularity = self->_wifiGranularity;
  switch(wifiGranularity)
  {
    case 1:
      uint64_t v17 = @"kGranularityFine";
      break;
    case 4:
      uint64_t v17 = @"kGranularityNearby";
      break;
    case 2:
      uint64_t v17 = @"kGranularityCoarse";
      break;
    default:
      uint64_t v17 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_wifiGranularity);
      break;
  }

  [v3 setObject:v17 forKey:@"wifiGranularity"];
  if ((*(_BYTE *)&self->_has & 2) != 0) {
LABEL_6:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_radius),  @"radius");
LABEL_7:
  p_wifiBands = &self->_wifiBands;
  if (self->_wifiBands.count)
  {
    uint64_t v6 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:");
    if (self->_wifiBands.count)
    {
      int v7 = 0LL;
      do
      {
        char v8 = p_wifiBands->list[v7];
        if (v8 == 1)
        {
          uint64_t v9 = @"k2dot4GHZ";
        }

        else if (v8 == 2)
        {
          uint64_t v9 = @"k5GHZ";
        }

        else
        {
          uint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  p_wifiBands->list[v7]);
        }

        -[NSMutableArray addObject:](v6, "addObject:", v9);
        ++v7;
      }

      while (v7 < self->_wifiBands.count);
    }

    [v3 setObject:v6 forKey:@"wifiBands"];
  }

  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
    wifiAltitudeScale = self->_wifiAltitudeScale;
    if (wifiAltitudeScale == 1)
    {
      int v11 = @"kWifiAltitudeScaleNone";
    }

    else if (wifiAltitudeScale == 2)
    {
      int v11 = @"kWifiAltitudeScale10toThe2";
    }

    else
    {
      int v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_wifiAltitudeScale);
    }

    [v3 setObject:v11 forKey:@"wifiAltitudeScale"];
  }

  meta = self->_meta;
  if (meta) {
    objc_msgSend( v3,  "setObject:forKey:",  -[ALSMeta dictionaryRepresentation](meta, "dictionaryRepresentation"),  @"meta");
  }
  return v3;
}

  int v11 = *(void *)(v5 + 56);
  if (!v11) {
    int v11 = *(void *)(qword_1019A1D48 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_53;
  }

  if ((v3 & 0x40) != 0) {
    int v4 = (v4 + 2);
  }
  else {
    int v4 = v4;
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[9];
    if ((v17 & 0x80000000) != 0)
    {
      unint64_t v18 = 11;
    }

    else if (v17 >= 0x80)
    {
      unint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      int v3 = a1[14];
    }

    else
    {
      unint64_t v18 = 2;
    }

    int v4 = (v18 + v4);
  }

      if (*a2 != 95
        && ((v5 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16LL) + 4LL * *a2) & 0x500) == 0))
      {
        char v8 = (char)v5;
        if (this)
        {
          int v7 = this;
          goto LABEL_52;
        }

        goto LABEL_61;
      }

    int v13 = "Empty";
    goto LABEL_48;
  }

  int v22 = sub_100C0CCC8(a1);
  int v23 = v12 >= v9 && v22;
  if (!v23 || !v10)
  {
    if (!*(_BYTE *)(a1 + 168)) {
      goto LABEL_47;
    }
    goto LABEL_4;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101878CA0);
  }
  uint64_t v24 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 16LL))(buf, a1);
    uint64_t v25 = v89 >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)__p = 136380931;
    *(void *)&__p[4] = v25;
    uint64_t v62 = 2050;
    int v63 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, needs to be refreshed - retry",  __p,  0x16u);
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)buf);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101878CA0);
    }
    int v45 = qword_101934858;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 16LL))(__p, a1);
    if (v64 >= 0) {
      unsigned int v46 = __p;
    }
    else {
      unsigned int v46 = *(_BYTE **)__p;
    }
    *(_DWORD *)v82 = 136380931;
    *(void *)&v82[4] = v46;
    int v83 = 2050;
    int v84 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v45,  2LL,  "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, needs to be refreshed - retry",  v82,  22);
    unsigned int v48 = v47;
    if (SHIBYTE(v64) < 0) {
      operator delete(*(void **)__p);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)",  "%s\n",  v48);
    if (v48 != buf) {
      free(v48);
    }
  }

  std::string::assign(&v60, "1st/Re-Try");
  LODWORD(v16) = 0;
  int v21 = 1LL;
LABEL_51:
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101878CA0);
  }
  int v28 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    unint64_t v29 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
    int v30 = sub_1008ADB4C(a1 + 48);
    int v31 = sub_1008ADB70(a1 + 48);
    int v32 = *(unsigned __int8 *)(a1 + 168);
    unsigned int v33 = sub_100C0CCC8(a1);
    int v34 = &v60;
    *(_DWORD *)buf = 136448771;
    if ((v60.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v34 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    *(void *)&buf[4] = v29;
    int v87 = 2049;
    int v88 = v30;
    int v89 = 2049;
    unsigned int v90 = v31;
    v91 = 1026;
    v92 = v32;
    v93 = 1026;
    int v94 = v33;
    int v95 = 2050;
    int v96 = v12;
    unsigned int v97 = 1026;
    int v98 = v12 >= v9;
    int v99 = 1026;
    v100 = v10;
    v101 = 1026;
    v102 = v12 >= v11;
    v103 = 1026;
    int v104 = v16;
    int v105 = 2081;
    int v106 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "@TileDl, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, lastSuccess, %{public}d, existsOnServer, %{pu blic}d, sinceLastDownload, %{public}.1lf, cooloff1, %{public}d, cooloff2, %{public}d, cooloff3, %{public}d, expire d, %{public}d, path, %{private}s",  buf,  0x58u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101878CA0);
    }
    int v36 = qword_101934858;
    int v37 = sub_100DD8CC8(*(_DWORD *)(a1 + 48));
    int v38 = sub_1008ADB4C(a1 + 48);
    char v39 = sub_1008ADB70(a1 + 48);
    int v40 = *(unsigned __int8 *)(a1 + 168);
    int v41 = sub_100C0CCC8(a1);
    int v42 = &v60;
    *(_DWORD *)__p = 136448771;
    if ((v60.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v42 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    *(void *)&__p[4] = v37;
    uint64_t v62 = 2049;
    int v63 = v38;
    char v64 = 2049;
    uint64_t v65 = v39;
    unint64_t v66 = 1026;
    int v67 = v40;
    uint64_t v68 = 1026;
    int v69 = v41;
    char v70 = 2050;
    uint64_t v71 = v12;
    unint64_t v72 = 1026;
    int v73 = v12 >= v9;
    uint64_t v74 = 1026;
    int v75 = v10;
    char v76 = 1026;
    uint64_t v77 = v12 >= v11;
    unint64_t v78 = 1026;
    int v79 = v16;
    uint64_t v80 = 2081;
    uint64_t v81 = v42;
    LODWORD(v59) = 88;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v36,  1LL,  "@TileDl, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, lastSuccess, %{public}d, existsOnServer, %{pu blic}d, sinceLastDownload, %{public}.1lf, cooloff1, %{public}d, cooloff2, %{public}d, cooloff3, %{public}d, expire d, %{public}d, path, %{private}s",  COERCE_DOUBLE(136448771LL),  __p,  v59);
    int v44 = (char *)v43;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)",  "%s\n",  v43);
    if (v44 != buf) {
      free(v44);
    }
  }

  return sub_1002A5590(v37);
}

      if ((sub_100EAE040(a1 + 40, v11, &v57, v3) & 1) == 0)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        int v34 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,resample failed",  buf,  0xCu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_89;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        int v60 = 134349056;
        unsigned int v61 = v3;
        LODWORD(v55) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,resample failed",  &v60,  v55);
        int v36 = (char *)v35;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)",  "%s\n",  v35);
        goto LABEL_105;
      }

      if ((sub_100EACC08((double *)(a1 + 104), (uint64_t *)(a1 + 40), v3) & 1) == 0)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        int v37 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,candidate update failed",  buf,  0xCu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_89;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        int v60 = 134349056;
        unsigned int v61 = v3;
        LODWORD(v55) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,candidate update failed",  &v60,  v55);
        int v36 = (char *)v38;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)",  "%s\n",  v38);
        goto LABEL_105;
      }

      int v26 = *a2;
      int v27 = (std::__shared_weak_count *)a2[1];
      v56[0] = v26;
      v56[1] = (uint64_t)v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          unint64_t v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }

      int v30 = sub_100EAAEA0(a1 + 104, v56, (__int128 *)(a1 + 376));
      int v31 = v30;
      if (!v27) {
        goto LABEL_56;
      }
      int v32 = (unint64_t *)&v27->__shared_owners_;
      do
        unsigned int v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if ((v31 & 1) != 0) {
          goto LABEL_57;
        }
      }

      else
      {
LABEL_56:
        if ((v30 & 1) != 0)
        {
LABEL_57:
          if ((sub_100EAF910(a1, a3) & 1) != 0)
          {
            uint64_t v14 = 1LL;
LABEL_90:
            *(void *)buf = &v57;
            sub_100D73874((void ***)buf);
            return v14;
          }

          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10188A8E0);
          }
          char v39 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,extractSolution failed",  buf,  0xCu);
          }

          if (!sub_1002921D0(115, 2))
          {
LABEL_89:
            uint64_t v14 = 0LL;
            goto LABEL_90;
          }

          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10188A8E0);
          }
          int v60 = 134349056;
          unsigned int v61 = v3;
          LODWORD(v55) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,extractSolution failed",  &v60,  v55);
          int v36 = (char *)v40;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)",  "%s\n",  v40);
LABEL_105:
          if (v36 != buf) {
            free(v36);
          }
          goto LABEL_89;
        }
      }

      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      int v41 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,assessCandidates failed",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_89;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      int v60 = 134349056;
      unsigned int v61 = v3;
      LODWORD(v55) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,assessCandidates failed",  &v60,  v55);
      int v36 = (char *)v50;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)",  "%s\n",  v50);
      goto LABEL_105;
    }

    if (*(_BYTE *)(a1 + 604)) {
      goto LABEL_4;
    }
    if (*(double *)(a1 + 560) <= 0.0)
    {
      int v11 = 96;
      unint64_t v12 = 10;
    }

    else
    {
      unint64_t v18 = *(double *)(a1 + 472);
      int v11 = 96;
      unint64_t v12 = 10;
      if (v18 >= 0.0 && v18 < 0.001)
      {
        if (*(double *)(a3 + 424) <= 0.0)
        {
          if (*(_BYTE *)(a3 + 468))
          {
LABEL_4:
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10188A8E0);
            }
            int v7 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              char v8 = *(void *)(a1 + 384);
              uint64_t v9 = *(void *)(a1 + 472);
              unint64_t v10 = *(unsigned __int8 *)(a1 + 604);
              *(_DWORD *)buf = 134349568;
              *(void *)&buf[4] = v8;
              int v67 = 2050;
              uint64_t v68 = v9;
              int v69 = 1026;
              char v70 = v10;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,Reducing particles to half,speed,%{public}.1lf,static,%{public}d",  buf,  0x1Cu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_10188A8E0);
              }
              int v45 = *(double *)(a1 + 384);
              unsigned int v46 = *(void *)(a1 + 472);
              unsigned int v47 = *(unsigned __int8 *)(a1 + 604);
              int v60 = 134349568;
              unsigned int v61 = v45;
              uint64_t v62 = 2050;
              int v63 = v46;
              char v64 = 1026;
              uint64_t v65 = v47;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,Reducing particles to half,speed,%{public}.1lf,static,%{public}d",  &v60,  28);
              unsigned int v49 = (char *)v48;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)",  "%s\n",  v48);
              if (v49 != buf) {
                free(v49);
              }
            }

            int v11 = 48;
            unint64_t v12 = 5;
          }
        }

        else
        {
          int v19 = *(double *)(a3 + 336);
          if (v19 < 0.001 && v19 >= 0.0 || *(_BYTE *)(a3 + 468) != 0) {
            goto LABEL_4;
          }
        }
      }
    }

    if (*(_BYTE *)(a3 + 504)
      && *(_BYTE *)(a3 + 232)
      && *(void *)(a3 + 120)
      && *(unsigned __int8 *)(a3 + 761) == *(unsigned __int8 *)(a1 + 897))
    {
      int v22 = v58;
      do
      {
        if (v22 >= v59)
        {
          int v22 = sub_100D73E7C(&v57, a3 + 120);
        }

        else
        {
          sub_100D73FA0((uint64_t)&v59, v22, a3 + 120);
          v22 += 112LL;
        }

        uint64_t v58 = v22;
        --v12;
      }

      while (v12);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      int v23 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *(void *)(a1 + 384);
        uint64_t v25 = *(void *)(a3 + 176);
        *(_DWORD *)buf = 134349312;
        *(void *)&buf[4] = v24;
        int v67 = 2050;
        uint64_t v68 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,Added prior particle,score,%{public}.8lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        int v51 = *(double *)(a1 + 384);
        char v52 = *(void *)(a3 + 176);
        int v60 = 134349312;
        unsigned int v61 = v51;
        uint64_t v62 = 2050;
        int v63 = v52;
        LODWORD(v55) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,Added prior particle,score,%{public}.8lf",  &v60,  v55);
        unint64_t v54 = (char *)v53;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)",  "%s\n",  v53);
        if (v54 != buf) {
          free(v54);
        }
      }
    }

    goto LABEL_47;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  int v13 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "CLMMPED,%{public}.1lf,Unexpected, geometry is null",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v60 = 134349056;
    unsigned int v61 = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMMPED,%{public}.1lf,Unexpected, geometry is null",  &v60,  12);
    int v44 = (char *)v43;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)",  "%s\n",  v43);
    if (v44 != buf) {
      free(v44);
    }
  }

  return 0LL;
}

    if (v6 == v7) {
      goto LABEL_48;
    }
LABEL_101:
    sub_10127D504();
  }

  if (v6 <= 917515)
  {
    if (v6 != 786448)
    {
      int v7 = 851980;
      goto LABEL_47;
    }

  int v44 = *DataValue;
  if (v44 >= 4 && v9 == 47 || v44 == 3 && v9 == 49)
  {
    DWORD2(v113) = *(unsigned __int16 *)(DataValue + 45);
    if ((*(_WORD *)(DataValue + 1) & 0x80) == 0)
    {
      *(void *)&int v109 = *(void *)(DataValue + 3);
      int v45 = (float)*(__int16 *)(DataValue + 13) / 32767.0;
      unsigned int v46 = (float)*(__int16 *)(DataValue + 15) / 32767.0;
      *(float *)buf = (float)*(__int16 *)(DataValue + 11) / 32767.0;
      *(float *)&buf[4] = v45;
      v12.f32[0] = sqrtf( fmaxf( (float)((float)(1.0 - (float)(*(float *)buf * *(float *)buf)) - (float)(v45 * v45))
                     - (float)(v46 * v46),
                       0.0));
      *(float *)&buf[8] = v46;
      *(_DWORD *)&buf[12] = v12.i32[0];
      sub_100833700((float32x4_t *)buf, v12);
      int v104 = *(_OWORD *)buf;
      unsigned int v47 = (float)*(__int16 *)(DataValue + 31) * 0.00097656;
      unsigned int v48 = (float)*(__int16 *)(DataValue + 33) * 0.00097656;
      *((float *)&v106 + 2) = (float)*(__int16 *)(DataValue + 29) * 0.00097656;
      *((float *)&v106 + 3) = v47;
      unsigned int v107 = v48;
      unsigned int v49 = (float)*(__int16 *)(DataValue + 17) * 0.0019531;
      uint64_t v50 = (float)*(__int16 *)(DataValue + 21);
      int v51 = (float)*(__int16 *)(DataValue + 19) * 0.0019531;
      *(float *)&int v105 = v49;
      *((float *)&v105 + 1) = v51;
      *((float *)&v105 + 2) = v50 * 0.0019531;
      if (v44 < 5)
      {
        *(_WORD *)((char *)&v115 + 1) = 0;
        LOWORD(v49) = *(_WORD *)(DataValue + 23);
        LOWORD(v51) = *(_WORD *)(DataValue + 25);
        LOWORD(v50) = *(_WORD *)(DataValue + 27);
        *((float *)&v105 + 3) = (float)LODWORD(v49) * 0.00000011921;
        *(float *)&int v106 = (float)LODWORD(v51) * 0.00000011921;
        *((float *)&v106 + 1) = (float)LODWORD(v50) * 0.00000011921;
      }

      else
      {
        LOWORD(v49) = *(_WORD *)(DataValue + 23);
        *((float *)&v105 + 3) = (float)LODWORD(v49) * 0.00000011921;
        *(float *)&int v106 = *((float *)&v105 + 3);
        *((float *)&v106 + 1) = *((float *)&v105 + 3);
        if (v44 == 5)
        {
          char v52 = 0;
          uint64_t v53 = 0;
        }

        else
        {
          uint64_t v53 = DataValue[25];
          char v52 = 1;
        }

        BYTE2(v115) = v52;
        BYTE1(v115) = v53;
        if (DataValue[26] || DataValue[27] || (LOBYTE(v58) = DataValue[28], (_BYTE)v58)) {
          uint64_t v58 = (*(unsigned __int16 *)(DataValue + 1) >> 9) & 1;
        }
        LOBYTE(v115) = v58;
        *((float *)&v114[1] + 1) = (float)(char)DataValue[26] / 127.0;
        *((float *)&v114[1] + 2) = (float)(char)DataValue[27] / 127.0;
        *((float *)&v114[1] + 3) = (float)(char)DataValue[28] / 127.0;
      }

      unint64_t v59 = (float)*(__int16 *)(DataValue + 37) * 0.00097656;
      int v60 = (float)*(__int16 *)(DataValue + 39) * 0.00097656;
      *(float *)&unsigned int v111 = (float)*(__int16 *)(DataValue + 35) * 0.00097656;
      *((float *)&v111 + 1) = v59;
      v112 = v60;
      LODWORD(v113) = *(_DWORD *)(DataValue + 41);
      unsigned int v61 = *(unsigned __int16 *)(DataValue + 1);
      uint64_t v62 = (v61 >> 14) & 2;
      if ((v61 & 0x4000) != 0) {
        uint64_t v62 = 1;
      }
      DWORD1(v113) = v62;
      int v108 = v61 & 0x3FFF;
      int v63 = *(_DWORD *)(a1 + 268);
      uint64_t v65 = v63 == 4 || v63 == 2;
      HIBYTE(v115) = v65;
      unint64_t v66 = (__int128 *)(a1 + 104);
      int v67 = *(_DWORD *)(a1 + 204);
      if (DWORD2(v113) && DWORD2(v113) == v67)
      {
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        uint64_t v68 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          int v69 = *(_DWORD *)(a1 + 204);
          char v70 = *(void *)(a1 + 160);
          *(_DWORD *)buf = 67240960;
          *(_DWORD *)&buf[4] = v69;
          *(_WORD *)&buf[8] = 2050;
          *(void *)&buf[10] = v70;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = DWORD2(v113);
          *(_WORD *)&buf[24] = 2050;
          *(void *)&buf[26] = v109;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] Received duplicate packets: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,% {public}d,currSensorTime,%{public}llu",  buf,  0x22u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_129;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        uint64_t v71 = *(_DWORD *)(a1 + 204);
        unint64_t v72 = *(void *)(a1 + 160);
        unsigned int v116 = 67240960;
        *(_DWORD *)int v117 = v71;
        *(_WORD *)&v117[4] = 2050;
        *(void *)&v117[6] = v72;
        *(_WORD *)&v117[14] = 1026;
        *(_DWORD *)&v117[16] = DWORD2(v113);
        *(_WORD *)&v117[20] = 2050;
        *(void *)&v117[22] = v109;
        LODWORD(v103) = 34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[AccessoryDeviceMotion] Received duplicate packets: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{p ublic}d,currSensorTime,%{public}llu",  &v116,  v103);
      }

      else if (DWORD2(v113) < 3 || DWORD2(v113) >= v67)
      {
        if ((unint64_t)v109 < 0xC351 || (unint64_t)v109 >= *(void *)(a1 + 160))
        {
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_1018933E8);
          }
          int v85 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
          {
            unsigned int v86 = *(_DWORD *)(a1 + 204);
            int v87 = *(void *)(a1 + 168);
            *(_DWORD *)buf = 67240960;
            *(_DWORD *)&buf[4] = v86;
            *(_WORD *)&buf[8] = 2050;
            *(void *)&buf[10] = v87;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = DWORD2(v113);
            *(_WORD *)&buf[24] = 2050;
            *(void *)&buf[26] = *((void *)&v109 + 1);
            _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] TimeSynced timestamp went backward: lastSeq,%{public}d,lastTimestamp,%{public}.3f, currSeq,%{public}d,currTimestamp,%{public}.3f",  buf,  0x22u);
          }

          if (!sub_1002921D0(115, 0)) {
            goto LABEL_129;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_1018933E8);
          }
          v101 = *(_DWORD *)(a1 + 204);
          v102 = *(void *)(a1 + 168);
          unsigned int v116 = 67240960;
          *(_DWORD *)int v117 = v101;
          *(_WORD *)&v117[4] = 2050;
          *(void *)&v117[6] = v102;
          *(_WORD *)&v117[14] = 1026;
          *(_DWORD *)&v117[16] = DWORD2(v113);
          *(_WORD *)&v117[20] = 2050;
          *(void *)&v117[22] = *((void *)&v109 + 1);
          LODWORD(v103) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[AccessoryDeviceMotion] TimeSynced timestamp went backward: lastSeq,%{public}d,lastTimestamp,%{public}.3f,cu rrSeq,%{public}d,currTimestamp,%{public}.3f",  &v116,  v103);
        }

        else
        {
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_1018933E8);
          }
          int v79 = (os_log_s *)qword_1019345C8;
          if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v80 = *(_DWORD *)(a1 + 204);
            uint64_t v81 = *(void *)(a1 + 160);
            *(_DWORD *)buf = 67240960;
            *(_DWORD *)&buf[4] = v80;
            *(_WORD *)&buf[8] = 2050;
            *(void *)&buf[10] = v81;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = DWORD2(v113);
            *(_WORD *)&buf[24] = 2050;
            *(void *)&buf[26] = v109;
            _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] Received backward W2 GTB timestamp: lastSeq,%{public}d,lastSensorTime,%{public}llu ,currSeq,%{public}d,currSensorTime,%{public}llu",  buf,  0x22u);
          }

          if (!sub_1002921D0(115, 0)) {
            goto LABEL_129;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019345C0 != -1) {
            dispatch_once(&qword_1019345C0, &stru_1018933E8);
          }
          v82 = *(_DWORD *)(a1 + 204);
          int v83 = *(void *)(a1 + 160);
          unsigned int v116 = 67240960;
          *(_DWORD *)int v117 = v82;
          *(_WORD *)&v117[4] = 2050;
          *(void *)&v117[6] = v83;
          *(_WORD *)&v117[14] = 1026;
          *(_DWORD *)&v117[16] = DWORD2(v113);
          *(_WORD *)&v117[20] = 2050;
          *(void *)&v117[22] = v109;
          LODWORD(v103) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[AccessoryDeviceMotion] Received backward W2 GTB timestamp: lastSeq,%{public}d,lastSensorTime,%{public}llu,c urrSeq,%{public}d,currSensorTime,%{public}llu",  &v116,  v103);
        }
      }

      else
      {
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        uint64_t v74 = (os_log_s *)qword_1019345C8;
        if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
        {
          int v75 = *(_DWORD *)(a1 + 204);
          char v76 = *(void *)(a1 + 160);
          *(_DWORD *)buf = 67240960;
          *(_DWORD *)&buf[4] = v75;
          *(_WORD *)&buf[8] = 2050;
          *(void *)&buf[10] = v76;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = DWORD2(v113);
          *(_WORD *)&buf[24] = 2050;
          *(void *)&buf[26] = v109;
          _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] Received backward sequence number: lastSeq,%{public}d,lastSensorTime,%{public}llu,cu rrSeq,%{public}d,currSensorTime,%{public}llu",  buf,  0x22u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_129;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        uint64_t v77 = *(_DWORD *)(a1 + 204);
        unint64_t v78 = *(void *)(a1 + 160);
        unsigned int v116 = 67240960;
        *(_DWORD *)int v117 = v77;
        *(_WORD *)&v117[4] = 2050;
        *(void *)&v117[6] = v78;
        *(_WORD *)&v117[14] = 1026;
        *(_DWORD *)&v117[16] = DWORD2(v113);
        *(_WORD *)&v117[20] = 2050;
        *(void *)&v117[22] = v109;
        LODWORD(v103) = 34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[AccessoryDeviceMotion] Received backward sequence number: lastSeq,%{public}d,lastSensorTime,%{public}llu,curr Seq,%{public}d,currSensorTime,%{public}llu",  &v116,  v103);
      }

      int v84 = (char *)v73;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)",  "%s\n",  v73);
      if (v84 != buf) {
        free(v84);
      }
LABEL_129:
      if (v66 != &v104) {
        *unint64_t v66 = v104;
      }
      int v88 = v106;
      *(_OWORD *)(a1 + 120) = v105;
      *(_OWORD *)(a1 + 136) = v88;
      *(float *)(a1 + 152) = v107;
      *(_WORD *)(a1 + 156) = v108;
      *(_OWORD *)(a1 + 160) = v109;
      *(double *)(a1 + 176) = v110;
      *(void *)(a1 + 184) = v111;
      *(float *)(a1 + 192) = v112;
      int v89 = v113;
      unsigned int v90 = v114[0];
      v91 = v114[1];
      *(_DWORD *)(a1 + 244) = v115;
      *(_OWORD *)(a1 + 228) = v91;
      *(_OWORD *)(a1 + 212) = v90;
      *(_OWORD *)(a1 + 196) = v89;
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      v92 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67241216;
        *(_DWORD *)&buf[4] = DWORD2(v113);
        *(_WORD *)&buf[8] = 2050;
        *(void *)&buf[10] = v109;
        *(_WORD *)&buf[18] = 2050;
        *(void *)&buf[20] = *((void *)&v109 + 1);
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v114[0];
        v147[0] = 2050;
        *(void *)&v147[1] = *(void *)((char *)v114 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_INFO,  "[AccessoryDeviceMotion] seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,TimeSyncStatus,%{publ ic}u,latency,%{public}20.20f",  buf,  0x2Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        unsigned int v116 = 67241216;
        *(_DWORD *)int v117 = DWORD2(v113);
        *(_WORD *)&v117[4] = 2050;
        *(void *)&v117[6] = v109;
        *(_WORD *)&v117[14] = 2050;
        *(void *)&v117[16] = *((void *)&v109 + 1);
        *(_WORD *)&v117[24] = 1026;
        *(_DWORD *)&v117[26] = v114[0];
        v118[0] = 2050;
        *(void *)&v118[1] = *(void *)((char *)v114 + 12);
        LODWORD(v103) = 44;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  1LL,  "[AccessoryDeviceMotion] seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,TimeSyncStatus,%{publ ic}u,latency,%{public}20.20f",  &v116,  v103);
        int v95 = (char *)v94;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)",  "%s\n",  v94);
        if (v95 != buf) {
          free(v95);
        }
      }

      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      v93 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134353664;
        *(double *)&buf[4] = *(float *)&v104;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = *((float *)&v104 + 1);
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = *((float *)&v104 + 2);
        *(_WORD *)&buf[32] = 2050;
        *(double *)v147 = *((float *)&v104 + 3);
        v147[4] = 2050;
        *(double *)&v147[5] = *(float *)&v105;
        v147[9] = 2050;
        v148 = *((float *)&v105 + 1);
        v149 = 2050;
        v150 = *((float *)&v105 + 2);
        v151 = 2050;
        v152 = *((float *)&v105 + 3);
        v153 = 2050;
        v154 = *(float *)&v106;
        v155 = 2050;
        v156 = *((float *)&v106 + 1);
        v157 = 2050;
        v158 = *((float *)&v106 + 2);
        v159 = 2050;
        v160 = *((float *)&v106 + 3);
        v161 = 2050;
        v162 = v107;
        v163 = 2050;
        v164 = *(float *)&v111;
        v165 = 2050;
        v166 = *((float *)&v111 + 1);
        v167 = 2050;
        v168 = v112;
        v169 = 1026;
        v170 = v108;
        v171 = 2050;
        v172 = *(float *)&v113;
        v173 = 1026;
        v174 = DWORD1(v113);
        _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEBUG,  "[AccessoryDeviceMotion] q.x,%{public}20.20f,q.y,%{public}20.20f,q.z,%{public}20.20f,q.w,%{public}20.20f,rotati onRate.x,%{public}20.20f,rotationRate.y,%{public}20.20f,rotationRate.z,%{public}20.20f,variance.x,%{public}20. 20f,variance.y,%{public}20.20f,variance.z,%{public}20.20f,userAccel.x,%{public}20.20f,userAccel.y,%{public}20. 20f,userAccel.z,%{public}20.20f,filteredAccel.x,%{public}20.20f,filteredAccel.y,%{public}20.20f,filteredAccel. z,%{public}20.20f,status,%{public}04x,quiescentNoise,%{public}20.20f,quiescentMode,%{public}d",  buf,  0xB8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_1018933E8);
        }
        unsigned int v116 = 134353664;
        *(double *)int v117 = *(float *)&v104;
        *(_WORD *)&v117[8] = 2050;
        *(double *)&v117[10] = *((float *)&v104 + 1);
        *(_WORD *)&v117[18] = 2050;
        *(double *)&v117[20] = *((float *)&v104 + 2);
        *(_WORD *)&v117[28] = 2050;
        *(double *)uint64_t v118 = *((float *)&v104 + 3);
        v118[4] = 2050;
        *(double *)&v118[5] = *(float *)&v105;
        v118[9] = 2050;
        v119 = *((float *)&v105 + 1);
        v120 = 2050;
        v121 = *((float *)&v105 + 2);
        v122 = 2050;
        v123 = *((float *)&v105 + 3);
        v124 = 2050;
        v125 = *(float *)&v106;
        v126 = 2050;
        v127 = *((float *)&v106 + 1);
        v128 = 2050;
        v129 = *((float *)&v106 + 2);
        v130 = 2050;
        v131 = *((float *)&v106 + 3);
        v132 = 2050;
        v133 = v107;
        v134 = 2050;
        v135 = *(float *)&v111;
        v136 = 2050;
        v137 = *((float *)&v111 + 1);
        v138 = 2050;
        v139 = v112;
        v140 = 1026;
        v141 = v108;
        v142 = 2050;
        v143 = *(float *)&v113;
        v144 = 1026;
        v145 = DWORD1(v113);
        LODWORD(v103) = 184;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "[AccessoryDeviceMotion] q.x,%{public}20.20f,q.y,%{public}20.20f,q.z,%{public}20.20f,q.w,%{public}20.20f,rotati onRate.x,%{public}20.20f,rotationRate.y,%{public}20.20f,rotationRate.z,%{public}20.20f,variance.x,%{public}20. 20f,variance.y,%{public}20.20f,variance.z,%{public}20.20f,userAccel.x,%{public}20.20f,userAccel.y,%{public}20. 20f,userAccel.z,%{public}20.20f,filteredAccel.x,%{public}20.20f,filteredAccel.y,%{public}20.20f,filteredAccel. z,%{public}20.20f,status,%{public}04x,quiescentNoise,%{public}20.20f,quiescentMode,%{public}d",  &v116,  v103);
        unsigned int v97 = (char *)v96;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)",  "%s\n",  v96);
        if (v97 != buf) {
          free(v97);
        }
      }

      sub_100FD5D34(a1, (uint64_t)&v104);
      return;
    }

    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    unint64_t v54 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "[AccessoryDeviceMotion] Invalid IMU error on accessory",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      LOWORD(v116) = 0;
      LODWORD(v103) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "[AccessoryDeviceMotion] Invalid IMU error on accessory",  &v116,  v103);
LABEL_71:
      char v57 = (char *)v55;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)",  "%s\n",  v55);
      if (v57 != buf) {
        free(v57);
      }
    }
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_1018933E8);
    }
    int v56 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(void *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_FAULT,  "[AccessoryDeviceMotion] Invalid accessory device motion packet size %{public}ld and version %{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_1018933E8);
      }
      unsigned int v116 = 134349312;
      *(void *)int v117 = v9;
      *(_WORD *)&v117[8] = 1026;
      *(_DWORD *)&v117[10] = v44;
      LODWORD(v103) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  17LL,  "[AccessoryDeviceMotion] Invalid accessory device motion packet size %{public}ld and version %{public}d",  &v116,  v103);
      goto LABEL_71;
    }
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  char v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000000LL) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 9u);
  int v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }

  uint64_t v9 = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 72) = v9;
  char v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000000LL) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0xAu);
  int v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }

  int v22 = *(void *)(a2 + 296);
  v10 |= 0x200u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 296) = v22;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80) == 0)
  {
LABEL_15:
    if ((v9 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  if ((*(_DWORD *)(a2 + 112) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 112) = v3 | 0x10;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

  int v13 = *(_BYTE *)(a2 + 96);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 96) = v13;
  char v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "stanceProbability", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
LABEL_49:
    PB::TextFormatter::format(this, "verticalRotationRateMean", *(float *)(a1 + 84));
    if ((*(_DWORD *)(a1 + 100) & 0x10000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 0x16u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 72), 0x18u);
  }

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        int v21 = operator new(0xA8uLL);
        uint64_t v24 = sub_1010F1358((uint64_t)v21);
        uint64_t v25 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v21;
        if (v25)
        {
          (*(void (**)(uint64_t, double))(*(void *)v25 + 8LL))(v25, v24);
          int v21 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v40, v22, v23)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v40);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      char v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 8) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  char v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x14u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  int v19 = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 212) |= 0x20000u;
  *(_DWORD *)(a1 + 164) = v19;
  unint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x10000) == 0)
  {
LABEL_18:
    if ((v10 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "currentWindowMean", *(float *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  int v11 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 12) = v11;
  char v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "isPlanarTp", *(_BYTE *)(a1 + 103));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x12u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

  uint64_t result = *(float *)(a2 + 84);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 84) = result;
  char v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "kNumAB", *(_DWORD *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x10u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }

  int v19 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 132) = v3;
  *(void *)(result + 32) = v19;
  char v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "lastDetectedTransitionTimeStart", *(void *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 124), 0xCAu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }

  int v15 = *(void *)(a2 + 32);
  v3 |= 8uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 32) = v15;
  char v2 = *(void *)(a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "debugMaxTimeBetweenAccelSample", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0xDu);
  int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(void *)(a1 + 8) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 8) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 16) = v30;
      }

      else if ((_DWORD)v20 == 1)
      {
        int v21 = operator new(0xB8uLL);
        sub_10117CCA4((uint64_t)v21);
        uint64_t v24 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v21;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          int v21 = *(void **)(a1 + 8);
        }

        if (!PB::Reader::placeMark(this, v39, v22, v23)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v39);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      char v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  char v2 = *(void *)(a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "currentPace", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 8u);
  int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  char v8 = *(_DWORD *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 92) = v8;
  char v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
LABEL_49:
    PB::TextFormatter::format(this, "variant", *(_DWORD *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 124) & 0x400000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x16u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 116), 0x18u);
  }

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  char v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x100) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "rateScalingFactor", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x13u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }

  uint64_t v14 = *(_DWORD *)(a2 + 160);
  v3 |= 0x200000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 160) = v14;
  char v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "oscTrim", *(_DWORD *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0xCu);
  int v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 8) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  char v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xFu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  uint64_t result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 160) = result;
  char v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "userAccelMaxY", *(double *)(a1 + 160));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184), 0x15u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }

  char v8 = *(_DWORD *)(a2 + 152);
  v3 |= 0x1000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 152) = v8;
  char v2 = *(void *)(a2 + 212);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "epochMaxTimestamp", *(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 6u);
  int v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(void *)(a1 + 16) = v26;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      char v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(void *)(a1 + 8) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 16) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 120) = result;
  char v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ95", *(double *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0x10u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 72) = result;
  char v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x400) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "allBoutsStepLengthEntropy5thTo95th", *(double *)(a1 + 152));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 0x14u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "isOdometerDistance", *(_BYTE *)(a1 + 148));
  if ((*(_DWORD *)(a1 + 152) & 0x400000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "isOdometerPace", *(_BYTE *)(a1 + 149));
LABEL_19:
  int v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))( v7,  this,  "movementStats");
  }
  char v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "paceSource", *(_DWORD *)(a1 + 128));
    char v8 = *(_DWORD *)(a1 + 152);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_51;
    }
  }

  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "pedometerArmConstrainedState", *(_DWORD *)(a1 + 132));
  char v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }

        *(void *)(a1 + 8) = v30;
      }

      else if ((_DWORD)v20 == 1)
      {
        int v21 = operator new(0x28uLL);
        sub_1010DF2B4((uint64_t)v21);
        uint64_t v24 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v21;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          int v21 = *(void **)(a1 + 16);
        }

        if (!PB::Reader::placeMark(this, v39, v22, v23)
          || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v21 + 16LL))(v21, this) & 1) == 0)
        {
          return 0LL;
        }

        PB::Reader::recallMark(this, v39);
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
      }

      char v2 = *((void *)this + 1);
      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t result = *(float *)(a2 + 88);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 88) = result;
  char v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100000) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "pressureFFTBin1", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x14u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

        *(void *)(a1 + 8) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  int v21 = *(_BYTE *)(a2 + 111);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 111) = v21;
  char v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "typeYouth", *(_DWORD *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x13u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }

  int v26 = *(void *)(a2 + 104);
  v5 |= 0x1000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 104) = v26;
  int v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "notificationType", *(_DWORD *)(a1 + 152));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0xFu);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

  char v16 = *(_DWORD *)(a2 + 208);
  v3 |= 0x20000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 208) = v16;
  char v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0xEu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 5u);
  int v4 = *(void *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  if ((*(_DWORD *)(a2 + 108) & 2) != 0) {
    goto LABEL_48;
  }
  return result;
}

        *(_DWORD *)(a1 + 16) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(void *)(a1 + 8) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 16) = v25;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        char v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          char v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        char v2 = *((void *)this + 1);
      }

      int v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    char v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      char v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  char v16 = *(_BYTE *)(a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 123) = v16;
  char v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "isInCorrelatedMotion", *(_BYTE *)(a1 + 124));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 125), 0xEu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }

  int v19 = *(_DWORD *)(a2 + 144);
  v6 |= 0x100000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 144) = v19;
  uint64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "centeredBoresight", *(_BYTE *)(a1 + 154));
  uint64_t v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 7u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }

  uint64_t v9 = *(_BYTE *)(a2 + 218);
  v3 |= 0x80000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 218) = v9;
  char v2 = *(void *)(a2 + 224);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "groundContactTimePace", *(double *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0xBu);
  int v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }

  uint64_t v20 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 72) = v20;
  char v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "kalmanEpsPedometer", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x12u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }

  int v22 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 72) = v22;
  char v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }

  PB::TextFormatter::format(this, "rotationTMaxZForwards", *(double *)(a1 + 144));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 0x14u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }