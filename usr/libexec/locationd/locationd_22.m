void sub_100A6A4DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_100A6A500@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = a2 + 8;
  unint64_t v4 = 0LL;
  if (result[1] != *result)
  {
    v3 = result;
    do
    {
      result = sub_1001145B0((uint64_t **)a2, &v4, (uint64_t *)&v4);
      ++v4;
    }

    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 5));
  }

  return result;
}

void sub_100A6A588(_Unwind_Exception *a1)
{
}

uint64_t sub_100A6A5A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  sub_100A6D710((uint64_t *)(a1 + 16), a3);
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(double *)(a1 + 144) = sub_100A6A638((uint64_t **)a1, (void *)(a1 + 16));
  return a1;
}

void sub_100A6A610(_Unwind_Exception *a1)
{
}

double sub_100A6A638(uint64_t **a1, void *a2)
{
  uint64_t v2 = a2[2];
  if (!v2) {
    return 0.0;
  }
  if (v2 == 1) {
    return 1.0;
  }
  v5 = a2 + 1;
  unint64_t v6 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    unint64_t v8 = 0LL;
    unint64_t v20 = (v2 - 1) * v2;
LABEL_39:
    unint64_t v25 = v20 >> 1;
    double result = 1.0;
    if (v8 != v25) {
      return (double)v8 / (double)v25;
    }
    return result;
  }

  unint64_t v8 = 0LL;
  do
  {
    v9 = (void *)v6[1];
    v10 = v9;
    v11 = v6;
    if (v9)
    {
      do
      {
        v12 = v10;
        v10 = (void *)*v10;
      }

      while (v10);
    }

    else
    {
      do
      {
        v12 = (void *)v11[2];
        BOOL v13 = *v12 == (void)v11;
        v11 = v12;
      }

      while (!v13);
    }

    if (v12 != v5)
    {
      do
      {
        uint64_t v14 = v6[4];
        uint64_t v15 = **a1;
        uint64_t v16 = v12[4];
        sub_100D2D9A4((uint64_t)buf);
        if (sub_100D2D43C( *(double *)(v15 + 96 * v14 + 8),  *(double *)(v15 + 96 * v14 + 16),  *(double *)(v15 + 96 * v16 + 8),  *(double *)(v15 + 96 * v16 + 16)) <= (double)(*(_DWORD *)(v15 + 96 * v16 + 48)
                                                           + *(_DWORD *)(v15 + 96 * v14 + 48)))
          ++v8;
        v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (void *)*v17;
          }

          while (v17);
        }

        else
        {
          do
          {
            v18 = (void *)v12[2];
            BOOL v13 = *v18 == (void)v12;
            v12 = v18;
          }

          while (!v13);
        }

        v12 = v18;
      }

      while (v18 != v5);
      v9 = (void *)v6[1];
    }

    if (v9)
    {
      do
      {
        v19 = v9;
        v9 = (void *)*v9;
      }

      while (v9);
    }

    else
    {
      do
      {
        v19 = (void *)v6[2];
        BOOL v13 = *v19 == (void)v6;
        unint64_t v6 = v19;
      }

      while (!v13);
    }

    unint64_t v6 = v19;
  }

  while (v19 != v5);
  unint64_t v20 = (a2[2] - 1LL) * a2[2];
  if (v8 <= v20 >> 1) {
    goto LABEL_39;
  }
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10186A648);
  }
  v21 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_FAULT,  "[WifiReachIntersection] pairwise intersection count is more than the total possibility; something is wrong.",
      buf,
      2u);
  }

  BOOL v22 = sub_1002921D0(115, 0);
  double result = 1.0;
  if (v22)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10186A648);
    }
    v26[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  17LL,  "[WifiReachIntersection] pairwise intersection count is more than the total possibility; something is wrong.",
      v26,
      2);
    v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static double CLWifiReachIntersection::ReachIntersection::computePairwiseIntersectionRatio(const std::shared_ptr<R eachIntersectionInputCentroids> &, const std::set<size_t> &)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
    return 1.0;
  }

  return result;
}

uint64_t sub_100A6A94C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136)) {
    return 1LL;
  }
  sub_1010DDBC0(&__p, "ff:ff:ff:ff:ff:ff");
  uint64_t v3 = sub_1007EBE44((uint64_t *)&__p);
  sub_100C3A480(v3, (uint64_t)v50);
  int v4 = *(unsigned __int8 *)(a1 + 136);
  __int128 v5 = v50[3];
  __int128 v6 = v50[4];
  __int128 v7 = v50[1];
  *(_OWORD *)(a1 + 72) = v50[2];
  *(_OWORD *)(a1 + 88) = v5;
  __int128 v8 = v50[5];
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 40) = v50[0];
  *(_OWORD *)(a1 + 56) = v7;
  if (!v4) {
    *(_BYTE *)(a1 + 136) = 1;
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__p);
  }
  __p = 0LL;
  v48 = 0LL;
  uint64_t v49 = 0LL;
  if (sub_100A6ACE0(a1, (uint64_t)&__p))
  {
    v44 = 0LL;
    v45 = 0LL;
    v46 = 0LL;
    v9 = __p;
    v10 = v48;
    if (__p == v48)
    {
      v33 = 0LL;
    }

    else
    {
      v11 = 0LL;
      do
      {
        v12 = (_OWORD *)(**(void **)a1 + 96LL * *v9);
        if (v11 >= v46)
        {
          v17 = (char *)v44;
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v44) >> 5);
          unint64_t v19 = v18 + 1;
          if (v18 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          if (0x5555555555555556LL * ((v46 - (_BYTE *)v44) >> 5) > v19) {
            unint64_t v19 = 0x5555555555555556LL * ((v46 - (_BYTE *)v44) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v46 - (_BYTE *)v44) >> 5) >= 0x155555555555555LL) {
            unint64_t v20 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            v21 = (char *)sub_1003F6AEC((uint64_t)&v46, v20);
            v17 = (char *)v44;
            v11 = v45;
          }

          else
          {
            v21 = 0LL;
          }

          BOOL v22 = &v21[96 * v18];
          __int128 v23 = v12[1];
          *(_OWORD *)BOOL v22 = *v12;
          *((_OWORD *)v22 + 1) = v23;
          __int128 v24 = v12[2];
          __int128 v25 = v12[3];
          __int128 v26 = v12[5];
          *((_OWORD *)v22 + 4) = v12[4];
          *((_OWORD *)v22 + 5) = v26;
          *((_OWORD *)v22 + 2) = v24;
          *((_OWORD *)v22 + 3) = v25;
          if (v11 == v17)
          {
            v32 = &v21[96 * v18];
          }

          else
          {
            v27 = &v21[96 * v18];
            do
            {
              __int128 v28 = *((_OWORD *)v11 - 5);
              *((_OWORD *)v27 - 6) = *((_OWORD *)v11 - 6);
              *((_OWORD *)v27 - 5) = v28;
              __int128 v29 = *((_OWORD *)v11 - 4);
              __int128 v30 = *((_OWORD *)v11 - 3);
              __int128 v31 = *((_OWORD *)v11 - 1);
              v32 = v27 - 96;
              *((_OWORD *)v27 - 2) = *((_OWORD *)v11 - 2);
              *((_OWORD *)v27 - 1) = v31;
              *((_OWORD *)v27 - 4) = v29;
              *((_OWORD *)v27 - 3) = v30;
              v11 -= 96;
              v27 -= 96;
            }

            while (v11 != v17);
          }

          v11 = v22 + 96;
          v44 = v32;
          v45 = v22 + 96;
          v46 = &v21[96 * v20];
          if (v17) {
            operator delete(v17);
          }
        }

        else
        {
          __int128 v13 = v12[1];
          *(_OWORD *)v11 = *v12;
          *((_OWORD *)v11 + 1) = v13;
          __int128 v14 = v12[2];
          __int128 v15 = v12[3];
          __int128 v16 = v12[5];
          *((_OWORD *)v11 + 4) = v12[4];
          *((_OWORD *)v11 + 5) = v16;
          *((_OWORD *)v11 + 2) = v14;
          *((_OWORD *)v11 + 3) = v15;
          v11 += 96;
        }

        v45 = v11;
        ++v9;
      }

      while (v9 != v10);
      v33 = (double *)v44;
    }

    sub_100A6A318((uint64_t *)&v44, v43, v33[1], v33[2]);
    double v41 = 0.0;
    double v42 = 0.0;
    uint64_t v40 = 0LL;
    if (sub_100A6B2E8((double **)v43, &v41, (double *)&v40))
    {
      uint64_t v37 = 0LL;
      sub_100D2D9A4((uint64_t)v50);
      sub_100D2E16C( (double *)v50,  (double *)&v39,  (double *)&v38,  (double *)&v37,  v33[1],  v33[2],  v33[3],  v42,  v41,  0.0);
      uint64_t v35 = v38;
      *(void *)(a1 + 48) = v39;
      *(void *)(a1 + 56) = v35;
      *(void *)(a1 + 72) = v40;
    }

    if (v43[0])
    {
      v43[1] = v43[0];
      operator delete(v43[0]);
    }

    if (v44)
    {
      v45 = (char *)v44;
      operator delete(v44);
    }
  }

  else if (v48 - (_BYTE *)__p == 8)
  {
    uint64_t v34 = **(void **)a1 + 96LL * *(void *)__p;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v34 + 8);
    *(void *)(a1 + 72) = *(void *)(v34 + 32);
  }

  BOOL v1 = sub_100C3A418((double *)(a1 + 40));
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }

  return v1;
}

void sub_100A6AC74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6ACE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t **)a1;
  if (*(double *)(a1 + 144) == 0.0)
  {
    sub_100A6D86C(buf, *(void **)(a1 + 16), (void *)(a1 + 24));
    uint64_t v3 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v3;
      operator delete(v3);
    }

    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(void *)(a2 + 16) = *(void *)&buf[16];
  }

  else
  {
    __int128 v5 = *(void **)(a1 + 16);
    v48 = (void *)(a1 + 24);
    if (v5 == (void *)(a1 + 24))
    {
      char v4 = 0;
    }

    else
    {
      uint64_t v6 = a2;
      char v4 = 0;
      uint64_t v46 = a2 + 16;
      do
      {
        unint64_t v7 = v5[4];
        uint64_t v8 = **v2;
        if (v7 >= 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - v8) >> 5))
        {
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_10186A648);
          }
          BOOL v22 = (os_log_s *)qword_101934868;
          if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
          {
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - **v2) >> 5);
            *(_DWORD *)buf = 134349312;
            *(void *)&buf[4] = v7;
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "[WifiReachIntersection] out of bound candidate index %{public}lu from %{public}lu input centroids",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934860 != -1) {
              dispatch_once(&qword_101934860, &stru_10186A648);
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)a1 + 8LL) - **(void **)a1) >> 5);
            int v51 = 134349312;
            unint64_t v52 = v7;
            __int16 v53 = 2050;
            unint64_t v54 = v36;
            LODWORD(v45) = 22;
            uint64_t v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  17LL,  "[WifiReachIntersection] out of bound candidate index %{public}lu from %{public}lu input centroids",  &v51,  v45);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiReachIntersection::ReachIntersection::removeCentroidIndicesWithNestedAps(std::vector<size_t> &)",  "%s\n",  v37);
            if (v37 != buf) {
              free(v37);
            }
          }

          uint64_t v6 = a2;
          uint64_t v2 = (uint64_t **)a1;
        }

        else
        {
          v9 = *(uint64_t **)v6;
          v10 = *(uint64_t **)(v6 + 8);
          uint64_t v47 = v5[4];
          if (*(uint64_t **)v6 == v10)
          {
LABEL_12:
            uint64_t v6 = a2;
            unint64_t v20 = *(void **)(a2 + 8);
            unint64_t v19 = *(void *)(a2 + 16);
            if ((unint64_t)v20 >= v19)
            {
              __int128 v24 = *(void **)a2;
              uint64_t v25 = ((uint64_t)v20 - *(void *)a2) >> 3;
              unint64_t v26 = v25 + 1;
              uint64_t v27 = v47;
              uint64_t v28 = v19 - (void)v24;
              if (v28 >> 2 > v26) {
                unint64_t v26 = v28 >> 2;
              }
              else {
                unint64_t v29 = v26;
              }
              if (v29)
              {
                __int128 v30 = (char *)sub_1000071BC(v46, v29);
                uint64_t v6 = a2;
                uint64_t v2 = (uint64_t **)a1;
                __int128 v24 = *(void **)a2;
                unint64_t v20 = *(void **)(a2 + 8);
                uint64_t v27 = v47;
              }

              else
              {
                __int128 v30 = 0LL;
              }

              __int128 v31 = &v30[8 * v25];
              *(void *)__int128 v31 = v27;
              v21 = v31 + 8;
              while (v20 != v24)
              {
                uint64_t v32 = *--v20;
                *((void *)v31 - 1) = v32;
                v31 -= 8;
              }

              *(void *)uint64_t v6 = v31;
              *(void *)(v6 + 8) = v21;
              *(void *)(v6 + 16) = &v30[8 * v29];
              if (v24) {
                operator delete(v24);
              }
            }

            else
            {
              *unint64_t v20 = v47;
              v21 = v20 + 1;
            }

            *(void *)(v6 + 8) = v21;
          }

          else
          {
            uint64_t v11 = v8 + 96 * v7;
            v12 = (double *)(v11 + 8);
            __int128 v13 = (double *)(v11 + 16);
            __int128 v14 = (int *)(v11 + 48);
            while (1)
            {
              uint64_t v15 = *v9;
              uint64_t v16 = **v2;
              sub_100D2D9A4((uint64_t)buf);
              double v17 = sub_100D2D43C(*v12, *v13, *(double *)(v16 + 96 * v15 + 8), *(double *)(v16 + 96 * v15 + 16));
              int v18 = *(_DWORD *)(v16 + 96 * v15 + 48);
              v4 |= v17 <= (double)(v18 + *v14);
              ++v9;
              uint64_t v2 = (uint64_t **)a1;
              if (v9 == v10) {
                goto LABEL_12;
              }
            }

            uint64_t v6 = a2;
            uint64_t v2 = (uint64_t **)a1;
          }
        }

        v33 = (void *)v5[1];
        if (v33)
        {
          do
          {
            uint64_t v34 = v33;
            v33 = (void *)*v33;
          }

          while (v33);
        }

        else
        {
          do
          {
            uint64_t v34 = (void *)v5[2];
            BOOL v35 = *v34 == (void)v5;
            __int128 v5 = v34;
          }

          while (!v35);
        }

        __int128 v5 = v34;
      }

      while (v34 != v48);
    }

    if ((unint64_t)v2[4] >= 2 && (v4 & 1) == 0)
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10186A648);
      }
      uint64_t v38 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
      {
        uint64_t v39 = v2[4];
        uint64_t v40 = v2[18];
        *(_DWORD *)buf = 134349312;
        *(void *)&buf[4] = v39;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_FAULT,  "[WifiReachIntersection] no intersection for %{public}zu centroid(s) after passing pairwise intersection check %{public}f > 0; something is wrong",
          buf,
          0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_10186A648);
        }
        unint64_t v42 = *(void *)(a1 + 32);
        unint64_t v43 = *(void *)(a1 + 144);
        int v51 = 134349312;
        unint64_t v52 = v42;
        __int16 v53 = 2050;
        unint64_t v54 = v43;
        LODWORD(v45) = 22;
        v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  17LL,  "[WifiReachIntersection] no intersection for %{public}zu centroid(s) after passing pairwise inter section check %{public}f > 0; something is wrong",
                        &v51,
                        v45);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiReachIntersection::ReachIntersection::removeCentroidIndicesWithNestedAps(std::vector<size_t> &)",  "%s\n",  v44);
        if (v44 != buf) {
          free(v44);
        }
      }

      char v4 = 0;
    }
  }

  return v4 & 1;
}

uint64_t sub_100A6B2E8(double **a1, double *a2, double *a3)
{
  double v7 = (*a1)[1];
  double v6 = (*a1)[2];
  double v8 = **a1;
  double v9 = v8 - v6;
  double v10 = v8 + v6;
  __p = 0LL;
  __int16 v53 = 0LL;
  unint64_t v54 = 0LL;
  uint64_t v49 = 0LL;
  v50 = 0LL;
  int v51 = 0LL;
  if (v8 - v6 <= v8 + v6)
  {
    uint64_t v11 = 0LL;
    do
    {
      if (v11 >= v54)
      {
        __int128 v13 = (double *)__p;
        uint64_t v14 = ((char *)v11 - (_BYTE *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        uint64_t v16 = (char *)v54 - (_BYTE *)__p;
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          int v18 = (char *)sub_1000071BC((uint64_t)&v54, v17);
          __int128 v13 = (double *)__p;
          uint64_t v11 = v53;
        }

        else
        {
          int v18 = 0LL;
        }

        unint64_t v19 = (double *)&v18[8 * v14];
        double *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          uint64_t v20 = *((void *)v11-- - 1);
          *((void *)v19-- - 1) = v20;
        }

        __p = v19;
        __int16 v53 = v12;
        unint64_t v54 = (double *)&v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }

      else
      {
        double *v11 = v9;
        v12 = v11 + 1;
      }

      __int16 v53 = v12;
      double v9 = v9 + 1.0;
      uint64_t v11 = v12;
    }

    while (v9 <= v10);
  }

  double v21 = v7 - v6;
  double v22 = v6 + v7;
  if (v21 <= v22)
  {
    unint64_t v23 = v50;
    do
    {
      if (v23 >= v51)
      {
        uint64_t v25 = (double *)v49;
        uint64_t v26 = ((char *)v23 - (_BYTE *)v49) >> 3;
        unint64_t v27 = v26 + 1;
        uint64_t v28 = (char *)v51 - (_BYTE *)v49;
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          __int128 v30 = (char *)sub_1000071BC((uint64_t)&v51, v29);
          uint64_t v25 = (double *)v49;
          unint64_t v23 = v50;
        }

        else
        {
          __int128 v30 = 0LL;
        }

        __int128 v31 = (double *)&v30[8 * v26];
        *__int128 v31 = v21;
        __int128 v24 = v31 + 1;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23-- - 1);
          *((void *)v31-- - 1) = v32;
        }

        uint64_t v49 = v31;
        v50 = v24;
        int v51 = (double *)&v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }

      else
      {
        double *v23 = v21;
        __int128 v24 = v23 + 1;
      }

      v50 = v24;
      double v21 = v21 + 1.0;
      unint64_t v23 = v24;
    }

    while (v21 <= v22);
  }

  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  double v44 = 0.0;
  double v45 = 0.0;
  if ((sub_100A6B8C4((double **)&__p, a1, (char **)&v46, &v45, 1) & 1) == 0)
  {
    uint64_t v42 = 0LL;
    uint64_t v34 = (double *)v46;
    if (!v46) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }

  int v33 = sub_100A6B8C4((double **)&v49, a1, (char **)&v46, &v44, 0);
  uint64_t v34 = (double *)v46;
  if (!v33)
  {
    uint64_t v42 = 0LL;
    if (!v46) {
      goto LABEL_50;
    }
LABEL_49:
    uint64_t v47 = v34;
    operator delete(v34);
    goto LABEL_50;
  }

  double v36 = v44;
  double v35 = v45;
  *a2 = v45;
  a2[1] = v36;
  double v37 = 0.0;
  if (v34 != v47)
  {
    uint64_t v38 = v34;
    do
    {
      double v39 = *v38;
      double v40 = v38[1];
      v38 += 2;
      double v41 = (v35 - v39) * (v35 - v39) + (v36 - v40) * (v36 - v40);
      if (v37 < v41) {
        double v37 = v41;
      }
    }

    while (v38 != v47);
  }

  *a3 = sqrt(v37) / 3.0;
  uint64_t v42 = 1LL;
  if (v34) {
    goto LABEL_49;
  }
LABEL_50:
  if (v49)
  {
    v50 = (double *)v49;
    operator delete(v49);
  }

  if (__p)
  {
    __int16 v53 = (double *)__p;
    operator delete(__p);
  }

  return v42;
}

void sub_100A6B610( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6B660(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1007EBE44((uint64_t *)__p);
  sub_100C3A480(v3, a1 + 168);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 264) = 0;
  sub_10081FD38(a1 + 272);
  return a1;
}

void sub_100A6B704( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100A6B758(uint64_t a1)
{
  return sub_10000AE14(a1);
}

uint64_t sub_100A6B788(uint64_t a1)
{
  return sub_100A6A94C(a1 + 16);
}

double *sub_100A6B790(double *result, uint64_t a2)
{
  uint64_t v3 = result;
  *((_WORD *)result + 132) = 0;
  if (!*((_BYTE *)result + 152)) {
    goto LABEL_14;
  }
  double result = (double *)sub_100C3A418(result + 7);
  if (!(_DWORD)result) {
    goto LABEL_14;
  }
  uint64_t v4 = **(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 8LL);
  if (v4 == v5)
  {
    BOOL v9 = 1;
  }

  else
  {
    uint64_t v6 = v4 + 96;
    do
    {
      sub_100D2D9A4((uint64_t)v14);
      double v7 = sub_100D2DBDC( v14,  *(double *)(a2 + 4),  *(double *)(a2 + 12),  *(double *)(v6 - 88),  *(double *)(v6 - 80),  0.0);
      double v8 = (double)*(int *)(v6 - 48);
      BOOL v9 = v7 < v8;
      BOOL v10 = v7 >= v8 || v6 == v5;
      v6 += 96LL;
    }

    while (!v10);
  }

  *((_BYTE *)v3 + 265) = v9;
  *((_BYTE *)v3 + 264) = v9;
  uint64_t v11 = sub_100F4CD98();
  double result = (double *)sub_100F4CF20((uint64_t)v11);
  if ((_DWORD)result)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v3 + 8LL) - **(void **)v3) >> 5);
    double result = (double *)sub_100F4CD98();
    if (v12 > *((int *)result + 1))
    {
LABEL_14:
      *((_BYTE *)v3 + 264) = 1;
LABEL_15:
      *((_OWORD *)v3 + 11) = *(_OWORD *)(a2 + 4);
      uint64_t v13 = *(void *)(a2 + 20);
      goto LABEL_16;
    }
  }

  if (*((_BYTE *)v3 + 264)) {
    goto LABEL_15;
  }
  if (!*((_BYTE *)v3 + 152)) {
    sub_100036CD8();
  }
  uint64_t v13 = *((void *)v3 + 11);
  *((_OWORD *)v3 + 11) = *((_OWORD *)v3 + 4);
LABEL_16:
  *((void *)v3 + 25) = v13;
  return result;
}

BOOL sub_100A6B8AC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 152) && sub_100C3A418((double *)(a1 + 56));
}

uint64_t sub_100A6B8C4(double **a1, double **a2, char **a3, double *a4, int a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6) {
    return 0LL;
  }
  BOOL v10 = a3 + 2;
  double v11 = 0.0;
  double v12 = 0.0;
  do
  {
    sub_100A6BCF8(a2, a5, (double **)__p, *v5);
    double v52 = 0.0;
    double v53 = 0.0;
    uint64_t v14 = a3[1];
    uint64_t v13 = a3[2];
    if (a5)
    {
      double v15 = *v5;
      double v16 = v52;
      if (v14 >= v13)
      {
        uint64_t v20 = *a3;
        uint64_t v21 = (v14 - *a3) >> 4;
        unint64_t v22 = v21 + 1;
        uint64_t v23 = v13 - v20;
        if (v23 >> 3 > v22) {
          unint64_t v22 = v23 >> 3;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_100037038((uint64_t)v10, v24);
          uint64_t v20 = *a3;
          uint64_t v14 = a3[1];
        }

        else
        {
          uint64_t v25 = 0LL;
        }

        uint64_t v32 = &v25[16 * v21];
        *(double *)uint64_t v32 = v15;
        *((double *)v32 + 1) = v16;
        int v33 = v32;
        if (v14 != v20)
        {
          do
          {
            *((_OWORD *)v33 - 1) = *((_OWORD *)v14 - 1);
            v33 -= 16;
            v14 -= 16;
          }

          while (v14 != v20);
          uint64_t v20 = *a3;
        }

        uint64_t v13 = &v25[16 * v24];
        unint64_t v17 = v32 + 16;
        *a3 = v33;
        a3[1] = v32 + 16;
        a3[2] = v13;
        if (v20)
        {
          operator delete(v20);
          uint64_t v13 = *v10;
        }
      }

      else
      {
        *(double *)uint64_t v14 = v15;
        *((double *)v14 + 1) = v16;
        unint64_t v17 = v14 + 16;
      }

      a3[1] = v17;
      double v34 = *v5;
      double v35 = v53;
      if (v17 >= v13)
      {
        double v36 = *a3;
        uint64_t v37 = (v17 - *a3) >> 4;
        unint64_t v38 = v37 + 1;
        uint64_t v39 = v13 - v36;
        if (v39 >> 3 > v38) {
          unint64_t v38 = v39 >> 3;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          double v41 = (char *)sub_100037038((uint64_t)v10, v40);
          double v36 = *a3;
          unint64_t v17 = a3[1];
        }

        else
        {
          double v41 = 0LL;
        }

        uint64_t v48 = (double *)&v41[16 * v37];
        double *v48 = v34;
        v48[1] = v35;
        uint64_t v49 = v48;
        if (v17 == v36) {
          goto LABEL_64;
        }
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v17 - 1);
          v49 -= 2;
          v17 -= 16;
        }

        while (v17 != v36);
LABEL_63:
        double v36 = *a3;
LABEL_64:
        double v44 = (char *)(v48 + 2);
        *a3 = (char *)v49;
        a3[1] = (char *)(v48 + 2);
        a3[2] = &v41[16 * v40];
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_66;
      }
    }

    else
    {
      double v18 = v52;
      double v19 = *v5;
      if (v14 >= v13)
      {
        uint64_t v26 = *a3;
        uint64_t v27 = (v14 - *a3) >> 4;
        unint64_t v28 = v27 + 1;
        uint64_t v29 = v13 - v26;
        if (v29 >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          __int128 v31 = (char *)sub_100037038((uint64_t)v10, v30);
          uint64_t v26 = *a3;
          uint64_t v14 = a3[1];
        }

        else
        {
          __int128 v31 = 0LL;
        }

        uint64_t v42 = &v31[16 * v27];
        *(double *)uint64_t v42 = v18;
        *((double *)v42 + 1) = v19;
        unint64_t v43 = v42;
        if (v14 != v26)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v14 - 1);
            v43 -= 16;
            v14 -= 16;
          }

          while (v14 != v26);
          uint64_t v26 = *a3;
        }

        uint64_t v13 = &v31[16 * v30];
        unint64_t v17 = v42 + 16;
        *a3 = v43;
        a3[1] = v42 + 16;
        a3[2] = v13;
        if (v26)
        {
          operator delete(v26);
          uint64_t v13 = *v10;
        }
      }

      else
      {
        *(double *)uint64_t v14 = v52;
        *((double *)v14 + 1) = v19;
        unint64_t v17 = v14 + 16;
      }

      a3[1] = v17;
      double v34 = v53;
      double v35 = *v5;
      if (v17 >= v13)
      {
        double v36 = *a3;
        uint64_t v45 = (v17 - *a3) >> 4;
        unint64_t v46 = v45 + 1;
        uint64_t v47 = v13 - v36;
        if (v47 >> 3 > v46) {
          unint64_t v46 = v47 >> 3;
        }
        else {
          unint64_t v40 = v46;
        }
        if (v40)
        {
          double v41 = (char *)sub_100037038((uint64_t)v10, v40);
          double v36 = *a3;
          unint64_t v17 = a3[1];
        }

        else
        {
          double v41 = 0LL;
        }

        uint64_t v48 = (double *)&v41[16 * v45];
        double *v48 = v34;
        v48[1] = v35;
        uint64_t v49 = v48;
        if (v17 == v36) {
          goto LABEL_64;
        }
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v17 - 1);
          v49 -= 2;
          v17 -= 16;
        }

        while (v17 != v36);
        goto LABEL_63;
      }
    }

    *(double *)unint64_t v17 = v34;
    *((double *)v17 + 1) = v35;
    double v44 = v17 + 16;
LABEL_66:
    a3[1] = v44;
    double v11 = v11 + (v53 - v52) * *v5;
    double v12 = v12 + v53 - v52;
LABEL_67:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    ++v5;
  }

  while (v5 != v6);
  if (v12 != 0.0)
  {
    *a4 = v11 / v12;
    return 1LL;
  }

  return 0LL;
}

void sub_100A6BCC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A6BCF8(double **a1@<X0>, int a2@<W1>, double **a3@<X8>, double a4@<D0>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    BOOL v9 = 0LL;
    BOOL v10 = (char **)(a3 + 2);
    do
    {
      double v11 = v4 + 1;
      if (a2) {
        double v12 = v4;
      }
      else {
        double v12 = v4 + 1;
      }
      double v13 = v4[2];
      if (vabdd_f64(*v12, a4) > v13) {
        goto LABEL_72;
      }
      double v14 = sqrt(v13 * v13 - (a4 - *v12) * (a4 - *v12));
      double v15 = *v10;
      if (a2)
      {
        double v16 = v14 + *v11;
        if (v9 >= (double *)v15)
        {
          double v19 = *a3;
          uint64_t v20 = ((char *)v9 - (char *)*a3) >> 4;
          unint64_t v21 = v20 + 1;
          uint64_t v22 = v15 - (char *)v19;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            unint64_t v24 = (char *)sub_100037038((uint64_t)v10, v23);
            double v19 = *a3;
            BOOL v9 = a3[1];
          }

          else
          {
            unint64_t v24 = 0LL;
          }

          __int128 v31 = (double *)&v24[16 * v20];
          *__int128 v31 = a4;
          v31[1] = v16;
          uint64_t v32 = v31;
          if (v9 != v19)
          {
            do
            {
              *((_OWORD *)v32 - 1) = *((_OWORD *)v9 - 1);
              v32 -= 2;
              v9 -= 2;
            }

            while (v9 != v19);
            double v19 = *a3;
          }

          double v15 = &v24[16 * v23];
          unint64_t v17 = v31 + 2;
          *a3 = v32;
          a3[1] = v31 + 2;
          a3[2] = (double *)v15;
          if (v19)
          {
            operator delete(v19);
            double v15 = *v10;
          }
        }

        else
        {
          double *v9 = a4;
          v9[1] = v16;
          unint64_t v17 = v9 + 2;
        }

        a3[1] = v17;
        double v33 = *v11 - v14;
        if (v17 >= (double *)v15)
        {
          double v34 = *a3;
          uint64_t v35 = ((char *)v17 - (char *)*a3) >> 4;
          unint64_t v36 = v35 + 1;
          uint64_t v37 = v15 - (char *)v34;
          if (v37 >> 3 > v36) {
            unint64_t v36 = v37 >> 3;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            uint64_t v39 = (char *)sub_100037038((uint64_t)v10, v38);
            double v34 = *a3;
            unint64_t v17 = a3[1];
          }

          else
          {
            uint64_t v39 = 0LL;
          }

          unint64_t v46 = (double *)&v39[16 * v35];
          double *v46 = a4;
          v46[1] = v33;
          uint64_t v47 = v46;
          if (v17 != v34)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v17 - 1);
              v47 -= 2;
              v17 -= 2;
            }

            while (v17 != v34);
            goto LABEL_68;
          }

          goto LABEL_69;
        }

        double *v17 = a4;
        v17[1] = v33;
      }

      else
      {
        double v18 = v14 + *v4;
        if (v9 >= (double *)v15)
        {
          uint64_t v25 = *a3;
          uint64_t v26 = ((char *)v9 - (char *)*a3) >> 4;
          unint64_t v27 = v26 + 1;
          uint64_t v28 = v15 - (char *)v25;
          if (v28 >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            unint64_t v30 = (char *)sub_100037038((uint64_t)v10, v29);
            uint64_t v25 = *a3;
            BOOL v9 = a3[1];
          }

          else
          {
            unint64_t v30 = 0LL;
          }

          unint64_t v40 = (double *)&v30[16 * v26];
          *unint64_t v40 = v18;
          v40[1] = a4;
          double v41 = v40;
          if (v9 != v25)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v9 - 1);
              v41 -= 2;
              v9 -= 2;
            }

            while (v9 != v25);
            uint64_t v25 = *a3;
          }

          double v15 = &v30[16 * v29];
          unint64_t v17 = v40 + 2;
          *a3 = v41;
          a3[1] = v40 + 2;
          a3[2] = (double *)v15;
          if (v25)
          {
            operator delete(v25);
            double v15 = *v10;
          }
        }

        else
        {
          double *v9 = v18;
          v9[1] = a4;
          unint64_t v17 = v9 + 2;
        }

        a3[1] = v17;
        double v42 = *v4 - v14;
        if (v17 >= (double *)v15)
        {
          double v34 = *a3;
          uint64_t v43 = ((char *)v17 - (char *)*a3) >> 4;
          unint64_t v44 = v43 + 1;
          uint64_t v45 = v15 - (char *)v34;
          if (v45 >> 3 > v44) {
            unint64_t v44 = v45 >> 3;
          }
          else {
            unint64_t v38 = v44;
          }
          if (v38)
          {
            uint64_t v39 = (char *)sub_100037038((uint64_t)v10, v38);
            double v34 = *a3;
            unint64_t v17 = a3[1];
          }

          else
          {
            uint64_t v39 = 0LL;
          }

          unint64_t v46 = (double *)&v39[16 * v43];
          double *v46 = v42;
          v46[1] = a4;
          uint64_t v47 = v46;
          if (v17 != v34)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v17 - 1);
              v47 -= 2;
              v17 -= 2;
            }

            while (v17 != v34);
LABEL_68:
            double v34 = *a3;
          }

void sub_100A6C0A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6C0DC(float64x2_t **a1, float64x2_t **a2, int a3, double *a4, double *a5)
{
  *a5 = -1.79769313e308;
  *a4 = 1.79769313e308;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    char v7 = 0;
  }

  else
  {
    char v7 = 0;
    double v8 = *a1;
    BOOL v9 = a1[1];
    do
    {
      if (v8 == v9)
      {
LABEL_7:
        double v12 = &v5->f64[1];
        if (!a3) {
          double v12 = (double *)v5;
        }
        double v13 = *v12;
        double v14 = *a5;
        if (*a5 < *v12) {
          double v14 = *v12;
        }
        *a5 = v14;
        if (v13 >= *a4) {
          double v13 = *a4;
        }
        *a4 = v13;
        char v7 = 1;
      }

      else
      {
        BOOL v10 = v8;
        while (1)
        {
          float64x2_t v11 = vsubq_f64(*v10, *v5);
          if (vaddvq_f64(vmulq_f64(v11, v11)) - v10[1].f64[0] * v10[1].f64[0] >= 0.01) {
            break;
          }
          BOOL v10 = (float64x2_t *)((char *)v10 + 24);
          if (v10 == v9) {
            goto LABEL_7;
          }
        }
      }

      ++v5;
    }

    while (v5 != v6);
  }

  return v7 & 1;
}

void sub_100A6C198(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 152) && (uint64_t v4 = (_OWORD *)(a1 + 56), sub_100C3A418((double *)(a1 + 56))))
  {
    if (!*(_BYTE *)(a1 + 152)) {
      sub_100036CD8();
    }
    __int128 v5 = v4[3];
    a2[2] = v4[2];
    a2[3] = v5;
    __int128 v6 = v4[5];
    a2[4] = v4[4];
    a2[5] = v6;
    __int128 v7 = v4[1];
    *a2 = *v4;
    a2[1] = v7;
  }

  else
  {
    sub_1010DDBC0(__p, "ff:ff:ff:ff:ff:ff");
    uint64_t v8 = sub_1007EBE44((uint64_t *)__p);
    sub_100C3A480(v8, (uint64_t)a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100A6C238( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100A6C254(uint64_t a1, _OWORD *a2)
{
  __int128 v4 = a2[7];
  __int128 v30 = a2[6];
  __int128 v31 = v4;
  v32[0] = a2[8];
  *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)((char *)a2 + 140);
  __int128 v5 = a2[3];
  __int128 v26 = a2[2];
  __int128 v27 = v5;
  __int128 v6 = a2[5];
  __int128 v28 = a2[4];
  __int128 v29 = v6;
  __int128 v7 = a2[1];
  *(_OWORD *)uint64_t v25 = *a2;
  *(_OWORD *)&v25[16] = v7;
  sub_100A6C198(a1, &v22);
  *(_OWORD *)&v25[4] = v23;
  *(void *)&v25[20] = v24;
  __int128 v8 = a2[5];
  __int128 v17 = a2[4];
  __int128 v18 = v8;
  __int128 v9 = a2[3];
  __int128 v15 = a2[2];
  __int128 v16 = v9;
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)a2 + 140);
  __int128 v10 = a2[8];
  __int128 v11 = a2[6];
  __int128 v20 = a2[7];
  *(_OWORD *)unint64_t v21 = v10;
  __int128 v19 = v11;
  __int128 v12 = a2[1];
  *(_OWORD *)double v14 = *a2;
  *(_OWORD *)&v14[16] = v12;
  *(_OWORD *)&v14[4] = *(_OWORD *)(a1 + 176);
  *(void *)&v14[20] = *(void *)(a1 + 200);
  sub_1008200B0( a1 + 272,  (uint64_t)a2,  (uint64_t)v25,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)a1 + 8LL) - **(void **)a1) >> 5),  (uint64_t)v14,  *(_BYTE *)(a1 + 264),  *(_BYTE *)(a1 + 265),  *(double *)(a1 + 160));
  return result;
}

void sub_100A6C358(uint64_t a1, __int128 *a2, char *a3)
{
}

BOOL sub_100A6C3AC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)sub_100F4CD98();
  if (v4 == 2)
  {
    BOOL result = sub_100C3A418((double *)(a1 + 168));
    if (result)
    {
      *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 176);
      *(void *)(a2 + 20) = *(void *)(a1 + 200);
      *(_WORD *)(a2 + 182) = 2;
      if (!*(_BYTE *)(a1 + 264)) {
        *(_DWORD *)(a2 + 156) = -1431655765 * ((*(void *)(*(void *)a1 + 8LL) - **(void **)a1) >> 5);
      }
      return 1LL;
    }
  }

  else if (v4 == 1 && *(_BYTE *)(a1 + 152))
  {
    BOOL result = sub_100C3A418((double *)(a1 + 56));
    if (result)
    {
      sub_100A6C198(a1, v6);
      *(_OWORD *)(a2 + 4) = *(_OWORD *)&v6[8];
      *(void *)(a2 + 20) = v7;
      *(_DWORD *)(a2 + 156) = -1431655765 * ((*(void *)(*(void *)a1 + 8LL) - **(void **)a1) >> 5);
      BOOL result = 1LL;
      *(_WORD *)(a2 + 182) = 1;
    }
  }

  else
  {
    return 0LL;
  }

  return result;
}

void sub_100A6C4A0(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100A6C4CC(uint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (uint64_t)a2 - v8;
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if ((signed __int32)a2[-3].n128_u32[0] < *(_DWORD *)(v8 + 48))
        {
          __n128 v147 = *(__n128 *)v8;
          __n128 v159 = *(__n128 *)(v8 + 16);
          __n128 v192 = *(__n128 *)(v8 + 64);
          __n128 v201 = *(__n128 *)(v8 + 80);
          __n128 v171 = *(__n128 *)(v8 + 32);
          __n128 v183 = *(__n128 *)(v8 + 48);
          __n128 v60 = a2[-1];
          __n128 v62 = a2[-4];
          __n128 v61 = a2[-3];
          *(__n128 *)(v8 + 64) = a2[-2];
          *(__n128 *)(v8 + 80) = v60;
          *(__n128 *)(v8 + 32) = v62;
          *(__n128 *)(v8 + 48) = v61;
          __n128 v63 = a2[-5];
          *(__n128 *)unint64_t v8 = a2[-6];
          *(__n128 *)(v8 + 16) = v63;
          a2[-6] = v147;
          a2[-5] = v159;
          a2[-2] = v192;
          a2[-1] = v201;
          a2[-4] = v171;
          a2[-3] = v183;
        }

        return;
      case 3LL:
        sub_100A6D070((__n128 *)v8, (__n128 *)(v8 + 96), a2 - 6);
        return;
      case 4LL:
        sub_100A6D5CC((__n128 *)v8, (__n128 *)(v8 + 96), (__n128 *)(v8 + 192), a2 - 6);
        return;
      case 5LL:
        v64 = (__n128 *)(v8 + 96);
        v65 = (__n128 *)(v8 + 192);
        v66 = (__n128 *)(v8 + 288);
        sub_100A6D5CC((__n128 *)v8, (__n128 *)(v8 + 96), (__n128 *)(v8 + 192), (__n128 *)(v8 + 288));
        if ((signed __int32)a2[-3].n128_u32[0] < *(_DWORD *)(v8 + 336))
        {
          __n128 v172 = *(__n128 *)(v8 + 320);
          __n128 v184 = *(__n128 *)(v8 + 336);
          __n128 v193 = *(__n128 *)(v8 + 352);
          __n128 v202 = *(__n128 *)(v8 + 368);
          __n128 v148 = *v66;
          __n128 v160 = *(__n128 *)(v8 + 304);
          __n128 v67 = a2[-5];
          __n128 *v66 = a2[-6];
          *(__n128 *)(v8 + 304) = v67;
          __n128 v68 = a2[-1];
          __n128 v70 = a2[-4];
          __n128 v69 = a2[-3];
          *(__n128 *)(v8 + 352) = a2[-2];
          *(__n128 *)(v8 + 368) = v68;
          *(__n128 *)(v8 + 320) = v70;
          *(__n128 *)(v8 + 336) = v69;
          a2[-6] = v148;
          a2[-5] = v160;
          a2[-2] = v193;
          a2[-1] = v202;
          a2[-4] = v172;
          a2[-3] = v184;
          if (*(_DWORD *)(v8 + 336) < *(_DWORD *)(v8 + 240))
          {
            __int128 v173 = *(_OWORD *)(v8 + 224);
            __int128 v185 = *(_OWORD *)(v8 + 240);
            __int128 v194 = *(_OWORD *)(v8 + 256);
            __int128 v203 = *(_OWORD *)(v8 + 272);
            __n128 v149 = *v65;
            __int128 v161 = *(_OWORD *)(v8 + 208);
            __int128 v71 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 240) = v71;
            __int128 v72 = *(_OWORD *)(v8 + 368);
            *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 272) = v72;
            __int128 v73 = *(_OWORD *)(v8 + 304);
            __n128 *v65 = *v66;
            *(_OWORD *)(v8 + 208) = v73;
            __n128 *v66 = v149;
            *(_OWORD *)(v8 + 304) = v161;
            *(_OWORD *)(v8 + 352) = v194;
            *(_OWORD *)(v8 + 368) = v203;
            *(_OWORD *)(v8 + 320) = v173;
            *(_OWORD *)(v8 + 336) = v185;
            if (*(_DWORD *)(v8 + 240) < *(_DWORD *)(v8 + 144))
            {
              __int128 v174 = *(_OWORD *)(v8 + 128);
              __int128 v186 = *(_OWORD *)(v8 + 144);
              __int128 v195 = *(_OWORD *)(v8 + 160);
              __int128 v204 = *(_OWORD *)(v8 + 176);
              __n128 v150 = *v64;
              __int128 v162 = *(_OWORD *)(v8 + 112);
              __int128 v74 = *(_OWORD *)(v8 + 240);
              *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 224);
              *(_OWORD *)(v8 + 144) = v74;
              __int128 v75 = *(_OWORD *)(v8 + 272);
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 256);
              *(_OWORD *)(v8 + 176) = v75;
              __int128 v76 = *(_OWORD *)(v8 + 208);
              __n128 *v64 = *v65;
              *(_OWORD *)(v8 + 112) = v76;
              __n128 *v65 = v150;
              *(_OWORD *)(v8 + 208) = v162;
              *(_OWORD *)(v8 + 256) = v195;
              *(_OWORD *)(v8 + 272) = v204;
              *(_OWORD *)(v8 + 224) = v174;
              *(_OWORD *)(v8 + 240) = v186;
              if (*(_DWORD *)(v8 + 144) < *(_DWORD *)(v8 + 48))
              {
                __n128 v151 = *(__n128 *)v8;
                __int128 v163 = *(_OWORD *)(v8 + 16);
                __int128 v196 = *(_OWORD *)(v8 + 64);
                __int128 v205 = *(_OWORD *)(v8 + 80);
                __int128 v175 = *(_OWORD *)(v8 + 32);
                __int128 v187 = *(_OWORD *)(v8 + 48);
                __int128 v77 = *(_OWORD *)(v8 + 176);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 160);
                *(_OWORD *)(v8 + 80) = v77;
                __int128 v78 = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 48) = v78;
                __int128 v79 = *(_OWORD *)(v8 + 112);
                *(__n128 *)unint64_t v8 = *v64;
                *(_OWORD *)(v8 + 16) = v79;
                __n128 *v64 = v151;
                *(_OWORD *)(v8 + 112) = v163;
                *(_OWORD *)(v8 + 160) = v196;
                *(_OWORD *)(v8 + 176) = v205;
                *(_OWORD *)(v8 + 128) = v175;
                *(_OWORD *)(v8 + 144) = v187;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 2303)
        {
          v80 = (__n128 *)(v8 + 96);
          BOOL v82 = (__n128 *)v8 == a2 || v80 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v82)
            {
              uint64_t v83 = 0LL;
              v84 = (_OWORD *)v8;
              do
              {
                v85 = v80;
                int v86 = *((_DWORD *)v84 + 36);
                if (v86 < *((_DWORD *)v84 + 12))
                {
                  __n128 v164 = v85[1];
                  __n128 v176 = v85[2];
                  __n128 v152 = *v85;
                  __int128 v215 = *(_OWORD *)((char *)v84 + 148);
                  __int128 v221 = *(_OWORD *)((char *)v84 + 164);
                  __int128 v87 = v84[11];
                  uint64_t v88 = v83;
                  HIDWORD(v221) = v87;
                  while (1)
                  {
                    v89 = (_OWORD *)(v8 + v88);
                    __int128 v90 = *(_OWORD *)(v8 + v88 + 48);
                    v89[8] = *(_OWORD *)(v8 + v88 + 32);
                    v89[9] = v90;
                    __int128 v91 = *(_OWORD *)(v8 + v88 + 80);
                    v89[10] = *(_OWORD *)(v8 + v88 + 64);
                    v89[11] = v91;
                    __int128 v92 = *(_OWORD *)(v8 + v88 + 16);
                    v89[6] = *(_OWORD *)(v8 + v88);
                    v89[7] = v92;
                    if (!v88) {
                      break;
                    }
                    v88 -= 96LL;
                    if (v86 >= *((_DWORD *)v89 - 12))
                    {
                      uint64_t v93 = v8 + v88 + 96;
                      goto LABEL_78;
                    }
                  }

                  uint64_t v93 = v8;
LABEL_78:
                  *(__n128 *)uint64_t v93 = v152;
                  *(__n128 *)(v93 + 16) = v164;
                  *(__n128 *)(v93 + 32) = v176;
                  *(_DWORD *)(v93 + 48) = v86;
                  *(_OWORD *)(v93 + 52) = v215;
                  *(_OWORD *)(v93 + 68) = v221;
                  *(_OWORD *)(v93 + 80) = v87;
                }

                v80 = v85 + 6;
                v83 += 96LL;
                v84 = v85;
              }

              while (&v85[6] != a2);
            }
          }

          else if (!v82)
          {
            do
            {
              v138 = v80;
              signed __int32 v139 = *(_DWORD *)(a1 + 144);
              if (v139 < *(_DWORD *)(a1 + 48))
              {
                __n128 v167 = v80[1];
                __n128 v179 = v80[2];
                __n128 v155 = *v80;
                __n128 v218 = *(__n128 *)(a1 + 148);
                *(_OWORD *)v224 = *(_OWORD *)(a1 + 164);
                *(_OWORD *)&v224[12] = *(_OWORD *)(a1 + 176);
                do
                {
                  __n128 v140 = v80[-3];
                  v80[2] = v80[-4];
                  v80[3] = v140;
                  __n128 v141 = v80[-1];
                  v80[4] = v80[-2];
                  v80[5] = v141;
                  __n128 v142 = v80[-5];
                  __n128 *v80 = v80[-6];
                  v80[1] = v142;
                  __int32 v143 = v80[-9].n128_i32[0];
                  v80 -= 6;
                }

                while (v139 < v143);
                __n128 *v80 = v155;
                v80[1] = v167;
                v80[2] = v179;
                v80[3].n128_u32[0] = v139;
                v80[5] = *(__n128 *)&v224[12];
                *(__n128 *)((char *)v80 + 68) = *(__n128 *)v224;
                *(__n128 *)((char *)v80 + 52) = v218;
              }

              v80 = v138 + 6;
              a1 = (uint64_t)v138;
            }

            while (&v138[6] != a2);
          }

          return;
        }

        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            int64_t v94 = (unint64_t)(v10 - 2) >> 1;
            int64_t v95 = v94;
            do
            {
              int64_t v96 = v95;
              if (v94 >= v95)
              {
                uint64_t v97 = (2 * v95) | 1;
                unint64_t v98 = v8 + 96 * v97;
                if (2 * v95 + 2 < v10)
                {
                  int v99 = *(_DWORD *)(v98 + 48);
                  int v100 = *(_DWORD *)(v98 + 144);
                  v98 += 96LL * (v99 < v100);
                  if (v99 < v100) {
                    uint64_t v97 = 2 * v95 + 2;
                  }
                }

                unint64_t v101 = v8 + 96 * v95;
                int v102 = *(_DWORD *)(v101 + 48);
                if (*(_DWORD *)(v98 + 48) >= v102)
                {
                  __int128 v165 = *(_OWORD *)(v101 + 16);
                  __int128 v177 = *(_OWORD *)(v101 + 32);
                  __int128 v153 = *(_OWORD *)v101;
                  *(_OWORD *)&v222[12] = *(_OWORD *)(v101 + 80);
                  __int128 v216 = *(_OWORD *)(v101 + 52);
                  *(_OWORD *)v222 = *(_OWORD *)(v101 + 68);
                  do
                  {
                    v103 = (_OWORD *)v101;
                    unint64_t v101 = v98;
                    __int128 v104 = *(_OWORD *)(v98 + 16);
                    _OWORD *v103 = *(_OWORD *)v98;
                    v103[1] = v104;
                    __int128 v105 = *(_OWORD *)(v98 + 32);
                    __int128 v106 = *(_OWORD *)(v98 + 48);
                    __int128 v107 = *(_OWORD *)(v98 + 80);
                    v103[4] = *(_OWORD *)(v98 + 64);
                    v103[5] = v107;
                    v103[2] = v105;
                    v103[3] = v106;
                    if (v94 < v97) {
                      break;
                    }
                    uint64_t v108 = (2 * v97) | 1;
                    unint64_t v98 = v8 + 96 * v108;
                    uint64_t v109 = 2 * v97 + 2;
                    if (v109 < v10)
                    {
                      int v110 = *(_DWORD *)(v98 + 48);
                      int v111 = *(_DWORD *)(v98 + 144);
                      v98 += 96LL * (v110 < v111);
                      if (v110 < v111) {
                        uint64_t v108 = v109;
                      }
                    }

                    uint64_t v97 = v108;
                  }

                  while (*(_DWORD *)(v98 + 48) >= v102);
                  *(_OWORD *)unint64_t v101 = v153;
                  *(_OWORD *)(v101 + 16) = v165;
                  *(_OWORD *)(v101 + 32) = v177;
                  *(_DWORD *)(v101 + 48) = v102;
                  *(_OWORD *)(v101 + 52) = v216;
                  *(_OWORD *)(v101 + 68) = *(_OWORD *)v222;
                  *(_OWORD *)(v101 + 80) = *(_OWORD *)&v222[12];
                }
              }

              int64_t v95 = v96 - 1;
            }

            while (v96);
            int64_t v112 = v9 / 0x60uLL;
            do
            {
              uint64_t v113 = 0LL;
              __n128 v154 = *(__n128 *)v8;
              __n128 v166 = *(__n128 *)(v8 + 16);
              __n128 v197 = *(__n128 *)(v8 + 64);
              __n128 v206 = *(__n128 *)(v8 + 80);
              __n128 v178 = *(__n128 *)(v8 + 32);
              __n128 v188 = *(__n128 *)(v8 + 48);
              v114 = (_OWORD *)v8;
              do
              {
                uint64_t v115 = (uint64_t)&v114[6 * v113 + 6];
                uint64_t v116 = (2 * v113) | 1;
                uint64_t v117 = 2 * v113 + 2;
                if (v117 < v112)
                {
                  int v118 = *(_DWORD *)(v115 + 48);
                  int v119 = *(_DWORD *)(v115 + 144);
                  v115 += 96LL * (v118 < v119);
                  if (v118 < v119) {
                    uint64_t v116 = v117;
                  }
                }

                __int128 v120 = *(_OWORD *)(v115 + 16);
                _OWORD *v114 = *(_OWORD *)v115;
                v114[1] = v120;
                __int128 v121 = *(_OWORD *)(v115 + 32);
                __int128 v122 = *(_OWORD *)(v115 + 48);
                __int128 v123 = *(_OWORD *)(v115 + 80);
                v114[4] = *(_OWORD *)(v115 + 64);
                v114[5] = v123;
                v114[2] = v121;
                v114[3] = v122;
                v114 = (_OWORD *)v115;
                uint64_t v113 = v116;
              }

              while (v116 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
              a2 -= 6;
              if ((__n128 *)v115 == a2)
              {
                *(__n128 *)uint64_t v115 = v154;
                *(__n128 *)(v115 + 16) = v166;
                *(__n128 *)(v115 + 64) = v197;
                *(__n128 *)(v115 + 80) = v206;
                *(__n128 *)(v115 + 32) = v178;
                *(__n128 *)(v115 + 48) = v188;
              }

              else
              {
                __n128 v124 = a2[1];
                *(__n128 *)uint64_t v115 = *a2;
                *(__n128 *)(v115 + 16) = v124;
                __n128 v125 = a2[2];
                __n128 v126 = a2[3];
                __n128 v127 = a2[5];
                *(__n128 *)(v115 + 64) = a2[4];
                *(__n128 *)(v115 + 80) = v127;
                *(__n128 *)(v115 + 32) = v125;
                *(__n128 *)(v115 + 48) = v126;
                a2[4] = v197;
                a2[5] = v206;
                a2[2] = v178;
                a2[3] = v188;
                *a2 = v154;
                a2[1] = v166;
                uint64_t v128 = v115 - v8 + 96;
                if (v128 >= 97)
                {
                  unint64_t v129 = (v128 / 0x60uLL - 2) >> 1;
                  v130 = (_OWORD *)(v8 + 96 * v129);
                  int v131 = *(_DWORD *)(v115 + 48);
                  if (*((_DWORD *)v130 + 12) < v131)
                  {
                    __int128 v223 = *(_OWORD *)(v115 + 16);
                    __int128 v227 = *(_OWORD *)(v115 + 32);
                    __int128 v217 = *(_OWORD *)v115;
                    *(_OWORD *)&v212[12] = *(_OWORD *)(v115 + 80);
                    __int128 v209 = *(_OWORD *)(v115 + 52);
                    *(_OWORD *)v212 = *(_OWORD *)(v115 + 68);
                    do
                    {
                      v132 = (_OWORD *)v115;
                      uint64_t v115 = (uint64_t)v130;
                      __int128 v133 = v130[1];
                      _OWORD *v132 = *v130;
                      v132[1] = v133;
                      __int128 v134 = v130[2];
                      __int128 v135 = v130[3];
                      __int128 v136 = v130[5];
                      v132[4] = v130[4];
                      v132[5] = v136;
                      v132[2] = v134;
                      v132[3] = v135;
                      if (!v129) {
                        break;
                      }
                      unint64_t v129 = (v129 - 1) >> 1;
                      v130 = (_OWORD *)(v8 + 96 * v129);
                    }

                    while (*((_DWORD *)v130 + 12) < v131);
                    *(_OWORD *)uint64_t v115 = v217;
                    *(_OWORD *)(v115 + 16) = v223;
                    *(_OWORD *)(v115 + 32) = v227;
                    *(_DWORD *)(v115 + 48) = v131;
                    *(_OWORD *)(v115 + 52) = v209;
                    *(_OWORD *)(v115 + 68) = *(_OWORD *)v212;
                    *(_OWORD *)(v115 + 80) = *(_OWORD *)&v212[12];
                  }
                }
              }
            }

            while (v112-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        unint64_t v12 = v8 + 96 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x3000)
        {
          sub_100A6D070((__n128 *)(a1 + 96 * v11), (__n128 *)a1, a2 - 6);
        }

        else
        {
          sub_100A6D070((__n128 *)a1, (__n128 *)(a1 + 96 * v11), a2 - 6);
          uint64_t v13 = 3 * v11;
          double v14 = (__n128 *)(a1 + 96 * v11 - 96);
          sub_100A6D070((__n128 *)(a1 + 96), v14, a2 - 12);
          __int128 v15 = (__n128 *)(a1 + 96 + 32 * v13);
          sub_100A6D070((__n128 *)(a1 + 192), v15, a2 - 18);
          sub_100A6D070(v14, (__n128 *)v12, v15);
          __n128 v144 = *(__n128 *)a1;
          __int128 v156 = *(_OWORD *)(a1 + 16);
          __int128 v189 = *(_OWORD *)(a1 + 64);
          __int128 v198 = *(_OWORD *)(a1 + 80);
          __int128 v168 = *(_OWORD *)(a1 + 32);
          __int128 v180 = *(_OWORD *)(a1 + 48);
          __int128 v16 = *(_OWORD *)(v12 + 80);
          __int128 v18 = *(_OWORD *)(v12 + 32);
          __int128 v17 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v12 + 64);
          *(_OWORD *)(a1 + 80) = v16;
          *(_OWORD *)(a1 + 32) = v18;
          *(_OWORD *)(a1 + 48) = v17;
          __int128 v19 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = v19;
          *(__n128 *)unint64_t v12 = v144;
          *(_OWORD *)(v12 + 16) = v156;
          *(_OWORD *)(v12 + 64) = v189;
          *(_OWORD *)(v12 + 80) = v198;
          *(_OWORD *)(v12 + 32) = v168;
          *(_OWORD *)(v12 + 48) = v180;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          signed __int32 v20 = *(_DWORD *)(a1 + 48);
          if (*(_DWORD *)(a1 - 48) < v20) {
            goto LABEL_11;
          }
          __int128 v220 = *(_OWORD *)(a1 + 16);
          __int128 v226 = *(_OWORD *)(a1 + 32);
          __n128 v214 = *(__n128 *)a1;
          __int128 v208 = *(_OWORD *)(a1 + 52);
          *(_OWORD *)v211 = *(_OWORD *)(a1 + 68);
          *(_OWORD *)&v211[12] = *(_OWORD *)(a1 + 80);
          if (v20 >= (signed __int32)a2[-3].n128_u32[0])
          {
            unint64_t v44 = a1 + 96;
            do
            {
              unint64_t v8 = v44;
              signed __int32 v45 = *(_DWORD *)(v44 + 48);
              v44 += 96LL;
            }

            while (v20 >= v45);
          }

          else
          {
            uint64_t v42 = a1;
            do
            {
              unint64_t v8 = v42 + 96;
              signed __int32 v43 = *(_DWORD *)(v42 + 144);
              v42 += 96LL;
            }

            while (v20 >= v43);
          }

          unint64_t v46 = a2;
          if (v8 < (unint64_t)a2)
          {
            uint64_t v47 = a2;
            do
            {
              unint64_t v46 = v47 - 6;
              signed __int32 v48 = v47[-3].n128_i32[0];
              v47 -= 6;
            }

            while (v20 < v48);
          }

          while (v8 < (unint64_t)v46)
          {
            __n128 v146 = *(__n128 *)v8;
            __n128 v158 = *(__n128 *)(v8 + 16);
            __n128 v191 = *(__n128 *)(v8 + 64);
            __n128 v200 = *(__n128 *)(v8 + 80);
            __n128 v170 = *(__n128 *)(v8 + 32);
            __n128 v182 = *(__n128 *)(v8 + 48);
            __n128 v49 = v46[5];
            __n128 v51 = v46[2];
            __n128 v50 = v46[3];
            *(__n128 *)(v8 + 64) = v46[4];
            *(__n128 *)(v8 + 80) = v49;
            *(__n128 *)(v8 + 32) = v51;
            *(__n128 *)(v8 + 48) = v50;
            __n128 v52 = v46[1];
            *(__n128 *)unint64_t v8 = *v46;
            *(__n128 *)(v8 + 16) = v52;
            __n128 *v46 = v146;
            v46[1] = v158;
            v46[4] = v191;
            v46[5] = v200;
            v46[2] = v170;
            v46[3] = v182;
            do
            {
              signed __int32 v53 = *(_DWORD *)(v8 + 144);
              v8 += 96LL;
            }

            while (v20 >= v53);
            do
            {
              signed __int32 v54 = v46[-3].n128_i32[0];
              v46 -= 6;
            }

            while (v20 < v54);
          }

          v55 = (__n128 *)(v8 - 96);
          if (v8 - 96 != a1)
          {
            __int128 v56 = *(_OWORD *)(v8 - 80);
            *(__n128 *)a1 = *v55;
            *(_OWORD *)(a1 + 16) = v56;
            __int128 v57 = *(_OWORD *)(v8 - 64);
            __int128 v58 = *(_OWORD *)(v8 - 48);
            __int128 v59 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 80) = v59;
            *(_OWORD *)(a1 + 32) = v57;
            *(_OWORD *)(a1 + 48) = v58;
          }

          a4 = 0;
          __n128 *v55 = v214;
          *(_OWORD *)(v8 - 80) = v220;
          *(_OWORD *)(v8 - 64) = v226;
          *(_DWORD *)(v8 - 48) = v20;
          *(_OWORD *)(v8 - 16) = *(_OWORD *)&v211[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v211;
          *(_OWORD *)(v8 - 44) = v208;
          continue;
        }

        signed __int32 v20 = *(_DWORD *)(a1 + 48);
LABEL_11:
        uint64_t v21 = 0LL;
        __int128 v219 = *(_OWORD *)(a1 + 16);
        __int128 v225 = *(_OWORD *)(a1 + 32);
        __n128 v213 = *(__n128 *)a1;
        __int128 v207 = *(_OWORD *)(a1 + 52);
        *(_OWORD *)v210 = *(_OWORD *)(a1 + 68);
        *(_OWORD *)&v210[12] = *(_OWORD *)(a1 + 80);
        do
        {
          signed __int32 v22 = *(_DWORD *)(a1 + v21 + 144);
          v21 += 96LL;
        }

        while (v22 < v20);
        unint64_t v23 = a1 + v21;
        uint64_t v24 = a2;
        if (v21 == 96)
        {
          __int128 v27 = a2;
          while (v23 < (unint64_t)v27)
          {
            uint64_t v25 = v27 - 6;
            signed __int32 v28 = v27[-3].n128_i32[0];
            v27 -= 6;
            if (v28 < v20) {
              goto LABEL_21;
            }
          }

          uint64_t v25 = v27;
        }

        else
        {
          do
          {
            uint64_t v25 = v24 - 6;
            signed __int32 v26 = v24[-3].n128_i32[0];
            v24 -= 6;
          }

          while (v26 >= v20);
        }

__n128 sub_100A6D070(__n128 *a1, __n128 *a2, __n128 *a3)
{
  signed __int32 v3 = a2[3].n128_i32[0];
  signed __int32 v4 = a3[3].n128_i32[0];
  if (v3 >= (signed __int32)a1[3].n128_u32[0])
  {
    if (v4 < v3)
    {
      __n128 v35 = a2[2];
      __n128 v39 = a2[3];
      __n128 v43 = a2[4];
      __n128 v47 = a2[5];
      __n128 v27 = *a2;
      __n128 v31 = a2[1];
      __n128 v9 = a3[1];
      *a2 = *a3;
      a2[1] = v9;
      __n128 v10 = a3[5];
      __n128 v12 = a3[2];
      __n128 v11 = a3[3];
      a2[4] = a3[4];
      a2[5] = v10;
      a2[2] = v12;
      a2[3] = v11;
      a3[4] = v43;
      a3[5] = v47;
      a3[2] = v35;
      a3[3] = v39;
      __n128 result = v27;
      *a3 = v27;
      a3[1] = v31;
      if ((signed __int32)a2[3].n128_u32[0] < (signed __int32)a1[3].n128_u32[0])
      {
        __n128 v36 = a1[2];
        __n128 v40 = a1[3];
        __n128 v44 = a1[4];
        __n128 v48 = a1[5];
        __n128 v28 = *a1;
        __n128 v32 = a1[1];
        __n128 v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        __n128 v15 = a2[5];
        __n128 v17 = a2[2];
        __n128 v16 = a2[3];
        a1[4] = a2[4];
        a1[5] = v15;
        a1[2] = v17;
        a1[3] = v16;
        a2[4] = v44;
        a2[5] = v48;
        a2[2] = v36;
        a2[3] = v40;
        __n128 result = v28;
        *a2 = v28;
        a2[1] = v32;
      }
    }
  }

  else
  {
    if (v4 >= v3)
    {
      __n128 v37 = a1[2];
      __n128 v41 = a1[3];
      __n128 v45 = a1[4];
      __n128 v49 = a1[5];
      __n128 v29 = *a1;
      __n128 v33 = a1[1];
      __n128 v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      __n128 v19 = a2[5];
      __n128 v21 = a2[2];
      __n128 v20 = a2[3];
      a1[4] = a2[4];
      a1[5] = v19;
      a1[2] = v21;
      a1[3] = v20;
      a2[4] = v45;
      a2[5] = v49;
      a2[2] = v37;
      a2[3] = v41;
      __n128 result = v29;
      *a2 = v29;
      a2[1] = v33;
      __n128 v34 = a2[2];
      __n128 v38 = a2[3];
      __n128 v42 = a2[4];
      __n128 v46 = a2[5];
      __n128 v26 = *a2;
      __n128 v30 = a2[1];
      __n128 v22 = a3[1];
      *a2 = *a3;
      a2[1] = v22;
      __n128 v23 = a3[5];
      __n128 v25 = a3[2];
      __n128 v24 = a3[3];
      a2[4] = a3[4];
      a2[5] = v23;
      a2[2] = v25;
      a2[3] = v24;
    }

    else
    {
      __n128 v34 = a1[2];
      __n128 v38 = a1[3];
      __n128 v42 = a1[4];
      __n128 v46 = a1[5];
      __n128 v26 = *a1;
      __n128 v30 = a1[1];
      __n128 v5 = a3[1];
      *a1 = *a3;
      a1[1] = v5;
      __n128 v6 = a3[5];
      __n128 v8 = a3[2];
      __n128 v7 = a3[3];
      a1[4] = a3[4];
      a1[5] = v6;
      a1[2] = v8;
      a1[3] = v7;
    }

    a3[4] = v42;
    a3[5] = v46;
    a3[2] = v34;
    a3[3] = v38;
    __n128 result = v26;
    *a3 = v26;
    a3[1] = v30;
  }

  return result;
}

BOOL sub_100A6D218(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 48))
      {
        __int128 v49 = *(_OWORD *)(a1 + 32);
        __int128 v55 = *(_OWORD *)(a1 + 48);
        __int128 v60 = *(_OWORD *)(a1 + 64);
        __int128 v65 = *(_OWORD *)(a1 + 80);
        __n128 v37 = *(__n128 *)a1;
        __int128 v43 = *(_OWORD *)(a1 + 16);
        __int128 v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        __int128 v7 = *(_OWORD *)(a2 - 16);
        __int128 v9 = *(_OWORD *)(a2 - 64);
        __int128 v8 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a2 - 64) = v49;
        *(_OWORD *)(a2 - 48) = v55;
        *(_OWORD *)(a2 - 32) = v60;
        *(_OWORD *)(a2 - 16) = v65;
        *(__n128 *)(a2 - 96) = v37;
        *(_OWORD *)(a2 - 80) = v43;
      }

      return result;
    case 3uLL:
      sub_100A6D070((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a2 - 96));
      return 1LL;
    case 4uLL:
      sub_100A6D5CC((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192), (__n128 *)(a2 - 96));
      return 1LL;
    case 5uLL:
      __n128 v21 = (__n128 *)(a1 + 96);
      __n128 v22 = (__n128 *)(a1 + 192);
      __n128 v23 = (__n128 *)(a1 + 288);
      sub_100A6D5CC((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192), (__n128 *)(a1 + 288));
      if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(a1 + 336)) {
        return 1LL;
      }
      __int128 v51 = *(_OWORD *)(a1 + 320);
      __int128 v56 = *(_OWORD *)(a1 + 336);
      __int128 v61 = *(_OWORD *)(a1 + 352);
      __int128 v66 = *(_OWORD *)(a1 + 368);
      __n128 v39 = *v23;
      __int128 v45 = *(_OWORD *)(a1 + 304);
      __int128 v24 = *(_OWORD *)(a2 - 80);
      __n128 *v23 = *(__n128 *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      __int128 v25 = *(_OWORD *)(a2 - 16);
      __int128 v27 = *(_OWORD *)(a2 - 64);
      __int128 v26 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 368) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a2 - 64) = v51;
      *(_OWORD *)(a2 - 48) = v56;
      *(_OWORD *)(a2 - 32) = v61;
      *(_OWORD *)(a2 - 16) = v66;
      *(__n128 *)(a2 - 96) = v39;
      *(_OWORD *)(a2 - 80) = v45;
      if (*(_DWORD *)(a1 + 336) >= *(_DWORD *)(a1 + 240)) {
        return 1LL;
      }
      __int128 v52 = *(_OWORD *)(a1 + 224);
      __int128 v57 = *(_OWORD *)(a1 + 240);
      __int128 v62 = *(_OWORD *)(a1 + 256);
      __int128 v67 = *(_OWORD *)(a1 + 272);
      __n128 v40 = *v22;
      __int128 v46 = *(_OWORD *)(a1 + 208);
      __int128 v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      __int128 v29 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 272) = v29;
      __int128 v30 = *(_OWORD *)(a1 + 304);
      *__n128 v22 = *v23;
      *(_OWORD *)(a1 + 208) = v30;
      __n128 *v23 = v40;
      *(_OWORD *)(a1 + 304) = v46;
      *(_OWORD *)(a1 + 352) = v62;
      *(_OWORD *)(a1 + 368) = v67;
      *(_OWORD *)(a1 + 320) = v52;
      *(_OWORD *)(a1 + 336) = v57;
      if (*(_DWORD *)(a1 + 240) >= *(_DWORD *)(a1 + 144)) {
        return 1LL;
      }
      __int128 v53 = *(_OWORD *)(a1 + 128);
      __int128 v58 = *(_OWORD *)(a1 + 144);
      __int128 v63 = *(_OWORD *)(a1 + 160);
      __int128 v68 = *(_OWORD *)(a1 + 176);
      __n128 v41 = *v21;
      __int128 v47 = *(_OWORD *)(a1 + 112);
      __int128 v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      __int128 v32 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 176) = v32;
      __int128 v33 = *(_OWORD *)(a1 + 208);
      __n128 *v21 = *v22;
      *(_OWORD *)(a1 + 112) = v33;
      *__n128 v22 = v41;
      *(_OWORD *)(a1 + 208) = v47;
      *(_OWORD *)(a1 + 256) = v63;
      *(_OWORD *)(a1 + 272) = v68;
      *(_OWORD *)(a1 + 224) = v53;
      *(_OWORD *)(a1 + 240) = v58;
      if (*(_DWORD *)(a1 + 144) >= *(_DWORD *)(a1 + 48)) {
        return 1LL;
      }
      __int128 v54 = *(_OWORD *)(a1 + 32);
      __int128 v59 = *(_OWORD *)(a1 + 48);
      __int128 v64 = *(_OWORD *)(a1 + 64);
      __int128 v69 = *(_OWORD *)(a1 + 80);
      __n128 v42 = *(__n128 *)a1;
      __int128 v48 = *(_OWORD *)(a1 + 16);
      __int128 v34 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v34;
      __int128 v35 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 80) = v35;
      __int128 v36 = *(_OWORD *)(a1 + 112);
      *(__n128 *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v36;
      __n128 *v21 = v42;
      *(_OWORD *)(a1 + 112) = v48;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v69;
      BOOL result = 1LL;
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 144) = v59;
      return result;
    default:
      uint64_t v10 = a1 + 192;
      sub_100A6D070((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192));
      uint64_t v11 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    int v14 = *(_DWORD *)(v11 + 48);
    if (v14 < *(_DWORD *)(v10 + 48))
    {
      __int128 v38 = *(_OWORD *)v11;
      __int128 v44 = *(_OWORD *)(v11 + 16);
      __int128 v50 = *(_OWORD *)(v11 + 32);
      __int128 v70 = *(_OWORD *)(v11 + 52);
      *(_OWORD *)__int128 v71 = *(_OWORD *)(v11 + 68);
      uint64_t v15 = v12;
      *(_OWORD *)&v71[12] = *(_OWORD *)(v11 + 80);
      while (1)
      {
        uint64_t v16 = a1 + v15;
        __int128 v17 = *(_OWORD *)(a1 + v15 + 240);
        *(_OWORD *)(v16 + 320) = *(_OWORD *)(a1 + v15 + 224);
        *(_OWORD *)(v16 + 336) = v17;
        __int128 v18 = *(_OWORD *)(a1 + v15 + 272);
        *(_OWORD *)(v16 + 352) = *(_OWORD *)(a1 + v15 + 256);
        *(_OWORD *)(v16 + 368) = v18;
        __int128 v19 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 288) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 304) = v19;
        if (v15 == -192) {
          break;
        }
        v15 -= 96LL;
        if (v14 >= *(_DWORD *)(v16 + 144))
        {
          uint64_t v20 = a1 + v15 + 288;
          goto LABEL_12;
        }
      }

      uint64_t v20 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v20 = v38;
      *(_OWORD *)(v20 + 16) = v44;
      *(_OWORD *)(v20 + 32) = v50;
      *(_OWORD *)(v20 + 52) = v70;
      *(_DWORD *)(v20 + 48) = v14;
      *(_OWORD *)(v20 + 68) = *(_OWORD *)v71;
      ++v13;
      *(_OWORD *)(v20 + 80) = *(_OWORD *)&v71[12];
      if (v13 == 8) {
        return v11 + 96 == a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 96LL;
    v11 += 96LL;
    if (v11 == a2) {
      return 1LL;
    }
  }

__n128 sub_100A6D5CC(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  result.n128_u64[0] = sub_100A6D070(a1, a2, a3).n128_u64[0];
  if ((signed __int32)a4[3].n128_u32[0] < (signed __int32)a3[3].n128_u32[0])
  {
    __n128 v27 = a3[2];
    __n128 v30 = a3[3];
    __n128 v33 = a3[4];
    __n128 v36 = a3[5];
    __n128 v21 = *a3;
    __n128 v24 = a3[1];
    __n128 v9 = a4[1];
    *a3 = *a4;
    a3[1] = v9;
    __n128 v10 = a4[5];
    __n128 v12 = a4[2];
    __n128 v11 = a4[3];
    a3[4] = a4[4];
    a3[5] = v10;
    a3[2] = v12;
    a3[3] = v11;
    a4[4] = v33;
    a4[5] = v36;
    a4[2] = v27;
    a4[3] = v30;
    __n128 result = v21;
    *a4 = v21;
    a4[1] = v24;
    if ((signed __int32)a3[3].n128_u32[0] < (signed __int32)a2[3].n128_u32[0])
    {
      __n128 v28 = a2[2];
      __n128 v31 = a2[3];
      __n128 v34 = a2[4];
      __n128 v37 = a2[5];
      __n128 v22 = *a2;
      __n128 v25 = a2[1];
      __n128 v13 = a3[1];
      *a2 = *a3;
      a2[1] = v13;
      __n128 v14 = a3[5];
      __n128 v16 = a3[2];
      __n128 v15 = a3[3];
      a2[4] = a3[4];
      a2[5] = v14;
      a2[2] = v16;
      a2[3] = v15;
      a3[4] = v34;
      a3[5] = v37;
      a3[2] = v28;
      a3[3] = v31;
      __n128 result = v22;
      *a3 = v22;
      a3[1] = v25;
      if ((signed __int32)a2[3].n128_u32[0] < (signed __int32)a1[3].n128_u32[0])
      {
        __n128 v29 = a1[2];
        __n128 v32 = a1[3];
        __n128 v35 = a1[4];
        __n128 v38 = a1[5];
        __n128 v23 = *a1;
        __n128 v26 = a1[1];
        __n128 v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        __n128 v18 = a2[5];
        __n128 v20 = a2[2];
        __n128 v19 = a2[3];
        a1[4] = a2[4];
        a1[5] = v18;
        a1[2] = v20;
        a1[3] = v19;
        a2[4] = v35;
        a2[5] = v38;
        a2[2] = v29;
        a2[3] = v32;
        __n128 result = v23;
        *a2 = v23;
        a2[1] = v26;
      }
    }
  }

  return result;
}

uint64_t *sub_100A6D710(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100A6D764(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100A6D74C(_Unwind_Exception *a1)
{
}

uint64_t *sub_100A6D764(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    __n128 v5 = (uint64_t **)result;
    __int128 v6 = result + 1;
    do
    {
      __n128 result = sub_100A6D7E8(v5, v6, v4 + 4, v4 + 4);
      __int128 v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          __int128 v8 = v7;
          __int128 v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          __int128 v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }

        while (!v9);
      }

      unint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100A6D7E8(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  __int128 v6 = (uint64_t **)sub_100008454(a1, a2, &v11, &v10, a3);
  __int128 v7 = *v6;
  if (!*v6)
  {
    __int128 v8 = v6;
    __int128 v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000085FC(a1, v11, v8, v7);
  }

  return v7;
}

void *sub_100A6D86C(void *a1, void *a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2 == a3)
  {
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v4 = 0LL;
    __n128 v5 = a2;
    do
    {
      __int128 v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          __int128 v7 = v6;
          __int128 v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          __int128 v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          __n128 v5 = v7;
        }

        while (!v8);
      }

      ++v4;
      __n128 v5 = v7;
    }

    while (v7 != a3);
  }

  sub_100A6D8F0(a1, a2, a3, v4);
  return a1;
}

void *sub_100A6D8F0(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_10000717C(result, a4);
    return (void *)sub_100A6D95C(v6, a2, a3);
  }

  return result;
}

void sub_100A6D940(_Unwind_Exception *exception_object)
{
  signed __int32 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6D95C(uint64_t result, void *a2, void *a3)
{
  signed __int32 v3 = *(void **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      void *v3 = a2[4];
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          __n128 v5 = v4;
          unint64_t v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          __n128 v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }

        while (!v6);
      }

      ++v3;
      a2 = v5;
    }

    while (v5 != a3);
  }

  *(void *)(result + 8) = v3;
  return result;
}

void *sub_100A6D9B4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x48uLL);
  __n128 result = sub_100A6DA0C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100A6D9F8(_Unwind_Exception *a1)
{
}

void *sub_100A6DA0C(void *a1, uint64_t a2)
{
  a1[2] = 0LL;
  *a1 = off_10186A678;
  a1[1] = 0LL;
  sub_100A6A21C(a1 + 3, a2);
  return a1;
}

void sub_100A6DA44(_Unwind_Exception *a1)
{
}

void sub_100A6DA58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10186A678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A6DA6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10186A678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100A6DA90(uint64_t a1)
{
}

void sub_100A6DAB8(uint64_t a1, uint64_t a2)
{
  signed __int32 v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }

  unint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }

void sub_100A6DAFC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      char v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)char v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100A6DB98(_Unwind_Exception *a1)
{
}

void sub_100A6DBB0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      char v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *char v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100A6DC3C(_Unwind_Exception *a1)
{
}

void sub_100A6DC54(char *a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  if ((*a2 & 0xFFFFFFFE) == 6
    && (*(_BYTE *)(a3 + 96) ? (BOOL v5 = *(_DWORD *)(a3 + 48) <= 0) : (BOOL v5 = 1),
        v5 ? (char v6 = 0) : (char v6 = 1),
        *a1 = v6,
        a1[1] = 0,
        v4 == 7))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186A6B8);
    }
    __int128 v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a1;
      int v9 = a1[1];
      *(_DWORD *)buf = 67109376;
      int v17 = v8;
      __int16 v18 = 1024;
      int v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "LocationController,WifiAssoc,%d,AssocLoc,%d,Roam",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186A6B8);
      }
      uint64_t v10 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "LocationController,WifiAssoc,%d,AssocLoc,%d,Roam",  &v15);
LABEL_26:
      __n128 v14 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerWiFiAssociationTracker::updateWithWifiService(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)",  "%s\n",  v10);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186A6B8);
    }
    uint64_t v11 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *a1;
      int v13 = a1[1];
      *(_DWORD *)buf = 67109376;
      int v17 = v12;
      __int16 v18 = 1024;
      int v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "LocationController,WifiAssoc,%d,AssocLoc,%d,LinkStatus",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186A6B8);
      }
      uint64_t v10 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "LocationController,WifiAssoc,%d,AssocLoc,%d,LinkStatus",  &v15);
      goto LABEL_26;
    }
  }

void sub_100A6DF6C(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 768);
  a1[1] = v3;
  if (v3) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186A6B8);
    }
    BOOL v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "LocationController,Associated WiFi location without association",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186A6B8);
      }
      LOWORD(v13[0]) = 0;
      int v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "LocationController,Associated WiFi location without association",  v13,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLLocationControllerWiFiAssociationTracker::updateWithWifiLocation(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v12);
    }

    *a1 = 1;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186A6B8);
  }
  char v6 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *a1;
    int v8 = a1[1];
    *(_DWORD *)buf = 67109376;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "LocationController,WifiAssoc,%d,AssocLoc,%d,Location",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186A6B8);
    }
    int v9 = *a1;
    int v10 = a1[1];
    v13[0] = 67109376;
    v13[1] = v9;
    __int16 v14 = 1024;
    int v15 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "LocationController,WifiAssoc,%d,AssocLoc,%d,Location",  v13,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerWiFiAssociationTracker::updateWithWifiLocation(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v11);
  }

void sub_100A6E284(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100A6E354(id a1)
{
  qword_10199A3A0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLRunningAggregatorAWDSilo");
}

id sub_100A6E4D4(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5 = *a2;
  memcpy(v7, __src, sizeof(v7));
  return [a4 onStepNotification:v5 data:v7];
}

uint64_t sub_100A6E628(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  if (v6 == v7) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = 32 * (v6 - v7) - 1;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  unint64_t v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    sub_100A6EA58(a1);
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    uint64_t v7 = a1[1];
    unint64_t v11 = v9 + v10;
  }

  int v12 = (void *)(*(void *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v11);
  void *v12 = *a2;
  v12[1] = *a3;
  uint64_t v13 = v10 + 1;
  a1[5] = v13;
  unint64_t v14 = v9 + v13;
  int v15 = (void *)(v7 + 8 * (v14 >> 8));
  if ((_BYTE)v14) {
    uint64_t v16 = *v15 + 16LL * v14;
  }
  else {
    uint64_t v16 = *(v15 - 1) + 4096LL;
  }
  return v16 - 16;
}

void sub_100A6EA58(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __n128 v34 = (char *)sub_1000071BC(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      __n128 v37 = &v34[8 * v36];
      __n128 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100A6ED20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100A6ED6C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199A388, (void *)&_mh_execute_header);
}

void *sub_100A6EDB0(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10186A708;
  a1[9] = off_10186A7B8;
  sub_100B14CF0(a1 + 57, 0LL, 0LL);
  (*(void (**)(void *))(*a1 + 112LL))(a1);
  return a1;
}

void sub_100A6EE50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6EE7C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_10182BDA0;
  *(void *)a1 = off_10186AE48;
  *(void *)(a1 + 72) = off_10186AEF0;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10186AE48;
  *(void *)(a1 + 72) = off_10186AEF0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 376) = 12000;
  *(void *)(a1 + 384) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 392));
  *(void *)(a1 + 392) = &off_10182BDA0;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 264) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  uint64_t v15 = (int *)(a1 + 376);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 376));
  uint64_t v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    *uint64_t v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10186AF30);
  }
  int64_t v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186AF30);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLSwimEntry>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSq liteDatabase::SqlitePropertyPersistence) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 264) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100A6F224( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[48] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_100210A94(v26);
  sub_100D8A88C(a12);
  void *v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100A6F2C8()
{
}

void *sub_100A6F2D0(void *a1)
{
  a1[9] = off_10186AEF0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10186AE48;
  a1[48] = off_10182BD58;
  sub_1001B9C98(a1 + 49);
  sub_100210A94(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100A6F350(uint64_t a1)
{
  return sub_100A6F2D0((void *)(a1 - 72));
}

void sub_100A6F358(void *a1)
{
  char v1 = sub_100A6F2D0(a1);
  operator delete(v1);
}

void sub_100A6F36C(uint64_t a1)
{
  char v1 = sub_100A6F2D0((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100A6F384@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * FROM SwimDistributions ORDER BY id DESC", uu);
    uint64_t v5 = *(void *)uu;
    sub_1003C0454(*(void *)(a1 + 80));
    while (1)
    {
      char v6 = (sqlite3_stmt *)sub_100019240(v5);
      if (sqlite3_step(v6) != 100) {
        break;
      }
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t v8 = sqlite3_column_text(v7, 1);
      uuid_parse((const char *)v8, uu);
      uint64_t v9 = (sqlite3_stmt *)sub_100019240(v5);
      *(void *)&__int128 v50 = sqlite3_column_double(v9, 2);
      uint64_t v10 = (sqlite3_stmt *)sub_100019240(v5);
      DWORD2(v50) = sqlite3_column_int(v10, 3);
      uint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
      *(void *)&__int128 v51 = sqlite3_column_double(v11, 4);
      uint64_t v12 = (sqlite3_stmt *)sub_100019240(v5);
      *((void *)&v51 + 1) = sqlite3_column_double(v12, 5);
      uint64_t v13 = (sqlite3_stmt *)sub_100019240(v5);
      *(void *)&__int128 v53 = sqlite3_column_double(v13, 6);
      uint64_t v14 = (sqlite3_stmt *)sub_100019240(v5);
      *((void *)&v53 + 1) = sqlite3_column_double(v14, 7);
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v5);
      *((void *)&v52 + 1) = sqlite3_column_double(v15, 8);
      char v16 = (sqlite3_stmt *)sub_100019240(v5);
      LODWORD(v52) = sqlite3_column_int(v16, 9);
      uint64_t v17 = (sqlite3_stmt *)sub_100019240(v5);
      *(void *)&__int128 v54 = sqlite3_column_double(v17, 10);
      uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
      *((void *)&v54 + 1) = sqlite3_column_double(v18, 11);
      unint64_t v19 = (sqlite3_stmt *)sub_100019240(v5);
      int64_t v20 = sqlite3_column_text(v19, 12);
      uuid_parse((const char *)v20, (unsigned __int8 *)&v49);
      int v22 = a2[1];
      unint64_t v21 = (unint64_t)a2[2];
      if ((unint64_t)v22 >= v21)
      {
        uint64_t v29 = *a2;
        uint64_t v30 = 0x6DB6DB6DB6DB6DB7LL * ((v22 - *a2) >> 4);
        unint64_t v31 = v30 + 1;
        unint64_t v32 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v21 - (void)v29) >> 4);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x124924924924924LL) {
          unint64_t v33 = 0x249249249249249LL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          __n128 v34 = (char *)sub_10005057C((uint64_t)(a2 + 2), v33);
          uint64_t v29 = *a2;
          int v22 = a2[1];
        }

        else
        {
          __n128 v34 = 0LL;
        }

        __n128 v35 = &v34[112 * v30];
        __int128 v36 = *(_OWORD *)uu;
        __int128 v37 = v50;
        *((_OWORD *)v35 + 1) = v49;
        *((_OWORD *)v35 + 2) = v37;
        *(_OWORD *)__n128 v35 = v36;
        __int128 v38 = v51;
        __int128 v39 = v52;
        __int128 v40 = v54;
        *((_OWORD *)v35 + 5) = v53;
        *((_OWORD *)v35 + 6) = v40;
        *((_OWORD *)v35 + 3) = v38;
        *((_OWORD *)v35 + 4) = v39;
        if (v22 == v29)
        {
          uint64_t v47 = &v34[112 * v30];
        }

        else
        {
          __n128 v41 = &v34[112 * v30];
          do
          {
            __int128 v42 = *((_OWORD *)v22 - 7);
            __int128 v43 = *((_OWORD *)v22 - 5);
            *((_OWORD *)v41 - 6) = *((_OWORD *)v22 - 6);
            *((_OWORD *)v41 - 5) = v43;
            *((_OWORD *)v41 - 7) = v42;
            __int128 v44 = *((_OWORD *)v22 - 4);
            __int128 v45 = *((_OWORD *)v22 - 3);
            __int128 v46 = *((_OWORD *)v22 - 1);
            uint64_t v47 = v41 - 112;
            *((_OWORD *)v41 - 2) = *((_OWORD *)v22 - 2);
            *((_OWORD *)v41 - 1) = v46;
            *((_OWORD *)v41 - 4) = v44;
            *((_OWORD *)v41 - 3) = v45;
            v22 -= 112;
            v41 -= 112;
          }

          while (v22 != v29);
        }

        uint64_t v28 = v35 + 112;
        *a2 = v47;
        a2[1] = v35 + 112;
        a2[2] = &v34[112 * v33];
        if (v29) {
          operator delete(v29);
        }
      }

      else
      {
        __int128 v23 = *(_OWORD *)uu;
        __int128 v24 = v50;
        *((_OWORD *)v22 + 1) = v49;
        *((_OWORD *)v22 + 2) = v24;
        *(_OWORD *)int v22 = v23;
        __int128 v25 = v51;
        __int128 v26 = v52;
        __int128 v27 = v54;
        *((_OWORD *)v22 + 5) = v53;
        *((_OWORD *)v22 + 6) = v27;
        *((_OWORD *)v22 + 3) = v25;
        *((_OWORD *)v22 + 4) = v26;
        uint64_t v28 = v22 + 112;
      }

      a2[1] = v28;
    }

    uint64_t result = sub_1003C05BC(*(void *)(a1 + 80));
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100A6F6D4(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_100A6F718(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100A6F754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)buf;
  uuid_unparse((const unsigned __int8 *)a2, out);
  uuid_unparse((const unsigned __int8 *)(a2 + 16), __s);
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(v4);
  if (!sub_1003BC1F0(v5, 1, out)) {
    goto LABEL_17;
  }
  char v6 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(v4);
  if (!sub_1003C28BC(v7, 3, *(_DWORD *)(a2 + 40))) {
    goto LABEL_17;
  }
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v10 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v11 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v12 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v13 = (sqlite3_stmt *)sub_100019240(v4);
  if (!sub_1003C28BC(v13, 9, *(_DWORD *)(a2 + 64))) {
    goto LABEL_17;
  }
  uint64_t v14 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v15 = (sqlite3_stmt *)sub_100019240(v4);
  if (sub_1003B7480(v15, 11, *(double *)(a2 + 104))
    && (char v16 = (sqlite3_stmt *)sub_100019240(v4), sub_1003BC1F0(v16, 12, __s))
    && (sub_1003C0454(*(void *)(a1 + 80)),
        uint64_t v17 = *(void *)(a1 + 80),
        uint64_t v18 = (sqlite3_stmt *)sub_100019240(v4),
        LOBYTE(v17) = sub_1003BB2BC(v17, v18),
        sub_1003C05BC(*(void *)(a1 + 80)),
        (v17 & 1) != 0))
  {
    uint64_t v19 = 1LL;
  }

  else
  {
LABEL_17:
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    int64_t v20 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Unable to persist swim distribution", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      v23[0] = 0;
      int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "Unable to persist swim distribution",  v23,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLSwimPersistence::insertDistribution(const CLSwimStrokesPerTurnDistribution &)",  "%s\n",  v22);
    }

    uint64_t v19 = 0LL;
  }

  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v19;
}

void sub_100A6FAA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A6FACC(uint64_t a1, int a2, int a3)
{
  if (a3 >= a2)
  {
    sub_10125A4A8();
    __break(1u);
    goto LABEL_14;
  }

  int v8 = sub_100A6FD1C(a1);
  if (sub_100D8A92C(a1 + 72) && v8 >= a2)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "DELETE From SwimDistributions WHERE id <= (SELECT MAX(id) From SwimDistributions) - ?",  buf);
    uint64_t v3 = *(void *)buf;
    uint64_t v9 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003C28BC(v9, 1, a3))
    {
      uint64_t v10 = *(void *)(a1 + 80);
      uint64_t v11 = (sqlite3_stmt *)sub_100019240(v3);
      if (sub_1003BB2BC(v10, v11))
      {
LABEL_10:
        if (v3) {
          (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
        }
        return;
      }
    }

    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_1019344E0 == -1)
    {
LABEL_7:
      uint64_t v12 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Unable to purge old records.", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        v14[0] = 0;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "Unable to purge old records.",  v14,  2);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSwimPersistence::purgeDistributions(int, int)", "%s\n", v13);
      }

      goto LABEL_10;
    }

void sub_100A6FCF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6FD1C(uint64_t a1)
{
  uint64_t v2 = *(void *)buf;
  uint64_t v3 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sqlite3_step(v3) == 100)
  {
    uint64_t v4 = (sqlite3_stmt *)sub_100019240(v2);
    uint64_t v5 = sqlite3_column_int(v4, 0);
    if (!v2) {
      return v5;
    }
    goto LABEL_12;
  }

  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10186A848);
  }
  char v6 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Unable to get the number of distributions",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    v9[0] = 0;
    int v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "Unable to get the number of distributions",  v9,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "int CLSwimPersistence::countDistributions() const", "%s\n", v8);
  }

  uint64_t v5 = 0xFFFFFFFFLL;
  if (v2) {
LABEL_12:
  }
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  return v5;
}

void sub_100A6FF24(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A6FF50(uint64_t a1)
{
  if (sub_100D8A92C(a1 + 72))
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM SwimDistributions", buf);
    uint64_t v2 = *(void *)buf;
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (!sub_1003BB2BC(v3, v4))
    {
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      uint64_t v5 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unable to delete all distributions!", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10186A848);
        }
        v8[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "Unable to delete all distributions!",  v8,  2);
        uint64_t v7 = (uint8_t *)v6;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLSwimPersistence::deleteAllDistributions()", "%s\n", v6);
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

void sub_100A70134(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A70160(uint64_t a1, int a2, void **a3)
{
  uint64_t v6 = *(void *)buf;
  uint64_t v24 = *(void *)buf;
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003C28BC(v7, 1, a2))
  {
    sub_100A704D0(a1, &v24, a3);
    uint64_t v9 = (char *)*a3;
    int v8 = (char *)a3[1];
    uint64_t v10 = 100LL;
    if (*a3 != v8)
    {
      unint64_t v11 = (unint64_t)(v8 - 152);
      if (v11 > (unint64_t)v9)
      {
        uint64_t v12 = v9 + 152;
        do
        {
          __int128 v32 = *(_OWORD *)(v12 - 56);
          __int128 v33 = *(_OWORD *)(v12 - 40);
          __int128 v34 = *(_OWORD *)(v12 - 24);
          uint64_t v35 = *((void *)v12 - 1);
          __int128 v28 = *(_OWORD *)(v12 - 120);
          __int128 v29 = *(_OWORD *)(v12 - 104);
          __int128 v30 = *(_OWORD *)(v12 - 88);
          __int128 v31 = *(_OWORD *)(v12 - 72);
          *(_OWORD *)buf = *(_OWORD *)(v12 - 152);
          __int128 v27 = *(_OWORD *)(v12 - 136);
          __int128 v13 = *(_OWORD *)v11;
          *(_OWORD *)(v12 - 136) = *(_OWORD *)(v11 + 16);
          *(_OWORD *)(v12 - 152) = v13;
          __int128 v14 = *(_OWORD *)(v11 + 32);
          __int128 v15 = *(_OWORD *)(v11 + 48);
          __int128 v16 = *(_OWORD *)(v11 + 64);
          *(_OWORD *)(v12 - 72) = *(_OWORD *)(v11 + 80);
          *(_OWORD *)(v12 - 88) = v16;
          *(_OWORD *)(v12 - 104) = v15;
          *(_OWORD *)(v12 - 120) = v14;
          __int128 v17 = *(_OWORD *)(v11 + 96);
          __int128 v18 = *(_OWORD *)(v11 + 112);
          __int128 v19 = *(_OWORD *)(v11 + 128);
          *((void *)v12 - 1) = *(void *)(v11 + 144);
          *(_OWORD *)(v12 - 24) = v19;
          *(_OWORD *)(v12 - 40) = v18;
          *(_OWORD *)(v12 - 56) = v17;
          *(_OWORD *)(v11 + 96) = v32;
          *(_OWORD *)(v11 + 112) = v33;
          *(_OWORD *)(v11 + 128) = v34;
          *(void *)(v11 + 144) = v35;
          *(_OWORD *)(v11 + 32) = v28;
          *(_OWORD *)(v11 + 48) = v29;
          *(_OWORD *)(v11 + 64) = v30;
          *(_OWORD *)(v11 + 80) = v31;
          *(_OWORD *)unint64_t v11 = *(_OWORD *)buf;
          *(_OWORD *)(v11 + 16) = v27;
          v11 -= 152LL;
          BOOL v20 = (unint64_t)v12 >= v11;
          v12 += 152;
        }

        while (!v20);
        uint64_t v10 = 100LL;
      }
    }
  }

  else
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    unint64_t v21 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "CLSwimPersistence,getEntries,unable to get entries,numberOfRecords,%d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      v25[0] = 67109120;
      v25[1] = a2;
      __int128 v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  16LL,  "CLSwimPersistence,getEntries,unable to get entries,numberOfRecords,%d",  v25);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLSwimPersistence::getEntries(int, std::vector<CLSwimEntry> &) const",  "%s\n",  v23);
    }

    uint64_t v10 = 109LL;
  }

  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return v10;
}

void sub_100A704A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A704D0(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v50 = 0LL;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v41 = 0u;
  sub_100405344(a1, v40);
  for (; !sub_100A71570(a2, (uint64_t)&v41); a3[1] = v15)
  {
    uuid_copy((unsigned __int8 *)&v42 + 8, v40);
    uint64_t v6 = (char *)a3[1];
    uint64_t v7 = (char *)a3[2];
    if (v6 >= v7)
    {
      unint64_t v16 = 0x86BCA1AF286BCA1BLL * ((v6 - (_BYTE *)*a3) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0x1AF286BCA1AF286LL) {
        sub_100007008();
      }
      unint64_t v18 = 0x86BCA1AF286BCA1BLL * ((v7 - (_BYTE *)*a3) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0xD79435E50D7943LL) {
        unint64_t v19 = 0x1AF286BCA1AF286LL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        BOOL v20 = (char *)sub_1005902BC((uint64_t)(a3 + 2), v19);
      }
      else {
        BOOL v20 = 0LL;
      }
      unint64_t v21 = &v20[152 * v16];
      __int128 v22 = v42;
      *(_OWORD *)unint64_t v21 = v41;
      *((_OWORD *)v21 + 1) = v22;
      __int128 v23 = v43;
      __int128 v24 = v44;
      __int128 v25 = v46;
      *((_OWORD *)v21 + 4) = v45;
      *((_OWORD *)v21 + 5) = v25;
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = v24;
      __int128 v26 = v47;
      __int128 v27 = v48;
      __int128 v28 = v49;
      *((void *)v21 + 18) = v50;
      *((_OWORD *)v21 + 7) = v27;
      *((_OWORD *)v21 + 8) = v28;
      *((_OWORD *)v21 + 6) = v26;
      __int128 v30 = (char *)*a3;
      __int128 v29 = (char *)a3[1];
      __int128 v31 = v21;
      if (v29 != *a3)
      {
        do
        {
          __int128 v32 = *(_OWORD *)(v29 - 152);
          *(_OWORD *)(v31 - 136) = *(_OWORD *)(v29 - 136);
          *(_OWORD *)(v31 - 152) = v32;
          __int128 v33 = *(_OWORD *)(v29 - 120);
          __int128 v34 = *(_OWORD *)(v29 - 104);
          __int128 v35 = *(_OWORD *)(v29 - 88);
          *(_OWORD *)(v31 - 72) = *(_OWORD *)(v29 - 72);
          *(_OWORD *)(v31 - 88) = v35;
          *(_OWORD *)(v31 - 104) = v34;
          *(_OWORD *)(v31 - 120) = v33;
          __int128 v36 = *(_OWORD *)(v29 - 56);
          __int128 v37 = *(_OWORD *)(v29 - 40);
          __int128 v38 = *(_OWORD *)(v29 - 24);
          *((void *)v31 - 1) = *((void *)v29 - 1);
          *(_OWORD *)(v31 - 24) = v38;
          *(_OWORD *)(v31 - 40) = v37;
          *(_OWORD *)(v31 - 56) = v36;
          v31 -= 152;
          v29 -= 152;
        }

        while (v29 != v30);
        __int128 v29 = (char *)*a3;
      }

      __int128 v15 = v21 + 152;
      *a3 = v31;
      a3[1] = v21 + 152;
      a3[2] = &v20[152 * v19];
      if (v29) {
        operator delete(v29);
      }
    }

    else
    {
      __int128 v8 = v42;
      *(_OWORD *)uint64_t v6 = v41;
      *((_OWORD *)v6 + 1) = v8;
      __int128 v9 = v43;
      __int128 v10 = v44;
      __int128 v11 = v46;
      *((_OWORD *)v6 + 4) = v45;
      *((_OWORD *)v6 + 5) = v11;
      *((_OWORD *)v6 + 2) = v9;
      *((_OWORD *)v6 + 3) = v10;
      __int128 v12 = v47;
      __int128 v13 = v48;
      __int128 v14 = v49;
      *((void *)v6 + 18) = v50;
      *((_OWORD *)v6 + 7) = v13;
      *((_OWORD *)v6 + 8) = v14;
      *((_OWORD *)v6 + 6) = v12;
      __int128 v15 = v6 + 152;
    }
  }

  return sub_1003C05BC(*(void *)(a1 + 80));
}

uint64_t sub_100A7075C(uint64_t a1, const unsigned __int8 *a2, void **a3)
{
  sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from SwimHistory WHERE uuid = ?", buf);
  uint64_t v6 = *(void *)buf;
  uint64_t v13 = *(void *)buf;
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003BC1F0(v7, 1, out))
  {
    sub_100A704D0(a1, &v13, a3);
    uint64_t v8 = 100LL;
    if (!v6) {
      return v8;
    }
    goto LABEL_12;
  }

  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10186A848);
  }
  __int128 v9 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = out;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "CLSwimPersistence,unable to get entries for uuid %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    int v14 = 136446210;
    __int128 v15 = out;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "CLSwimPersistence,unable to get entries for uuid %{public}s",  &v14,  12);
    __int128 v12 = (char *)v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLSwimPersistence::getEntries(unsigned char *, std::vector<CLSwimEntry> &) const",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  uint64_t v8 = 109LL;
  if (v6) {
LABEL_12:
  }
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  return v8;
}

void sub_100A709A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A709CC(uint64_t *a1, uint64_t a2, void **a3)
{
  if (uuid_is_null((const unsigned __int8 *)(a2 + 24)) || uuid_compare(uu1, (const unsigned __int8 *)(a2 + 24)))
  {
    (*(void (**)(uint64_t *, void **))(*a1 + 40))(a1, a3);
    return 100LL;
  }

  else
  {
    sub_1003C0D54(a1[10], "SELECT * from SwimHistory WHERE id >= ?", buf);
    uint64_t v8 = *(void *)buf;
    uint64_t v15 = *(void *)buf;
    __int128 v9 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003C2D24(v9, 1, *(void *)a2))
    {
      sub_100A704D0((uint64_t)a1, &v15, a3);
      uint64_t v6 = 100LL;
    }

    else
    {
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      __int128 v10 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
      {
        sqlite3_int64 v11 = *(void *)a2;
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "CLSwimPersistence, querySince, failed to bind id in query, %{public}llu",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10186A848);
        }
        sqlite3_int64 v12 = *(void *)a2;
        int v16 = 134349056;
        sqlite3_int64 v17 = v12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "CLSwimPersistence, querySince, failed to bind id in query, %{public}llu",  &v16,  12);
        int v14 = (char *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLSwimPersistence::querySince(const CLSwimEntry &, std::vector<CLSwimEntry> &) const",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }

      uint64_t v6 = 107LL;
    }

    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  return v6;
}

void sub_100A70C50(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A70C7C(void *a1, uint64_t a2)
{
  uint64_t v5 = a1 + 14;
  uint64_t v4 = a1[14];
  sqlite3_int64 v12 = a1 + 14;
  (*(void (**)(void *))(v4 + 16))(a1 + 14);
  __int16 v13 = 256;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(void *)(a2 + 144) = 0LL;
  int v6 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104LL))(a1, a2);
  if (v6)
  {
    if (v6 != 1)
    {
      uint64_t v8 = 109LL;
      goto LABEL_10;
    }

    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    uint64_t v7 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "#Warning returning default entry after querying empty db for most recent lap",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      __int16 v11 = 0;
      __int128 v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  1LL,  "#Warning returning default entry after querying empty db for most recent lap",  &v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLSwimPersistence::getMostRecentLap(CLSwimEntry &) const",  "%s\n",  v10);
    }
  }

  uint64_t v8 = 100LL;
LABEL_10:
  (*(void (**)(void *))(*v5 + 24LL))(v5);
  return v8;
}

void sub_100A70E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100A70EB4(uint64_t *a1, uint64_t a2, char **a3)
{
  if (uuid_is_null((const unsigned __int8 *)(a2 + 24)) && uuid_compare(uu, (const unsigned __int8 *)(a2 + 8)))
  {
    uuid_copy(dst, (const unsigned __int8 *)(a2 + 8));
    return sub_100A7075C((uint64_t)a1, dst, (void **)a3);
  }

  else
  {
    uint64_t v6 = sub_100A709CC(a1, a2, (void **)a3);
    if ((_DWORD)v6 == 100)
    {
      if (*a3 == a3[1])
      {
        uint64_t v51 = 0LL;
        __int128 v49 = 0u;
        __int128 v50 = 0u;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        __int128 v43 = 0u;
        __int128 v44 = 0u;
        *(_OWORD *)uuid_t dst = 0u;
        uint64_t v6 = sub_100A70C7C(a1, (uint64_t)dst);
        if ((_DWORD)v6 == 100)
        {
          sub_100405344((uint64_t)a1, v41);
          uuid_copy((unsigned __int8 *)&v43 + 8, v41);
          uint64_t v7 = a3[2];
          uint64_t v8 = a3[1];
          if (v8 >= v7)
          {
            unint64_t v17 = 0x86BCA1AF286BCA1BLL * ((v8 - *a3) >> 3);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0x1AF286BCA1AF286LL) {
              sub_100007008();
            }
            unint64_t v19 = 0x86BCA1AF286BCA1BLL * ((v7 - *a3) >> 3);
            if (2 * v19 > v18) {
              unint64_t v18 = 2 * v19;
            }
            if (v19 >= 0xD79435E50D7943LL) {
              unint64_t v20 = 0x1AF286BCA1AF286LL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20) {
              unint64_t v21 = (char *)sub_1005902BC((uint64_t)(a3 + 2), v20);
            }
            else {
              unint64_t v21 = 0LL;
            }
            __int128 v22 = &v21[152 * v17];
            __int128 v23 = &v21[152 * v20];
            __int128 v24 = v43;
            *(_OWORD *)__int128 v22 = *(_OWORD *)dst;
            *((_OWORD *)v22 + 1) = v24;
            __int128 v25 = v44;
            __int128 v26 = v45;
            __int128 v27 = v47;
            *((_OWORD *)v22 + 4) = v46;
            *((_OWORD *)v22 + 5) = v27;
            *((_OWORD *)v22 + 2) = v25;
            *((_OWORD *)v22 + 3) = v26;
            __int128 v28 = v48;
            __int128 v29 = v49;
            __int128 v30 = v50;
            *((void *)v22 + 18) = v51;
            *((_OWORD *)v22 + 7) = v29;
            *((_OWORD *)v22 + 8) = v30;
            *((_OWORD *)v22 + 6) = v28;
            int v16 = v22 + 152;
            __int128 v32 = *a3;
            __int128 v31 = a3[1];
            if (v31 != *a3)
            {
              do
              {
                __int128 v33 = *(_OWORD *)(v31 - 152);
                *(_OWORD *)(v22 - 136) = *(_OWORD *)(v31 - 136);
                *(_OWORD *)(v22 - 152) = v33;
                __int128 v34 = *(_OWORD *)(v31 - 120);
                __int128 v35 = *(_OWORD *)(v31 - 104);
                __int128 v36 = *(_OWORD *)(v31 - 88);
                *(_OWORD *)(v22 - 72) = *(_OWORD *)(v31 - 72);
                *(_OWORD *)(v22 - 88) = v36;
                *(_OWORD *)(v22 - 104) = v35;
                *(_OWORD *)(v22 - 120) = v34;
                __int128 v37 = *(_OWORD *)(v31 - 56);
                __int128 v38 = *(_OWORD *)(v31 - 40);
                __int128 v39 = *(_OWORD *)(v31 - 24);
                *((void *)v22 - 1) = *((void *)v31 - 1);
                *(_OWORD *)(v22 - 24) = v39;
                *(_OWORD *)(v22 - 40) = v38;
                *(_OWORD *)(v22 - 56) = v37;
                v22 -= 152;
                v31 -= 152;
              }

              while (v31 != v32);
              __int128 v31 = *a3;
            }

            *a3 = v22;
            a3[1] = v16;
            a3[2] = v23;
            if (v31) {
              operator delete(v31);
            }
          }

          else
          {
            __int128 v9 = v43;
            *(_OWORD *)uint64_t v8 = *(_OWORD *)dst;
            *((_OWORD *)v8 + 1) = v9;
            __int128 v10 = v44;
            __int128 v11 = v45;
            __int128 v12 = v47;
            *((_OWORD *)v8 + 4) = v46;
            *((_OWORD *)v8 + 5) = v12;
            *((_OWORD *)v8 + 2) = v10;
            *((_OWORD *)v8 + 3) = v11;
            __int128 v13 = v48;
            __int128 v14 = v49;
            __int128 v15 = v50;
            *((void *)v8 + 18) = v51;
            *((_OWORD *)v8 + 7) = v14;
            *((_OWORD *)v8 + 8) = v15;
            *((_OWORD *)v8 + 6) = v13;
            int v16 = v8 + 152;
          }

          a3[1] = v16;
        }
      }

      else
      {
        return 100LL;
      }
    }
  }

  return v6;
}

uint64_t sub_100A711A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_1003C0454(a1[10]);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    while (v5 != v6)
    {
      (*(void (**)(uint64_t *, uint64_t, void))(*a1 + 120))(a1, v5, 0LL);
      v5 += 152LL;
    }

    return sub_1003C05BC(a1[10]);
  }

  return result;
}

uint64_t sub_100A7121C(uint64_t a1, void *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A71250(a1, a2, Current);
  return 0LL;
}

uint64_t sub_100A71250(uint64_t a1, void *a2, double a3)
{
  if (*a2 != a2[1] && sub_100D8A92C(a1 + 72))
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE from SwimHistory WHERE startTime < ?", buf);
    uint64_t v6 = *(void *)buf;
    uint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (!sub_1003B7480(v7, 1, a3 - *(double *)(a2[1] - 24LL))
      || (uint64_t v8 = *(void *)(a1 + 80), v9 = (sqlite3_stmt *)sub_100019240(v6), !sub_1003BB2BC(v8, v9)))
    {
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      __int128 v10 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "CLSwimPersistence, aggregateRecordsInternal, unable to purge records.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10186A848);
        }
        v14[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  16LL,  "CLSwimPersistence, aggregateRecordsInternal, unable to purge records.",  v14,  2);
        __int128 v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "long CLSwimPersistence::aggregateRecordsInternal(const CLAggregationRules &, CFAbsoluteTime)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }
    }

    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return 0LL;
}

void sub_100A71474(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A714A0(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 - 72;
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A71250(v3, a2, Current);
  return 0LL;
}

uint64_t sub_100A714D4(uint64_t a1, void **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from SwimHistory", &v6);
    uint64_t v5 = v6;
    uint64_t v7 = v6;
    uint64_t result = sub_100A704D0(a1, &v7, a2);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100A71550(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A71570(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int64(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  uint64_t v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 8));
  __int128 v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 2);
  __int128 v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 3);
  __int128 v11 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 4);
  __int128 v12 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 5);
  __int128 v13 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 6);
  __int128 v14 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v14, 7);
  __int128 v15 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 96) = sqlite3_column_int(v15, 8);
  int v16 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 100) = sqlite3_column_int(v16, 9);
  unint64_t v17 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v17, 10);
  unint64_t v18 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 108) = sqlite3_column_int(v18, 11);
  unint64_t v19 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 120) = sqlite3_column_int(v19, 12);
  unint64_t v20 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v20, 13);
  unint64_t v21 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 136) = sqlite3_column_double(v21, 14);
  __int128 v22 = (sqlite3_stmt *)sub_100019240(*a1);
  double v23 = sqlite3_column_double(v22, 15);
  uint64_t result = 0LL;
  *(_DWORD *)(a2 + 144) = (int)v23;
  return result;
}

uint64_t sub_100A71708(uint64_t *a1)
{
  uint64_t result = sub_1003C1048(a1[10]);
  if ((_DWORD)result)
  {
    sub_100A71794((uint64_t)a1);
    sub_1003B59A0( a1[10],  "SwimHistory",  (const char **)&off_10186A868,  (const std::string::value_type **)&off_10198F2B8,  0);
    sub_1003B59A0( a1[10],  "SwimDistributions",  (const char **)&off_10186AB98,  (const std::string::value_type **)&off_10198F2C8,  0);
    uint64_t result = sub_1003BF158(a1[10], "SELECT * from SwimHistory ORDER BY rowid DESC LIMIT 1");
    a1[57] = result;
    a1[58] = v3;
  }

  return result;
}

uint64_t sub_100A71794(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "SwimHistory");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    uint64_t v8 = "segment";
    do
    {
      __int128 v42 = v8;
      int v43 = 5;
      __int16 v44 = 0;
      char v45 = 0;
      char v46 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "SwimHistory", v8, (uint64_t)&v42) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v38);
        __int128 v9 = sub_10000CF44(&v39, (uint64_t)"ALTER TABLE ", 12LL);
        __int128 v10 = sub_10000CF44(v9, (uint64_t)"SwimHistory", 11LL);
        __int128 v11 = sub_10000CF44(v10, (uint64_t)" ADD COLUMN ", 12LL);
        size_t v12 = strlen(v8);
        __int128 v13 = sub_10000CF44(v11, (uint64_t)v8, v12);
        __int128 v14 = sub_10000CF44(v13, (uint64_t)" ", 1LL);
        __int128 v15 = (const char *)sub_1003BCC40((int)(&off_10186A868)[v3 + 73]);
        size_t v16 = strlen(v15);
        unint64_t v17 = sub_10000CF44(v14, (uint64_t)v15, v16);
        sub_10000CF44(v17, (uint64_t)";", 1LL);
        uint64_t v18 = *(void *)(a1 + 80);
        std::stringbuf::str(&v35, &v40);
        if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v19 = &v35;
        }
        else {
          unint64_t v19 = (std::stringbuf::string_type *)v35.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v18, (char *)v19, &v33);
        uint64_t v20 = v33.__r_.__value_.__r.__words[0];
        v33.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v21 = *(void *)(a1 + 80);
        __int128 v22 = (sqlite3_stmt *)sub_100019240(v20);
        sub_1003BB2BC(v21, v22);
        sub_10000CE18((uint64_t)&v35);
        double v23 = sub_10000CF44(&v35.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE ", 7LL);
        __int128 v24 = sub_10000CF44(v23, (uint64_t)"SwimHistory", 11LL);
        __int128 v25 = sub_10000CF44(v24, (uint64_t)" SET ", 5LL);
        size_t v26 = strlen(v8);
        __int128 v27 = sub_10000CF44(v25, (uint64_t)v8, v26);
        sub_10000CF44(v27, (uint64_t)" = 0;", 5LL);
        uint64_t v28 = *(void *)(a1 + 80);
        std::stringbuf::str(&v33, &v36);
        if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v29 = &v33;
        }
        else {
          __int128 v29 = (std::stringbuf::string_type *)v33.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v28, (char *)v29, &v34);
        uint64_t v30 = v34;
        uint64_t v34 = 0LL;
        uint64_t v31 = *(void *)(a1 + 80);
        __int128 v32 = (sqlite3_stmt *)sub_100019240(v30);
        sub_1003BB2BC(v31, v32);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
        }
        v35.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + *(void *)(v5 - sub_100008390(v2, *(void **)(v1 + 24)) = v7;
        v35.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        }
        v38[0] = v5;
        *(void *)((char *)v38 + *(void *)(v5 - sub_100008390(v2, *(void **)(v1 + 24)) = v7;
        std::string::size_type v39 = v6;
        std::streambuf::~streambuf(&v40);
        std::ios::~ios(&v41);
        int v4 = 1;
      }

      uint64_t v8 = (&off_10186A868)[v3 + 78];
      v3 += 6LL;
    }

    while (v3 != 24);
    uint64_t result = sub_100A72244( a1,  "SwimHistory",  (const char **)&off_10186A868,  (const std::string::value_type **)&off_10198F2B8);
  }

  return result;
}

void sub_100A71B78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8LL))(v61);
  }
  sub_1011F8850((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_100A71C10(uint64_t a1)
{
  uint64_t v2 = v6;
  uint64_t v3 = *(void *)(a1 + 80);
  int v4 = (sqlite3_stmt *)sub_100019240(v6);
  uint64_t result = sub_1003BB2BC(v3, v4);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return result;
}

void sub_100A71C78(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A71C98(uint64_t a1)
{
  return sub_100A71C10(a1 - 72);
}

void sub_100A71CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)buf;
  uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
  std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(v4);
  if (!sub_1003BC1F0(v5, 1, out)) {
    goto LABEL_17;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(v4);
  std::string::size_type v7 = (sqlite3_stmt *)sub_100019240(v4);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(v4);
  __int128 v9 = (sqlite3_stmt *)sub_100019240(v4);
  __int128 v10 = (sqlite3_stmt *)sub_100019240(v4);
  __int128 v11 = (sqlite3_stmt *)sub_100019240(v4);
  size_t v12 = (sqlite3_stmt *)sub_100019240(v4);
  if (!sub_1003C28BC(v12, 8, *(_DWORD *)(a2 + 96))) {
    goto LABEL_17;
  }
  __int128 v13 = (sqlite3_stmt *)sub_100019240(v4);
  if (!sub_1003C28BC(v13, 9, *(_DWORD *)(a2 + 100))) {
    goto LABEL_17;
  }
  __int128 v14 = (sqlite3_stmt *)sub_100019240(v4);
  if (!sub_1003C28BC(v14, 10, *(_DWORD *)(a2 + 104))
    || (__int128 v15 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003C28BC(v15, 11, *(_DWORD *)(a2 + 108)))
    || (size_t v16 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003C28BC(v16, 12, *(_DWORD *)(a2 + 120)))
    || (unint64_t v17 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v17, 13, *(double *)(a2 + 128)))
    || (uint64_t v18 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v18, 14, *(double *)(a2 + 136)))
    || (unint64_t v19 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003C28BC(v19, 15, *(_DWORD *)(a2 + 144)))
    || (uint64_t v20 = *(void *)(a1 + 80), v21 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003BB2BC(v20, v21)))
  {
LABEL_17:
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    __int128 v22 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "CLSwimPersistance, unable to insert swim record.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      v25[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "CLSwimPersistance, unable to insert swim record.",  v25,  2);
      __int128 v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLSwimPersistence::insertRecordUL(const CLSwimEntry &, BOOL)",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
    }
  }

  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
}

void sub_100A71FF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A72024()
{
  return 0LL;
}

uint64_t sub_100A7202C(uint64_t a1, uint64_t a2)
{
  if (v11)
  {
    uint64_t v4 = sub_100A71570(&v11, a2);
  }

  else
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    std::string::size_type v5 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "SwimPersistence: failed to prepare getMostRecent #InvalidPreparedSQLStatement",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      __int16 v10 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "SwimPersistence: failed to prepare getMostRecent #InvalidPreparedSQLStatement",  &v10,  2);
      __int128 v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLActivityDB::ActivityCode CLSwimPersistence::getMostRecentRecordUL(CLSwimEntry &) const",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    uint64_t v4 = 2LL;
  }

  uint64_t v6 = v11;
  uint64_t v11 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return v4;
}

void sub_100A72214( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A72244(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186AF30);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLSwimEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    __int128 v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int32 v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__n128 v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    __int128 v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      size_t v16 = v143;
    }
    else {
      size_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      uint64_t v21 = &__p;
    }
    else {
      uint64_t v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    __int128 v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    size_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      size_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v27 = &__p;
      }
      else {
        __int128 v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v139;
    }
    else {
      uint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v41 = &__p;
    }
    else {
      uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    __int128 v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    char v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v47 = &__p;
      }
      else {
        __int128 v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      __int128 v48 = v143;
    }
    else {
      __int128 v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    __int128 v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v54 = buf;
    }
    else {
      __int128 v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    __int128 v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v60 = buf;
    }
    else {
      __int128 v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int128 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v69 = &__p;
    }
    else {
      __int128 v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    __int128 v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v75 = &__p;
      }
      else {
        __int128 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    __int128 v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      __int128 v79 = &__p;
    }
    else {
      __int128 v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v85 = &__p;
      }
      else {
        v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      int v86 = v143;
    }
    else {
      int v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    uint64_t v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int64_t v95 = &__p;
    }
    else {
      int64_t v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    int64_t v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      int v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v103 = &__p;
        }
        else {
          v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        __int128 v104 = v141;
      }
      else {
        __int128 v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      __int128 v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      int v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      int64_t v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v114 = buf;
      }
      else {
        v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      uint64_t v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      int v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v121 = &__p;
      }
      else {
        __int128 v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      __int128 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
      }
      __n128 v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186AF30);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        __int128 v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLSwimEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
      }
      __n128 v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186AF30);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        __int128 v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<CLSwimEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100A733DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_100A736FC(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  std::string __p = 0LL;
  std::string::size_type v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v7 = a1 + 112;
  uint64_t v6 = *(void *)(a1 + 112);
  v16[1] = a1 + 112;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  __int16 v17 = 256;
  if ((sub_100D8A92C(v7 - 40) & 1) != 0)
  {
    uuid_unparse(a2, out);
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from SwimHistory WHERE uuid = ? ORDER BY id ASC", buf);
    uint64_t v8 = *(void *)buf;
    v16[0] = *(void *)buf;
    __int128 v9 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003BC1F0(v9, 1, out))
    {
      sub_100A704D0(a1, v16, &__p);
      *(_DWORD *)a3 = 100;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 8) = 0LL;
      sub_100A74F40((void *)(a3 + 8), __p, (uint64_t)v19, 0x86BCA1AF286BCA1BLL * ((v19 - (_BYTE *)__p) >> 3));
    }

    else
    {
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      uint64_t v11 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = out;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "Unable to get entries for sessionID %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10186A848);
        }
        int v21 = 136446210;
        __int128 v22 = out;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "Unable to get entries for sessionID %{public}s",  &v21,  12);
        __int128 v15 = (char *)v14;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::pair<CMError, std::vector<CLSwimEntry>> CLSwimPersistence::getAllRecordsForSessionId(unsigned char *) const",  "%s\n",  v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      *(_DWORD *)a3 = 109;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + 8) = 0LL;
      sub_100A74F40((void *)(a3 + 8), 0LL, 0LL, 0LL);
    }

    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  else
  {
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10186A848);
    }
    __int128 v10 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "DB, not accessible", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10186A848);
      }
      *(_WORD *)uuid_string_t out = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "DB, not accessible",  out,  2);
      __int128 v13 = (char *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::pair<CMError, std::vector<CLSwimEntry>> CLSwimPersistence::getAllRecordsForSessionId(unsigned char *) const",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    *(_DWORD *)a3 = 109;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 8) = 0LL;
    sub_100A74F40((void *)(a3 + 8), 0LL, 0LL, 0LL);
  }

  (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  if (__p)
  {
    std::string::size_type v19 = __p;
    operator delete(__p);
  }

void sub_100A73B2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  sub_1011C52D0((uint64_t)&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100A73B98(void *a1, void **a2, double a3, double a4)
{
  uint64_t v8 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v57);
  if ((SHIBYTE(v58) & 0x80000000) == 0)
  {
    if (HIBYTE(v58)) {
      goto LABEL_3;
    }
LABEL_39:
    sub_10125A638(v8);
    __break(1u);
  }

  __int128 v52 = v57[1];
  operator delete(v57[0]);
  if (!v52) {
    goto LABEL_39;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v57);
  __int128 v9 = sub_10000CF44(&v58, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(__int128 *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((SBYTE7(v62) & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (__int128 *)__p;
  }
  if ((SBYTE7(v62) & 0x80u) == 0) {
    uint64_t v11 = BYTE7(v62);
  }
  else {
    uint64_t v11 = *((void *)&__p + 1);
  }
  __int128 v12 = sub_10000CF44(v9, (uint64_t)p_p, v11);
  sub_10000CF44(v12, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v62) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v13 = a1[10];
  std::stringbuf::str((std::stringbuf::string_type *)&__p, &v59);
  if ((SBYTE7(v62) & 0x80u) == 0) {
    __int128 v14 = (char *)&__p;
  }
  else {
    __int128 v14 = (char *)__p;
  }
  sub_1003C0D54(v13, v14, &v55);
  uint64_t v15 = v55;
  uint64_t v55 = 0LL;
  uint64_t v56 = v15;
  if (SBYTE7(v62) < 0) {
    operator delete((void *)__p);
  }
  size_t v16 = (sqlite3_stmt *)sub_100019240(v15);
  if (sub_1003B7480(v16, 1, a3) && (uint64_t v17 = (sqlite3_stmt *)sub_100019240(v15), sub_1003B7480(v17, 2, a4)))
  {
    while (1)
    {
      uint64_t v18 = sub_1001BA11C((uint64_t)a1, &v56, (uint64_t)&__p);
      if ((_DWORD)v18) {
        break;
      }
      std::string::size_type v19 = (char *)a2[1];
      uint64_t v20 = (char *)a2[2];
      if (v19 >= v20)
      {
        unint64_t v29 = 0x86BCA1AF286BCA1BLL * ((v19 - (_BYTE *)*a2) >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0x1AF286BCA1AF286LL) {
          sub_100007008();
        }
        unint64_t v31 = 0x86BCA1AF286BCA1BLL * ((v20 - (_BYTE *)*a2) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0xD79435E50D7943LL) {
          unint64_t v32 = 0x1AF286BCA1AF286LL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          __int128 v33 = (char *)sub_1005902BC((uint64_t)(a2 + 2), v32);
        }
        else {
          __int128 v33 = 0LL;
        }
        uint64_t v34 = &v33[152 * v29];
        __int128 v35 = v62;
        *(_OWORD *)uint64_t v34 = __p;
        *((_OWORD *)v34 + 1) = v35;
        __int128 v36 = v63;
        __int128 v37 = v64;
        __int128 v38 = v66;
        *((_OWORD *)v34 + 4) = v65;
        *((_OWORD *)v34 + 5) = v38;
        *((_OWORD *)v34 + 2) = v36;
        *((_OWORD *)v34 + 3) = v37;
        __int128 v39 = v67;
        __int128 v40 = v68;
        __int128 v41 = v69;
        *((void *)v34 + 18) = v70;
        *((_OWORD *)v34 + 7) = v40;
        *((_OWORD *)v34 + 8) = v41;
        *((_OWORD *)v34 + 6) = v39;
        int v43 = (char *)*a2;
        __int128 v42 = (char *)a2[1];
        std::string::size_type v44 = v34;
        if (v42 != *a2)
        {
          do
          {
            __int128 v45 = *(_OWORD *)(v42 - 152);
            *(_OWORD *)(v44 - 136) = *(_OWORD *)(v42 - 136);
            *(_OWORD *)(v44 - 152) = v45;
            __int128 v46 = *(_OWORD *)(v42 - 120);
            __int128 v47 = *(_OWORD *)(v42 - 104);
            __int128 v48 = *(_OWORD *)(v42 - 88);
            *(_OWORD *)(v44 - 72) = *(_OWORD *)(v42 - 72);
            *(_OWORD *)(v44 - 88) = v48;
            *(_OWORD *)(v44 - 104) = v47;
            *(_OWORD *)(v44 - 120) = v46;
            __int128 v49 = *(_OWORD *)(v42 - 56);
            __int128 v50 = *(_OWORD *)(v42 - 40);
            __int128 v51 = *(_OWORD *)(v42 - 24);
            *((void *)v44 - 1) = *((void *)v42 - 1);
            *(_OWORD *)(v44 - 24) = v51;
            *(_OWORD *)(v44 - 40) = v50;
            *(_OWORD *)(v44 - 56) = v49;
            v44 -= 152;
            v42 -= 152;
          }

          while (v42 != v43);
          __int128 v42 = (char *)*a2;
        }

        uint64_t v28 = v34 + 152;
        *a2 = v44;
        a2[1] = v34 + 152;
        a2[2] = &v33[152 * v32];
        if (v42) {
          operator delete(v42);
        }
      }

      else
      {
        __int128 v21 = v62;
        *(_OWORD *)std::string::size_type v19 = __p;
        *((_OWORD *)v19 + 1) = v21;
        __int128 v22 = v63;
        __int128 v23 = v64;
        __int128 v24 = v66;
        *((_OWORD *)v19 + 4) = v65;
        *((_OWORD *)v19 + 5) = v24;
        *((_OWORD *)v19 + 2) = v22;
        *((_OWORD *)v19 + 3) = v23;
        __int128 v25 = v67;
        __int128 v26 = v68;
        __int128 v27 = v69;
        *((void *)v19 + 18) = v70;
        *((_OWORD *)v19 + 7) = v26;
        *((_OWORD *)v19 + 8) = v27;
        *((_OWORD *)v19 + 6) = v25;
        uint64_t v28 = v19 + 152;
      }

      a2[1] = v28;
    }

    uint64_t v15 = v56;
  }

  else
  {
    uint64_t v18 = 2LL;
  }

  uint64_t v56 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  *(void **)((char *)v57
  uint64_t v58 = v53;
  std::streambuf::~streambuf(&v59);
  std::ios::~ios(&v60);
  return v18;
}

void sub_100A73FA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100A74014(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186AF30);
    }
    std::string::size_type v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)std::string::size_type v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186AF30);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLSwimEntry>::setDatabaseAccessible() [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186AF30);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    size_t v16 = (void *)(v14 + 8 * (v13 / 0x1A));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 152 * (v13 % 0x1A);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x1A)) + 152 * (v22 % 0x1A);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186AF50);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186AF50);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        __int128 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLSwimEntry>::setDatabaseAccessible() [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 152LL;
      if (v17 - *v16 == 3952)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186AF30);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      std::string::size_type v19 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
      }
    }

    uint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::string::size_type v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      __int128 v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  uint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      uint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 13LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 26LL;
  }

  *(void *)(a1 + 208) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100A74748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

id *sub_100A7477C(uint64_t a1, uint64_t a2, char a3)
{
  v38[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v38[1] = 0LL;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v38);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 104LL))(a1, v47);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186AF30);
        }
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v39,  2);
        size_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, Da taProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)(a2 + 40);
    double v8 = v48;
    double v9 = v7 - v48;
    if (v7 - v48 < 0.0) {
      double v9 = -(v7 - v48);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 40);
        *(_DWORD *)buf = 134349312;
        double v44 = v48;
        __int16 v45 = 2050;
        uint64_t v46 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186AF30);
        }
        uint64_t v29 = *(void *)(a2 + 40);
        int v39 = 134349312;
        double v40 = v48;
        __int16 v41 = 2050;
        uint64_t v42 = v29;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v39,  22);
        uint64_t v31 = (uint8_t *)v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, Da taProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v30);
        if (v31 != buf) {
          free(v31);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)(a2 + 40);
      double v8 = v48;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186AF30);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 40);
          *(_DWORD *)buf = 134217984;
          double v44 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186AF30);
          }
          double v32 = *(double *)(a2 + 40);
          int v39 = 134217984;
          double v40 = v32;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v39));
          uint64_t v34 = (uint8_t *)v33;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v33);
          if (v34 != buf) {
            free(v34);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v37 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10186AF30);
        double v18 = v37;
      }

      double v19 = v17 - v18;
      uint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v44 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186AF30);
        }
        int v39 = 134217984;
        double v40 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v39));
        __int128 v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, Da taProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, v47, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100A74EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100A74F0C(uint64_t a1)
{
  return sub_100A74014(a1 - 72);
}

void sub_100A74F14(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void *sub_100A74F40(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100A74FB8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100A74F9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100A74FB8(void *a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287LL) {
    sub_100007008();
  }
  uint64_t result = (char *)sub_1005902BC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[152 * v4];
  return result;
}

uint64_t sub_100A7500C(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v51);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
    if (HIBYTE(v52)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10125A7A4(v4);
    __break(1u);
  }

  double v48 = v51[1];
  operator delete(v51[0]);
  if (!v48) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v51);
    int v6 = sub_10000CF44(&v52, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(v55, a1);
    if (v55[23] >= 0) {
      uint64_t v7 = v55;
    }
    else {
      uint64_t v7 = *(_BYTE **)v55;
    }
    if (v55[23] >= 0) {
      uint64_t v8 = v55[23];
    }
    else {
      uint64_t v8 = *(void *)&v55[8];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((v55[23] & 0x80000000) != 0) {
      operator delete(*(void **)v55);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)v55, &v53);
    if (v55[23] >= 0) {
      uint64_t v11 = v55;
    }
    else {
      uint64_t v11 = *(char **)v55;
    }
    sub_1003C0D54(v10, v11, &v49);
    uint64_t v12 = v49;
    uint64_t v49 = 0LL;
    uint64_t v50 = v12;
    if ((v55[23] & 0x80000000) != 0) {
      operator delete(*(void **)v55);
    }
    sub_1003C0454(a1[10]);
    while (!sub_1001BA11C((uint64_t)a1, &v50, (uint64_t)v55))
    {
      unint64_t v13 = (unint64_t)a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if (v13 >= v14)
      {
        unint64_t v23 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v13 - (void)*a2) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0x1AF286BCA1AF286LL) {
          sub_100007008();
        }
        unint64_t v25 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v14 - (void)*a2) >> 3);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0xD79435E50D7943LL) {
          unint64_t v26 = 0x1AF286BCA1AF286LL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26) {
          __int128 v27 = (char *)sub_1005902BC((uint64_t)(a2 + 2), v26);
        }
        else {
          __int128 v27 = 0LL;
        }
        uint64_t v28 = &v27[152 * v23];
        __int128 v29 = *(_OWORD *)&v55[16];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v55;
        *((_OWORD *)v28 + 1) = v29;
        __int128 v30 = v56;
        __int128 v31 = v57;
        __int128 v32 = v59;
        *((_OWORD *)v28 + 4) = v58;
        *((_OWORD *)v28 + 5) = v32;
        *((_OWORD *)v28 + 2) = v30;
        *((_OWORD *)v28 + 3) = v31;
        __int128 v33 = v60;
        __int128 v34 = v61;
        __int128 v35 = v62;
        *((void *)v28 + 18) = v63;
        *((_OWORD *)v28 + 7) = v34;
        *((_OWORD *)v28 + 8) = v35;
        *((_OWORD *)v28 + 6) = v33;
        double v37 = *a2;
        __int128 v36 = a2[1];
        uint64_t v38 = v28;
        if (v36 != *a2)
        {
          do
          {
            __int128 v39 = *(_OWORD *)(v36 - 152);
            *(_OWORD *)(v38 - 136) = *(_OWORD *)(v36 - 136);
            *(_OWORD *)(v38 - 152) = v39;
            __int128 v40 = *(_OWORD *)(v36 - 120);
            __int128 v41 = *(_OWORD *)(v36 - 104);
            __int128 v42 = *(_OWORD *)(v36 - 88);
            *(_OWORD *)(v38 - 72) = *(_OWORD *)(v36 - 72);
            *(_OWORD *)(v38 - 88) = v42;
            *(_OWORD *)(v38 - 104) = v41;
            *(_OWORD *)(v38 - 120) = v40;
            __int128 v43 = *(_OWORD *)(v36 - 56);
            __int128 v44 = *(_OWORD *)(v36 - 40);
            __int128 v45 = *(_OWORD *)(v36 - 24);
            *((void *)v38 - 1) = *((void *)v36 - 1);
            *(_OWORD *)(v38 - 24) = v45;
            *(_OWORD *)(v38 - 40) = v44;
            *(_OWORD *)(v38 - 56) = v43;
            v38 -= 152;
            v36 -= 152;
          }

          while (v36 != v37);
          __int128 v36 = *a2;
        }

        __int128 v22 = v28 + 152;
        *a2 = v38;
        a2[1] = v28 + 152;
        a2[2] = &v27[152 * v26];
        if (v36) {
          operator delete(v36);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)&v55[16];
        *(_OWORD *)unint64_t v13 = *(_OWORD *)v55;
        *(_OWORD *)(v13 + 16) = v15;
        __int128 v16 = v56;
        __int128 v17 = v57;
        __int128 v18 = v59;
        *(_OWORD *)(v13 + 64) = v58;
        *(_OWORD *)(v13 + 80) = v18;
        *(_OWORD *)(v13 + 32) = v16;
        *(_OWORD *)(v13 + 48) = v17;
        __int128 v19 = v60;
        __int128 v20 = v61;
        __int128 v21 = v62;
        *(void *)(v13 + 144) = v63;
        *(_OWORD *)(v13 + 112) = v20;
        *(_OWORD *)(v13 + 128) = v21;
        *(_OWORD *)(v13 + 96) = v19;
        __int128 v22 = (char *)(v13 + 152);
      }

      a2[1] = v22;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v46 = v50;
    uint64_t v50 = 0LL;
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
    }
    *(void **)((char *)v51
    uint64_t v52 = v47;
    std::streambuf::~streambuf(&v53);
    return std::ios::~ios(&v54);
  }

  return result;
}

void sub_100A753D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1011F8850((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A75440(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    __int128 v20 = (_Unwind_Exception *)sub_10125A910(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  __int128 v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 40)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100A756A0(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10125AA7C(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100A758D8(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10125ABE8(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  std::string::size_type v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100A75B00(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100A75B2C(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

BOOL sub_100A75B58(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7AE00(v2, a2);
}

void sub_100A75B68(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100A7D024(v2, a2);
}

BOOL sub_100A75B78(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0LL;
  }
  return *(_BYTE *)(v1 + 1373) && *(_DWORD *)(v1 + 400) == 0;
}

void *sub_100A75BA4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = (void *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A80B28(v2, a2);
}

void sub_100A75BB4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100A80CDC(v2, a2);
}

void sub_100A75BC4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = (void *)(a1 - 8);
  }
  else {
    uint64_t v3 = 0LL;
  }
  sub_100A818D8(v3);
  sub_100A80CDC((uint64_t)v3, a2);
}

BOOL sub_100A75BFC(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7B3E0(v2, a2);
}

uint64_t (***sub_100A75C0C(uint64_t a1, uint64_t a2))(void, uint8_t *)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7D4EC(v2, a2);
}

void sub_100A75C1C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100A7D694(v2, a2);
}

uint64_t sub_100A75C2C(uint64_t a1, int *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A8360C(v2, a2);
}

BOOL sub_100A75C3C(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0LL;
  }
  return *(_BYTE *)(v1 + 1372) && *(_DWORD *)(v1 + 400) == 0;
}

uint64_t sub_100A75C68(uint64_t a1)
{
  if (a1) {
    return sub_100A830F4(a1 - 8);
  }
  else {
    return sub_100A830F4(0LL);
  }
}

uint64_t sub_100A75C78(uint64_t a1)
{
  if (a1) {
    return sub_100A83A7C(a1 - 8);
  }
  else {
    return sub_100A83A7C(0LL);
  }
}

uint64_t sub_100A75C88(uint64_t a1)
{
  if (a1) {
    return sub_100A832A8(a1 - 8);
  }
  else {
    return sub_100A832A8(0LL);
  }
}

double sub_100A75C98(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7EAE8(v2, a2);
}

void sub_100A75CA8(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100A7ED4C(v2, a2);
}

void sub_100A75CB8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100A80158(v2, a2);
}

uint64_t sub_100A75CC8(uint64_t a1)
{
  if (a1) {
    return sub_100A7B970((void *)(a1 - 8));
  }
  else {
    return sub_100A7B970(0LL);
  }
}

uint64_t sub_100A75CD8(uint64_t a1)
{
  if (a1) {
    return sub_100A83EAC(a1 - 8);
  }
  else {
    return sub_100A83EAC(0LL);
  }
}

BOOL sub_100A75CE8(uint64_t a1)
{
  if (a1) {
    return sub_100A7C820(a1 - 8);
  }
  else {
    return sub_100A7C820(0LL);
  }
}

void sub_100A75CF8(uint64_t a1)
{
  if (a1) {
    sub_100A7D8B0((void *)(a1 - 8));
  }
  else {
    sub_100A7D8B0(0LL);
  }
}

BOOL sub_100A75D08(uint64_t a1)
{
  if (a1) {
    return sub_100A7CA04(a1 - 8);
  }
  else {
    return sub_100A7CA04(0LL);
  }
}

uint64_t sub_100A75D18(uint64_t a1)
{
  if (a1) {
    return sub_100A7BAD0(a1 - 8);
  }
  else {
    return sub_100A7BAD0(0LL);
  }
}

void *sub_100A75D28(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = (void *)(a1 - 8);
  }
  else {
    uint64_t v3 = 0LL;
  }
  sub_100A7E918((uint64_t)v3);
  return sub_100A80B28(v3, a2);
}

uint64_t sub_100A75D60(uint64_t a1, void *a2)
{
  return CLMotionActivity::isTypePedestrian( +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "CLMotionActivityTypeFromCMWorkoutType:",  *a2)) ^ 1;
}

void sub_100A75D88(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100A7FF88(v2, a2);
}

uint64_t sub_100A75D98(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7F03C(v2, a2);
}

uint64_t sub_100A75DA8(uint64_t a1, int *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A842DC(v2, a2);
}

double sub_100A75DB8(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A8474C(v2, a2);
}

double sub_100A75DC8(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A847C4(v2, a2);
}

double sub_100A75DD8(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7F224(v2, a2);
}

void sub_100A75DE8(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_100A7BC84(v2, a2);
}

BOOL sub_100A75DF8(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0LL;
  }
  return *(_BYTE *)(v1 + 1373) && *(_DWORD *)(v1 + 400) == 0;
}

uint64_t sub_100A75E24(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (void *)(a1 - 8);
  }
  else {
    uint64_t v1 = 0LL;
  }
  sub_100A7E918((uint64_t)v1);
  sub_100A803C0((uint64_t)v1);
  return sub_100A80580(v1);
}

uint64_t sub_100A75E64(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = (void *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7F9AC(v2, a2);
}

void *sub_100A75E74(uint64_t a1, int *a2)
{
  if (a1) {
    uint64_t v2 = (void *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7E428(v2, a2);
}

uint64_t sub_100A75E84(uint64_t a1)
{
  if (a1) {
    return sub_100A8483C((void *)(a1 - 8));
  }
  else {
    return sub_100A8483C(0LL);
  }
}

uint64_t sub_100A75E94(uint64_t a1)
{
  if (a1) {
    return sub_100A849F4((void *)(a1 - 8));
  }
  else {
    return sub_100A849F4(0LL);
  }
}

uint64_t sub_100A75EA4(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7C248(v2, a2);
}

uint64_t (***sub_100A75EB4(uint64_t a1))(void, uint8_t *)
{
  if (a1) {
    return sub_100A7CC74(a1 - 8);
  }
  else {
    return sub_100A7CC74(0LL);
  }
}

uint64_t sub_100A75EC4(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7C2D8(v2, a2);
}

uint64_t sub_100A75ED4(uint64_t a1)
{
  if (a1) {
    return sub_100A8511C(a1 - 8);
  }
  else {
    return sub_100A8511C(0LL);
  }
}

BOOL sub_100A75EE4(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_100A7C63C(v2, a2);
}

uint64_t sub_100A75EF4(uint64_t a1)
{
  if (a1) {
    return sub_100A85B88(a1 - 8);
  }
  else {
    return sub_100A85B88(0LL);
  }
}

void sub_100A75F04(uint64_t a1)
{
  if (a1) {
    sub_100A85D78(a1 - 8);
  }
  else {
    sub_100A85D78(0LL);
  }
}

uint64_t sub_100A75F14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  *(void *)(a1 + 8) = &unk_10186AF70;
  *(void *)(a1 + 16) = 68LL;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_10186B5E0;
  uint64_t v9 = (void *)(a1 + 32);
  sub_100CDB3D4(a1 + 32);
  *(_BYTE *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = 0xBFF0000000000000LL;
  *(void *)(a1 + 488) = 0LL;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  int64x2_t v10 = vdupq_n_s64(0x1AuLL);
  *(int64x2_t *)(a1 + 624) = v10;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 672) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 688) = 0x10000000000000LL;
  *(_DWORD *)(a1 + 704) = 0x7FFFFFFF;
  *(void *)(a1 + 712) = 0LL;
  *(void *)(a1 + 720) = 0x10000000000000LL;
  *(_OWORD *)(a1 + 793) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(void *)(a1 + 832) = 0LL;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 840) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 848) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 856) = 23LL;
  *(void *)(a1 + 864) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 952) = 26LL;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(int64x2_t *)(a1 + 1104) = v10;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(void *)(a1 + 1144) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1152) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1168) = 0x10000000000000LL;
  *(_DWORD *)(a1 + 1184) = 0x7FFFFFFF;
  *(void *)(a1 + 1192) = 0LL;
  *(void *)(a1 + 1200) = 0x10000000000000LL;
  *(_OWORD *)(a1 + 1273) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_BYTE *)(a1 + 1320) = 0;
  *(void *)(a1 + 1312) = 0LL;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(void *)(a1 + 1344) = 0LL;
  *(_OWORD *)(a1 + 1328) = 0u;
  sub_100FA2EDC(a1 + 1352, v9);
  *(_DWORD *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1372) = 257;
  *(_BYTE *)(a1 + 1374) = 1;
  *(void *)(a1 + 1384) = 0xBFF0000000000000LL;
  *(_WORD *)(a1 + 1392) = 0;
  *(_DWORD *)(a1 + 1396) = 0;
  *(_BYTE *)(a1 + 1400) = 0;
  *(_DWORD *)(a1 + 1404) = 0;
  *(void *)(a1 + 1408) = &_mh_execute_header;
  *(void *)(a1 + 1416) = *a4;
  uint64_t v11 = a4[1];
  *(void *)(a1 + 1424) = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  sub_10001A504(a1 + 1432, a3);
  *(void *)(a1 + 1464) = 0LL;
  *(_BYTE *)(a1 + 1472) = 0;
  *(void *)(a1 + 1480) = 0x10000000000000LL;
  *(void *)(a1 + 1488) = a5;
  v49[0] = &off_10186B798;
  v49[1] = a1;
  uint64_t v50 = v49;
  sub_100648884(a1 + 1496, v49);
  uint64_t v14 = v50;
  if (v50 == v49)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = v49;
  }

  else
  {
    if (!v50) {
      goto LABEL_9;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_9:
  *(_BYTE *)(a1 + 1552) = 0;
  *(void *)(a1 + 1560) = 0xBFF0000000000000LL;
  *(int64x2_t *)(a1 + 1568) = vdupq_n_s64(0x1AuLL);
  *(void *)(a1 + 1584) = 0LL;
  *(void *)(a1 + 1592) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1600) = -1;
  v47[0] = &off_10186B818;
  v47[1] = a1;
  double v48 = v47;
  sub_100A76720(v9, (uint64_t)v47);
  uint64_t v16 = v48;
  if (v48 == v47)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v47;
  }

  else
  {
    if (!v48) {
      goto LABEL_14;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_14:
  v45[0] = &off_10186B898;
  v45[1] = a1;
  uint64_t v46 = v45;
  sub_100A7680C(v9, (uint64_t)v45);
  uint64_t v18 = v46;
  if (v46 == v45)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = v45;
  }

  else
  {
    if (!v46) {
      goto LABEL_19;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_19:
  v43[0] = &off_10186B918;
  v43[1] = a1;
  __int128 v44 = v43;
  sub_100A768F8(v9, (uint64_t)v43);
  uint64_t v20 = v44;
  if (v44 == v43)
  {
    uint64_t v21 = 4LL;
    uint64_t v20 = v43;
    goto LABEL_23;
  }

  if (v44)
  {
    uint64_t v21 = 5LL;
LABEL_23:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }

  uuid_clear(uu);
  uint64_t v22 = sub_1002F8DDC();
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 936LL))(v22);
  if (sub_100A769E4(v23, uu) && !uuid_is_null(uu))
  {
    uuid_unparse(uu, out);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    std::stringbuf v24 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      __int128 v40 = out;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Workout Predictor - Saved session id found, sending de-escalation: %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      int v37 = 136315138;
      uint64_t v38 = out;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Workout Predictor - Saved session id found, sending de-escalation: %s",  (const char *)&v37);
      __int128 v32 = (uint8_t *)v31;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutPredictor::CLWorkoutPredictor(CLWorkoutPredictorSources &, CLWorkoutPredictor_Type::OnWorkoutPrediction , std::shared_ptr<CLBackgroundEscalationManager>, CLIndoorOutdoorProtocol *)",  "%s\n",  v31);
      if (v32 != buf) {
        free(v32);
      }
    }

    uuid_copy((unsigned __int8 *)(a1 + 592), uu);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100A7A094(a1, 10LL, 0LL, (uint64_t)buf, Current);
    sub_100A7A2A0(a1, (uint64_t)buf);
    double v26 = CFAbsoluteTimeGetCurrent();
    sub_100A76C3C(a1, 10LL, 0LL, 0LL, v26);
    uuid_clear((unsigned __int8 *)(a1 + 592));
    sub_100A76E68();
  }

  uuid_clear((unsigned __int8 *)(a1 + 608));
  *(void *)(a1 + 1376) = 0LL;
  memset(v35, 0, sizeof(v35));
  uint64_t v36 = 0LL;
  *(_DWORD *)buf = 7;
  uint64_t v27 = *(void *)(a1 + 1456);
  if (!v27
    || (uint64_t v28 = (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *))(*(void *)v27 + 48LL))(v27, buf, v35),
        memset(v33, 0, sizeof(v33)),
        uint64_t v34 = 0LL,
        *(void *)&v33[0] = sub_100A77000(v28, 1),
        *(_DWORD *)buf = 11,
        (uint64_t v29 = *(void *)(a1 + 1456)) == 0))
  {
    sub_100008BDC();
  }

  (*(void (**)(uint64_t, uint8_t *, _OWORD *))(*(void *)v29 + 48LL))(v29, buf, v33);
  return a1;
}

void sub_100A765B0(_Unwind_Exception *a1)
{
  int v6 = (void *)v1[182];
  if (v6 == v3)
  {
    uint64_t v7 = 4LL;
    int v6 = v3;
  }

  else
  {
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  sub_10000AE14((uint64_t)(v1 + 177));
  uint64_t v8 = (void **)v1[170];
  v1[170] = 0LL;
  if (v8) {
    sub_100223734((_DWORD)v1 + 1360, v8);
  }
  uint64_t v9 = (void **)(v1 + 58);
  int64x2_t v10 = (uint64_t *)v1[59];
  v1[59] = 0LL;
  if (v10) {
    sub_10046ABC8((_DWORD)v1 + 472, v10);
  }
  uint64_t v11 = *v9;
  void *v9 = 0LL;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = v1[54];
  v1[54] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  unint64_t v13 = *v2;
  *uint64_t v2 = 0LL;
  if (v13) {
    sub_10046AC38((int)v2, v13);
  }
  sub_10046ACAC(v1 + 5);
  _Unwind_Resume(a1);
}

void *sub_100A76720(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 160LL))(*a1);
  sub_10001A504((uint64_t)v6, a2);
  sub_100470144((void *)(v3 + 200), (uint64_t)v6);
  uint64_t result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    uint64_t result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100A767CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_100A7680C(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 144LL))(*a1);
  sub_10001A504((uint64_t)v6, a2);
  sub_100470144((void *)(v3 + 200), (uint64_t)v6);
  uint64_t result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    uint64_t result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100A768B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_100A768F8(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 120LL))(*a1);
  sub_10001A504((uint64_t)v6, a2);
  sub_100470144((void *)(v3 + 320), (uint64_t)v6);
  uint64_t result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    uint64_t result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100A769A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A769E4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1002F8DDC();
  if (sub_1002A8560(v3, "WorkoutPredictorSessionId", &__p))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v4 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v16 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Workout Predictor - Retrieving session id: %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v9 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v13 = 136315138;
      uint64_t v14 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Workout Predictor - Retrieving session id: %s",  (const char *)&v13);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::getSessionIdFromCache(uuid_t &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v6 = &__p;
    }
    else {
      int v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v7 = uuid_parse((const char *)v6, a2) == 0;
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

void sub_100A76C18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A76C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  if (a2 == 8)
  {
    uint64_t v6 = 0LL;
    goto LABEL_5;
  }

  if (a2 == 10)
  {
    uint64_t v6 = 1LL;
LABEL_5:
    __int128 v23 = 0u;
    __int128 v22 = 0u;
    __int128 v21 = 0u;
    __int128 v20 = 0u;
    __int128 v19 = 0u;
    __int128 v18 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    *(double *)uint64_t v11 = a5;
    v11[1] = 1LL;
    v11[2] = v6;
    v11[3] = a4;
    v11[4] = a3;
    *(_DWORD *)buf = 10;
    uint64_t v7 = *(void *)(a1 + 1456);
    if (!v7) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, uint8_t *, void *))(*(void *)v7 + 48LL))(v7, buf, v11);
    return;
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v8 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v27 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "notifyClientsWithActivityEvent - Unexpected workout event type: %ld.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v24 = 134217984;
    uint64_t v25 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "notifyClientsWithActivityEvent - Unexpected workout event type: %ld.",  &v24);
    int64x2_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutPredictor::notifyClientsWithActivityEvent(CFAbsoluteTime, CMWorkoutEvent, CMWorkoutType, CMActivityReason)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void sub_100A76E68()
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "Workout Predictor - Clearing session id from daemon cache.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Workout Predictor - Clearing session id from daemon cache.",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::clearSessionIdInCache() const", "%s\n", v2);
    if (v3 != buf) {
      free(v3);
    }
  }

  uint64_t v1 = sub_1002F8DDC();
  sub_1002A667C(v1, "WorkoutPredictorSessionId", 0xFFFFFFFFLL);
}

unint64_t sub_100A77000(uint64_t a1, int a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10199A470);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10199A470))
  {
    unsigned __int8 v14 = _os_feature_enabled_impl("Workout", "AutostartRouteMaps");
    sub_1012049AC(v15, "EnableEarlyWorkoutDetection", &v14, 0);
    byte_10199A468 = v15[1];
    __cxa_guard_release(&qword_10199A470);
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10199A480);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10199A480))
  {
    if (byte_10199A468) {
      __int16 v8 = 150;
    }
    else {
      __int16 v8 = -1;
    }
    __int16 v13 = v8;
    sub_100A86234(byte_10199A478, "EarlyWorkoutDetectionEscalationRulesLookbackTimeInSeconds", &v13, 0);
    __cxa_guard_release(&qword_10199A480);
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_10199A490);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_10199A490))
  {
    if (byte_10199A468) {
      __int16 v9 = 120;
    }
    else {
      __int16 v9 = -1;
    }
    __int16 v12 = v9;
    sub_100A86234(byte_10199A488, "EarlyWorkoutDetectionEscalationRulesActiveTimeInSeconds", &v12, 0);
    __cxa_guard_release(&qword_10199A490);
  }

  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_10199A4A8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_10199A4A8))
  {
    float v10 = 3.4028e38;
    if (byte_10199A468) {
      float v10 = 2.0;
    }
    float v11 = v10;
    sub_101206C88(byte_10199A498, "EarlyWorkoutDetectionEscalationRulesActiveSpeedInMPH", &v11, 0);
    __cxa_guard_release(&qword_10199A4A8);
  }

  if (a2) {
    return (unsigned __int16)word_10199A47A | ((unint64_t)(unsigned __int16)word_10199A48A << 16) | ((unint64_t)dword_10199A49C << 32);
  }
  else {
    return 0x7F7FFFFF7FFF0000LL;
  }
}

void sub_100A771F8(_Unwind_Exception *a1)
{
}

uint64_t sub_100A77244(void *a1, int a2)
{
  if (sub_1001B9A1C())
  {
    if (a2) {
      sub_100A77284(a1);
    }
    else {
      sub_100A775C4(a1);
    }
  }

  return 1LL;
}

void sub_100A77284(void *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[55];
    *(_DWORD *)buf = 134217984;
    uint64_t v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Trying to bring up TurnDetector, prevClientCount, %zu\n",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v7 = a1[55];
    int v11 = 134217984;
    uint64_t v12 = v7;
    __int16 v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Trying to bring up TurnDetector, prevClientCount, %zu\n",  (size_t)&v11);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::onTurnDetectorActivate()", "%s\n", v8);
  }

  unint64_t v4 = a1[55] + 1LL;
  a1[55] = v4;
  if (v4 >= 3)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    unsigned __int8 v5 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = a1[55];
      *(_DWORD *)buf = 134218240;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = 2LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Turn detector client count is %zu but max is %zu",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v9 = a1[55];
      int v11 = 134218240;
      uint64_t v12 = v9;
      __int16 v13 = 2048;
      uint64_t v14 = 2LL;
      float v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Turn detector client count is %zu but max is %zu",  (size_t)&v11,  22);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWorkoutPredictor::onTurnDetectorActivate()", "%s\n", v10);
    }

    unint64_t v4 = a1[55];
  }

  if (v4 == 1) {
    sub_100A7B898(a1);
  }
}

void sub_100A775C4(void *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[55];
    *(_DWORD *)buf = 134217984;
    uint64_t v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Trying to tear down TurnDetector, prevClientCount, %zu\n",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v8 = a1[55];
    int v10 = 134217984;
    uint64_t v11 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Trying to tear down TurnDetector, prevClientCount, %zu\n",  (size_t)&v10);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::onTurnDetectorDeactivate()", "%s\n", v9);
  }

  uint64_t v4 = a1[55];
  BOOL v5 = v4 != 0;
  uint64_t v7 = v4 - 1;
  BOOL v6 = v7 != 0 && v5;
  if (!v5) {
    uint64_t v7 = 0LL;
  }
  a1[55] = v7;
  if (!v6) {
    sub_100A7B898(a1);
  }
}

id sub_100A77790(uint64_t a1, int a2, int a3)
{
  double v6 = sub_101171D4C();
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a2)
  {
    if (a3)
    {
      uint64_t v8 = (double *)(a1 + 560);
      uint64_t v9 = (_BYTE *)(a1 + 568);
      char v10 = *(_BYTE *)(a1 + 568);
      if (*(_BYTE *)(a1 + 536))
      {
        BOOL v11 = 0;
        uint64_t v12 = (_BYTE *)(a1 + 536);
        double v15 = *(double *)(a1 + 528);
LABEL_15:
        double v16 = v6 - v15;
        double v13 = -1.0;
        double v14 = -1.0;
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v8 = (double *)(a1 + 576);
      uint64_t v9 = (_BYTE *)(a1 + 584);
      char v10 = *(_BYTE *)(a1 + 584);
      if (*(_BYTE *)(a1 + 552))
      {
        BOOL v11 = 0;
        uint64_t v12 = (_BYTE *)(a1 + 552);
        double v15 = *(double *)(a1 + 544);
        goto LABEL_15;
      }
    }

NSDictionary *sub_100A77B94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"enableGps";
  v5[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72));
  v4[1] = @"gpsTypeAlreadyInDesiredEnablementState";
  v5[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[2] = @"isTypeIntermittentGps";
  v5[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[3] = @"timeSinceGpsTypeLastEnabledSeconds";
  v5[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  v4[4] = @"timeSinceGpsTypeLastDisabledSeconds";
  v5[4] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v4[5] = @"timeSinceCurrentWorkoutStartS";
  v5[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56));
  v4[6] = @"currentEscalatedWorkoutType";
  v5[6] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v2 + 712));
  v4[7] = @"previousEscalatedWorkoutType";
  v5[7] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v2 + 1192));
  _WORD v4[8] = @"isIntermittentTo1HzGpsTransition";
  v5[8] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 75));
  v4[9] = @"timeSinceIntermittentGpsEnabledAtTransitionS";
  v5[9] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  10LL);
}

uint64_t sub_100A77D24(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 448);
  unint64_t v7 = v6 - 1;
  if (!v6) {
    unint64_t v7 = 0LL;
  }
  if (a2) {
    unint64_t v8 = v6 + 1;
  }
  else {
    unint64_t v8 = v7;
  }
  *(void *)(a1 + 448) = v8;
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (v8 >= 3)
  {
    if (qword_101934680 != -1)
    {
      dispatch_once(&qword_101934680, &stru_10186B648);
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    }

    char v10 = (os_log_s *)p_vtable[209];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 448);
      *(_DWORD *)buf = 134218240;
      *(void *)uint64_t v45 = v11;
      *(_WORD *)&v45[8] = 2048;
      *(void *)&v45[10] = 2LL;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Gps client count is %zu but max is %zu",  buf,  0x16u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v22 = *(void *)(a1 + 448);
      int v40 = 134218240;
      *(void *)double v41 = v22;
      *(_WORD *)&v41[8] = 2048;
      *(void *)&v41[10] = 2LL;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Gps client count is %zu but max is %zu",  (size_t)&v40,  22);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWorkoutPredictor::activateGps(BOOL, BOOL)", "%s\n", v23);
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    }
  }

  uint64_t v13 = *(void *)(a1 + 448);
  if (v13 == 1) {
    int v14 = a2;
  }
  else {
    int v14 = 0;
  }
  if (qword_101934680 != -1)
  {
    dispatch_once(&qword_101934680, &stru_10186B648);
    p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
  }

  double v15 = (os_log_s *)p_vtable[209];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 448);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)uint64_t v45 = a2;
    *(_WORD *)&v45[4] = 2048;
    *(void *)&v45[6] = v16;
    *(_WORD *)&v45[14] = 1024;
    *(_DWORD *)&v45[16] = v14;
    __int16 v46 = 1024;
    int v47 = (v13 == 0) & ~a2;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Workout Predictor activateGps, enable, %d, currentClientCount, %zu, shouldActivate, %d, shouldDeactivate, %d",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v20 = *(void *)(a1 + 448);
    int v40 = 67109888;
    *(_DWORD *)double v41 = a2;
    *(_WORD *)&v41[4] = 2048;
    *(void *)&v41[6] = v20;
    *(_WORD *)&v41[14] = 1024;
    *(_DWORD *)&unsigned __int8 v41[16] = v14;
    __int16 v42 = 1024;
    int v43 = (v13 == 0) & ~a2;
    LODWORD(v24) = 30;
    double v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Workout Predictor activateGps, enable, %d, currentClientCount, %zu, shouldActivate, %d, shouldDeactivate, %d",  &v40,  v24,  v25,  *(_DWORD *)v26);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWorkoutPredictor::activateGps(BOOL, BOOL)", "%s\n", v21);
  }

  BOOL v17 = v13 == 1;
  if (!a2) {
    BOOL v17 = v13 == 0;
  }
  if (v17)
  {
    memset(v39, 0, sizeof(v39));
    __int128 v38 = 0u;
    __int128 v37 = 0u;
    __int128 v36 = 0u;
    __int128 v35 = 0u;
    __int128 v34 = 0u;
    __int128 v33 = 0u;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = 0u;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    __int128 v27 = 0u;
    *(_OWORD *)&v26[2] = 0u;
    v26[0] = a2;
    v26[1] = a3;
    *(_DWORD *)buf = 9;
    uint64_t v18 = *(void *)(a1 + 1456);
    if (!v18) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, uint8_t *, _BYTE *))(*(void *)v18 + 48LL))(v18, buf, v26);
    sub_100A77790(a1, a2, a3);
  }

  return 1LL;
}

uint64_t sub_100A78198(uint64_t a1)
{
  uint64_t result = sub_100BEF764(*(void *)(a1 + 632));
  if (result == 2 && *(void *)(a1 + 656) != 1LL && *(_BYTE *)(a1 + 24) == 2)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v3 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Workout predictor - keeping GPS alive because we're in an outdoor run escalation",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v6[0] = 0;
      BOOL v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Workout predictor - keeping GPS alive because we're in an outdoor run escalation",  v6,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::keepGpsAliveIfNecessary()", "%s\n", v5);
    }

    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
    return sub_10046E868(v4);
  }

  return result;
}

uint64_t sub_100A78364(int a1, unsigned __int8 *uu)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v11 = out;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Workout Predictor - Saving session id: %s to daemon cache.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v8 = 136315138;
    uint64_t v9 = out;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Workout Predictor - Saving session id: %s to daemon cache.",  (const char *)&v8);
    unint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::saveSessionIdInCache(const uuid_t &) const",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  uint64_t v3 = sub_1002F8DDC();
  sub_1002ACA84(v3, "WorkoutPredictorSessionId", out);
  uint64_t v4 = sub_1002F8DDC();
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 944LL))(v4);
}

uint64_t sub_100A78538(unsigned __int8 *a1, int a2, int a3)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v6 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    int v15 = a2;
    __int16 v16 = 1026;
    int v17 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Workout Predictor - updating settings, start, %{public}d, stop, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v11[0] = 67240448;
    v11[1] = a2;
    __int16 v12 = 1026;
    int v13 = a3;
    char v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Workout Predictor - updating settings, start, %{public}d, stop, %{public}d",  v11,  14);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::setEnableWorkoutAlerts(BOOL, BOOL)", "%s\n", v10);
  }

  int v7 = a1[1372];
  a1[1372] = a2;
  a1[1373] = a3;
  if (v7 != a2)
  {
    if (a2) {
      int v8 = 0;
    }
    else {
      int v8 = 2;
    }
    sub_100A78754((uint64_t)a1, v8);
  }

  uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16LL))(a1);
  if ((_DWORD)result) {
    return sub_100CCCC8C((uint64_t)(a1 + 8), 11, (uint64_t)buf);
  }
  return result;
}

void sub_100A78754(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (!*(_BYTE *)(a1 + 1372) || *(_DWORD *)(a1 + 400))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v3 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CLAS,Disabling early escalations and rhythmic gnss because start alerts aren't allowed",  buf,  2u);
    }

    a1 = sub_1002921D0(115, 2);
    if ((_DWORD)a1)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      LOWORD(v33) = 0;
      __int128 v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,Disabling early escalations and rhythmic gnss because start alerts aren't allowed",  &v33,  2);
      a1 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::controlEarlyEscalation(EarlyEscalationControl) const",  "%s\n",  v31);
    }

uint64_t sub_100A78E6C(void *a1, double a2, double a3)
{
  *(double *)unsigned __int16 v5 = a2;
  *(double *)&v5[1] = a3;
  a1[84] = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  if ((_DWORD)result) {
    return sub_100CCCC8C((uint64_t)(a1 + 1), 12, (uint64_t)v5);
  }
  return result;
}

uint64_t sub_100A78EBC(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)a2;
  *(void *)(a1 + 1400) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 1384) = v2;
  uint64_t result = *(void *)(a1 + 424);
  if (result) {
    return sub_100F6BC44(result, (__int128 *)a2);
  }
  return result;
}

void *sub_100A78EE0(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *(void **)(a1 + 424);
  if (result) {
    return sub_100F6BEA4(result, a2);
  }
  return result;
}

uint64_t sub_100A78EF0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 424);
  if (result) {
    uint64_t result = sub_100F6C4BC(result, a2);
  }
  *(_DWORD *)(a1 + 1368) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t *sub_100A78F28(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 424);
  if (result) {
    return (uint64_t *)sub_100F6BED8(result);
  }
  return result;
}

uint64_t sub_100A78F38(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 704);
  if (v4 != 0x7FFFFFFF)
  {
    if (*(_BYTE *)(a1 + 1372))
    {
      int v5 = *(_DWORD *)(a1 + 708) + 1;
      *(_DWORD *)(a1 + 708) = v5;
      if (v5 >= v4)
      {
      }
    }
  }

  sub_100672E64(a2, (uint64_t)v26);
  sub_100A794B4(a1, v26);
  if (v30 != *(void *)(a1 + 680))
  {
    *(void *)(a1 + 680) = v30;
    BOOL v6 = sub_100A79D2C(a1, a2);
    if (*(void *)(a1 + 680))
    {
      BOOL v7 = v6;
      uint64_t v8 = v29;
      uint64_t v9 = sub_100BEF764((uint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:]( &OBJC_CLASS___CMWorkout,  "CMWorkoutTypeFromCLMotionActivityType:",  v28));
      uint64_t v57 = v8;
      uint64_t v58 = v27;
      uint64_t v59 = v9;
      BOOL v60 = v7;
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      int v10 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        *(void *)__int128 v53 = v9;
        *(_WORD *)&v53[8] = 2050;
        uint64_t v54 = v8;
        __int16 v55 = 1026;
        BOOL v56 = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CLAS,new AP escalation detected for workout type,%{public}ld,startTime,%{public}f,is early detection,%{public}d",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        int v46 = 134349568;
        uint64_t v47 = v9;
        __int16 v48 = 2050;
        uint64_t v49 = v8;
        __int16 v50 = 1026;
        BOOL v51 = v60;
        uint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,new AP escalation detected for workout type,%{public}ld,startTime,%{public}f,is early detection,%{public}d",  &v46,  28);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::feedMotionStateUpdate(const CLWorkoutPredictorActivity &)",  "%s\n",  v24);
      }
    }
  }

  unint64_t v11 = *(void *)(a1 + 488) + 1LL;
  *(void *)(a1 + 488) = v11;
  if (v11 >= 0x17)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    float v12 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)__int128 v53 = v13;
      *(_WORD *)&v53[4] = 1024;
      *(_DWORD *)&v53[6] = v26[0];
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Current state of Workout Predictor: %{public}d,motiontype,%d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      int v22 = *(unsigned __int8 *)(a1 + 24);
      LODWORD(v57) = 67240448;
      HIDWORD(v57) = v22;
      LOWORD(v58) = 1024;
      *(_DWORD *)((char *)&v58 + 2) = v26[0];
      LODWORD(v25) = 14;
      unint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Current state of Workout Predictor: %{public}d,motiontype,%d",  &v57,  v25);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::feedMotionStateUpdate(const CLWorkoutPredictorActivity &)",  "%s\n",  v23);
    }

    *(void *)(a1 + 488) = 0LL;
  }

  sub_100CDF9F4((double *)(a1 + 32), a2);
  double v14 = *(double *)(a2 + 8);
  if (*(double *)(a1 + 480) > v14)
  {
    int v15 = *(uint64_t **)(a1 + 424);
    if (v15) {
      sub_100518778(v15);
    }
    __int16 v16 = *(uint64_t **)(a1 + 472);
    if (v16) {
      sub_100518778(v16);
    }
    nullsub_10(a1 + 1352);
    double v14 = *(double *)(a2 + 8);
  }

  *(double *)(a1 + 480) = v14;
  sub_100FA2EE0((void **)(a1 + 1352));
  uint64_t v17 = *(void *)(a1 + 424);
  if (v17) {
    sub_100F6C718(v17);
  }
  uint64_t v18 = *(void *)(a1 + 432);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 16LL))(v18);
  }
  sub_100B663F0(*(void *)(a1 + 1416), (double *)(a1 + 32));
  unint64_t v19 = *(uint64_t **)(a1 + 472);
  if (v19) {
    sub_100518A0C(v19);
  }
  if (sub_100B684C0(*(void *)(a1 + 1416), a1 + 1376))
  {
    __int128 v45 = 0u;
    __int128 v44 = 0u;
    __int128 v43 = 0u;
    __int128 v42 = 0u;
    __int128 v41 = 0u;
    __int128 v40 = 0u;
    __int128 v39 = 0u;
    __int128 v38 = 0u;
    __int128 v37 = 0u;
    __int128 v36 = 0u;
    __int128 v35 = 0u;
    __int128 v34 = 0u;
    __int128 v33 = 0u;
    __int128 v32 = 0u;
    uint64_t v31 = *(void *)(a1 + 1376);
    *(_DWORD *)buf = 7;
    uint64_t v20 = *(void *)(a1 + 1456);
    if (!v20) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(void *)v20 + 48LL))(v20, buf, &v31);
  }

  return sub_100A78198(a1);
}

void sub_100A794B4(uint64_t a1, unsigned int *a2)
{
  if (!*(_BYTE *)(a1 + 520) || *(_BYTE *)(a1 + 24)) {
    return;
  }
  double v4 = sub_101171D4C();
  if (!*(_BYTE *)(a1 + 504) && (CLMotionActivity::isTypeWalking(*a2) & 1) == 0)
  {
    *(double *)(a1 + 496) = v4;
    *(_BYTE *)(a1 + 504) = 1;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v8 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(_BYTE *)(a1 + 504)) {
        goto LABEL_66;
      }
      uint64_t v9 = *(void *)(a1 + 496);
      int v10 = *a2;
      *(_DWORD *)buf = 134218240;
      *(void *)__int128 v36 = v9;
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "CLAS,user switched out of walking state,%.1lf,type,%d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      if (!*(_BYTE *)(a1 + 504)) {
        sub_100036CD8();
      }
      double v21 = *(double *)(a1 + 496);
      int v22 = *a2;
      int v29 = 134218240;
      double v30 = v21;
      __int16 v31 = 1024;
      LODWORD(v32) = v22;
      unint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,user switched out of walking state,%.1lf,type,%d",  COERCE_DOUBLE(&v29),  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)",  "%s\n",  v23);
    }

    goto LABEL_22;
  }

  if (CLMotionActivity::isTypeWalking(*a2) && *(_BYTE *)(a1 + 504))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v5 = (os_log_s *)qword_101934688;
    if (!os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    if (*(_BYTE *)(a1 + 504))
    {
      uint64_t v6 = *(void *)(a1 + 496);
      int v7 = *a2;
      *(_DWORD *)buf = 134218240;
      *(void *)__int128 v36 = v6;
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CLAS,user switched back into walking state,%.1lf,type,%d",  buf,  0x12u);
LABEL_13:
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        if (!*(_BYTE *)(a1 + 504)) {
          sub_100036CD8();
        }
        double v18 = *(double *)(a1 + 496);
        int v19 = *a2;
        int v29 = 134218240;
        double v30 = v18;
        __int16 v31 = 1024;
        LODWORD(v32) = v19;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,user switched back into walking state,%.1lf,type,%d",  COERCE_DOUBLE(&v29),  18);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::reactivateEarlyWorkoutDetectionIfNecessary(const CLMotionActivity &)",  "%s\n",  v20);
      }

      if (*(_BYTE *)(a1 + 504)) {
        *(_BYTE *)(a1 + 504) = 0;
      }
      goto LABEL_22;
    }

void sub_100A79CFC(_Unwind_Exception *a1)
{
}

BOOL sub_100A79D2C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 80);
  if (v2 != 720912) {
    return v2 == 720912;
  }
  double v4 = sub_101171D4C();
  if (*(_BYTE *)(a1 + 520))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v5 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      if (!*(_BYTE *)(a1 + 520)) {
        goto LABEL_25;
      }
      double v6 = vabdd_f64(v4, *(double *)(a1 + 512));
      *(_DWORD *)buf = 134217984;
      double v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "CLAS, received another early escalation when we're already tracking one, duration, %f",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_9;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    if (*(_BYTE *)(a1 + 520))
    {
      double v12 = vabdd_f64(v4, *(double *)(a1 + 512));
      int v14 = 134217984;
      double v15 = v12;
      double v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "CLAS, received another early escalation when we're already tracking one, duration, %f",  COERCE_DOUBLE(&v14));
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWorkoutPredictor::checkAndDisableEarlyDetection(const CLWorkoutPredictorActivity &)",  "%s\n",  v13);
      goto LABEL_9;
    }

void sub_100A7A094(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  int v10 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    v23[0] = 68289794;
    v23[1] = 0;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    __int16 v26 = 2050;
    double v27 = a5;
    __int16 v28 = 2050;
    uint64_t v29 = a2;
    __int16 v30 = 2050;
    uint64_t v31 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Sending workout event, event time:%{public}f, event type:%{public}ld, worko ut type:%{public}ld}",  (uint8_t *)v23,  0x30u);
  }

  uuid_copy((unsigned __int8 *)(a4 + 64), (const unsigned __int8 *)(a1 + 592));
  uuid_copy((unsigned __int8 *)(a4 + 80), (const unsigned __int8 *)(a1 + 608));
  *(void *)(a4 + 112) = a3;
  __int128 v11 = *(_OWORD *)(a1 + 760);
  __int128 v12 = *(_OWORD *)(a1 + 792);
  *(_OWORD *)(a4 + 176) = *(_OWORD *)(a1 + 776);
  *(_OWORD *)(a4 + 192) = v12;
  *(_OWORD *)(a4 + 208) = *(_OWORD *)(a1 + 808);
  *(_OWORD *)(a4 + 144) = *(_OWORD *)(a1 + 744);
  *(_OWORD *)(a4 + 160) = v11;
  if (a3 == 19) {
    *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 824);
  }
  uint64_t v13 = *(void *)(a1 + 656);
  if (!v13) {
    uint64_t v13 = sub_100BEF788(*(void *)(a1 + 632));
  }
  uint64_t v14 = *(void *)(a1 + 648);
  if (!v14) {
    uint64_t v14 = v13;
  }
  *(void *)(a4 + 120) = v14;
  *(void *)(a4 + 224) = *(void *)(a1 + 736);
  __int128 v15 = *(_OWORD *)(a1 + 664);
  *(_OWORD *)a4 = v15;
  *(void *)(a4 + 16) = a2;
  *(double *)(a4 + 24) = a5;
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 728);
  *(double *)(a4 + 40) = sub_100B6862C(*(void *)(a1 + 1416), *(double *)&v15);
  *(void *)(a4 + 48) = *(void *)(a1 + 712);
  __int128 v16 = *(_OWORD *)(a4 + 208);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a4 + 192);
  *(_OWORD *)(a1 + 1048) = v16;
  *(void *)(a1 + 1064) = *(void *)(a4 + 224);
  __int128 v17 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(a1 + 984) = v17;
  __int128 v18 = *(_OWORD *)(a4 + 176);
  *(_OWORD *)(a1 + 1000) = *(_OWORD *)(a4 + 160);
  *(_OWORD *)(a1 + 1016) = v18;
  __int128 v19 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 920) = v19;
  __int128 v20 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a1 + 936) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a1 + 952) = v20;
  __int128 v21 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 840) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 856) = v21;
  __int128 v22 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 872) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 888) = v22;
}

double sub_100A7A2A0(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 208);
  v14[12] = *(_OWORD *)(a2 + 192);
  v14[13] = v3;
  uint64_t v15 = *(void *)(a2 + 224);
  __int128 v4 = *(_OWORD *)(a2 + 144);
  _WORD v14[8] = *(_OWORD *)(a2 + 128);
  v14[9] = v4;
  __int128 v5 = *(_OWORD *)(a2 + 176);
  v14[10] = *(_OWORD *)(a2 + 160);
  v14[11] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 80);
  v14[4] = *(_OWORD *)(a2 + 64);
  double v14[5] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 112);
  v14[6] = *(_OWORD *)(a2 + 96);
  v14[7] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v8;
  __int128 v9 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v9;
  int v13 = 0;
  uint64_t v10 = *(void *)(a1 + 1456);
  if (!v10) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t, int *, _OWORD *))(*(void *)v10 + 48LL))(v10, &v13, v14);
  return sub_100251504(a1 + 1552, a2);
}

uint64_t sub_100A7A370(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10199A430);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10199A430))
  {
    LOWORD(v18) = 180;
    sub_100A86234(buf, "WorkoutDetectionStartTimerDelayWorkout", &v18, 0);
    LOWORD(v14) = *(_WORD *)&buf[2];
    dword_10199A428 = (int)(float)((float)v14 / 2.56);
    __cxa_guard_release(&qword_10199A430);
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10199A440);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10199A440))
  {
    LOWORD(v18) = 600;
    sub_100A86234(buf, "WorkoutDetectionStartTimerDelayWalking", &v18, 0);
    LOWORD(v15) = *(_WORD *)&buf[2];
    dword_10199A438 = (int)(float)((float)v15 / 2.56);
    __cxa_guard_release(&qword_10199A440);
  }

  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_10199A450);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_10199A450))
  {
    LOWORD(v18) = 180;
    sub_100A86234(buf, "WorkoutDetectionStartTimerDelayRunning", &v18, 0);
    LOWORD(v16) = *(_WORD *)&buf[2];
    dword_10199A448 = (int)(float)((float)v16 / 2.56);
    __cxa_guard_release(&qword_10199A450);
  }

  if ((unint64_t)(a2 - 20) < 0x2F)
  {
LABEL_6:
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    __int128 v6 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Failed to get workout start reminder delay for workout type: %{public}ld.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      int v18 = 134349056;
      uint64_t v19 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Failed to get workout start reminder delay for workout type: %{public}ld.",  &v18,  12);
      int v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int CLWorkoutPredictor::getDelayInEpochsForStartRemindersForLabel(CMWorkoutType) const",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

void sub_100A7A818(_Unwind_Exception *a1)
{
}

uint64_t sub_100A7A8A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1464) = a2;
  return result;
}

uint64_t sub_100A7A8B0(uint64_t result, double a2)
{
  *(double *)(result + 1480) = a2;
  return result;
}

uint64_t sub_100A7A8B8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1472) = a2;
  return result;
}

uint64_t sub_100A7A8C0(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = sub_100A7AC28(a1);
  BOOL v5 = v4;
  if (*((_BYTE *)a2 + 32))
  {
    if (*(void *)(a1 + 712) == 1LL)
    {
      __int128 v6 = a2 + 1;
      BOOL v7 = 1;
LABEL_10:
      BOOL v9 = 1;
      goto LABEL_12;
    }

    BOOL v7 = *(void *)(a1 + 632) == 1LL;
  }

  else
  {
    BOOL v7 = 0;
  }

  __int128 v6 = a2 + 1;
  if (a2[1]) {
    int v8 = v7;
  }
  else {
    int v8 = 1;
  }
  if (((v8 | v4) & 1) != 0) {
    goto LABEL_10;
  }
  BOOL v7 = 0;
  BOOL v9 = *(_BYTE *)(a1 + 1372) == 0;
LABEL_12:
  int v10 = sub_100B67F34(*(void *)(a1 + 1416));
  int v11 = *(_DWORD *)(a1 + 1368);
  if (sub_100BEF764(*v6) == 3) {
    uint64_t result = MGGetBoolAnswer(@"DeviceSupportsCyclingAutoStartReminders");
  }
  else {
    uint64_t result = 1LL;
  }
  int v13 = result ^ 1;
  if ((v9 & v10 & 1) != 0 || v11 == 4 || v13)
  {
    if (v5 || !*(_BYTE *)(a1 + 1372))
    {
      int v14 = 13;
    }

    else if (v11 == 4)
    {
      int v14 = 8;
    }

    else if ((result & 1) != 0)
    {
      int v14 = 7;
    }

    else
    {
      int v14 = 14;
    }

    LODWORD(v22) = v14;
    uint64_t v23 = *a2;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    unsigned int v15 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(unsigned __int8 *)(a1 + 1372);
      uint64_t v17 = *v6;
      *(_DWORD *)buf = 67241728;
      BOOL v38 = v5;
      __int16 v39 = 1026;
      int v40 = v16;
      __int16 v41 = 2050;
      uint64_t v42 = v17;
      __int16 v43 = 1026;
      int v44 = v10;
      __int16 v45 = 1026;
      BOOL v46 = v7;
      __int16 v47 = 1026;
      BOOL v48 = v11 == 4;
      __int16 v49 = 1026;
      int v50 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Workout Predictor Deescalating,shouldMute,%{public}d,startAlertEnabled,%{public}d,tier2,%{public}lu,backgroundDe escalate,%{public}d,isTrackingAltWalk,%{public}d,vehicular,%{public}d,supportedAlertType,%{public}d",  buf,  0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      int v18 = *(unsigned __int8 *)(a1 + 1372);
      uint64_t v19 = *v6;
      v24[0] = 67241728;
      v24[1] = v5;
      __int16 v25 = 1026;
      int v26 = v18;
      __int16 v27 = 2050;
      uint64_t v28 = v19;
      __int16 v29 = 1026;
      int v30 = v10;
      __int16 v31 = 1026;
      BOOL v32 = v7;
      __int16 v33 = 1026;
      BOOL v34 = v11 == 4;
      __int16 v35 = 1026;
      int v36 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Workout Predictor Deescalating,shouldMute,%{public}d,startAlertEnabled,%{public}d,tier2,%{public}lu,backgroundDe escalate,%{public}d,isTrackingAltWalk,%{public}d,vehicular,%{public}d,supportedAlertType,%{public}d",  v24,  48,  v22,  v23);
      int v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::checkDeescalationAndSignal(CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult &)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    if ((_DWORD)result) {
      return sub_100CCCC8C(a1 + 8, 14, (uint64_t)&v22);
    }
  }

  return result;
}

BOOL sub_100A7AC28(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 1168)) < *(double *)(a1 + 1176)
      && *(void *)(a1 + 1112) == *(void *)(a1 + 632)
      && *(void *)(a1 + 1136) == *(void *)(a1 + 656);
}

void *sub_100A7AC84(void *result, int a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)result;
  switch(a2)
  {
    case 8:
      uint64_t v8 = 23LL;
      if (*(_DWORD *)a3 == 2) {
        uint64_t v8 = 3LL;
      }
      uint64_t v9 = 2LL;
      if (*(_DWORD *)a3 != 1) {
        uint64_t v9 = v8;
      }
      if (v9 != 23 && result[107] != v9)
      {
        if (v9 == 3)
        {
          *(void *)&__int128 v11 = *(void *)(a3 + 8);
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16LL))(result);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v6 = v4 + 8;
          int v7 = 8;
        }

        else
        {
          *(void *)&__int128 v11 = *(void *)(a3 + 8);
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16LL))(result);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v6 = v4 + 8;
          int v7 = 9;
        }

        return (void *)sub_100CCCC8C(v6, v7, (uint64_t)&v11);
      }

      break;
    case 4:
      sub_100CDF30C(result + 4, (__int128 *)a3);
      uint64_t result = (void *)sub_100A7A8C0(v4, (uint64_t *)a3);
      uint64_t v10 = *(void *)(a3 + 8);
      if (v10)
      {
        if (v10 != 25)
        {
          *(void *)&__int128 v11 = *(void *)(a3 + 8);
          *((void *)&v11 + 1) = *(void *)(a3 + 24);
          int v12 = *(_DWORD *)(a3 + 16);
          uint64_t v13 = *(void *)a3;
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
          if ((_DWORD)result)
          {
            uint64_t v6 = v4 + 8;
            int v7 = 2;
            return (void *)sub_100CCCC8C(v6, v7, (uint64_t)&v11);
          }
        }
      }

      break;
    case 1:
      BOOL v5 = (dispatch_queue_t *)sub_100B354EC();
      sub_100B368B8(v5, a3);
      __int128 v11 = *(_OWORD *)a3;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
      if ((_DWORD)result)
      {
        uint64_t v6 = v4 + 8;
        int v7 = 4;
        return (void *)sub_100CCCC8C(v6, v7, (uint64_t)&v11);
      }

      break;
  }

  return result;
}

BOOL sub_100A7AE00(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 1372)) {
    BOOL v4 = *(_DWORD *)(a1 + 400) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  int v5 = *(unsigned __int8 *)(a2 + 24);
  double v6 = *(double *)a2;
  double v7 = *(double *)(a1 + 720);
  BOOL v22 = *(double *)a2 > v7;
  BOOL v8 = sub_100B67BF8(*(void *)(a1 + 1416), *(void *)(a2 + 16));
  if (sub_100BEF764(*(void *)(a2 + 16)) == 3) {
    int v9 = MGGetBoolAnswer(@"DeviceSupportsCyclingAutoStartReminders");
  }
  else {
    int v9 = 1;
  }
  BOOL v10 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 1168)) < *(double *)(a1 + 1176)
     && *(void *)(a2 + 16) == 3LL
     && *(void *)(a1 + 1112) == 4LL;
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  __int128 v11 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290562;
    BOOL v46 = 0;
    __int16 v47 = 2082;
    *(void *)BOOL v48 = "";
    *(_WORD *)&v48[8] = 1026;
    *(_DWORD *)__int16 v49 = v4;
    *(_WORD *)&v49[4] = 1026;
    *(_DWORD *)int v50 = v6 > v7;
    *(_WORD *)&v50[4] = 1026;
    *(_DWORD *)BOOL v51 = v8;
    *(_WORD *)&v51[4] = 1026;
    *(_DWORD *)&v51[6] = v9;
    __int16 v52 = 1026;
    BOOL v53 = v10;
    __int16 v54 = 1026;
    LODWORD(v55) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLAS,check if workout should escalate., is start enabled:%{public}hhd, is new:%{p ublic}hhd, allow background:%{public}hhd, is allowed type:%{public}hhd, should mute:%{public}hhd, is early detection:%{public}hhd}",  buf,  0x36u);
  }

  if (v5)
  {
    BOOL v12 = 0LL;
  }

  else
  {
    BOOL v13 = v6 > v7 && v4;
    BOOL v12 = v13 & v9 & !v10 | v8;
  }

  if (sub_100B35768())
  {
    if (*(_BYTE *)(a1 + 536))
    {
      double v14 = sub_101171D4C();
      if (!*(_BYTE *)(a1 + 536)) {
        sub_100036CD8();
      }
      double v15 = v14 - *(double *)(a1 + 528);
    }

    else
    {
      double v15 = -1.0;
    }

    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v16 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 67241984;
      BOOL v46 = v4;
      __int16 v47 = 1026;
      *(_DWORD *)BOOL v48 = v6 > v7;
      *(_WORD *)&v48[4] = 1026;
      *(_DWORD *)&v48[6] = v8;
      *(_WORD *)__int16 v49 = 1026;
      *(_DWORD *)&v49[2] = v9;
      *(_WORD *)int v50 = 1026;
      *(_DWORD *)&v50[2] = v5;
      *(_WORD *)BOOL v51 = 2050;
      *(void *)&v51[2] = v17;
      __int16 v52 = 1026;
      BOOL v53 = v12;
      __int16 v54 = 2048;
      double v55 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "CLAS,analytics,Escalations,areStartAlertsEnabled,%{public}d,isNewEscalation,%{public}d,isBackgroundEscalation,%{ public}d,isAllowedWorkoutType,%{public}d,isEarlyDetection,%{public}d,workoutType,%{public}ld,shouldInitiateNonEa rlyEscalation,%{public}d,timeSinceLastEarlyEscalationSeconds,%.1lf",  buf,  0x3Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v19 = *(void *)(a2 + 16);
      v30[0] = 67241984;
      v30[1] = v4;
      __int16 v31 = 1026;
      BOOL v32 = v6 > v7;
      __int16 v33 = 1026;
      BOOL v34 = v8;
      __int16 v35 = 1026;
      int v36 = v9;
      __int16 v37 = 1026;
      int v38 = v5;
      __int16 v39 = 2050;
      uint64_t v40 = v19;
      __int16 v41 = 1026;
      BOOL v42 = v12;
      __int16 v43 = 2048;
      double v44 = v15;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLAS,analytics,Escalations,areStartAlertsEnabled,%{public}d,isNewEscalation,%{public}d,isBackgroundEscalation,%{ public}d,isAllowedWorkoutType,%{public}d,isEarlyDetection,%{public}d,workoutType,%{public}ld,shouldInitiateNonEa rlyEscalation,%{public}d,timeSinceLastEarlyEscalationSeconds,%.1lf",  v30,  58);
      int v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::shouldEscalate(const EApEscalation *) const",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    _DWORD v23[2] = sub_100A7B290;
    v23[3] = &unk_10186B600;
    BOOL v24 = v4;
    BOOL v25 = v22;
    BOOL v26 = v8;
    char v27 = v9;
    char v28 = v5;
    v23[4] = a2;
    BOOL v29 = v12;
    *(double *)&v23[5] = v15;
    AnalyticsSendEventLazy(@"com.apple.CoreMotion.WorkoutPredictor.Escalations", v23);
  }

  return v12;
}

NSDictionary *sub_100A7B290(uint64_t a1)
{
  v3[0] = @"areStartAlertsEnabled";
  v4[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48));
  v3[1] = @"isNewEscalation";
  v4[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 49));
  v3[2] = @"isBackgroundEscalation";
  v4[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 50));
  v3[3] = @"isAllowedWorkoutType";
  v4[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 51));
  v3[4] = @"isEarlyEscalation";
  v4[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 52));
  v3[5] = @"workoutType";
  v4[5] = +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(*(void *)(a1 + 32) + 16LL));
  v3[6] = @"shouldInitiateNonEarlyEscalation";
  v4[6] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 53));
  v3[7] = @"timeSinceLastEarlyEscalationSeconds";
  v4[7] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  8LL);
}

BOOL sub_100A7B3E0(uint64_t a1, void *a2)
{
  if (CLMotionActivity::isTypePedestrian( +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "CLMotionActivityTypeFromCMWorkoutType:",  *a2))) {
    BOOL v3 = *(void *)(a1 + 656) == 0LL;
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t v4 = sub_1004F97F4();
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_10186B668);
  }
  unint64_t v5 = v4 & 0x1000000000000LL;
  double v6 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 1320);
    *(_DWORD *)buf = 67240704;
    BOOL v19 = v3;
    __int16 v20 = 1026;
    int v21 = v7;
    __int16 v22 = 1026;
    int v23 = HIWORD(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "isWaitingForIndoorOutdoorDisambiguation,%{public}d,permission,%{public}d,enabled,%{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10186B668);
    }
    int v10 = *(unsigned __int8 *)(a1 + 1320);
    v13[0] = 67240704;
    v13[1] = v3;
    __int16 v14 = 1026;
    int v15 = v10;
    __int16 v16 = 1026;
    int v17 = HIWORD(v5);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "isWaitingForIndoorOutdoorDisambiguation,%{public}d,permission,%{public}d,enabled,%{public}d",  v13,  20);
    BOOL v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::isWaitingForIndoorOutdoorDisambiguation(const ELabelerUpdate *) const",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  if (*(_BYTE *)(a1 + 1320)) {
    BOOL v8 = v3;
  }
  else {
    BOOL v8 = 0;
  }
  return v5 && v8;
}

uint64_t sub_100A7B614(uint64_t a1)
{
  char v1 = *(_BYTE *)(a1 + 24);
  if (v1) {
    char v1 = *(void *)(a1 + 736) != 1LL;
  }
  uint64_t v2 = *(void *)(a1 + 712);
  v6[0] = v1;
  memset(&v6[1], 0, 7);
  uint64_t v7 = v2;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  uint64_t v21 = 0LL;
  int v5 = 2;
  uint64_t v3 = *(void *)(a1 + 1456);
  if (!v3) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(void *)v3 + 48LL))(v3, &v5, v6);
}

uint64_t sub_100A7B6D8(uint64_t a1, uint64_t a2, char a3)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  uint64_t v21 = 0LL;
  v6[0] = a3;
  uint64_t v7 = a2;
  int v5 = 5;
  uint64_t v3 = *(void *)(a1 + 1456);
  if (!v3) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(void *)v3 + 48LL))(v3, &v5, v6);
}

uint64_t sub_100A7B784(void *a1)
{
  *(void *)__int128 v8 = a1[168];
  v5[4] = *(_OWORD *)&v8[48];
  v5[5] = *(_OWORD *)&v8[64];
  void v5[2] = *(_OWORD *)&v8[16];
  v5[3] = *(_OWORD *)&v8[32];
  v5[8] = *(_OWORD *)&v8[112];
  v5[9] = *(_OWORD *)&v8[128];
  v5[6] = *(_OWORD *)&v8[80];
  v5[7] = *(_OWORD *)&v8[96];
  v5[12] = *(_OWORD *)&v8[176];
  v5[13] = *(_OWORD *)&v8[192];
  void v5[10] = *(_OWORD *)&v8[144];
  v5[11] = *(_OWORD *)&v8[160];
  __int128 v7 = *((_OWORD *)a1 + 83);
  uint64_t v6 = 0LL;
  v5[0] = v7;
  v5[1] = *(_OWORD *)v8;
  int v4 = 6;
  uint64_t v1 = a1[182];
  if (!v1) {
    sub_100008BDC();
  }
  uint64_t v2 = a1 + 166;
  uint64_t result = (*(uint64_t (**)(void, int *, _OWORD *))(*(void *)v1 + 48LL))(a1[182], &v4, v5);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  v2[2] = 0LL;
  return result;
}

uint64_t sub_100A7B898(void *a1)
{
  BOOL v1 = a1[55] != 0LL;
  uint64_t v2 = a1[58];
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v6[0] = v1;
  v6[1] = v2 != 0;
  int v5 = 3;
  uint64_t v3 = a1[182];
  if (!v3) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(void *)v3 + 48LL))(v3, &v5, v6);
}

uint64_t sub_100A7B970(void *a1)
{
  BOOL v2 = sub_100A7AC28((uint64_t)a1);
  unsigned int v3 = sub_100A7BAD0((uint64_t)a1);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  int v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[139];
    uint64_t v6 = a1[79];
    uint64_t v7 = a1[142];
    uint64_t v8 = a1[82];
    uint64_t v9 = a1[146];
    uint64_t v10 = a1[147];
    v12[0] = 68291074;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int128 v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v5;
    __int16 v17 = 2050;
    uint64_t v18 = v6;
    __int16 v19 = 2050;
    uint64_t v20 = v7;
    __int16 v21 = 2050;
    uint64_t v22 = v8;
    __int16 v23 = 1026;
    BOOL v24 = v2;
    __int16 v25 = 2050;
    uint64_t v26 = v9;
    __int16 v27 = 2050;
    uint64_t v28 = v10;
    __int16 v29 = 1026;
    unsigned int v30 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:should mute - start, previous workout type:%{public}ld, current workout type:%{pu blic}ld, previous workout location type:%{public}ld, current workout location type:%{public}ld, should m ute:%{public}d, previous mute time - start:%{public}f, previous mute interval - start:%{public}f , backgroundEscalationIsNotActive:%{public}d}",  (uint8_t *)v12,  0x5Au);
  }

  return v2 & v3;
}

uint64_t sub_100A7BAD0(uint64_t a1)
{
  uint64_t v1 = sub_100B67F34(*(void *)(a1 + 1416));
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  BOOL v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v8 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d",  v6,  8);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EStartReminderDelayExpired]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return v1;
}

void sub_100A7BC84(uint64_t *a1, double *a2)
{
  double v3 = *a2;
  a1[84] = *(void *)a2;
  *((double *)a1 + 90) = v3;
  sub_100A7A094((uint64_t)a1, 1LL, a1[78], (uint64_t)v4, v3);
  sub_100A7A2A0((uint64_t)a1, (uint64_t)v4);
  sub_100A7BD1C((uint64_t)a1);
  sub_100A7BF70((uint64_t)a1);
}

uint64_t sub_100A7BD1C(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  BOOL v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction.",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EUserEndedWorkout]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100648A9C(a1 + 1496);
  sub_100A7E768(a1);
  sub_100A7DCD0((void *)a1);
  sub_100A7E918(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100A76E68();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(void *)(a1 + 664) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 672) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 704) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 712) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  if (*(void *)(a1 + 1328) || *(void *)(a1 + 1336) || *(void *)(a1 + 1344)) {
    sub_100A7B784((void *)a1);
  }
  sub_100B67CB4(*(void *)(a1 + 1416));
  return sub_100A7B614(a1);
}

void sub_100A7BF70(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  BOOL v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Trying to tear down ActiveStateDetector",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v11[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Trying to tear down ActiveStateDetector",  v11,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::teardownActiveStateDetector()", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  if (*(void *)(a1 + 472))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    double v3 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Tearing down ActiveStateDetector", buf, 2u);
    }

    int v4 = (uint64_t **)(a1 + 472);
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v11[0] = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down ActiveStateDetector",  v11,  v10);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::teardownActiveStateDetector()", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    uint64_t v5 = *v4;
    *int v4 = 0LL;
    if (v5) {
      sub_10046ABC8((int)v4, v5);
    }
  }

uint64_t sub_100A7C248(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 648);
  int isTypePedestrian = CLMotionActivity::isTypePedestrian( +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "CLMotionActivityTypeFromCMWorkoutType:",  *a2));
  uint64_t v6 = sub_1004F97F4();
  uint64_t v7 = *(void *)(a1 + 624);
  unsigned __int16 v9 = v7 != 15 && v7 != 24;
  uint64_t v10 = 0LL;
  if (isTypePedestrian && v4 && v4 != 3) {
    return sub_100A7C2D8(a1, a2) & HIWORD(v6) & v9;
  }
  return v10;
}

uint64_t sub_100A7C2D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100BEF764(*(void *)(a1 + 624));
  uint64_t v5 = sub_100BEF764(*a2);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v6 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    uint64_t v26 = v4;
    __int16 v27 = 2050;
    uint64_t v28 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Checking if resuming the same workout: confirmed=%{public}ld detected=%{public}ld",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v21 = 134349312;
    uint64_t v22 = v4;
    __int16 v23 = 2050;
    uint64_t v24 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Checking if resuming the same workout: confirmed=%{public}ld detected=%{public}ld",  &v21,  22);
    __int16 v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::isSameWorkout(const ELabelerUpdate *const) const",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  uint64_t v7 = *(void *)(a1 + 624);
  if (v7 == 24 || v7 == 15)
  {
    uint64_t v8 = sub_100BEF764(v4);
    int v10 = v8 == 1 || v8 == 24;
    uint64_t v11 = sub_100BEF764(v5);
    int v13 = v11 == 1 || v11 == 24;
    if (v10 != v13) {
      return 0LL;
    }
  }

  else if (v4 != v5)
  {
    return 0LL;
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  __int16 v15 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Checking to see if we should retract stop alert. Workout is the same.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v21) = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Checking to see if we should retract stop alert. Workout is the same.",  &v21,  v20);
    __int16 v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::isSameWorkout(const ELabelerUpdate *const) const",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  return 1LL;
}

BOOL sub_100A7C63C(uint64_t a1, uint64_t *a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 648);
    uint64_t v6 = *a2;
    *(_DWORD *)buf = 134349312;
    uint64_t v17 = v5;
    __int16 v18 = 2050;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Checking if resuming in the same location: previous=%{public}ld new=%{public}ld",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v8 = *(void *)(a1 + 648);
    uint64_t v9 = *a2;
    int v12 = 134349312;
    uint64_t v13 = v8;
    __int16 v14 = 2050;
    uint64_t v15 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Checking if resuming in the same location: previous=%{public}ld new=%{public}ld",  &v12,  22);
    uint64_t v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::isSameLocation(const ELocationTypeUpdate *const) const",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  return *(void *)(a1 + 648) == *a2;
}

BOOL sub_100A7C820(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 640);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  double v3 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 640);
    *(_DWORD *)buf = 67240448;
    int v13 = v4;
    __int16 v14 = 1026;
    BOOL v15 = v2 == 1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "isPredictedWorkoutConfidenceHigh,detectedWorkoutConfidence,%{public}d,is_high,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v6 = *(_DWORD *)(a1 + 640);
    v9[0] = 67240448;
    v9[1] = v6;
    __int16 v10 = 1026;
    BOOL v11 = v2 == 1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "isPredictedWorkoutConfidenceHigh,detectedWorkoutConfidence,%{public}d,is_high,%{public}d",  v9,  14);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::isPredictedWorkoutConfidenceHigh(const EStartReminderDelayExpired *const) const",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  return v2 == 1;
}

BOOL sub_100A7CA04(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_10199A460);
  if ((v1 & 1) == 0)
  {
    uint64_t v10 = a1;
    int v11 = __cxa_guard_acquire(&qword_10199A460);
    a1 = v10;
    if (v11)
    {
      v12[0] = 120;
      sub_10023AE2C(buf, "AddedDelayInSecondsForHighConfidence", v12, 0);
      dword_10199A458 = (int)(float)((float)v14 / 2.56);
      __cxa_guard_release(&qword_10199A460);
      a1 = v10;
    }
  }

  int v2 = *(_DWORD *)(a1 + 708);
  int v3 = *(_DWORD *)(a1 + 704);
  int v4 = dword_10199A458;
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  int v5 = v4 + v3;
  int v6 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    BOOL v14 = v2 < v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutPredictor::shouldWaitForHighConfidence,shouldWaitForHighConfidenceVar,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v12[0] = 67240192;
    v12[1] = v2 < v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutPredictor::shouldWaitForHighConfidence,shouldWaitForHighConfidenceVar,%{public}d",  v12,  8);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::shouldWaitForHighConfidence(const EStartReminderDelayExpired *const) const",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return v2 < v5;
}

void sub_100A7CC54(_Unwind_Exception *a1)
{
}

uint64_t (***sub_100A7CC74(uint64_t a1))(void, uint8_t *)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  int v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "User started activity again. Check to see if we should retract stop alert. Bringing up indoor/outdoor detector.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "User started activity again. Check to see if we should retract stop alert. Bringing up indoor/outdoor detector.",  v6,  2);
    int v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterConfirmStopRetraction(const ELabelerUpdate *const)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return sub_100A7CE0C(a1);
}

uint64_t (***sub_100A7CE0C(uint64_t a1))(void, uint8_t *)
{
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_10186B668);
  }
  int v2 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 456);
    *(_DWORD *)buf = 67240192;
    int v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Bringing up Indoor/Outdoor detector,isActive,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10186B668);
    }
    int v7 = *(unsigned __int8 *)(a1 + 456);
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "Bringing up Indoor/Outdoor detector,isActive,%{public}d",  v10,  8);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::bringupIndoorOutdoor()", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56LL))(*(void *)(a1 + 32));
  uint64_t result = (uint64_t (***)(void, uint8_t *))sub_10046E868(v4);
  if (!*(_BYTE *)(a1 + 456))
  {
    BOOL v6 = 1;
    *(_BYTE *)(a1 + 456) = 1;
    uint64_t v13 = *(void *)(a1 + 1464);
    uint64_t v14 = *(void *)(a1 + 1480);
    if (sub_100BEF7DC(*(void *)(a1 + 624))) {
      BOOL v6 = *(void *)(a1 + 648) != 3LL;
    }
    buf[0] = v6;
    uint64_t result = *(uint64_t (****)(void, uint8_t *))(a1 + 1488);
    if (result) {
      return (uint64_t (***)(void, uint8_t *))(**result)(result, buf);
    }
  }

  return result;
}

void sub_100A7D024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 592);
  uuid_generate((unsigned __int8 *)(a1 + 592));
  sub_100A78364(v5, v4);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = (double *)a2;
  *(void *)(a1 + 1328) = v6;
  *(void *)(a1 + 664) = *(void *)(a2 + 8LL * (v6 == 3));
  *(void *)(a1 + 632) = 25LL;
  if (v6 == 3)
  {
    double v14 = CFAbsoluteTimeGetCurrent() + -48.6399994;
    int v7 = &v14;
  }

  *(_DWORD *)(a1 + 708) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), *v7) / 2.55999994);
  *(_DWORD *)(a1 + 704) = sub_100A7A370(v8, *(void *)(a2 + 16));
  *(void *)(a1 + 712) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 728) = 3;
  sub_100A7D25C(a1);
  sub_100B67874(*(void *)(a1 + 1416), *(void *)(a2 + 16));
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v9 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a2 + 16);
    int v11 = *(_DWORD *)(a1 + 708);
    *(void *)&double v14 = 68289538LL;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2050;
    uint64_t v18 = v10;
    __int16 v19 = 1026;
    int v20 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Transitioned to kWaitForLabel state., escalated workout type:%{public}ld, elapsed e pochs:%{public}d}",  (uint8_t *)&v14,  0x22u);
  }

  sub_100A7B614(a1);
  sub_100A7B6D8(a1, *(void *)(a2 + 16), 0);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094(a1, 8LL, *(void *)(a1 + 632), (uint64_t)&v14, Current);
  sub_100A7A2A0(a1, (uint64_t)&v14);
  double v13 = CFAbsoluteTimeGetCurrent();
  sub_100A76C3C(a1, 8LL, *(void *)(a1 + 632), 0LL, v13);
  if (*(void *)(a2 + 16) == 3LL) {
    sub_100648CB4(a1 + 1496, 4LL, 2LL, 0LL, 0LL);
  }
}

void *sub_100A7D25C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32));
  uint64_t result = (void *)sub_10046E868(v3);
  uint64_t v5 = *(void *)(v2 + 400);
  if (v5)
  {
    *(_BYTE *)(v5 + 56) = 0;
    return result;
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v6 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bringing up WorkoutLabeler", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v13[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up WorkoutLabeler",  v13,  2);
    int v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::bringupLabeler()", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  v14[0] = &off_10186BC38;
  v14[1] = a1;
  __int16 v15 = v14;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24LL))(buf, a1, v2, v14);
  uint64_t v7 = *(void *)buf;
  *(void *)buf = 0LL;
  uint64_t v8 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    uint64_t v9 = *(void *)buf;
    *(void *)buf = 0LL;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
  }

  uint64_t result = v15;
  if (v15 == v14)
  {
    uint64_t v10 = 4LL;
    uint64_t result = v14;
  }

  else
  {
    if (!v15) {
      return result;
    }
    uint64_t v10 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_100A7D4AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v18 = a16;
  if (a16 == v16)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_100A7D4EC(uint64_t a1, uint64_t a2))(void, uint8_t *)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Transitioned to kLabelAvailable state, wait for indoor/outdoor.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Transitioned to kLabelAvailable state, wait for indoor/outdoor.",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterLabelAvailable_waitForIndoorOutdoor(const ELabelerUpdate *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_100A7D694(a1, a2);
  return sub_100A7CE0C(a1);
}

void sub_100A7D694(uint64_t a1, uint64_t a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Transitioned to kLabelAvailable state.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Transitioned to kLabelAvailable state.",  v10,  2);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterLabelAvailable(const ELabelerUpdate *)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  double v5 = *(double *)(a2 + 8);
  if (*(double *)(a1 + 664) != v5)
  {
    *(double *)(a1 + 664) = v5;
    *(_DWORD *)(a1 + 708) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), v5) / 2.55999994);
  }

  uint64_t v6 = *(void *)a2;
  *(void *)(a1 + 632) = *(void *)a2;
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a2 + 16);
  sub_100B67874(*(void *)(a1 + 1416), v6);
  if (sub_100BEF764(*(void *)(a1 + 632)) == 1)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100A7A094(a1, 9LL, *(void *)(a1 + 632), (uint64_t)buf, Current);
    sub_100A7A2A0(a1, (uint64_t)buf);
  }

void sub_100A7D8B0(void *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Transitioned to kWorkoutStarted.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Transitioned to kWorkoutStarted.",  v7,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterWorkoutStarted(const EStartReminderDelayExpired *)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100250CC0((uint64_t)(a1 + 194), a1 + 74, a1[64], a1[65], 2);
  sub_100A7DB10((uint64_t)a1);
  sub_100A7DCD0(a1);
  sub_100A7DE80(a1);
  if (sub_100BEF764(a1[79]) != 1)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100A7A094((uint64_t)a1, 9LL, a1[79], (uint64_t)buf, Current);
    sub_100A7A2A0((uint64_t)a1, (uint64_t)buf);
  }

  if (a1[79] == 19LL)
  {
    a1[104] = 0LL;
    a1[103] = 0LL;
    a1[82] = 1LL;
    sub_100648CB4((uint64_t)(a1 + 187), 19LL, 1LL, 0LL, 0LL);
  }

  double v4 = CFAbsoluteTimeGetCurrent();
  sub_100A7A094((uint64_t)a1, 11LL, a1[79], (uint64_t)buf, v4);
  sub_100A7A2A0((uint64_t)a1, (uint64_t)buf);
  a1[167] = a1[79];
}

double sub_100A7DB10(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting mute alerts for start", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Resetting mute alerts for start",  v6,  2);
    double v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::resetMuteStartAlert(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  uuid_clear((unsigned __int8 *)(a1 + 1072));
  *(int64x2_t *)(a1 + 1104) = vdupq_n_s64(0x1AuLL);
  *(void *)(a1 + 1136) = 0LL;
  *(void *)(a1 + 1144) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1152) = 0x7FEFFFFFFFFFFFFFLL;
  double result = 2.22507386e-308;
  *(_OWORD *)(a1 + 1168) = xmmword_1012E2690;
  return result;
}

void *sub_100A7DCD0(void *result)
{
  if (result[54])
  {
    unsigned __int8 v1 = result;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down labeler", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down labeler",  v5,  2);
      double v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::teardownLabeler()", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    double result = (void *)v1[54];
    v1[54] = 0LL;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

uint64_t sub_100A7DE80(void *a1)
{
  if (a1[53]) {
    goto LABEL_14;
  }
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up StopDetector",  &v29,  2);
    uint64_t v22 = (char *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  uint64_t v3 = (uint64_t *)operator new(0x60uLL);
  *(void *)buf = &off_10186B9B8;
  *(void *)&uint8_t buf[8] = a1;
  BOOL v34 = buf;
  sub_100F6BC40(v3, a1 + 4, a1 + 173, buf);
  double v4 = (uint64_t **)(a1 + 53);
  double v5 = v34;
  if (v34 == buf)
  {
    uint64_t v6 = 4LL;
    double v5 = buf;
  }

  else
  {
    if (!v34) {
      goto LABEL_12;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  uint64_t v7 = *v4;
  *double v4 = v3;
  if (v7) {
    sub_10046AC38((_DWORD)a1 + 424, v7);
  }
LABEL_14:
  uint64_t v8 = a1[78];
  if (v8) {
    BOOL v9 = v8 == 26;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[79];
      uint64_t v12 = a1[82];
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v17 = a1[79];
      uint64_t v18 = (void *)a1[82];
      int v29 = 134218240;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      id v32 = v18;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      int v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return sub_100F6D170(a1[53], a1[79], a1[82], 1LL);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    double v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a1[78];
      id v16 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v15);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v23 = qword_101934688;
      uint64_t v24 = a1[78];
      id v25 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v24);
      int v29 = 134218240;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  0LL,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    return sub_100F6D170( a1[53],  a1[78],  +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  a1[78]),  0LL);
  }

void sub_100A7E3E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  int v21 = a18;
  if (a18 == v19)
  {
    uint64_t v22 = 4LL;
    int v21 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  operator delete(v18);
  _Unwind_Resume(a1);
}

void *sub_100A7E428(void *a1, int *a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  double v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Transitioned to kWorkoutStopped (stop was detected after start confirmation).",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Transitioned to kWorkoutStopped (stop was detected after start confirmation).",  v10,  2);
    BOOL v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterWorkoutStoppedAfterStartConfirmation(const EStopDetected *)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  sub_100A7E62C((uint64_t)a1, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094((uint64_t)a1, 4LL, a1[78], (uint64_t)buf, Current);
  sub_100A7A2A0((uint64_t)a1, (uint64_t)buf);
  sub_100A7E768((uint64_t)a1);
  sub_100A7DCD0(a1);
  sub_100A7E918((uint64_t)a1);
  double result = sub_100A7D25C((uint64_t)a1);
  uint64_t v7 = a1[78];
  if (v7 == 24 || v7 == 15) {
    *(_BYTE *)(a1[54] + 56LL) = 1;
  }
  return result;
}

double sub_100A7E62C(uint64_t a1, int *a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  double v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v6 = *((void *)a2 + 1);
    int v7 = *a2;
    v9[0] = 68289794;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    CFAbsoluteTime v13 = Current;
    __int16 v14 = 2050;
    uint64_t v15 = v6;
    __int16 v16 = 1026;
    int v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Workout stop detected, at:%{public}f, endTime:%{public}f, reason:%{public}d}",  (uint8_t *)v9,  0x2Cu);
  }

  *(void *)(a1 + 672) = *((void *)a2 + 1);
  double result = 0.0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  return result;
}

void sub_100A7E768(uint64_t a1)
{
  if (*(void *)(a1 + 424))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down stop detector", buf, 2u);
    }

    uint64_t v3 = (uint64_t **)(a1 + 424);
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down stop detector",  v7,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::teardownStopDetector()", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    double v4 = *v3;
    uint64_t *v3 = 0LL;
    if (v4) {
      sub_10046AC38((int)v3, v4);
    }
  }

void sub_100A7E918(uint64_t a1)
{
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_10186B668);
  }
  uint64_t v2 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 456);
    *(_DWORD *)buf = 67240192;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Teardown indoor/outdoor,isActive,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10186B668);
    }
    int v5 = *(unsigned __int8 *)(a1 + 456);
    v7[0] = 67240192;
    v7[1] = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "Teardown indoor/outdoor,isActive,%{public}d",  v7,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::teardownIndoorOutdoor()", "%s\n", v6);
  }

  if (*(_BYTE *)(a1 + 456))
  {
    *(_BYTE *)(a1 + 456) = 0;
    uint64_t v4 = *(void *)(a1 + 1488);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

double sub_100A7EAE8(uint64_t a1, double *a2)
{
  __int128 v4 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a1 + 1264) = *(_OWORD *)(a1 + 784);
  *(_OWORD *)(a1 + 1280) = v4;
  *(_OWORD *)(a1 + 1296) = *(_OWORD *)(a1 + 816);
  __int128 v5 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a1 + 720);
  *(_OWORD *)(a1 + 1216) = v5;
  __int128 v6 = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a1 + 752);
  *(_OWORD *)(a1 + 1248) = v6;
  __int128 v7 = *(_OWORD *)(a1 + 672);
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a1 + 656);
  *(_OWORD *)(a1 + 1152) = v7;
  __int128 v8 = *(_OWORD *)(a1 + 704);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a1 + 688);
  *(_OWORD *)(a1 + 1184) = v8;
  __int128 v9 = *(_OWORD *)(a1 + 608);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a1 + 592);
  *(_OWORD *)(a1 + 1088) = v9;
  __int128 v10 = *(_OWORD *)(a1 + 640);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a1 + 624);
  *(void *)(a1 + 1312) = *(void *)(a1 + 832);
  *(_OWORD *)(a1 + 1120) = v10;
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)a2;
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v11 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 1176);
    uint64_t v13 = *(void *)(a1 + 1112);
    *(_DWORD *)buf = 134349312;
    uint64_t v24 = v12;
    __int16 v25 = 2050;
    uint64_t v26 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Start alerts will be muted for %{public}f seconds for type %{public}ld.",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v15 = *(void *)(a1 + 1176);
    uint64_t v16 = *(void *)(a1 + 1112);
    int v19 = 134349312;
    uint64_t v20 = v15;
    __int16 v21 = 2050;
    uint64_t v22 = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Start alerts will be muted for %{public}f seconds for type %{public}ld.",  &v19,  22);
    uint64_t v18 = (uint8_t *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::muteStartAlert(const EMuteAlert *)", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  sub_100A7A094(a1, 6LL, *(void *)(a1 + 1112), (uint64_t)buf, *a2);
  return sub_100A7A2A0(a1, (uint64_t)buf);
}

void sub_100A7ED4C(uint64_t a1, double *a2)
{
}

uint64_t sub_100A7ED84(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction. Notifying clients.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction. Notifying clients.",  v8,  2);
    __int128 v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EMuteAlert]",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094(a1, 10LL, 0LL, (uint64_t)buf, Current);
  sub_100A7A2A0(a1, (uint64_t)buf);
  double v4 = CFAbsoluteTimeGetCurrent();
  sub_100A76C3C(a1, 10LL, 0LL, 22LL, v4);
  return sub_100A86B8C(a1);
}

uint64_t sub_100A7EF60(void *a1, uint64_t a2)
{
  uint64_t result = a1[58];
  if (result)
  {
    uint64_t result = sub_10053B630(result, a2, (uint64_t *)&v5);
    if ((_DWORD)result)
    {
      sub_100CDF008(a1 + 4, &v5);
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      uint64_t v25 = 0LL;
      v11[0] = v5;
      v11[1] = v6;
      __int128 v12 = v7;
      __int128 v13 = v8;
      LODWORD(v14) = v9;
      int v10 = 12;
      uint64_t v4 = a1[182];
      if (!v4) {
        sub_100008BDC();
      }
      return (*(uint64_t (**)(uint64_t, int *, void *))(*(void *)v4 + 48LL))(v4, &v10, v11);
    }
  }

  return result;
}

uint64_t sub_100A7F03C(uint64_t *a1, uint64_t *a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received indoor/outdoor update.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Received indoor/outdoor update.",  v9,  2);
    __int128 v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::updateIndoorOutdoorState(const ELocationTypeUpdate *)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if (a1[82] != *a2)
  {
    a1[82] = *a2;
    if (sub_100BEF764(a1[79]) == 1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100A7A094((uint64_t)a1, 9LL, a1[79], (uint64_t)buf, Current);
      sub_100A7A2A0((uint64_t)a1, (uint64_t)buf);
    }
  }

  return sub_100B660C0(a1[177], *a2);
}

double sub_100A7F224(uint64_t a1, void *a2)
{
  *(void *)(a1 + 648) = *a2;
  *(void *)(a1 + 624) = sub_100A7F420(a1, *(void *)(a1 + 624));
  sub_100A7E918(a1);
  if (*a2)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    __int128 v5 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *a2;
      *(_DWORD *)buf = 134349056;
      uint64_t v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received indoor/outdoor disambiguation for a one button workout, new location update %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v8 = *a2;
      int v11 = 134349056;
      uint64_t v12 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Received indoor/outdoor disambiguation for a one button workout, new location update %{public}ld",  &v11,  12);
      int v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::workoutConfirmedLocationUpdate(const ELocationTypeUpdate *)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    double Current = CFAbsoluteTimeGetCurrent();
    sub_100A7A094(a1, 7LL, *(void *)(a1 + 624), (uint64_t)buf, Current);
    return sub_100A7A2A0(a1, (uint64_t)buf);
  }

  return result;
}

uint64_t sub_100A7F420(uint64_t a1, uint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v4 = *(void *)(a1 + 648);
    if (v4 == 1)
    {
      uint64_t v2 = 18LL;
    }

    else if (v4 == 2)
    {
      uint64_t v2 = 17LL;
    }

    else
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      int v9 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Indoor/outdoor detector unable to disambiguate location for running",  buf,  2u);
      }

      uint64_t v2 = 2LL;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        LOWORD(v19) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Indoor/outdoor detector unable to disambiguate location for running",  &v19,  2);
        __int128 v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
        uint64_t v2 = 2LL;
      }
    }
  }

  else
  {
    uint64_t v2 = a2;
    if (a2 == 1)
    {
      uint64_t v3 = *(void *)(a1 + 648);
      if (v3 == 1)
      {
        uint64_t v2 = 16LL;
      }

      else if (v3 == 2)
      {
        uint64_t v2 = 15LL;
      }

      else
      {
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        uint64_t v8 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Indoor/outdoor detector unable to disambiguate location for walking",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10186B648);
          }
          LOWORD(v19) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Indoor/outdoor detector unable to disambiguate location for walking",  &v19,  2);
          __int128 v15 = (uint8_t *)v14;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)",  "%s\n",  v14);
          if (v15 != buf) {
            free(v15);
          }
        }

        uint64_t v2 = 1LL;
      }
    }

    else
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      __int128 v5 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Called updateWorkoutTypeForOneButtonWorkouts when not in a one button workout",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        LOWORD(v19) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Called updateWorkoutTypeForOneButtonWorkouts when not in a one button workout",  &v19,  2);
        __int128 v7 = (uint8_t *)v6;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)",  "%s\n",  v6);
        if (v7 != buf) {
          free(v7);
        }
      }
    }
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  int v10 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    uint64_t v22 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Updated workout type for one button workout to %{public}ld",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v19 = 134349056;
    uint64_t v20 = v2;
    LODWORD(v18) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Updated workout type for one button workout to %{public}ld",  &v19,  v18);
    __int128 v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  return v2;
}

uint64_t sub_100A7F9AC(void *a1, void *a2)
{
  return sub_100A7F9E0(a1);
}

uint64_t sub_100A7F9E0(void *a1)
{
  if (a1[53]) {
    goto LABEL_14;
  }
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up StopDetector",  &v29,  2);
    uint64_t v22 = (char *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  uint64_t v3 = (uint64_t *)operator new(0x60uLL);
  *(void *)buf = &off_10186BA38;
  *(void *)&uint8_t buf[8] = a1;
  BOOL v34 = buf;
  sub_100F6BC40(v3, a1 + 4, a1 + 173, buf);
  uint64_t v4 = (uint64_t **)(a1 + 53);
  __int128 v5 = v34;
  if (v34 == buf)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = buf;
  }

  else
  {
    if (!v34) {
      goto LABEL_12;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  __int128 v7 = *v4;
  *uint64_t v4 = v3;
  if (v7) {
    sub_10046AC38((_DWORD)a1 + 424, v7);
  }
LABEL_14:
  uint64_t v8 = a1[78];
  if (v8) {
    BOOL v9 = v8 == 26;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    int v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[79];
      uint64_t v12 = a1[82];
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v17 = a1[79];
      uint64_t v18 = (void *)a1[82];
      int v29 = 134218240;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      id v32 = v18;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      uint64_t v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return sub_100F6D170(a1[53], a1[79], a1[82], 1LL);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a1[78];
      id v16 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v15);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v23 = qword_101934688;
      uint64_t v24 = a1[78];
      id v25 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v24);
      int v29 = 134218240;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  0LL,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    return sub_100F6D170( a1[53],  a1[78],  +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  a1[78]),  0LL);
  }

void sub_100A7FF40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  __int128 v21 = a18;
  if (a18 == v19)
  {
    uint64_t v22 = 4LL;
    __int128 v21 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_100A7FF88(uint64_t a1, uint64_t a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(_DWORD *)buf = 134349056;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Updating label startTime to %{public}f and tearing down indoor/outdoor.",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v6 = *(void *)(a2 + 24);
    int v9 = 134349056;
    uint64_t v10 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Updating label startTime to %{public}f and tearing down indoor/outdoor.",  &v9,  12);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::updateLabel_teardownIndoorOutdoor(const ELabelerUpdate *)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  *(void *)(a1 + 664) = *(void *)(a2 + 24);
  sub_100A80158(a1, a2);
  sub_100A7E918(a1);
}

void sub_100A80158(uint64_t a1, uint64_t a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)buf = 134349056;
    uint64_t v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Updating label to %{public}ld.", buf, 0xCu);
  }

  uint64_t v6 = sub_1002921D0(115, 2);
  if ((_DWORD)v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v13 = *(void *)a2;
    int v16 = 134349056;
    uint64_t v17 = v13;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "Updating label to %{public}ld.",  &v16,  12);
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v6 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::updateLabel(const ELabelerUpdate *)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  uint64_t v7 = *(void *)(a1 + 632);
  uint64_t v8 = *(void *)a2;
  double v9 = *(double *)(a1 + 664);
  double v10 = *(double *)(a2 + 8);
  if (v9 != v10)
  {
    *(double *)(a1 + 664) = v10;
    *(_DWORD *)(a1 + 708) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), v10) / 2.55999994);
  }

  uint64_t v11 = *(void *)a2;
  *(void *)(a1 + 632) = *(void *)a2;
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 704) = sub_100A7A370(v6, v11);
  if (v7 != v8 || v9 != v10)
  {
    sub_100B67874(*(void *)(a1 + 1416), *(void *)a2);
    if (sub_100BEF764(*(void *)a2) == 1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100A7A094(a1, 9LL, *(void *)a2, (uint64_t)buf, Current);
      sub_100A7A2A0(a1, (uint64_t)buf);
    }
  }

void sub_100A803C0(uint64_t a1)
{
  if (sub_100BEF7DC(*(void *)(a1 + 624)) && *(void *)(a1 + 648) == 3LL)
  {
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10186B668);
    }
    uint64_t v2 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Entering a one button workout", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10186B668);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "Entering a one button workout",  v5,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::checkIfOneButtonWorkoutAndBringupIndoorOutdoor()",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    if (!*(_BYTE *)(a1 + 1472) && (sub_1004F97F4() & 0x1000000000000LL) != 0) {
      sub_100A7CE0C(a1);
    }
  }

uint64_t sub_100A80580(void *a1)
{
  if (a1[53]) {
    goto LABEL_14;
  }
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up StopDetector",  &v29,  2);
    uint64_t v22 = (char *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  uint64_t v3 = (uint64_t *)operator new(0x60uLL);
  *(void *)buf = &off_10186BAB8;
  *(void *)&uint8_t buf[8] = a1;
  BOOL v34 = buf;
  sub_100F6BC40(v3, a1 + 4, a1 + 173, buf);
  uint64_t v4 = (uint64_t **)(a1 + 53);
  uint64_t v5 = v34;
  if (v34 == buf)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = buf;
  }

  else
  {
    if (!v34) {
      goto LABEL_12;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  uint64_t v7 = *v4;
  *uint64_t v4 = v3;
  if (v7) {
    sub_10046AC38((_DWORD)a1 + 424, v7);
  }
LABEL_14:
  uint64_t v8 = a1[78];
  if (v8) {
    BOOL v9 = v8 == 26;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    double v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[79];
      uint64_t v12 = a1[82];
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v17 = a1[79];
      uint64_t v18 = (void *)a1[82];
      int v29 = 134218240;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      id v32 = v18;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      uint64_t v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return sub_100F6D170(a1[53], a1[79], a1[82], 1LL);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a1[78];
      id v16 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v15);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v23 = qword_101934688;
      uint64_t v24 = a1[78];
      id v25 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v24);
      int v29 = 134218240;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  0LL,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    return sub_100F6D170( a1[53],  a1[78],  +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  a1[78]),  0LL);
  }

void sub_100A80AE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  __int128 v21 = a18;
  if (a18 == v19)
  {
    uint64_t v22 = 4LL;
    __int128 v21 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  operator delete(v18);
  _Unwind_Resume(a1);
}

void *sub_100A80B28(void *a1, uint64_t a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User confirmed start of a workout (and stop is enabled).",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "User confirmed start of a workout (and stop is enabled).",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterWorkoutConfirmedStopEnabled(const EUserStartedWorkout *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_100A80CDC((uint64_t)a1, a2);
  sub_100A81330(a1);
  return sub_100A7DCD0(a1);
}

void sub_100A80CDC(uint64_t a1, uint64_t a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User confirmed start of a workout.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "User confirmed start of a workout.",  &v29,  2);
    uint64_t v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)",  "%s\n",  v22);
    if (v23 != buf) {
      free(v23);
    }
  }

  sub_100A81A90(a1);
  *(void *)(a1 + 624) = *(void *)(a2 + 40);
  *(void *)(a1 + 648) = *(void *)(a2 + 48);
  *(void *)(a1 + 736) = *(void *)(a2 + 56);
  double v5 = *(double *)(a2 + 32);
  *(double *)(a1 + 664) = v5;
  *(void *)(a1 + 704) = 0x7FFFFFFFLL;
  __int128 v6 = *(_OWORD *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 808) = v7;
  *(_OWORD *)(a1 + 792) = v6;
  *(_OWORD *)(a1 + 776) = v8;
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 144);
  uuid_copy((unsigned __int8 *)(a1 + 608), (const unsigned __int8 *)(a2 + 16));
  if (uuid_is_null((const unsigned __int8 *)(a1 + 592))
    || uuid_compare((const unsigned __int8 *)(a1 + 592), (const unsigned __int8 *)a2))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    BOOL v9 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a2 + 40);
      uint64_t v11 = *(void *)(a1 + 632);
      *(_DWORD *)buf = 134349312;
      *(void *)BOOL v34 = v10;
      *(_WORD *)&v34[8] = 2050;
      *(void *)&v34[10] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "User started workout (%{public}ld) that differs from prediction (%{public}ld).",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v24 = *(void *)(a2 + 40);
      uint64_t v25 = *(void *)(a1 + 632);
      int v29 = 134349312;
      uint64_t v30 = v24;
      __int16 v31 = 2050;
      uint64_t v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "User started workout (%{public}ld) that differs from prediction (%{public}ld).",  &v29,  v28);
      __int16 v27 = (uint8_t *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    *(_DWORD *)(a1 + 728) = 1;
    *(void *)(a1 + 664) = *(void *)(a2 + 32);
    uuid_copy((unsigned __int8 *)(a1 + 592), (const unsigned __int8 *)a2);
    sub_100A78364(v12, (unsigned __int8 *)(a1 + 592));
    sub_100250CC0(a1 + 1552, (void *)(a1 + 592), *(void *)(a1 + 512), *(void *)(a1 + 520), 3);
  }

  else
  {
    *(_DWORD *)(a1 + 728) = 2;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v19 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "User started workout based on prediction.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      LOWORD(v29) = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "User started workout based on prediction.",  &v29,  v28);
      __int128 v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }
  }

  uint64_t v13 = *(void *)(a1 + 656);
  if (v13 && v13 != *(void *)(a1 + 648))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 656);
      uint64_t v16 = *(void *)(a1 + 648);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)BOOL v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(void *)&v34[6] = "";
      *(_WORD *)&v34[14] = 2050;
      *(void *)&v34[16] = v15;
      __int16 v35 = 2050;
      uint64_t v36 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Location type differs, Detected:%{public}ld, User specified:%{public}ld}",  buf,  0x26u);
    }
  }

  sub_100A803C0(a1);
  sub_100B67CB4(*(void *)(a1 + 1416));
  uint64_t v17 = sub_100BEF6EC(*(void *)(a1 + 632), *(void *)(a1 + 656));
  uint64_t v18 = sub_100BEF6EC(*(void *)(a1 + 624), *(void *)(a1 + 648));
  sub_100A7A094(a1, 0LL, *(void *)(a1 + 624), (uint64_t)buf, *(double *)(a2 + 32));
  if (v17 == v18)
  {
    sub_1006489B0(a1 + 1496, v37, v38, v39, v40);
    sub_100648D60((void *)(a1 + 1496));
  }

  else
  {
    sub_100648A9C(a1 + 1496);
  }

  sub_100A7A2A0(a1, (uint64_t)buf);
  *(void *)(a1 + 1344) = *(void *)(a2 + 40);
  sub_100A7B784((void *)a1);
  sub_100A81C50((void *)a1);
}

uint64_t sub_100A81330(void *a1)
{
  if (a1[53]) {
    goto LABEL_14;
  }
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up StopDetector",  &v29,  2);
    uint64_t v22 = (char *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  uint64_t v3 = (uint64_t *)operator new(0x60uLL);
  *(void *)buf = &off_10186BB38;
  *(void *)&uint8_t buf[8] = a1;
  BOOL v34 = buf;
  sub_100F6BC40(v3, a1 + 4, a1 + 173, buf);
  uint64_t v4 = (uint64_t **)(a1 + 53);
  double v5 = v34;
  if (v34 == buf)
  {
    uint64_t v6 = 4LL;
    double v5 = buf;
  }

  else
  {
    if (!v34) {
      goto LABEL_12;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  __int128 v7 = *v4;
  *uint64_t v4 = v3;
  if (v7) {
    sub_10046AC38((_DWORD)a1 + 424, v7);
  }
LABEL_14:
  uint64_t v8 = a1[78];
  if (v8) {
    BOOL v9 = v8 == 26;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[79];
      uint64_t v12 = a1[82];
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v17 = a1[79];
      uint64_t v18 = (void *)a1[82];
      int v29 = 134218240;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      id v32 = v18;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      uint64_t v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return sub_100F6D170(a1[53], a1[79], a1[82], 1LL);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a1[78];
      id v16 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v15);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v23 = qword_101934688;
      uint64_t v24 = a1[78];
      id v25 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v24);
      int v29 = 134218240;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  0LL,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    return sub_100F6D170( a1[53],  a1[78],  +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  a1[78]),  0LL);
  }

void sub_100A81890( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  __int128 v21 = a18;
  if (a18 == v19)
  {
    uint64_t v22 = 4LL;
    __int128 v21 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_100A818D8(void *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down for StopDisabled", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down for StopDisabled",  v6,  2);
    double v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::partialTeardownWhenStopIsDisabled(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100A7E768((uint64_t)a1);
  sub_100A7DCD0(a1);
  sub_100A7E918((uint64_t)a1);
  sub_100A803C0((uint64_t)a1);
  return sub_100A7B614((uint64_t)a1);
}

double sub_100A81A90(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting mute alerts for start", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Resetting mute alerts for start",  v6,  2);
    double v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::resetMuteStartAlert(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  uuid_clear((unsigned __int8 *)(a1 + 1072));
  *(int64x2_t *)(a1 + 1104) = vdupq_n_s64(0x1AuLL);
  *(void *)(a1 + 1136) = 0LL;
  *(void *)(a1 + 1144) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1152) = 0x7FEFFFFFFFFFFFFFLL;
  double result = 2.22507386e-308;
  *(_OWORD *)(a1 + 1168) = xmmword_1012E2690;
  return result;
}

void sub_100A81C50(void *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to bringup ActiveStateDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v20[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Trying to bringup ActiveStateDetector",  v20,  2);
    id v16 = (uint8_t *)v15;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  uint64_t v3 = sub_100BEF6EC(a1[78], a1[81]);
  uint64_t v4 = v3;
  double v5 = (uint64_t **)(a1 + 59);
  uint64_t v6 = (uint64_t *)a1[59];
  if (v6)
  {
    if (v6[2] == v3)
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      __int128 v7 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Trying to bringup ActiveStateDetector,but already running",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        v20[0] = 0;
        LODWORD(v19) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Trying to bringup ActiveStateDetector,but already running",  v20,  v19);
        BOOL v9 = (uint8_t *)v8;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v8);
        if (v9 != buf) {
          free(v9);
        }
      }

      return;
    }

    uint8_t *v5 = 0LL;
    sub_10046ABC8((_DWORD)a1 + 472, v6);
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v10 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Bringing up ActiveStateDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v20[0] = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up ActiveStateDetector",  v20,  v19);
    uint64_t v18 = (uint8_t *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  uint64_t v11 = (uint64_t *)operator new(0x38uLL);
  *(void *)buf = &off_10186BBB8;
  uint64_t v22 = a1;
  uint64_t v23 = buf;
  sub_100518774(v11, (uint64_t)(a1 + 4), (uint64_t)buf);
  uint64_t v12 = v23;
  if (v23 == buf)
  {
    uint64_t v13 = 4LL;
    uint64_t v12 = buf;
    goto LABEL_27;
  }

  if (v23)
  {
    uint64_t v13 = 5LL;
LABEL_27:
    (*(void (**)(void))(*(void *)v12 + 8 * v13))();
  }

  uint64_t v14 = *v5;
  uint8_t *v5 = v11;
  if (v14)
  {
    sub_10046ABC8((_DWORD)a1 + 472, v14);
    uint64_t v11 = *v5;
  }

  sub_100518C7C(v11, v4);
}

void sub_100A820E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v19 = a16;
  if (a16 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_100A82130(uint64_t a1, void *a2)
{
  *(void *)(a1 + 1408) = *a2;
  uint64_t v3 = *(int **)(a1 + 464);
  if (v3) {
    sub_10053C1E0(v3, (void *)(a1 + 1408));
  }
}

uint64_t *sub_100A82150(uint64_t a1, __int128 *a2)
{
  double result = *(uint64_t **)(a1 + 472);
  if (result) {
    return (uint64_t *)sub_1005189C8(result);
  }
  return result;
}

uint64_t sub_100A82188(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  __int128 v10 = *(_OWORD *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 160);
  __int128 v4 = *(_OWORD *)(a2 + 128);
  __int128 v14 = *(_OWORD *)(a2 + 112);
  __int128 v15 = v4;
  __int128 v16 = *(_OWORD *)(a2 + 144);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v13 = *(_OWORD *)(a2 + 96);
  __int128 v12 = v5;
  if ((void)v10 == 19LL) {
    __int128 v17 = *(_OWORD *)(a2 + 64);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if ((_DWORD)result) {
    return sub_100CCCC8C(a1 + 8, 6, (uint64_t)dst);
  }
  return result;
}

void sub_100A8226C(void *a1, double a2)
{
  if (a1[78] == 26LL)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "Workout, Error stopping, no active workouts",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v5[0] = 0;
      uint64_t v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  17LL,  "Workout, Error stopping, no active workouts",  v5,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWorkoutPredictor::feedUserWorkoutStop(CFAbsoluteTime)", "%s\n", v3);
    }
  }

  else
  {
    *(double *)buf = a2;
  }

void sub_100A82424(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 16) && !*(void *)(a1 + 736))
  {
    uint64_t v2 = *(void *)(a1 + 472);
    if (v2)
    {
      sub_100518A50(v2, *(unsigned __int8 *)(a2 + 16) != 2, *(double *)(a2 + 8));
    }

    else
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v3 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "ActiveStateDetector should be active?",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186B648);
        }
        v5[0] = 0;
        __int128 v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "ActiveStateDetector should be active?",  v5,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutPredictor::feedActivePedStateUpdate(const CMActivePedStateEntry &)",  "%s\n",  v4);
      }
    }
  }

void sub_100A825FC(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (v2)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100518A50(v2, a2, Current);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    __int128 v5 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ActiveStateDetector should be active?", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v7[0] = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "ActiveStateDetector should be active?",  v7,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLWorkoutPredictor::feedSkiUpdate(BOOL)", "%s\n", v6);
    }
  }

void *sub_100A827C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  sub_10001A504((uint64_t)v9, a2);
  sub_1006A50F0((uint64_t)v6, a1, (uint64_t)v9);
  *a3 = v6;
  uint64_t result = v10;
  if (v10 == v9)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v9;
  }

  else
  {
    if (!v10) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_100A82880( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  __int128 v16 = a13;
  if (a13 == v14)
  {
    uint64_t v17 = 4LL;
    __int128 v16 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100A828C8(uint64_t result)
{
  if (!*(void *)(result + 464))
  {
    unsigned __int8 v1 = (void *)result;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up Tier2 Classifier", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up Tier2 Classifier",  v7,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::onTier2ClassifierActivate()", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    uint64_t v3 = operator new(0xF0F8uLL);
    sub_10053B5F8((uint64_t)v3, v1 + 176);
    __int128 v4 = (void *)v1[58];
    v1[58] = v3;
    if (v4) {
      operator delete(v4);
    }
    return sub_100A7B898(v1);
  }

  return result;
}

void sub_100A82A8C(_Unwind_Exception *a1)
{
}

uint64_t sub_100A82AA8(uint64_t result)
{
  if (*(void *)(result + 464))
  {
    unsigned __int8 v1 = (void *)result;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tear down tier2 classifier", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tear down tier2 classifier",  v6,  2);
      __int128 v5 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutPredictor::onTier2ClassifierDeactivate()", "%s\n", v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    uint64_t v3 = (void *)v1[58];
    v1[58] = 0LL;
    if (v3) {
      operator delete(v3);
    }
    return sub_100A7B898(v1);
  }

  return result;
}

BOOL sub_100A82C5C(uint64_t a1, uint64_t a2)
{
  if (sub_100BEF7DC(*(void *)(a1 + 624)) && *(void *)(a1 + 648) == 3LL && *(_BYTE *)(a1 + 1472))
  {
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10186B668);
    }
    __int128 v4 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Forced location signal, new workout location: %zd",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10186B668);
      }
      int v15 = 134217984;
      *(void *)__int128 v16 = a2;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  0LL,  "Forced location signal, new workout location: %zd",  (size_t)&v15);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::triggerWorkoutLocationUpdateForUserStartedWorkouts(CMWorkoutLocationType)",  "%s\n",  v14);
      if (v14 != buf) {
        free(v14);
      }
    }

    *(void *)buf = a2;
    return 1LL;
  }

  else
  {
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10186B668);
    }
    uint64_t v6 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = sub_100BEF7DC(*(void *)(a1 + 624));
      BOOL v8 = *(void *)(a1 + 648) == 3LL;
      int v9 = *(unsigned __int8 *)(a1 + 1472);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v8;
      __int16 v20 = 1024;
      int v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Cannot force location signal; isValidWorkoutForLocationTbd: %d, IsLocationTbd: %d, fEnableForcedWorkoutLocationU"
        "pdatesFromSPI: %d",
        buf,
        0x14u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10186B668);
      }
      uint64_t v10 = qword_101934758;
      sub_100BEF7DC(*(void *)(a1 + 624));
      BOOL v11 = *(void *)(a1 + 648) == 3LL;
      int v12 = *(unsigned __int8 *)(a1 + 1472);
      *(_WORD *)&v16[4] = 1024;
      *(_DWORD *)&v16[6] = v11;
      __int16 v17 = 1024;
      int v18 = v12;
      __int128 v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  0LL,  "Cannot force location signal; isValidWorkoutForLocationTbd: %d, IsLocationTbd: %d, fEnableForcedWo"
                      "rkoutLocationUpdatesFromSPI: %d",
                      &v15,
                      20,
                      67109632);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::triggerWorkoutLocationUpdateForUserStartedWorkouts(CMWorkoutLocationType)",  "%s\n",  v13);
      if (v13 != buf) {
        free(v13);
      }
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100A83000(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1320) = a2;
  return result;
}

void sub_100A83008(uint64_t a1, int a2)
{
}

void sub_100A83010(uint64_t a1, uint64_t a2)
{
}

void sub_100A83018(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  sub_100A7E918(a1);
}

uint64_t sub_100A83068(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1374) = a2;
  return result;
}

uint64_t sub_100A83070(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  else {
    return v2 + 8;
  }
}

void sub_100A83088(void *a1)
{
  unsigned __int8 v1 = sub_10046AAB4(a1);
  operator delete(v1);
}

void sub_100A8309C(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100A830C8(id a1)
{
  qword_101934758 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_100A830F4(uint64_t a1)
{
  uint64_t v1 = sub_100B67F34(*(void *)(a1 + 1416));
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v8 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d",  v6,  8);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EPreferenceChanged]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return v1;
}

uint64_t sub_100A832A8(uint64_t a1)
{
  uint64_t v1 = sub_100A83458(a1) ^ 1;
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v8 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutPredictor,backgroundEscalationIsActive,is_active,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutPredictor,backgroundEscalationIsActive,is_active,%{public}d",  v6,  8);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::backgroundEscalationIsActive(const T *) const [T = CLWorkoutPredictor::EMuteAlert]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return v1;
}

uint64_t sub_100A83458(uint64_t a1)
{
  uint64_t v1 = sub_100B67F34(*(void *)(a1 + 1416));
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v8 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 67240192;
    v6[1] = v1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d",  v6,  8);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EMuteAlert]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return v1;
}

uint64_t sub_100A8360C(uint64_t *a1, int *a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  __int128 v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Transitioned to kInit (stop was detected prior to start confirmation).",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v12[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Transitioned to kInit (stop was detected prior to start confirmation).",  v12,  2);
    BOOL v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterWorkoutStoppedBeforeStartConfirmation(const T *) [T = CLWorkoutPredictor::EDeescalate]",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  sub_100250CC0((uint64_t)(a1 + 194), a1 + 74, a1[64], a1[65], 1);
  sub_100A7E62C((uint64_t)a1, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094((uint64_t)a1, 10LL, 0LL, (uint64_t)buf, Current);
  sub_100A7A2A0((uint64_t)a1, (uint64_t)buf);
  uint64_t v7 = sub_100A83070(v6, *a2);
  double v8 = CFAbsoluteTimeGetCurrent();
  sub_100A76C3C((uint64_t)a1, 10LL, 0LL, v7, v8);
  sub_100A7B6D8((uint64_t)a1, a1[89], 1);
  return sub_100A83828((uint64_t)a1);
}

uint64_t sub_100A83828(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction.",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EDeescalate]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100648A9C(a1 + 1496);
  sub_100A7E768(a1);
  sub_100A7DCD0((void *)a1);
  sub_100A7E918(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100A76E68();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(void *)(a1 + 664) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 672) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 704) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 712) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  if (*(void *)(a1 + 1328) || *(void *)(a1 + 1336) || *(void *)(a1 + 1344)) {
    sub_100A7B784((void *)a1);
  }
  sub_100B67CB4(*(void *)(a1 + 1416));
  return sub_100A7B614(a1);
}

uint64_t sub_100A83A7C(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction. Notifying clients.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction. Notifying clients.",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094(a1, 10LL, 0LL, (uint64_t)buf, Current);
  sub_100A7A2A0(a1, (uint64_t)buf);
  double v4 = CFAbsoluteTimeGetCurrent();
  sub_100A76C3C(a1, 10LL, 0LL, 22LL, v4);
  return sub_100A83C58(a1);
}

uint64_t sub_100A83C58(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction.",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100648A9C(a1 + 1496);
  sub_100A7E768(a1);
  sub_100A7DCD0((void *)a1);
  sub_100A7E918(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100A76E68();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(void *)(a1 + 664) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 672) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 704) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 712) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  if (*(void *)(a1 + 1328) || *(void *)(a1 + 1336) || *(void *)(a1 + 1344)) {
    sub_100A7B784((void *)a1);
  }
  sub_100B67CB4(*(void *)(a1 + 1416));
  return sub_100A7B614(a1);
}

uint64_t sub_100A83EAC(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction. Notifying clients.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction. Notifying clients.",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094(a1, 10LL, 0LL, (uint64_t)buf, Current);
  sub_100A7A2A0(a1, (uint64_t)buf);
  double v4 = CFAbsoluteTimeGetCurrent();
  sub_100A76C3C(a1, 10LL, 0LL, 22LL, v4);
  return sub_100A84088(a1);
}

uint64_t sub_100A84088(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction.",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100648A9C(a1 + 1496);
  sub_100A7E768(a1);
  sub_100A7DCD0((void *)a1);
  sub_100A7E918(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100A76E68();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(void *)(a1 + 664) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 672) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 704) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 712) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  if (*(void *)(a1 + 1328) || *(void *)(a1 + 1336) || *(void *)(a1 + 1344)) {
    sub_100A7B784((void *)a1);
  }
  sub_100B67CB4(*(void *)(a1 + 1416));
  return sub_100A7B614(a1);
}

uint64_t sub_100A842DC(uint64_t *a1, int *a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  double v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Transitioned to kInit (stop was detected prior to start confirmation).",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v12[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Transitioned to kInit (stop was detected prior to start confirmation).",  v12,  2);
    BOOL v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::enterWorkoutStoppedBeforeStartConfirmation(const T *) [T = CLWorkoutPredictor::EStopDetected]",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  sub_100250CC0((uint64_t)(a1 + 194), a1 + 74, a1[64], a1[65], 1);
  sub_100A7E62C((uint64_t)a1, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094((uint64_t)a1, 10LL, 0LL, (uint64_t)buf, Current);
  sub_100A7A2A0((uint64_t)a1, (uint64_t)buf);
  uint64_t v7 = sub_100A83070(v6, *a2);
  double v8 = CFAbsoluteTimeGetCurrent();
  sub_100A76C3C((uint64_t)a1, 10LL, 0LL, v7, v8);
  sub_100A7B6D8((uint64_t)a1, a1[89], 1);
  return sub_100A844F8((uint64_t)a1);
}

uint64_t sub_100A844F8(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction.",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EStopDetected]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100648A9C(a1 + 1496);
  sub_100A7E768(a1);
  sub_100A7DCD0((void *)a1);
  sub_100A7E918(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100A76E68();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(void *)(a1 + 664) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 672) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 704) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 712) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  if (*(void *)(a1 + 1328) || *(void *)(a1 + 1336) || *(void *)(a1 + 1344)) {
    sub_100A7B784((void *)a1);
  }
  sub_100B67CB4(*(void *)(a1 + 1416));
  return sub_100A7B614(a1);
}

double sub_100A8474C(uint64_t a1, double *a2)
{
  if (*(_BYTE *)(a1 + 1374))
  {
    sub_100A7A094(a1, 2LL, *(void *)(a1 + 624), (uint64_t)v4, *a2);
    return sub_100A7A2A0(a1, (uint64_t)v4);
  }

  return result;
}

double sub_100A847C4(uint64_t a1, double *a2)
{
  if (*(_BYTE *)(a1 + 1374))
  {
    sub_100A7A094(a1, 3LL, *(void *)(a1 + 624), (uint64_t)v4, *a2);
    return sub_100A7A2A0(a1, (uint64_t)v4);
  }

  return result;
}

uint64_t sub_100A8483C(void *a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down for StopDisabled", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down for StopDisabled",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::partialTeardownWhenStopIsDisabled(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100A7E768((uint64_t)a1);
  sub_100A7DCD0(a1);
  sub_100A7E918((uint64_t)a1);
  sub_100A803C0((uint64_t)a1);
  return sub_100A7B614((uint64_t)a1);
}

uint64_t sub_100A849F4(void *a1)
{
  return sub_100A84A38(a1);
}

uint64_t sub_100A84A38(void *a1)
{
  if (a1[53]) {
    goto LABEL_14;
  }
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up StopDetector",  &v29,  2);
    uint64_t v22 = (char *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  uint64_t v3 = (uint64_t *)operator new(0x60uLL);
  *(void *)buf = &off_10186B698;
  *(void *)&uint8_t buf[8] = a1;
  BOOL v34 = buf;
  sub_100F6BC40(v3, a1 + 4, a1 + 173, buf);
  double v4 = (uint64_t **)(a1 + 53);
  __int128 v5 = v34;
  if (v34 == buf)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = buf;
  }

  else
  {
    if (!v34) {
      goto LABEL_12;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  uint64_t v7 = *v4;
  *double v4 = v3;
  if (v7) {
    sub_10046AC38((_DWORD)a1 + 424, v7);
  }
LABEL_14:
  uint64_t v8 = a1[78];
  if (v8) {
    BOOL v9 = v8 == 26;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    uint64_t v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[79];
      uint64_t v12 = a1[82];
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v17 = a1[79];
      int v18 = (void *)a1[82];
      int v29 = 134218240;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      id v32 = v18;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return sub_100F6D170(a1[53], a1[79], a1[82], 1LL);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    __int128 v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a1[78];
      id v16 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v15);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v23 = qword_101934688;
      uint64_t v24 = a1[78];
      id v25 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v24);
      int v29 = 134218240;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  0LL,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    return sub_100F6D170( a1[53],  a1[78],  +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  a1[78]),  0LL);
  }

void sub_100A84F98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  int v21 = a18;
  if (a18 == v19)
  {
    uint64_t v22 = 4LL;
    int v21 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  operator delete(v18);
  _Unwind_Resume(a1);
}

void *sub_100A84FE0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186B698;
  result[1] = v3;
  return result;
}

uint64_t sub_100A85018(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186B698;
  a2[1] = v2;
  return result;
}

void *sub_100A85038(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A850D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A85110()
{
}

uint64_t sub_100A8511C(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retracting stop alert.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Retracting stop alert.",  v7,  2);
    __int128 v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::retractStopAlert(const T *const) [T = CLWorkoutPredictor::ELabelerUpdate]",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094(a1, 12LL, *(void *)(a1 + 624), (uint64_t)buf, Current);
  sub_100A7A2A0(a1, (uint64_t)buf);
  sub_100A8530C(a1);
  sub_100A803C0(a1);
  sub_100A7DCD0((void *)a1);
  return sub_100A854A4((void *)a1);
}

void sub_100A8530C(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down StopDetector and IndoorOutdoor detector.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down StopDetector and IndoorOutdoor detector.",  v5,  2);
    __int128 v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardownCheckingLocationForStopRetractionState(const T *const) [T = CLWorkoutPredictor::ELabelerUpdate]",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100A7E918(a1);
}

uint64_t sub_100A854A4(void *a1)
{
  if (a1[53]) {
    goto LABEL_14;
  }
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Bringing up StopDetector",  &v29,  2);
    uint64_t v22 = (char *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  int v3 = (uint64_t *)operator new(0x60uLL);
  *(void *)buf = &off_10186B718;
  *(void *)&uint8_t buf[8] = a1;
  BOOL v34 = buf;
  sub_100F6BC40(v3, a1 + 4, a1 + 173, buf);
  __int128 v4 = (uint64_t **)(a1 + 53);
  __int128 v5 = v34;
  if (v34 == buf)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = buf;
  }

  else
  {
    if (!v34) {
      goto LABEL_12;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  __int128 v7 = *v4;
  *__int128 v4 = v3;
  if (v7) {
    sub_10046AC38((_DWORD)a1 + 424, v7);
  }
LABEL_14:
  uint64_t v8 = a1[78];
  if (v8) {
    BOOL v9 = v8 == 26;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    __int128 v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[79];
      uint64_t v12 = a1[82];
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v17 = a1[79];
      int v18 = (void *)a1[82];
      int v29 = 134218240;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      id v32 = v18;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    return sub_100F6D170(a1[53], a1[79], a1[82], 1LL);
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    __int128 v14 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a1[78];
      id v16 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v15);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
      uint64_t v23 = qword_101934688;
      uint64_t v24 = a1[78];
      id v25 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  v24);
      int v29 = 134218240;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      LODWORD(v28) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  0LL,  "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)",  &v29,  v28);
      __int16 v27 = (char *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    return sub_100F6D170( a1[53],  a1[78],  +[CMWorkout workoutLocationTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "workoutLocationTypeFromCMWorkoutType:",  a1[78]),  0LL);
  }

void sub_100A85A04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  int v21 = a18;
  if (a18 == v19)
  {
    uint64_t v22 = 4LL;
    int v21 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  operator delete(v18);
  _Unwind_Resume(a1);
}

void *sub_100A85A4C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186B718;
  result[1] = v3;
  return result;
}

uint64_t sub_100A85A84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186B718;
  a2[1] = v2;
  return result;
}

void *sub_100A85AA4(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A85B40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A85B7C()
{
}

uint64_t sub_100A85B88(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retracting stop alert.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Retracting stop alert.",  v7,  2);
    __int128 v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::retractStopAlert(const T *const) [T = CLWorkoutPredictor::ELocationTypeUpdate]",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  sub_100A7A094(a1, 12LL, *(void *)(a1 + 624), (uint64_t)buf, Current);
  sub_100A7A2A0(a1, (uint64_t)buf);
  sub_100A85D78(a1);
  sub_100A803C0(a1);
  sub_100A7DCD0((void *)a1);
  return sub_100A7F9E0((void *)a1);
}

void sub_100A85D78(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down StopDetector and IndoorOutdoor detector.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down StopDetector and IndoorOutdoor detector.",  v5,  2);
    __int128 v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardownCheckingLocationForStopRetractionState(const T *const) [T = CLWorkoutPredictor::E LocationTypeUpdate]",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100A7E918(a1);
}

void *sub_100A85F18(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186B798;
  result[1] = v3;
  return result;
}

uint64_t sub_100A85F4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186B798;
  a2[1] = v2;
  return result;
}

double sub_100A85F68(uint64_t a1, uint64_t a2)
{
  return sub_100A7A2A0(*(void *)(a1 + 8), a2);
}

uint64_t sub_100A85F70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A85FAC()
{
}

void *sub_100A85FC0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186B818;
  result[1] = v3;
  return result;
}

uint64_t sub_100A85FF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186B818;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A86010(uint64_t a1, unsigned __int8 *a2)
{
  return 1LL;
}

uint64_t sub_100A86030(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A8606C()
{
}

void *sub_100A86080(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186B898;
  result[1] = v3;
  return result;
}

uint64_t sub_100A860B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186B898;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A860D0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*a2) {
    sub_100A828C8(v2);
  }
  else {
    sub_100A82AA8(v2);
  }
  return 1LL;
}

uint64_t sub_100A860FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A86138()
{
}

void *sub_100A8614C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186B918;
  result[1] = v3;
  return result;
}

uint64_t sub_100A86180(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186B918;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A8619C(uint64_t a1, unsigned __int8 *a2)
{
  return 1LL;
}

uint64_t sub_100A861C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A861FC()
{
}

void sub_100A86208(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_100A86234(unsigned __int8 *a1, const char *a2, _WORD *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((_WORD *)a1 + 1) = *a3;
  __int128 v6 = a1 + 2;
  a1[4] = a4;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  *a1 = sub_1002A7208(*(uint64_t *)buf, a2, v6);
  __int128 v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int128 v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10000CE18((uint64_t)v33);
  std::ostream::operator<<(&v34, (unsigned __int16)*v6);
  if (!a1[4])
  {
    if (*a1)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186B988);
      }
      uint64_t v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        uint64_t v17 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v16;
        __int16 v39 = 2080;
        uint64_t v40 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186B988);
      }
      uint64_t v18 = qword_1019344B8;
      int v19 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v20 = &v32;
      }
      else {
        __int16 v20 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v19;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v20;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186B988);
      }
      uint64_t v24 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        int v25 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        uint64_t v26 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v25;
        __int16 v39 = 2080;
        uint64_t v40 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186B988);
      }
      uint64_t v29 = qword_1019344B8;
      int v30 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v31 = &v32;
      }
      else {
        __int16 v31 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v30;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v31;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]",  "%s\n",  v14);
    if (v14 == buf) {
      goto LABEL_53;
    }
    goto LABEL_64;
  }

  if (*a1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186B988);
    }
    uint64_t v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186B988);
      }
      int v13 = *a1;
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v13;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]",  "%s\n",  v14);
      goto LABEL_42;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186B988);
    }
    int v21 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      int v22 = *a1;
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186B988);
      }
      int v23 = *a1;
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v23;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]",  "%s\n",  v14);
LABEL_42:
      if (v14 == buf) {
        goto LABEL_53;
      }
LABEL_64:
      free(v14);
    }
  }

void sub_100A86A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_100A86A50(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186B9B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100A86A88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186B9B8;
  a2[1] = v2;
  return result;
}

void *sub_100A86AA8(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A86B44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A86B80()
{
}

uint64_t sub_100A86B8C(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186B648);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Tearing down. Resetting workout prediction.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186B648);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Tearing down. Resetting workout prediction.",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EMuteAlert]",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100648A9C(a1 + 1496);
  sub_100A7E768(a1);
  sub_100A7DCD0((void *)a1);
  sub_100A7E918(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100A76E68();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(void *)(a1 + 664) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 672) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 704) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 712) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 832) = 0LL;
  *(void *)(a1 + 824) = 0LL;
  if (*(void *)(a1 + 1328) || *(void *)(a1 + 1336) || *(void *)(a1 + 1344)) {
    sub_100A7B784((void *)a1);
  }
  sub_100B67CB4(*(void *)(a1 + 1416));
  return sub_100A7B614(a1);
}

void *sub_100A86DE0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186BA38;
  result[1] = v3;
  return result;
}

uint64_t sub_100A86E18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186BA38;
  a2[1] = v2;
  return result;
}

void *sub_100A86E38(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A86ED4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A86F10()
{
}

void *sub_100A86F1C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186BAB8;
  result[1] = v3;
  return result;
}

uint64_t sub_100A86F54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186BAB8;
  a2[1] = v2;
  return result;
}

void *sub_100A86F74(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A87010(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A8704C()
{
}

void *sub_100A87058(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186BB38;
  result[1] = v3;
  return result;
}

uint64_t sub_100A87090(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186BB38;
  a2[1] = v2;
  return result;
}

void *sub_100A870B0(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A8714C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100A87188()
{
}

void *sub_100A8719C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186BBB8;
  result[1] = v3;
  return result;
}

uint64_t sub_100A871D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186BBB8;
  a2[1] = v2;
  return result;
}

void *sub_100A871EC(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A87288(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A872C4()
{
}

void *sub_100A872D8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_10186BC38;
  result[1] = v3;
  return result;
}

uint64_t sub_100A8730C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186BC38;
  a2[1] = v2;
  return result;
}

void *sub_100A87328(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  __int128 v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  __int128 v5 = *(_OWORD *)(a3 + 144);
  _WORD v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  __int128 v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  __int128 v7 = *(_OWORD *)(a3 + 80);
  _DWORD v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  __int128 v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  __int128 v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100A7AC84(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100A873C4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A87400()
{
}

BOOL sub_100A8740C()
{
  return os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_FAULT);
}

BOOL sub_100A87420()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 1672), OS_LOG_TYPE_INFO);
}

BOOL sub_100A87430()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 1672));
}

uint64_t sub_100A8743C()
{
  dword_10199A3E0 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_10199A3C8, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_10199A3E8, "DmFp");
  dword_10199A400 = 200;
  return __cxa_atexit((void (*)(void *))sub_100355650, qword_10199A3E8, (void *)&_mh_execute_header);
}

uint64_t sub_100A874F4()
{
  if (qword_10199A4B0 != -1) {
    dispatch_once(&qword_10199A4B0, &stru_10186BCA8);
  }
  return qword_1019A1B70;
}

void *sub_100A87538(uint64_t a1)
{
  double result = (void *)sub_1006DC9EC(a1, (uint64_t)"CLCoverState", 1);
  *double result = off_10186BCD8;
  result[4] = 0LL;
  result[5] = 0LL;
  return result;
}

void *sub_100A8756C(void *a1)
{
  *a1 = off_10186BCD8;
  sub_100A875B8((uint64_t)a1, 0, 0LL);
  sub_10000AE14((uint64_t)(a1 + 4));
  return sub_1006DCAA8(a1);
}

void sub_100A875B8(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    __int128 v7 = (uint64_t **)(a1 + 32);
    if (!*(void *)(a1 + 32))
    {
      sub_1004F2598();
      int v10 = sub_1004F7000();
      int v11 = v10 ? 41 : 1;
      int v12 = v10 ? 65280 : 11;
      uint64_t v13 = (uint64_t *)sub_10071542C();
      v17[0] = v12;
      v17[1] = v11;
      char v18 = 0;
      sub_10121B774(v13, (uint64_t)v17, (uint64_t *)&v19);
      sub_10005F550((uint64_t)v7, &v19);
      __int128 v14 = (std::__shared_weak_count *)*((void *)&v19 + 1);
      if (*((void *)&v19 + 1))
      {
        uint64_t v15 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }

    if (a3)
    {
      __int128 v8 = sub_100A876A8;
      uint64_t v9 = a1;
    }

    else
    {
      __int128 v8 = 0LL;
      uint64_t v9 = 0LL;
    }

    sub_100719D78(*v7, (uint64_t)v8, v9);
  }

uint64_t sub_100A876A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 3)
  {
    int IntegerValue = IOHIDEventGetIntegerValue(a4, 196608LL);
    uint64_t result = IOHIDEventGetIntegerValue(a4, 196609LL);
    if (IntegerValue == 65289 && result == 1LL)
    {
      BOOL v8 = IOHIDEventGetIntegerValue(a4, 196610LL) == 0;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
      sub_101171C7C(TimeStamp);
      BOOL v10 = v8;
      return sub_1006DD528(a1, 0LL, (uint64_t)&v10, 1LL);
    }
  }

  return result;
}

id *sub_100A87768(id *a1, uint64_t a2)
{
  *a1 = [[GEOMapFeatureAccess alloc] initWithQueue:a2];
  sub_100A877C4(a1);
  [*a1 setFlipNegativeTravelDirectionRoads:1];
  [*a1 setAllowStaleData:1];
  return a1;
}

uint64_t sub_100A877C4(id *a1)
{
  uint64_t v2 = sub_1002F8DDC();
  sub_1002A8F8C(v2, "Kappa", v4);
  objc_msgSend( *a1,  "setAllowNetworkTileLoad:",  objc_msgSend( objc_msgSend((id)sub_1002A59CC((uint64_t)v4), "valueForKey:", @"roadDisableNetwork"),  "BOOLValue") ^ 1);
  return sub_1002A5590(v4);
}

void sub_100A87834( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id *sub_100A87854(id *a1)
{
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10186BD30);
  }
  uint64_t v2 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLGCZ,destroy geocodec malloc zone,~CLKappaMapTiles()",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10186BD30);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  0LL,  "CLGCZ,destroy geocodec malloc zone,~CLKappaMapTiles()",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLKappaMapTiles::~CLKappaMapTiles()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  GEOResetGeoCodecsAllocator([*a1 clearRoadTiles]);

  return a1;
}

void sub_100A879FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100A87A0C(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

BOOL sub_100A87A38(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 20LL && *(void *)(a2 + 112) == 4LL;
}

uint64_t sub_100A87A5C(void *a1, uint64_t a2)
{
  a1[7] = *(void *)(a2 + 112);
  a1[4] = a1[3];
  return sub_100A88364((uint64_t)a1, 1LL);
}

uint64_t sub_100A87A74(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 0LL;
  }
  unint64_t v3 = *(void *)(a2 + 112);
  BOOL v4 = v3 > 0x2E;
  unint64_t v5 = (0x405800300010uLL >> v3) & 1;
  if (v4) {
    return 0LL;
  }
  else {
    return v5;
  }
}

void sub_100A87AA8(void *a1, uint64_t a2)
{
  a1[7] = *(void *)(a2 + 112);
  a1[4] = a1[3];
  sub_100A88364((uint64_t)a1, 1LL);
  sub_100A88528((uint64_t)a1, a1[7]);
}

BOOL sub_100A87AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  return (v2 == 11 || v2 == 0) && *(void *)(a2 + 112) == 4LL;
}

BOOL sub_100A87B10(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 21LL && *(void *)(a2 + 112) == 4LL;
}

uint64_t sub_100A87B34(void *a1)
{
  a1[7] = 0LL;
  a1[4] = a1[3];
  return sub_100A88364((uint64_t)a1, 0LL);
}

BOOL sub_100A87B50(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 1LL && *(void *)(a2 + 112) == *(void *)(a1 + 56);
}

uint64_t sub_100A87B7C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_10186BD50;
  *(void *)(result + 8) = 8LL;
  *(_WORD *)(result + 16) = 512;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_BYTE *)(result + 48) = 0;
  *(void *)(result + 56) = 0LL;
  *(void *)(result + 64) = a2;
  *(void *)(result + 72) = 0LL;
  return result;
}

uint64_t sub_100A87BAC(uint64_t a1, _OWORD *a2)
{
  __int128 v2 = a2[9];
  _WORD v9[8] = a2[8];
  v9[9] = v2;
  __int128 v3 = a2[11];
  v9[10] = a2[10];
  v9[11] = v3;
  __int128 v4 = a2[5];
  v9[4] = a2[4];
  v9[5] = v4;
  __int128 v5 = a2[7];
  v9[6] = a2[6];
  v9[7] = v5;
  __int128 v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  __int128 v7 = a2[3];
  _DWORD v9[2] = a2[2];
  v9[3] = v7;
  return sub_100CCCC8C(a1, 1, (uint64_t)v9);
}

void sub_100A87C00(uint64_t a1, uint64_t a2)
{
  if (qword_101934630 != -1) {
    dispatch_once(&qword_101934630, &stru_10186BE10);
  }
  __int128 v4 = (os_log_s *)qword_101934638;
  if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 112);
    int v7 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 134349568;
    uint64_t v40 = v5;
    __int16 v41 = 2050;
    uint64_t v42 = v6;
    __int16 v43 = 1026;
    int v44 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutDistanceController, received event, %{public}ld, workout, %{public}ld, current state, %{public}d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10186BE10);
    }
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 112);
    int v19 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)int v25 = 134349568;
    *(void *)&_DWORD v25[4] = v17;
    *(_WORD *)&v25[12] = 2050;
    *(void *)&v25[14] = v18;
    *(_WORD *)&v25[22] = 1026;
    *(_DWORD *)&v25[24] = v19;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "CLWorkoutDistanceController, received event, %{public}ld, workout, %{public}ld, current state, %{public}d",  v25,  28);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v20);
  }

  __int128 v8 = *(_OWORD *)(a2 + 208);
  __int128 v36 = *(_OWORD *)(a2 + 192);
  __int128 v37 = v8;
  uint64_t v38 = *(void *)(a2 + 224);
  __int128 v9 = *(_OWORD *)(a2 + 144);
  __int128 v32 = *(_OWORD *)(a2 + 128);
  __int128 v33 = v9;
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v34 = *(_OWORD *)(a2 + 160);
  __int128 v35 = v10;
  __int128 v11 = *(_OWORD *)(a2 + 80);
  __int128 v28 = *(_OWORD *)(a2 + 64);
  __int128 v29 = v11;
  __int128 v12 = *(_OWORD *)(a2 + 112);
  __int128 v30 = *(_OWORD *)(a2 + 96);
  __int128 v31 = v12;
  __int128 v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v25 = *(_OWORD *)a2;
  *(_OWORD *)&v25[16] = v13;
  __int128 v14 = *(_OWORD *)(a2 + 48);
  __int128 v26 = *(_OWORD *)(a2 + 32);
  __int128 v27 = v14;
  sub_100CCCC8C(a1, 2, (uint64_t)v25);
  if (qword_101934630 != -1) {
    dispatch_once(&qword_101934630, &stru_10186BE10);
  }
  uint64_t v15 = (os_log_s *)qword_101934638;
  if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67240192;
    LODWORD(v40) = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutDistanceController, state after workout event, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10186BE10);
    }
    int v21 = *(unsigned __int8 *)(a1 + 16);
    v24[0] = 67240192;
    v24[1] = v21;
    LODWORD(v23) = 8;
    int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "CLWorkoutDistanceController, state after workout event, %{public}d",  v24,  v23);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v22);
  }

uint64_t sub_100A87F98(uint64_t a1)
{
  if (*(void *)(a1 + 32) != *(void *)(a1 + 24))
  {
    sub_100A87FDC(a1, (unint64_t **)(a1 + 24));
    *(void *)(a1 + 32) = *(void *)(a1 + 24);
  }

  return sub_100A88364(a1, 1LL);
}

uint64_t sub_100A87FDC(uint64_t result, unint64_t **a2)
{
  unint64_t v2 = *(void *)(result + 56);
  BOOL v3 = v2 > 0x15;
  uint64_t v4 = (1LL << v2) & 0x300010;
  if (!v3 && v4 != 0)
  {
    uint64_t v7 = result;
    __int128 v8 = *a2;
    __int128 v9 = a2[1];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)*a2) >> 6) < 2)
    {
      if (v8 == v9) {
        unint64_t v16 = 0LL;
      }
      else {
        unint64_t v16 = *v8;
      }
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10186BE10);
      }
      uint64_t v17 = (os_log_s *)qword_101934638;
      if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349056;
        unint64_t v22 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "CLWorkoutDistanceController, sending update, %{public}f",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        return (*(uint64_t (**)(void, unint64_t **))(**(void **)(v7 + 64) + 8LL))( *(void *)(v7 + 64),  a2);
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10186BE10);
      }
      *(_DWORD *)int v19 = 134349056;
      *(void *)&v19[4] = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  1LL,  "CLWorkoutDistanceController, sending update, %{public}f",  v19,  12,  *(void *)v19,  *(_OWORD *)&v19[8],  v20);
    }

    else
    {
      unint64_t v10 = *v8;
      uint64_t v11 = *(v9 - 24);
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10186BE10);
      }
      __int128 v12 = (os_log_s *)qword_101934638;
      if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 6);
        *(_DWORD *)buf = 134349568;
        unint64_t v22 = v13;
        __int16 v23 = 2050;
        unint64_t v24 = v10;
        __int16 v25 = 2050;
        uint64_t v26 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutDistanceController, notifying clients with num updates, %{public}lu, start, %{public}f, end, %{public}f",  buf,  0x20u);
      }

      if (!sub_1002921D0(115, 2)) {
        return (*(uint64_t (**)(void, unint64_t **))(**(void **)(v7 + 64) + 8LL))( *(void *)(v7 + 64),  a2);
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934630 != -1) {
        dispatch_once(&qword_101934630, &stru_10186BE10);
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 6);
      *(_DWORD *)int v19 = 134349568;
      *(void *)&v19[4] = v14;
      *(_WORD *)&v19[12] = 2050;
      *(void *)&v19[14] = v10;
      *(_WORD *)&v19[22] = 2050;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "CLWorkoutDistanceController, notifying clients with num updates, %{public}lu, start, %{public}f, end, %{public}f",  v19,  32,  *(_OWORD *)v19,  *(void *)&v19[16],  v11);
    }

    uint64_t v18 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceController::sendOdometerData(const std::vector<CLOdometerEntry> &) const",  "%s\n",  v15);
    if (v18 != buf) {
      free(v18);
    }
    return (*(uint64_t (**)(void, unint64_t **))(**(void **)(v7 + 64) + 8LL))( *(void *)(v7 + 64),  a2);
  }

  return result;
}

uint64_t sub_100A88364(uint64_t a1, uint64_t a2)
{
  if (qword_101934630 != -1) {
    dispatch_once(&qword_101934630, &stru_10186BE10);
  }
  uint64_t v4 = (os_log_s *)qword_101934638;
  if (os_log_type_enabled((os_log_t)qword_101934638, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutDistanceController, toggling gps, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934630 != -1) {
      dispatch_once(&qword_101934630, &stru_10186BE10);
    }
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934638,  0LL,  "CLWorkoutDistanceController, toggling gps, %{public}d",  v8,  8);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutDistanceController::toggleGps(BOOL)", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  *(_BYTE *)(a1 + 48) = a2;
  return (***(uint64_t (****)(void, uint64_t))(a1 + 64))(*(void *)(a1 + 64), a2);
}

void sub_100A88528(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (uint64_t *)(a1 + 72);
  if (*(void *)(a1 + 72)) {
    sub_10053AF28((uint64_t *)(a1 + 72), 0LL);
  }
  uint64_t v4 = operator new(0x30uLL);
  sub_100BD931C(v4);
  sub_10053AF28(v3, (uint64_t)v4);
  if (a2 <= 37)
  {
    if (a2 != 35)
    {
      if (a2 != 36) {
        return;
      }
      uint64_t v5 = (void *)*v3;
      *(_DWORD *)buf = 0;
      *(void *)&v34[4] = 0x4008000000000000LL;
      uint64_t v6 = v35;
      sub_10001A504((uint64_t)v35, (uint64_t)&qword_10199A4B8);
      sub_10001A504((uint64_t)v37, (uint64_t)&qword_10199A518);
      sub_100BD948C(v5, (int *)buf);
      uint64_t v7 = v38;
      if (v38 == v37)
      {
        uint64_t v8 = 4LL;
        uint64_t v7 = v37;
      }

      else
      {
        if (!v38) {
          goto LABEL_20;
        }
        uint64_t v8 = 5LL;
      }

      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
      if (v36 == v35)
      {
        uint64_t v19 = 4LL;
      }

      else
      {
        if (!v36)
        {
LABEL_25:
          uint64_t v20 = (void *)*v3;
          *(_DWORD *)buf = 4;
          *(void *)&v34[4] = 0x4008000000000000LL;
          int v10 = v35;
          sub_10001A504((uint64_t)v35, (uint64_t)&qword_10199A4D8);
          sub_10001A504((uint64_t)v37, (uint64_t)&qword_10199A4F8);
          sub_100BD948C(v20, (int *)buf);
          goto LABEL_42;
        }

        uint64_t v19 = 5LL;
        uint64_t v6 = v36;
      }

      (*(void (**)(void *))(*v6 + 8 * v19))(v6);
      goto LABEL_25;
    }

    uint64_t v11 = (void *)*v3;
    *(_DWORD *)buf = 2;
    *(void *)&v34[4] = 0x4008000000000000LL;
    __int128 v12 = v35;
    sub_10001A504((uint64_t)v35, (uint64_t)&qword_10199A4B8);
    sub_10001A504((uint64_t)v37, (uint64_t)&qword_10199A518);
    sub_100BD948C(v11, (int *)buf);
    unint64_t v13 = v38;
    if (v38 == v37)
    {
      uint64_t v14 = 4LL;
      unint64_t v13 = v37;
    }

    else
    {
      if (!v38) {
        goto LABEL_28;
      }
      uint64_t v14 = 5LL;
    }

    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_28:
    if (v36 == v35)
    {
      uint64_t v21 = 4LL;
    }

    else
    {
      if (!v36)
      {
LABEL_38:
        __int16 v23 = (void *)*v3;
        *(_DWORD *)buf = 6;
        *(void *)&v34[4] = 0x4008000000000000LL;
        int v10 = v35;
        sub_10001A504((uint64_t)v35, (uint64_t)&qword_10199A4D8);
        sub_10001A504((uint64_t)v37, (uint64_t)&qword_10199A4F8);
        sub_100BD948C(v23, (int *)buf);
        goto LABEL_42;
      }

      uint64_t v21 = 5LL;
      __int128 v12 = v36;
    }

    (*(void (**)(void *))(*v12 + 8 * v21))(v12);
    goto LABEL_38;
  }

  if (a2 == 38)
  {
    uint64_t v15 = (void *)*v3;
    *(_DWORD *)buf = 1;
    *(void *)&v34[4] = 0x4008000000000000LL;
    unint64_t v16 = v35;
    sub_10001A504((uint64_t)v35, (uint64_t)&qword_10199A4B8);
    sub_10001A504((uint64_t)v37, (uint64_t)&qword_10199A518);
    sub_100BD948C(v15, (int *)buf);
    uint64_t v17 = v38;
    if (v38 == v37)
    {
      uint64_t v18 = 4LL;
      uint64_t v17 = v37;
    }

    else
    {
      if (!v38) {
        goto LABEL_33;
      }
      uint64_t v18 = 5LL;
    }

    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_33:
    if (v36 == v35)
    {
      uint64_t v22 = 4LL;
    }

    else
    {
      if (!v36)
      {
LABEL_41:
        unint64_t v24 = (void *)*v3;
        *(_DWORD *)buf = 5;
        *(void *)&v34[4] = 0x4008000000000000LL;
        int v10 = v35;
        sub_10001A504((uint64_t)v35, (uint64_t)&qword_10199A4D8);
        sub_10001A504((uint64_t)v37, (uint64_t)&qword_10199A4F8);
        sub_100BD948C(v24, (int *)buf);
        goto LABEL_42;
      }

      uint64_t v22 = 5LL;
      unint64_t v16 = v36;
    }

    (*(void (**)(void *))(*v16 + 8 * v22))(v16);
    goto LABEL_41;
  }

  if (a2 != 46) {
    return;
  }
  __int128 v9 = (void *)*v3;
  *(_DWORD *)buf = 3;
  *(void *)&v34[4] = 0x4008000000000000LL;
  int v10 = v35;
  sub_10001A504((uint64_t)v35, (uint64_t)&qword_10199A4B8);
  sub_10001A504((uint64_t)v37, (uint64_t)&qword_10199A518);
  sub_100BD948C(v9, (int *)buf);
LABEL_42:
  __int16 v25 = v38;
  if (v38 == v37)
  {
    uint64_t v26 = 4LL;
    __int16 v25 = v37;
  }

  else
  {
    if (!v38) {
      goto LABEL_47;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_47:
  if (v36 == v35)
  {
    uint64_t v27 = 4LL;
    goto LABEL_51;
  }

  if (v36)
  {
    uint64_t v27 = 5LL;
    int v10 = v36;
LABEL_51:
    (*(void (**)(void *))(*v10 + 8 * v27))(v10);
  }

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186BE30);
  }
  __int128 v28 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)__int128 v34 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutDistanceController, started data collector for workout %ld",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186BE30);
    }
    int v31 = 134217984;
    uint64_t v32 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutDistanceController, started data collector for workout %ld",  &v31);
    __int128 v30 = (uint8_t *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceController::startDataCollectorIfNecessary(CMWorkoutType)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

void sub_100A88AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100A88B7C(void *a1)
{
  a1[7] = 0LL;
  a1[4] = a1[3];
  sub_100A88364((uint64_t)a1, 0LL);
  uint64_t v3 = a1[9];
  unint64_t v2 = a1 + 9;
  if (v3) {
    sub_10053AF28(v2, 0LL);
  }
}

void sub_100A88BC8(void *a1, __int128 *a2)
{
  unint64_t v6 = a1[5];
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v18 = (void **)(v4 - 16);
    uint64_t v19 = *(void *)(v4 - 16);
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v19) >> 6);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0x155555555555555LL) {
      sub_100007008();
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v19) >> 6);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v23 = 0x155555555555555LL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23) {
      unint64_t v24 = (char *)sub_10001DF10(v4, v23);
    }
    else {
      unint64_t v24 = 0LL;
    }
    __int16 v25 = &v24[192 * v20];
    uint64_t v26 = &v24[192 * v23];
    __int128 v27 = *a2;
    __int128 v28 = a2[1];
    __int128 v29 = a2[3];
    *((_OWORD *)v25 + 2) = a2[2];
    *((_OWORD *)v25 + 3) = v29;
    *(_OWORD *)__int16 v25 = v27;
    *((_OWORD *)v25 + 1) = v28;
    __int128 v30 = a2[4];
    __int128 v31 = a2[5];
    __int128 v32 = a2[7];
    *((_OWORD *)v25 + 6) = a2[6];
    *((_OWORD *)v25 + memset(&v6[1], 0, 7) = v32;
    *((_OWORD *)v25 + 4) = v30;
    *((_OWORD *)v25 + 5) = v31;
    __int128 v33 = a2[8];
    __int128 v34 = a2[9];
    __int128 v35 = a2[11];
    *((_OWORD *)v25 + 10) = a2[10];
    *((_OWORD *)v25 + 11) = v35;
    *((_OWORD *)v25 + 8) = v33;
    *((_OWORD *)v25 + 9) = v34;
    uint64_t v17 = v25 + 192;
    __int128 v37 = (char *)a1[3];
    __int128 v36 = (char *)a1[4];
    if (v36 != v37)
    {
      do
      {
        __int128 v38 = *((_OWORD *)v36 - 12);
        __int128 v39 = *((_OWORD *)v36 - 11);
        __int128 v40 = *((_OWORD *)v36 - 9);
        *((_OWORD *)v25 - 10) = *((_OWORD *)v36 - 10);
        *((_OWORD *)v25 - 9) = v40;
        *((_OWORD *)v25 - 12) = v38;
        *((_OWORD *)v25 - 11) = v39;
        __int128 v41 = *((_OWORD *)v36 - 8);
        __int128 v42 = *((_OWORD *)v36 - 7);
        __int128 v43 = *((_OWORD *)v36 - 5);
        *((_OWORD *)v25 - 6) = *((_OWORD *)v36 - 6);
        *((_OWORD *)v25 - 5) = v43;
        *((_OWORD *)v25 - 8) = v41;
        *((_OWORD *)v25 - memset(&v6[1], 0, 7) = v42;
        __int128 v44 = *((_OWORD *)v36 - 4);
        __int128 v45 = *((_OWORD *)v36 - 3);
        __int128 v46 = *((_OWORD *)v36 - 1);
        *((_OWORD *)v25 - 2) = *((_OWORD *)v36 - 2);
        *((_OWORD *)v25 - 1) = v46;
        *((_OWORD *)v25 - 4) = v44;
        *((_OWORD *)v25 - 3) = v45;
        v25 -= 192;
        v36 -= 192;
      }

      while (v36 != v37);
      __int128 v36 = (char *)*v18;
    }

    a1[3] = v25;
    a1[4] = v17;
    a1[5] = v26;
    if (v36) {
      operator delete(v36);
    }
  }

  else
  {
    __int128 v8 = *a2;
    __int128 v9 = a2[1];
    __int128 v10 = a2[3];
    v7[2] = a2[2];
    v7[3] = v10;
    *uint64_t v7 = v8;
    v7[1] = v9;
    __int128 v11 = a2[4];
    __int128 v12 = a2[5];
    __int128 v13 = a2[7];
    v7[6] = a2[6];
    v7[7] = v13;
    _DWORD v7[4] = v11;
    v7[5] = v12;
    __int128 v14 = a2[8];
    __int128 v15 = a2[9];
    __int128 v16 = a2[11];
    v7[10] = a2[10];
    v7[11] = v16;
    _WORD v7[8] = v14;
    v7[9] = v15;
    uint64_t v17 = v7 + 12;
  }

  a1[4] = v17;
  double Current = CFAbsoluteTimeGetCurrent();
  __int16 v49 = (__int128 *)a1[3];
  BOOL v48 = (__int128 *)a1[4];
  if (v49 != v48)
  {
    while (vabdd_f64(Current, *(double *)v49) <= 300.0)
    {
      v49 += 12;
      if (v49 == v48) {
        return;
      }
    }

    if (v49 != v48)
    {
      int v50 = v49 + 12;
      if (v49 + 12 != v48)
      {
        do
        {
          if (vabdd_f64(Current, *(double *)v50) <= 300.0)
          {
            __int128 v51 = *v50;
            __int128 v52 = v50[1];
            __int128 v53 = v50[3];
            v49[2] = v50[2];
            void v49[3] = v53;
            *__int16 v49 = v51;
            v49[1] = v52;
            __int128 v54 = v50[4];
            __int128 v55 = v50[5];
            __int128 v56 = v50[7];
            _BYTE v49[6] = v50[6];
            v49[7] = v56;
            v49[4] = v54;
            v49[5] = v55;
            __int128 v57 = v50[8];
            __int128 v58 = v50[9];
            __int128 v59 = v50[11];
            v49[10] = v50[10];
            v49[11] = v59;
            v49[8] = v57;
            v49[9] = v58;
            v49 += 12;
          }

          v50 += 12;
        }

        while (v50 != v48);
        BOOL v48 = (__int128 *)a1[4];
      }
    }

    if (v49 != v48) {
      a1[4] = v49;
    }
  }

void sub_100A88E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0xC0uLL);
  __int128 v14 = v4 + 12;
  __int128 v5 = *(_OWORD *)(a2 + 144);
  void v4[8] = *(_OWORD *)(a2 + 128);
  v4[9] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 176);
  void v4[10] = *(_OWORD *)(a2 + 160);
  v4[11] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 80);
  v4[4] = *(_OWORD *)(a2 + 64);
  v4[5] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 112);
  v4[6] = *(_OWORD *)(a2 + 96);
  v4[7] = v8;
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *uint64_t v4 = *(_OWORD *)a2;
  v4[1] = v9;
  __int128 v10 = *(_OWORD *)(a2 + 48);
  void v4[2] = *(_OWORD *)(a2 + 32);
  v4[3] = v10;
  std::string __p = v4;
  __int128 v13 = v4 + 12;
  __int128 v11 = *(void **)(a1 + 72);
  if (v11) {
    sub_100BD93F0(v11, (uint64_t *)a2);
  }
  sub_100A87FDC(a1, (unint64_t **)&__p);
  if (__p)
  {
    __int128 v13 = __p;
    operator delete(__p);
  }

void sub_100A88EB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100A88ED0(void *a1)
{
  unint64_t v2 = a1 + 6;
  uint64_t v3 = (void *)a1[9];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  __int128 v5 = (void *)a1[5];
  if (v5 == a1 + 2)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = a1 + 2;
    goto LABEL_10;
  }

  if (v5)
  {
    uint64_t v6 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

void sub_100A88F50(id a1)
{
  qword_101934638 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_100A88F7C(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100A88FB0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_10186BE60;
  return result;
}

void sub_100A88FD4(uint64_t a1, void *a2)
{
  *a2 = &off_10186BE60;
}

double sub_100A88FEC(uint64_t a1, double **a2)
{
  unint64_t v2 = *a2;
  double result = **a2;
  double v4 = 0.0;
  while (v2 != a2[1])
  {
    double v4 = v4 + v2[2];
    v2 += 3;
  }

  return result;
}

uint64_t sub_100A89018(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A89054()
{
}

void *sub_100A89068()
{
  double result = operator new(0x10uLL);
  *double result = &off_10186BEE0;
  return result;
}

void sub_100A8908C(uint64_t a1, void *a2)
{
  *a2 = &off_10186BEE0;
}

double sub_100A890A4(uint64_t a1, double **a2)
{
  unint64_t v2 = a2[1];
  double result = **a2;
  double v4 = 0.0;
  if (*a2 != v2)
  {
    __int128 v5 = *a2;
    do
    {
      double v4 = v4 + v5[2];
      v5 += 3;
    }

    while (v5 != v2);
  }

  return result;
}

uint64_t sub_100A890F4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A89130()
{
}

void *sub_100A89144()
{
  double result = operator new(0x10uLL);
  *double result = &off_10186BF60;
  return result;
}

void sub_100A89168(uint64_t a1, void *a2)
{
  *a2 = &off_10186BF60;
}

BOOL sub_100A89180(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_100A89190(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A891CC()
{
}

void *sub_100A891E0()
{
  double result = operator new(0x10uLL);
  *double result = &off_10186BFE0;
  return result;
}

void sub_100A89204(uint64_t a1, void *a2)
{
  *a2 = &off_10186BFE0;
}

BOOL sub_100A8921C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_100A89234(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A89270()
{
}

uint64_t sub_100A8927C()
{
  qword_10199A4B8 = (uint64_t)&off_10186BE60;
  qword_10199A4D0 = (uint64_t)&qword_10199A4B8;
  __cxa_atexit((void (*)(void *))sub_10027C560, &qword_10199A4B8, (void *)&_mh_execute_header);
  qword_10199A4D8 = (uint64_t)&off_10186BEE0;
  qword_10199A4F0 = (uint64_t)&qword_10199A4D8;
  __cxa_atexit((void (*)(void *))sub_10027C560, &qword_10199A4D8, (void *)&_mh_execute_header);
  qword_10199A4F8 = (uint64_t)&off_10186BF60;
  qword_10199A510 = (uint64_t)&qword_10199A4F8;
  __cxa_atexit((void (*)(void *))sub_10027C5AC, &qword_10199A4F8, (void *)&_mh_execute_header);
  qword_10199A518 = (uint64_t)&off_10186BFE0;
  qword_10199A530 = (uint64_t)&qword_10199A518;
  return __cxa_atexit((void (*)(void *))sub_10027C5AC, &qword_10199A518, (void *)&_mh_execute_header);
}

uint64_t sub_100A89338(uint64_t a1)
{
  *(void *)a1 = 850045863LL;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 850045863LL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0xBFF0000000000000LL;
  *(_BYTE *)(a1 + memset(&v8[8], 0, 208) = 0;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_DWORD *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(void *)(a1 + 312) = a1 + 312;
  *(void *)(a1 + 320) = a1 + 312;
  *(void *)(a1 + 328) = 0LL;
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  unint64_t v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100A89570(a1);
  return a1;
}

void sub_100A89548(_Unwind_Exception *a1)
{
}

double sub_100A89570(uint64_t a1)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  unint64_t v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: resetCoreAnalytics()",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CLWorkoutDistanceCoreAnalyzer: resetCoreAnalytics()",  v7,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutDistanceCoreAnalyzer::resetCoreAnalytics()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  double result = 0.0;
  *(_OWORD *)(a1 + 216) = 0u;
  double v4 = (_OWORD *)(a1 + 216);
  *((_BYTE *)v4 - 8) = 0;
  *((void *)v4 - 2) = 0xBFF0000000000000LL;
  v4[1] = 0u;
  void v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  return result;
}

void sub_100A89724(uint64_t a1, __int128 *a2)
{
  double v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  __int128 v5 = *a2;
  __int128 v6 = a2[1];
  __int128 v7 = a2[2];
  *(_OWORD *)(a1 + 172) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v5;
  std::mutex::unlock(v4);
}

void sub_100A89774(uint64_t a1)
{
  if (*(void *)(a1 + 328) >= 0xBuLL) {
    sub_1001B4C40((void *)(a1 + 312));
  }
  sub_100A89570(a1);
  *(_BYTE *)(a1 + memset(&v8[8], 0, 208) = 1;
}

void sub_100A897B4(std::mutex *a1, int *a2)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  double v4 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    int v6 = a2[2];
    *(_DWORD *)buf = 67109376;
    int v19 = v5;
    __int16 v20 = 1024;
    int v21 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer::feedSession: MotionOverride: action,%d,type,%d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    int v11 = *a2;
    int v12 = a2[2];
    v15[0] = 67109376;
    v15[1] = v11;
    __int16 v16 = 1024;
    int v17 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CLWorkoutDistanceCoreAnalyzer::feedSession: MotionOverride: action,%d,type,%d",  v15,  14);
    __int128 v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::feedSession(const CLMotionStateMediator_Type::MotionOverride &)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  std::mutex::lock(a1);
  if (*a2 == 1)
  {
    unint64_t sig = a1[3].__m_.__sig;
    if (sig > 0x18 || ((1LL << sig) & 0x1028000) == 0)
    {
      unint64_t v10 = *((void *)a2 + 18);
      if (v10 <= 0x18 && ((1LL << v10) & 0x1028000) != 0) {
        sub_100A89774((uint64_t)a1);
      }
    }
  }

  else if (!*a2)
  {
    unint64_t v7 = a1[3].__m_.__sig;
    if (v7 <= 0x18 && ((1LL << v7) & 0x1028000) != 0)
    {
      unint64_t v8 = *((void *)a2 + 18);
      if (v8 > 0x18 || ((1LL << v8) & 0x1028000) == 0) {
        sub_100A89A74((uint64_t)a1);
      }
    }
  }

  a1[3].__m_.__unint64_t sig = *((void *)a2 + 18);
  std::mutex::unlock(a1);
}

void sub_100A89A58(_Unwind_Exception *a1)
{
}

void sub_100A89A74(uint64_t a1)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  unint64_t v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: processFinishedWorkout()",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    LOWORD(v35[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CLWorkoutDistanceCoreAnalyzer: processFinishedWorkout()",  v35,  2);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutDistanceCoreAnalyzer::processFinishedWorkout()", "%s\n", v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  if (*(_BYTE *)(a1 + 208))
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    uint64_t v3 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(_DWORD *)(a1 + 284);
      int v5 = *(_DWORD *)(a1 + 280);
      *(_DWORD *)buf = 67109376;
      int v39 = v4;
      __int16 v40 = 1024;
      int v41 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "fCA_stepCounts_current: %d, fCA_stepCounts_begin: %d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      int v27 = *(_DWORD *)(a1 + 284);
      int v28 = *(_DWORD *)(a1 + 280);
      v35[0] = 67109376;
      v35[1] = v27;
      __int16 v36 = 1024;
      int v37 = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "fCA_stepCounts_current: %d, fCA_stepCounts_begin: %d",  v35,  14);
      __int128 v30 = (uint8_t *)v29;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutDistanceCoreAnalyzer::processFinishedWorkout()", "%s\n", v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    double Current = CFAbsoluteTimeGetCurrent();
    int v7 = *(_DWORD *)(a1 + 288);
    int v8 = *(_DWORD *)(a1 + 292) + v7;
    double v9 = -1.0;
    double v10 = -1.0;
    if (v8 >= 1) {
      double v10 = (double)v7 / (double)v8;
    }
    double v32 = v10;
    double v34 = Current;
    int v11 = *(_DWORD *)(a1 + 212);
    double v12 = -1.0;
    if (v11 >= 1)
    {
      double v9 = *(double *)(a1 + 296) / (double)v11;
      double v12 = *(double *)(a1 + 304) / (double)v11;
    }

    double v31 = v12;
    double v33 = v9;
    double v14 = *(double *)(a1 + 216);
    double v13 = *(double *)(a1 + 224);
    double v16 = *(double *)(a1 + 232);
    double v15 = *(double *)(a1 + 240);
    double v18 = *(double *)(a1 + 248);
    double v17 = *(double *)(a1 + 256);
    double v20 = *(double *)(a1 + 264);
    double v19 = *(double *)(a1 + 272);
    int v21 = *(_DWORD *)(a1 + 284);
    int v22 = *(_DWORD *)(a1 + 280);
    unint64_t v23 = (double *)operator new(0x60uLL);
    _DWORD v23[2] = *(double *)(a1 + 200);
    v23[3] = v34;
    v23[4] = v13 - v14;
    v23[5] = v15 - v16;
    void v23[6] = v17 - v18;
    v23[7] = v19 - v20;
    _WORD v23[8] = v32;
    v23[9] = v33;
    v23[10] = v31;
    *((_DWORD *)v23 + 22) = v21 - v22;
    uint64_t v24 = *(void *)(a1 + 312);
    *(void *)unint64_t v23 = v24;
    *((void *)v23 + 1) = a1 + 312;
    *(void *)(v24 + 8) = v23;
    *(void *)(a1 + 312) = v23;
    ++*(void *)(a1 + 328);
    sub_100A89570(a1);
  }

void sub_100A89E7C(std::mutex *a1, uint64_t a2)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  int v4 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(), time: %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    uint64_t v8 = qword_101934518;
    int v11 = 134217984;
    CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  2LL,  "CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(), time: %f",  COERCE_DOUBLE(&v11));
    double v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(const CLWorkoutUpdate &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  std::mutex::lock(a1);
  unint64_t v5 = (unint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:]( &OBJC_CLASS___CMWorkout,  "CMWorkoutTypeFromCLMotionActivityType:",  *(unsigned int *)(a2 + 8));
  unint64_t v6 = v5;
  unint64_t sig = a1[3].__m_.__sig;
  if (sig > 0x18 || ((1LL << sig) & 0x1028000) == 0) {
    goto LABEL_12;
  }
  if (v5 > 0x18 || ((1LL << v5) & 0x1028000) == 0)
  {
    sub_100A89A74((uint64_t)a1);
    goto LABEL_15;
  }

  if (((1LL << sig) & 0x1028000) == 0)
  {
LABEL_12:
    if (v5 <= 0x18 && ((1LL << v5) & 0x1028000) != 0) {
      sub_100A89774((uint64_t)a1);
    }
  }

void sub_100A8A0F4(_Unwind_Exception *a1)
{
}

void sub_100A8A110( uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(double *)(a1 + 200) < 0.0)
    {
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(double *)(a1 + 216) = a4;
      *(double *)(a1 + 232) = a5;
      *(double *)(a1 + 248) = a6;
      *(double *)(a1 + 264) = a7;
      *(_DWORD *)(a1 + 280) = a2;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      double v18 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)(a1 + 200);
        *(_DWORD *)buf = 134217984;
        uint64_t v27 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics: Initializing core analytics time: %f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186C070);
        }
        uint64_t v21 = *(void *)(a1 + 200);
        int v24 = 134217984;
        uint64_t v25 = v21;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics: Initializing core analytics time: %f",  COERCE_DOUBLE(&v24));
        unint64_t v23 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::collectCoreAnalytics(double, double, double, double, double, double, int, BOOL)",  "%s\n",  v22);
        if (v23 != buf) {
          free(v23);
        }
      }
    }

    *(double *)(a1 + 224) = a4;
    *(double *)(a1 + 240) = a5;
    *(double *)(a1 + 256) = a6;
    *(double *)(a1 + 272) = a7;
    *(_DWORD *)(a1 + 284) = a2;
    double v20 = *(double *)(a1 + 304) + a9;
    *(double *)(a1 + 296) = *(double *)(a1 + 296) + a8;
    *(double *)(a1 + 304) = v20;
    *(_DWORD *)(a1 + 288) += a3;
    *(_DWORD *)(a1 + 292) += a3 ^ 1;
    ++*(_DWORD *)(a1 + 212);
  }

  std::mutex::unlock((std::mutex *)a1);
}

void sub_100A8A388(_Unwind_Exception *a1)
{
}

NSData *sub_100A8A3A0(uint64_t a1)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  unint64_t v2 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: getSerializedCoreAnalytics()",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    LOWORD(v35) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CLWorkoutDistanceCoreAnalyzer: getSerializedCoreAnalytics()",  &v35,  2);
    int v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  std::mutex::lock((std::mutex *)a1);
  if (!*(void *)(a1 + 328)) {
    goto LABEL_30;
  }
  id v3 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  int v4 = (void *)(a1 + 312);
  unint64_t v5 = *(void **)(a1 + 320);
  if (v5 != (void *)(a1 + 312))
  {
    do
    {
      unint64_t v6 =  -[CLWorkoutDistanceCoreAnalytics initWithWorkoutDistanceMeasures:]( objc_alloc(&OBJC_CLASS___CLWorkoutDistanceCoreAnalytics),  "initWithWorkoutDistanceMeasures:",  v5 + 2);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      int v7 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        id v8 = -[CLWorkoutDistanceCoreAnalytics description](v6, "description");
        *(_DWORD *)buf = 138412290;
        id v38 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Workout distance core analytics: %@",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186C070);
        }
        uint64_t v9 = qword_101934518;
        id v10 = -[CLWorkoutDistanceCoreAnalytics description](v6, "description");
        int v35 = 138412290;
        id v36 = v10;
        LODWORD(v33) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  2LL,  "Workout distance core analytics: %@",  &v35,  v33);
        CFAbsoluteTime v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }

      [v3 addObject:v6];
      unint64_t v5 = (void *)v5[1];
    }

    while (v5 != v4);
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  double v13 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v14 = [v3 count];
    *(_DWORD *)buf = 67109120;
    LODWORD(v38) = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: Attempt to serialize core analytics array of %d entries.",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    uint64_t v23 = qword_101934518;
    unsigned int v24 = [v3 count];
    int v35 = 67109120;
    LODWORD(v36) = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "CLWorkoutDistanceCoreAnalyzer: Attempt to serialize core analytics array of %d entries.",  &v35);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  double v34 = 0LL;
  double v15 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v3,  1LL,  &v34);
  if (v34)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    double v16 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v38 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "CLWorkoutDistanceCoreAnalyzer: Error serializing the message: %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      int v35 = 138412290;
      id v36 = v34;
      LODWORD(v33) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "CLWorkoutDistanceCoreAnalyzer: Error serializing the message: %@",  &v35,  v33);
      int v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }

void sub_100A8AB40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
}

uint64_t sub_100A8AB8C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  unint64_t v5 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: getDeserializedCoreAnalytics()",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    LOWORD(v61[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CLWorkoutDistanceCoreAnalyzer: getDeserializedCoreAnalytics()",  v61,  2);
    __int128 v45 = (uint8_t *)v44;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const",  "%s\n",  v44);
    if (v45 != buf) {
      free(v45);
    }
  }

  sub_1001B4C40(a2);
  if (a3)
  {
    v61[0] = 0LL;
    objc_opt_class(&OBJC_CLASS___NSArray);
    uint64_t v7 = v6;
    objc_opt_class(&OBJC_CLASS___CLWorkoutDistanceCoreAnalytics);
    uint64_t v9 = v8;
    objc_opt_class(&OBJC_CLASS___NSString);
    uint64_t v11 = v10;
    *(void *)&double v12 = objc_opt_class(&OBJC_CLASS___NSNumber).n128_u64[0];
    id v14 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v7, v12, v9, v11, v13, 0LL),  a3,  v61);
    if (v61[0])
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      double v15 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CLWorkoutDistanceCoreAnalyzer: Error unserializing the message.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186C070);
        }
        LOWORD(v63[0]) = 0;
        LODWORD(v55) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "CLWorkoutDistanceCoreAnalyzer: Error unserializing the message.",  v63,  v55);
        __int16 v47 = (uint8_t *)v46;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSDa ta * _Nullable) const",  "%s\n",  v46);
        if (v47 != buf) {
          free(v47);
        }
      }

      NSLog(@"Error: %@", v61[0]);
      return 103LL;
    }

    else
    {
      double v18 = v14;
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      unsigned int v19 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v20 = [v18 count];
        *(_DWORD *)buf = 67109120;
        unsigned int v65 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: Message deserialized to %d samples.",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186C070);
        }
        uint64_t v50 = qword_101934518;
        unsigned int v51 = [v18 count];
        v63[0] = 67109120;
        v63[1] = v51;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v50,  2LL,  "CLWorkoutDistanceCoreAnalyzer: Message deserialized to %d samples.",  v63);
        __int128 v53 = (uint8_t *)v52;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSDa ta * _Nullable) const",  "%s\n",  v52);
        if (v53 != buf) {
          free(v53);
        }
      }

      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      id v21 = [v18 countByEnumeratingWithState:&v57 objects:v62 count:16];
      if (v21)
      {
        uint64_t v22 = *(void *)v58;
        do
        {
          for (i = 0LL; i != v21; i = (char *)i + 1)
          {
            if (*(void *)v58 != v22) {
              objc_enumerationMutation(v18);
            }
            unsigned int v24 = *(void **)(*((void *)&v57 + 1) + 8LL * (void)i);
            [v24 beginTime];
            uint64_t v56 = v25;
            [v24 endTime];
            uint64_t v27 = v26;
            [v24 totalDistanceStepCount];
            uint64_t v29 = v28;
            [v24 totalDistanceStepCountMobility];
            uint64_t v31 = v30;
            [v24 totalDistanceOdometer];
            uint64_t v33 = v32;
            [v24 totalDistanceFused];
            uint64_t v35 = v34;
            [v24 percentageRemoteGPSSource];
            uint64_t v37 = v36;
            [v24 meanPaceStepCount];
            uint64_t v39 = v38;
            [v24 meanPaceFinalFused];
            uint64_t v41 = v40;
            LODWORD(v24) = [v24 totalStepCount];
            __int128 v42 = operator new(0x60uLL);
            v42[2] = v56;
            v42[3] = v27;
            v42[4] = v29;
            v42[5] = v31;
            v42[6] = v33;
            v42[7] = v35;
            v42[8] = v37;
            v42[9] = v39;
            v42[10] = v41;
            *((_DWORD *)v42 + 22) = (_DWORD)v24;
            uint64_t v43 = *a2;
            *__int128 v42 = *a2;
            v42[1] = a2;
            *(void *)(v43 + 8) = v42;
            *a2 = (uint64_t)v42;
            ++a2[2];
          }

          id v21 = [v18 countByEnumeratingWithState:&v57 objects:v62 count:16];
        }

        while (v21);
      }

      return 100LL;
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    double v17 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer: Empty message received for deserialization.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      LOWORD(v61[0]) = 0;
      LODWORD(v54) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "CLWorkoutDistanceCoreAnalyzer: Empty message received for deserialization.",  v61,  v54);
      __int16 v49 = (uint8_t *)v48;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const",  "%s\n",  v48);
      if (v49 != buf) {
        free(v49);
      }
    }

    return 112LL;
  }

void sub_100A8B2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  uint64_t v6 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Attempt to send core anaytics from CLWorkoutDistanceCoreAnalyzer",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    LOWORD(v146) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Attempt to send core anaytics from CLWorkoutDistanceCoreAnalyzer",  &v146,  2);
    __int128 v81 = (char *)v80;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)",  "%s\n",  v80);
    if (v81 != buf) {
      free(v81);
    }
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  uint64_t v7 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    double v8 = *(double *)a2;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 24);
    double v12 = *(double *)(a2 + 32);
    double v13 = *(double *)(a2 + 40);
    double v14 = *(double *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(a2 + 64);
    int v17 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)buf = 134220288;
    *(double *)&uint8_t buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&_BYTE buf[14] = v9;
    *(_WORD *)&_BYTE buf[22] = 2048;
    *(void *)&buf[24] = v10;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v11;
    *(_WORD *)&buf[42] = 2048;
    double v170 = v12;
    __int16 v171 = 2048;
    double v172 = v13;
    __int16 v173 = 2048;
    double v174 = v14;
    __int16 v175 = 2048;
    *(void *)__n128 v176 = v15;
    *(_WORD *)&v176[8] = 2048;
    uint64_t v177 = v16;
    *(_WORD *)__n128 v178 = 1024;
    *(_DWORD *)&v178[2] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Phone measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d",  buf,  0x62u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    double v82 = *(double *)a2;
    double v83 = *(double *)(a2 + 8);
    double v84 = *(double *)(a2 + 16);
    double v85 = *(double *)(a2 + 24);
    double v86 = *(double *)(a2 + 32);
    double v87 = *(double *)(a2 + 40);
    double v88 = *(double *)(a2 + 48);
    uint64_t v89 = *(void *)(a2 + 56);
    uint64_t v90 = *(void *)(a2 + 64);
    int v91 = *(_DWORD *)(a2 + 72);
    int v146 = 134220288;
    double v147 = v82;
    __int16 v148 = 2048;
    double v149 = v83;
    __int16 v150 = 2048;
    double v151 = v84;
    __int16 v152 = 2048;
    double v153 = v85;
    __int16 v154 = 2048;
    double v155 = v86;
    __int16 v156 = 2048;
    double v157 = v87;
    __int16 v158 = 2048;
    double v159 = v88;
    __int16 v160 = 2048;
    *(void *)__int128 v161 = v89;
    *(_WORD *)&v161[8] = 2048;
    uint64_t v162 = v90;
    *(_WORD *)__int128 v163 = 1024;
    *(_DWORD *)&v163[2] = v91;
    LODWORD(v110) = 98;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Phone measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d",  COERCE_DOUBLE(&v146),  v110,  v111,  v113,  v115,  *(double *)&v116,  *(double *)&v117,  *(double *)&v118,  *(double *)&v119,  LODWORD(v120));
    __int128 v93 = (char *)v92;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)",  "%s\n",  v92);
    if (v93 != buf) {
      free(v93);
    }
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  double v18 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    double v19 = *(double *)a3;
    uint64_t v20 = *(void *)(a3 + 8);
    uint64_t v21 = *(void *)(a3 + 16);
    uint64_t v22 = *(void *)(a3 + 24);
    double v23 = *(double *)(a3 + 32);
    double v24 = *(double *)(a3 + 40);
    double v25 = *(double *)(a3 + 48);
    uint64_t v26 = *(void *)(a3 + 56);
    uint64_t v27 = *(void *)(a3 + 64);
    int v28 = *(_DWORD *)(a3 + 72);
    *(_DWORD *)buf = 134220288;
    *(double *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&_BYTE buf[14] = v20;
    *(_WORD *)&_BYTE buf[22] = 2048;
    *(void *)&buf[24] = v21;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&buf[34] = v22;
    *(_WORD *)&buf[42] = 2048;
    double v170 = v23;
    __int16 v171 = 2048;
    double v172 = v24;
    __int16 v173 = 2048;
    double v174 = v25;
    __int16 v175 = 2048;
    *(void *)__n128 v176 = v26;
    *(_WORD *)&v176[8] = 2048;
    uint64_t v177 = v27;
    *(_WORD *)__n128 v178 = 1024;
    *(_DWORD *)&v178[2] = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Watch measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d",  buf,  0x62u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    double v94 = *(double *)a3;
    double v95 = *(double *)(a3 + 8);
    double v96 = *(double *)(a3 + 16);
    double v97 = *(double *)(a3 + 24);
    double v98 = *(double *)(a3 + 32);
    double v99 = *(double *)(a3 + 40);
    double v100 = *(double *)(a3 + 48);
    uint64_t v101 = *(void *)(a3 + 56);
    uint64_t v102 = *(void *)(a3 + 64);
    int v103 = *(_DWORD *)(a3 + 72);
    int v146 = 134220288;
    double v147 = v94;
    __int16 v148 = 2048;
    double v149 = v95;
    __int16 v150 = 2048;
    double v151 = v96;
    __int16 v152 = 2048;
    double v153 = v97;
    __int16 v154 = 2048;
    double v155 = v98;
    __int16 v156 = 2048;
    double v157 = v99;
    __int16 v158 = 2048;
    double v159 = v100;
    __int16 v160 = 2048;
    *(void *)__int128 v161 = v101;
    *(_WORD *)&v161[8] = 2048;
    uint64_t v162 = v102;
    *(_WORD *)__int128 v163 = 1024;
    *(_DWORD *)&v163[2] = v103;
    LODWORD(v110) = 98;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Watch measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d",  COERCE_DOUBLE(&v146),  v110,  v111,  v113,  v115,  *(double *)&v116,  *(double *)&v117,  *(double *)&v118,  *(double *)&v119,  LODWORD(v120));
    __int128 v105 = (char *)v104;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)",  "%s\n",  v104);
    if (v105 != buf) {
      free(v105);
    }
  }

  unsigned __int8 v29 = atomic_load((unsigned __int8 *)&qword_10199A550);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_10199A550))
  {
    *(_OWORD *)buf = xmmword_101346E10;
    *(void *)&uint8_t buf[16] = 0x4280000042440000LL;
    sub_1001B4118(qword_10199A538, buf, 6uLL);
    __cxa_atexit((void (*)(void *))sub_1001B4198, qword_10199A538, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199A550);
  }

  unsigned __int8 v30 = atomic_load((unsigned __int8 *)&qword_10199A570);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_10199A570))
  {
    *(_OWORD *)buf = xmmword_101346E28;
    *(void *)&uint8_t buf[16] = 0x46C35000469C4000LL;
    sub_1001B4118(qword_10199A558, buf, 6uLL);
    __cxa_atexit((void (*)(void *))sub_1001B4198, qword_10199A558, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199A570);
  }

  unsigned __int8 v31 = atomic_load((unsigned __int8 *)&qword_10199A590);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_10199A590))
  {
    *(_OWORD *)buf = xmmword_101346E40;
    *(_OWORD *)&uint8_t buf[16] = unk_101346E50;
    *(_OWORD *)&buf[28] = unk_101346E5C;
    sub_1001B4118(qword_10199A578, buf, 0xBuLL);
    __cxa_atexit((void (*)(void *))sub_1001B4198, qword_10199A578, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199A590);
  }

  unsigned __int8 v32 = atomic_load((unsigned __int8 *)&qword_10199A5B0);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_10199A5B0))
  {
    *(_DWORD *)&uint8_t buf[16] = 1108056474;
    *(_OWORD *)buf = xmmword_101346E6C;
    sub_1001B4118(qword_10199A598, buf, 5uLL);
    __cxa_atexit((void (*)(void *))sub_1001B4198, qword_10199A598, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199A5B0);
  }

  std::mutex::lock((std::mutex *)(a1 + 64));
  int v33 = *(_DWORD *)(a1 + 132);
  float v34 = *(float *)(a1 + 136);
  LODWORD(v112) = *(_DWORD *)(a1 + 140);
  float v35 = *(float *)(a1 + 148);
  std::mutex::unlock((std::mutex *)(a1 + 64));
  double v36 = *(double *)(a2 + 40);
  double v37 = -1.0;
  double v38 = -1.0;
  if (v36 > 0.001) {
    double v38 = *(double *)(a3 + 32) / v36;
  }
  double v39 = *(double *)(a2 + 64);
  if (v39 > 0.001) {
    double v37 = *(double *)(a2 + 56) / v39;
  }
  double v40 = -1.0;
  if (v36 > 0.001) {
    double v40 = *(double *)(a2 + 16) / v36;
  }
  int v41 = *(_DWORD *)(a3 + 72);
  if (v41 < 1) {
    float v42 = -1.0;
  }
  else {
    float v42 = (float)*(int *)(a2 + 72) / (float)v41;
  }
  *((float *)&v112 + 1) = v42;
  double v43 = -1.0;
  if (v39 > 0.001) {
    double v43 = *(double *)(a3 + 56) / v39;
  }
  double v114 = v38;
  HIDWORD(v115) = -1.0;
  if (v36 > 0.001)
  {
    float v44 = *(double *)(a3 + 16) / v36;
    *((float *)&v115 + 1) = v44;
  }

  double v45 = *(double *)a2;
  double v46 = *(double *)(a2 + 8);
  __int32 v143 = 0LL;
  __n128 v144 = 0LL;
  uint64_t v145 = 0LL;
  sub_10001B72C(&v143, (const void *)qword_10199A538[0], unk_10199A540, (unk_10199A540 - qword_10199A538[0]) >> 2);
  uint64_t v47 = (char *)v144 - (char *)v143;
  if (v144 == v143)
  {
    LODWORD(v48) = 0;
    int v50 = 0;
    if (!v144) {
      goto LABEL_41;
    }
  }

  else
  {
    uint64_t v48 = 0LL;
    uint64_t v49 = v47 >> 2;
    while (v143[v48] < v35)
    {
      if (v49 == ++v48)
      {
        LODWORD(v48) = v49;
        break;
      }
    }
  }

  __n128 v144 = v143;
  operator delete(v143);
  int v50 = v48;
LABEL_41:
  double v51 = *(double *)(a2 + 40);
  __n128 v141 = 0LL;
  uint64_t v142 = 0LL;
  std::string v140 = 0LL;
  sub_10001B72C(&v140, (const void *)qword_10199A558[0], unk_10199A560, (unk_10199A560 - qword_10199A558[0]) >> 2);
  double v52 = v46 - v45;
  uint64_t v53 = (char *)v141 - (char *)v140;
  if (v141 == v140)
  {
    LODWORD(v54) = 0;
    int v57 = 0;
    if (!v141) {
      goto LABEL_49;
    }
  }

  else
  {
    uint64_t v54 = 0LL;
    uint64_t v56 = v53 >> 2;
    while (1)
    {
      float v55 = v51;
      if (v140[v54] >= v55) {
        break;
      }
      if (v56 == ++v54)
      {
        LODWORD(v54) = v56;
        break;
      }
    }
  }

  __n128 v141 = v140;
  operator delete(v140);
  int v57 = v54;
LABEL_49:
  double v58 = *(double *)(a3 + 48);
  float v59 = -1.0;
  if (v52 > 0.001) {
    float v59 = *(double *)(a2 + 40) / v52;
  }
  __int16 v137 = 0LL;
  unint64_t v138 = 0LL;
  uint64_t v139 = 0LL;
  sub_10001B72C(&v137, (const void *)qword_10199A578[0], unk_10199A580, (unk_10199A580 - qword_10199A578[0]) >> 2);
  uint64_t v60 = (char *)v138 - (char *)v137;
  if (v138 == v137)
  {
    LODWORD(v61) = 0;
    int v63 = 0;
    if (!v138) {
      goto LABEL_59;
    }
  }

  else
  {
    uint64_t v61 = 0LL;
    uint64_t v62 = v60 >> 2;
    while (v137[v61] < v59)
    {
      if (v62 == ++v61)
      {
        LODWORD(v61) = v62;
        break;
      }
    }
  }

  unint64_t v138 = v137;
  operator delete(v137);
  int v63 = v61;
LABEL_59:
  float v64 = 0.0;
  if (v34 != 0.0) {
    float v64 = *(float *)&v112 / (float)(v34 * v34);
  }
  int v134 = 0LL;
  __int16 v135 = 0LL;
  uint64_t v136 = 0LL;
  sub_10001B72C(&v134, (const void *)qword_10199A598[0], unk_10199A5A0, (unk_10199A5A0 - qword_10199A598[0]) >> 2);
  uint64_t v65 = (char *)v135 - (char *)v134;
  if (v135 == v134)
  {
    LODWORD(v66) = 0;
    int v69 = 0;
    double v68 = v37;
    if (!v135) {
      goto LABEL_70;
    }
  }

  else
  {
    uint64_t v66 = 0LL;
    uint64_t v67 = v65 >> 2;
    double v68 = v37;
    while (v134[v66] < v64)
    {
      if (v67 == ++v66)
      {
        LODWORD(v66) = v67;
        break;
      }
    }
  }

  __int16 v135 = v134;
  operator delete(v134);
  int v69 = v66;
LABEL_70:
  float v70 = v34 / 0.1;
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  float v71 = v114;
  float v72 = v68;
  float v73 = v40;
  __int128 v74 = (os_log_s *)qword_101934518;
  float v75 = v43;
  unsigned int v76 = vcvtps_s32_f32(v70);
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134221312;
    *(double *)&uint8_t buf[4] = v71;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&_BYTE buf[14] = v72;
    *(_WORD *)&_BYTE buf[22] = 2048;
    *(double *)&buf[24] = v73;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = *((float *)&v112 + 1);
    *(_WORD *)&buf[42] = 2048;
    double v170 = v75;
    __int16 v171 = 2048;
    double v172 = *((float *)&v115 + 1);
    __int16 v173 = 2048;
    double v174 = *((float *)&v115 + 1);
    __int16 v175 = 1024;
    *(_DWORD *)__n128 v176 = v50;
    *(_WORD *)&v176[4] = 1024;
    *(_DWORD *)&v176[6] = v57;
    LOWORD(v17memset(&v6[1], 0, 7) = 1024;
    *(_DWORD *)((char *)&v177 + 2) = v33;
    HIWORD(v17memset(&v6[1], 0, 7) = 1024;
    *(_DWORD *)__n128 v178 = v58 >= 0.5;
    *(_WORD *)&v178[4] = 1024;
    int v179 = v63;
    __int16 v180 = 1024;
    int v181 = v69;
    __int16 v182 = 1024;
    unsigned int v183 = v76;
    _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_INFO,  "CLWorkoutDistanceCoreAnalyzer: Core analytics: %f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d",  buf,  0x72u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    int v146 = 134221312;
    double v147 = v71;
    __int16 v148 = 2048;
    double v149 = v72;
    __int16 v150 = 2048;
    double v151 = v73;
    __int16 v152 = 2048;
    double v153 = *((float *)&v112 + 1);
    __int16 v154 = 2048;
    double v155 = v75;
    __int16 v156 = 2048;
    double v157 = *((float *)&v115 + 1);
    __int16 v158 = 2048;
    double v159 = *((float *)&v115 + 1);
    __int16 v160 = 1024;
    *(_DWORD *)__int128 v161 = v50;
    *(_WORD *)&v161[4] = 1024;
    *(_DWORD *)&v161[6] = v57;
    LOWORD(v162) = 1024;
    *(_DWORD *)((char *)&v162 + 2) = v33;
    HIWORD(v162) = 1024;
    *(_DWORD *)__int128 v163 = v58 >= 0.5;
    *(_WORD *)&v163[4] = 1024;
    int v164 = v63;
    __int16 v165 = 1024;
    int v166 = v69;
    __int16 v167 = 1024;
    unsigned int v168 = v76;
    LODWORD(v110) = 114;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "CLWorkoutDistanceCoreAnalyzer: Core analytics: %f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d",  COERCE_DOUBLE(&v146),  v110,  v112,  v114,  v115,  *(double *)&v116,  *(double *)&v117,  (_DWORD)v118,  (_DWORD)v119,  LODWORD(v120),  LODWORD(v122),  LODWORD(v124),  v126,  v128);
    __int128 v107 = (char *)v106;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)",  "%s\n",  v106);
    if (v107 != buf) {
      free(v107);
    }
  }

  *(void *)&double v77 = objc_opt_class(&OBJC_CLASS___MCProfileConnection).n128_u64[0];
  if (v78
    && (objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection",  v77),  "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (*(double *)(a2 + 40) > 0.01)
    {
      unint64_t v116 = _NSConcreteStackBlock;
      uint64_t v117 = 3221225472LL;
      __int128 v118 = sub_100A8C2B0;
      __int128 v119 = &unk_10186C050;
      float v120 = v71;
      float v121 = v72;
      float v122 = v73;
      int v123 = HIDWORD(v112);
      float v124 = v43;
      int v125 = HIDWORD(v115);
      int v126 = HIDWORD(v115);
      int v127 = v50;
      int v128 = v57;
      BOOL v133 = v58 >= 0.5;
      int v129 = v33;
      int v130 = v63;
      int v131 = v69;
      unsigned int v132 = v76;
      AnalyticsSendEventLazy(@"com.apple.CoreMotion.Pedometer.PedestrianDistanceEval", &v116);
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    __int128 v79 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_INFO,  "CLWorkoutDistanceCoreAnalyzer: Not authorized to submit analytics without IHA",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      LOWORD(v146) = 0;
      LODWORD(v110) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "CLWorkoutDistanceCoreAnalyzer: Not authorized to submit analytics without IHA",  &v146,  *(void *)&v110);
      __int128 v109 = (char *)v108;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)",  "%s\n",  v108);
      if (v109 != buf) {
        free(v109);
      }
    }
  }

void sub_100A8C260(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100A8C2B0(uint64_t a1, double a2)
{
  v10[0] = @"normGPSDistance";
  LODWORD(a2) = *(_DWORD *)(a1 + 32);
  v11[0] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", a2);
  v10[1] = @"normPhonePace";
  LODWORD(v3) = *(_DWORD *)(a1 + 36);
  v11[1] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v3);
  v10[2] = @"normPhonePedCalDistance";
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  void v11[2] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v4);
  v10[3] = @"normStepCount";
  LODWORD(v5) = *(_DWORD *)(a1 + 44);
  v11[3] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v5);
  _DWORD v10[4] = @"normWatchPace";
  LODWORD(v6) = *(_DWORD *)(a1 + 48);
  v11[4] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v6);
  v10[5] = @"normWatchPedCalDistance";
  LODWORD(vmemset(&v6[1], 0, 7) = *(_DWORD *)(a1 + 52);
  void v11[5] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v7);
  v10[6] = @"normWatchPedMobDistance";
  LODWORD(v8) = *(_DWORD *)(a1 + 56);
  v11[6] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8);
  v10[7] = @"ageGroup";
  v11[7] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  _WORD v10[8] = @"distanceBin";
  _WORD v11[8] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  v10[9] = @"gender";
  v11[9] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  v10[10] = @"phoneGPS";
  v11[10] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 84));
  v10[11] = @"speedBin";
  v11[11] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72));
  v10[12] = @"userBMIBin";
  v11[12] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 76));
  v10[13] = @"userHeightBin";
  v11[13] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  14LL);
}

void *sub_100A8C4AC@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  double v6 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Attempt to sync workout distance metric between watch and phone.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    LOWORD(v59) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Attempt to sync workout distance metric between watch and phone.",  &v59,  2);
    double v52 = (char *)v51;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreA nalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)",  "%s\n",  v51);
    if (v52 != buf) {
      free(v52);
    }
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  double v7 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *((void *)a1 + 41);
    uint64_t v9 = *(void *)(a2 + 16);
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&_BYTE buf[14] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Workout distance: Phone buffer size: %lu, Watch buffer size: %lu,",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    double v53 = a1[41];
    uint64_t v54 = *(void *)(a2 + 16);
    int v59 = 134218240;
    double v60 = v53;
    __int16 v61 = 2048;
    uint64_t v62 = v54;
    LODWORD(v5memset(&v6[1], 0, 7) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Workout distance: Phone buffer size: %lu, Watch buffer size: %lu,",  &v59,  *(void *)&v57);
    uint64_t v56 = (char *)v55;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreA nalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)",  "%s\n",  v55);
    if (v56 != buf) {
      free(v56);
    }
  }

  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0LL;
  if (*((void *)a1 + 41) && *(void *)(a2 + 16))
  {
    *(void *)&__int128 v10 = 134217984LL;
    __int128 v58 = v10;
    do
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      uint64_t v11 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *((void *)a1 + 40);
        uint64_t v13 = *(void *)(a2 + 8);
        uint64_t v15 = *(void *)(v12 + 16);
        uint64_t v14 = *(void *)(v12 + 24);
        uint64_t v17 = *(void *)(v13 + 16);
        uint64_t v16 = *(void *)(v13 + 24);
        *(_DWORD *)buf = 134218752;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&_BYTE buf[14] = v17;
        *(_WORD *)&_BYTE buf[22] = 2048;
        *(void *)&buf[24] = v14;
        LOWORD(v68) = 2048;
        *(void *)((char *)&v68 + 2) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Attempt to sync phone begin time (%f) with watch begin time (%f) and phone end time (%f) with watch end time (%f)",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186C070);
        }
        uint64_t v39 = *((void *)a1 + 40);
        uint64_t v40 = *(void *)(a2 + 8);
        double v42 = *(double *)(v39 + 16);
        uint64_t v41 = *(void *)(v39 + 24);
        uint64_t v44 = *(void *)(v40 + 16);
        uint64_t v43 = *(void *)(v40 + 24);
        int v59 = 134218752;
        double v60 = v42;
        __int16 v61 = 2048;
        uint64_t v62 = v44;
        __int16 v63 = 2048;
        uint64_t v64 = v41;
        __int16 v65 = 2048;
        uint64_t v66 = v43;
        LODWORD(v5memset(&v6[1], 0, 7) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Attempt to sync phone begin time (%f) with watch begin time (%f) and phone end time (%f) with watch end time (%f)",  COERCE_DOUBLE(&v59),  v57,  *(double *)&v58,  *((double *)&v58 + 1));
        double v46 = (char *)v45;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareC oreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)",  "%s\n",  v45);
        if (v46 != buf) {
          free(v46);
        }
      }

      double v18 = (double *)*((void *)a1 + 40);
      double v19 = v18[2];
      uint64_t v20 = *(double **)(a2 + 8);
      double v21 = v20[2];
      if (vabdd_f64(v19, v21) >= 15.0 || vabdd_f64(v18[3], v20[3]) >= 15.0)
      {
        if (v19 >= v21)
        {
          uint64_t v38 = *(void *)v20;
          *(double *)(v38 + 8) = v20[1];
          **((void **)v20 + 1) = v38;
          --*(void *)(a2 + 16);
          double v18 = v20;
        }

        else
        {
          double v37 = *v18;
          *(double *)(*(void *)&v37 + 8LL) = v18[1];
          **((double **)v18 + 1) = v37;
          --*((void *)a1 + 41);
        }
      }

      else
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186C070);
        }
        uint64_t v22 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
        {
          double v23 = *(double *)(*(void *)(a2 + 8) + 24LL) - *(double *)(*(void *)(a2 + 8) + 16LL);
          *(_DWORD *)buf = v58;
          *(double *)&uint8_t buf[4] = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Workout synced. Total duration %f",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_10186C070);
          }
          double v47 = *(double *)(*(void *)(a2 + 8) + 24LL) - *(double *)(*(void *)(a2 + 8) + 16LL);
          int v59 = v58;
          double v60 = v47;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Workout synced. Total duration %f",  COERCE_DOUBLE(&v59));
          uint64_t v49 = (char *)v48;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepar eCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)",  "%s\n",  v48);
          if (v49 != buf) {
            free(v49);
          }
        }

        double v24 = *(_OWORD **)(a2 + 8);
        double v25 = (_OWORD *)*((void *)a1 + 40);
        __int128 v26 = v24[3];
        *(_OWORD *)&uint8_t buf[16] = v24[2];
        __int128 v68 = v26;
        __int128 v27 = v24[5];
        __int128 v69 = v24[4];
        __int128 v70 = v27;
        *(_OWORD *)buf = v24[1];
        __int128 v72 = v25[2];
        __int128 v73 = v25[3];
        __int128 v74 = v25[4];
        __int128 v75 = v25[5];
        __int128 v71 = v25[1];
        int v28 = operator new(0xB0uLL);
        __int128 v29 = v73;
        v28[7] = v72;
        v28[8] = v29;
        __int128 v30 = v75;
        void v28[9] = v74;
        v28[10] = v30;
        __int128 v31 = v69;
        v28[3] = v68;
        v28[4] = v31;
        __int128 v32 = v71;
        v28[5] = v70;
        v28[6] = v32;
        __int128 v33 = *(_OWORD *)&buf[16];
        v28[1] = *(_OWORD *)buf;
        v28[2] = v33;
        uint64_t v34 = *a3;
        *(void *)int v28 = *a3;
        *((void *)v28 + 1) = a3;
        *(void *)(v34 + 8) = v28;
        *a3 = (uint64_t)v28;
        ++a3[2];
        uint64_t v35 = *(void *)v25;
        *(void *)(v35 + 8) = *((void *)v25 + 1);
        **((void **)v25 + 1) = v35;
        --*((void *)a1 + 41);
        operator delete(v25);
        double v18 = *(double **)(a2 + 8);
        double v36 = *v18;
        *(double *)(*(void *)&v36 + 8LL) = v18[1];
        **((double **)v18 + 1) = v36;
        --*(void *)(a2 + 16);
      }

      operator delete(v18);
    }

    while (*((void *)a1 + 41) && *(void *)(a2 + 16));
  }

  return sub_1001B4C40((void *)a1 + 39);
}

void sub_100A8CC4C(_Unwind_Exception *a1)
{
}

uint64_t sub_100A8CC74(std::mutex *a1, uint64_t a2)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10186C070);
  }
  double v4 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)__int128 v27 = CFAbsoluteTimeGetCurrent();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch, time: %f",  buf,  0xCu);
  }

  uint64_t v5 = sub_1002921D0(115, 2);
  if ((_DWORD)v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    uint64_t v16 = qword_101934518;
    LODWORD(v24) = 134217984;
    *(void *)((char *)&v24 + 4) = CFAbsoluteTimeGetCurrent();
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch, time: %f",  COERCE_DOUBLE(&v24));
    double v18 = (uint8_t *)v17;
    uint64_t v5 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch(NSData * _Nullable)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  if (a1[3].__m_.__opaque[8]) {
    sub_100A89A74((uint64_t)a1);
  }
  *(void *)&__int128 v24 = &v24;
  *((void *)&v24 + 1) = &v24;
  uint64_t v25 = 0LL;
  uint64_t v6 = sub_100A8AB8C(v5, (uint64_t *)&v24, a2);
  if ((_DWORD)v6 == 100)
  {
    if (v25)
    {
      sub_100A8C4AC((double *)&a1->__m_.__sig, (uint64_t)&v24, (uint64_t *)buf);
      for (uint64_t i = *(void *)&v27[4]; (uint8_t *)i != buf; uint64_t i = *(void *)(i + 8))
      {
        __int128 v8 = *(_OWORD *)(i + 64);
        v22[2] = *(_OWORD *)(i + 48);
        v22[3] = v8;
        __int128 v9 = *(_OWORD *)(i + 96);
        v22[4] = *(_OWORD *)(i + 80);
        __int128 v10 = *(_OWORD *)(i + 32);
        v22[0] = *(_OWORD *)(i + 16);
        v22[1] = v10;
        __int128 v11 = *(_OWORD *)(i + 112);
        __int128 v12 = *(_OWORD *)(i + 144);
        __int128 v13 = *(_OWORD *)(i + 160);
        v21[2] = *(_OWORD *)(i + 128);
        v21[3] = v12;
        v21[4] = v13;
        v21[0] = v9;
        v21[1] = v11;
        sub_100A8B2E0((uint64_t)a1, (uint64_t)v22, (uint64_t)v21);
      }

      sub_1001B4C40(buf);
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10186C070);
    }
    uint64_t v14 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Something went wrong with the workout distance core analytics received from the watch. Abort submission.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C070);
      }
      v23[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "Something went wrong with the workout distance core analytics received from the watch. Abort submission.",  v23,  2);
      uint64_t v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch(NSData * _Nullable)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }
  }

  sub_1001B4C40(&v24);
  std::mutex::unlock(a1);
  return v6;
}

void sub_100A8D02C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
}

void sub_100A8D074(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

double sub_100A8D128(uint64_t a1)
{
  *(void *)a1 = &off_101865238;
  *(void *)(a1 + 8) = 0x19000000000LL;
  *(void *)(a1 + 4816) = 0x19000000000LL;
  *(void *)(a1 + 8024) = 0LL;
  *(_DWORD *)(a1 + 8032) = 0;
  *(void *)(a1 + 8036) = 0xBF8000003F800000LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 8048) = 0u;
  *(void *)(a1 + 8064) = 0x3F80000000000000LL;
  return result;
}

void sub_100A8D21C(id a1)
{
  qword_10199A5D0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLSkiNotifierSilo");
}

void sub_100A8D48C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A8D4EC(id a1)
{
  if (sub_1008FA690())
  {
    sub_1004F2598();
    if (sub_1001B9A1C())
    {
      sub_1004F2598();
      if ((sub_1004F97F4() & 0x400000000LL) != 0) {
        byte_10199A5E0 = 1;
      }
    }
  }

void sub_100A8D528(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A8D554()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199A5B8, (void *)&_mh_execute_header);
}

void sub_100A8D598(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_100246C40((uint64_t)v15, a3);
  [a4 onForcedLocationNotification:v5 data:v15];

  uint64_t v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (v19 < 0) {
    operator delete(__p);
  }
  __int128 v9 = v17;
  if (v17)
  {
    __int128 v10 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  __int128 v12 = v16;
  if (v16)
  {
    __int128 v13 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_100A8D6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id sub_100A8D6BC(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  __int128 v5 = a3[9];
  _WORD v12[8] = a3[8];
  v12[9] = v5;
  __int128 v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  __int128 v7 = a3[5];
  _DWORD v12[4] = a3[4];
  v12[5] = v7;
  __int128 v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  __int128 v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  __int128 v10 = a3[3];
  _DWORD v12[2] = a3[2];
  v12[3] = v10;
  return [a4 onCompanionConnectionNotification:v4 data:v12];
}

void sub_100A8DD58(_Unwind_Exception *a1)
{
}

BOOL sub_100A8DE40(uint64_t a1)
{
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10186C0F0);
  }
  unint64_t v2 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from Wifi notifications", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10186C0F0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "unsubscribing from Wifi notifications",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLContextManagerAbsoluteAltimeter setupTimers]_block_invoke", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 48) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 8) forNotification:1];
  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) = 0;
  return sub_100AD5D38(*(void *)(*(void *)(a1 + 32) + 112LL));
}

BOOL sub_100A8E010(uint64_t a1)
{
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10186C0F0);
  }
  unint64_t v2 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from GPS notifications", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10186C0F0);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "unsubscribing from GPS notifications",  v6,  2);
    __int128 v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLContextManagerAbsoluteAltimeter setupTimers]_block_invoke", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 48) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 8) forNotification:0];
  *(_BYTE *)(*(void *)(a1 + 32) + 81LL) = 0;
  return sub_100AD5D38(*(void *)(*(void *)(a1 + 32) + 120LL));
}

void sub_100A8ECF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
}

void sub_100A8F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10049108C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100A90A34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  sub_10049108C((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_100A91178( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10049108C(va1);
  _Unwind_Resume(a1);
}

void sub_100A927D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10049108C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100A92DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10049108C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100A930D0(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100A930FC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101346EC0;
      v1[3] = unk_101346ED0;
      v1[4] = xmmword_101346EE0;
      v1[0] = xmmword_101346EA0;
      v1[1] = unk_101346EB0;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100A931D0(_Unwind_Exception *a1)
{
}

uint64_t sub_100A931E8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199A5F0, (void *)&_mh_execute_header);
}

void sub_100A93330( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100A93370(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10186C120;
  a1[9] = off_10186C1F0;
  a1[50] = off_10186C240;
  sub_100B14CF0(a1 + 51, 0LL, 0LL);
  sub_100B14CF0(a1 + 53, 0LL, 0LL);
  sub_100B14CF0(a1 + 55, 0LL, 0LL);
  sub_100B14CF0(a1 + 57, 0LL, 0LL);
  sub_100B14CF0(a1 + 59, 0LL, 0LL);
  sub_100B14CF0(a1 + 61, 0LL, 0LL);
  sub_100B14CF0(a1 + 63, 0LL, 0LL);
  sub_100B14CF0(a1 + 65, 0LL, 0LL);
  sub_100B14CF0(a1 + 67, 0LL, 0LL);
  (*(void (**)(void *))(*a1 + 112LL))(a1);
  return a1;
}

void sub_100A93498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A934C4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  __int128 v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_101826EF8;
  *(void *)a1 = off_10186C7F8;
  *(void *)(a1 + 72) = off_10186C8A0;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10186C7F8;
  *(void *)(a1 + 72) = off_10186C8A0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  uint64_t v13 = (void *)(a1 + 232);
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 263) = 0LL;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + memset(&v8[8], 0, 208) = 0u;
  *(void *)(a1 + 272) = 0x3FD9999A00000000LL;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 1116213084;
  *(_BYTE *)(a1 + 288) = 0;
  *(void *)(a1 + 292) = 0LL;
  *(void *)(a1 + 308) = 0LL;
  *(void *)(a1 + 300) = 0LL;
  *(_DWORD *)(a1 + 320) = 12000;
  *(void *)(a1 + 328) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 336));
  *(void *)(a1 + 336) = &off_101826EF8;
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v30 = a1 + 112;
  (*(void (**)(void))(v14 + 16))();
  __int16 v32 = 256;
  if (a3)
  {
    *uint64_t v13 = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v30 + 24LL))(v30);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v29 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = sub_1006E27E8();
  sub_100413284(v15, buf);
  uint64_t v16 = (int *)(a1 + 320);
  char v17 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 320));
  double v18 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if ((v17 & 1) == 0) {
    *uint64_t v16 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10186C8E0);
  }
  id v21 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *v16;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186C8E0);
    }
    int v25 = *v16;
    v33[0] = 67109120;
    v33[1] = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v33);
    __int128 v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(cons t char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = CLMobility::Ga itMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  int v23 = HIBYTE(v32);
  *uint64_t v13 = 0xBFF0000000000000LL;
  if (v23)
  {
    if ((_BYTE)v32)
    {
      pthread_mutex_unlock(v31);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100A938B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[41] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_1009D4FA0(v26);
  sub_100D8A88C(a12);
  void *v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100A93954()
{
}

void *sub_100A9395C(void *a1)
{
  a1[9] = off_10186C8A0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10186C7F8;
  a1[41] = off_101826EC8;
  sub_1001B9C98(a1 + 42);
  sub_1009D4FA0(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100A939DC(uint64_t a1)
{
  return sub_100A9395C((void *)(a1 - 72));
}

void *sub_100A939E4(uint64_t a1)
{
  return sub_100A9395C((void *)(a1 - 400));
}

void sub_100A939EC(void *a1)
{
  uint64_t v1 = sub_100A9395C(a1);
  operator delete(v1);
}

void sub_100A93A00(uint64_t a1)
{
  uint64_t v1 = sub_100A9395C((void *)(a1 - 72));
  operator delete(v1);
}

void sub_100A93A18(uint64_t a1)
{
  uint64_t v1 = sub_100A9395C((void *)(a1 - 400));
  operator delete(v1);
}

uint64_t sub_100A93A30(uint64_t *a1, uint64_t a2)
{
  __int128 v5 = a1 + 14;
  uint64_t v4 = a1[14];
  v15[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  __int16 v16 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16LL) == 1.79769313e308 && sub_100D8A930((uint64_t)(a1 + 9)))
  {
    sub_1003C0454(a1[10]);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100B14CF8(a1 + 55, v15);
    __int128 v7 = (sqlite3_stmt *)sub_100019240(v15[0]);
    if (sub_1003B7480(v7, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
    {
      uint64_t v8 = a1[10];
      uint64_t v9 = (sqlite3_stmt *)sub_100019240(v15[0]);
      sub_1003BB2BC(v8, v9);
      uint64_t v10 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }

    else
    {
      uint64_t v10 = -1LL;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v11 = a1[10];
    else {
      uint64_t v12 = *(void *)(v11 + 88);
    }
    sub_1003C1EC0(v11, v12);
    uint64_t v13 = v15[0];
    v15[0] = 0LL;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
  }

  else
  {
    uint64_t v10 = -1LL;
  }

  (*(void (**)(uint64_t *))(*v5 + 24))(v5);
  return v10;
}

void sub_100A93B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100A93BB0(uint64_t a1, uint64_t a2)
{
  return sub_100A93A30((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100A93BB8(uint64_t *a1, char **a2)
{
  __int128 v5 = a1 + 14;
  uint64_t v4 = a1[14];
  uint64_t v6 = (uint64_t)(a1 + 9);
  v34[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  __int16 v35 = 256;
  if (sub_100D8A930(v6))
  {
    a2[1] = *a2;
    sub_100B14CF8(a1 + 57, v34);
    sub_1003C0454(a1[10]);
    *(_DWORD *)__int128 v31 = 0;
    memset(&v31[8], 0, 39);
    *(void *)&__int128 v32 = 0x3FD9999A00000000LL;
    BYTE8(v32) = 0;
    HIDWORD(v32) = 1116213084;
    v33[0] = 0;
    memset(&v33[4], 0, 24);
    while (!sub_100A93E40(v34, (uint64_t)v31))
    {
      __int128 v7 = a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v8)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a2) >> 5);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*a2) >> 5);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x155555555555555LL) {
          unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          char v17 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v16);
        }
        else {
          char v17 = 0LL;
        }
        double v18 = &v17[96 * v13];
        __int128 v19 = *(_OWORD *)&v31[16];
        *(_OWORD *)double v18 = *(_OWORD *)v31;
        *((_OWORD *)v18 + 1) = v19;
        __int128 v20 = *(_OWORD *)&v33[16];
        *((_OWORD *)v18 + 4) = *(_OWORD *)v33;
        *((_OWORD *)v18 + 5) = v20;
        __int128 v21 = v32;
        *((_OWORD *)v18 + 2) = *(_OWORD *)&v31[32];
        *((_OWORD *)v18 + 3) = v21;
        int v23 = *a2;
        int v22 = a2[1];
        __int128 v24 = v18;
        if (v22 != *a2)
        {
          do
          {
            __int128 v25 = *((_OWORD *)v22 - 5);
            *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
            *((_OWORD *)v24 - 5) = v25;
            __int128 v26 = *((_OWORD *)v22 - 4);
            __int128 v27 = *((_OWORD *)v22 - 3);
            __int128 v28 = *((_OWORD *)v22 - 2);
            *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 - 20);
            *((_OWORD *)v24 - 3) = v27;
            *((_OWORD *)v24 - 2) = v28;
            *((_OWORD *)v24 - 4) = v26;
            v24 -= 96;
            v22 -= 96;
          }

          while (v22 != v23);
          int v22 = *a2;
        }

        uint64_t v12 = v18 + 96;
        *a2 = v24;
        a2[1] = v18 + 96;
        a2[2] = &v17[96 * v16];
        if (v22) {
          operator delete(v22);
        }
      }

      else
      {
        __int128 v9 = v32;
        *((_OWORD *)v7 + 2) = *(_OWORD *)&v31[32];
        *((_OWORD *)v7 + 3) = v9;
        __int128 v10 = *(_OWORD *)&v33[16];
        *((_OWORD *)v7 + 4) = *(_OWORD *)v33;
        *((_OWORD *)v7 + 5) = v10;
        __int128 v11 = *(_OWORD *)&v31[16];
        uint64_t v12 = v7 + 96;
        *(_OWORD *)__int128 v7 = *(_OWORD *)v31;
        *((_OWORD *)v7 + 1) = v11;
      }

      a2[1] = v12;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v29 = v34[0];
    v34[0] = 0LL;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
  }

  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_100A93DFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8LL))(a14);
  }
  sub_1011C52D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A93E40(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  __int128 v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  unint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)(a2 + 16) = (unint64_t)sqlite3_column_double(v8, 2);
  __int128 v9 = (sqlite3_stmt *)sub_100019240(*a1);
  float v10 = sqlite3_column_double(v9, 3);
  *(float *)(a2 + 24) = v10;
  __int128 v11 = (sqlite3_stmt *)sub_100019240(*a1);
  float v12 = sqlite3_column_double(v11, 4);
  *(float *)(a2 + 28) = v12;
  unint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
  float v14 = sqlite3_column_double(v13, 5);
  *(float *)(a2 + 32) = v14;
  unint64_t v15 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 40) = sqlite3_column_int(v15, 6);
  unint64_t v16 = (sqlite3_stmt *)sub_100019240(*a1);
  float v17 = sqlite3_column_double(v16, 7);
  *(float *)(a2 + 36) = v17;
  double v18 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 41) = sqlite3_column_int(v18, 8);
  __int128 v19 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 42) = sqlite3_column_int(v19, 9);
  __int128 v20 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 43) = sqlite3_column_int(v20, 10);
  __int128 v21 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 44) = sqlite3_column_int(v21, 11);
  int v22 = (sqlite3_stmt *)sub_100019240(*a1);
  float v23 = sqlite3_column_double(v22, 12);
  *(float *)(a2 + 48) = v23;
  __int128 v24 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 45) = sqlite3_column_int(v24, 13);
  __int128 v25 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 46) = sqlite3_column_int(v25, 14);
  __int128 v26 = (sqlite3_stmt *)sub_100019240(*a1);
  float v27 = sqlite3_column_double(v26, 15);
  *(float *)(a2 + 52) = v27;
  __int128 v28 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 56) = sqlite3_column_int(v28, 16) != 0;
  uint64_t v29 = (sqlite3_stmt *)sub_100019240(*a1);
  float v30 = sqlite3_column_double(v29, 17);
  *(float *)(a2 + 60) = v30;
  __int128 v31 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_BYTE *)(a2 + 64) = sqlite3_column_int(v31, 18) != 0;
  __int128 v32 = (sqlite3_stmt *)sub_100019240(*a1);
  float v33 = sqlite3_column_double(v32, 19);
  *(float *)(a2 + 68) = v33;
  uint64_t v34 = (sqlite3_stmt *)sub_100019240(*a1);
  float v35 = sqlite3_column_double(v34, 20);
  *(float *)(a2 + 72) = v35;
  double v36 = (sqlite3_stmt *)sub_100019240(*a1);
  float v37 = sqlite3_column_double(v36, 21);
  *(float *)(a2 + 76) = v37;
  uint64_t v38 = (sqlite3_stmt *)sub_100019240(*a1);
  float v39 = sqlite3_column_double(v38, 22);
  *(float *)(a2 + 80) = v39;
  uint64_t v40 = (sqlite3_stmt *)sub_100019240(*a1);
  float v41 = sqlite3_column_double(v40, 23);
  *(float *)(a2 + 84) = v41;
  double v42 = (sqlite3_stmt *)sub_100019240(*a1);
  double v43 = sqlite3_column_double(v42, 24);
  uint64_t result = 0LL;
  *(float *)&double v43 = v43;
  *(_DWORD *)(a2 + 88) = LODWORD(v43);
  return result;
}

uint64_t sub_100A940CC(uint64_t a1)
{
  if (!sub_100D8A930(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100B14CF8((uint64_t *)(a1 + 472), &v8);
  double v3 = (sqlite3_stmt *)sub_100019240(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_100019240(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }

  uint64_t v6 = v8;
  uint64_t v8 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100A9415C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A94184(uint64_t a1)
{
  return sub_100A940CC(a1 - 72);
}

uint64_t sub_100A9418C(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v9 = a1 + 112;
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v10 = a1 + 72;
  v35[1] = a1 + 112;
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 112);
  __int16 v36 = 256;
  if (sub_100D8A930(v10))
  {
    a2[1] = *a2;
    sub_100B14CF8((uint64_t *)(a1 + 488), v35);
    *(_DWORD *)buf = 0;
    memset(&buf[8], 0, 39);
    *(void *)&__int128 v38 = 0x3FD9999A00000000LL;
    BYTE8(v38) = 0;
    HIDWORD(v38) = 1116213084;
    v39[0] = 0;
    memset(&v39[4], 0, 24);
    if (a4 >= a3)
    {
      __int128 v11 = (sqlite3_stmt *)sub_100019240(v35[0]);
      if (sub_1003B7480(v11, 1, a3))
      {
        float v12 = (sqlite3_stmt *)sub_100019240(v35[0]);
        if (sub_1003B7480(v12, 2, a4))
        {
          while (!sub_100A93E40(v35, (uint64_t)buf))
          {
            unint64_t v13 = a2[1];
            unint64_t v14 = (unint64_t)a2[2];
            if ((unint64_t)v13 >= v14)
            {
              unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 5);
              unint64_t v17 = v16 + 1;
              if (v16 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_100007008();
              }
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a2) >> 5);
              if (2 * v18 > v17) {
                unint64_t v17 = 2 * v18;
              }
              if (v18 >= 0x155555555555555LL) {
                unint64_t v19 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19) {
                __int128 v20 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v19);
              }
              else {
                __int128 v20 = 0LL;
              }
              __int128 v21 = &v20[96 * v16];
              *(_OWORD *)__int128 v21 = *(_OWORD *)buf;
              *((_OWORD *)v21 + 1) = *(_OWORD *)&buf[16];
              *((_OWORD *)v21 + 5) = *(_OWORD *)&v39[16];
              *((_OWORD *)v21 + 4) = *(_OWORD *)v39;
              *((_OWORD *)v21 + 3) = v38;
              *((_OWORD *)v21 + 2) = *(_OWORD *)&buf[32];
              float v23 = *a2;
              int v22 = a2[1];
              __int128 v24 = v21;
              if (v22 != *a2)
              {
                do
                {
                  __int128 v25 = *((_OWORD *)v22 - 5);
                  *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
                  *((_OWORD *)v24 - 5) = v25;
                  __int128 v26 = *((_OWORD *)v22 - 4);
                  __int128 v27 = *((_OWORD *)v22 - 3);
                  __int128 v28 = *((_OWORD *)v22 - 2);
                  *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 - 20);
                  *((_OWORD *)v24 - 3) = v27;
                  *((_OWORD *)v24 - 2) = v28;
                  *((_OWORD *)v24 - 4) = v26;
                  v24 -= 96;
                  v22 -= 96;
                }

                while (v22 != v23);
                int v22 = *a2;
              }

              unint64_t v15 = v21 + 96;
              *a2 = v24;
              a2[1] = v21 + 96;
              a2[2] = &v20[96 * v19];
              if (v22) {
                operator delete(v22);
              }
            }

            else
            {
              *((_OWORD *)v13 + 2) = *(_OWORD *)&buf[32];
              *((_OWORD *)v13 + 3) = v38;
              *((_OWORD *)v13 + 4) = *(_OWORD *)v39;
              *((_OWORD *)v13 + 5) = *(_OWORD *)&v39[16];
              *(_OWORD *)unint64_t v13 = *(_OWORD *)buf;
              *((_OWORD *)v13 + 1) = *(_OWORD *)&buf[16];
              unint64_t v15 = v13 + 96;
            }

            a2[1] = v15;
          }
        }
      }
    }

    uint64_t v31 = v35[0];
    v35[0] = 0LL;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    uint64_t v30 = 100LL;
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10186C2E8);
    }
    uint64_t v29 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "GaitMetricsHistory not accessible", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10186C2E8);
      }
      LOWORD(v35[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "GaitMetricsHistory not accessible",  v35,  2);
      uint64_t v34 = (char *)v33;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLMobility::GaitMetricsRecorderDb::queryGaitMetricsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, s td::vector<GaitMetrics> &)",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }

    uint64_t v30 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  return v30;
}

void sub_100A945A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100A945F4(uint64_t a1, char **a2, double a3, double a4)
{
  return sub_100A9418C(a1 - 400, a2, a3, a4);
}

uint64_t sub_100A945FC(void *a1, uint64_t a2)
{
  return sub_1001B3964(a1, a2, 0LL);
}

uint64_t sub_100A94604(uint64_t a1, uint64_t a2)
{
  return sub_1001B3964((void *)(a1 - 400), a2, 0LL);
}

uint64_t sub_100A94610(void *a1, _OWORD *a2)
{
  int v5 = a1 + 14;
  uint64_t v4 = a1[14];
  uint64_t v6 = (uint64_t)(a1 + 9);
  __int128 v25 = a1 + 14;
  (*(void (**)(void *))(v4 + 16))(a1 + 14);
  __int16 v26 = 256;
  if (sub_100D8A930(v6))
  {
    *(_DWORD *)int v22 = 0;
    memset(&v22[8], 0, 39);
    *(void *)&__int128 v23 = 0x3FD9999A00000000LL;
    BYTE8(v23) = 0;
    HIDWORD(v23) = 1116213084;
    LOBYTE(v24[0]) = 0;
    memset((char *)v24 + 4, 0, 24);
    int v7 = (*(uint64_t (**)(void *, _BYTE *))(*a1 + 104LL))(a1, v22);
    switch(v7)
    {
      case 0:
        __int128 v16 = v23;
        a2[2] = *(_OWORD *)&v22[32];
        a2[3] = v16;
        a2[4] = v24[0];
        *(_OWORD *)((char *)a2 + 76) = *(_OWORD *)((char *)v24 + 12);
        __int128 v17 = *(_OWORD *)&v22[16];
        uint64_t v12 = 1LL;
        *a2 = *(_OWORD *)v22;
        a2[1] = v17;
        goto LABEL_19;
      case 1:
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186C2E8);
        }
        unint64_t v14 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[GaitMetricsHistory] Most recent gait metrics: No recent records in database",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_18;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186C2E8);
        }
        v21[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "[GaitMetricsHistory] Most recent gait metrics: No recent records in database",  v21,  2);
        uint64_t v10 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)",  "%s\n",  v15);
        break;
      case 2:
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186C2E8);
        }
        uint64_t v8 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[GaitMetricsHistory] Most recent gait metrics: Query error",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_18;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186C2E8);
        }
        v21[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "[GaitMetricsHistory] Most recent gait metrics: Query error",  v21,  2);
        uint64_t v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)",  "%s\n",  v9);
        break;
      default:
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186C2E8);
        }
        unint64_t v18 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[GaitMetricsHistory] Most recent gait metrics: unexpected return type",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_18;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186C2E8);
        }
        v21[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "[GaitMetricsHistory] Most recent gait metrics: unexpected return type",  v21,  2);
        uint64_t v10 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)",  "%s\n",  v19);
        break;
    }
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10186C2E8);
    }
    __int128 v11 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[GaitMetricsHistory] Database inaccessible, unable to query",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10186C2E8);
    }
    *(_WORD *)int v22 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "[GaitMetricsHistory] Database inaccessible, unable to query",  v22,  2);
    uint64_t v10 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)",  "%s\n",  v20);
  }

  if (v10 != buf) {
    free(v10);
  }
LABEL_18:
  uint64_t v12 = 0LL;
LABEL_19:
  (*(void (**)(void *))(*v5 + 24LL))(v5);
  return v12;
}

void sub_100A94BD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

uint64_t sub_100A94C0C(uint64_t a1, _OWORD *a2)
{
  return sub_100A94610((void *)(a1 - 400), a2);
}

uint64_t sub_100A94C14(uint64_t *a1)
{
  uint64_t result = sub_1003C1048(a1[10]);
  if ((_DWORD)result)
  {
    sub_100A94D24((uint64_t)a1);
    sub_1003B59A0( a1[10],  "GaitMetricsHistory",  (const char **)&off_10186C308,  (const std::string::value_type **)&off_10198F398,  0);
    a1[51] = sub_1003BF158(a1[10], "DELETE FROM GaitMetricsHistory WHERE startTime > ?");
    a1[52] = v3;
    a1[53] = sub_1003BF158(a1[10], "DELETE FROM GaitMetricsHistory");
    a1[54] = v4;
    a1[55] = sub_1003BF158(a1[10], "DELETE FROM GaitMetricsHistory WHERE startTime < ?");
    a1[56] = v5;
    a1[57] = sub_1003BF158(a1[10], "SELECT * from GaitMetricsHistory ORDER BY startTime ASC");
    a1[58] = v6;
    a1[59] = sub_1003BF158(a1[10], "SELECT COUNT(*) FROM GaitMetricsHistory");
    a1[60] = v7;
    a1[61] = sub_1003BF158( a1[10],  "SELECT * FROM GaitMetricsHistory WHERE startTime BETWEEN ? and ? ORDER BY startTime ASC");
    a1[62] = v8;
    a1[63] = sub_1003BF158(a1[10], "SELECT * FROM GaitMetricsHistory ORDER BY id DESC LIMIT 1");
    a1[64] = v9;
    a1[65] = sub_1003BF158( a1[10],  "INSERT INTO GaitMetricsHistory (startTime, timestamp, walkingSpeed, doubleSupportPercentage, stepLength, deviceSide, asymmetryProbability, segmentsRejectedByIsSwingStanceCycle, segmentsRejectedByIsNotRunning, s egmentsRejectedByIsFeasibleWalkingSpeed, segmentsRejectedByIsPendular, cycleTime, segmentsRejectedByIsSuf ficientVerticalTwist, segmentsRejectedByIsCadenceConcordant, userHeight, isHeightSet, userWeight, isWeigh tSet, stepIndexOfHarmonicityAP, stepIndexOfHarmonicityML, stepIndexOfHarmonicityVT, swingIndexOfHarmonici tyAP, swingIndexOfHarmonicityML, swingIndexOfHarmonicityVT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    a1[66] = v10;
    uint64_t result = sub_1003BF158(a1[10], "UPDATE GaitMetricsHistory SET startTime = startTime + ?");
    a1[67] = result;
    a1[68] = v11;
  }

  return result;
}

uint64_t sub_100A94D24(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "GaitMetricsHistory");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    uint64_t v8 = "segmentsRejectedByIsSwingStanceCycle";
    do
    {
      __int128 v38 = v8;
      int v39 = 5;
      __int16 v40 = 0;
      char v41 = 0;
      char v42 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "GaitMetricsHistory", v8, (uint64_t)&v38) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v34);
        uint64_t v9 = sub_10000CF44(&v35, (uint64_t)"ALTER TABLE GaitMetricsHistory ADD COLUMN ", 42LL);
        size_t v10 = strlen(v8);
        uint64_t v11 = sub_10000CF44(v9, (uint64_t)v8, v10);
        uint64_t v12 = sub_10000CF44(v11, (uint64_t)" ", 1LL);
        unint64_t v13 = (const char *)sub_1003BCC40((int)(&off_10186C308)[v3 + 49]);
        size_t v14 = strlen(v13);
        unint64_t v15 = sub_10000CF44(v12, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v31, &v36);
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v17 = &v31;
        }
        else {
          __int128 v17 = (std::stringbuf::string_type *)v31.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v29);
        uint64_t v18 = v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        __int128 v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v31);
        __int128 v21 = sub_10000CF44(&v31.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE GaitMetricsHistory SET ", 30LL);
        size_t v22 = strlen(v8);
        __int128 v23 = sub_10000CF44(v21, (uint64_t)v8, v22);
        sub_10000CF44(v23, (uint64_t)" = 0;", 5LL);
        uint64_t v24 = *(void *)(a1 + 80);
        std::stringbuf::str(&v29, &v32);
        if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v25 = &v29;
        }
        else {
          __int128 v25 = (std::stringbuf::string_type *)v29.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v24, (char *)v25, &v30);
        uint64_t v26 = v30;
        uint64_t v30 = 0LL;
        uint64_t v27 = *(void *)(a1 + 80);
        __int128 v28 = (sqlite3_stmt *)sub_100019240(v26);
        sub_1003BB2BC(v27, v28);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
        }
        v31.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + *(void *)(v5 - sub_100008390(v2, *(void **)(v1 + 24)) = v7;
        v31.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v32);
        std::ios::~ios(&v33);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v34[0] = v5;
        *(void *)((char *)v34 + *(void *)(v5 - sub_100008390(v2, *(void **)(v1 + 24)) = v7;
        std::string::size_type v35 = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        int v4 = 1;
      }

      uint64_t v8 = (&off_10186C308)[v3 + 54];
      v3 += 6LL;
    }

    while (v3 != 102);
    uint64_t result = sub_100A95BA0( a1,  "GaitMetricsHistory",  (const char **)&off_10186C308,  (const std::string::value_type **)&off_10198F398);
  }

  return result;
}

void sub_100A950C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100A95160(uint64_t a1)
{
  uint64_t result = sub_100D8A930(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 424), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    int v4 = (sqlite3_stmt *)sub_100019240(v7);
    sub_1003BB2BC(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_1003C1EC0(v5, v6);
    uint64_t result = v7;
    uint64_t v7 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100A951E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A95208(uint64_t a1)
{
  return sub_100A95160(a1 - 72);
}

uint64_t sub_100A95210(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A930((uint64_t)(a1 + 9));
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    sub_100B14CF8(a1 + 51, &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v10);
    if (sub_1003B7480(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = a1[10];
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v10);
      sub_1003BB2BC(v6, v7);
    }

    uint64_t v8 = a1[10];
    else {
      uint64_t v9 = *(void *)(v8 + 88);
    }
    sub_1003C1EC0(v8, v9);
    uint64_t result = v10;
    uint64_t v10 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100A952C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A952EC(uint64_t a1, double a2)
{
  uint64_t result = sub_100D8A930(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100B14CF8((uint64_t *)(a1 + 536), &v8);
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v8);
    if (sub_1003B7480(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v8);
      sub_1003BB2BC(v6, v7);
    }

    uint64_t result = v8;
    uint64_t v8 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100A9537C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A953A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A930(a1 + 72);
  if ((_DWORD)result)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10186C2E8);
    }
    uint64_t v5 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      uint64_t v43 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "[GaitMetricsRecorderDb] Inserting record %{public}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10186C2E8);
      }
      uint64_t v34 = *(void *)(a2 + 8);
      *(_DWORD *)char v41 = 134349056;
      *(void *)&v41[4] = v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "[GaitMetricsRecorderDb] Inserting record %{public}f",  v41,  12);
      std::stringbuf v36 = (uint8_t *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMobility::GaitMetricsRecorderDb::insertRecordUL(const GaitMetrics &, BOOL)",  "%s\n",  v35);
      if (v36 != buf) {
        free(v36);
      }
    }

    sub_100B14CF8((uint64_t *)(a1 + 520), v41);
    if (*(void *)v41)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
      if (sub_1003B7480(v7, 1, *(double *)(a2 + 8)))
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
        if (sub_1003C2D24(v8, 2, *(void *)(a2 + 16)))
        {
          uint64_t v9 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
          if (sub_1003B7480(v9, 3, *(float *)(a2 + 24)))
          {
            uint64_t v10 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
            if (sub_1003B7480(v10, 4, *(float *)(a2 + 28)))
            {
              uint64_t v11 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
              if (sub_1003B7480(v11, 5, *(float *)(a2 + 32)))
              {
                uint64_t v12 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                if (sub_1003C28BC(v12, 6, *(unsigned __int8 *)(a2 + 40)))
                {
                  unint64_t v13 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                  if (sub_1003B7480(v13, 7, *(float *)(a2 + 36)))
                  {
                    size_t v14 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                    if (sub_1003C28BC(v14, 8, *(unsigned __int8 *)(a2 + 41)))
                    {
                      unint64_t v15 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                      if (sub_1003C28BC(v15, 9, *(unsigned __int8 *)(a2 + 42)))
                      {
                        uint64_t v16 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                        if (sub_1003C28BC(v16, 10, *(unsigned __int8 *)(a2 + 43)))
                        {
                          __int128 v17 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                          if (sub_1003C28BC(v17, 11, *(unsigned __int8 *)(a2 + 44)))
                          {
                            uint64_t v18 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                            if (sub_1003B7480(v18, 12, *(float *)(a2 + 48)))
                            {
                              uint64_t v19 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                              if (sub_1003C28BC(v19, 13, *(unsigned __int8 *)(a2 + 45)))
                              {
                                __int128 v20 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                if (sub_1003C28BC(v20, 14, *(unsigned __int8 *)(a2 + 46)))
                                {
                                  __int128 v21 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                  if (sub_1003B7480(v21, 15, *(float *)(a2 + 52)))
                                  {
                                    size_t v22 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                    if (sub_1003C28BC(v22, 16, *(unsigned __int8 *)(a2 + 56)))
                                    {
                                      __int128 v23 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                      if (sub_1003B7480(v23, 17, *(float *)(a2 + 60)))
                                      {
                                        uint64_t v24 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                        if (sub_1003C28BC(v24, 18, *(unsigned __int8 *)(a2 + 64)))
                                        {
                                          __int128 v25 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                          if (sub_1003B7480(v25, 19, *(float *)(a2 + 68)))
                                          {
                                            uint64_t v26 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                            if (sub_1003B7480(v26, 20, *(float *)(a2 + 72)))
                                            {
                                              uint64_t v27 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                              if (sub_1003B7480(v27, 21, *(float *)(a2 + 76)))
                                              {
                                                __int128 v28 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                                if (sub_1003B7480(v28, 22, *(float *)(a2 + 80)))
                                                {
                                                  std::stringbuf::string_type v29 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                                  if (sub_1003B7480(v29, 23, *(float *)(a2 + 84)))
                                                  {
                                                    uint64_t v30 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                                    if (sub_1003B7480(v30, 24, *(float *)(a2 + 88)))
                                                    {
                                                      uint64_t v31 = *(void *)(a1 + 80);
                                                      std::stringbuf v32 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v41);
                                                      sub_1003BB2BC(v31, v32);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    else
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10186C2E8);
      }
      uint64_t v33 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "GaitMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186C2E8);
        }
        v40[0] = 0;
        LODWORD(v39) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  17LL,  "GaitMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement",  v40,  v39);
        __int128 v38 = (uint8_t *)v37;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLMobility::GaitMetricsRecorderDb::insertRecordUL(const GaitMetrics &, BOOL)",  "%s\n",  v37);
        if (v38 != buf) {
          free(v38);
        }
      }
    }

    uint64_t result = *(void *)v41;
    *(void *)char v41 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_100A95948( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A95978()
{
  return 0LL;
}

uint64_t sub_100A95980(uint64_t a1, uint64_t a2)
{
  if (!sub_100D8A930(a1 + 72)) {
    return 2LL;
  }
  sub_100B14CF8((uint64_t *)(a1 + 504), &v12);
  uint64_t v4 = v12;
  if (v12)
  {
    uint64_t v5 = sub_100A93E40(&v12, a2);
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10186C2E8);
    }
    uint64_t v6 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "GaitMetricsRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10186C2E8);
      }
      __int16 v11 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  17LL,  "GaitMetricsRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement",  &v11,  2);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLActivityDB::ActivityCode CLMobility::GaitMetricsRecorderDb::getMostRecentRecordUL(GaitMetrics &) const",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    uint64_t v5 = 2LL;
  }

  uint64_t v7 = v12;
  uint64_t v12 = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (!v4) {
    return 2LL;
  }
  return v5;
}

void sub_100A95B70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A95BA0(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186C8E0);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      unsigned int v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstrain ts(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::GaitMetrics, DataProtecti onPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int32 v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    __int16 v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__n128 v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      size_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      __int128 v21 = &__p;
    }
    else {
      __int128 v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      __int128 v28 = v143;
    }
    else {
      __int128 v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v139;
    }
    else {
      uint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v41 = &__p;
    }
    else {
      char v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    char v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    double v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v47 = &__p;
      }
      else {
        double v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      uint64_t v48 = v143;
    }
    else {
      uint64_t v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    int v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    double v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v54 = buf;
    }
    else {
      uint64_t v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    uint64_t v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v60 = buf;
    }
    else {
      double v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    uint64_t v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v69 = &__p;
    }
    else {
      __int128 v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    __int128 v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    __int128 v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v75 = &__p;
      }
      else {
        __int128 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    unsigned int v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      __int128 v79 = &__p;
    }
    else {
      __int128 v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    __int128 v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    double v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v85 = &__p;
      }
      else {
        double v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      double v86 = v143;
    }
    else {
      double v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    double v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v95 = &__p;
    }
    else {
      double v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    double v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v103 = &__p;
        }
        else {
          int v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        __int128 v104 = v141;
      }
      else {
        __int128 v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      __int128 v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      double v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      double v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v114 = buf;
      }
      else {
        double v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      unint64_t v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        float v121 = &__p;
      }
      else {
        float v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      float v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
      }
      int v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v13memset(&v6[1], 0, 7) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        uint64_t v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstra ints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::GaitMetrics, DataProt ectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
      }
      int v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v13memset(&v6[1], 0, 7) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        int v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstra ints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::GaitMetrics, DataProt ectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100A96D38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100A97058(void *a1, void **a2, double a3, double a4)
{
  __int128 v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v51);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
    if (HIBYTE(v52)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10125B08C(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v51[1];
  operator delete(v51[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v51);
  __int16 v11 = sub_10000CF44(&v52, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if (__p[23] >= 0) {
    __int128 v12 = __p;
  }
  else {
    __int128 v12 = *(_BYTE **)__p;
  }
  if (__p[23] >= 0) {
    uint64_t v13 = __p[23];
  }
  else {
    uint64_t v13 = *(void *)&__p[8];
  }
  size_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v53;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v53);
  if (__p[23] >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = *(char **)__p;
  }
  sub_1003C0D54(v15, v16, &v49);
  uint64_t v5 = v49;
  uint64_t v49 = 0LL;
  uint64_t v50 = v5;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      *(_DWORD *)std::string __p = 0;
      memset(&__p[8], 0, 39);
      *(void *)&__int128 v47 = 0x3FD9999A00000000LL;
      BYTE8(v4memset(&v6[1], 0, 7) = 0;
      HIDWORD(v4memset(&v6[1], 0, 7) = 1116213084;
      v48[0] = 0;
      memset(&v48[4], 0, 24);
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v50, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        signed __int8 v20 = a2[1];
        unint64_t v21 = (unint64_t)a2[2];
        if ((unint64_t)v20 >= v21)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (_BYTE *)*a2) >> 5);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)*a2) >> 5);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x155555555555555LL) {
            unint64_t v30 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30) {
            __int128 v31 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v30);
          }
          else {
            __int128 v31 = 0LL;
          }
          std::stringbuf v32 = &v31[96 * v27];
          __int128 v33 = *(_OWORD *)&__p[16];
          *(_OWORD *)std::stringbuf v32 = *(_OWORD *)__p;
          *((_OWORD *)v32 + 1) = v33;
          __int128 v34 = *(_OWORD *)&__p[32];
          __int128 v35 = v47;
          __int128 v36 = *(_OWORD *)&v48[16];
          *((_OWORD *)v32 + 4) = *(_OWORD *)v48;
          *((_OWORD *)v32 + 5) = v36;
          *((_OWORD *)v32 + 2) = v34;
          *((_OWORD *)v32 + 3) = v35;
          __int128 v38 = (char *)*a2;
          __int128 v37 = (char *)a2[1];
          std::string::size_type v39 = v32;
          if (v37 != *a2)
          {
            do
            {
              __int128 v40 = *((_OWORD *)v37 - 5);
              *(v39 - 6) = *((_OWORD *)v37 - 6);
              *(v39 - 5) = v40;
              __int128 v41 = *((_OWORD *)v37 - 4);
              __int128 v42 = *((_OWORD *)v37 - 3);
              __int128 v43 = *((_OWORD *)v37 - 2);
              *(_OWORD *)((char *)v39 - 20) = *(_OWORD *)(v37 - 20);
              *(v39 - 3) = v42;
              *(v39 - 2) = v43;
              *(v39 - 4) = v41;
              v39 -= 6;
              v37 -= 96;
            }

            while (v37 != v38);
            __int128 v37 = (char *)*a2;
          }

          uint64_t v26 = v32 + 96;
          *a2 = v39;
          a2[1] = v32 + 96;
          a2[2] = &v31[96 * v30];
          if (v37) {
            operator delete(v37);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)&__p[16];
          *signed __int8 v20 = *(_OWORD *)__p;
          v20[1] = v22;
          __int128 v23 = *(_OWORD *)&__p[32];
          __int128 v24 = v47;
          __int128 v25 = *(_OWORD *)&v48[16];
          v20[4] = *(_OWORD *)v48;
          v20[5] = v25;
          v20[2] = v23;
          v20[3] = v24;
          uint64_t v26 = v20 + 6;
        }

        a2[1] = v26;
      }

      uint64_t v5 = v50;
      goto LABEL_43;
    }
  }

void sub_100A9740C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_100A97474(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186C8E0);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      double v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)uint64_t v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatab aseAccessible() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186C8E0);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      double v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    uint64_t v16 = (void *)(v14 + 8 * (v13 / 0x2A));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 96 * (v13 % 0x2A);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x2A)) + 96 * (v22 % 0x2A);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186C900);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186C900);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatab aseAccessible() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 96LL;
      if (v17 - *v16 == 4032)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186C8E0);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      double v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
      }
    }

    signed __int8 v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v21 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      double v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  unint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      unint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 21LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 42LL;
  }

  *(void *)(a1 + memset(&v8[8], 0, 208) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100A97BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_100A97BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a3 + 32);
  __int128 v5 = *(_OWORD *)(a3 + 48);
  __int128 v6 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id *sub_100A97C08(uint64_t a1, uint64_t a2, char a3)
{
  v45[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v45[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v45);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v35 = 0;
  __int128 v36 = 0u;
  memset(v37, 0, sizeof(v37));
  uint64_t v38 = 0x3FD9999A00000000LL;
  char v39 = 0;
  int v40 = 1116213084;
  char v41 = 0;
  uint64_t v42 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v43 = 0LL;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104LL))(a1, &v35);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        }
        LOWORD(v46) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v46,  2);
        uint64_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)(a2 + 8);
    double v8 = *(double *)&v36;
    double v9 = v7 - *(double *)&v36;
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        double v51 = *(double *)&v36;
        __int16 v52 = 2050;
        uint64_t v53 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        }
        uint64_t v26 = *(void *)(a2 + 8);
        int v46 = 134349312;
        double v47 = *(double *)&v36;
        __int16 v48 = 2050;
        uint64_t v49 = v26;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v46,  22);
        unint64_t v28 = (uint8_t *)v27;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v27);
        if (v28 != buf) {
          free(v28);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)(a2 + 8);
      double v8 = *(double *)&v36;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          double v51 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186C8E0);
          }
          double v29 = *(double *)(a2 + 8);
          int v46 = 134217984;
          double v47 = v29;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v46));
          uint64_t v31 = (uint8_t *)v30;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::saniti zeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::Class BDataProtectionPolicy]",  "%s\n",  v30);
          if (v31 != buf) {
            free(v31);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v34 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        double v18 = v34;
      }

      double v19 = v17 - v18;
      signed __int8 v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v51 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186C8E0);
        }
        int v46 = 134217984;
        double v47 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v46));
        __int128 v33 = (uint8_t *)v32;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitize AndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDat aProtectionPolicy]",  "%s\n",  v32);
        if (v33 != buf) {
          free(v33);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, &v35, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100A983A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_100A983D4(uint64_t a1)
{
  return sub_100A97474(a1 - 72);
}

void sub_100A983DC(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100A98408(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v45);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (HIBYTE(v46)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10125B1F8(v4);
LABEL_44:
    sub_100007008();
  }

  char v39 = v45[1];
  operator delete(v45[0]);
  if (!v39) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v45);
    int v6 = sub_10000CF44(&v46, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if (__p[23] >= 0) {
      double v7 = __p;
    }
    else {
      double v7 = *(_BYTE **)__p;
    }
    if (__p[23] >= 0) {
      uint64_t v8 = __p[23];
    }
    else {
      uint64_t v8 = *(void *)&__p[8];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v47);
    if (__p[23] >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(char **)__p;
    }
    sub_1003C0D54(v10, v11, &v43);
    uint64_t v12 = v43;
    uint64_t v43 = 0LL;
    uint64_t v44 = v12;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_1003C0454(a1[10]);
    *(_DWORD *)std::string __p = 0;
    memset(&__p[8], 0, 39);
    *(void *)&__int128 v41 = 0x3FD9999A00000000LL;
    BYTE8(v41) = 0;
    HIDWORD(v41) = 1116213084;
    v42[0] = 0;
    memset(&v42[4], 0, 24);
    while (!sub_1001BA11C((uint64_t)a1, &v44, (uint64_t)__p))
    {
      double v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 5);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0x2AAAAAAAAAAAAAALL) {
          goto LABEL_44;
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a2) >> 5);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x155555555555555LL) {
          unint64_t v23 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          __int128 v24 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v23);
        }
        else {
          __int128 v24 = 0LL;
        }
        unint64_t v25 = &v24[96 * v20];
        __int128 v26 = *(_OWORD *)&__p[16];
        *(_OWORD *)unint64_t v25 = *(_OWORD *)__p;
        *((_OWORD *)v25 + 1) = v26;
        __int128 v27 = *(_OWORD *)&__p[32];
        __int128 v28 = v41;
        __int128 v29 = *(_OWORD *)&v42[16];
        *((_OWORD *)v25 + 4) = *(_OWORD *)v42;
        *((_OWORD *)v25 + 5) = v29;
        *((_OWORD *)v25 + 2) = v27;
        *((_OWORD *)v25 + 3) = v28;
        uint64_t v31 = *a2;
        unint64_t v30 = a2[1];
        uint64_t v32 = v25;
        if (v30 != *a2)
        {
          do
          {
            __int128 v33 = *((_OWORD *)v30 - 5);
            *((_OWORD *)v32 - 6) = *((_OWORD *)v30 - 6);
            *((_OWORD *)v32 - 5) = v33;
            __int128 v34 = *((_OWORD *)v30 - 4);
            __int128 v35 = *((_OWORD *)v30 - 3);
            __int128 v36 = *((_OWORD *)v30 - 2);
            *(_OWORD *)(v32 - 20) = *(_OWORD *)(v30 - 20);
            *((_OWORD *)v32 - 3) = v35;
            *((_OWORD *)v32 - 2) = v36;
            *((_OWORD *)v32 - 4) = v34;
            v32 -= 96;
            v30 -= 96;
          }

          while (v30 != v31);
          unint64_t v30 = *a2;
        }

        double v19 = v25 + 96;
        *a2 = v32;
        a2[1] = v25 + 96;
        a2[2] = &v24[96 * v23];
        if (v30) {
          operator delete(v30);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)&__p[16];
        *(_OWORD *)double v13 = *(_OWORD *)__p;
        *((_OWORD *)v13 + 1) = v15;
        __int128 v16 = *(_OWORD *)&__p[32];
        __int128 v17 = v41;
        __int128 v18 = *(_OWORD *)&v42[16];
        *((_OWORD *)v13 + 4) = *(_OWORD *)v42;
        *((_OWORD *)v13 + 5) = v18;
        *((_OWORD *)v13 + 2) = v16;
        *((_OWORD *)v13 + 3) = v17;
        double v19 = v13 + 96;
      }

      a2[1] = v19;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v37 = v44;
    uint64_t v44 = 0LL;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
    }
    *(void **)((char *)v45
    uint64_t v46 = v38;
    std::streambuf::~streambuf(&v47);
    return std::ios::~ios(&v48);
  }

  return result;
}

void sub_100A98778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  sub_1011F8850((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_100A987E0(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10125B364(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100A98A40(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10125B4D0(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100A98C78(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10125B63C(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100A98EA0(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100A98ECC(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100A98EF8()
{
  uint64_t v5 = 0x200000000LL;
  __int16 v6 = 0;
  if (SHIBYTE(v11) < 0)
  {
    sub_1010DD48C(&v7, __p[0], (unint64_t)__p[1]);
    uint64_t v9 = 0LL;
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v7 = *(_OWORD *)__p;
    uint64_t v8 = v11;
    uint64_t v9 = 0LL;
  }

  sub_1003B35F4(v4, &v5);
  memcpy(__dst, off_10186C920, sizeof(__dst));
  if (sub_1003C1048((uint64_t)v4))
  {
    sub_1003C0204((uint64_t)v4, __dst);
  }

  else
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186CB90);
    }
    unsigned __int8 v0 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "consolidated database not valid; unable to drop obsolete tables",
        (uint8_t *)__p,
        2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186CB90);
      }
      __int16 v3 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  off_101934A28,  17LL,  "consolidated database not valid; unable to drop obsolete tables",
        &v3,
        2);
      uint64_t v2 = (void **)v1;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void SqliteDatabase_Helper_dropObsoleteTablesFromConsolidatedDatabase()",  "%s\n",  v1);
      if (v2 != __p) {
        free(v2);
      }
    }
  }

  sub_1003B3930(v4);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)v7);
  }
}

void sub_100A99134( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100A99180()
{
  uint64_t v5 = 0x100000002LL;
  __int16 v6 = 0;
  if (SHIBYTE(v11) < 0)
  {
    sub_1010DD48C(&v7, __p[0], (unint64_t)__p[1]);
    uint64_t v9 = 0LL;
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v7 = *(_OWORD *)__p;
    uint64_t v8 = v11;
    uint64_t v9 = 0LL;
  }

  sub_1003B35F4(v4, &v5);
  if (sub_1003C1048((uint64_t)v4))
  {
    sub_1003C0204((uint64_t)v4, __dst);
  }

  else
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186CB90);
    }
    unsigned __int8 v0 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "Class B database not valid; unable to drop obsolete tables",
        (uint8_t *)__p,
        2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186CB90);
      }
      __int16 v3 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  off_101934A28,  17LL,  "Class B database not valid; unable to drop obsolete tables",
        &v3,
        2);
      uint64_t v2 = (void **)v1;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void SqliteDatabase_Helper_dropObsoleteTablesFromClassBDatabase()",  "%s\n",  v1);
      if (v2 != __p) {
        free(v2);
      }
    }
  }

  sub_1003B3930(v4);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)v7);
  }
}

void sub_100A993BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100A99408(id a1)
{
  off_101934A28 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100A99434(void *a1, double *a2)
{
  uint64_t v4 = operator new(4uLL);
  std::stringbuf::string_type __p = v4;
  *uint64_t v4 = 5;
  __int16 v6 = v4 + 1;
  __int128 v7 = v4 + 1;
  __int16 v9 = 0;
  *(_OWORD *)uint64_t v8 = xmmword_1012E1E90;
  memset(&v8[2], 0, 135);
  __int128 v10 = xmmword_1012E1E90;
  uint64_t v11 = 0LL;
  int v12 = 0;
  uint64_t v13 = 0LL;
  v14[0] = 0LL;
  *(void *)((char *)v14 + 5) = 0LL;
  *(void *)((char *)&v14[1] + 6) = 0LL;
  char v15 = 0;
  memset(&v14[3], 0, 24);
  __int128 v16 = xmmword_1012E1E90;
  uint64_t v17 = 0LL;
  int v18 = 0;
  unint64_t v19 = 0xFFEFFFFFFFFFFFFFLL;
  int v30 = 0;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  int v25 = 0;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  memset(v29, 0, sizeof(v29));
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  unint64_t v33 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v34 = 0LL;
  int v35 = 0;
  uint64_t v41 = 0LL;
  __int16 v42 = 0;
  int v47 = 0;
  int v40 = 0;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v44 = 0u;
  __int128 v43 = 0u;
  char v45 = 0;
  memset(v46, 0, sizeof(v46));
  unint64_t v48 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  __int128 v58 = 0u;
  __int128 v57 = 0u;
  __int128 v56 = 0u;
  __int128 v55 = 0u;
  __int128 v54 = 0u;
  __int128 v53 = 0u;
  __int128 v52 = 0u;
  __int128 v51 = 0u;
  __int128 v50 = 0u;
  __int128 v49 = 0u;
  uint64_t v68 = 0LL;
  unint64_t v69 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  unint64_t v74 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v75 = 0LL;
  int v76 = 0;
  uint64_t v77 = 0LL;
  char v78 = 0;
  unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v81 = 0LL;
  uint64_t v80 = 0LL;
  uint64_t v82 = 0x80000000800000LL;
  uint64_t v84 = 0LL;
  uint64_t v83 = 0LL;
  __int128 v85 = xmmword_1012E1EA0;
  uint64_t v86 = 0x80000000800000LL;
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  uint64_t v89 = 0LL;
  unint64_t v90 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  int v97 = 0;
  unint64_t v98 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v99 = 0;
  int v100 = 0;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v102 = 7LL;
  unint64_t v103 = 0xFFEFFFFFFFFFFFFFLL;
  char v104 = 0;
  uint64_t v106 = 0LL;
  uint64_t v105 = 0LL;
  uint64_t v107 = 0LL;
  else {
    sub_100A99738(a1);
  }
  if (__p)
  {
    __int16 v6 = __p;
    operator delete(__p);
  }

void sub_100A996CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A996E8(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_1002D6744((uint64_t)a1, 1);
  }

void sub_100A99738(void *a1)
{
  uint64_t v2 = (void **)a1[12];
  uint64_t v3 = a1[13];
  a1[16] = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[13];
      uint64_t v2 = (void **)(a1[12] + 8LL);
      a1[12] = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 28LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 56LL;
  }

  a1[15] = v6;
}

uint64_t sub_100A997AC()
{
  return 0LL;
}

double sub_100A997B4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 80);
  switch(v2)
  {
    case 2:
      uint64_t v6 = (void *)(a1 + 88);
      v26[0] = &off_10186CEB0;
      v26[1] = sub_100A99AF8;
      __int128 v27 = v26;
      v7.n128_f64[0] = sub_1002D67A0((void *)(a1 + 88), 6uLL, 0xAuLL, (uint64_t)v26, (uint64_t)v23);
      uint64_t v8 = v27;
      if (v27 == v26)
      {
        uint64_t v9 = 4LL;
        uint64_t v8 = v26;
      }

      else
      {
        if (!v27) {
          goto LABEL_22;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_22:
      v24[0] = &off_10186CEB0;
      v24[1] = sub_100A99B18;
      int v25 = v24;
      v17.n128_f64[0] = sub_1002D67A0(v6, 3uLL, 5uLL, (uint64_t)v24, (uint64_t)v22);
      int v18 = v25;
      if (v25 == v24)
      {
        uint64_t v19 = 4LL;
        int v18 = v24;
      }

      else
      {
        if (!v25)
        {
LABEL_32:
          if (v22[0] >= v23[0] || v23[0] == -1.0) {
            return v23[0];
          }
          else {
            return v22[0];
          }
        }

        uint64_t v19 = 5LL;
      }

      (*(void (**)(__n128))(*v18 + 8 * v19))(v17);
      goto LABEL_32;
    case 1:
      __int128 v10 = (void *)(a1 + 88);
      v30[0] = &off_10186CEB0;
      v30[1] = sub_100A99AF8;
      uint64_t v31 = v30;
      v11.n128_f64[0] = sub_1002D67A0((void *)(a1 + 88), 0x19uLL, 0x28uLL, (uint64_t)v30, (uint64_t)v23);
      int v12 = v31;
      if (v31 == v30)
      {
        uint64_t v13 = 4LL;
        int v12 = v30;
      }

      else
      {
        if (!v31) {
          goto LABEL_15;
        }
        uint64_t v13 = 5LL;
      }

      (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_15:
      v28[0] = &off_10186CEB0;
      v28[1] = sub_100A99B18;
      __int128 v29 = v28;
      v14.n128_f64[0] = sub_1002D67A0(v10, 0xCuLL, 0x10uLL, (uint64_t)v28, (uint64_t)v22);
      char v15 = v29;
      if (v29 == v28)
      {
        uint64_t v16 = 4LL;
        char v15 = v28;
      }

      else
      {
        if (!v29) {
          goto LABEL_27;
        }
        uint64_t v16 = 5LL;
      }

      (*(void (**)(__n128))(*v15 + 8 * v16))(v14);
LABEL_27:
      if (v22[0] == -1.0) {
        return v23[0];
      }
      else {
        return v22[0];
      }
    case 0:
      v32[0] = &off_10186CEB0;
      v32[1] = sub_100A99AF8;
      unint64_t v33 = v32;
      v3.n128_f64[0] = sub_1002D67A0((void *)(a1 + 88), 0x1EuLL, 0x24uLL, (uint64_t)v32, (uint64_t)v23);
      double v1 = v23[0];
      unint64_t v4 = v33;
      if (v33 == v32)
      {
        uint64_t v5 = 4LL;
        unint64_t v4 = v32;
        goto LABEL_19;
      }

      if (v33)
      {
        uint64_t v5 = 5LL;
LABEL_19:
        (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
      }

      break;
  }

  return v1;
}

void sub_100A99A50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, char *a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  unint64_t v33 = a23;
  if (a23 == v31)
  {
    uint64_t v34 = 4LL;
    unint64_t v33 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_6;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*(void *)v33 + 8 * v34))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A99AF8(uint64_t a1)
{
  return *(float *)(a1 + 68) < 17.0 && (unint64_t)(*(void *)(a1 + 16) - 1LL) < 2;
}

BOOL sub_100A99B18(uint64_t a1)
{
  return *(float *)(a1 + 68) < 17.0 && *(void *)(a1 + 16) == 2LL;
}

double sub_100A99B34(void *a1)
{
  int v2 = a1 + 11;
  v16[0] = &off_10186CEB0;
  v16[1] = sub_100A99D08;
  __n128 v17 = v16;
  v3.n128_f64[0] = sub_1002D67A0(a1 + 11, 3uLL, 5uLL, (uint64_t)v16, (uint64_t)v13);
  unint64_t v4 = v17;
  if (v17 == v16)
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  uint64_t v6 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v3);
  sub_100A99D28(v6, (uint64_t)"notIsStraightPedEpochRun", 0, (uint64_t)v13);
  v14[0] = &off_10186CEB0;
  v14[1] = sub_100A99F54;
  char v15 = v14;
  v7.n128_f64[0] = sub_1002D67A0(v2, 6uLL, 0xAuLL, (uint64_t)v14, (uint64_t)v12);
  uint64_t v8 = v15;
  if (v15 == v14)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v14;
  }

  else
  {
    if (!v15) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_11:
  uint64_t v10 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v7);
  sub_100A99D28(v10, (uint64_t)"notIsPedEpochRun", 0, (uint64_t)v12);
  double result = v13[0];
  if (v13[0] == -1.0) {
    return v12[0];
  }
  return result;
}

void sub_100A99CAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, char *a23)
{
  int v25 = a23;
  if (a23 == v23)
  {
    uint64_t v26 = 4LL;
    int v25 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_6;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*(void *)v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A99D08(uint64_t a1)
{
  return *(float *)(a1 + 68) >= 17.0 || (unint64_t)(*(void *)(a1 + 16) - 3LL) < 0xFFFFFFFFFFFFFFFELL;
}

void sub_100A99D28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186CE80);
  }
  uint64_t v8 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a4 + 16);
    uint64_t v10 = *(void *)(a4 + 24);
    int v11 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)buf = 136316418;
    uint64_t v30 = a2;
    __int16 v31 = 2048;
    uint64_t v32 = a1;
    __int16 v33 = 1024;
    int v34 = a3;
    __int16 v35 = 2048;
    uint64_t v36 = v9;
    __int16 v37 = 2048;
    uint64_t v38 = v10;
    __int16 v39 = 1024;
    int v40 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Model,%s,type,%lu,active,%d,M,%lu,N,%lu,cnt,%d",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186CE80);
    }
    uint64_t v12 = *(void *)(a4 + 16);
    uint64_t v13 = *(void *)(a4 + 24);
    int v14 = *(_DWORD *)(a4 + 8);
    int v17 = 136316418;
    uint64_t v18 = a2;
    __int16 v19 = 2048;
    uint64_t v20 = a1;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 2048;
    uint64_t v24 = v12;
    __int16 v25 = 2048;
    uint64_t v26 = v13;
    __int16 v27 = 1024;
    int v28 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Model,%s,type,%lu,active,%d,M,%lu,N,%lu,cnt,%d",  (const char *)&v17,  54);
    uint64_t v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void logMofNResult(CMWorkoutType, const char *, BOOL, const HistoryHelper::MofNResult &)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

BOOL sub_100A99F54(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 3LL) < 0xFFFFFFFFFFFFFFFELL;
}

void sub_100A99F68(void *a1, double *a2)
{
  *(_OWORD *)uint64_t v18 = xmmword_1012E1E90;
  __int16 v19 = 0;
  memset(&v18[2], 0, 135);
  __int128 v20 = xmmword_1012E1E90;
  uint64_t v21 = 0LL;
  int v22 = 0;
  uint64_t v23 = 0LL;
  v24[0] = 0LL;
  *(void *)((char *)v24 + 5) = 0LL;
  *(void *)((char *)&v24[1] + 6) = 0LL;
  char v25 = 0;
  memset(&v24[3], 0, 24);
  __int128 v26 = xmmword_1012E1E90;
  uint64_t v27 = 0LL;
  int v28 = 0;
  double v29 = -1.79769313e308;
  int v40 = 0;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  int v35 = 0;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  memset(v39, 0, sizeof(v39));
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  unint64_t v43 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v44 = 0LL;
  int v45 = 0;
  uint64_t v51 = 0LL;
  __int16 v52 = 0;
  int v57 = 0;
  int v50 = 0;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v54 = 0u;
  __int128 v53 = 0u;
  char v55 = 0;
  memset(v56, 0, sizeof(v56));
  unint64_t v58 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v77 = 0u;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  __int128 v74 = 0u;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  __int128 v71 = 0u;
  __int128 v70 = 0u;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  uint64_t v78 = 0LL;
  *(void *)unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v79[8], 0, 64);
  unint64_t v80 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v81 = 0LL;
  int v82 = 0;
  uint64_t v83 = 0LL;
  char v84 = 0;
  unint64_t v85 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v87 = 0LL;
  uint64_t v86 = 0LL;
  uint64_t v88 = 0x80000000800000LL;
  uint64_t v90 = 0LL;
  uint64_t v89 = 0LL;
  __int128 v91 = xmmword_1012E1EA0;
  uint64_t v92 = 0x80000000800000LL;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  uint64_t v95 = 0LL;
  unint64_t v96 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  int v103 = 0;
  unint64_t v104 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v105 = 0;
  int v106 = 0;
  unint64_t v107 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v108 = 7LL;
  unint64_t v109 = 0xFFEFFFFFFFFFFFFFLL;
  char v110 = 0;
  uint64_t v112 = 0LL;
  uint64_t v111 = 0LL;
  uint64_t v113 = 0LL;
  unint64_t v4 = operator new(4uLL);
  __p[0] = v4;
  *unint64_t v4 = 5;
  __p[1] = v4 + 1;
  *(void *)&__int128 v11 = v4 + 1;
  sub_100CDB578(a2, __p, (uint64_t)v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  uint64_t v15 = 0LL;
  BOOL v16 = 0;
  if (*(double *)v79 == -1.79769313e308)
  {
    sub_100A9A338(a1);
  }

  else
  {
    __int128 v12 = *(_OWORD *)&v79[32];
    __int128 v13 = *(_OWORD *)&v79[48];
    uint64_t v14 = *(void *)&v79[64];
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)v79;
    __int128 v11 = *(_OWORD *)&v79[16];
    uint64_t v17 = *(void *)v79;
    if ((*(unsigned int (**)(void *))(*a1 + 88LL))(a1) == 2)
    {
      uint64_t v5 = operator new(4uLL);
      __n128 v7 = v5;
      _DWORD *v5 = 2;
      uint64_t v9 = v5 + 1;
      uint64_t v8 = v5 + 1;
      sub_100CDB578(a2, &v7, (uint64_t)v18);
      if (v7)
      {
        uint64_t v8 = v7;
        operator delete(v7);
      }

      uint64_t v15 = v32;
      BOOL v6 = v29 != -1.79769313e308;
      BOOL v16 = v6;
    }

    sub_100A9A2E8(a1 + 11, (uint64_t)__p);
  }

void sub_100A9A2B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9A2E8(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100354110((uint64_t)a1, 1);
  }

void sub_100A9A338(void *a1)
{
  int v2 = (void **)a1[12];
  uint64_t v3 = a1[13];
  a1[16] = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[13];
      int v2 = (void **)(a1[12] + 8LL);
      a1[12] = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 21LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 42LL;
  }

  a1[15] = v6;
}

uint64_t sub_100A9A3AC(uint64_t a1)
{
  v11[0] = &off_10186CF50;
  v11[1] = sub_100A9A524;
  __int128 v12 = v11;
  v13[0] = &off_10186CF50;
  uint64_t v14 = v13;
  v13[1] = sub_100A9A524;
  v1.n128_f64[0] = sub_100A9A7D0((void *)(a1 + 88), 2uLL, 8uLL, (uint64_t)v13, (uint64_t)v9);
  int v2 = v14;
  if (v14 == v13)
  {
    uint64_t v3 = 4LL;
    int v2 = v13;
  }

  else
  {
    if (!v14) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(__n128))(*v2 + 8 * v3))(v1);
LABEL_6:
  double v4 = v9[0];
  unsigned int v5 = v10;
  uint64_t v6 = v12;
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v11;
  }

  else
  {
    if (!v12) {
      goto LABEL_11;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(__n128))(*v6 + 8 * v7))(v1);
LABEL_11:
  if (v4 == -1.0) {
    return v5;
  }
  else {
    return 2LL;
  }
}

void sub_100A9A4B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, char *a21)
{
  int v22 = a21;
  if (a21 == &a18)
  {
    uint64_t v23 = 4LL;
    int v22 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_6;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_6:
  uint64_t v24 = a17;
  if (a17 == &a14)
  {
    uint64_t v25 = 4LL;
    uint64_t v24 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A9A524(uint64_t a1)
{
  return *(float *)(a1 + 24) > 0.825 && *(void *)(a1 + 16) == 4LL;
}

void sub_100A9A544(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v3 = qword_101347468[v2];
    unint64_t v4 = qword_101347498[v2];
  }

  v21[0] = &off_10186CF50;
  v21[1] = sub_100A9A524;
  int v22 = v21;
  v5.n128_f64[0] = sub_100A9A7D0((void *)(a1 + 88), v3, v4, (uint64_t)v21, (uint64_t)v16);
  uint64_t v6 = v22;
  if (v22 == v21)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_9;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(__n128))(*v6 + 8 * v7))(v5);
LABEL_9:
  v19[0] = &off_10186CF50;
  v19[1] = sub_100A9A958;
  __int128 v20 = v19;
  v8.n128_f64[0] = sub_100A9A7D0((void *)(a1 + 88), 1uLL, v4, (uint64_t)v19, (uint64_t)v15);
  uint64_t v9 = v20;
  if (v20 == v19)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_14;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(__n128))(*v9 + 8 * v10))(v8);
LABEL_14:
  v17[0] = &off_10186CF50;
  v17[1] = sub_100A9A960;
  uint64_t v18 = v17;
  v11.n128_f64[0] = sub_100A9A7D0((void *)(a1 + 88), 1uLL, v4, (uint64_t)v17, (uint64_t)v15);
  __int128 v12 = v18;
  if (v18 == v17)
  {
    uint64_t v13 = 4LL;
    __int128 v12 = v17;
    goto LABEL_18;
  }

  if (v18)
  {
    uint64_t v13 = 5LL;
LABEL_18:
    (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
  }

  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  sub_100A99D28(v14, (uint64_t)"isOutdoorCycleEpoch", 1, (uint64_t)v16);
}

void sub_100A9A758( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, char *a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  double v29 = a23;
  if (a23 == v27)
  {
    uint64_t v30 = 4LL;
    double v29 = &a20;
  }

  else
  {
    if (!a23) {
      goto LABEL_6;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*(void *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_100A9A7D0@<D0>( void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000LL;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) / 0x2A;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = *v15 + 96 * (v11 - 42 * v12);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1LL;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    unint64_t v19 = v14 == v13 ? 0LL : *(void *)(v13 + 8 * (a1[4] / 0x2AuLL)) + 96 * (a1[4] % 0x2AuLL);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4032LL;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_100008BDC();
    }
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4032LL;
      }
      double result = *(double *)(v16 - 8);
      *(double *)a5 = result;
      return result;
    }

    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4032;
    }

    v16 -= 96LL;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }

  return result;
}

uint64_t sub_100A9A958(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

BOOL sub_100A9A960(uint64_t a1)
{
  return *(double *)(a1 + 72) > 1.72110396 && *(_BYTE *)(a1 + 80) != 0;
}

double sub_100A9A980(void *a1)
{
  uint64_t v2 = a1 + 11;
  v25[0] = &off_10186CF50;
  v25[1] = sub_100A9AC00;
  __int128 v26 = v25;
  v3.n128_f64[0] = sub_100A9A7D0(a1 + 11, 3uLL, 5uLL, (uint64_t)v25, (uint64_t)v20);
  unint64_t v4 = v26;
  if (v26 == v25)
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = v25;
  }

  else
  {
    if (!v26) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  uint64_t v6 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v3);
  sub_100A99D28(v6, (uint64_t)"notIsOutdoorCycleEpoch", 0, (uint64_t)v20);
  v23[0] = &off_10186CF50;
  v23[1] = sub_100A9AC10;
  uint64_t v24 = v23;
  v7.n128_f64[0] = sub_100A9A7D0(v2, 1uLL, 5uLL, (uint64_t)v23, (uint64_t)v19);
  __n128 v8 = v24;
  if (v24 == v23)
  {
    uint64_t v9 = 4LL;
    __n128 v8 = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_11:
  uint64_t v10 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v7);
  sub_100A99D28(v10, (uint64_t)"isPedEpochOutdoorCycle", 0, (uint64_t)v19);
  v21[0] = &off_10186CF50;
  v21[1] = sub_100A9AC00;
  unint64_t v22 = v21;
  v11.n128_f64[0] = sub_100A9A7D0(v2, 6uLL, 0xAuLL, (uint64_t)v21, (uint64_t)v18);
  unint64_t v12 = v22;
  if (v22 == v21)
  {
    uint64_t v13 = 4LL;
    unint64_t v12 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_16;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_16:
  uint64_t v14 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v11);
  sub_100A99D28(v14, (uint64_t)"notIsOutdoorCycleEpoch", 0, (uint64_t)v18);
  if (v19[0] >= v20[0]) {
    double v15 = v20[0];
  }
  else {
    double v15 = v19[0];
  }
  BOOL v16 = v19[0] == -1.0 || v20[0] == -1.0;
  double result = *(double *)v18;
  if (!v16) {
    return v15;
  }
  return result;
}

void sub_100A9AB88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, char *a27)
{
  double v29 = a27;
  if (a27 == v27)
  {
    uint64_t v30 = 4LL;
    double v29 = &a24;
  }

  else
  {
    if (!a27) {
      goto LABEL_6;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*(void *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A9AC00(uint64_t a1)
{
  return *(void *)(a1 + 16) != 4LL;
}

BOOL sub_100A9AC10(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 1LL) < 2;
}

uint64_t sub_100A9AC24()
{
  return 0LL;
}

double sub_100A9AC2C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v3 = qword_101347480[v2];
    unint64_t v4 = qword_101347498[v2];
  }

  v11[0] = &off_10186CEB0;
  v11[1] = sub_100A9AD70;
  unint64_t v12 = v11;
  v5.n128_f64[0] = sub_1002D67A0((void *)(a1 + 88), v3, v4, (uint64_t)v11, (uint64_t)v10);
  uint64_t v6 = v12;
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v11;
    goto LABEL_8;
  }

  if (v12)
  {
    uint64_t v7 = 5LL;
LABEL_8:
    (*(void (**)(__n128))(*v6 + 8 * v7))(v5);
  }

  uint64_t v8 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 40LL))(a1, v5);
  sub_100A99D28(v8, (uint64_t)"isIndoorCycleEpoch", 1, (uint64_t)v10);
  return *(double *)v10;
}

void sub_100A9AD30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  unint64_t v19 = a17;
  if (a17 == v17)
  {
    uint64_t v20 = 4LL;
    unint64_t v19 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A9AD70(uint64_t a1)
{
  return *(void *)(a1 + 16) == 5LL;
}

double sub_100A9AD80(void *a1)
{
  uint64_t v2 = a1 + 11;
  v25[0] = &off_10186CEB0;
  v25[1] = sub_100A9B000;
  __int128 v26 = v25;
  v3.n128_f64[0] = sub_1002D67A0(a1 + 11, 3uLL, 5uLL, (uint64_t)v25, (uint64_t)v20);
  unint64_t v4 = v26;
  if (v26 == v25)
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = v25;
  }

  else
  {
    if (!v26) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  uint64_t v6 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v3);
  sub_100A99D28(v6, (uint64_t)"notIsIndoorCycleEpoch", 0, (uint64_t)v20);
  v23[0] = &off_10186CEB0;
  v23[1] = sub_100A9B014;
  uint64_t v24 = v23;
  v7.n128_f64[0] = sub_1002D67A0(v2, 1uLL, 5uLL, (uint64_t)v23, (uint64_t)v19);
  uint64_t v8 = v24;
  if (v24 == v23)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_11:
  uint64_t v10 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v7);
  sub_100A99D28(v10, (uint64_t)"isPedEpochIndoorCycle", 0, (uint64_t)v19);
  v21[0] = &off_10186CEB0;
  v21[1] = sub_100A9B000;
  unint64_t v22 = v21;
  v11.n128_f64[0] = sub_1002D67A0(v2, 6uLL, 0xAuLL, (uint64_t)v21, (uint64_t)v18);
  unint64_t v12 = v22;
  if (v22 == v21)
  {
    uint64_t v13 = 4LL;
    unint64_t v12 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_16;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_16:
  uint64_t v14 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v11);
  sub_100A99D28(v14, (uint64_t)"notIsIndoorCycleEpoch", 0, (uint64_t)v18);
  if (v19[0] >= v20[0]) {
    double v15 = v20[0];
  }
  else {
    double v15 = v19[0];
  }
  BOOL v16 = v19[0] == -1.0 || v20[0] == -1.0;
  double result = *(double *)v18;
  if (!v16) {
    return v15;
  }
  return result;
}

void sub_100A9AF88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, char *a27)
{
  double v29 = a27;
  if (a27 == v27)
  {
    uint64_t v30 = 4LL;
    double v29 = &a24;
  }

  else
  {
    if (!a27) {
      goto LABEL_6;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*(void *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A9B000(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return v1 != 5 && v1 != 9;
}

BOOL sub_100A9B014(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 1LL) < 2;
}

void sub_100A9B028(void *a1, double *a2)
{
  unint64_t v4 = operator new(8uLL);
  std::stringbuf::string_type __p = v4;
  *unint64_t v4 = 0x900000005LL;
  uint64_t v6 = v4 + 1;
  __n128 v7 = v4 + 1;
  __int16 v23 = 0;
  *(_OWORD *)unint64_t v22 = xmmword_1012E1E90;
  memset(&v22[2], 0, 135);
  __int128 v24 = xmmword_1012E1E90;
  uint64_t v25 = 0LL;
  int v26 = 0;
  uint64_t v27 = 0LL;
  v28[0] = 0LL;
  *(void *)((char *)v28 + 5) = 0LL;
  *(void *)((char *)&v28[1] + 6) = 0LL;
  char v29 = 0;
  memset(&v28[3], 0, 24);
  __int128 v30 = xmmword_1012E1E90;
  uint64_t v31 = 0LL;
  int v32 = 0;
  unint64_t v33 = 0xFFEFFFFFFFFFFFFFLL;
  int v44 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  int v39 = 0;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  memset(v43, 0, sizeof(v43));
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  unint64_t v47 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v48 = 0LL;
  int v49 = 0;
  uint64_t v55 = 0LL;
  __int16 v56 = 0;
  int v61 = 0;
  int v54 = 0;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v58 = 0u;
  __int128 v57 = 0u;
  char v59 = 0;
  memset(v60, 0, sizeof(v60));
  unint64_t v62 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v81 = 0u;
  __int128 v80 = 0u;
  __int128 v79 = 0u;
  __int128 v78 = 0u;
  __int128 v77 = 0u;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  __int128 v74 = 0u;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  __int128 v71 = 0u;
  __int128 v70 = 0u;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  uint64_t v82 = 0LL;
  *(void *)uint64_t v83 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v83[8], 0, 64);
  unint64_t v84 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v85 = 0LL;
  int v86 = 0;
  uint64_t v87 = 0LL;
  char v88 = 0;
  unint64_t v89 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v91 = 0LL;
  uint64_t v90 = 0LL;
  uint64_t v92 = 0x80000000800000LL;
  uint64_t v94 = 0LL;
  uint64_t v93 = 0LL;
  __int128 v95 = xmmword_1012E1EA0;
  uint64_t v96 = 0x80000000800000LL;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  *(void *)&__int128 v99 = 0LL;
  *((void *)&v99 + 1) = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  __int128 v103 = 0u;
  __int128 v104 = 0u;
  __int128 v105 = 0u;
  LODWORD(v106) = 0;
  unint64_t v107 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v108 = 0;
  int v109 = 0;
  unint64_t v110 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v111 = 7LL;
  unint64_t v112 = 0xFFEFFFFFFFFFFFFFLL;
  char v113 = 0;
  uint64_t v115 = 0LL;
  uint64_t v114 = 0LL;
  uint64_t v116 = 0LL;
  sub_100CDB578(a2, &__p, (uint64_t)v22);
  if (*(double *)v83 == -1.79769313e308)
  {
    sub_100A9B3C8(a1);
  }

  else
  {
    v8[2] = *(_OWORD *)&v83[32];
    v8[3] = *(_OWORD *)&v83[48];
    uint64_t v9 = *(void *)&v83[64];
    v8[0] = *(_OWORD *)v83;
    v8[1] = *(_OWORD *)&v83[16];
    __int128 v16 = v103;
    __int128 v17 = v104;
    __int128 v18 = v105;
    uint64_t v19 = v106;
    __int128 v12 = v99;
    __int128 v13 = v100;
    __int128 v14 = v101;
    __int128 v15 = v102;
    __int128 v10 = v97;
    __int128 v11 = v98;
    BOOL v20 = *((double *)&v99 + 1) != -1.79769313e308;
    uint64_t v21 = *(void *)v83;
    sub_100A9B378(a1 + 11, v8);
  }

  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }

void sub_100A9B358( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9B378(void *a1, __int128 *a2)
{
  unint64_t v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100414D44((uint64_t)a1, 1);
  }

void sub_100A9B3C8(void *a1)
{
  uint64_t v2 = (void **)a1[12];
  uint64_t v3 = a1[13];
  a1[16] = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[13];
      uint64_t v2 = (void **)(a1[12] + 8LL);
      a1[12] = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 8LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 17LL;
  }

  a1[15] = v6;
}

uint64_t sub_100A9B43C(uint64_t a1)
{
  v11[0] = &off_10186D000;
  v11[1] = sub_100A9B5B4;
  __int128 v12 = v11;
  v13[0] = &off_10186D000;
  __int128 v14 = v13;
  v13[1] = sub_100A9B5B4;
  v1.n128_f64[0] = sub_100A9B71C((void *)(a1 + 88), 2uLL, 8uLL, (uint64_t)v13, (uint64_t)v9);
  uint64_t v2 = v14;
  if (v14 == v13)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v13;
  }

  else
  {
    if (!v14) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(__n128))(*v2 + 8 * v3))(v1);
LABEL_6:
  double v4 = v9[0];
  unsigned int v5 = v10;
  uint64_t v6 = v12;
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v11;
  }

  else
  {
    if (!v12) {
      goto LABEL_11;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(__n128))(*v6 + 8 * v7))(v1);
LABEL_11:
  if (v4 == -1.0) {
    return v5;
  }
  else {
    return 2LL;
  }
}

void sub_100A9B548( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, char *a21)
{
  unint64_t v22 = a21;
  if (a21 == &a18)
  {
    uint64_t v23 = 4LL;
    unint64_t v22 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_6;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_6:
  __int128 v24 = a17;
  if (a17 == &a14)
  {
    uint64_t v25 = 4LL;
    __int128 v24 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A9B5B4(uint64_t a1)
{
  return *(float *)(a1 + 24) > 0.775 && *(void *)(a1 + 16) == 19LL;
}

double sub_100A9B5D8(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v3 = qword_1013474B0[v2];
    unint64_t v4 = qword_1013474C8[v2];
  }

  v11[0] = &off_10186D000;
  v11[1] = sub_100A9B5B4;
  __int128 v12 = v11;
  v5.n128_f64[0] = sub_100A9B71C((void *)(a1 + 88), v3, v4, (uint64_t)v11, (uint64_t)v10);
  uint64_t v6 = v12;
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v11;
    goto LABEL_8;
  }

  if (v12)
  {
    uint64_t v7 = 5LL;
LABEL_8:
    (*(void (**)(__n128))(*v6 + 8 * v7))(v5);
  }

  uint64_t v8 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 40LL))(a1, v5);
  sub_100A99D28(v8, (uint64_t)"isSwimEpoch", 1, (uint64_t)v10);
  return *(double *)v10;
}

void sub_100A9B6DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v19 = a17;
  if (a17 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_100A9B71C@<D0>( void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000LL;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(_BYTE *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) / 0x11;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  __int128 v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = *v15 + 240 * (v11 - 17 * v12);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1LL;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    unint64_t v19 = v14 == v13 ? 0LL : *(void *)(v13 + 8 * (a1[4] / 0x11uLL)) + 240 * (a1[4] % 0x11uLL);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4080LL;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_100008BDC();
    }
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4080LL;
      }
      double result = *(double *)(v16 - 8);
      *(double *)a5 = result;
      return result;
    }

    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4080;
    }

    v16 -= 240LL;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }

  return result;
}

double sub_100A9B898(void *a1)
{
  uint64_t v2 = a1 + 11;
  v32[0] = &off_10186D000;
  v32[1] = sub_100A9BBA8;
  unint64_t v33 = v32;
  v3.n128_f64[0] = sub_100A9B71C(a1 + 11, 1uLL, 0xFuLL, (uint64_t)v32, (uint64_t)v25);
  unint64_t v4 = v33;
  if (v33 == v32)
  {
    uint64_t v5 = 4LL;
    unint64_t v4 = v32;
  }

  else
  {
    if (!v33) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(__n128))(*v4 + 8 * v5))(v3);
LABEL_6:
  if (v25[0] == -1.0) {
    uint64_t v6 = sub_100A9BBBC;
  }
  else {
    uint64_t v6 = sub_100A9BBFC;
  }
  v30[0] = &off_10186D000;
  v30[1] = v6;
  uint64_t v31 = v30;
  v7.n128_f64[0] = sub_100A9B71C(v2, 6uLL, 0xAuLL, (uint64_t)v30, (uint64_t)v24);
  uint64_t v8 = v31;
  if (v31 == v30)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v30;
  }

  else
  {
    if (!v31) {
      goto LABEL_14;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(__n128))(*v8 + 8 * v9))(v7);
LABEL_14:
  uint64_t v10 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v7);
  sub_100A99D28(v10, (uint64_t)"notIsSwimEpoch", 0, (uint64_t)v24);
  v28[0] = &off_10186D000;
  v28[1] = sub_100A9BBA8;
  char v29 = v28;
  v11.n128_f64[0] = sub_100A9B71C(v2, 1uLL, 0xAuLL, (uint64_t)v28, (uint64_t)v23);
  unint64_t v12 = v29;
  if (v29 == v28)
  {
    uint64_t v13 = 4LL;
    unint64_t v12 = v28;
  }

  else
  {
    if (!v29) {
      goto LABEL_19;
    }
    uint64_t v13 = 5LL;
  }

  (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
LABEL_19:
  uint64_t v14 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v11);
  sub_100A99D28(v14, (uint64_t)"isPedEpochSwim", 0, (uint64_t)v23);
  v26[0] = &off_10186D000;
  v26[1] = v6;
  uint64_t v27 = v26;
  v15.n128_f64[0] = sub_100A9B71C(v2, 0xAuLL, 0xFuLL, (uint64_t)v26, (uint64_t)v22);
  uint64_t v16 = v27;
  if (v27 == v26)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v26;
  }

  else
  {
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(__n128))(*v16 + 8 * v17))(v15);
LABEL_24:
  uint64_t v18 = (*(uint64_t (**)(void *, __n128))(*a1 + 40LL))(a1, v15);
  sub_100A99D28(v18, (uint64_t)"notIsSwimEpoch", 0, (uint64_t)v22);
  if (v23[0] >= v24[0]) {
    double v19 = v24[0];
  }
  else {
    double v19 = v23[0];
  }
  BOOL v20 = v23[0] == -1.0 || v24[0] == -1.0;
  double result = *(double *)v22;
  if (!v20) {
    return v19;
  }
  return result;
}

void sub_100A9BB14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, char *a33)
{
  __int128 v35 = a33;
  if (a33 == v33)
  {
    uint64_t v36 = 4LL;
    __int128 v35 = &a30;
  }

  else
  {
    if (!a33) {
      goto LABEL_6;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*(void *)v35 + 8 * v36))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_100A9BBA8(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 1LL) < 2;
}

BOOL sub_100A9BBBC(uint64_t a1)
{
  BOOL result = 0LL;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 224);
  int v5 = *(_DWORD *)(a1 + 196);
  if (v4) {
    BOOL v6 = v5 == 6;
  }
  else {
    BOOL v6 = 0;
  }
  char v8 = v6 && v3 != 4;
  if (v3 != 19 && (v8 & 1) == 0) {
    return v3 != 5 && v3 != 9;
  }
  return result;
}

BOOL sub_100A9BBFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  BOOL v2 = v1 == 4;
  BOOL v3 = v1 != 19;
  if (*(_DWORD *)(a1 + 196) != 6 || *(_BYTE *)(a1 + 224) == 0) {
    return v3;
  }
  else {
    return v2;
  }
}

void *sub_100A9BC2C(void *a1)
{
  *a1 = off_10186CBC0;
  sub_1002D6244(a1 + 11);
  return a1;
}

void sub_100A9BC5C(void *a1)
{
  *a1 = off_10186CBC0;
  sub_1002D6244(a1 + 11);
  operator delete(a1);
}

BOOL sub_100A9BC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100BEF764(a2);
  return v3 == (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
}

void *sub_100A9BCCC(void *a1)
{
  *a1 = off_10186CCE0;
  sub_1009D4FA0(a1 + 11);
  return a1;
}

void sub_100A9BCFC(void *a1)
{
  *a1 = off_10186CCE0;
  sub_1009D4FA0(a1 + 11);
  operator delete(a1);
}

uint64_t sub_100A9BD2C()
{
  return 4LL;
}

void *sub_100A9BD38(void *a1)
{
  *a1 = off_10186CE00;
  sub_10041385C(a1 + 11);
  return a1;
}

void sub_100A9BD68(void *a1)
{
  *a1 = off_10186CE00;
  sub_10041385C(a1 + 11);
  operator delete(a1);
}

void sub_100A9BD9C(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100A9BDC8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_10186CEB0;
  result[1] = v3;
  return result;
}

uint64_t sub_100A9BE00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186CEB0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A9BE20(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100A9BE2C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A9BE68()
{
  return &off_10186CF20;
}

__n128 sub_100A9BE74(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A9BF34(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v11;
  ++a1[5];
  return result;
}

void sub_100A9BF34(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000071BC(v5, v33);
      __int128 v35 = &v34[8 * (v33 >> 2)];
      __int128 v37 = &v34[8 * v36];
      __int128 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100A9C1FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100A9C248(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_10186CF50;
  result[1] = v3;
  return result;
}

uint64_t sub_100A9C280(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186CF50;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A9C2A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100A9C2AC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A9C2E8()
{
  return &off_10186CFD0;
}

__n128 sub_100A9C2F4(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) + ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A9C3D0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x11)) + 240 * (v7 % 0x11);
  __int128 v9 = *a2;
  __int128 v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  __int128 v11 = a2[3];
  __int128 v12 = a2[4];
  __int128 v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  __int128 v14 = a2[7];
  __int128 v15 = a2[8];
  __int128 v16 = a2[10];
  *(_OWORD *)(v8 + 144) = a2[9];
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  __n128 result = (__n128)a2[11];
  __int128 v18 = a2[12];
  __int128 v19 = a2[14];
  *(_OWORD *)(v8 + memset(&v8[8], 0, 208) = a2[13];
  *(_OWORD *)(v8 + 224) = v19;
  *(__n128 *)(v8 + 176) = result;
  *(_OWORD *)(v8 + 192) = v18;
  ++a1[5];
  return result;
}

void sub_100A9C3D0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x11;
  unint64_t v4 = v2 - 17;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000071BC(v5, v33);
      __int128 v35 = &v34[8 * (v33 >> 2)];
      __int128 v37 = &v34[8 * v36];
      __int128 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100A9C698( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100A9C6E4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_10186D000;
  result[1] = v3;
  return result;
}

uint64_t sub_100A9C71C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186D000;
  a2[1] = v2;
  return result;
}

uint64_t sub_100A9C73C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100A9C748(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100A9C784()
{
  return &off_10186D080;
}

double sub_100A9C790@<D0>(uint64_t a1@<X8>)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10186D0F0);
  }
  uint64_t v2 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v9 = 0x4014000000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Cross Training, Compendium METS, METS, %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186D0F0);
    }
    int v6 = 134217984;
    uint64_t v7 = 0x4014000000000000LL;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Cross Training, Compendium METS, METS, %f",  COERCE_DOUBLE(&v6));
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLNatalieCrossTrainingModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  *(_OWORD *)a1 = xmmword_1013474F0;
  *(void *)(a1 + 16) = 0x40A0000000000000LL;
  *(void *)(a1 + 24) = 0x40A0000000000000LL;
  *(void *)&double result = 0x400000003LL;
  *(void *)(a1 + 32) = 0x400000003LL;
  return result;
}

void sub_100A9C96C(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_100A9C998(uint64_t a1, uint64_t a2)
{
  return sub_100A9C9B8(a1, a2, v3);
}

double sub_100A9C9B8(uint64_t a1, uint64_t a2, double *a3)
{
  double v5 = sub_100A9CC3C(a1, *(unsigned __int8 *)(a2 + 48));
  a3[2] = v5;
  double v6 = *(float *)(a2 + 20) * -0.699999988 + 208.0;
  double v7 = v6 + -44.0;
  if (!*(_BYTE *)(a2 + 48)) {
    double v7 = *(float *)(a2 + 20) * -0.699999988 + 208.0;
  }
  *a3 = v6;
  a3[1] = v7;
  if (v5 < v7) {
    double v5 = v7;
  }
  if (v5 >= v6) {
    double v8 = v6;
  }
  else {
    double v8 = v5;
  }
  if (qword_101934640 != -1) {
    dispatch_once(&qword_101934640, &stru_10186D110);
  }
  uint64_t v9 = (os_log_s *)qword_101934648;
  if (os_log_type_enabled((os_log_t)qword_101934648, OS_LOG_TYPE_DEBUG))
  {
    double v10 = a3[2];
    uint64_t v11 = *((void *)a3 + 1);
    if (v10 == -1.79769313e308) {
      double v10 = -1.0;
    }
    *(_DWORD *)buf = 134284289;
    double v26 = v10;
    __int16 v27 = 2049;
    uint64_t v28 = v11;
    __int16 v29 = 2049;
    double v30 = v6;
    __int16 v31 = 2049;
    double v32 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "HRMaxEstimator,vo2MaxObservedHRMax,%{private}f,ageAndBetaBlockerPredictedHrMax,%{private}f,hrMaxCeiling,%{private} f,estimatedHRMax,%{private}f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934640 != -1) {
      dispatch_once(&qword_101934640, &stru_10186D110);
    }
    double v13 = a3[2];
    if (v13 == -1.79769313e308) {
      double v13 = -1.0;
    }
    uint64_t v14 = *((void *)a3 + 1);
    int v17 = 134284289;
    double v18 = v13;
    __int16 v19 = 2049;
    uint64_t v20 = v14;
    __int16 v21 = 2049;
    double v22 = v6;
    __int16 v23 = 2049;
    double v24 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934648,  2LL,  "HRMaxEstimator,vo2MaxObservedHRMax,%{private}f,ageAndBetaBlockerPredictedHrMax,%{private}f,hrMaxCeiling,%{private} f,estimatedHRMax,%{private}f",  &v17,  42);
    uint64_t v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLHRMaxEstimator::getEstimatedHRMax(const CLBodyMetrics &, CLHRMaxFeatures &) const",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  return v8;
}

double sub_100A9CC3C(uint64_t a1, int a2)
{
  __int128 v34 = 0LL;
  __int128 v35 = 0LL;
  uint64_t v36 = 0LL;
  uint64_t v3 = sub_100D74AD8();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_100D7560C(v3, a2, (char **)&v34, Current + -18144000.0);
  std::stringbuf::string_type __p = 0LL;
  double v32 = 0LL;
  unint64_t v33 = 0LL;
  double v5 = (double *)v34;
  double v6 = v35;
  if (v34 == v35) {
    goto LABEL_46;
  }
  do
  {
    if (v5[10] >= 0.6 && *((void *)v5 + 6) >= 0x1EuLL)
    {
      if (qword_101934640 != -1) {
        dispatch_once(&qword_101934640, &stru_10186D110);
      }
      double v8 = (os_log_s *)qword_101934648;
      if (os_log_type_enabled((os_log_t)qword_101934648, OS_LOG_TYPE_DEBUG))
      {
        double v9 = v5[9];
        int v10 = *((_DWORD *)v5 + 44);
        *(_DWORD *)buf = 134283777;
        double v42 = v9;
        __int16 v43 = 1025;
        int v44 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "HRMaxEstimator,clusterHrMean,%{private}f,vo2MaxModelSource,%{private}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934640 != -1) {
          dispatch_once(&qword_101934640, &stru_10186D110);
        }
        double v21 = v5[9];
        int v22 = *((_DWORD *)v5 + 44);
        int v37 = 134283777;
        double v38 = v21;
        __int16 v39 = 1025;
        int v40 = v22;
        LODWORD(v30) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934648,  2LL,  "HRMaxEstimator,clusterHrMean,%{private}f,vo2MaxModelSource,%{private}d",  &v37,  v30);
        double v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLHRMaxEstimator::getObservedHRMaxFromVO2MaxClusters(BOOL) const",  "%s\n",  v23);
        if (v24 != buf) {
          free(v24);
        }
      }

      if (*((_DWORD *)v5 + 44) == 1)
      {
        uint64_t v11 = v32;
        if (v32 >= v33)
        {
          double v13 = (char *)__p;
          uint64_t v14 = (v32 - (_BYTE *)__p) >> 3;
          unint64_t v15 = v14 + 1;
          uint64_t v16 = v33 - (_BYTE *)__p;
          if ((v33 - (_BYTE *)__p) >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            double v18 = (char *)sub_1000071BC((uint64_t)&v33, v17);
            double v13 = (char *)__p;
            uint64_t v11 = v32;
          }

          else
          {
            double v18 = 0LL;
          }

          __int16 v19 = &v18[8 * v14];
          *(double *)__int16 v19 = v5[9];
          uint64_t v12 = v19 + 8;
          while (v11 != v13)
          {
            uint64_t v20 = *((void *)v11 - 1);
            v11 -= 8;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }

          std::stringbuf::string_type __p = v19;
          double v32 = v12;
          unint64_t v33 = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }

        else
        {
          *(double *)double v32 = v5[9];
          uint64_t v12 = v11 + 8;
        }

        double v32 = v12;
      }
    }

    v5 += 23;
  }

  while (v5 != v6);
  if ((unint64_t)(v32 - (_BYTE *)__p) <= 0x18)
  {
LABEL_46:
    double v25 = -1.79769313e308;
  }

  else
  {
    double v25 = sub_100DEA794((uint64_t)&__p, 95);
    if (qword_101934640 != -1) {
      dispatch_once(&qword_101934640, &stru_10186D110);
    }
    double v26 = (os_log_s *)qword_101934648;
    if (os_log_type_enabled((os_log_t)qword_101934648, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      double v42 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "HRMaxEstimator,observedHRMax,%{private}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934640 != -1) {
        dispatch_once(&qword_101934640, &stru_10186D110);
      }
      int v37 = 134283521;
      double v38 = v25;
      LODWORD(v30) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934648,  2LL,  "HRMaxEstimator,observedHRMax,%{private}f",  &v37,  v30);
      uint64_t v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLHRMaxEstimator::getObservedHRMaxFromVO2MaxClusters(BOOL) const",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }
  }

  if (__p)
  {
    double v32 = (char *)__p;
    operator delete(__p);
  }

  if (v34)
  {
    __int128 v35 = (double *)v34;
    operator delete(v34);
  }

  return v25;
}

void sub_100A9D0F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9D134(id a1)
{
  qword_101934648 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HeartRate");
}

void sub_100A9D204(id a1)
{
  qword_10199A620 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLAvengerObservationReporterServiceSilo");
}

void sub_100A9DAE4(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_100A9DF9C((uint64_t)&v6, a3);
  [a4 onAppMonitorNotification:v5 data:&v6];
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
}

void sub_100A9DB68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100A9DF70(id a1)
{
  qword_1019349B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100A9DF9C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }

  if (*(char *)(a2 + 55) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }

  if (*(char *)(a2 + 79) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }

  double v7 = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_1010DD48C(v7, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)double v7 = v8;
  }

  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  return a1;
}

void sub_100A9E09C(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A9E0E8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10199A608, (void *)&_mh_execute_header);
}

void sub_100A9E1D8(id a1)
{
  qword_10199A630 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLGnssProviderSilo");
}

void sub_100A9E608()
{
}

void sub_100A9E630()
{
}

void sub_100A9E658(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100A9E684()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100A9E6E8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100A9E75C(_Unwind_Exception *a1)
{
}

uint64_t sub_100A9E774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(_OWORD *)__int128 v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
  uint64_t v7 = *(void *)(a4 + 16);
  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  sub_100A9E81C(a1, (uint64_t)v8, a3, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
  return a1;
}

void sub_100A9E7F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101226D18((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100A9E81C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(_OWORD *)double v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  uint64_t v7 = operator new(8uLL);
  *uint64_t v7 = &off_10186D1C0;
  *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  char v12 = v7;
  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  sub_100A9E97C(a1, (__int128 *)v13, a3, (uint64_t *)&v12, (__int128 *)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (uint64_t)v12;
  char v12 = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_100A9E8EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9E93C( uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, char **a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
}

void sub_100A9E944(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
}

void sub_100A9E94C(uint64_t a1, uint64_t a2)
{
}

void sub_100A9E954(uint64_t a1, unint64_t a2)
{
}

BOOL sub_100A9E95C(uint64_t a1, uint64_t a2)
{
  return sub_100499B28(*(void *)(a1 + 32), a2);
}

uint64_t sub_100A9E964(uint64_t a1)
{
  return sub_100498AD4(*(void *)(a1 + 32));
}

uint64_t sub_100A9E96C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100400C74(*(void *)(a1 + 32), a2);
}

void sub_100A9E974(uint64_t a1)
{
}

uint64_t sub_100A9E97C(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  *(_BYTE *)a1 = 0;
  __int128 v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + 40) = 0x100000002LL;
  uint64_t v9 = (os_log_s *)(a1 + 40);
  char v10 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v11 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v11;
  }

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  uint64_t v12 = *a4;
  *a4 = 0LL;
  *(void *)(a1 + 96) = v12;
  if (qword_101934830 != -1) {
    goto LABEL_42;
  }
  while (1)
  {
    double v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v10;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v42 = 1024;
      int v43 = a3;
      __int16 v44 = 1024;
      int v45 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Creating managed location database %s (count triggers %d, use cache %d)",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D200);
      }
      __int16 v27 = v10;
      int v35 = 136315650;
      uint64_t v36 = v27;
      __int16 v37 = 1024;
      int v38 = a3;
      __int16 v39 = 1024;
      int v40 = 1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Creating managed location database %s (count triggers %d, use cache %d)",  (const char *)&v35,  24,  v34);
      __int16 v29 = (char *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase(s td::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifi LocationDatabase::WifiData]",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }

    if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96)))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D200);
      }
      uint64_t v9 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        unint64_t v15 = v10;
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Data protection is enabled, creating in-memory database for table %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D200);
        }
        uint64_t v30 = v10;
        int v35 = 136315138;
        uint64_t v36 = v30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Data protection is enabled, creating in-memory database for table %s",  (const char *)&v35);
        uint64_t v9 = (os_log_s *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase (std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CL WifiLocationDatabase::WifiData]",  "%s\n",  v31);
        if (v9 != (os_log_s *)buf) {
          free(v9);
        }
      }

      sub_100A9F070((_BYTE *)a1, a3, buf);
      uint64_t v16 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v17 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
        uint64_t v18 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
      }
    }

    else
    {
      sub_100A1F7B4(a1, (uint64_t)v9, buf);
      uint64_t v19 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v20 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        uint64_t v21 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
        }
        uint64_t v19 = *(void *)(a1 + 32);
      }

      if (!v19)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D200);
        }
        uint64_t v9 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_10186D200);
          }
          LOWORD(v35) = 0;
          LODWORD(v33) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  &v35,  v33);
          uint64_t v9 = (os_log_s *)v32;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDataba se(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]",  "%s\n",  v32);
          if (v9 != (os_log_s *)buf) {
            free(v9);
          }
        }

        sub_100A9F070((_BYTE *)a1, a3, buf);
        uint64_t v22 = *(void *)buf;
        *(void *)buf = 0LL;
        uint64_t v23 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v24 = *(void *)buf;
          *(void *)buf = 0LL;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          }
          uint64_t v22 = *(void *)(a1 + 32);
        }

        if (!v22 || !sub_100400B64(v22))
        {
          sub_10125B918(buf);
          goto LABEL_41;
        }
      }
    }

    uint64_t v25 = *(void *)(a1 + 32);
    if (v25)
    {
      if (sub_100400B64(v25)) {
        return a1;
      }
    }

    sub_10125B7A8(buf);
LABEL_41:
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  *(_DWORD *)buf,  "CLManagedLocationDatabase");
    __break(1u);
LABEL_42:
    dispatch_once(&qword_101934830, &stru_10186D200);
  }

void sub_100A9EFEC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9F070(_BYTE *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v9 = 0;
  uint64_t v8 = 0LL;
  char v10 = a2;
  if (SHIBYTE(v7) < 0)
  {
    sub_1010DD48C(&v11, __p[0], (unint64_t)__p[1]);
    uint64_t v13 = 0LL;
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v11 = *(_OWORD *)__p;
    uint64_t v12 = v7;
    uint64_t v13 = 0LL;
  }

  sub_100A1F7B4((uint64_t)a1, (uint64_t)&v8, a3);
  if (*a3)
  {
    *a1 = 1;
    sub_100A9F1B8((uint64_t)a1);
  }

  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_100A9F13C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9F18C(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100A9F1B8(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_10125BA88();
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1000392EC((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    else {
      __int128 v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }

  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = objc_alloc(&OBJC_CLASS___CLOSTransaction);
  if (v5 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = v6;
  }
  *(void *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100A9F2BC(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100A9F2E8(uint64_t a1, char *a2, int a3)
{
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return a1;
}

void sub_100A9F360( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A9F394(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  char v7 = operator new(8uLL);
  *char v7 = &off_10186D250;
  *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v12 = v7;
  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  sub_100A9F4B4(a1, (__int128 *)v13, a3, (uint64_t *)&v12, (__int128 *)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (uint64_t)v12;
  uint64_t v12 = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_100A9F464( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A9F4B4(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  *(_BYTE *)a1 = 0;
  __int128 v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + 40) = 0x100000002LL;
  char v9 = (os_log_s *)(a1 + 40);
  char v10 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v11 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v11;
  }

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  uint64_t v12 = *a4;
  *a4 = 0LL;
  *(void *)(a1 + 96) = v12;
  if (qword_101934830 != -1) {
    goto LABEL_42;
  }
  while (1)
  {
    uint64_t v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v10;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v42 = 1024;
      int v43 = a3;
      __int16 v44 = 1024;
      int v45 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Creating managed location database %s (count triggers %d, use cache %d)",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D290);
      }
      __int16 v27 = v10;
      int v35 = 136315650;
      uint64_t v36 = v27;
      __int16 v37 = 1024;
      int v38 = a3;
      __int16 v39 = 1024;
      int v40 = 1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Creating managed location database %s (count triggers %d, use cache %d)",  (const char *)&v35,  24,  v34);
      __int16 v29 = (char *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(std: :string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTelepho nyService_Type::Cell]",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }

    if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96)))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D290);
      }
      char v9 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        unint64_t v15 = v10;
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Data protection is enabled, creating in-memory database for table %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D290);
        }
        uint64_t v30 = v10;
        int v35 = 136315138;
        uint64_t v36 = v30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Data protection is enabled, creating in-memory database for table %s",  (const char *)&v35);
        char v9 = (os_log_s *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(st d::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTel ephonyService_Type::Cell]",  "%s\n",  v31);
        if (v9 != (os_log_s *)buf) {
          free(v9);
        }
      }

      sub_100A9FBA8((_BYTE *)a1, a3, buf);
      uint64_t v16 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v17 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
        uint64_t v18 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
      }
    }

    else
    {
      sub_1004C418C(a1, (uint64_t *)v9, buf);
      uint64_t v19 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v20 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        uint64_t v21 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
        }
        uint64_t v19 = *(void *)(a1 + 32);
      }

      if (!v19)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D290);
        }
        char v9 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_10186D290);
          }
          LOWORD(v35) = 0;
          LODWORD(v33) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  &v35,  v33);
          char v9 = (os_log_s *)v32;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase( std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = C LTelephonyService_Type::Cell]",  "%s\n",  v32);
          if (v9 != (os_log_s *)buf) {
            free(v9);
          }
        }

        sub_100A9FBA8((_BYTE *)a1, a3, buf);
        uint64_t v22 = *(void *)buf;
        *(void *)buf = 0LL;
        uint64_t v23 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v24 = *(void *)buf;
          *(void *)buf = 0LL;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          }
          uint64_t v22 = *(void *)(a1 + 32);
        }

        if (!v22 || !sub_100400B64(v22))
        {
          sub_10125BDB0(buf);
          goto LABEL_41;
        }
      }
    }

    uint64_t v25 = *(void *)(a1 + 32);
    if (v25)
    {
      if (sub_100400B64(v25)) {
        return a1;
      }
    }

    sub_10125BC40(buf);
LABEL_41:
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  *(_DWORD *)buf,  "CLManagedLocationDatabase");
    __break(1u);
LABEL_42:
    dispatch_once(&qword_101934830, &stru_10186D290);
  }

void sub_100A9FB24(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9FBA8(_BYTE *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v9 = 0;
  uint64_t v8 = 0LL;
  char v10 = a2;
  if (SHIBYTE(v7) < 0)
  {
    sub_1010DD48C(&v11, __p[0], (unint64_t)__p[1]);
    uint64_t v13 = 0LL;
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v11 = *(_OWORD *)__p;
    uint64_t v12 = v7;
    uint64_t v13 = 0LL;
  }

  sub_1004C418C((uint64_t)a1, &v8, a3);
  if (*a3)
  {
    *a1 = 1;
    sub_100A9FCF0((uint64_t)a1);
  }

  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_100A9FC74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9FCC4(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100A9FCF0(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_10125BF20();
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1000392EC((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    else {
      __int128 v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }

  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = objc_alloc(&OBJC_CLASS___CLOSTransaction);
  if (v5 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = v6;
  }
  *(void *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100A9FDF4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100A9FE20(double a1)
{
  double v4 = a1;
  uint64_t v1 = sub_1002F8DDC();
  sub_1002AC7B8(v1, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", &v4);
  uint64_t v2 = sub_1002F8DDC();
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 944LL))(v2);
}

float sub_100A9FE60(uint64_t a1, float *a2)
{
  *(void *)buf = 0xBFF0000000000000LL;
  uint64_t v4 = sub_1002F8DDC();
  sub_1002A82BC(v4, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", buf);
  if (*(double *)buf < 0.0)
  {
    double v5 = sub_100295E8C();
    sub_100A9FE20(v5);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D2D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "ExerciseMinuteThresholdUpdater, begin tracking elapsed time for updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D2D0);
      }
      LOWORD(v52) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "ExerciseMinuteThresholdUpdater, begin tracking elapsed time for updates",  &v52,  2);
      uint64_t v47 = (char *)v46;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)",  "%s\n",  v46);
      if (v47 != buf) {
        free(v47);
      }
    }

    return a2[13];
  }

  std::stringbuf::string_type __p = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v8 = sub_100D74AD8();
  int v9 = sub_100D752D8(v8, (char **)&__p);
  char v10 = v50;
  if (__p == v50)
  {
    char v10 = __p;
  }

  else
  {
    __int128 v11 = (char *)__p + 144;
    while (*(v11 - 36))
    {
      BOOL v12 = v11 == v50;
      v11 += 144;
      if (v12) {
        goto LABEL_22;
      }
    }

    uint64_t v13 = v11 - 144;
    if (v11 - 144 != v50)
    {
      while (v11 != (char *)v10)
      {
        if (v11[108])
        {
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v11;
          __int128 v14 = *((_OWORD *)v11 + 1);
          __int128 v15 = *((_OWORD *)v11 + 2);
          __int128 v16 = *((_OWORD *)v11 + 4);
          *((_OWORD *)v13 + 3) = *((_OWORD *)v11 + 3);
          *((_OWORD *)v13 + 4) = v16;
          *((_OWORD *)v13 + 1) = v14;
          *((_OWORD *)v13 + 2) = v15;
          __int128 v17 = *((_OWORD *)v11 + 5);
          __int128 v18 = *((_OWORD *)v11 + 6);
          __int128 v19 = *((_OWORD *)v11 + 8);
          *((_OWORD *)v13 + memset(&v6[1], 0, 7) = *((_OWORD *)v11 + 7);
          *((_OWORD *)v13 + 8) = v19;
          *((_OWORD *)v13 + 5) = v17;
          *((_OWORD *)v13 + 6) = v18;
          v13 += 144;
        }

        v11 += 144;
      }
    }

    if (v13 != (char *)v10)
    {
      char v10 = v13;
      uint64_t v50 = v13;
    }
  }

void sub_100AA0664( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AA06A0(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100AA06CC(uint64_t a1, char *a2, int a3)
{
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return a1;
}

void sub_100AA0744( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AA0778(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  char v7 = operator new(8uLL);
  *char v7 = &off_10186D300;
  *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  BOOL v12 = v7;
  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  sub_100AA0898(a1, (__int128 *)v13, a3, (uint64_t *)&v12, (__int128 *)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (uint64_t)v12;
  BOOL v12 = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_100AA0848( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AA0898(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  *(_BYTE *)a1 = 0;
  __int128 v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + 40) = 0x100000002LL;
  char v9 = (os_log_s *)(a1 + 40);
  char v10 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v11 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v11;
  }

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  uint64_t v12 = *a4;
  *a4 = 0LL;
  *(void *)(a1 + 96) = v12;
  if (qword_101934830 != -1) {
    goto LABEL_42;
  }
  while (1)
  {
    uint64_t v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v10;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v42 = 1024;
      int v43 = a3;
      __int16 v44 = 1024;
      int v45 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Creating managed location database %s (count triggers %d, use cache %d)",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D340);
      }
      double v27 = v10;
      int v35 = 136315650;
      float v36 = v27;
      __int16 v37 = 1024;
      int v38 = a3;
      __int16 v39 = 1024;
      int v40 = 1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Creating managed location database %s (count triggers %d, use cache %d)",  (const char *)&v35,  24,  v34);
      double v29 = (char *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDatab ase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }

    if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96)))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D340);
      }
      char v9 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        __int128 v15 = v10;
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Data protection is enabled, creating in-memory database for table %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D340);
        }
        float v30 = v10;
        int v35 = 136315138;
        float v36 = v30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Data protection is enabled, creating in-memory database for table %s",  (const char *)&v35);
        char v9 = (os_log_s *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDat abase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, Data Type = CLTelephonyService_Type::CdmaCell]",  "%s\n",  v31);
        if (v9 != (os_log_s *)buf) {
          free(v9);
        }
      }

      sub_100AA0F8C((_BYTE *)a1, a3, buf);
      uint64_t v16 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v17 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
        uint64_t v18 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
      }
    }

    else
    {
      sub_1004C45F4(a1, (uint64_t)v9, buf);
      uint64_t v19 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v20 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        uint64_t v21 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
        }
        uint64_t v19 = *(void *)(a1 + 32);
      }

      if (!v19)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D340);
        }
        char v9 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_10186D340);
          }
          LOWORD(v35) = 0;
          LODWORD(v33) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  &v35,  v33);
          char v9 = (os_log_s *)v32;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationD atabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]",  "%s\n",  v32);
          if (v9 != (os_log_s *)buf) {
            free(v9);
          }
        }

        sub_100AA0F8C((_BYTE *)a1, a3, buf);
        uint64_t v22 = *(void *)buf;
        *(void *)buf = 0LL;
        uint64_t v23 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v24 = *(void *)buf;
          *(void *)buf = 0LL;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          }
          uint64_t v22 = *(void *)(a1 + 32);
        }

        if (!v22 || !sub_100400B64(v22))
        {
          sub_10125C248(buf);
          goto LABEL_41;
        }
      }
    }

    uint64_t v25 = *(void *)(a1 + 32);
    if (v25)
    {
      if (sub_100400B64(v25)) {
        return a1;
      }
    }

    sub_10125C0D8(buf);
LABEL_41:
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  *(_DWORD *)buf,  "CLManagedLocationDatabase");
    __break(1u);
LABEL_42:
    dispatch_once(&qword_101934830, &stru_10186D340);
  }

void sub_100AA0F08(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AA0F8C(_BYTE *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v9 = 0;
  uint64_t v8 = 0LL;
  char v10 = a2;
  if (SHIBYTE(v7) < 0)
  {
    sub_1010DD48C(&v11, __p[0], (unint64_t)__p[1]);
    uint64_t v13 = 0LL;
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v11 = *(_OWORD *)__p;
    uint64_t v12 = v7;
    uint64_t v13 = 0LL;
  }

  sub_1004C45F4((uint64_t)a1, (uint64_t)&v8, a3);
  if (*a3)
  {
    *a1 = 1;
    sub_100AA10D4((uint64_t)a1);
  }

  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_100AA1058( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AA10A8(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100AA10D4(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_10125C3B8();
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1000392EC((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    else {
      uint64_t v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }

  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = objc_alloc(&OBJC_CLASS___CLOSTransaction);
  if (v5 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = v6;
  }
  *(void *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100AA11D8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100AA1204(uint64_t a1)
{
  *(_DWORD *)(a1 + 2160) = 1;
  sub_1002F0B04(buf);
  if (sub_1002A6F64(*(uint64_t *)buf, "LCFusionUseLegacyProviderSelection", (BOOL *)(a1 + 157)))
  {
    int v2 = *(unsigned __int8 *)(a1 + 157);
    uint64_t v3 = v87;
    if (!v87) {
      goto LABEL_6;
    }
    p_shared_owners = (unint64_t *)&v87->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (!v2) {
        goto LABEL_22;
      }
    }

    else
    {
LABEL_6:
      if (!v2) {
        goto LABEL_22;
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v6 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "LCFusion to act as passthrough and use legacy provider selection results for internal testing",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion to act as passthrough and use legacy provider selection results for internal testing",  v85,  2);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  else
  {
    char v9 = v87;
    if (v87)
    {
      char v10 = (unint64_t *)&v87->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

void sub_100AA22DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100AA22E8(uint64_t a1)
{
  int v2 = (void *)(a1 + 224);
  sub_1005F6950(a1 + 216, *(void **)(a1 + 224));
  *(void *)(a1 + 216) = v2;
  *(void *)(a1 + 232) = 0LL;
  *int v2 = 0LL;
  sub_1005F68F8((void **)(a1 + 240));
  sub_1005F69A4(a1 + 192, *(void **)(a1 + 200));
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + memset(&v8[8], 0, 208) = 0LL;
  *(void *)(a1 + 184) = 0xBFF0000000000000LL;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 1704) = 0LL;
  sub_1004CE9E4(a1 + 1112);
  sub_1004498DC(a1 + 1840);
  sub_100AA24DC((void *)(a1 + 2016));
  *(void *)(a1 + 1984) = *(void *)(a1 + 1976);
  *(_BYTE *)(a1 + 2144) = 0;
  *(void *)(a1 + 2152) = 0xBFF0000000000000LL;
  *(_WORD *)(a1 + 2072) = 0;
  *(_BYTE *)(a1 + 2074) = 0;
  *(_BYTE *)(a1 + 2memset(&v8[8], 0, 208) = 0;
  *(_BYTE *)(a1 + 159) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 168) = _Q0;
  sub_100FBAB30(a1 + 968);
  bzero(v14, 0x2D0uLL);
  sub_1005F658C((uint64_t)v14);
  sub_100ABD924((void *)(a1 + 248), (uint64_t)v14);
  memcpy((void *)(a1 + 296), v15, 0x218uLL);
  sub_10005F550(a1 + 832, v16);
  __int128 v8 = v16[2];
  *(_OWORD *)(a1 + 848) = v16[1];
  *(_OWORD *)(a1 + 864) = v8;
  __int128 v9 = v16[6];
  *(_OWORD *)(a1 + 912) = v16[5];
  *(_OWORD *)(a1 + 928) = v9;
  *(_OWORD *)(a1 + 944) = v16[7];
  __int128 v10 = v16[4];
  *(_OWORD *)(a1 + 880) = v16[3];
  *(_DWORD *)(a1 + 960) = v17;
  *(_OWORD *)(a1 + 896) = v10;
  unint64_t v11 = (std::__shared_weak_count *)*((void *)&v16[0] + 1);
  if (*((void *)&v16[0] + 1))
  {
    int v12 = (unint64_t *)(*((void *)&v16[0] + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  sub_1005F67A0(v14);
  *(_DWORD *)(a1 + 1104) = 0;
  *(_WORD *)(a1 + 2075) = 0;
  *(void *)(a1 + 2080) = 0xBFF0000000000000LL;
  *(_BYTE *)(a1 + 2096) = 0;
  *(void *)(a1 + 2104) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = xmmword_1012E0070;
  sub_10036666C(*(void *)(a1 + 1696));
  sub_10031C110(a1 + 2184, *(void **)(a1 + 2192));
  *(void *)(a1 + 2184) = a1 + 2192;
  *(void *)(a1 + 2200) = 0LL;
  *(void *)(a1 + 2192) = 0LL;
  *(_DWORD *)(a1 + 2160) = 1;
  *(_DWORD *)(a1 + 2176) = 0;
}

void sub_100AA24DC(void *a1)
{
  int v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      int v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 32LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 64LL;
  }

  a1[4] = v6;
}

uint64_t sub_100AA2550(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v5;
  __int128 v7 = *(_OWORD *)(a2 + 680);
  __int128 v6 = *(_OWORD *)(a2 + 696);
  __int128 v8 = *(_OWORD *)(a2 + 664);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 680) = v7;
  *(_OWORD *)(a1 + 696) = v6;
  *(_OWORD *)(a1 + 664) = v8;
  return a1;
}

uint64_t sub_100AA25CC(uint64_t a1, char **a2)
{
  if (!*(_BYTE *)(a1 + 2164))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int128 v9 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "#Error,Feed InertialOdometry,LC Fusion is not configured.",  (uint8_t *)&__p,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v15[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,Feed InertialOdometry,LC Fusion is not configured.",  v15,  2);
    unint64_t v11 = (void **)v10;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::setIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v10);
    goto LABEL_33;
  }

  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  __int128 v5 = *a2;
  uint64_t v4 = (uint64_t)a2[1];
  if (*a2 == (char *)v4)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v12 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#Feed InertialOdometry,no IO sample(s) provided.",  (uint8_t *)&__p,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v15[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#Feed InertialOdometry,no IO sample(s) provided.",  v15,  2);
    unint64_t v11 = (void **)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::setIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v14);
LABEL_33:
    if (v11 != &__p) {
      free(v11);
    }
    return 0LL;
  }

  uint64_t v6 = (v4 - (uint64_t)v5) >> 3;
  uint64_t v7 = 0x8E38E38E38E38E39LL * v6;
  if ((954437177 * v6) >= 5)
  {
    do
    {
      if ((unint64_t)(v7 << 32) < 0x300000001LL)
      {
        std::stringbuf::string_type __p = 0LL;
        int v17 = 0LL;
        uint64_t v18 = 0LL;
        sub_100ABEFC4(&__p, v5, v4, 0x8E38E38E38E38E39LL * ((v4 - (uint64_t)v5) >> 3));
        uint64_t v8 = sub_100AA2E60(a1, &__p);
        __int128 v5 = a2[1];
        if (__p)
        {
          int v17 = __p;
          operator delete(__p);
        }
      }

      else
      {
        std::stringbuf::string_type __p = 0LL;
        int v17 = 0LL;
        uint64_t v18 = 0LL;
        sub_100ABEFC4(&__p, v5, (uint64_t)(v5 + 288), 4uLL);
        uint64_t v8 = sub_100AA2E60(a1, &__p);
        if (__p)
        {
          int v17 = __p;
          operator delete(__p);
        }

        v5 += 288;
      }

      uint64_t v7 = (int)v7 - 4LL;
      uint64_t v4 = (uint64_t)a2[1];
    }

    while (v5 != (char *)v4);
    return v8;
  }

  return sub_100AA2E60(a1, a2);
}

void sub_100AA29D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100AA29E8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 2144))
  {
    int v17 = *(_DWORD *)(a1 + 2160);
    if (v17 == 1)
    {
LABEL_30:
      *(_DWORD *)(a1 + 2160) = 4;
      return;
    }

    if (v17 != 2) {
      return;
    }
  }

  uint64_t v2 = sub_10080E94C();
  *(_DWORD *)buf = 1;
  double v3 = sub_10080EB58(v2, buf);
  double v26 = v3;
  double v4 = *(double *)(a1 + 2152);
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  double v5 = v3 - v4;
  uint64_t v6 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = sub_10080E94C();
    double v8 = sub_10080EF30(v7);
    *(_DWORD *)buf = 134349568;
    double v34 = v5;
    __int16 v35 = 2050;
    double v36 = v26;
    __int16 v37 = 2050;
    double v38 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,data input arrived while fused state is in sleep mode for,%{public}.2f,[s],waking up to process the data,n ow_mct,%{public}.3f,propagation_us,%{public}.3f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v18 = qword_101934968;
    uint64_t v19 = sub_10080E94C();
    int v27 = 134349568;
    double v28 = v5;
    __int16 v29 = 2050;
    double v30 = v26;
    __int16 v31 = 2050;
    double v32 = sub_10080EF30(v19);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  2LL,  "#fusion,data input arrived while fused state is in sleep mode for,%{public}.2f,[s],waking up to process the data,n ow_mct,%{public}.3f,propagation_us,%{public}.3f",  &v27,  32);
    unint64_t v21 = (uint8_t *)v20;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::checkLCFusionState()", "%s\n", v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  if (*(_DWORD *)(a1 + 2160) == 2)
  {
    sub_1004CDF80(a1 + 1112, &v26);
    __int128 v9 = *(void **)(a1 + 216);
    if (v9 != (void *)(a1 + 224))
    {
      do
      {
        sub_1004CDF80((uint64_t)(v9 + 11), &v26);
        __int128 v10 = (void *)v9[1];
        if (v10)
        {
          do
          {
            unint64_t v11 = v10;
            __int128 v10 = (void *)*v10;
          }

          while (v10);
        }

        else
        {
          do
          {
            unint64_t v11 = (void *)v9[2];
            BOOL v12 = *v11 == (void)v9;
            __int128 v9 = v11;
          }

          while (!v12);
        }

        __int128 v9 = v11;
      }

      while (v11 != (void *)(a1 + 224));
    }

    for (uint64_t i = *(void **)(a1 + 240); i; uint64_t i = (void *)*i)
      sub_1004CDF80((uint64_t)(i + 7), &v26);
  }

  *(_DWORD *)(a1 + 2160) = 3;
  if (*(_BYTE *)(a1 + 2144)) {
    BOOL v14 = v5 <= 5.0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v15 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *(double *)(a1 + 2152);
      *(_DWORD *)buf = 134349568;
      double v34 = v16;
      __int16 v35 = 2050;
      double v36 = v26;
      __int16 v37 = 2050;
      double v38 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,likely missing or late arrival wakeup msg,force wakeup from sleep after,%{public}.2f,[s]",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      double v22 = *(double *)(a1 + 2152);
      int v27 = 134349568;
      double v28 = v22;
      __int16 v29 = 2050;
      double v30 = v26;
      __int16 v31 = 2050;
      double v32 = v5;
      LODWORD(v25) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,likely missing or late arrival wakeup msg,force wakeup from sleep after,%{public}.2f,[s]",  &v27,  v25);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::checkLCFusionState()", "%s\n", v23);
      if (v24 != buf) {
        free(v24);
      }
    }

    *(_BYTE *)(a1 + 2144) = 0;
    *(void *)(a1 + 2152) = 0xBFF0000000000000LL;
    goto LABEL_30;
  }

void sub_100AA2E54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100AA2E60(uint64_t a1, void *a2)
{
  uint64_t result = sub_100364874(*(void *)(a1 + 1696), a2);
  if ((_DWORD)result)
  {
    uint64_t v4 = *(void *)(a1 + 1696);
    double v6 = *(double *)(v4 + 384);
    uint64_t v5 = *(void *)(v4 + 392);
    double v107 = v6;
    uint64_t v108 = v5;
    if (!(_DWORD)v5) {
      return 0LL;
    }
    if (*(_BYTE *)(a1 + 2208))
    {
      *(double *)buf = v107;
      *(_DWORD *)&uint8_t buf[8] = v108;
      sub_100AA44E4(v4, (uint64_t)&buf[16]);
      *(void *)int v109 = &v107;
      uint64_t v7 = sub_100ABF090((uint64_t **)(a1 + 2240), &v107, (uint64_t)&unk_1012CF090, (void **)v109);
      __int128 v9 = *(_OWORD *)&v124[16];
      __int128 v8 = v125;
      __int128 v10 = *(_OWORD *)v124;
      __int128 v11 = *(_OWORD *)buf;
      *(_OWORD *)(v7 + memset(&v6[1], 0, 7) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v7 + 9) = v10;
      *(_OWORD *)(v7 + 11) = v9;
      *(_OWORD *)(v7 + 13) = v8;
      *(_OWORD *)(v7 + 5) = v11;
      return 1LL;
    }

    BOOL v12 = *(double **)(a1 + 240);
    if (v12)
    {
      double v13 = -1.0;
      do
      {
        BOOL v14 = v12[51] <= v13 || *((_DWORD *)v12 + 167) == 0;
        if (!v14) {
          double v13 = v12[51];
        }
        BOOL v12 = *(double **)v12;
      }

      while (v12);
    }

    else
    {
      double v13 = -1.0;
    }

    if (v6 >= 0.0 && (v13 >= v6 ? (BOOL v15 = v13 - v6 <= 6.0) : (BOOL v15 = 1), v15))
    {
      sub_100AA44E4(v4, (uint64_t)v103);
      if ((v108 - 1) > 1)
      {
        if ((_DWORD)v108 == 4 && v104 < 0.001)
        {
          unsigned int v30 = *(_DWORD *)(a1 + 1912);
          if (((0x21Fu >> (v30 - 1)) & 1) != 0) {
            int v31 = 6;
          }
          else {
            int v31 = *(_DWORD *)(a1 + 1912);
          }
          if (v30 - 1 < 0xA) {
            unsigned int v30 = v31;
          }
          if (v106 <= 0.3) {
            unsigned int v32 = v30;
          }
          else {
            unsigned int v32 = 7;
          }
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          int v33 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            int v34 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)buf = 134349568;
            *(double *)&uint8_t buf[4] = v107;
            *(_WORD *)&_BYTE buf[12] = 1026;
            *(_DWORD *)&_BYTE buf[14] = v32;
            *(_WORD *)&_BYTE buf[18] = 1026;
            *(_DWORD *)&buf[20] = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,InertialOdometry derived dynamics Mode update,dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d",  buf,  0x18u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            int v81 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)int v109 = 134349568;
            *(double *)&v109[4] = v107;
            __int16 v110 = 1026;
            *(_DWORD *)uint64_t v111 = v32;
            *(_WORD *)&v111[4] = 1026;
            *(_DWORD *)&v111[6] = v81;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,InertialOdometry derived dynamics Mode update,dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d",  v109,  24);
            uint64_t v83 = (char *)v82;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v82);
            if (v83 != buf) {
              free(v83);
            }
          }

          sub_10044A374(a1 + 1840, (uint64_t **)&v107, v32);
          sub_100AA469C(a1, &v107);
        }

        else
        {
          sub_100367134(*(void *)(a1 + 1696), (uint64_t)&v98);
          double v95 = sub_1003670B4(*(double **)(a1 + 1696));
          uint64_t v96 = v35;
          uint64_t v97 = v36;
          if (v98 >= v13
            || (uint64_t v37 = *(void *)(a1 + 1696),
                *(double *)buf = v13 + 0.001,
                sub_1003671B4(v37, (double *)buf, (uint64_t)&v98, (uint64_t)&v95)))
          {
            if (v99 >= 5.0) {
              int v38 = 6;
            }
            else {
              int v38 = 5;
            }
            if (v99 >= 2.5) {
              int v39 = v38;
            }
            else {
              int v39 = 4;
            }
            if (v99 >= 1.0) {
              unsigned int v40 = v39;
            }
            else {
              unsigned int v40 = 3;
            }
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            unint64_t v41 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134350849;
              *(double *)&uint8_t buf[4] = v98;
              *(_WORD *)&_BYTE buf[12] = 2049;
              *(double *)&_BYTE buf[14] = v99;
              *(_WORD *)&_BYTE buf[22] = 2050;
              *(void *)&buf[24] = v100;
              *(_WORD *)std::string::size_type v124 = 2049;
              *(void *)&v124[2] = v101;
              *(_WORD *)&v124[10] = 2050;
              *(double *)&v124[12] = v102;
              *(_WORD *)&v124[20] = 2049;
              *(void *)&v124[22] = v96;
              *(_WORD *)&v124[30] = 2050;
              *(void *)&__int128 v125 = v97;
              WORD4(v125) = 1026;
              *(_DWORD *)((char *)&v125 + 10) = v40;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,InertialOdometry derived speed meas update,GSpeed_mps,%{private}.2f,GSpeedVar,% {public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f,VSpeed_mps,%{private}.2f,VSpeedVar,%{publ ic}.2f,dynamicsMode,%{public}d",  buf,  0x4Eu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              *(_DWORD *)int v109 = 134350849;
              *(double *)&v109[4] = v98;
              __int16 v110 = 2049;
              *(double *)uint64_t v111 = v99;
              *(_WORD *)&v111[8] = 2050;
              uint64_t v112 = v100;
              __int16 v113 = 2049;
              uint64_t v114 = v101;
              __int16 v115 = 2050;
              double v116 = v102;
              __int16 v117 = 2049;
              uint64_t v118 = v96;
              __int16 v119 = 2050;
              uint64_t v120 = v97;
              __int16 v121 = 1026;
              unsigned int v122 = v40;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,InertialOdometry derived speed meas update,GSpeed_mps,%{private}.2f,GSpeedVar,% {public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f,VSpeed_mps,%{private}.2f,VSpeedVar,%{publ ic}.2f,dynamicsMode,%{public}d",  v109,  78);
              char v88 = (char *)v87;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v87);
              if (v88 != buf) {
                free(v88);
              }
            }

            double v42 = v102;
            int v43 = *(void **)(a1 + 216);
            if (v43 != (void *)(a1 + 224))
            {
              do
              {
                if (v40 > *(_DWORD *)(a1 + 1912)) {
                  *((_DWORD *)v43 + 108) = v40;
                }
                if (v42 <= 0.616850275)
                {
                  if (!sub_1004D20BC((uint64_t)(v43 + 11), &v98))
                  {
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    __int16 v44 = (os_log_s *)qword_101934968;
                    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                    {
                      int v45 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)buf = 134349312;
                      *(double *)&uint8_t buf[4] = v98;
                      *(_WORD *)&_BYTE buf[12] = 1026;
                      *(_DWORD *)&_BYTE buf[14] = v45;
                      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,provider hypothesis ground speed measurement update failed,hID,%{public}d",  buf,  0x12u);
                    }

                    if (sub_1002921D0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_101934960 != -1) {
                        dispatch_once(&qword_101934960, &stru_10186D380);
                      }
                      int v50 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)int v109 = 134349312;
                      *(double *)&v109[4] = v98;
                      __int16 v110 = 1026;
                      *(_DWORD *)uint64_t v111 = v50;
                      LODWORD(v94) = 18;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,provider hypothesis ground speed measurement update failed,hID,%{public}d",  v109,  v94);
                      int v52 = (char *)v51;
                      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v51);
                      if (v52 != buf) {
                        free(v52);
                      }
                    }
                  }

                  if (!sub_1004D3580((uint64_t)(v43 + 11), &v95))
                  {
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    int v46 = (os_log_s *)qword_101934968;
                    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                    {
                      int v47 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)buf = 134349312;
                      *(double *)&uint8_t buf[4] = v95;
                      *(_WORD *)&_BYTE buf[12] = 1026;
                      *(_DWORD *)&_BYTE buf[14] = v47;
                      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d",  buf,  0x12u);
                    }

                    if (sub_1002921D0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_101934960 != -1) {
                        dispatch_once(&qword_101934960, &stru_10186D380);
                      }
                      int v53 = *((_DWORD *)v43 + 173);
                      *(_DWORD *)int v109 = 134349312;
                      *(double *)&v109[4] = v95;
                      __int16 v110 = 1026;
                      *(_DWORD *)uint64_t v111 = v53;
                      LODWORD(v94) = 18;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d",  v109,  v94);
                      unint64_t v55 = (char *)v54;
                      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v54);
                      if (v55 != buf) {
                        free(v55);
                      }
                    }
                  }
                }

                uint64_t v48 = (void *)v43[1];
                if (v48)
                {
                  do
                  {
                    uint64_t v49 = v48;
                    uint64_t v48 = (void *)*v48;
                  }

                  while (v48);
                }

                else
                {
                  do
                  {
                    uint64_t v49 = (void *)v43[2];
                    BOOL v14 = *v49 == (void)v43;
                    int v43 = v49;
                  }

                  while (!v14);
                }

                int v43 = v49;
              }

              while (v49 != (void *)(a1 + 224));
            }

            for (uint64_t i = *(uint64_t **)(a1 + 240); i; uint64_t i = (uint64_t *)*i)
            {
              if (v40 > *(_DWORD *)(a1 + 1912)) {
                *((_DWORD *)i + 100) = v40;
              }
              if (v42 <= 0.616850275)
              {
                if (!sub_1004D20BC((uint64_t)(i + 7), &v98))
                {
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  __int16 v63 = (os_log_s *)qword_101934968;
                  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                  {
                    int v64 = *((_DWORD *)i + 165);
                    *(_DWORD *)buf = 134349312;
                    *(double *)&uint8_t buf[4] = v98;
                    *(_WORD *)&_BYTE buf[12] = 1026;
                    *(_DWORD *)&_BYTE buf[14] = v64;
                    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,fused hypothesis ground speed measurement update failed,hID,%{public}d",  buf,  0x12u);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    int v67 = *((_DWORD *)i + 165);
                    *(_DWORD *)int v109 = 134349312;
                    *(double *)&v109[4] = v98;
                    __int16 v110 = 1026;
                    *(_DWORD *)uint64_t v111 = v67;
                    LODWORD(v94) = 18;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,fused hypothesis ground speed measurement update failed,hID,%{public}d",  v109,  v94);
                    __int16 v69 = (char *)v68;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v68);
                    if (v69 != buf) {
                      free(v69);
                    }
                  }
                }

                if (!sub_1004D3580((uint64_t)(i + 7), &v95))
                {
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  unint64_t v65 = (os_log_s *)qword_101934968;
                  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                  {
                    int v66 = *((_DWORD *)i + 165);
                    *(_DWORD *)buf = 134349312;
                    *(double *)&uint8_t buf[4] = v95;
                    *(_WORD *)&_BYTE buf[12] = 1026;
                    *(_DWORD *)&_BYTE buf[14] = v66;
                    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d",  buf,  0x12u);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    int v70 = *((_DWORD *)i + 165);
                    *(_DWORD *)int v109 = 134349312;
                    *(double *)&v109[4] = v95;
                    __int16 v110 = 1026;
                    *(_DWORD *)uint64_t v111 = v70;
                    LODWORD(v94) = 18;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d",  v109,  v94);
                    __int128 v72 = (char *)v71;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v71);
                    if (v72 != buf) {
                      free(v72);
                    }
                  }
                }
              }
            }
          }

          else
          {
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            __int128 v73 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349312;
              *(double *)&uint8_t buf[4] = v13;
              *(_WORD *)&_BYTE buf[12] = 2050;
              *(double *)&_BYTE buf[14] = v98;
              _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "#fusion,failed to extrapolate time-lagged InertialOdometry data,most recent filter mct,%{public}.3f,IO t imeMCT,%{public}.3f",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              *(_DWORD *)int v109 = 134349312;
              *(double *)&v109[4] = v13;
              __int16 v110 = 2050;
              *(double *)uint64_t v111 = v98;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,failed to extrapolate time-lagged InertialOdometry data,most recent filter mct,%{public}.3f,IO t imeMCT,%{public}.3f",  v109,  22);
              __int128 v75 = (char *)v74;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v74);
              if (v75 != buf) {
                free(v75);
              }
            }
          }
        }

        return 1LL;
      }

      if (*(_BYTE *)(a1 + 2096)
        || *(_DWORD *)(a1 + 96) != 1
        || vabdd_f64(sub_10037FE24(), *(double *)(a1 + 76)) >= *(double *)(a1 + 88)
        || *(double *)(a1 + 52) >= 5.0
        || *(double *)(a1 + 44) < 4.0
        || (*(void *)buf = 0xBFF0000000000000LL, sub_10044B44C((void *)(a1 + 1840), (double *)buf))
        && !sub_100AA45AC((void *)(a1 + 2016), &dbl_101347858))
      {
        uint64_t result = sub_10044B44C((void *)(a1 + 1840), &dbl_101347860);
        *(double *)(a1 + 2136) = v105 + *(double *)(a1 + 2136);
        if ((_DWORD)result)
        {
          if ((_DWORD)v108 == 2) {
            int v16 = 2;
          }
          else {
            int v16 = 1;
          }
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          int v17 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            int v18 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)buf = 134349568;
            *(double *)&uint8_t buf[4] = v107;
            *(_WORD *)&_BYTE buf[12] = 1026;
            *(_DWORD *)&_BYTE buf[14] = v16;
            *(_WORD *)&_BYTE buf[18] = 1026;
            *(_DWORD *)&buf[20] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d",  buf,  0x18u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            int v84 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)int v109 = 134349568;
            *(double *)&v109[4] = v107;
            __int16 v110 = 1026;
            *(_DWORD *)uint64_t v111 = v16;
            *(_WORD *)&v111[4] = 1026;
            *(_DWORD *)&v111[6] = v84;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d",  v109,  24);
            int v86 = (char *)v85;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v85);
            if (v86 != buf) {
              free(v86);
            }
          }

          uint64_t v19 = *(void **)(a1 + 216);
          if (v19 != (void *)(a1 + 224))
          {
            do
            {
              *((_DWORD *)v19 + 108) = v16;
              if (!sub_1004CFB44((uint64_t)(v19 + 11), &v107, 1.5))
              {
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                uint64_t v20 = (os_log_s *)qword_101934968;
                if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                {
                  int v21 = *((_DWORD *)v19 + 173);
                  *(_DWORD *)buf = 134349312;
                  *(double *)&uint8_t buf[4] = v107;
                  *(_WORD *)&_BYTE buf[12] = 1026;
                  *(_DWORD *)&_BYTE buf[14] = v21;
                  _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d",  buf,  0x12u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  int v24 = *((_DWORD *)v19 + 173);
                  *(_DWORD *)int v109 = 134349312;
                  *(double *)&v109[4] = v107;
                  __int16 v110 = 1026;
                  *(_DWORD *)uint64_t v111 = v24;
                  LODWORD(v94) = 18;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d",  v109,  v94);
                  double v26 = (char *)v25;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v25);
                  if (v26 != buf) {
                    free(v26);
                  }
                }
              }

              double v22 = (void *)v19[1];
              if (v22)
              {
                do
                {
                  uint64_t v23 = v22;
                  double v22 = (void *)*v22;
                }

                while (v22);
              }

              else
              {
                do
                {
                  uint64_t v23 = (void *)v19[2];
                  BOOL v14 = *v23 == (void)v19;
                  uint64_t v19 = v23;
                }

                while (!v14);
              }

              uint64_t v19 = v23;
            }

            while (v23 != (void *)(a1 + 224));
          }

          for (j = *(uint64_t **)(a1 + 240); j; j = (uint64_t *)*j)
          {
            *((_DWORD *)j + 100) = v16;
            if (!sub_1004CFB44((uint64_t)(j + 7), &v107, 1.5))
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              double v57 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                int v58 = *((_DWORD *)j + 165);
                *(_DWORD *)buf = 134349312;
                *(double *)&uint8_t buf[4] = v107;
                *(_WORD *)&_BYTE buf[12] = 1026;
                *(_DWORD *)&_BYTE buf[14] = v58;
                _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d",  buf,  0x12u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v59 = *((_DWORD *)j + 165);
                *(_DWORD *)int v109 = 134349312;
                *(double *)&v109[4] = v107;
                __int16 v110 = 1026;
                *(_DWORD *)uint64_t v111 = v59;
                LODWORD(v94) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d",  v109,  v94);
                unint64_t v61 = (char *)v60;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v60);
                if (v61 != buf) {
                  free(v61);
                }
              }
            }
          }

          return 1LL;
        }
      }

      else
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        __int128 v76 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_INFO))
        {
          uint64_t v77 = *(void *)(a1 + 76);
          uint64_t v78 = *(void *)(a1 + 44);
          uint64_t v79 = *(void *)(a1 + 52);
          *(_DWORD *)buf = 134349825;
          *(void *)&uint8_t buf[4] = v77;
          *(_WORD *)&_BYTE buf[12] = 2050;
          *(double *)&_BYTE buf[14] = v107;
          *(_WORD *)&_BYTE buf[22] = 2049;
          *(void *)&buf[24] = v78;
          *(_WORD *)std::string::size_type v124 = 2049;
          *(void *)&v124[2] = v79;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_INFO,  "#fusion,iOSfix,%{public}.3f,IOmct,%{public}.3f,InertialOdometry derived zupt rejected,speed,%{private}.2f,sp eedAcc,%{private}.2f",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          uint64_t v89 = *(void *)(a1 + 76);
          uint64_t v90 = *(void *)(a1 + 44);
          uint64_t v91 = *(void *)(a1 + 52);
          *(_DWORD *)int v109 = 134349825;
          *(void *)&v109[4] = v89;
          __int16 v110 = 2050;
          *(double *)uint64_t v111 = v107;
          *(_WORD *)&v111[8] = 2049;
          uint64_t v112 = v90;
          __int16 v113 = 2049;
          uint64_t v114 = v91;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  1LL,  "#fusion,iOSfix,%{public}.3f,IOmct,%{public}.3f,InertialOdometry derived zupt rejected,speed,%{private}.2f,sp eedAcc,%{private}.2f",  v109,  42);
          uint64_t v93 = (char *)v92;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v92);
          if (v93 != buf) {
            free(v93);
          }
        }

        uint64_t result = 0LL;
        uint64_t v80 = *(void *)(a1 + 1696);
        *(void *)(v80 + 384) = 0xBFF0000000000000LL;
        *(_DWORD *)(v80 + 392) = 0;
      }
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v27 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&uint8_t buf[4] = v13;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(double *)&_BYTE buf[14] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "#fusion,most recent filter update time mct,%{public}.3f,ignoring old InertialOdometry derived data with mct,%{public}.3f",  buf,  0x16u);
      }

      uint64_t result = sub_1002921D0(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        *(_DWORD *)int v109 = 134349312;
        *(double *)&v109[4] = v13;
        __int16 v110 = 2050;
        *(double *)uint64_t v111 = v107;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,most recent filter update time mct,%{public}.3f,ignoring old InertialOdometry derived data with mct,%{public}.3f",  v109,  22);
        __int16 v29 = (char *)v28;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)",  "%s\n",  v28);
        if (v29 != buf) {
          free(v29);
        }
        return 0LL;
      }
    }
  }

  return result;
}

void sub_100AA44BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100AA44E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 152);
  float v4 = hypotf( (float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212),  (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
  double v5 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 376);
  *(double *)(a2 + 24) = *(double *)(a1 + 192) + *(double *)(a1 + 184);
  *(void *)(a2 + 32) = v6;
  *(double *)(a2 + 40) = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
  double v7 = *(double *)(a1 + 120);
  double v8 = 0.0;
  if (v7 > 0.0) {
    double v8 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v7;
  }
  *(double *)(a2 + 48) = v8;
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 48);
}

BOOL sub_100AA45AC(void *a1, double *a2)
{
  uint64_t v2 = a1[5];
  if (!v2) {
    return 0LL;
  }
  if (*a2 >= 0.0)
  {
    unint64_t v8 = v2 + a1[4] - 1;
    uint64_t v9 = *(void *)(a1[1] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
    uint64_t v10 = sub_10080E94C();
    int v13 = 1;
    double v11 = sub_10080EB58(v10, &v13);
    double v12 = *(double *)(v9 + ((v8 & 0x3F) << 6) + 16);
    if (v12 < 0.0 || v11 >= v12 && v11 - v12 > *a2) {
      return 0LL;
    }
  }

  unint64_t v5 = a1[5] + a1[4] - 1LL;
  unint64_t v6 = *(void *)(a1[1] + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + ((v5 & 0x3F) << 6);
  return *(void *)(v6 + 24) == 2LL && *(double *)(v6 + 40) > 0.8;
}

uint64_t sub_100AA469C(uint64_t a1, double *a2)
{
  float v4 = (int *)(a1 + 1912);
  BOOL v5 = sub_1004CF65C(a1 + 1112, a2, (_DWORD *)(a1 + 1912));
  if (!v5)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v6 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      double v7 = *a2;
      int v8 = *v4;
      *(_DWORD *)buf = 134349312;
      double v46 = v7;
      __int16 v47 = 1026;
      int v48 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,Failed to update fusion predictor filter dynamics mode,%{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      double v34 = *a2;
      int v35 = *v4;
      int v39 = 134349312;
      double v40 = v34;
      __int16 v41 = 1026;
      int v42 = v35;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,Failed to update fusion predictor filter dynamics mode,%{public}d",  &v39,  18);
      uint64_t v37 = (uint8_t *)v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)",  "%s\n",  v36);
      if (v37 != buf) {
        free(v37);
      }
    }
  }

  char v9 = !v5;
  uint64_t v10 = *(void **)(a1 + 216);
  if (v10 != (void *)(a1 + 224))
  {
    do
    {
      if (!sub_1004CF65C((uint64_t)(v10 + 11), a2, (_DWORD *)(a1 + 1912)))
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        double v11 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          double v12 = *a2;
          int v13 = *v4;
          int v14 = *((_DWORD *)v10 + 173);
          *(_DWORD *)buf = 134349568;
          double v46 = v12;
          __int16 v47 = 1026;
          int v48 = v13;
          __int16 v49 = 1026;
          int v50 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,Failed to update provider hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d",  buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          double v18 = *a2;
          int v19 = *v4;
          int v20 = *((_DWORD *)v10 + 173);
          int v39 = 134349568;
          double v40 = v18;
          __int16 v41 = 1026;
          int v42 = v19;
          __int16 v43 = 1026;
          int v44 = v20;
          LODWORD(v38) = 24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,Failed to update provider hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d",  &v39,  v38);
          double v22 = (uint8_t *)v21;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)",  "%s\n",  v21);
          if (v22 != buf) {
            free(v22);
          }
        }

        char v9 = 1;
      }

      BOOL v15 = (void *)v10[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          BOOL v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          int v16 = (void *)v10[2];
          BOOL v17 = *v16 == (void)v10;
          uint64_t v10 = v16;
        }

        while (!v17);
      }

      uint64_t v10 = v16;
    }

    while (v16 != (void *)(a1 + 224));
  }

  for (uint64_t i = *(uint64_t **)(a1 + 240); i; uint64_t i = (uint64_t *)*i)
  {
    if (!sub_1004CF65C((uint64_t)(i + 7), a2, v4))
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v24 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        double v25 = *a2;
        int v26 = *v4;
        int v27 = *((_DWORD *)i + 165);
        *(_DWORD *)buf = 134349568;
        double v46 = v25;
        __int16 v47 = 1026;
        int v48 = v26;
        __int16 v49 = 1026;
        int v50 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,Failed to update fused hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        double v28 = *a2;
        int v29 = *v4;
        int v30 = *((_DWORD *)i + 165);
        int v39 = 134349568;
        double v40 = v28;
        __int16 v41 = 1026;
        int v42 = v29;
        __int16 v43 = 1026;
        int v44 = v30;
        LODWORD(v38) = 24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,Failed to update fused hypothesis predictor filter dynamics mode,%{public}d,hID,%{public}d",  &v39,  v38);
        unsigned int v32 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateAnticipatedDynamicsMode(const CFTimeInterval &)",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      char v9 = 1;
    }
  }

  return v9 & 1;
}

void sub_100AA4C44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

BOOL sub_100AA4C5C(uint64_t a1, uint64_t a2)
{
  float v4 = (uint64_t **)(a1 + 2184);
  uint64_t v5 = a1 + 2192;
  sub_10031C110(a1 + 2184, *(void **)(a1 + 2192));
  *(void *)(a1 + 2184) = v5;
  *(void *)(a1 + 2200) = 0LL;
  *(void *)(a1 + 2192) = 0LL;
  if (!*(_BYTE *)(a1 + 2164))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int16 v41 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "#Error,Feed setWiFiLocationBatched,LC Fusion is not configured.",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v6memset(&v6[1], 0, 7) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,Feed setWiFiLocationBatched,LC Fusion is not configured.",  &v67,  2);
    __int16 v43 = (uint8_t *)v42;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v42);
LABEL_81:
    if (v43 != buf) {
      free(v43);
    }
    return 0LL;
  }

  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  unint64_t v6 = *(int **)(a2 + 800);
  if (!v6)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v45 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "#fusion,setWiFiLocationBatched,batch location data is nullptr,nothing to process.",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v6memset(&v6[1], 0, 7) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,setWiFiLocationBatched,batch location data is nullptr,nothing to process.",  &v67,  2);
    __int16 v43 = (uint8_t *)v46;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v46);
    goto LABEL_81;
  }

  uint64_t v7 = sub_100CBED60(v6);
  if (v7)
  {
    unint64_t v8 = 0LL;
    uint64_t v51 = (uint64_t **)(a1 + 192);
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v50 = _Q0;
    while (1)
    {
      sub_100CBE5DC(*(void *)(a2 + 800), v8, (uint64_t)&v56);
      if (sub_100AA56FC(v14, v61) && v59 > 0.0 && !sub_10029286C(v57, v58)) {
        break;
      }
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      BOOL v15 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&uint8_t buf[4] = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#fusion,setWiFiLocationBatched,invalid wsb location is skipped,wsb_location_iosTime,%{public}.3f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v67 = 134349056;
        double v68 = v60;
        LODWORD(v49) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,setWiFiLocationBatched,invalid wsb location is skipped,wsb_location_iosTime,%{public}.3f",  &v67,  v49);
        int v39 = (uint8_t *)v38;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v38);
        if (v39 != buf) {
          free(v39);
        }
      }

void sub_100AA56EC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100AA56FC(uint64_t a1, int a2)
{
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  double v3 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "#fusion,unsupported location,type,%{public}d",  buf,  8u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,unsupported location,type,%{public}d",  v7,  8);
    unint64_t v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::isLocationTypeSupported(CLLocationType) const",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
    return 0LL;
  }

  return result;
}

void sub_100AA58C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

BOOL sub_100AA58D0(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 2164))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v20 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "#Error,getFilteredWiFiLocationBatched,LC Fusion is not configured.",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,getFilteredWiFiLocationBatched,LC Fusion is not configured.",  &v42,  2);
    __int128 v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const",  "%s\n",  v22);
LABEL_68:
    if (v23 != buf) {
      free(v23);
    }
    return 0LL;
  }

  if (!*(void *)(a1 + 2200))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v24 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "#fusion,getFilteredWiFiLocationBatched,no filtered wsb location data to return",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,getFilteredWiFiLocationBatched,no filtered wsb location data to return",  &v42,  2);
    __int128 v23 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const",  "%s\n",  v25);
    goto LABEL_68;
  }

  uint64_t v3 = a2;
  float v4 = *(int **)(a2 + 800);
  if (!v4)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v29 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "#fusion,getFilteredWiFiLocationBatched,batch location data is nullptr,nothing to process.",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,getFilteredWiFiLocationBatched,batch location data is nullptr,nothing to process.",  &v42,  2);
    __int128 v23 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const",  "%s\n",  v30);
    goto LABEL_68;
  }

  uint64_t v5 = sub_100CBED60(v4);
  if (!v5)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v31 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "#fusion,getFilteredWiFiLocationBatch,no allocated locations buffer,nothing to process.",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v42) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,getFilteredWiFiLocationBatch,no allocated locations buffer,nothing to process.",  &v42,  2);
    __int128 v23 = (uint8_t *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const",  "%s\n",  v32);
    goto LABEL_68;
  }

  uint64_t v38 = v3;
  unint64_t v39 = v5;
  unint64_t v6 = *(void **)(a1 + 2184);
  unint64_t v7 = 0LL;
  if (v6 != (void *)(a1 + 2192))
  {
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v40 = _Q0;
    do
    {
      int v42 = 0xFFFF;
      __int128 v43 = 0uLL;
      __int128 v44 = xmmword_1012E0070;
      __int128 v45 = v40;
      __int128 v46 = v40;
      __int128 v47 = v40;
      int v48 = 0;
      unint64_t v49 = 0xBFF0000000000000LL;
      memset(v50, 0, sizeof(v50));
      unint64_t v51 = 0xBFF0000000000000LL;
      int v52 = 0x7FFFFFFF;
      uint64_t v54 = 0LL;
      __int128 v53 = 0uLL;
      char v55 = 0;
      if (sub_100AA621C(v5, v6[5], (uint64_t)&v42))
      {
        uint64_t v13 = v6[5];
        unint64_t v51 = *(void *)(v13 + 152);
        int v15 = *(_DWORD *)(v13 + 172);
        int v14 = *(_DWORD *)(v13 + 176);
        int v52 = *(_DWORD *)(v13 + 160);
        LODWORD(v53) = v14;
        int v42 = v15;
        *(void *)((char *)&v53 + 4) = *(void *)(v13 + 164);
        *(_OWORD *)&v50[1] = *(_OWORD *)(v13 + 136);
        sub_100CBECF0(*(void *)(v3 + 800), (uint64_t)&v42, v7++);
        if (v7 >= v39) {
          break;
        }
      }

      else
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v16 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#fusion,getFilteredWiFiLocationBatch,failed to convert to daemon location,wsb location sample skipped",  buf,  2u);
        }

        uint64_t v5 = sub_1002921D0(115, 2);
        uint64_t v3 = v38;
        if ((_DWORD)v5)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          v41[0] = 0;
          LODWORD(v36) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,getFilteredWiFiLocationBatch,failed to convert to daemon location,wsb location sample skipped",  v41,  v36);
          unint64_t v37 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const",  "%s\n",  v19);
          uint64_t v5 = (uint64_t)v37;
          if (v37 != buf) {
            free(v37);
          }
        }
      }

      uint64_t v17 = (void *)v6[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          uint64_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          int v18 = (void *)v6[2];
          _ZF = *v18 == (void)v6;
          unint64_t v6 = v18;
        }

        while (!_ZF);
      }

      unint64_t v6 = v18;
    }

    while (v18 != (void *)(a1 + 2192));
  }

  unint64_t v26 = v39;
  if (*(void *)(a1 + 2200) > v39)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v27 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)(a1 + 2200);
      *(_DWORD *)buf = 67240448;
      int v57 = v39;
      __int16 v58 = 1026;
      int v59 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "#Error,getFilteredWiFiLocationBatch,output wsb batch buffer not the same size as processed wsb locations,wsbBuff erSize,%{public}d,NumFilteredwsbLocations,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v33 = *(void *)(a1 + 2200);
      int v42 = 67240448;
      LODWORD(v43) = v39;
      WORD2(v43) = 1026;
      *(_DWORD *)((char *)&v43 + 6) = v33;
      LODWORD(v36) = 14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,getFilteredWiFiLocationBatch,output wsb batch buffer not the same size as processed wsb locations,wsbBuff erSize,%{public}d,NumFilteredwsbLocations,%{public}d",  &v42,  v36);
      int v35 = (uint8_t *)v34;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const",  "%s\n",  v34);
      if (v35 != buf) {
        free(v35);
      }
      uint64_t v3 = v38;
      unint64_t v26 = v39;
    }
  }

  if (v7 < v26) {
    sub_100CBED68(*(int **)(v3 + 800), v7);
  }
  return 1LL;
}

void sub_100AA620C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100AA621C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 96) = 0LL;
  *(void *)(a3 + 104) = 0LL;
  *(_DWORD *)(a3 + 112) = 0;
  *(void *)(a3 + 136) = 0LL;
  *(void *)(a3 + 144) = 0LL;
  *(void *)(a3 + 128) = 0LL;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 12) = 0LL;
  *(void *)(a3 + 4) = 0LL;
  *(_OWORD *)(a3 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(void *)(a3 + 88) = 0xBFF0000000000000LL;
  *(void *)(a3 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  int v8 = *(_DWORD *)(a2 + 128);
  if (!v8)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v11 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "#Error,convertFusedLocationToCLDaemonLocation,fused location type is Unknown",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v16[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,convertFusedLocationToCLDaemonLocation,fused location type is Unknown",  v16,  2);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::convertFusedLocationToCLDaemonLocation(const LCFusionProviderLocation &, CLDaemonLocation &) const",  "%s\n",  v12);
LABEL_21:
    if (v13 != buf) {
      free(v13);
    }
    return 0LL;
  }

  double v9 = *(double *)(a2 + 40);
  if (v9 > 0.0)
  {
    *(_DWORD *)(a3 + 96) = v8;
    *(void *)(a3 + 76) = *(void *)(a2 + 8);
    *(_OWORD *)(a3 + 4) = *(_OWORD *)(a2 + 24);
    *(double *)(a3 + 20) = v9;
    *(_OWORD *)(a3 + 28) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a3 + 44) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a3 + 60) = *(_OWORD *)(a2 + 96);
    *(_DWORD *)(a3 + 84) = *(_DWORD *)(a2 + 120);
    *(void *)(a3 + 88) = *(void *)(a2 + 112);
    BOOL result = 1LL;
    *(_DWORD *)(a3 + 132) = 1;
    return result;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  int v14 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "#Error,convertFusedLocationToCLDaemonLocation,get fused location failed,hunc <= 0",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v16[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,convertFusedLocationToCLDaemonLocation,get fused location failed,hunc <= 0",  v16,  2);
    uint64_t v13 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::convertFusedLocationToCLDaemonLocation(const LCFusionProviderLocation &, CLDaemonLocation &) const",  "%s\n",  v15);
    goto LABEL_21;
  }

  return result;
}

void sub_100AA657C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100AA6588(uint64_t a1, double *a2)
{
  if (*(_BYTE *)(a1 + 2144))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    float v4 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      double v5 = *a2;
      uint64_t v6 = *(void *)(a1 + 2152);
      *(_DWORD *)buf = 134349312;
      double v26 = v5;
      __int16 v27 = 2050;
      uint64_t v28 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,already in AP sleep mode since,%{public}.3f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a1 + 2152);
      int v21 = 134349312;
      uint64_t v22 = v7;
      __int16 v23 = 2050;
      uint64_t v24 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,already in AP sleep mode since,%{public}.3f",  &v21,  22);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::enteringSleepMode(const CFTimeInterval &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  else
  {
    *(_BYTE *)(a1 + 2144) = 1;
    *(double *)(a1 + 2152) = *a2;
    *(_BYTE *)(a1 + 2072) = 0;
    *(_BYTE *)(a1 + 159) = 0;
    *(void *)(a1 + 176) = 0xBFF0000000000000LL;
    sub_100008390(a1 + 2216, *(void **)(a1 + 2224));
    *(void *)(a1 + 2216) = a1 + 2224;
    *(void *)(a1 + 2232) = 0LL;
    *(void *)(a1 + 2224) = 0LL;
    sub_100008390(a1 + 2240, *(void **)(a1 + 2248));
    *(void *)(a1 + 2240) = a1 + 2248;
    *(void *)(a1 + 2256) = 0LL;
    *(void *)(a1 + 2248) = 0LL;
    *(_BYTE *)(a1 + 2memset(&v8[8], 0, 208) = 1;
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v11 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      double v12 = *a2;
      *(_DWORD *)buf = 134349056;
      double v26 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#fusion,entering AP sleep mode at mct,%{public}.3f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v18 = *(void *)a2;
      int v21 = 134349056;
      uint64_t v22 = v18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,entering AP sleep mode at mct,%{public}.3f",  &v21,  12);
      int v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::enteringSleepMode(const CFTimeInterval &)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    sub_1004CCAFC(a1 + 1112, a2);
    uint64_t v13 = *(void **)(a1 + 216);
    if (v13 != (void *)(a1 + 224))
    {
      do
      {
        sub_1004CCAFC((uint64_t)(v13 + 11), a2);
        int v14 = (void *)v13[1];
        if (v14)
        {
          do
          {
            int v15 = v14;
            int v14 = (void *)*v14;
          }

          while (v14);
        }

        else
        {
          do
          {
            int v15 = (void *)v13[2];
            BOOL v16 = *v15 == (void)v13;
            uint64_t v13 = v15;
          }

          while (!v16);
        }

        uint64_t v13 = v15;
      }

      while (v15 != (void *)(a1 + 224));
    }

    for (uint64_t i = *(void **)(a1 + 240); i; uint64_t i = (void *)*i)
      sub_1004CCAFC((uint64_t)(i + 7), a2);
    *(_DWORD *)(a1 + 2160) = 2;
  }

void sub_100AA6994(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100AA69A0(uint64_t a1, double *a2)
{
  if (*(_BYTE *)(a1 + 2144))
  {
    double v4 = *a2;
    double v5 = *(double *)(a1 + 2152);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v6 = v4 - v5;
    uint64_t v7 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *(double *)(a1 + 2152);
      double v9 = *a2;
      *(_DWORD *)buf = 134349568;
      double v30 = v8;
      __int16 v31 = 2050;
      double v32 = v9;
      __int16 v33 = 2050;
      double v34 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,AP sleep wakeup after,%{public}.2f,[s]",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      double v10 = *(double *)(a1 + 2152);
      double v11 = *a2;
      int v23 = 134349568;
      double v24 = v10;
      __int16 v25 = 2050;
      double v26 = v11;
      __int16 v27 = 2050;
      double v28 = v6;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,AP sleep wakeup after,%{public}.2f,[s]",  &v23,  32);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::wakeUp(const CFTimeInterval &)", "%s\n", v12);
LABEL_28:
      if (v13 != buf) {
        free(v13);
      }
    }
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v14 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      double v15 = *a2;
      *(_DWORD *)buf = 134349056;
      double v30 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "#fusion,now_mct,%{public}.3f,AP sleep wakeup called while fused state is not in sleep mode, waking up",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      double v21 = *a2;
      int v23 = 134349056;
      double v24 = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,now_mct,%{public}.3f,AP sleep wakeup called while fused state is not in sleep mode, waking up",  &v23,  12);
      uint64_t v13 = (uint8_t *)v22;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::wakeUp(const CFTimeInterval &)", "%s\n", v22);
      goto LABEL_28;
    }
  }

  sub_1004CDF80(a1 + 1112, a2);
  BOOL v16 = *(void **)(a1 + 216);
  if (v16 != (void *)(a1 + 224))
  {
    do
    {
      sub_1004CDF80((uint64_t)(v16 + 11), a2);
      uint64_t v17 = (void *)v16[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v16[2];
          BOOL v19 = *v18 == (void)v16;
          BOOL v16 = v18;
        }

        while (!v19);
      }

      BOOL v16 = v18;
    }

    while (v18 != (void *)(a1 + 224));
  }

  for (uint64_t i = *(void **)(a1 + 240); i; uint64_t i = (void *)*i)
    sub_1004CDF80((uint64_t)(i + 7), a2);
  *(_BYTE *)(a1 + 2144) = 0;
  *(void *)(a1 + 2152) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 2160) = 4;
}

void sub_100AA6D70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100AA6D7C(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  *a4 = 0;
  *a3 = 0;
  uint64_t v8 = sub_10080E94C();
  *(_DWORD *)buf = 0;
  double v9 = sub_10080EB58(v8, buf);
  double v10 = (__int128 *)(a2 + 8);
  double v11 = *(double *)(a2 + 8);
  double v12 = v9 - v11;
  if (v9 - v11 >= 0.0)
  {
    double v22 = *(double *)(a2 + 112);
    if (v12 <= v22 || (v22 >= 0.0 ? (BOOL v23 = v9 <= v11) : (BOOL v23 = 1), v23))
    {
      if (v12 <= 300.0)
      {
        if (v12 >= 2.0)
        {
          unint64_t v39 = (unsigned int *)(a2 + 128);
          *(void *)buf = a2 + 128;
          __int128 v40 = sub_100ABF1B8((uint64_t **)(a1 + 192), (int *)(a2 + 128), (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5;
          while (1)
          {
            __int128 v40 = (uint64_t **)*v40;
            *(void *)buf = a2 + 128;
            sub_100ABF1B8((uint64_t **)(a1 + 192), (int *)(a2 + 128), (uint64_t)&unk_1012CF090, (_DWORD **)buf);
            if (!v40) {
              break;
            }
            __int16 v41 = v40[1];
            if (v41 && (*(unsigned int (**)(uint64_t *, uint64_t))(*v41 + 16))(v41, a2))
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              int v42 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                double v43 = *(double *)v10;
                __int128 v44 = sub_100832C40(*v39);
                uint64_t v45 = *(void *)(a2 + 24);
                __int128 v46 = *(const char **)(a2 + 32);
                double v47 = *(double *)(a2 + 112);
                *(_DWORD *)buf = 134350339;
                *(double *)&uint8_t buf[4] = v43;
                __int16 v91 = 2082;
                uint64_t v92 = v44;
                __int16 v93 = 2049;
                uint64_t v94 = v45;
                __int16 v95 = 2049;
                uint64_t v96 = v46;
                __int16 v97 = 2050;
                double v98 = v47;
                __int16 v99 = 2050;
                double v100 = v12;
                _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "Duplicate location detected in LC Fusion,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private} .7f,lon,%{private}.7f,lifespan,%{public}.1f,age,%{public}.3f",  buf,  0x3Eu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                uint64_t v66 = qword_101934968;
                double v67 = *(double *)v10;
                double v68 = sub_100832C40(*v39);
                uint64_t v69 = *(void *)(a2 + 24);
                float v70 = *(const char **)(a2 + 32);
                double v71 = *(double *)(a2 + 112);
                int v74 = 134350339;
                double v75 = v67;
                __int16 v76 = 2082;
                uint64_t v77 = v68;
                __int16 v78 = 2049;
                uint64_t v79 = v69;
                __int16 v80 = 2049;
                int v81 = v70;
                __int16 v82 = 2050;
                double v83 = v71;
                __int16 v84 = 2050;
                double v85 = v12;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v66,  2LL,  "Duplicate location detected in LC Fusion,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private} .7f,lon,%{private}.7f,lifespan,%{public}.1f,age,%{public}.3f",  &v74,  62);
                char v73 = (char *)v72;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::ageCheckLocation(LCFusionProviderLocation &, BOOL &, BOOL &)",  "%s\n",  v72);
                if (v73 != buf) {
                  free(v73);
                }
              }

              *a3 = 1;
              int v38 = 3;
              goto LABEL_21;
            }
          }
        }
      }

      else
      {
        *a3 = 1;
        int v38 = 4;
LABEL_21:
        *(_DWORD *)(a1 + 1104) = v38;
      }
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      double v24 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void *)(a2 + 8);
        double v26 = sub_100832C40(*(_DWORD *)(a2 + 128));
        uint64_t v27 = *(void *)(a2 + 24);
        double v28 = *(const char **)(a2 + 32);
        double v29 = *(double *)(a2 + 112);
        uint64_t v30 = sub_10080E94C();
        double v31 = sub_10080EF30(v30);
        *(_DWORD *)buf = 134350595;
        *(void *)&uint8_t buf[4] = v25;
        __int16 v91 = 2082;
        uint64_t v92 = v26;
        __int16 v93 = 2049;
        uint64_t v94 = v27;
        __int16 v95 = 2049;
        uint64_t v96 = v28;
        __int16 v97 = 2050;
        double v98 = v29;
        __int16 v99 = 2050;
        double v100 = v12;
        __int16 v101 = 2050;
        double v102 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "#Warning,Got expiredLocation,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private}.7lf,lon,%{private}. 7lf,lifespan,%{public}.1f,age,%{public}.3f,propagation_us,%{public}.3f",  buf,  0x48u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v57 = qword_101934968;
        double v58 = *(double *)(a2 + 8);
        int v59 = sub_100832C40(*(_DWORD *)(a2 + 128));
        uint64_t v61 = *(void *)(a2 + 24);
        double v60 = *(const char **)(a2 + 32);
        double v62 = *(double *)(a2 + 112);
        uint64_t v63 = sub_10080E94C();
        int v74 = 134350595;
        double v75 = v58;
        __int16 v76 = 2082;
        uint64_t v77 = v59;
        __int16 v78 = 2049;
        uint64_t v79 = v61;
        __int16 v80 = 2049;
        int v81 = v60;
        __int16 v82 = 2050;
        double v83 = v62;
        __int16 v84 = 2050;
        double v85 = v12;
        __int16 v86 = 2050;
        double v87 = sub_10080EF30(v63);
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v57,  0LL,  "#Warning,Got expiredLocation,timestamp_ios,%{public}.3f,provider,%{public}s,lat,%{private}.7lf,lon,%{private}. 7lf,lifespan,%{public}.1f,age,%{public}.3f,propagation_us,%{public}.3f",  &v74,  72);
        int v65 = (char *)v64;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::ageCheckLocation(LCFusionProviderLocation &, BOOL &, BOOL &)",  "%s\n",  v64);
        if (v65 != buf) {
          free(v65);
        }
      }

      *a4 = 1;
      __int128 v32 = *v10;
      __int128 v33 = v10[1];
      __int128 v34 = v10[3];
      *(_OWORD *)(a1 + 1008) = v10[2];
      *(_OWORD *)(a1 + 1024) = v34;
      *(_OWORD *)(a1 + 976) = v32;
      *(_OWORD *)(a1 + 992) = v33;
      __int128 v35 = v10[4];
      __int128 v36 = v10[5];
      __int128 v37 = v10[6];
      *(_OWORD *)(a1 + 1084) = *(__int128 *)((char *)v10 + 108);
      *(_OWORD *)(a1 + 1072) = v37;
      *(_OWORD *)(a1 + 1056) = v36;
      *(_OWORD *)(a1 + 1040) = v35;
    }
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v13 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a2 + 16);
      int v14 = *(const char **)(a2 + 24);
      uint64_t v16 = *(void *)(a2 + 32);
      uint64_t v17 = sub_100832C40(*(_DWORD *)(a2 + 128));
      double v18 = *(double *)v10;
      uint64_t v19 = sub_10080E94C();
      double v20 = sub_10080EF30(v19);
      *(_DWORD *)buf = 134350851;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v91 = 2049;
      uint64_t v92 = v14;
      __int16 v93 = 2049;
      uint64_t v94 = v16;
      __int16 v95 = 2082;
      uint64_t v96 = v17;
      __int16 v97 = 2050;
      double v98 = v12;
      __int16 v99 = 2050;
      double v100 = v18;
      __int16 v101 = 2050;
      double v102 = v9;
      __int16 v103 = 2050;
      double v104 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning,Got location with future timestamp,mct,%{public}.3f,lat,%{private}.7f,lon,%{private}.7f,provider,%{publ ic}s,age,%{public}.3f,timestampiOS,%{public}.3f,correcting to,%{public}.3f,propagation_us,%{public}.3f",  buf,  0x52u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v48 = qword_101934968;
      double v50 = *(double *)(a2 + 16);
      unint64_t v49 = *(const char **)(a2 + 24);
      uint64_t v51 = *(void *)(a2 + 32);
      int v52 = sub_100832C40(*(_DWORD *)(a2 + 128));
      double v53 = *(double *)v10;
      uint64_t v54 = sub_10080E94C();
      int v74 = 134350851;
      double v75 = v50;
      __int16 v76 = 2049;
      uint64_t v77 = v49;
      __int16 v78 = 2049;
      uint64_t v79 = v51;
      __int16 v80 = 2082;
      int v81 = v52;
      __int16 v82 = 2050;
      double v83 = v12;
      __int16 v84 = 2050;
      double v85 = v53;
      __int16 v86 = 2050;
      double v87 = v9;
      __int16 v88 = 2050;
      double v89 = sub_10080EF30(v54);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  0LL,  "#Warning,Got location with future timestamp,mct,%{public}.3f,lat,%{private}.7f,lon,%{private}.7f,provider,%{publ ic}s,age,%{public}.3f,timestampiOS,%{public}.3f,correcting to,%{public}.3f,propagation_us,%{public}.3f",  &v74,  82);
      int v56 = (char *)v55;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::ageCheckLocation(LCFusionProviderLocation &, BOOL &, BOOL &)",  "%s\n",  v55);
      if (v56 != buf) {
        free(v56);
      }
    }

    *(double *)double v10 = v9;
    uint64_t v21 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    *(double *)(a2 + 16) = sub_10080EB58(v21, buf);
  }

void sub_100AA7560(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100AA7570(uint64_t a1)
{
  BOOL result = 0;
  if (sub_100AA7648(a1 + 1712) && (sub_10044B44C((void *)(a1 + 1840), &dbl_101347860) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 2073)) {
      return 1;
    }
    if (*(_BYTE *)(a1 + 2074)) {
      return 1;
    }
    if (sub_10044B330((void *)(a1 + 1840), &dbl_101347860)) {
      return 1;
    }
    double v3 = sub_1003713F0();
    if (sub_1005F5294((_DWORD *)(a1 + 1968), v3)
      || (sub_10044B5B8(a1 + 1840, &dbl_101347860) & 1) != 0
      || sub_10044B920(a1 + 1840)
      || sub_10044B95C(a1 + 1840)
      || (sub_10044B800(a1 + 1840, &dbl_101347860) & 1) != 0
      || (sub_10044B6EC(a1 + 1840, &dbl_101347860) & 1) != 0)
    {
      return 1;
    }
  }

  return result;
}

BOOL sub_100AA7648(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    return 0LL;
  }
  int v2 = *(_DWORD *)(a1 + 12);
  if (!v2) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(a1 + 28);
  BOOL v12 = v3 <= 0;
  BOOL v4 = v3 > 0;
  uint64_t v5 = 1LL;
  if (v12) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = 2LL;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 <= 2)
  {
    int v8 = *(_DWORD *)(a1 + 20);
    BOOL v9 = (double)v2 / (double)v1 * 100.0 < 50.0 || (double)v8 / (double)v2 * 100.0 < 40.0;
    if (v9 && ((int v10 = *(_DWORD *)(a1 + 24), v10 < 5) || v8 <= 4))
    {
      BOOL v12 = v7 <= 1 || v10 <= 3;
      return !v12;
    }

    else
    {
      return 1LL;
    }
  }

  return v5;
}

uint64_t sub_100AA7718(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 2073) || *(_BYTE *)(a1 + 2074))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    BOOL v4 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 2073);
      int v6 = *(unsigned __int8 *)(a1 + 2074);
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)__int16 v119 = v5;
      *(_WORD *)&v119[4] = 1026;
      *(_DWORD *)&v119[6] = v6;
      *(_WORD *)uint64_t v120 = 2050;
      *(void *)&v120[2] = v7;
      *(_WORD *)__int16 v121 = 2050;
      *(void *)&v121[2] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,hasAirborneClient,%{public}d,hasFitnessClient,%{public}d,cfat,%{public}.3f,mct,%{public}.3f",  buf,  0x22u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v59 = *(unsigned __int8 *)(a1 + 2073);
    int v60 = *(unsigned __int8 *)(a1 + 2074);
    uint64_t v61 = *(void *)(a2 + 8);
    uint64_t v62 = *(void *)(a2 + 16);
    int v111 = 67240960;
    *(_DWORD *)uint64_t v112 = v59;
    *(_WORD *)&v112[4] = 1026;
    *(_DWORD *)&v112[6] = v60;
    *(_WORD *)__int16 v113 = 2050;
    *(void *)&v113[2] = v61;
    *(_WORD *)uint64_t v114 = 2050;
    *(void *)&v114[2] = v62;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,hasAirborneClient,%{public}d,hasFitnessClient,%{public}d,cfat,%{public}.3f,mct,%{public}.3f",  &v111,  34);
    int v64 = (uint8_t *)v63;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v63);
    if (v64 == buf) {
      goto LABEL_8;
    }
    goto LABEL_109;
  }

  if (*(_DWORD *)(a2 + 128) == 3)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    BOOL v12 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(void *)__int16 v119 = v13;
      *(_WORD *)&v119[8] = 2050;
      *(void *)uint64_t v120 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,accessory,cfat,%{public}.3f,mct,%{public}.3f",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v73 = *(void *)(a2 + 8);
    uint64_t v74 = *(void *)(a2 + 16);
    int v111 = 134349312;
    *(void *)uint64_t v112 = v73;
    *(_WORD *)&v112[8] = 2050;
    *(void *)__int16 v113 = v74;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,accessory,cfat,%{public}.3f,mct,%{public}.3f",  &v111,  22);
    int v64 = (uint8_t *)v75;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v75);
    if (v64 == buf) {
      goto LABEL_8;
    }
    goto LABEL_109;
  }

  if (sub_10044B330((void *)(a1 + 1840), &dbl_101347860))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v15 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a2 + 8);
      uint64_t v17 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(void *)__int16 v119 = v16;
      *(_WORD *)&v119[8] = 2050;
      *(void *)uint64_t v120 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,vehicleConnected,cfat,%{public}.3f,mct,%{public}.3f",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v76 = *(void *)(a2 + 8);
    uint64_t v77 = *(void *)(a2 + 16);
    int v111 = 134349312;
    *(void *)uint64_t v112 = v76;
    *(_WORD *)&v112[8] = 2050;
    *(void *)__int16 v113 = v77;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,vehicleConnected,cfat,%{public}.3f,mct,%{public}.3f",  &v111,  22);
    int v64 = (uint8_t *)v78;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v78);
    if (v64 == buf) {
      goto LABEL_8;
    }
LABEL_109:
    free(v64);
LABEL_8:
    uint64_t v9 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    double v10 = sub_10080EB58(v9, buf);
LABEL_9:
    *(double *)(a1 + 168) = v10;
    return 1LL;
  }

  uint64_t v18 = sub_10080E94C();
  *(_DWORD *)buf = 1;
  double v19 = sub_10080EB58(v18, buf);
  if (sub_1005F5294((_DWORD *)(a1 + 1968), v19))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v20 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a2 + 8);
      uint64_t v22 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(void *)__int16 v119 = v21;
      *(_WORD *)&v119[8] = 2050;
      *(void *)uint64_t v120 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,MapsRoutingActive,cfat,%{public}.3f,mct,%{public}.3f",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_130;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v79 = *(void *)(a2 + 8);
    uint64_t v80 = *(void *)(a2 + 16);
    int v111 = 134349312;
    *(void *)uint64_t v112 = v79;
    *(_WORD *)&v112[8] = 2050;
    *(void *)__int16 v113 = v80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,MapsRoutingActive,cfat,%{public}.3f,mct,%{public}.3f",  &v111,  22);
    __int16 v82 = (uint8_t *)v81;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v81);
    if (v82 == buf) {
      goto LABEL_130;
    }
    goto LABEL_145;
  }

  if (sub_10044B5B8(a1 + 1840, &dbl_101347860))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    BOOL v23 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(a2 + 8);
      uint64_t v25 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(void *)__int16 v119 = v24;
      *(_WORD *)&v119[8] = 2050;
      *(void *)uint64_t v120 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,CM driving,cfat,%{public}.3f,mct,%{public}.3f",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_130;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v89 = *(void *)(a2 + 8);
    uint64_t v90 = *(void *)(a2 + 16);
    int v111 = 134349312;
    *(void *)uint64_t v112 = v89;
    *(_WORD *)&v112[8] = 2050;
    *(void *)__int16 v113 = v90;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,CM driving,cfat,%{public}.3f,mct,%{public}.3f",  &v111,  22);
    __int16 v82 = (uint8_t *)v91;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v91);
    if (v82 == buf) {
      goto LABEL_130;
    }
    goto LABEL_145;
  }

  if (sub_10044B920(a1 + 1840) || sub_10044B95C(a1 + 1840))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v26 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = *(void *)(a2 + 8);
      uint64_t v28 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(void *)__int16 v119 = v27;
      *(_WORD *)&v119[8] = 2050;
      *(void *)uint64_t v120 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,Apple fitness,cfat,%{public}.3f,mct,%{public}.3f",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_130;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v92 = *(void *)(a2 + 8);
    uint64_t v93 = *(void *)(a2 + 16);
    int v111 = 134349312;
    *(void *)uint64_t v112 = v92;
    *(_WORD *)&v112[8] = 2050;
    *(void *)__int16 v113 = v93;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,Apple fitness,cfat,%{public}.3f,mct,%{public}.3f",  &v111,  22);
    __int16 v82 = (uint8_t *)v94;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v94);
    if (v82 == buf) {
      goto LABEL_130;
    }
    goto LABEL_145;
  }

  if (((sub_10044B6EC(a1 + 1840, &dbl_101347860) & 1) != 0 || sub_10044B800(a1 + 1840, &dbl_101347860))
    && sub_100AA45AC((void *)(a1 + 2016), &dbl_101347858))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v29 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v30 = *(void *)(a2 + 8);
      uint64_t v31 = *(void *)(a2 + 16);
      BOOL v32 = sub_100AA45AC((void *)(a1 + 2016), &dbl_101347858);
      *(_DWORD *)buf = 134349568;
      *(void *)__int16 v119 = v30;
      *(_WORD *)&v119[8] = 2050;
      *(void *)uint64_t v120 = v31;
      *(_WORD *)&v120[8] = 1026;
      *(_DWORD *)__int16 v121 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,highConfidenceOutdoorWalkingOrRunningOrCycling,cfat,%{public}.3f,mct,%{public}.3f,CLOutdoor,%{public}d",  buf,  0x1Cu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_130;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v96 = qword_101934968;
    uint64_t v98 = *(void *)(a2 + 8);
    uint64_t v97 = *(void *)(a2 + 16);
    int v111 = 134349568;
    *(void *)uint64_t v112 = v98;
    *(_WORD *)&v112[8] = 2050;
    *(void *)__int16 v113 = v97;
    *(_WORD *)&v113[8] = 1026;
    *(_DWORD *)uint64_t v114 = sub_100AA45AC((void *)(a1 + 2016), &dbl_101347858);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v96,  2LL,  "shouldBypassFusion,highConfidenceOutdoorWalkingOrRunningOrCycling,cfat,%{public}.3f,mct,%{public}.3f,CLOutdoor,%{public}d",  &v111,  28);
    __int16 v82 = (uint8_t *)v99;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v99);
    if (v82 == buf) {
      goto LABEL_130;
    }
    goto LABEL_145;
  }

  uint64_t v33 = *(void *)(a1 + 1696);
  double v34 = *(double *)(v33 + 384);
  int v37 = sub_10044B44C((void *)(a1 + 1840), &dbl_101347860);
  if ((_DWORD)v35 == 1) {
    int v38 = 1;
  }
  else {
    int v38 = v37;
  }
  if ((_DWORD)v35 == 2) {
    int v39 = 1;
  }
  else {
    int v39 = v38;
  }
  if ((v37 & 1) == 0 && (v35 - 1) >= 2 && !*(_BYTE *)(a1 + 2096) && *(double *)(a1 + 1776) > 20.0)
  {
    int v40 = *(_DWORD *)(a1 + 1792);
    if (v40 >= 21 && *(int *)(a1 + 1788) <= 19 && (double)*(int *)(a1 + 1796) / (double)v40 > 0.5)
    {
      double v41 = *(double *)(a1 + 1768);
      double v42 = *(double *)(a2 + 16) - v41;
      BOOL v43 = v41 > 0.0;
      double v44 = -1.0;
      if (v43) {
        double v44 = v42;
      }
      if (v44 <= 5.0)
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        double v83 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v85 = *(void *)(a2 + 8);
          uint64_t v84 = *(void *)(a2 + 16);
          uint64_t v86 = *(void *)(a1 + 1776);
          int v87 = *(_DWORD *)(a1 + 1792);
          if (v87) {
            double v88 = (double)*(int *)(a1 + 1796) / (double)v87;
          }
          else {
            double v88 = 0.0;
          }
          int v95 = *(_DWORD *)(a1 + 1788);
          *(_DWORD *)buf = 134350080;
          *(void *)__int16 v119 = v85;
          *(_WORD *)&v119[8] = 2050;
          *(void *)uint64_t v120 = v84;
          *(_WORD *)&v120[8] = 2050;
          *(void *)__int16 v121 = v86;
          *(_WORD *)&v121[8] = 2050;
          double v122 = v88;
          __int16 v123 = 1026;
          int v124 = v95;
          _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,GNSSNavSessionDetected,cfat,%{public}.3f,mct,%{public}.3f,GNSSSessionDuration_s,%{public} .1f,ratioOfEpochsWithGoodTrakcing,%{public}.2f,consecNumEpochsPoorTracking,%{public}d",  buf,  0x30u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_130;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v105 = *(void *)(a2 + 8);
        uint64_t v104 = *(void *)(a2 + 16);
        uint64_t v106 = *(void *)(a1 + 1776);
        int v107 = *(_DWORD *)(a1 + 1792);
        double v108 = v107 ? (double)*(int *)(a1 + 1796) / (double)v107 : 0.0;
        int v109 = *(_DWORD *)(a1 + 1788);
        int v111 = 134350080;
        *(void *)uint64_t v112 = v105;
        *(_WORD *)&v112[8] = 2050;
        *(void *)__int16 v113 = v104;
        *(_WORD *)&v113[8] = 2050;
        *(void *)uint64_t v114 = v106;
        *(_WORD *)&v114[8] = 2050;
        double v115 = v108;
        __int16 v116 = 1026;
        int v117 = v109;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,GNSSNavSessionDetected,cfat,%{public}.3f,mct,%{public}.3f,GNSSSessionDuration_s,%{public}.1 f,ratioOfEpochsWithGoodTrakcing,%{public}.2f,consecNumEpochsPoorTracking,%{public}d",  &v111,  48);
        __int16 v82 = (uint8_t *)v110;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v110);
        if (v82 == buf) {
          goto LABEL_130;
        }
LABEL_145:
        free(v82);
LABEL_130:
        double v10 = sub_1003713F0();
        goto LABEL_9;
      }
    }
  }

  if (!*(_BYTE *)(a1 + 159)) {
    return 0LL;
  }
  double v45 = sub_1003713F0();
  double v46 = *(double *)(a1 + 176);
  double v47 = v45 - *(double *)(a1 + 168);
  if (v46 <= 0.0)
  {
    double v46 = 5.0;
    if (!v39) {
      double v46 = 40.0;
    }
    *(double *)(a1 + 176) = v46;
  }

  if (v47 <= v46)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v48 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v49 = *(void *)(a2 + 8);
      uint64_t v50 = *(void *)(a2 + 16);
      uint64_t v51 = *(void *)(a1 + 168);
      double v52 = *(double *)(a1 + 176);
      *(_DWORD *)buf = 134349824;
      *(void *)__int16 v119 = v49;
      *(_WORD *)&v119[8] = 2050;
      *(void *)uint64_t v120 = v50;
      *(_WORD *)&v120[8] = 2050;
      *(void *)__int16 v121 = v51;
      *(_WORD *)&v121[8] = 2050;
      double v122 = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,passthroughHysteresis,cfat,%{public}.3f,mct,%{public}.3f,last_passthrough_mct,%{public}.3f,st ickinessTime_s,%{public}.1f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v53 = *(void *)(a2 + 8);
      uint64_t v54 = *(void *)(a2 + 16);
      uint64_t v55 = *(void *)(a1 + 168);
      double v56 = *(double *)(a1 + 176);
      int v111 = 134349824;
      *(void *)uint64_t v112 = v53;
      *(_WORD *)&v112[8] = 2050;
      *(void *)__int16 v113 = v54;
      *(_WORD *)&v113[8] = 2050;
      *(void *)uint64_t v114 = v55;
      *(_WORD *)&v114[8] = 2050;
      double v115 = v56;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,passthroughHysteresis,cfat,%{public}.3f,mct,%{public}.3f,last_passthrough_mct,%{public}.3f,st ickinessTime_s,%{public}.1f",  &v111,  42);
      double v58 = (uint8_t *)v57;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v57);
      if (v58 != buf) {
        free(v58);
      }
    }

    return 1LL;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  int v65 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v66 = *(void *)(a1 + 168);
    uint64_t v67 = *(void *)(a1 + 176);
    *(_DWORD *)buf = 134349568;
    *(void *)__int16 v119 = v66;
    *(_WORD *)&v119[8] = 2050;
    *(double *)uint64_t v120 = v47;
    *(_WORD *)&v120[8] = 2050;
    *(void *)__int16 v121 = v67;
    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "shouldBypassFusion,passthroughHysteresis expired,switching off passthrough mode,last_passthrough_mct,%{public}.3f, elapsed,%{public}.1f,stickinessTime_s,%{public}.1f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v100 = *(void *)(a1 + 168);
    uint64_t v101 = *(void *)(a1 + 176);
    int v111 = 134349568;
    *(void *)uint64_t v112 = v100;
    *(_WORD *)&v112[8] = 2050;
    *(double *)__int16 v113 = v47;
    *(_WORD *)&v113[8] = 2050;
    *(void *)uint64_t v114 = v101;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "shouldBypassFusion,passthroughHysteresis expired,switching off passthrough mode,last_passthrough_mct,%{public}.3f, elapsed,%{public}.1f,stickinessTime_s,%{public}.1f",  &v111,  32);
    __int16 v103 = (uint8_t *)v102;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldBypassLCFusion(const LCFusionProviderLocation &)",  "%s\n",  v102);
    if (v103 != buf) {
      free(v103);
    }
  }

  uint64_t result = 0LL;
  *(_BYTE *)(a1 + 159) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 168) = _Q0;
  return result;
}

void sub_100AA892C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100AA8938(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  if (*a3 != a3[1])
  {
    double v7 = *(double *)(a1 + 1768);
    double v8 = *(double *)(a2 + 344) - v7;
    BOOL v9 = v7 > 0.0;
    double v10 = -1.0;
    if (v9) {
      double v10 = v8;
    }
    if (fabs(v10) >= 20.0)
    {
LABEL_6:
      *(void *)(a1 + 1760) = 0xBFF0000000000000LL;
      *(void *)(a1 + 1768) = 0xBFF0000000000000LL;
      *(void *)(a1 + 1776) = 0LL;
      *(void *)(a1 + 1792) = 0LL;
      *(void *)(a1 + 1784) = 0LL;
      *(void *)(a1 + 1760) = *(void *)(a2 + 344);
    }

    *(void *)(a1 + 1712) = 0xBFF0000000000000LL;
    *(_OWORD *)(a1 + 1720) = 0u;
    double v11 = (int *)(a1 + 1720);
    *(_DWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1736) = 0u;
    sub_1004F06F0(a1 + 1712, a3, *(double *)(a2 + 344));
    if (*v11 <= 19 && *(_DWORD *)(a1 + 1724) == *v11)
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      BOOL v12 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a2 + 344);
        int v14 = *(_DWORD *)(a1 + 1720);
        int v15 = *(_DWORD *)(a1 + 1724);
        *(_DWORD *)buf = 134349568;
        uint64_t v72 = v13;
        __int16 v73 = 1026;
        int v74 = v14;
        __int16 v75 = 1026;
        int v76 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,discarding wrong satellite visibility report.",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v16 = *(void *)(a2 + 344);
        int v17 = *(_DWORD *)(a1 + 1720);
        int v18 = *(_DWORD *)(a1 + 1724);
        int v49 = 134349568;
        uint64_t v50 = v16;
        __int16 v51 = 1026;
        int v52 = v17;
        __int16 v53 = 1026;
        int v54 = v18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,discarding wrong satellite visibility report.",  &v49,  24);
        double v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::extractGNSSSatelliteTrackingQualityMetricsAndHuncFloor(const CLDaemonLocationPrivate & , const CLDaemonLocationPrivate::AboveHorizonSatelliteVisibilityReport &, double &)",  "%s\n",  v19);
LABEL_38:
        if (v20 != buf) {
          free(v20);
        }
      }
    }

    else
    {
      BOOL v21 = sub_100AA7648(a1 + 1712);
      BOOL v22 = v21;
      if ((!*(_BYTE *)(a2 + 636) || *(double *)(a1 + 1776) < 10.0)
        && *v11 >= 1
        && (double)*(int *)(a1 + 1724) / (double)*v11 < 0.5)
      {
        *a4 = *(void *)(a1 + 2168);
      }

      double v23 = *(double *)(a1 + 1760);
      double v24 = 0.0;
      if (v23 > 0.0)
      {
        double v25 = *(double *)(a2 + 344);
        BOOL v9 = v25 <= v23;
        double v26 = v25 - v23;
        if (v9) {
          double v24 = 0.0;
        }
        else {
          double v24 = v26;
        }
      }

      *(double *)(a1 + 1776) = v24;
      *(void *)(a1 + 1768) = *(void *)(a2 + 344);
      ++*(_DWORD *)(a1 + 1792);
      if (v21)
      {
        ++*(_DWORD *)(a1 + 1784);
        *(_DWORD *)(a1 + 1788) = 0;
        ++*(_DWORD *)(a1 + 1796);
      }

      else
      {
        ++*(_DWORD *)(a1 + 1788);
        *(_DWORD *)(a1 + 1784) = 0;
      }

      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v27 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v28 = *(void *)(a2 + 344);
        int v29 = *(_DWORD *)(a1 + 1720);
        int v30 = *(_DWORD *)(a1 + 1724);
        int v31 = *(_DWORD *)(a1 + 1728);
        int v32 = *(_DWORD *)(a1 + 1732);
        int v33 = *(_DWORD *)(a1 + 1736);
        int v34 = *(_DWORD *)(a1 + 1740);
        int v35 = *(_DWORD *)(a1 + 1744);
        int v36 = *(_DWORD *)(a1 + 1748);
        int v37 = *(_DWORD *)(a1 + 1752);
        *(_DWORD *)buf = 134351616;
        uint64_t v72 = v28;
        __int16 v73 = 1026;
        int v74 = v29;
        __int16 v75 = 1026;
        int v76 = v30;
        __int16 v77 = 1026;
        int v78 = v31;
        __int16 v79 = 1026;
        int v80 = v32;
        __int16 v81 = 1026;
        int v82 = v33;
        __int16 v83 = 1026;
        int v84 = v34;
        __int16 v85 = 1026;
        int v86 = v35;
        __int16 v87 = 1026;
        int v88 = v36;
        __int16 v89 = 1026;
        int v90 = v37;
        __int16 v91 = 1026;
        BOOL v92 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,NumTrackedL5,%{public}02d,NumTracke dL1CN0_ge_20,%{public}02d,NumTrackedSVElv_ge_60,%{public}02d,NumTrackedSV_azm,%{public}02d,%{public}02d,%{publ ic}02d,%{public}02d,isLikelygoodQualityGNSSTracking,%{public}d",  buf,  0x48u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v38 = *(void *)(a2 + 344);
        int v39 = *(_DWORD *)(a1 + 1720);
        int v40 = *(_DWORD *)(a1 + 1724);
        int v41 = *(_DWORD *)(a1 + 1728);
        int v42 = *(_DWORD *)(a1 + 1732);
        int v43 = *(_DWORD *)(a1 + 1736);
        int v44 = *(_DWORD *)(a1 + 1740);
        int v45 = *(_DWORD *)(a1 + 1744);
        int v46 = *(_DWORD *)(a1 + 1748);
        int v47 = *(_DWORD *)(a1 + 1752);
        int v49 = 134351616;
        uint64_t v50 = v38;
        __int16 v51 = 1026;
        int v52 = v39;
        __int16 v53 = 1026;
        int v54 = v40;
        __int16 v55 = 1026;
        int v56 = v41;
        __int16 v57 = 1026;
        int v58 = v42;
        __int16 v59 = 1026;
        int v60 = v43;
        __int16 v61 = 1026;
        int v62 = v44;
        __int16 v63 = 1026;
        int v64 = v45;
        __int16 v65 = 1026;
        int v66 = v46;
        __int16 v67 = 1026;
        int v68 = v47;
        __int16 v69 = 1026;
        BOOL v70 = v22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,NumTrackedL5,%{public}02d,NumTracke dL1CN0_ge_20,%{public}02d,NumTrackedSVElv_ge_60,%{public}02d,NumTrackedSV_azm,%{public}02d,%{public}02d,%{publ ic}02d,%{public}02d,isLikelygoodQualityGNSSTracking,%{public}d",  &v49,  72);
        double v20 = (uint8_t *)v48;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::extractGNSSSatelliteTrackingQualityMetricsAndHuncFloor(const CLDaemonLocationPrivate & , const CLDaemonLocationPrivate::AboveHorizonSatelliteVisibilityReport &, double &)",  "%s\n",  v48);
        goto LABEL_38;
      }
    }
  }

void sub_100AA8ED0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100AA8EDC(uint64_t result)
{
  int v1 = *(void **)(result + 2216);
  int v2 = (void *)(result + 2224);
  if (v1 != (void *)(result + 2224))
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 1840;
    int v5 = (double *)(result + 2248);
    while (1)
    {
      uint64_t result = CLMotionActivity::isTypeUnclassifiedMoving(*((unsigned int *)v1 + 10));
      if ((result & 1) == 0) {
        break;
      }
      if (*(void *)(v3 + 2256))
      {
        uint64_t v6 = *(void *)v5;
        if (!*(void *)v5) {
          goto LABEL_19;
        }
        double v7 = *((double *)v1 + 4);
        double v8 = v5;
        do
        {
          BOOL v9 = (uint64_t *)(v6 + 8);
          if (*(double *)(v6 + 32) >= v7)
          {
            BOOL v9 = (uint64_t *)v6;
            double v8 = (double *)v6;
          }

          uint64_t v6 = *v9;
        }

        while (*v9);
        if (v8 == v5) {
          goto LABEL_19;
        }
        if (v8 != *(double **)(v3 + 2240))
        {
          double v10 = *v8;
          double v11 = v8;
          if (*(void *)v8)
          {
            do
            {
              BOOL v12 = *(double **)&v10;
              double v10 = *(double *)(*(void *)&v10 + 8LL);
            }

            while (v10 != 0.0);
          }

          else
          {
            do
            {
              BOOL v12 = (double *)*((void *)v11 + 2);
              BOOL v13 = *(void *)v12 == (void)v11;
              double v11 = v12;
            }

            while (v13);
          }

          if (v7 - v12[4] < v8[4] - v7) {
            double v8 = v12;
          }
        }

        if (v8[4] - v7 <= 6.0)
        {
          if (v8[8] <= 0.001)
          {
            if (v8[9] <= 0.3 && *((_DWORD *)v8 + 12) != 4) {
              goto LABEL_19;
            }
LABEL_20:
            uint64_t v14 = v4;
            int v15 = (uint64_t **)(v1 + 4);
            unsigned int v16 = 7;
          }

          else
          {
            if (*((_DWORD *)v8 + 12) == 3) {
              unsigned int v16 = 3;
            }
            else {
              unsigned int v16 = 2;
            }
            uint64_t v14 = v4;
            int v15 = (uint64_t **)(v1 + 4);
          }

          sub_10044A374(v14, v15, v16);
        }

        else
        {
LABEL_19:
        }

BOOL sub_100AA90D0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  if (!*(_BYTE *)(a1 + 2164))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v17 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Error,LC Fusion is not configured.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v286) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,LC Fusion is not configured.",  &v286,  2);
      __int16 v57 = (char *)v56;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v56);
      if (v57 != buf) {
        free(v57);
      }
    }

    return 0LL;
  }

  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  uint64_t v6 = (int *)(a2 + 96);
  if (!sub_100AA56FC(a1, *(_DWORD *)(a2 + 96))) {
    return 0LL;
  }
  if (!*(_BYTE *)(a1 + 2144) && *(_BYTE *)(a1 + 2208))
  {
    sub_100AA8EDC(a1);
    sub_100008390(a1 + 2216, *(void **)(a1 + 2224));
    *(void *)(a1 + 2216) = a1 + 2224;
    *(void *)(a1 + 2232) = 0LL;
    *(void *)(a1 + 2224) = 0LL;
    sub_100008390(a1 + 2240, *(void **)(a1 + 2248));
    *(void *)(a1 + 2240) = a1 + 2248;
    *(void *)(a1 + 2256) = 0LL;
    *(void *)(a1 + 2248) = 0LL;
    *(_BYTE *)(a1 + 2memset(&v8[8], 0, 208) = 0;
  }

  __int128 v283 = *(_OWORD *)(a1 + 1040);
  __int128 v284 = *(_OWORD *)(a1 + 1056);
  *(_OWORD *)v285 = *(_OWORD *)(a1 + 1072);
  __int128 v7 = *(_OWORD *)(a1 + 992);
  __int128 v279 = *(_OWORD *)(a1 + 976);
  __int128 v280 = v7;
  __int128 v8 = *(_OWORD *)(a1 + 1024);
  __int128 v281 = *(_OWORD *)(a1 + 1008);
  v278 = &off_1018920B8;
  __int128 v282 = v8;
  *(_OWORD *)&v285[12] = *(_OWORD *)(a1 + 1084);
  sub_100FBAB30(a1 + 968);
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v19 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a2 + 76);
      BOOL v21 = sub_100832C40(*(_DWORD *)(a2 + 96));
      *(_DWORD *)buf = 134349314;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "#Error,timestamp,%{public}.3f,Invalid location update,hunc <= 0,type,%{public}s",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v58 = qword_101934968;
    uint64_t v59 = *(void *)(a2 + 76);
    int v60 = sub_100832C40(*(_DWORD *)(a2 + 96));
    int v286 = 134349314;
    uint64_t v287 = v59;
    __int16 v288 = 2082;
    v289 = v60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v58,  16LL,  "#Error,timestamp,%{public}.3f,Invalid location update,hunc <= 0,type,%{public}s",  &v286,  22);
    unsigned int v16 = (char *)v61;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v61);
    goto LABEL_77;
  }

  if (sub_10029286C(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    BOOL v9 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a2 + 76);
      double v11 = sub_100832C40(*(_DWORD *)(a2 + 96));
      *(_DWORD *)buf = 134349314;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "#Warning,timestamp,%{public}.3f,Invalid location update,null island,type,%{public}s",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v12 = qword_101934968;
    uint64_t v13 = *(void *)(a2 + 76);
    uint64_t v14 = sub_100832C40(*(_DWORD *)(a2 + 96));
    int v286 = 134349314;
    uint64_t v287 = v13;
    __int16 v288 = 2082;
    v289 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  2LL,  "#Warning,timestamp,%{public}.3f,Invalid location update,null island,type,%{public}s",  &v286,  22);
    unsigned int v16 = (char *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v15);
LABEL_77:
    if (v16 != buf) {
      free(v16);
    }
LABEL_29:
    *a3 = 1;
    *(_DWORD *)(a1 + 1104) = 2;
    sub_10069DEF4(a1 + 2272, 2);
    return *a3 != 0;
  }

  __int128 v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
  __int128 v24 = *(_OWORD *)(a2 + 32);
  __int128 v25 = *(_OWORD *)(a2 + 48);
  __int128 v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v26;
  *(_OWORD *)(a1 + 32) = v24;
  *(_OWORD *)(a1 + 48) = v25;
  __int128 v27 = *(_OWORD *)(a2 + 96);
  __int128 v28 = *(_OWORD *)(a2 + 112);
  __int128 v29 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v28;
  *(_OWORD *)(a1 + 128) = v29;
  *(_OWORD *)(a1 + 96) = v27;
  v276 = 0LL;
  uint64_t v277 = 0LL;
  double v275 = *(double *)(a2 + 20);
  if (*(_DWORD *)(a2 + 96) == 1)
  {
    int v30 = (std::__shared_weak_count *)operator new(0xC0uLL);
    v30->__shared_owners_ = 0LL;
    p_uint64_t shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__shared_weak_owners_ = 0LL;
    v30->__vftable = (std::__shared_weak_count_vtbl *)off_10186D478;
    *(_OWORD *)&v30[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[3].__shared_owners_ = 0u;
    v30[4].std::__shared_count = 0u;
    *(_OWORD *)&v30[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[5].__shared_owners_ = 0u;
    v30[6].std::__shared_count = 0u;
    *(_OWORD *)&v30[6].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v30[7].__shared_owners_ = 0u;
    __asm { FMOV            V1.2D, #-1.0 }

    *((std::__shared_count *)v30 + 2) = _Q1;
    v30[2].std::__shared_count = 0u;
    v30[2].__shared_weak_owners_ = 0xBFF0000000000000LL;
    v30[3].__shared_owners_ = 0xBFF0000000000000LL;
    *(std::__shared_count *)((char *)v30 + 104) = _Q1;
    v30[5].std::__shared_count = _Q1;
    v30[5].__shared_weak_owners_ = 0xBFF0000000000000LL;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)off_101892128;
    HIDWORD(v30[6].__shared_weak_owners_) = -1082130432;
    v30[7].__shared_owners_ = 0LL;
    v30[7].__vftable = 0LL;
    LODWORD(v30[7].__shared_weak_owners_) = 0;
    sub_1000F2F30(&v30[7].__vftable, (uint64_t *)(a2 + 680));
    LODWORD(v30[7].__shared_weak_owners_) = *(_DWORD *)(a2 + 696);
    *(uint64_t *)((char *)&v30[6].__shared_owners_ + 4) = *(void *)(a2 + 200);
    HIDWORD(v30[6].__shared_weak_owners_) = *(_DWORD *)(a2 + 208);
    int v36 = (uint64_t *)v30[7].__vftable;
    if (!v36 || *v36 == v36[1])
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v39 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = *(void *)(a2 + 504);
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "#GNSSTracking,mct,%{public}.3f,No satelliteAvailabilityReportPresent",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v142 = *(void *)(a2 + 504);
        int v286 = 134349056;
        uint64_t v287 = v142;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#GNSSTracking,mct,%{public}.3f,No satelliteAvailabilityReportPresent",  &v286,  12);
        __n128 v144 = (char *)v143;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v143);
        if (v144 != buf) {
          free(v144);
        }
      }
    }

    else
    {
      sub_100AA8938(a1, a2 + 160, v36, &v275);
    }

    do
      unint64_t v41 = __ldxr(p_shared_owners);
    while (__stxr(v41 + 1, p_shared_owners));
    v276 = v30 + 1;
    uint64_t v277 = (uint64_t)v30;
    do
      unint64_t v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  else
  {
    int v37 = (char *)operator new(0xA0uLL);
    *((void *)v37 + 2) = 0LL;
    *(void *)int v37 = off_10186D4C8;
    *((void *)v37 + 1) = 0LL;
    *((_OWORD *)v37 + 4) = 0u;
    *((_OWORD *)v37 + 5) = 0u;
    *((_OWORD *)v37 + 6) = 0u;
    *((_OWORD *)v37 + memset(&v6[1], 0, 7) = 0u;
    *((void *)v37 + 3) = &off_1018920B8;
    *((_OWORD *)v37 + 8) = 0u;
    *((_OWORD *)v37 + 9) = 0u;
    __asm { FMOV            V1.2D, #-1.0 }

    *((_OWORD *)v37 + 2) = _Q1;
    *((_OWORD *)v37 + 3) = 0u;
    *((void *)v37 + 8) = 0xBFF0000000000000LL;
    *((void *)v37 + 10) = 0xBFF0000000000000LL;
    *(_OWORD *)(v37 + 104) = _Q1;
    *(_OWORD *)(v37 + 120) = _Q1;
    *((void *)v37 + 1memset(&v6[1], 0, 7) = 0xBFF0000000000000LL;
    v276 = (std::__shared_weak_count *)(v37 + 24);
    uint64_t v277 = (uint64_t)v37;
  }

  uint64_t v43 = (uint64_t)v276;
  ((void (*)(std::__shared_weak_count *, uint64_t, double))v276->__get_deleter)(v276, a2, v275);
  *(double *)(v43 + 64) = *(float *)(a2 + 476);
  *(_DWORD *)(v43 + 72) = *(_DWORD *)(a2 + 472);
  uint64_t v44 = *(void *)(a2 + 504);
  *(void *)(v43 + 16) = v44;
  int v45 = *(unsigned __int8 *)(a2 + 768);
  *(_BYTE *)(v43 + 124) = v45;
  if (v45)
  {
    if (*(double *)(v43 + 40) <= 60.0)
    {
      *(_OWORD *)(a1 + 2112) = *(_OWORD *)(v43 + 24);
      *(void *)(a1 + 2128) = v44;
    }

    else
    {
      *(_BYTE *)(v43 + 124) = 0;
    }
  }

  LOBYTE(v273) = 0;
  sub_100AA6D7C(a1, v43, a3, &v273);
  BOOL v18 = (_BYTE)v273 == 0;
  if ((_BYTE)v273) {
    goto LABEL_120;
  }
  if (*a3) {
    goto LABEL_119;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v43 + 32LL))(v43))
  {
    if (*(double *)(v43 + 88) > 0.0 && *(double *)(v43 + 80) > 0.0 && (*(_DWORD *)(a1 + 1912) - 1) <= 4)
    {
      *(void *)buf = 0xBFF0000000000000LL;
      if ((sub_10044B800(a1 + 1840, (double *)buf) & 1) == 0
        && (sub_10044B5B8(a1 + 1840, &dbl_101347860) & 1) == 0
        && !sub_10044B330((void *)(a1 + 1840), &dbl_101347860))
      {
        double v46 = *(double *)(v43 + 80);
        double v47 = sub_100AAB008((_DWORD *)(a1 + 1912));
        v261 = (int *)(a1 + 1912);
        int v48 = *(_DWORD *)(a1 + 1912);
        *(void *)buf = v43 + 128;
        double v49 = v46 * v46;
        double v50 = 0.0;
        if (sub_100ABF1B8((uint64_t **)(a1 + 192), (int *)(v43 + 128), (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5]
          && (*(void *)buf = v43 + 128,
              sub_100ABF1B8((uint64_t **)(a1 + 192), (int *)(v43 + 128), (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5][1]))
        {
          *(void *)buf = v43 + 128;
          double v51 = 0.0;
          if (*(double *)(sub_100ABF1B8( (uint64_t **)(a1 + 192),  (int *)(v43 + 128),  (uint64_t)&unk_1012CF090,  (_DWORD **)buf)[5][1] + 80) >= 0.0)
          {
            *(void *)buf = v43 + 128;
            int v52 = sub_100ABF1B8((uint64_t **)(a1 + 192), (int *)(v43 + 128), (uint64_t)&unk_1012CF090, (_DWORD **)buf);
            double v53 = (*(double (**)(uint64_t, uint64_t))(*(void *)v52[5][1] + 48LL))(v52[5][1], v43 + 16);
            double v50 = v53;
            _ZF = v53 == 0.0;
            if (v53 <= 0.0)
            {
              double v145 = fabs(v53);
              if (!_ZF && v145 <= 3.0) {
                goto LABEL_81;
              }
            }

            else
            {
              double v55 = *(double *)(v43 + 80);
              *(void *)buf = v43 + 128;
              double v51 = (v55
                   - *(double *)(sub_100ABF1B8( (uint64_t **)(a1 + 192),  (int *)(v43 + 128),  (uint64_t)&unk_1012CF090,  (_DWORD **)buf)[5][1] + 80))
                  / v53;
              if (v50 != 0.0 && fabs(v50) <= 3.0)
              {
                if (v51 > 19.6) {
                  goto LABEL_83;
                }
                goto LABEL_81;
              }
            }
          }
        }

        else
        {
          double v51 = 0.0;
        }

        if (v49 > v47)
        {
LABEL_83:
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          int v62 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v63 = *(void *)(v43 + 8);
            uint64_t v266 = *(void *)(v43 + 16);
            unsigned int v64 = *(_DWORD *)(v43 + 128);
            __int16 v65 = sub_100832C40(v64);
            uint64_t v66 = *(void *)(v43 + 24);
            uint64_t v67 = *(void *)(v43 + 32);
            uint64_t v69 = *(void *)(v43 + 40);
            uint64_t v68 = *(void *)(v43 + 48);
            uint64_t v70 = *(void *)(v43 + 56);
            uint64_t v71 = *(void *)(v43 + 80);
            uint64_t v72 = *(void *)(v43 + 88);
            uint64_t v73 = *(void *)(v43 + 96);
            uint64_t v74 = *(void *)(v43 + 104);
            int v75 = *v261;
            *(_DWORD *)buf = 134353411;
            *(void *)&uint8_t buf[4] = v63;
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(void *)&_BYTE buf[14] = v266;
            __int16 v331 = 1026;
            unsigned int v332 = v64;
            __int16 v333 = 2082;
            v334 = v65;
            __int16 v335 = 2049;
            uint64_t v336 = v66;
            __int16 v337 = 2049;
            uint64_t v338 = v67;
            __int16 v339 = 2049;
            uint64_t v340 = v68;
            __int16 v341 = 2049;
            uint64_t v342 = v71;
            __int16 v343 = 2049;
            uint64_t v344 = v73;
            __int16 v345 = 2050;
            uint64_t v346 = v69;
            __int16 v347 = 2050;
            uint64_t v348 = v70;
            __int16 v349 = 2050;
            uint64_t v350 = v72;
            __int16 v351 = 2050;
            uint64_t v352 = v74;
            __int16 v353 = 2050;
            *(void *)v354 = sqrt(v47);
            *(_WORD *)&v354[8] = 2050;
            *(double *)&v354[10] = v50;
            *(_WORD *)&v354[18] = 2050;
            double v355 = v49;
            *(_WORD *)v356 = 2050;
            *(double *)&v356[2] = v51;
            *(_WORD *)v357 = 1026;
            *(_DWORD *)&v357[2] = v75;
            _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "#fusion Provider estimated speed rejected,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{ private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f, %{public}.2f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}d",  buf,  0xAEu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            uint64_t v271 = qword_101934968;
            __n128 v184 = &v276->__vftable;
            uint64_t shared_owners = v276->__shared_owners_;
            shared_weak_owners = (const char *)v276->__shared_weak_owners_;
            unsigned int v187 = v276[5].__shared_owners_;
            __n128 v188 = sub_100832C40(v187);
            uint64_t v189 = v184[3];
            uint64_t v190 = v184[4];
            uint64_t v192 = v184[5];
            uint64_t v191 = v184[6];
            uint64_t v193 = v184[7];
            uint64_t v194 = v184[10];
            uint64_t v195 = v184[11];
            uint64_t v196 = v184[12];
            uint64_t v197 = v184[13];
            int v198 = *v261;
            int v286 = 134353411;
            uint64_t v287 = shared_owners;
            __int16 v288 = 2050;
            v289 = shared_weak_owners;
            __int16 v290 = 1026;
            unsigned int v291 = v187;
            __int16 v292 = 2082;
            v293 = v188;
            __int16 v294 = 2049;
            uint64_t v295 = v189;
            __int16 v296 = 2049;
            uint64_t v297 = v190;
            __int16 v298 = 2049;
            uint64_t v299 = v191;
            __int16 v300 = 2049;
            uint64_t v301 = v194;
            __int16 v302 = 2049;
            uint64_t v303 = v196;
            __int16 v304 = 2050;
            uint64_t v305 = v192;
            __int16 v306 = 2050;
            uint64_t v307 = v193;
            __int16 v308 = 2050;
            uint64_t v309 = v195;
            __int16 v310 = 2050;
            uint64_t v311 = v197;
            __int16 v312 = 2050;
            *(void *)v313 = sqrt(v47);
            *(_WORD *)&v313[8] = 2050;
            *(double *)&v313[10] = v50;
            *(_WORD *)&v313[18] = 2050;
            double v314 = v49;
            *(_WORD *)v315 = 2050;
            *(double *)&v315[2] = v51;
            *(_WORD *)v316 = 1026;
            *(_DWORD *)&v316[2] = v198;
            LODWORD(v201) = 174;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v271,  0LL,  "#fusion Provider estimated speed rejected,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{ private}.7f,%{private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f, %{public}.2f,%{public}.2f,%{public}.2f,%{public}.2f,%{public}d",  &v286,  v201);
            __n128 v200 = (char *)v199;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v199);
            if (v200 != buf) {
              free(v200);
            }
          }

          uint64_t v43 = (uint64_t)v276;
          v276[3].__shared_weak_owners_ = 0xBFF0000000000000LL;
          *(void *)(v43 + 104) = 0xBFF0000000000000LL;
          goto LABEL_89;
        }

void sub_100AAAFFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

double sub_100AAB008(_DWORD *a1)
{
  int v1 = *a1 - 1;
  else {
    return dbl_1013479F8[v1];
  }
}

uint64_t sub_100AAB034(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v167 = a1 + 968;
  sub_100FBAB30(a1 + 968);
  unsigned int v172 = a3;
  __int16 v173 = a2;
  *a3 = 0;
  *(_DWORD *)(a1 + 1104) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v176 = _Q0;
  if (!(_NF ^ _VF | _ZF))
  {
    uint64_t v11 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    if (vabdd_f64(sub_10080EB58(v11, buf), *(double *)(a1 + 184)) > 40.0)
    {
      *(_BYTE *)(a1 + 159) = 0;
      *(_OWORD *)(a1 + 168) = v176;
    }
  }

  if (*(_BYTE *)(a1 + 2096) && (*(_DWORD *)(*a2 + 128) - 6) >= 3)
  {
    double v12 = sub_100D2DBDC( (double *)(a1 + 1800),  *(double *)(*a2 + 24),  *(double *)(*a2 + 32),  *(double *)(a1 + 2112),  *(double *)(a1 + 2120),  *(double *)(a1 + 1704));
    double v13 = *(double *)(a1 + 2128);
    double v14 = 0.0;
    if (v13 > 0.0)
    {
      uint64_t v15 = sub_10080E94C();
      *(_DWORD *)buf = 1;
      double v16 = sub_10080EB58(v15, buf);
      double v13 = *(double *)(a1 + 2128);
      double v14 = v16 - v13;
    }

    if (v12 > 600.0 && (v13 < 0.0 || v14 > 60.0) && sub_100AA7570(a1))
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v17 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
      {
        double v18 = sub_1003713F0();
        uint64_t v19 = *(void *)(a1 + 2104);
        uint64_t v20 = *(void *)(a1 + 2128);
        uint64_t v21 = *(void *)(a1 + 2112);
        uint64_t v22 = *(void *)(a1 + 2120);
        *(_DWORD *)buf = 134350593;
        *(double *)&uint8_t buf[4] = v18;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&_BYTE buf[14] = v19;
        *(_WORD *)&_BYTE buf[22] = 2050;
        *(void *)&buf[24] = v20;
        *(_WORD *)&_BYTE buf[32] = 2050;
        *(double *)&buf[34] = v14;
        *(_WORD *)&buf[42] = 2050;
        *(double *)&_BYTE buf[44] = v12;
        *(_WORD *)&buf[52] = 2049;
        *(void *)&buf[54] = v21;
        *(_WORD *)&buf[62] = 2049;
        *(void *)&buf[64] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#fusion,Overrides WiFi Service AP Associated state,now_mct,%{public}.3f,time received associated state,%{publi c}.3f,time last APWiFiFix seen,%{public}.3f,elapsedTime,%{public}.3f,distance user moved away,%{public}.2f,AP WiFi approx location LL deg,%{private}.7f,%{private}.7f",  buf,  0x48u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v130 = qword_101934968;
        double v131 = sub_1003713F0();
        uint64_t v132 = *(void *)(a1 + 2104);
        uint64_t v133 = *(void *)(a1 + 2128);
        uint64_t v134 = *(void *)(a1 + 2112);
        uint64_t v135 = *(void *)(a1 + 2120);
        *(_DWORD *)uint64_t v207 = 134350593;
        *(double *)&v207[4] = v131;
        *(_WORD *)&v207[12] = 2050;
        *(void *)&v207[14] = v132;
        *(_WORD *)&v207[22] = 2050;
        *(void *)&v207[24] = v133;
        *(_WORD *)&v207[32] = 2050;
        *(double *)&v207[34] = v14;
        *(_WORD *)&v207[42] = 2050;
        *(double *)&v207[44] = v12;
        *(_WORD *)&v207[52] = 2049;
        *(void *)&v207[54] = v134;
        *(_WORD *)&v207[62] = 2049;
        *(void *)&v207[64] = v135;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v130,  0LL,  "#fusion,Overrides WiFi Service AP Associated state,now_mct,%{public}.3f,time received associated state,%{publi c}.3f,time last APWiFiFix seen,%{public}.3f,elapsedTime,%{public}.3f,distance user moved away,%{public}.2f,AP WiFi approx location LL deg,%{private}.7f,%{private}.7f",  v207,  72);
        uint64_t v137 = (char *)v136;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)",  "%s\n",  v136);
        if (v137 != buf) {
          free(v137);
        }
      }

      *(_BYTE *)(a1 + 2096) = 0;
    }
  }

  __int128 v23 = (double *)(*a2 + 16);
  *(double *)(a1 + 184) = *v23;
  sub_100AAC724(a1, v23);
  __int128 v24 = *(_BYTE **)(a1 + 2088);
  if (!v24 || !v24[1] || !*v24) {
    goto LABEL_30;
  }
  __int128 v25 = (std::__shared_weak_count *)a2[1];
  v206[0] = *a2;
  v206[1] = v25;
  if (v25)
  {
    p_uint64_t shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }

  BOOL v28 = sub_100AAD0BC(a1, (uint64_t)v206);
  if (v25)
  {
    __int128 v29 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  if (!v28)
  {
    *a3 = 1;
  }

  else
  {
LABEL_30:
    __int128 v192 = v176;
    uint64_t v193 = 0LL;
    uint64_t v194 = 0LL;
    uint64_t v195 = &off_1018920B8;
    __int128 v196 = v176;
    __int128 v197 = xmmword_1012E0070;
    __int128 v198 = xmmword_1012E0070;
    __int128 v199 = v176;
    __int128 v200 = v176;
    unint64_t v201 = 0xBFF0000000000000LL;
    int v202 = 0;
    char v203 = 0;
    int v204 = 0;
    __int16 v205 = 0;
    uint64_t v32 = *a2;
    int v31 = (std::__shared_weak_count *)a2[1];
    if (v31)
    {
      p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
      do
        unint64_t v34 = __ldxr(p_shared_weak_owners);
      while (__stxr(v34 + 1, p_shared_weak_owners));
      uint64_t v193 = v32;
      uint64_t v194 = v31;
    }

    else
    {
      uint64_t v193 = *a2;
      uint64_t v194 = 0LL;
    }

    uint64_t v35 = *a2;
    __int128 v192 = *(_OWORD *)(*a2 + 8);
    if (*(_BYTE *)(a1 + 166))
    {
      *(void *)buf = v35 + 128;
      if (!*((_DWORD *)sub_100ABF454( (uint64_t **)(a1 + 216),  (int *)(v35 + 128),  (uint64_t)&unk_1012CF090,  (_DWORD **)buf)
            + 173))
      {
        *(void *)buf = *a2 + 128;
        int v36 = sub_100ABF454((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_100E8C3B8((uint64_t)(v36 + 5), *(_DWORD *)(*a2 + 128));
        *(void *)buf = *a2 + 128;
        *((_DWORD *)sub_100ABF454((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 108) = *(_DWORD *)(a1 + 1912);
      }

      *(void *)buf = *a2 + 128;
      int v37 = sub_100ABF454((uint64_t **)(a1 + 216), *(int **)buf, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
      sub_100E8C4F4((int64x2_t *)(v37 + 5), (uint64_t)&v192);
    }

    sub_100AAD584(a1, (uint64_t)&v192);
    sub_100AAEAA8(a1, *a2);
    sub_100AB08BC(a1);
    for (uint64_t i = *(uint64_t **)(a1 + 240); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 167)
        && (uint64_t v39 = i[6]) != 0
        && *(_BYTE *)(*(void *)(i[2] + 8 * ((v39 + i[5] - 1) / 0x17uLL)) + 176 * ((v39 + i[5] - 1) % 0x17uLL) + 168))
      {
        *(void *)int v181 = &off_1018920B8;
        *(_OWORD *)&v181[8] = v176;
        __int128 v184 = xmmword_1012E0070;
        __int128 v185 = xmmword_1012E0070;
        __int128 v186 = v176;
        __int128 v187 = v176;
        unint64_t v188 = 0xBFF0000000000000LL;
        int v189 = 0;
        unsigned __int8 v190 = 0;
        unsigned int v191 = 0;
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v40 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
        {
          int v41 = *((_DWORD *)i + 165);
          uint64_t v42 = *(void *)&v181[8];
          uint64_t v43 = *(void *)&v181[16];
          uint64_t v44 = sub_100832C40(v191);
          unsigned int v45 = sub_100E8FA20((uint64_t)(i + 1), (double *)&v181[16]);
          double v46 = sub_100832C40(v45);
          uint64_t v47 = i[80];
          int v48 = *((_DWORD *)i + 167);
          *(_DWORD *)buf = 67244803;
          *(_DWORD *)&uint8_t buf[4] = v41;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v42;
          *(_WORD *)&_BYTE buf[18] = 2050;
          *(void *)&buf[20] = v43;
          *(_WORD *)&buf[28] = 2082;
          *(void *)&buf[30] = v44;
          *(_WORD *)&buf[38] = 2082;
          *(void *)&buf[40] = v46;
          *(_WORD *)&_BYTE buf[48] = 2049;
          *(void *)&buf[50] = v182;
          *(_WORD *)&buf[58] = 2049;
          *(void *)&buf[60] = v183;
          *(_WORD *)&std::string buf[68] = 2049;
          *(void *)&buf[70] = *((void *)&v184 + 1);
          *(_WORD *)&buf[78] = 2049;
          *(void *)&buf[80] = v186;
          *(_WORD *)&buf[88] = 2049;
          *(void *)&buf[90] = v187;
          *(_WORD *)&buf[98] = 2050;
          *(void *)&buf[100] = v184;
          *(_WORD *)&buf[108] = 2050;
          *(void *)&buf[110] = v185;
          *(_WORD *)&buf[118] = 2050;
          *(void *)&buf[120] = *((void *)&v186 + 1);
          *(_WORD *)&buf[128] = 2050;
          *(void *)&buf[130] = *((void *)&v187 + 1);
          *(_WORD *)&buf[138] = 1026;
          *(_DWORD *)&buf[140] = v189;
          *(_WORD *)uint64_t v230 = 2050;
          *(void *)&v230[2] = v188;
          __int16 v231 = 1026;
          int v232 = v190;
          __int16 v233 = 2050;
          *(void *)uint64_t v234 = v47;
          *(_WORD *)&v234[8] = 1026;
          *(_DWORD *)uint64_t v235 = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "#fusion hypothesis,%{public}d,%{public}.3f,%{public}.3f,%{public}s,%{public}s,%{private}.7f,%{private}.7f,%{ private}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{pub lic}.2f,%{public}d,%{public}.3f,%{public}d",  buf,  0xB0u);
        }

        if (!sub_1002921D0(115, 2)) {
          continue;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v49 = qword_101934968;
        int v50 = *((_DWORD *)i + 165);
        uint64_t v51 = *(void *)&v181[8];
        uint64_t v52 = *(void *)&v181[16];
        double v53 = sub_100832C40(v191);
        unsigned int v54 = sub_100E8FA20((uint64_t)(i + 1), (double *)&v181[16]);
        double v55 = sub_100832C40(v54);
        uint64_t v56 = i[80];
        int v57 = *((_DWORD *)i + 167);
        *(_DWORD *)uint64_t v207 = 67244803;
        *(_DWORD *)&v207[4] = v50;
        *(_WORD *)&v207[8] = 2050;
        *(void *)&v207[10] = v51;
        *(_WORD *)&v207[18] = 2050;
        *(void *)&v207[20] = v52;
        *(_WORD *)&v207[28] = 2082;
        *(void *)&v207[30] = v53;
        *(_WORD *)&v207[38] = 2082;
        *(void *)&v207[40] = v55;
        *(_WORD *)&v207[48] = 2049;
        *(void *)&v207[50] = v182;
        *(_WORD *)&v207[58] = 2049;
        *(void *)&v207[60] = v183;
        *(_WORD *)&v207[68] = 2049;
        *(void *)&v207[70] = *((void *)&v184 + 1);
        *(_WORD *)&v207[78] = 2049;
        *(void *)&v207[80] = v186;
        *(_WORD *)&v207[88] = 2049;
        *(void *)&v207[90] = v187;
        *(_WORD *)&v207[98] = 2050;
        *(void *)&v207[100] = v184;
        *(_WORD *)&v207[108] = 2050;
        *(void *)&v207[110] = v185;
        *(_WORD *)&v207[118] = 2050;
        *(void *)&v207[120] = *((void *)&v186 + 1);
        *(_WORD *)&v207[128] = 2050;
        *(void *)&v207[130] = *((void *)&v187 + 1);
        *(_WORD *)&v207[138] = 1026;
        *(_DWORD *)&v207[140] = v189;
        __int16 v208 = 2050;
        unint64_t v209 = v188;
        __int16 v210 = 1026;
        int v211 = v190;
        __int16 v212 = 2050;
        *(void *)uint64_t v213 = v56;
        *(_WORD *)&v213[8] = 1026;
        *(_DWORD *)uint64_t v214 = v57;
        LODWORD(v138) = 176;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v49,  0LL,  "#fusion hypothesis,%{public}d,%{public}.3f,%{public}.3f,%{public}s,%{public}s,%{private}.7f,%{private}.7f,%{pr ivate}.1f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public} .2f,%{public}d,%{public}.3f,%{public}d",  v207,  v138);
        uint64_t v59 = (char *)v58;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)",  "%s\n",  v58);
      }

      else
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v60 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v61 = i[6];
          BOOL v62 = v61 == 0;
          if (v61) {
            LODWORD(v61) = *(unsigned __int8 *)(*(void *)(i[2] + 8 * ((v61 + i[5] - 1) / 0x17uLL))
          }
                                              + 176 * ((v61 + i[5] - 1) % 0x17uLL)
                                              + 168);
          int v63 = *((_DWORD *)i + 165);
          *(_DWORD *)buf = 67240704;
          *(_DWORD *)&uint8_t buf[4] = v63;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v62;
          *(_WORD *)&_BYTE buf[14] = 1026;
          *(_DWORD *)&uint8_t buf[16] = v61;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "#fusion,Invalid hypothesis,hID,%{public}d,bufferEmpty,%{public}d,fused,%{public}d",  buf,  0x14u);
        }

        if (!sub_1002921D0(115, 2)) {
          continue;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v64 = *((_DWORD *)i + 165);
        uint64_t v65 = i[6];
        BOOL v66 = v65 == 0;
        if (v65) {
          LODWORD(v65) = *(unsigned __int8 *)(*(void *)(i[2] + 8 * ((v65 + i[5] - 1) / 0x17uLL))
        }
                                            + 176 * ((v65 + i[5] - 1) % 0x17uLL)
                                            + 168);
        *(_DWORD *)uint64_t v207 = 67240704;
        *(_DWORD *)&v207[4] = v64;
        *(_WORD *)&v207[8] = 1026;
        *(_DWORD *)&v207[10] = v66;
        *(_WORD *)&v207[14] = 1026;
        *(_DWORD *)&v207[16] = v65;
        LODWORD(v138) = 20;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#fusion,Invalid hypothesis,hID,%{public}d,bufferEmpty,%{public}d,fused,%{public}d",  v207,  v138);
        uint64_t v59 = (char *)v67;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)",  "%s\n",  v67);
      }

      if (v59 != buf) {
        free(v59);
      }
    }

    uint64_t v68 = v173;
    sub_100AB0ADC(a1, *v173);
    sub_100AB1B64(a1);
    sub_100AB2438(a1);
    *unsigned int v172 = 1;
    if (*(_BYTE *)(a1 + 157))
    {
      if (*(_BYTE *)(a1 + 156))
      {
        *(void *)buf = *v173 + 128;
        uint64_t v69 = sub_100ABF1B8((uint64_t **)(a1 + 192), *(int **)buf, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5][1];
        __int128 v70 = *(_OWORD *)(v69 + 88);
        __int128 v71 = *(_OWORD *)(v69 + 104);
        __int128 v72 = *(_OWORD *)(v69 + 116);
        *(_OWORD *)(a1 + 1040) = *(_OWORD *)(v69 + 72);
        *(_OWORD *)(a1 + 1084) = v72;
        *(_OWORD *)(a1 + 1072) = v71;
        *(_OWORD *)(a1 + 1056) = v70;
        __int128 v73 = *(_OWORD *)(v69 + 8);
        __int128 v74 = *(_OWORD *)(v69 + 24);
        __int128 v75 = *(_OWORD *)(v69 + 56);
        *(_OWORD *)(a1 + 1008) = *(_OWORD *)(v69 + 40);
        *(_OWORD *)(a1 + 1024) = v75;
        *(_OWORD *)(a1 + 976) = v73;
        *(_OWORD *)(a1 + 992) = v74;
        *unsigned int v172 = 0;
      }

      else
      {
        *(_DWORD *)(a1 + 1104) = 1;
      }
    }

    else
    {
      if (sub_100AB3AD0(a1, *v173))
      {
        *unsigned int v172 = 0;
        uint64_t v76 = sub_10080E94C();
        *(_DWORD *)buf = 0;
        double v180 = sub_10080EB58(v76, buf) - *(double *)(a1 + 976);
        __int16 v77 = *(void **)(a1 + 240);
        if (v77)
        {
          int v78 = 0;
          do
          {
            ++v78;
            __int16 v77 = (void *)*v77;
          }

          while (v77);
        }

        else
        {
          int v78 = 0;
        }

        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v79 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = *(void *)(a1 + 992);
          uint64_t v81 = *(void *)(a1 + 1000);
          uint64_t v177 = *(void *)(a1 + 1008);
          unsigned int v82 = *(_DWORD *)(a1 + 1096);
          uint64_t v83 = sub_100832C40(v82);
          uint64_t v84 = *(void *)(a1 + 1048);
          uint64_t v85 = *(void *)(a1 + 1064);
          int v139 = *(_DWORD *)(a1 + 1088);
          uint64_t v141 = *(void *)(a1 + 1080);
          uint64_t v143 = *(void *)(a1 + 976);
          uint64_t v145 = *(void *)(a1 + 1016);
          uint64_t v147 = *(void *)(a1 + 1024);
          uint64_t v149 = *(void *)(a1 + 1056);
          uint64_t v151 = *(void *)(a1 + 1072);
          uint64_t v153 = *(void *)(a1 + 984);
          int v155 = *(unsigned __int8 *)(a1 + 1092);
          int v157 = *(unsigned __int8 *)(a1 + 2096);
          int v159 = *(unsigned __int8 *)(a1 + 2075);
          int v161 = *(unsigned __int8 *)(a1 + 159);
          int v163 = *(_DWORD *)(a1 + 1456);
          uint64_t v86 = *(void *)(a1 + 1696);
          uint64_t v170 = *(void *)(v86 + 384);
          uint64_t v165 = *(void *)(v86 + 392);
          int v168 = *(_DWORD *)(a1 + 96);
          int v174 = *(_DWORD *)(a1 + 2160);
          uint64_t v87 = sub_10080E94C();
          double v88 = sub_10080EF30(v87);
          *(_DWORD *)buf = 134290179;
          *(void *)&uint8_t buf[4] = v80;
          *(_WORD *)&_BYTE buf[12] = 2049;
          *(void *)&_BYTE buf[14] = v81;
          *(_WORD *)&_BYTE buf[22] = 2050;
          *(void *)&buf[24] = v177;
          *(_WORD *)&_BYTE buf[32] = 1026;
          *(_DWORD *)&buf[34] = v82;
          *(_WORD *)&buf[38] = 2082;
          *(void *)&buf[40] = v83;
          *(_WORD *)&_BYTE buf[48] = 2049;
          *(void *)&buf[50] = v84;
          *(_WORD *)&buf[58] = 2049;
          *(void *)&buf[60] = v85;
          *(_WORD *)&std::string buf[68] = 1026;
          *(_DWORD *)&buf[70] = v139;
          *(_WORD *)&buf[74] = 2050;
          *(void *)&buf[76] = v141;
          *(_WORD *)&buf[84] = 2050;
          *(void *)&buf[86] = v143;
          *(_WORD *)&buf[94] = 2050;
          *(double *)&buf[96] = v180;
          *(_WORD *)&buf[104] = 2049;
          *(void *)&buf[106] = v145;
          *(_WORD *)&buf[114] = 2050;
          *(void *)&buf[116] = v147;
          *(_WORD *)&buf[124] = 2050;
          *(void *)&buf[126] = v149;
          *(_WORD *)&buf[134] = 2050;
          *(void *)&buf[136] = v151;
          *(_WORD *)uint64_t v230 = 2050;
          *(void *)&v230[2] = v153;
          __int16 v231 = 1026;
          int v232 = v155;
          __int16 v233 = 1026;
          *(_DWORD *)uint64_t v234 = v157;
          *(_WORD *)&v234[4] = 1026;
          *(_DWORD *)&v234[6] = v159;
          *(_WORD *)uint64_t v235 = 1026;
          *(_DWORD *)&v235[2] = v161;
          __int16 v236 = 1026;
          int v237 = v163;
          __int16 v238 = 1026;
          int v239 = v165;
          __int16 v240 = 2050;
          uint64_t v241 = v170;
          __int16 v242 = 1026;
          int v243 = v168;
          __int16 v244 = 1026;
          int v245 = v78;
          __int16 v246 = 1026;
          int v247 = v174;
          __int16 v248 = 2050;
          double v249 = v88;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "CL-fusion,Pos,0,%{private}.7f,%{private}.7f,Accuracy,%{public}.3f,Type,%{public}d,%{public}s,Speed,%{private }.2f,Course,%{private}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{p ublic}.3f,Altitude,%{private}.1f,AltitudeAccuracy,%{public}.1f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{p ublic}.1f,timestampMCT,%{public}.3f,fixIsWiFiAP,%{public}d,linkIsAssociated,%{public}d,inVisit,%{public}d,is Passthrough,%{public}d,dynamicsMode,%{public}d,IO_Context,%{public}d,IO_mct,%{public}.3f,origProviderType,%{ public}d,numHypothesis,%{public}d,FusionExeState,%{public}d,propagation_us,%{public}.3f",  buf,  0xE4u);
        }

        uint64_t v89 = sub_1002921D0(115, 2);
        if ((_DWORD)v89)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          uint64_t v178 = qword_101934968;
          uint64_t v118 = *(void *)(a1 + 992);
          uint64_t v119 = *(void *)(a1 + 1000);
          uint64_t v142 = *(void *)(a1 + 1008);
          unsigned int v120 = *(_DWORD *)(a1 + 1096);
          unsigned int v121 = sub_100832C40(v120);
          uint64_t v122 = *(void *)(a1 + 1048);
          uint64_t v123 = *(void *)(a1 + 1064);
          int v124 = *(_DWORD *)(a1 + 1088);
          uint64_t v140 = *(void *)(a1 + 1080);
          uint64_t v144 = *(void *)(a1 + 976);
          uint64_t v146 = *(void *)(a1 + 1016);
          uint64_t v148 = *(void *)(a1 + 1024);
          uint64_t v150 = *(void *)(a1 + 1056);
          uint64_t v152 = *(void *)(a1 + 1072);
          unint64_t v154 = *(void *)(a1 + 984);
          int v156 = *(unsigned __int8 *)(a1 + 1092);
          int v158 = *(unsigned __int8 *)(a1 + 2096);
          int v160 = *(unsigned __int8 *)(a1 + 2075);
          int v162 = *(unsigned __int8 *)(a1 + 159);
          int v164 = *(_DWORD *)(a1 + 1456);
          uint64_t v125 = *(void *)(a1 + 1696);
          uint64_t v171 = *(void *)(v125 + 384);
          uint64_t v166 = *(void *)(v125 + 392);
          int v169 = *(_DWORD *)(a1 + 96);
          int v175 = *(_DWORD *)(a1 + 2160);
          uint64_t v126 = sub_10080E94C();
          double v127 = sub_10080EF30(v126);
          *(_DWORD *)uint64_t v207 = 134290179;
          *(void *)&v207[4] = v118;
          *(_WORD *)&v207[12] = 2049;
          *(void *)&v207[14] = v119;
          *(_WORD *)&v207[22] = 2050;
          *(void *)&v207[24] = v142;
          *(_WORD *)&v207[32] = 1026;
          *(_DWORD *)&v207[34] = v120;
          *(_WORD *)&v207[38] = 2082;
          *(void *)&v207[40] = v121;
          *(_WORD *)&v207[48] = 2049;
          *(void *)&v207[50] = v122;
          *(_WORD *)&v207[58] = 2049;
          *(void *)&v207[60] = v123;
          *(_WORD *)&v207[68] = 1026;
          *(_DWORD *)&v207[70] = v124;
          *(_WORD *)&v207[74] = 2050;
          *(void *)&v207[76] = v140;
          *(_WORD *)&v207[84] = 2050;
          *(void *)&v207[86] = v144;
          *(_WORD *)&v207[94] = 2050;
          *(double *)&v207[96] = v180;
          *(_WORD *)&v207[104] = 2049;
          *(void *)&v207[106] = v146;
          *(_WORD *)&v207[114] = 2050;
          *(void *)&v207[116] = v148;
          *(_WORD *)&v207[124] = 2050;
          *(void *)&v207[126] = v150;
          *(_WORD *)&v207[134] = 2050;
          *(void *)&v207[136] = v152;
          __int16 v208 = 2050;
          unint64_t v209 = v154;
          __int16 v210 = 1026;
          int v211 = v156;
          __int16 v212 = 1026;
          *(_DWORD *)uint64_t v213 = v158;
          *(_WORD *)&v213[4] = 1026;
          *(_DWORD *)&v213[6] = v160;
          *(_WORD *)uint64_t v214 = 1026;
          *(_DWORD *)&v214[2] = v162;
          __int16 v215 = 1026;
          int v216 = v164;
          __int16 v217 = 1026;
          int v218 = v166;
          __int16 v219 = 2050;
          uint64_t v220 = v171;
          __int16 v221 = 1026;
          int v222 = v169;
          __int16 v223 = 1026;
          int v224 = v78;
          __int16 v225 = 1026;
          int v226 = v175;
          __int16 v227 = 2050;
          double v228 = v127;
          LODWORD(v138) = 228;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v178,  0LL,  "CL-fusion,Pos,0,%{private}.7f,%{private}.7f,Accuracy,%{public}.3f,Type,%{public}d,%{public}s,Speed,%{private }.2f,Course,%{private}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{p ublic}.3f,Altitude,%{private}.1f,AltitudeAccuracy,%{public}.1f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{p ublic}.1f,timestampMCT,%{public}.3f,fixIsWiFiAP,%{public}d,linkIsAssociated,%{public}d,inVisit,%{public}d,is Passthrough,%{public}d,dynamicsMode,%{public}d,IO_Context,%{public}d,IO_mct,%{public}.3f,origProviderType,%{ public}d,numHypothesis,%{public}d,FusionExeState,%{public}d,propagation_us,%{public}.3f",  v207,  v138);
          uint64_t v129 = (char *)v128;
          uint64_t v89 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const std::shared_ptr<const LCFusionProviderLocation>, BOOL &)",  "%s\n",  v128);
          if (v129 != buf) {
            free(v129);
          }
        }

        *(void *)&_BYTE buf[12] = 0LL;
        *(void *)&uint8_t buf[4] = 0LL;
        *(_OWORD *)&buf[20] = xmmword_1012E0070;
        *(_OWORD *)&buf[36] = v176;
        *(_OWORD *)&buf[52] = v176;
        *(_OWORD *)&std::string buf[68] = v176;
        *(_DWORD *)buf = 0xFFFF;
        *(_DWORD *)&buf[84] = 0;
        memset(&buf[96], 0, 20);
        *(void *)&buf[88] = 0xBFF0000000000000LL;
        *(void *)&buf[116] = 0xBFF0000000000000LL;
        *(_DWORD *)&buf[124] = 0x7FFFFFFF;
        *(void *)&buf[136] = 0LL;
        *(void *)uint64_t v230 = 0LL;
        *(void *)&buf[128] = 0LL;
        v230[8] = 0;
        uint64_t v68 = v173;
        if (*(_BYTE *)(a1 + 2264))
        {
          BOOL v90 = sub_100AA621C(v89, v167, (uint64_t)buf);
          if (v90)
          {
            *(void *)uint64_t v207 = 0xBFF0000000000000LL;
            CLMotionActivity::getInit((CLMotionActivity *)v90);
            sub_10044A3DC((void *)(a1 + 1840), v207);
            uint64_t v91 = sub_100370E78();
            char v92 = *(_BYTE *)(a1 + 1092);
            char v93 = *(_BYTE *)(a1 + 2096);
            char v94 = *(_BYTE *)(a1 + 2075);
            char v95 = *(_BYTE *)(a1 + 159);
            int v179 = *(_DWORD *)(a1 + 1456);
            *(_OWORD *)int v181 = *(_OWORD *)(*(void *)(a1 + 1696) + 384LL);
            sub_100380644( v91,  (uint64_t)buf,  (uint64_t *)&v180,  v92,  v93,  v94,  v95,  &v179,  (unsigned int *)v181,  (unsigned int *)(a1 + 96),  v78,  (int *)(a1 + 2160),  (uint64_t)v207);
            uint64_t v68 = v173;
          }
        }
      }

      else
      {
        if (!*(_DWORD *)(a1 + 1104)) {
          *(_DWORD *)(a1 + 1104) = 9;
        }
        *unsigned int v172 = 1;
      }

      if (!*(_BYTE *)(a1 + 158))
      {
        __int128 v109 = *(_BYTE **)(a1 + 2088);
        if (!v109 || !v109[1] || !*v109)
        {
          if (sub_100AA7718(a1, *v68))
          {
            if (*(_BYTE *)(a1 + 156))
            {
              unsigned int v110 = *(_DWORD *)(a1 + 96);
              if (v110 > 8 || ((1 << v110) & 0x1D0) == 0)
              {
                *(void *)buf = *v68 + 128;
                uint64_t v111 = sub_100ABF1B8((uint64_t **)(a1 + 192), *(int **)buf, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5][1];
                __int128 v112 = *(_OWORD *)(v111 + 88);
                __int128 v113 = *(_OWORD *)(v111 + 104);
                __int128 v114 = *(_OWORD *)(v111 + 116);
                *(_OWORD *)(a1 + 1040) = *(_OWORD *)(v111 + 72);
                *(_OWORD *)(a1 + 1084) = v114;
                *(_OWORD *)(a1 + 1072) = v113;
                *(_OWORD *)(a1 + 1056) = v112;
                __int128 v115 = *(_OWORD *)(v111 + 8);
                __int128 v116 = *(_OWORD *)(v111 + 24);
                __int128 v117 = *(_OWORD *)(v111 + 56);
                *(_OWORD *)(a1 + 1008) = *(_OWORD *)(v111 + 40);
                *(_OWORD *)(a1 + 1024) = v117;
                *(_OWORD *)(a1 + 976) = v115;
                *(_OWORD *)(a1 + 992) = v116;
                *unsigned int v172 = 0;
              }
            }

            else
            {
              *unsigned int v172 = 1;
              *(_DWORD *)(a1 + 1104) = 1;
            }

            *(_BYTE *)(a1 + 159) = 1;
          }
        }
      }
    }

    *(_BYTE *)(a1 + 156) = 0;
    if (!*v172) {
      *(void *)(a1 + 2136) = 0LL;
    }
    int v96 = *(void **)(a1 + 192);
    if (v96 != (void *)(a1 + 200))
    {
      do
      {
        uint64_t v97 = v96 + 5;
        int v98 = (void *)v96[5];
        if (v98)
        {
          do
          {
            double v99 = *(double *)(a1 + 184);
            double v100 = *(double *)(v98[1] + 16LL);
            if (v99 > v100 && v99 - v100 > 300.0) {
              sub_1000F0D38(v98 + 1);
            }
            int v98 = (void *)*v98;
          }

          while (v98);
          unint64_t v101 = *(void **)v97;
          for (*(void *)buf = 0LL; v101; unint64_t v101 = (void *)*v101)
          {
            uint64_t v102 = v101[2];
            if (!v102 || *(void *)(v102 + 8) == -1LL)
            {
              while (1)
              {
                unint64_t v101 = (void *)*v101;
                if (!v101) {
                  break;
                }
                uint64_t v103 = v101[2];
                if (v103)
                {
                  if (*(void *)(v103 + 8) != -1LL) {
                    break;
                  }
                }
              }

              if (buf != v97 && v97 != (_BYTE *)v101)
              {
                uint64_t v104 = v97;
                do
                {
                  uint64_t v105 = v104;
                  uint64_t v104 = (void *)*v104;
                }

                while (v104 != v101);
                if (v105 != (void *)v97)
                {
                  *uint64_t v105 = *(void *)buf;
                  *(void *)buf = *(void *)v97;
                  *(void *)uint64_t v97 = v101;
                }
              }

              if (!v101) {
                break;
              }
            }

            uint64_t v97 = v101;
          }
        }

        else
        {
          *(void *)buf = 0LL;
        }

        sub_1005F69EC((void **)buf);
        __int128 v106 = (void *)v96[1];
        if (v106)
        {
          do
          {
            int v107 = v106;
            __int128 v106 = (void *)*v106;
          }

          while (v106);
        }

        else
        {
          do
          {
            int v107 = (void *)v96[2];
            _ZF = *v107 == (void)v96;
            int v96 = v107;
          }

          while (!_ZF);
        }

        int v96 = v107;
      }

      while (v107 != (void *)(a1 + 200));
    }

    if (v194) {
      std::__shared_weak_count::__release_weak(v194);
    }
  }

  return 1LL;
}

void sub_100AAC56C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100AAC57C(uint64_t a1, uint64_t *a2)
{
  unsigned int v24 = 0;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  double v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v4 = a1 + 2272;
  sub_10069DC68(a1 + 2272, *(_DWORD *)(a1 + 1912));
  sub_10069DD88(v4, *(_DWORD *)(*(void *)(a1 + 1696) + 392LL));
  sub_100ABCF14(a1, &v24, (char **)&v21, (double **)&v18);
  sub_10069DE48(v4, v24);
  sub_10069E188(v4, (double **)&v18);
  sub_10069E4C4(v4, &v21);
  int v5 = *(_DWORD **)(a1 + 1696);
  int v6 = v5[106];
  int v7 = v5[107];
  int v8 = v5[108];
  int v9 = v5[109];
  *((void *)v5 + 53) = 0LL;
  *((void *)v5 + 54) = 0LL;
  sub_10069E118(v4, v8, v9, v6, v7);
  uint64_t v10 = *a2;
  if (*a2)
  {
    int v11 = *(_DWORD *)(v10 + 128);
    if (v11 == 4)
    {
      uint64_t v15 = 0LL;
      double v16 = 0LL;
      uint64_t v17 = 0LL;
      std::stringbuf::string_type __p = 0LL;
      double v13 = 0LL;
      uint64_t v14 = 0LL;
      sub_100ABD5C4(a1, (double *)v10, (char **)&v15, (char **)&__p);
      sub_10069E6D0(v4, (double **)&v15);
      sub_10069E3BC(v4, (double **)&__p);
      if (__p)
      {
        double v13 = __p;
        operator delete(__p);
      }

      if (v15)
      {
        double v16 = v15;
        operator delete(v15);
      }
    }

    else if (v11 == 1)
    {
      sub_100ABD2C4(a1, (double *)v10, (char **)&v21, (double **)&v18);
      sub_10069E5EC(v4, &v21, *(double *)(*a2 + 40));
      sub_10069E2B8(v4, (double **)&v18, *(double *)(*a2 + 40));
      if (*(_DWORD *)(a1 + 1096) != 1) {
        sub_10069E004(v4);
      }
    }
  }

  sub_10069BE30(v4);
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }

  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }

uint64_t sub_100AAC724(uint64_t a1, double *a2)
{
  uint64_t v4 = *(void *)(a1 + 1696);
  uint64_t v5 = *(void *)(v4 + 392);
  double v53 = *(double *)(v4 + 384);
  uint64_t v54 = v5;
  *(void *)buf = 0xBFF0000000000000LL;
  if (sub_10044B44C((void *)(a1 + 1840), (double *)buf) && (v5 - 1) <= 1)
  {
    uint64_t v6 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    double v53 = sub_10080EB58(v6, buf);
    if ((v54 - 1) <= 1)
    {
      if ((_DWORD)v54 == 2) {
        int v7 = 2;
      }
      else {
        int v7 = 1;
      }
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v8 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)(a1 + 1912);
        *(_DWORD *)buf = 134349568;
        *(double *)&uint8_t buf[4] = v53;
        __int16 v62 = 1026;
        int v63 = v7;
        __int16 v64 = 1026;
        int v65 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v49 = *(_DWORD *)(a1 + 1912);
        int v55 = 134349568;
        double v56 = v53;
        __int16 v57 = 1026;
        int v58 = v7;
        __int16 v59 = 1026;
        int v60 = v49;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d",  &v55,  24);
        uint64_t v51 = (char *)v50;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)",  "%s\n",  v50);
        if (v51 != buf) {
          free(v51);
        }
      }

      uint64_t v10 = *(void **)(a1 + 216);
      if (v10 != (void *)(a1 + 224))
      {
        do
        {
          *((_DWORD *)v10 + 108) = v7;
          if (!sub_1004CFB44((uint64_t)(v10 + 11), &v53, 1.5))
          {
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            int v11 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              int v12 = *((_DWORD *)v10 + 173);
              *(_DWORD *)buf = 134349312;
              *(double *)&uint8_t buf[4] = v53;
              __int16 v62 = 1026;
              int v63 = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d",  buf,  0x12u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              int v16 = *((_DWORD *)v10 + 173);
              int v55 = 134349312;
              double v56 = v53;
              __int16 v57 = 1026;
              int v58 = v16;
              LODWORD(v52) = 18;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d",  &v55,  v52);
              double v18 = (char *)v17;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)",  "%s\n",  v17);
              if (v18 != buf) {
                free(v18);
              }
            }
          }

          double v13 = (void *)v10[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              double v13 = (void *)*v13;
            }

            while (v13);
          }

          else
          {
            do
            {
              uint64_t v14 = (void *)v10[2];
              BOOL v15 = *v14 == (void)v10;
              uint64_t v10 = v14;
            }

            while (!v15);
          }

          uint64_t v10 = v14;
        }

        while (v14 != (void *)(a1 + 224));
      }

      for (uint64_t i = *(uint64_t **)(a1 + 240); i; uint64_t i = (uint64_t *)*i)
      {
        *((_DWORD *)i + 100) = v7;
        if (!sub_1004CFB44((uint64_t)(i + 7), &v53, 1.5))
        {
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          uint64_t v43 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            int v44 = *((_DWORD *)i + 165);
            *(_DWORD *)buf = 134349312;
            *(double *)&uint8_t buf[4] = v53;
            __int16 v62 = 1026;
            int v63 = v44;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d",  buf,  0x12u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            int v45 = *((_DWORD *)i + 165);
            int v55 = 134349312;
            double v56 = v53;
            __int16 v57 = 1026;
            int v58 = v45;
            LODWORD(v52) = 18;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d",  &v55,  v52);
            uint64_t v47 = (char *)v46;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)",  "%s\n",  v46);
            if (v47 != buf) {
              free(v47);
            }
          }
        }
      }
    }

    char v20 = 0;
  }

  else
  {
    uint64_t v19 = *(void **)(a1 + 216);
    if (v19 == (void *)(a1 + 224))
    {
      char v20 = 0;
    }

    else
    {
      char v20 = 0;
      do
      {
        if (!sub_1004CCD0C((uint64_t)(v19 + 11), a2))
        {
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          uint64_t v21 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            double v22 = *a2;
            int v23 = *(_DWORD *)(a1 + 1912);
            int v24 = *((_DWORD *)v19 + 173);
            *(_DWORD *)buf = 134349568;
            *(double *)&uint8_t buf[4] = v22;
            __int16 v62 = 1026;
            int v63 = v23;
            __int16 v64 = 1026;
            int v65 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,provider hypothesis prediction failed,%{public}d,hID,%{public}d",  buf,  0x18u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            double v27 = *a2;
            int v28 = *(_DWORD *)(a1 + 1912);
            int v29 = *((_DWORD *)v19 + 173);
            int v55 = 134349568;
            double v56 = v27;
            __int16 v57 = 1026;
            int v58 = v28;
            __int16 v59 = 1026;
            int v60 = v29;
            LODWORD(v52) = 24;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,provider hypothesis prediction failed,%{public}d,hID,%{public}d",  &v55,  v52);
            int v31 = (char *)v30;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)",  "%s\n",  v30);
            if (v31 != buf) {
              free(v31);
            }
          }

          char v20 = 1;
        }

        __int128 v25 = (void *)v19[1];
        if (v25)
        {
          do
          {
            __int128 v26 = v25;
            __int128 v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            __int128 v26 = (void *)v19[2];
            BOOL v15 = *v26 == (void)v19;
            uint64_t v19 = v26;
          }

          while (!v15);
        }

        uint64_t v19 = v26;
      }

      while (v26 != (void *)(a1 + 224));
    }

    for (j = *(uint64_t **)(a1 + 240); j; j = (uint64_t *)*j)
    {
      if (!sub_1004CCD0C((uint64_t)(j + 7), a2))
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v33 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          double v34 = *a2;
          int v35 = *(_DWORD *)(a1 + 1912);
          int v36 = *((_DWORD *)j + 165);
          *(_DWORD *)buf = 134349568;
          *(double *)&uint8_t buf[4] = v34;
          __int16 v62 = 1026;
          int v63 = v35;
          __int16 v64 = 1026;
          int v65 = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,fused hypothesis prediction failed,%{public}d,hID,%{public}d",  buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          double v37 = *a2;
          int v38 = *(_DWORD *)(a1 + 1912);
          int v39 = *((_DWORD *)j + 165);
          int v55 = 134349568;
          double v56 = v37;
          __int16 v57 = 1026;
          int v58 = v38;
          __int16 v59 = 1026;
          int v60 = v39;
          LODWORD(v52) = 24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,fused hypothesis prediction failed,%{public}d,hID,%{public}d",  &v55,  v52);
          int v41 = (char *)v40;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::propagateHypotheses(const CFTimeInterval &)",  "%s\n",  v40);
          if (v41 != buf) {
            free(v41);
          }
        }

        char v20 = 1;
      }
    }
  }

  return v20 & 1;
}

void sub_100AAD094(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

BOOL sub_100AAD0BC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_BYTE **)(a1 + 2088);
  if (!v2 || !v2[1] || !*v2) {
    return 1LL;
  }
  BOOL result = 1LL;
  switch(*(_DWORD *)(*(void *)a2 + 128LL))
  {
    case 1:
      if ((sub_1004F0804(a1 + 1712) & 1) != 0)
      {
        int v10 = *(_DWORD *)(a1 + 2176);
        *(_DWORD *)(a1 + 2176) = v10 + 1;
        if (v10 > 8) {
          return 1LL;
        }
      }

      else
      {
        *(_DWORD *)(a1 + 2176) = 0;
      }

      *(_DWORD *)(a1 + 1104) = 11;
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      double v13 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        int v14 = *(_DWORD *)(a1 + 2176);
        *(_DWORD *)buf = 67240192;
        int v19 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#fusion rejecting bad quality gnss fix,consecutiveGoodGPSTracking,%{public}d",  buf,  8u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v15 = *(_DWORD *)(a1 + 2176);
        v17[0] = 67240192;
        v17[1] = v15;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion rejecting bad quality gnss fix,consecutiveGoodGPSTracking,%{public}d",  v17,  8);
        int v9 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldUseThisLocationInCarPlay(const std::shared_ptr<const LCFusionProviderLocation>)",  "%s\n",  v16);
        goto LABEL_38;
      }

      break;
    case 4:
    case 6:
    case 7:
    case 8:
      uint64_t v5 = *(void **)(a1 + 240);
      if (v5)
      {
        int v6 = 0;
        do
        {
          ++v6;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
        if (v6 != 1) {
          return 1LL;
        }
        *(_DWORD *)(a1 + 1104) = 12;
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v7 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "#fusion rejecting wifi fix during single hypothesis",  buf,  2u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          LOWORD(v17[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion rejecting wifi fix during single hypothesis",  v17,  2);
          int v9 = (uint8_t *)v8;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldUseThisLocationInCarPlay(const std::shared_ptr<const LCFusionProviderLocation>)",  "%s\n",  v8);
          goto LABEL_38;
        }
      }

      break;
    case 0xA:
      *(_DWORD *)(a1 + 1104) = 13;
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v11 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#fusion rejecting pipelined fix during CarPlay session",  buf,  2u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        LOWORD(v17[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion rejecting pipelined fix during CarPlay session",  v17,  2);
        int v9 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::shouldUseThisLocationInCarPlay(const std::shared_ptr<const LCFusionProviderLocation>)",  "%s\n",  v12);
LABEL_38:
        if (v9 != buf) {
          free(v9);
        }
        BOOL result = 0LL;
      }

      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100AAD584(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    int v6 = v5;
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      if (v7)
      {
        if (*(double *)(v7 + 40) > 0.0)
        {
          int v160 = v5;
          double v164 = 0.0;
          double v165 = 0.0;
          uint64_t v8 = sub_100D2E600((double *)(a1 + 1800), &v165, &v164, *(double *)(v7 + 24), *(double *)(a1 + 1704));
          uint64_t v9 = v8;
          if ((v8 & 1) != 0)
          {
            int v10 = *(uint64_t **)(a1 + 240);
            if (v10)
            {
              unsigned int v157 = v8;
              char v161 = 0;
              int v163 = 0LL;
              int v11 = (double *)(v7 + 16);
              double v158 = v165 * 0.0174532925;
              double v12 = 1.79769313e308;
              double v13 = v164 * 0.0174532925;
              __asm { FMOV            V3.2D, #-1.0 }

              v18.f64[0] = NAN;
              v18.f64[1] = NAN;
              int8x16_t v159 = (int8x16_t)vnegq_f64(v18);
              __int128 v162 = _Q3;
              do
              {
                unint64_t v19 = v10[5];
                unint64_t v20 = v19 / 0x17;
                uint64_t v21 = v10[2];
                uint64_t v22 = v10[3];
                if (v22 == v21)
                {
                  unint64_t v24 = 0LL;
                  unint64_t v27 = 0LL;
                  __int128 v26 = (void *)(v21 + 8 * ((v10[6] + v19) / 0x17));
                  unint64_t v23 = v19 % 0x17;
                }

                else
                {
                  unint64_t v23 = v19 % 0x17;
                  unint64_t v24 = *(void *)(v21 + 8 * v20) + 176 * (v19 % 0x17);
                  unint64_t v25 = v10[6] + v19;
                  __int128 v26 = (void *)(v21 + 8 * (v25 / 0x17));
                  unint64_t v27 = *v26 + 176 * (v25 % 0x17);
                }

                for (double i = 1.79769313e308; ; double i = v31)
                {
                  uint64_t v29 = v27;
                  uint64_t v30 = v22 == v21 ? 0LL : *(void *)(v21 + 8 * v20) + 176 * v23;
                  if (v29 == v30) {
                    break;
                  }
                  if (v29 == *v26)
                  {
                    uint64_t v33 = *(v26 - 1);
                    if (!*(_BYTE *)(v33 + 4040))
                    {
LABEL_26:
                      if (qword_101934960 != -1) {
                        dispatch_once(&qword_101934960, &stru_10186D380);
                      }
                      int v35 = (os_log_s *)qword_101934968;
                      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v36 = v29;
                        if (v29 == *v26) {
                          uint64_t v36 = *(v26 - 1) + 4048LL;
                        }
                        int v37 = *((_DWORD *)v10 + 165);
                        uint64_t v38 = *(void *)(v36 - 168);
                        *(_DWORD *)buf = 67240448;
                        *(_DWORD *)&uint8_t buf[4] = v37;
                        *(_WORD *)&uint8_t buf[8] = 2050;
                        *(void *)&buf[10] = v38;
                        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "#Error,fusion data association, found no fused location, hID,%{public}d,mct,%{public}.3f",  buf,  0x12u);
                      }

                      if (sub_1002921D0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_101934960 != -1) {
                          dispatch_once(&qword_101934960, &stru_10186D380);
                        }
                        int v39 = *((_DWORD *)v10 + 165);
                        if (v29 == *v26) {
                          uint64_t v29 = *(v26 - 1) + 4048LL;
                        }
                        uint64_t v40 = *(void *)(v29 - 168);
                        *(_DWORD *)int v169 = 67240448;
                        *(_DWORD *)&v169[4] = v39;
                        *(_WORD *)&v169[8] = 2050;
                        *(void *)&v169[10] = v40;
                        LODWORD(v149) = 18;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,fusion data association, found no fused location, hID,%{public}d,mct,%{public}.3f",  v169,  *(void *)&v149);
                        uint64_t v42 = (char *)v41;
                        sub_10029211C( "Generic",  1LL,  0,  0LL,  "auto cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)::(anonymo us class)::operator()(LCFusionLocationHypothesis &) const",  "%s\n",  v41);
                        if (v42 != buf) {
                          free(v42);
                        }
                      }

                      goto LABEL_56;
                    }

                    double v31 = vabdd_f64(*(double *)(v33 + 3880), *v11);
                    if (v31 > i) {
                      break;
                    }
                    uint64_t v32 = v33 + 4048;
                    --v26;
                  }

                  else
                  {
                    if (!*(_BYTE *)(v29 - 8)) {
                      goto LABEL_26;
                    }
                    double v31 = vabdd_f64(*(double *)(v29 - 168), *v11);
                    uint64_t v32 = v29;
                    if (v31 > i) {
                      break;
                    }
                  }

                  unint64_t v27 = v32 - 176;
                  unint64_t v24 = v29;
                }

                if (v22 == v21) {
                  uint64_t v34 = 0LL;
                }
                else {
                  uint64_t v34 = *(void *)(v21 + 8 * v20) + 176 * v23;
                }
                if (v24 == v34)
                {
                  double v58 = 1.79769313e308;
                  goto LABEL_57;
                }

                *(_OWORD *)&uint8_t buf[8] = _Q3;
                *(_OWORD *)&buf[40] = xmmword_1012E0070;
                *(_OWORD *)&buf[56] = xmmword_1012E0070;
                *(_OWORD *)&buf[80] = _Q3;
                *(_OWORD *)&buf[96] = _Q3;
                *(void *)buf = &off_1018920B8;
                *(void *)&buf[112] = 0xBFF0000000000000LL;
                *(_DWORD *)&buf[120] = 0;
                buf[124] = 0;
                *(_DWORD *)&buf[128] = 0;
                double v43 = *(double *)(v7 + 40);
                double v44 = *(double *)&buf[40];
                *(_OWORD *)&v169[8] = v162;
                __int128 v170 = xmmword_1012E0070;
                __int128 v171 = xmmword_1012E0070;
                __int128 v172 = v162;
                __int128 v173 = v162;
                unint64_t v174 = 0xBFF0000000000000LL;
                int v175 = 0;
                char v176 = 0;
                int v177 = 0;
                double v45 = *((double *)v10 + 51);
                double v46 = *(double *)(v7 + 16);
                *(void *)int v169 = &off_1018920B8;
                if (v45 <= v46)
                {
                  if (!sub_1004CCD0C((uint64_t)(v10 + 7), (double *)(v7 + 16))
                    || !sub_1004CE2F8((uint64_t)(v10 + 7), (uint64_t)v169))
                  {
                    goto LABEL_56;
                  }

                  double v60 = *(double *)&v169[24];
                  *(double *)v59.i64 = *(double *)&v169[32] * 0.0174532925;
                  double v62 = *(double *)(v7 + 24);
                  double v61 = *(double *)(v7 + 32);
                  int8x16_t v63 = (int8x16_t)0x400921FB54442D18uLL;
                  if (fabs(*(double *)&v169[32] * 0.0174532925) <= 3.14159265)
                  {
                    int8x16_t v65 = (int8x16_t)0x400921FB54442D18uLL;
                  }

                  else
                  {
                    int8x16_t v152 = vbslq_s8(v159, (int8x16_t)0x400921FB54442D18uLL, v59);
                    double v64 = fmod(*(double *)v59.i64 + *(double *)v152.i64, 6.28318531);
                    int8x16_t v65 = (int8x16_t)0x400921FB54442D18uLL;
                    v63.i64[1] = v152.i64[1];
                    *(double *)v59.i64 = v64 - *(double *)v152.i64;
                  }

                  *(double *)v63.i64 = v61 * 0.0174532925;
                  v77.i64[1] = v65.i64[1];
                  if (fabs(v61 * 0.0174532925) > *(double *)v65.i64)
                  {
                    uint64_t v155 = v59.i64[0];
                    COERCE_DOUBLE(uint64_t v150 = vbslq_s8(v159, v65, v63).i64[0]);
                    *(double *)v77.i64 = fmod(*(double *)v63.i64 + *(double *)&v150, 6.28318531);
                    int8x16_t v65 = (int8x16_t)0x400921FB54442D18uLL;
                    v59.i64[0] = v155;
                    *(double *)v63.i64 = *(double *)v77.i64 - *(double *)&v150;
                  }

                  double v78 = 0.5;
                  *(double *)v77.i64 = *(double *)v59.i64 - *(double *)v63.i64;
                  if (vabdd_f64(*(double *)v59.i64, *(double *)v63.i64) > *(double *)v65.i64)
                  {
                    double v156 = *(double *)vbslq_s8(v159, v65, v77).i64;
                    *(double *)v77.i64 = fmod(*(double *)v77.i64 + v156, 6.28318531) - v156;
                  }

                  double v81 = v43 * v43;
                  double v80 = v60 - v62;
                  double v79 = *(double *)&v170 * *(double *)&v170;
                }

                else
                {
                  double v168 = v45;
                  uint64_t v47 = *(std::__shared_weak_count **)(a2 + 24);
                  double v166 = *(double *)(a2 + 16);
                  uint64_t v167 = v47;
                  if (v47)
                  {
                    p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
                    do
                      unint64_t v49 = __ldxr(p_shared_weak_owners);
                    while (__stxr(v49 + 1, p_shared_weak_owners));
                  }

                  int v50 = sub_1004D0E24(a1 + 1112, &v168, (uint64_t *)&v166, (uint64_t)v169);
                  if (v167) {
                    std::__shared_weak_count::__release_weak(v167);
                  }
                  if (!v50)
                  {
LABEL_56:
                    double v58 = 1.79769313e308;
                    goto LABEL_57;
                  }

                  double v52 = *(double *)&buf[24];
                  *(double *)v51.i64 = *(double *)&buf[32] * 0.0174532925;
                  double v54 = *(double *)&v169[24];
                  double v53 = *(double *)&v169[32];
                  int8x16_t v55 = (int8x16_t)0x400921FB54442D18uLL;
                  if (fabs(*(double *)&buf[32] * 0.0174532925) <= 3.14159265)
                  {
                    int8x16_t v57 = (int8x16_t)0x400921FB54442D18uLL;
                  }

                  else
                  {
                    int8x16_t v151 = vbslq_s8(v159, (int8x16_t)0x400921FB54442D18uLL, v51);
                    double v56 = fmod(*(double *)v51.i64 + *(double *)v151.i64, 6.28318531);
                    int8x16_t v57 = (int8x16_t)0x400921FB54442D18uLL;
                    v55.i64[1] = v151.i64[1];
                    *(double *)v51.i64 = v56 - *(double *)v151.i64;
                  }

                  *(double *)v55.i64 = v53 * 0.0174532925;
                  v77.i64[1] = v57.i64[1];
                  if (fabs(v53 * 0.0174532925) > *(double *)v57.i64)
                  {
                    uint64_t v153 = v51.i64[0];
                    COERCE_DOUBLE(uint64_t v150 = vbslq_s8(v159, v57, v55).i64[0]);
                    *(double *)v77.i64 = fmod(*(double *)v55.i64 + *(double *)&v150, 6.28318531);
                    int8x16_t v57 = (int8x16_t)0x400921FB54442D18uLL;
                    v51.i64[0] = v153;
                    *(double *)v55.i64 = *(double *)v77.i64 - *(double *)&v150;
                  }

                  double v78 = 0.5;
                  *(double *)v77.i64 = *(double *)v51.i64 - *(double *)v55.i64;
                  if (vabdd_f64(*(double *)v51.i64, *(double *)v55.i64) > *(double *)v57.i64)
                  {
                    double v154 = *(double *)vbslq_s8(v159, v57, v77).i64;
                    *(double *)v77.i64 = fmod(*(double *)v77.i64 + v154, 6.28318531) - v154;
                  }

                  double v79 = v44 * v44;
                  double v80 = v52 - v54;
                  double v81 = *(double *)&v170 * *(double *)&v170;
                }

                double v82 = v79 * v78;
                unsigned int v83 = *((_DWORD *)v10 + 100);
                if ((v83 - 1 >= 5 && v83 != 10 || v83 < 3 || *(double *)&buf[80] < 1.0)
                  && (*(_DWORD *)(v7 + 128) | 2) == 3)
                {
                  double v84 = *(double *)(v7 + 88);
                  if (v84 > 0.0 && v84 < 5.0)
                  {
                    double v85 = *(double *)(v7 + 80);
                    _NF = v85 < 2.0;
                    double v86 = v82 + v85 * v85;
                    if (!_NF) {
                      double v82 = v86;
                    }
                  }
                }

                double v58 = v158 * v80 * (v158 * v80) * (1.0 / (v81 * v78 + v82))
                    + v13
                    * (*(double *)v77.i64
                     * 57.2957795)
                    * (v13
                     * (*(double *)v77.i64
                      * 57.2957795))
                    * (1.0
                     / (v81 * v78 + v82));
LABEL_57:
                BOOL v66 = v163;
                if (v58 < v12) {
                  BOOL v66 = v10;
                }
                int v163 = v66;
                if (v58 < v12) {
                  double v12 = v58;
                }
                unsigned int v67 = *((_DWORD *)v10 + 100) - 1;
                if (v67 < 0xA && ((0x21Fu >> v67) & 1) != 0 || *(_BYTE *)(a1 + 2096))
                {
                  double v68 = 6.18007;
                }

                else
                {
                  int v69 = *(_DWORD *)(v7 + 128);
                  if ((v69 & 0xFFFFFFFE) == 6 || v69 == 8) {
                    double v68 = 6.18007;
                  }
                  else {
                    double v68 = 11.8292;
                  }
                }

                if (v58 <= v68)
                {
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  __int128 v71 = (os_log_s *)qword_101934968;
                  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                  {
                    int v72 = *((_DWORD *)v10 + 165);
                    int v73 = *((_DWORD *)v10 + 167);
                    *(_DWORD *)buf = 134349824;
                    *(double *)&uint8_t buf[4] = v58;
                    *(_WORD *)&_BYTE buf[12] = 2050;
                    *(double *)&_BYTE buf[14] = v68;
                    *(_WORD *)&_BYTE buf[22] = 1026;
                    *(_DWORD *)&buf[24] = v72;
                    *(_WORD *)&buf[28] = 1026;
                    *(_DWORD *)&buf[30] = v73;
                    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "#fusion,data association success,mahalanobis distance (squared),%{public}.2f,GatingThreshold,%{pub lic}.2f,hID,%{public}d,hypothesisState,%{public}d",  buf,  0x22u);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    int v87 = *((_DWORD *)v10 + 165);
                    int v88 = *((_DWORD *)v10 + 167);
                    *(_DWORD *)int v169 = 134349824;
                    *(double *)&v169[4] = v58;
                    *(_WORD *)&v169[12] = 2050;
                    *(double *)&v169[14] = v68;
                    *(_WORD *)&v169[22] = 1026;
                    *(_DWORD *)&v169[24] = v87;
                    *(_WORD *)&v169[28] = 1026;
                    *(_DWORD *)&v169[30] = v88;
                    LODWORD(v149) = 34;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,data association success,mahalanobis distance (squared),%{public}.2f,GatingThreshold,%{pub lic}.2f,hID,%{public}d,hypothesisState,%{public}d",  v169,  *(void *)&v149);
                    BOOL v90 = (char *)v89;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)",  "%s\n",  v89);
                    if (v90 != buf) {
                      free(v90);
                    }
                  }

                  unint64_t v74 = v10[6] + v10[5] - 1;
                  uint64_t v75 = *(void *)(v10[2] + 8 * (v74 / 0x17));
                  unint64_t v76 = v74 % 0x17;
                  if (*(_BYTE *)(v75 + 176 * v76 + 168)) {
                    sub_100FBA824(v75 + 176 * v76 + 32, (uint64_t)"data association success", *((_DWORD *)v10 + 165));
                  }
                  sub_100E8C4F4((int64x2_t *)(v10 + 1), a2);
                  char v161 = 1;
                }

                else
                {
                  if (*((_DWORD *)v10 + 167) == 2) {
                    *((_DWORD *)v10 + 16memset(&v6[1], 0, 7) = 3;
                  }
                  ++*((_DWORD *)v10 + 166);
                }

                _Q3 = v162;
                int v10 = (uint64_t *)*v10;
              }

              while (v10);
              uint64_t v9 = v157;
              if ((v161 & 1) != 0) {
                goto LABEL_170;
              }
              int v98 = *(double **)(a1 + 240);
              if (v98)
              {
                do
                {
                  double v99 = sub_100E8BE54( *(void *)(*((void *)v98 + 2) + 8 * (*((void *)v98 + 5) / 0x17uLL))
                        + 176 * (*((void *)v98 + 5) % 0x17uLL));
                  if (v99 < 15.0)
                  {
                    double v100 = v99;
                    unint64_t v101 = *(_BYTE **)(a1 + 2088);
                    if (!v101 || !v101[1] || !*v101)
                    {
                      double v166 = v99 / 15.0 * 0.2 + 0.00000001;
                      uint64_t v102 = v98 + 80;
                      double v103 = v98[80];
                      if (v166 < v103) {
                        uint64_t v102 = &v166;
                      }
                      if (v103 < 0.00000001) {
                        uint64_t v102 = (double *)&unk_101347878;
                      }
                      sub_100E900E8((uint64_t)(v98 + 1), *v102);
                      if (qword_101934960 != -1) {
                        dispatch_once(&qword_101934960, &stru_10186D380);
                      }
                      uint64_t v104 = (os_log_s *)qword_101934968;
                      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                      {
                        int v105 = *((_DWORD *)v98 + 165);
                        uint64_t v106 = *((void *)v98 + 80);
                        *(_DWORD *)buf = 67240704;
                        *(_DWORD *)&uint8_t buf[4] = v105;
                        *(_WORD *)&uint8_t buf[8] = 2050;
                        *(double *)&buf[10] = v100;
                        *(_WORD *)&_BYTE buf[18] = 2050;
                        *(void *)&buf[20] = v106;
                        _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "Provisional hypothesis likelihood restricted hID,%{public}d,age,%{public}.3f,likelihood,%{public}.3f",  buf,  0x1Cu);
                      }

                      if (sub_1002921D0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_101934960 != -1) {
                          dispatch_once(&qword_101934960, &stru_10186D380);
                        }
                        int v107 = *((_DWORD *)v98 + 165);
                        uint64_t v108 = *((void *)v98 + 80);
                        *(_DWORD *)int v169 = 67240704;
                        *(_DWORD *)&v169[4] = v107;
                        *(_WORD *)&v169[8] = 2050;
                        *(double *)&v169[10] = v100;
                        *(_WORD *)&v169[18] = 2050;
                        *(void *)&v169[20] = v108;
                        LODWORD(v149) = 28;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "Provisional hypothesis likelihood restricted hID,%{public}d,age,%{public}.3f,likelihood,%{public}.3f",  v169,  *(void *)&v149);
                        unsigned int v110 = (char *)v109;
                        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)",  "%s\n",  v109);
                        if (v110 != buf) {
                          free(v110);
                        }
                      }
                    }
                  }

                  int v98 = *(double **)v98;
                }

                while (v98);
                uint64_t v9 = v157;
              }
            }

            else
            {
              int v163 = 0LL;
              double v12 = 1.79769313e308;
            }

            bzero(buf, 0x2D0uLL);
            sub_1005F658C((uint64_t)buf);
            uint64_t v111 = *(void *)(a1 + 240);
            __int128 v112 = (char *)operator new(0x2D8uLL);
            *(void *)__int128 v112 = v111;
            *(_OWORD *)(v112 + 8) = *(_OWORD *)buf;
            uint64_t v113 = *(void *)&buf[24];
            *((void *)v112 + 3) = *(void *)&buf[16];
            *((void *)v112 + 4) = v113;
            memset(buf, 0, 32);
            *(_OWORD *)(v112 + 40) = *(_OWORD *)&buf[32];
            *(_OWORD *)&_BYTE buf[32] = 0u;
            memcpy(v112 + 56, &buf[48], 0x218uLL);
            __int128 v114 = v179;
            __int128 v179 = 0u;
            __int128 v115 = v180;
            __int128 v116 = v181;
            *((_OWORD *)v112 + 3memset(&v6[1], 0, 7) = v114;
            *((_OWORD *)v112 + 38) = v115;
            __int128 v117 = v184;
            __int128 v118 = v186;
            *((_OWORD *)v112 + 43) = v185;
            *((_OWORD *)v112 + 44) = v118;
            __int128 v119 = v182;
            __int128 v120 = v183;
            *((_OWORD *)v112 + 39) = v116;
            *((_OWORD *)v112 + 40) = v119;
            *((_DWORD *)v112 + 180) = v187;
            *((_OWORD *)v112 + 41) = v120;
            *((_OWORD *)v112 + 42) = v117;
            *(void *)(a1 + 240) = v112;
            sub_1005F67A0(buf);
            sub_10069E0BC(a1 + 2272);
            uint64_t v121 = *(void *)(a1 + 240);
            *(_DWORD *)(v121 + 400) = *(_DWORD *)(a1 + 1912);
            sub_100E8C4F4((int64x2_t *)(v121 + 8), a2);
            *(_OWORD *)(*(void *)(a1 + 240) + 640LL) = xmmword_101347790;
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            uint64_t v122 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v123 = *(void *)(a1 + 240);
              int v124 = *(_DWORD *)(v123 + 660);
              uint64_t v125 = *(void *)(v123 + 640);
              uint64_t v126 = *(void *)(v123 + 648);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v124;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(void *)&buf[10] = v125;
              *(_WORD *)&_BYTE buf[18] = 2048;
              *(void *)&buf[20] = v126;
              _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEBUG,  "New hypothesis created,hID,%d,Likelihood,%.5f,logLikelihood,%.5f",  buf,  0x1Cu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              uint64_t v139 = *(void *)(a1 + 240);
              int v140 = *(_DWORD *)(v139 + 660);
              uint64_t v141 = *(void *)(v139 + 640);
              uint64_t v142 = *(void *)(v139 + 648);
              *(_DWORD *)int v169 = 67109632;
              *(_DWORD *)&v169[4] = v140;
              *(_WORD *)&v169[8] = 2048;
              *(void *)&v169[10] = v141;
              *(_WORD *)&v169[18] = 2048;
              *(void *)&v169[20] = v142;
              LODWORD(v149) = 28;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "New hypothesis created,hID,%d,Likelihood,%.5f,logLikelihood,%.5f",  v169,  v149,  *(double *)&v150);
              uint64_t v144 = (char *)v143;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)",  "%s\n",  v143);
              if (v144 != buf) {
                free(v144);
              }
            }

            if (v163)
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              double v127 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                int v128 = *((_DWORD *)v163 + 165);
                int v129 = *(_DWORD *)(*(void *)(a1 + 240) + 660LL);
                *(_DWORD *)buf = 134349568;
                *(double *)&uint8_t buf[4] = v12;
                *(_WORD *)&_BYTE buf[12] = 1026;
                *(_DWORD *)&_BYTE buf[14] = v128;
                *(_WORD *)&_BYTE buf[18] = 1026;
                *(_DWORD *)&buf[20] = v129;
                _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEBUG,  "fusion data association failed,smallest mahalanobis distance (squared),%{public}.2f,hID,%{public}d,new hypothesisID,%{public}d",  buf,  0x18u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v145 = *((_DWORD *)v163 + 165);
                int v146 = *(_DWORD *)(*(void *)(a1 + 240) + 660LL);
                *(_DWORD *)int v169 = 134349568;
                *(double *)&v169[4] = v12;
                *(_WORD *)&v169[12] = 1026;
                *(_DWORD *)&v169[14] = v145;
                *(_WORD *)&v169[18] = 1026;
                *(_DWORD *)&v169[20] = v146;
                LODWORD(v149) = 24;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "fusion data association failed,smallest mahalanobis distance (squared),%{public}.2f,hID,%{public}d,new hypothesisID,%{public}d",  v169,  *(void *)&v149);
                uint64_t v148 = (char *)v147;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)",  "%s\n",  v147);
                if (v148 != buf) {
                  free(v148);
                }
              }

              unint64_t v130 = v163[6] + v163[5] - 1;
              uint64_t v131 = *(void *)(v163[2] + 8 * (v130 / 0x17));
              unint64_t v132 = v130 % 0x17;
              if (*(_BYTE *)(v131 + 176 * v132 + 168)) {
                sub_100FBA824( v131 + 176 * v132 + 32,  (uint64_t)"nearest hypothesis to input location where association failed",  *((_DWORD *)v163 + 165));
              }
            }

            uint64_t v133 = *(void *)(a1 + 240);
            unint64_t v134 = *(void *)(v133 + 48) + *(void *)(v133 + 40) - 1LL;
            uint64_t v135 = *(void *)(*(void *)(v133 + 16) + 8 * (v134 / 0x17));
            unint64_t v136 = v134 % 0x17;
            if (*(_BYTE *)(v135 + 176 * v136 + 168)) {
              sub_100FBA824(v135 + 176 * v136 + 32, (uint64_t)"newly created fused hypothesis", *(_DWORD *)(v133 + 660));
            }
          }

          else
          {
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            char v95 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_ERROR,  "#Error,fusion data association, calc_dNdE failed",  buf,  2u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              *(_WORD *)int v169 = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,fusion data association, calc_dNdE failed",  v169,  2);
              uint64_t v97 = (char *)v96;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)",  "%s\n",  v96);
              if (v97 != buf) {
                free(v97);
              }
            }
          }

LABEL_170:
          int v6 = v160;
LABEL_119:
          p_uint64_t shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            unint64_t v93 = __ldaxr(p_shared_owners);
          while (__stlxr(v93 - 1, p_shared_owners));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }

          return v9;
        }
      }
    }
  }

  else
  {
    int v6 = 0LL;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v91 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_ERROR,  "#Error,fusion data association: init failed, null or hunc <= 0",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    *(_WORD *)int v169 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,fusion data association: init failed, null or hunc <= 0",  v169,  2);
    uint64_t v138 = (char *)v137;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::associateLocationToHypotheses(const LCFusionFusedLocation &)",  "%s\n",  v137);
    if (v138 != buf) {
      free(v138);
    }
  }

  uint64_t v9 = 0LL;
  if (v6) {
    goto LABEL_119;
  }
  return v9;
}

                        if (!*(_BYTE *)(a1 + 58)) {
                          return;
                        }
                        goto LABEL_171;
                      }
                    }

    double v60 = 3;
    goto LABEL_193;
  }

  double v58 = "NO";
  *(_DWORD *)buf = 68290562;
  double v86 = 0;
  int v87 = 2082;
  int v88 = "";
  if (v45 == 1) {
    int8x16_t v59 = "YES";
  }
  else {
    int8x16_t v59 = "NO";
  }
  uint64_t v89 = 2114;
  if ((v36 & 1) != 0) {
    double v58 = "YES";
  }
  BOOL v90 = v28;
  uint64_t v91 = 2082;
  char v92 = (id)v59;
  unint64_t v93 = 2082;
  char v94 = v58;
  char v95 = 2050;
  int v96 = v51;
  uint64_t v97 = 2114;
  int v98 = v37;
  double v99 = 2114;
  double v100 = v38;
  double v60 = 1;
  _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLAvengerScannerParser posh, data:%{public, location:escape_only}@, isApple:%{publi c, location:escape_only}s, isNearOwner:%{public, location:escape_only}s, status:%{public}lu, reserved:%{ public, location:escape_only}@, pubKey2:%{public, location:escape_only}@}",  buf,  0x4Eu);
  if (v45 == 1) {
    goto LABEL_170;
  }
  double v61 = 0;
LABEL_194:
  if ((v36 & 1) != 0) {
    double v68 = v60 | 4;
  }
  else {
    double v68 = v60;
  }
  int v69 = +[NSMutableData dataWithData:]( NSMutableData,  "dataWithData:",  [a3 objectForKeyedSubscript:CBAdvertisementDataDeviceAddress]);
  objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CBAdvertisementDataTimestamp), "doubleValue");
  __int128 v70 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:");
  __int128 v71 = (_UNKNOWN **)[a3 objectForKeyedSubscript:CBAdvertisementDataChannel];
  if (v61)
  {
    int v72 = -[NSMutableData mutableBytes](v37, "mutableBytes");
    int v73 = *v72;
    *v72 &= 0xFCu;
    unint64_t v74 = -[NSMutableData mutableBytes](v69, "mutableBytes");
    *unint64_t v74 = *v74 & 0x3F | (v73 << 6);
  }

  uint64_t v75 = [a3 objectForKeyedSubscript:CBAdvertisementDataHostWakeEvent];
  if (v75) {
    unint64_t v76 = (uint64_t)[v75 integerValue] > 0;
  }
  else {
    unint64_t v76 = 0;
  }
  int8x16_t v77 = objc_alloc(&OBJC_CLASS___CLAvengerScannerClientObjectDiscoveryData);
  double v78 = +[NSData dataWithData:](&OBJC_CLASS___NSData, "dataWithData:", v69);
  double v79 = [a4 integerValue];
  double v80 = &off_1018D51C8;
  if (v71) {
    double v80 = v71;
  }
  HIDWORD(v82) = v68;
  LOBYTE(v82) = v76;
  return  -[CLAvengerScannerClientObjectDiscoveryData initWithAddress:advertisementData:status:reserved:rssi:scanDate:channel:didCauseWake:detailsBitmask:protocolID:]( v77,  "initWithAddress:advertisementData:status:reserved:rssi:scanDate:channel:didCauseWake:detailsBitmask:protocolID:",  v78,  v38,  v83,  v37,  v79,  v70,  v80,  v82,  v84);
}

  int8x16_t v59 = *(_BYTE *)(a2 + 321);
  v6 |= 0x400uLL;
  *int v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 321) = v59;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x2000000000LL) == 0)
  {
LABEL_65:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_172;
  }

  PB::TextFormatter::format(this, "numUshaFPEpoch", *(_DWORD *)(a1 + 208));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x80000000000LL) == 0)
  {
LABEL_69:
    if ((v7 & 0x100000000000LL) == 0) {
      goto LABEL_70;
    }
    goto LABEL_172;
  }

  BOOL result = PB::Writer::write(this, *(_BYTE *)(v3 + 321), 0x196u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x2000000000LL) == 0)
  {
LABEL_65:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_172;
  }

            PB::Reader::recallMark(this, v195);
          }

          else
          {
            uint64_t v141 = *(char **)(a1 + 112);
            int v140 = *(void *)(a1 + 120);
            if ((unint64_t)v141 >= v140)
            {
              __int128 v170 = (char *)*v194;
              __int128 v171 = (v141 - (_BYTE *)*v194) >> 2;
              __int128 v172 = v171 + 1;
              if ((unint64_t)(v171 + 1) >> 62) {
LABEL_308:
              }
                sub_100007008();
              __int128 v173 = v140 - (void)v170;
              if (v173 >> 1 > v172) {
                __int128 v172 = v173 >> 1;
              }
              else {
                unint64_t v174 = v172;
              }
              if (v174)
              {
                int v175 = (char *)sub_10000956C(v193, v174);
                __int128 v170 = *(char **)(a1 + 104);
                uint64_t v141 = *(char **)(a1 + 112);
              }

              else
              {
                int v175 = 0LL;
              }

              __int128 v184 = &v175[4 * v171];
              *(_DWORD *)__int128 v184 = 0;
              uint64_t v125 = v184 + 4;
              while (v141 != v170)
              {
                __int128 v185 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v184 - 1) = v185;
                v184 -= 4;
              }

              *(void *)(a1 + 104) = v184;
              *(void *)(a1 + 112) = v125;
              *(void *)(a1 + 120) = &v175[4 * v174];
              if (v170) {
                operator delete(v170);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v141 = 0;
              uint64_t v125 = v141 + 4;
            }

            *(void *)(a1 + 112) = v125;
LABEL_289:
            __int128 v186 = *((void *)this + 1);
            if (v186 <= 0xFFFFFFFFFFFFFFFBLL && v186 + 4 <= *((void *)this + 2))
            {
              *(v125 - 1) = *(_DWORD *)(*(void *)this + v186);
              int v28 = *((void *)this + 1) + 4LL;
LABEL_293:
              *((void *)this + 1) = v28;
            }

            else
            {
LABEL_291:
              *((_BYTE *)this + 24) = 1;
            }
          }

void sub_100AAEA90(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100AAEAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 240);
  if (v2)
  {
    uint64_t v5 = 1LL;
    int v6 = *(void **)(a1 + 240);
    do
    {
      int v6 = (void *)*v6;
      --v5;
    }

    while (v6);
    if (!v5)
    {
      *(_OWORD *)(v2 + 640) = xmmword_1012E0180;
      return 1LL;
    }

    uint64_t v7 = (uint64_t *)(a2 + 16);
    uint64_t v219 = *(void *)(a2 + 16);
    double v217 = 0.0;
    double v218 = 0.0;
    if ((sub_100D2E600((double *)(a1 + 1800), &v218, &v217, *(double *)(a2 + 24), *(double *)(a1 + 1704)) & 1) != 0)
    {
      double v12 = v217;
      double v11 = v218;
      v9.i64[0] = *(void *)(a2 + 24);
      v8.i64[0] = 0x400921FB54442D18LL;
      int8x16_t v213 = v8;
      if (fabs(*(double *)v9.i64) > 3.14159265)
      {
        v13.f64[0] = NAN;
        v13.f64[1] = NAN;
        double v210 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v13), v8, v9).i64;
        *(double *)v9.i64 = fmod(*(double *)v9.i64 + v210, 6.28318531) - v210;
      }

      if (*(double *)v9.i64 >= 1.57079633)
      {
        int8x16_t v14 = v213;
        *(double *)v9.i64 = *(double *)v213.i64 - *(double *)v9.i64;
      }

      else
      {
        int8x16_t v14 = v213;
      }

      v10.i64[0] = *(void *)(a2 + 32);
      double v209 = *(double *)v9.i64;
      if (fabs(*(double *)v10.i64) <= *(double *)v14.i64)
      {
        int8x16_t v212 = v10;
      }

      else
      {
        v21.f64[0] = NAN;
        v21.f64[1] = NAN;
        double v211 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v21), v14, v10).i64;
        *(double *)v22.i64 = fmod(*(double *)v10.i64 + v211, 6.28318531) - v211;
        int8x16_t v212 = v22;
      }

      BOOL v23 = sub_100AB6D04(a1);
      double v207 = v12 * 0.0174532925;
      double v208 = v11 * 0.0174532925;
      if ((*(_DWORD *)(a2 + 128) & 0xFFFFFFFD) == 1)
      {
        *(double *)&std::stringbuf::string_type __p = 0.0;
        __int16 v215 = 0LL;
        uint64_t v216 = 0LL;
        unint64_t v24 = *(uint64_t **)(a1 + 240);
        if (v24)
        {
          v25.f64[0] = NAN;
          v25.f64[1] = NAN;
          int8x16_t v190 = (int8x16_t)vnegq_f64(v25);
          double v203 = *(double *)vbslq_s8(v190, v213, v212).i64;
          int v198 = 0;
          double v26 = fmod(*(double *)v212.i64 + v203, 6.28318531) - v203;
          else {
            double v27 = v26;
          }
          double v186 = 0.0;
          double v28 = 25000000.0;
          __asm { FMOV            V0.2D, #-1.0 }

          __int128 v204 = _Q0;
          double v182 = -3.14159265;
          double v184 = 1.0;
          do
          {
            if ((*((_DWORD *)v24 + 167) & 0xFFFFFFFB) != 0)
            {
              uint64_t v234 = &off_1018920B8;
              *(_OWORD *)uint64_t v235 = v204;
              __int128 v236 = xmmword_1012E0070;
              __int128 v237 = xmmword_1012E0070;
              __int128 v238 = v204;
              __int128 v239 = v204;
              unint64_t v240 = 0xBFF0000000000000LL;
              int v241 = 0;
              char v242 = 0;
              int v243 = 0;
              BOOL v33 = sub_1004CCD0C((uint64_t)(v24 + 7), (double *)&v219);
              char v34 = sub_1004CE2F8((uint64_t)(v24 + 7), (uint64_t)&v234);
              unint64_t v35 = v24[6] + v24[5] - 1;
              *(double *)v36.i64 = sub_100E8BE54(*(void *)(v24[2] + 8 * (v35 / 0x17)) + 176 * (v35 % 0x17));
              if (v33 && (v34 & 1) != 0)
              {
                double v38 = *(double *)v36.i64;
                double v39 = *(double *)&v236;
                v37.i64[0] = *(void *)&v235[16];
                if (fabs(*(double *)&v235[16]) > *(double *)v213.i64)
                {
                  double v193 = *(double *)vbslq_s8(v190, v213, v37).i64;
                  *(double *)v37.i64 = fmod(*(double *)&v235[16] + v193, 6.28318531) - v193;
                }

                if (*(double *)v37.i64 >= 1.57079633)
                {
                  int8x16_t v40 = v213;
                  *(double *)v37.i64 = *(double *)v213.i64 - *(double *)v37.i64;
                }

                else
                {
                  int8x16_t v40 = v213;
                }

                v36.i64[0] = *(void *)&v235[24];
                if (fabs(*(double *)&v235[24]) > *(double *)v40.i64)
                {
                  double v188 = *(double *)vbslq_s8(v190, v40, v36).i64;
                  uint64_t v194 = v37.i64[0];
                  *(double *)v36.i64 = fmod(*(double *)&v235[24] + v188, 6.28318531);
                  int8x16_t v40 = v213;
                  v37.i64[0] = v194;
                  *(double *)v36.i64 = *(double *)v36.i64 - v188;
                }

                if (vabdd_f64(*(double *)v212.i64, *(double *)v36.i64) <= *(double *)v40.i64)
                {
                  double v48 = *(double *)v212.i64 - *(double *)v36.i64;
                }

                else
                {
                  if (fabs(*(double *)v36.i64) > *(double *)v40.i64)
                  {
                    double v189 = *(double *)vbslq_s8(v190, v40, v36).i64;
                    uint64_t v195 = v37.i64[0];
                    *(double *)v36.i64 = fmod(*(double *)v36.i64 + v189, 6.28318531);
                    v40.i64[0] = v213.i64[0];
                    v37.i64[0] = v195;
                    *(double *)v36.i64 = *(double *)v36.i64 - v189;
                  }

                  double v44 = *(double *)v36.i64 - v27;
                  double v45 = dbl_1013477A0[*(double *)v36.i64 - v27 > *(double *)v40.i64];
                  BOOL v46 = vabdd_f64(*(double *)v36.i64, v27) <= *(double *)v40.i64;
                  double v47 = -0.0;
                  if (!v46) {
                    double v47 = v45;
                  }
                  double v48 = *(double *)v212.i64 - (*(double *)v212.i64 + v44 + v47);
                }

                if (qword_101934960 != -1)
                {
                  uint64_t v196 = v37.i64[0];
                  dispatch_once(&qword_101934960, &stru_10186D380);
                  v37.i64[0] = v196;
                }

                double v49 = v38 * 50.0;
                double v51 = sqrt(v50);
                double v52 = (os_log_s *)qword_101934968;
                if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v53 = *(void *)(a2 + 16);
                  int v54 = *((_DWORD *)v24 + 165);
                  int v55 = *(_DWORD *)(a2 + 128);
                  uint64_t v56 = v24[80];
                  uint64_t v57 = v24[81];
                  *(_DWORD *)buf = 134219520;
                  *(void *)int v245 = v53;
                  *(_WORD *)&v245[8] = 1024;
                  *(_DWORD *)&v245[10] = v54;
                  __int16 v246 = 2048;
                  double v247 = v51;
                  __int16 v248 = 2048;
                  double v249 = v49;
                  __int16 v250 = 1024;
                  *(_DWORD *)int v251 = v55;
                  *(_WORD *)&v251[4] = 2048;
                  *(void *)&v251[6] = v56;
                  __int16 v252 = 2048;
                  uint64_t v253 = v57;
                  _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "#selection,gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,li kelihood,%.9f,logLikelihood,%.5f",  buf,  0x40u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  uint64_t v65 = *(void *)(a2 + 16);
                  int v66 = *((_DWORD *)v24 + 165);
                  int v67 = *(_DWORD *)(a2 + 128);
                  uint64_t v68 = v24[80];
                  uint64_t v69 = v24[81];
                  int v220 = 134219520;
                  uint64_t v221 = v65;
                  __int16 v222 = 1024;
                  int v223 = v66;
                  __int16 v224 = 2048;
                  double v225 = v51;
                  __int16 v226 = 2048;
                  double v227 = v49;
                  __int16 v228 = 1024;
                  int v229 = v67;
                  __int16 v230 = 2048;
                  uint64_t v231 = v68;
                  __int16 v232 = 2048;
                  uint64_t v233 = v69;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,li kelihood,%.9f,logLikelihood,%.5f",  COERCE_DOUBLE(&v220),  64,  v178,  v180,  LODWORD(v182),  v184,  v186);
                  __int128 v71 = (uint8_t *)v70;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v70);
                  if (v71 != buf) {
                    free(v71);
                  }
                }

                double v58 = 5000.0;
                if (v49 >= 5000.0) {
                  double v58 = v49;
                }
                if (v51 < v58)
                {
                  *(_DWORD *)buf = *((_DWORD *)v24 + 165);
                  sub_100AB9EE8((uint64_t)&__p, (char *)__p, buf);
                  double v59 = v39 * v39 * 0.5 + *(double *)(a2 + 40) * *(double *)(a2 + 40) * 0.5;
                  if (v50 < v59 * 9.0 && v50 < v28)
                  {
                    int v198 = *((_DWORD *)v24 + 165);
                    double v186 = exp(v50 * -0.5 / v59);
                    double v184 = 1.0 - *((double *)v24 + 80) * v186;
                    double v28 = v50;
                  }
                }
              }

              else
              {
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v41 = (os_log_s *)qword_101934968;
                if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v42 = *v7;
                  int v43 = *((_DWORD *)v24 + 165);
                  *(_DWORD *)buf = 134218240;
                  *(void *)int v245 = v42;
                  *(_WORD *)&v245[8] = 1024;
                  *(_DWORD *)&v245[10] = v43;
                  _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate",  buf,  0x12u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  uint64_t v61 = *v7;
                  int v62 = *((_DWORD *)v24 + 165);
                  int v220 = 134218240;
                  uint64_t v221 = v61;
                  __int16 v222 = 1024;
                  int v223 = v62;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate",  COERCE_DOUBLE(&v220),  18);
                  double v64 = (uint8_t *)v63;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v63);
                  if (v64 != buf) {
                    free(v64);
                  }
                }

                BOOL v23 = 0;
              }
            }

            unint64_t v24 = (uint64_t *)*v24;
          }

          while (v24);
          uint64_t v142 = *(uint64_t **)(a1 + 240);
          double v144 = v184;
          double v143 = v186;
          if (v142)
          {
            double v145 = log(v184);
            double v146 = log(v184 + v186);
            do
            {
              if ((*((_DWORD *)v142 + 167) & 0xFFFFFFFB) != 0)
              {
                __int32 v147 = *((_DWORD *)v142 + 165);
                if (v147 == v198)
                {
                  *((double *)v142 + 81) = v146 + *((double *)v142 + 81);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  uint64_t v148 = (os_log_s *)qword_101934968;
                  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                  {
                    int v149 = *((_DWORD *)v142 + 165);
                    double v150 = *(double *)(a2 + 40);
                    uint64_t v151 = v142[81];
                    *(_DWORD *)buf = 67110144;
                    *(_DWORD *)int v245 = v149;
                    *(_WORD *)&v245[4] = 2048;
                    *(double *)&v245[6] = v143;
                    __int16 v246 = 2048;
                    double v247 = v144;
                    __int16 v248 = 2048;
                    double v249 = v150;
                    __int16 v250 = 2048;
                    *(void *)int v251 = v151;
                    _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood update gaussian aposteriori,hID,%d,gaussianProb,%.9f,uniformProb,%.9f,rootS, %.5f,loglikelihood,%.5f",  buf,  0x30u);
                  }

                  if (!sub_1002921D0(115, 2)) {
                    goto LABEL_205;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  int v152 = *((_DWORD *)v142 + 165);
                  uint64_t v153 = *(void *)(a2 + 40);
                  uint64_t v154 = v142[81];
                  LODWORD(v234) = 67110144;
                  HIDWORD(v234) = v152;
                  *(_WORD *)uint64_t v235 = 2048;
                  *(double *)&v235[2] = v143;
                  *(_WORD *)&v235[10] = 2048;
                  *(double *)&v235[12] = v144;
                  *(_WORD *)&v235[20] = 2048;
                  *(void *)&v235[22] = v153;
                  *(_WORD *)&v235[30] = 2048;
                  *(void *)&__int128 v236 = v154;
                  LODWORD(v17memset(&v6[1], 0, 7) = 48;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood update gaussian aposteriori,hID,%d,gaussianProb,%.9f,uniformProb,%.9f,rootS,%. 5f,loglikelihood,%.5f",  &v234,  v177,  v178,  v180,  v182);
                  double v156 = (uint8_t *)v155;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v155);
                  goto LABEL_197;
                }

                unsigned int v157 = v215;
                double v158 = wmemchr((const __int32 *)__p, v147, ((char *)v215 - (_BYTE *)__p) >> 2);
                if (v158) {
                  int8x16_t v159 = v158;
                }
                else {
                  int8x16_t v159 = v157;
                }
                if (v159 == v215)
                {
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  uint64_t v167 = (os_log_s *)qword_101934968;
                  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                  {
                    int v168 = *((_DWORD *)v142 + 165);
                    uint64_t v169 = v142[81];
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)int v245 = v168;
                    *(_WORD *)&v245[4] = 2048;
                    *(void *)&v245[6] = v169;
                    _os_log_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood update hypothesis too far from fix,hID,%d outlier rejection for this fix,loglikelihood,%.5f",  buf,  0x12u);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    int v170 = *((_DWORD *)v142 + 165);
                    uint64_t v171 = v142[81];
                    LODWORD(v234) = 67109376;
                    HIDWORD(v234) = v170;
                    *(_WORD *)uint64_t v235 = 2048;
                    *(void *)&v235[2] = v171;
                    LODWORD(v17memset(&v6[1], 0, 7) = 18;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood update hypothesis too far from fix,hID,%d outlier rejection for this fix,loglikelihood,%.5f",  &v234,  v177);
                    __int128 v173 = (uint8_t *)v172;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v172);
                    double v144 = v184;
                    double v143 = v186;
                    if (v173 != buf) {
                      free(v173);
                    }
                  }

                  sub_10069E060(a1 + 2272);
                  goto LABEL_205;
                }

                *((double *)v142 + 81) = v145 + *((double *)v142 + 81);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v160 = (os_log_s *)qword_101934968;
                if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                {
                  int v161 = *((_DWORD *)v142 + 165);
                  double v162 = *(double *)(a2 + 40);
                  double v163 = *((double *)v142 + 81);
                  *(_DWORD *)buf = 67109888;
                  *(_DWORD *)int v245 = v161;
                  *(_WORD *)&v245[4] = 2048;
                  *(double *)&v245[6] = v144;
                  __int16 v246 = 2048;
                  double v247 = v162;
                  __int16 v248 = 2048;
                  double v249 = v163;
                  _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood update gaussian aposteriori,hID,%d,uniformProb,%.9f,rootS,%.5f,loglikelihood,%.5f",  buf,  0x26u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  uint64_t v164 = *(void *)(a2 + 40);
                  uint64_t v165 = v142[81];
                  uint64_t v234 = (uint64_t (**)())__PAIR64__(*((_DWORD *)v142 + 165), 67109888);
                  *(_WORD *)uint64_t v235 = 2048;
                  double v144 = v184;
                  *(double *)&v235[2] = v184;
                  *(_WORD *)&v235[10] = 2048;
                  *(void *)&v235[12] = v164;
                  *(_WORD *)&v235[20] = 2048;
                  *(void *)&v235[22] = v165;
                  LODWORD(v17memset(&v6[1], 0, 7) = 38;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood update gaussian aposteriori,hID,%d,uniformProb,%.9f,rootS,%.5f,loglikelihood,%.5f",  &v234,  v177,  v178,  v180);
                  double v156 = (uint8_t *)v166;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v166);
                  double v143 = v186;
LABEL_197:
                  if (v156 != buf) {
                    free(v156);
                  }
                }
              }

LABEL_213:
        if (!v23 || !sub_100AB6D04(a1))
        {
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          unint64_t v174 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v174,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood update failed. Resetting all likelihoods to be equal",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            LOWORD(v234) = 0;
            LODWORD(v17memset(&v6[1], 0, 7) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood update failed. Resetting all likelihoods to be equal",  &v234,  *(void *)&v177);
            char v176 = (uint8_t *)v175;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v175);
            if (v176 != buf) {
              free(v176);
            }
          }

          sub_100ABA088(a1);
          return 0LL;
        }

        return 1LL;
      }

      int v72 = *(uint64_t **)(a1 + 240);
      if (!v72) {
        goto LABEL_213;
      }
      v73.f64[0] = NAN;
      v73.f64[1] = NAN;
      int8x16_t v197 = (int8x16_t)vnegq_f64(v73);
      double v205 = *(double *)vbslq_s8(v197, v213, v212).i64;
      uint64_t v179 = a1 + 2272;
      double v74 = fmod(*(double *)v212.i64 + v205, 6.28318531) - v205;
      else {
        double v75 = v74;
      }
      __asm { FMOV            V0.2D, #-1.0 }

      __int128 v206 = _Q0;
      double v185 = -1.57079633;
      double v183 = -3.14159265;
      uint64_t v187 = 134218496LL;
      double v181 = 5000.0;
      while (1)
      {
        if ((*((_DWORD *)v72 + 167) & 0xFFFFFFFB) != 0)
        {
          uint64_t v234 = &off_1018920B8;
          *(_OWORD *)uint64_t v235 = v206;
          __int128 v236 = xmmword_1012E0070;
          __int128 v237 = xmmword_1012E0070;
          __int128 v238 = v206;
          __int128 v239 = v206;
          unint64_t v240 = 0xBFF0000000000000LL;
          int v241 = 0;
          char v242 = 0;
          int v243 = 0;
          BOOL v77 = sub_1004CCD0C((uint64_t)(v72 + 7), (double *)&v219);
          char v78 = sub_1004CE2F8((uint64_t)(v72 + 7), (uint64_t)&v234);
          unint64_t v79 = v72[6] + v72[5] - 1;
          double v82 = sub_100E8BE54(*(void *)(v72[2] + 8 * (v79 / 0x17)) + 176 * (v79 % 0x17)) * 50.0;
          *(double *)&std::stringbuf::string_type __p = v82;
          if (!v77 || (v78 & 1) == 0)
          {
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            double v84 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v85 = *v7;
              int v86 = *((_DWORD *)v72 + 165);
              *(_DWORD *)buf = 134218240;
              *(void *)int v245 = v85;
              *(_WORD *)&v245[8] = 1024;
              *(_DWORD *)&v245[10] = v86;
              _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate",  buf,  0x12u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              uint64_t v126 = *v7;
              int v127 = *((_DWORD *)v72 + 165);
              int v220 = 134218240;
              uint64_t v221 = v126;
              __int16 v222 = 1024;
              int v223 = v127;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,time_mct,%.3f,Hypothesis %d does not have a valid estimate",  COERCE_DOUBLE(&v220),  18);
              int v129 = (uint8_t *)v128;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v128);
              if (v129 != buf) {
                free(v129);
              }
            }

            BOOL v23 = 0;
            goto LABEL_159;
          }

          v81.i64[0] = *(void *)&v235[16];
          if (fabs(*(double *)&v235[16]) > *(double *)v213.i64)
          {
            double v199 = *(double *)vbslq_s8(v197, v213, v81).i64;
            *(double *)v81.i64 = fmod(*(double *)&v235[16] + v199, 6.28318531) - v199;
          }

          if (*(double *)v81.i64 >= 1.57079633)
          {
            int8x16_t v83 = v213;
            *(double *)v81.i64 = *(double *)v213.i64 - *(double *)v81.i64;
          }

          else
          {
            int8x16_t v83 = v213;
          }

          v80.i64[0] = *(void *)&v235[24];
          if (fabs(*(double *)&v235[24]) > *(double *)v83.i64)
          {
            double v191 = *(double *)vbslq_s8(v197, v83, v80).i64;
            uint64_t v200 = v81.i64[0];
            *(double *)v80.i64 = fmod(*(double *)&v235[24] + v191, 6.28318531);
            int8x16_t v83 = v213;
            v81.i64[0] = v200;
            *(double *)v80.i64 = *(double *)v80.i64 - v191;
          }

          if (vabdd_f64(*(double *)v212.i64, *(double *)v80.i64) <= *(double *)v83.i64)
          {
            double v90 = *(double *)v212.i64 - *(double *)v80.i64;
          }

          else
          {
            if (fabs(*(double *)v80.i64) > *(double *)v83.i64)
            {
              double v192 = *(double *)vbslq_s8(v197, v83, v80).i64;
              uint64_t v201 = v81.i64[0];
              *(double *)v80.i64 = fmod(*(double *)v80.i64 + v192, 6.28318531);
              v83.i64[0] = v213.i64[0];
              v81.i64[0] = v201;
              *(double *)v80.i64 = *(double *)v80.i64 - v192;
            }

            double v87 = *(double *)v80.i64 - v75;
            double v88 = dbl_1013477A0[*(double *)v80.i64 - v75 > *(double *)v83.i64];
            BOOL v46 = vabdd_f64(*(double *)v80.i64, v75) <= *(double *)v83.i64;
            double v89 = -0.0;
            if (!v46) {
              double v89 = v88;
            }
            double v90 = *(double *)v212.i64 - (*(double *)v212.i64 + v87 + v89);
          }

          if (qword_101934960 != -1)
          {
            uint64_t v202 = v81.i64[0];
            dispatch_once(&qword_101934960, &stru_10186D380);
            v81.i64[0] = v202;
          }

          double v91 = sqrt(v208 * (v209 - *(double *)v81.i64) * (v208 * (v209 - *(double *)v81.i64)) + v207
                                                                                               * v90
                                                                                               * (v207
                                                                                                * v90));
          char v92 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v93 = *(void *)(a2 + 16);
            int v94 = *((_DWORD *)v72 + 165);
            int v95 = *(_DWORD *)(a2 + 128);
            uint64_t v96 = v72[80];
            uint64_t v97 = v72[81];
            *(_DWORD *)buf = 134219520;
            *(void *)int v245 = v93;
            *(_WORD *)&v245[8] = 1024;
            *(_DWORD *)&v245[10] = v94;
            __int16 v246 = 2048;
            double v247 = v91;
            __int16 v248 = 2048;
            double v249 = v82;
            __int16 v250 = 1024;
            *(_DWORD *)int v251 = v95;
            *(_WORD *)&v251[4] = 2048;
            *(void *)&v251[6] = v96;
            __int16 v252 = 2048;
            uint64_t v253 = v97;
            _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEBUG,  "#selection,non-gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,like lihood,%.9f,logLikelihood,%.5f",  buf,  0x40u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            uint64_t v130 = *(void *)(a2 + 16);
            int v131 = *((_DWORD *)v72 + 165);
            int v132 = *(_DWORD *)(a2 + 128);
            uint64_t v133 = v72[80];
            uint64_t v134 = v72[81];
            int v220 = 134219520;
            uint64_t v221 = v130;
            __int16 v222 = 1024;
            int v223 = v131;
            __int16 v224 = 2048;
            double v225 = v91;
            __int16 v226 = 2048;
            double v227 = v82;
            __int16 v228 = 1024;
            int v229 = v132;
            __int16 v230 = 2048;
            uint64_t v231 = v133;
            __int16 v232 = 2048;
            uint64_t v233 = v134;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,non-gps Likelihood update apriori,time_mct,%.3f,hID,%d,innov,%.5f,hypMaxInnov,%.5f,type,%d,like lihood,%.9f,logLikelihood,%.5f",  COERCE_DOUBLE(&v220),  64,  *(double *)&v179,  v181,  LODWORD(v183),  v185,  *(double *)&v187);
            unint64_t v136 = (uint8_t *)v135;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v135);
            if (v136 != buf) {
              free(v136);
            }
          }

          double v98 = *(double *)(a2 + 40);
          if ((*(_DWORD *)(a2 + 128) - 6) >= 3
            && (sub_100E8FA20((uint64_t)(v72 + 1), (double *)(a2 + 16)),
                double v82 = *(double *)&__p,
                (*((_DWORD *)v72 + 180) - 6) > 2))
          {
            p_p = &__p;
          }

          else
          {
            p_p = (void **)&unk_101347868;
            if (v82 >= 10000.0) {
              p_p = &__p;
            }
          }

          double v100 = fabs(v91);
          if (v100 < v98)
          {
            double v101 = *(double *)&v236;
            double v102 = erf((v98 - v91) / *(double *)&v236);
            double v103 = erf((-v98 - v91) / v101);
            double v104 = log(v102 - v103);
            *((double *)v72 + 81) = *((double *)v72 + 81) + v104 - log((v98 + v98) * v101);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            int v105 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v106 = *v7;
              int v107 = *((_DWORD *)v72 + 165);
              double v108 = *((double *)v72 + 81);
              *(_DWORD *)buf = v187;
              *(void *)int v245 = v106;
              *(_WORD *)&v245[8] = 1024;
              *(_DWORD *)&v245[10] = v107;
              __int16 v246 = 2048;
              double v247 = v108;
              _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood update uniform aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f",  buf,  0x1Cu);
            }

            if (!sub_1002921D0(115, 2)) {
              goto LABEL_159;
            }
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            uint64_t v109 = *v7;
            int v110 = *((_DWORD *)v72 + 165);
            double v111 = *((double *)v72 + 81);
            int v220 = v187;
            uint64_t v221 = v109;
            __int16 v222 = 1024;
            int v223 = v110;
            __int16 v224 = 2048;
            double v225 = v111;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood update uniform aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f",  COERCE_DOUBLE(&v220),  28,  *(double *)&v179);
            uint64_t v113 = (uint8_t *)v112;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v112);
            goto LABEL_151;
          }

          if (v100 >= *(double *)p_p)
          {
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            uint64_t v122 = (os_log_s *)qword_101934968;
            if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v123 = *v7;
              int v124 = *((_DWORD *)v72 + 165);
              double v125 = *((double *)v72 + 81);
              *(_DWORD *)buf = v187;
              *(void *)int v245 = v123;
              *(_WORD *)&v245[8] = 1024;
              *(_DWORD *)&v245[10] = v124;
              __int16 v246 = 2048;
              double v247 = v125;
              _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood update hypothesis too far from fix,time_mct,%.3f,hID,%d,outlier rejection for this fix,logLikelihood,%.5f",  buf,  0x1Cu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              uint64_t v137 = *v7;
              int v138 = *((_DWORD *)v72 + 165);
              double v139 = *((double *)v72 + 81);
              int v220 = v187;
              uint64_t v221 = v137;
              __int16 v222 = 1024;
              int v223 = v138;
              __int16 v224 = 2048;
              double v225 = v139;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood update hypothesis too far from fix,time_mct,%.3f,hID,%d,outlier rejection for this fix,logLikelihood,%.5f",  COERCE_DOUBLE(&v220),  28,  *(double *)&v179);
              uint64_t v141 = (uint8_t *)v140;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v140);
              if (v141 != buf) {
                free(v141);
              }
            }

            sub_10069E060(v179);
            goto LABEL_159;
          }

          *((double *)v72 + 81) = *((double *)v72 + 81) + fmin(-log((v98 + v98) * *(double *)&v236), -8.0);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          __int128 v114 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v115 = *v7;
            int v116 = *((_DWORD *)v72 + 165);
            double v117 = *((double *)v72 + 81);
            *(_DWORD *)buf = v187;
            *(void *)int v245 = v115;
            *(_WORD *)&v245[8] = 1024;
            *(_DWORD *)&v245[10] = v116;
            __int16 v246 = 2048;
            double v247 = v117;
            _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood update uniform walkout aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f",  buf,  0x1Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            uint64_t v118 = *v7;
            int v119 = *((_DWORD *)v72 + 165);
            double v120 = *((double *)v72 + 81);
            int v220 = v187;
            uint64_t v221 = v118;
            __int16 v222 = 1024;
            int v223 = v119;
            __int16 v224 = 2048;
            double v225 = v120;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood update uniform walkout aposteriori,time_mct,%.3f,hID,%d,logLikelihood,%.5f",  COERCE_DOUBLE(&v220),  28,  *(double *)&v179);
            uint64_t v113 = (uint8_t *)v121;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v121);
LABEL_151:
            if (v113 != buf) {
              free(v113);
            }
          }
        }

            if (((char)v122 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16LL) + 4LL * v122) & v107) != 0) {
                goto LABEL_217;
              }
              double v108 = 1;
              if (v122 == 95 && (v107 & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              int8x16_t v36 = v108;
LABEL_220:
              int8x16_t v37 = 2LL;
              goto LABEL_221;
            }
          }

  double v90 = *(void *)(a2 + 24);
  *v2 |= 4uLL;
  *(void *)(a1 + 24) = v90;
  int8x16_t v10 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_109:
    if ((v10 & 0x10) == 0) {
      goto LABEL_110;
    }
    goto LABEL_215;
  }

  BOOL result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x520u);
  uint64_t v7 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_109:
    if ((v7 & 0x10) == 0) {
      goto LABEL_110;
    }
    goto LABEL_215;
  }

void sub_100AB089C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100AB08BC(uint64_t a1)
{
  for (double i = *(uint64_t **)(a1 + 240); i; double i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 167))
    {
      unint64_t v2 = i[6];
      if (v2 >= 2)
      {
        unint64_t v3 = *((unsigned int *)i + 164);
        if ((v3 & 0x80000000) == 0 && v2 > v3 && !sub_100E8D56C((uint64_t)(i + 1)))
        {
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          uint64_t v4 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_INFO))
          {
            int v5 = *((_DWORD *)i + 165);
            *(_DWORD *)buf = 67240192;
            int v13 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "#fusion,hID,%{public}d,hypothesis data fusion failed.",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            int v6 = *((_DWORD *)i + 165);
            v11[0] = 67240192;
            v11[1] = v6;
            LODWORD(v10) = 8;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  1LL,  "#fusion,hID,%{public}d,hypothesis data fusion failed.",  v11,  v10);
            int8x16_t v8 = (uint8_t *)v7;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto cllcf::CLLCFusion::performHypothesesDataFusion()::(anonymous class)::operator()(LCFusionLocationHypothesis &) const",  "%s\n",  v7);
            if (v8 != buf) {
              free(v8);
            }
          }
        }
      }
    }
  }

  return 1LL;
}

void sub_100AB0AD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100AB0ADC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 240);
  if (!v2) {
    return 1LL;
  }
  uint64_t v5 = 1LL;
  do
  {
    unint64_t v2 = (void *)*v2;
    --v5;
  }

  while (v2);
  if (v5)
  {
    if (sub_100AA7570(a1)
      || *(_DWORD *)(a2 + 128) == 1
      && *(_DWORD *)(a1 + 908)
      && (unint64_t v18 = *(void *)(a1 + 288) + *(void *)(a1 + 280) - 1LL,
          uint64_t v19 = *(void *)(*(void *)(a1 + 256) + 8 * (v18 / 0x17)),
          unint64_t v20 = v18 % 0x17,
          (*(_DWORD *)(v19 + 176 * v20 + 160) - 6) <= 2)
      && *(double *)(v19 + 176 * v20 + 72) > 50.0)
    {
      int v6 = *(uint64_t **)(a1 + 240);
      if (v6)
      {
        uint64_t v7 = 0LL;
        do
        {
          int v8 = *((_DWORD *)v6 + 167);
          if (v8)
          {
            uint64_t v9 = v6[6];
            if (v9)
            {
              if (v8 == 1)
              {
                if (*(_BYTE *)(*(void *)(v6[2] + 8 * ((v9 + v6[5] - 1) / 0x17uLL))
                              + 176 * ((v9 + v6[5] - 1) % 0x17uLL)
                              + 168))
                {
                  sub_100E8FA20((uint64_t)(v6 + 1), (double *)(a2 + 16));
                  if (*((_DWORD *)v6 + 180) == 1) {
                    uint64_t v7 = v6;
                  }
                }
              }
            }
          }

          int v6 = (uint64_t *)*v6;
        }

        while (v6);
        if (v7)
        {
          for (double i = *(uint64_t **)(a1 + 240); i; double i = (uint64_t *)*i)
          {
            if (*((_DWORD *)i + 165) != *((_DWORD *)v7 + 165))
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              double v11 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                int v12 = *((_DWORD *)i + 165);
                int v13 = *((_DWORD *)v7 + 165);
                *(_DWORD *)buf = 67240448;
                *(_DWORD *)&uint8_t buf[4] = v12;
                *(_WORD *)&uint8_t buf[8] = 1026;
                *(_DWORD *)&buf[10] = v13;
                _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "#selection,Rejecting hypothesis,hID,%{public}d,in favor of,hID,%{public}d",  buf,  0xEu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v14 = *((_DWORD *)i + 165);
                int v15 = *((_DWORD *)v7 + 165);
                int v89 = 67240448;
                *(_DWORD *)double v90 = v14;
                *(_WORD *)&v90[4] = 1026;
                *(_DWORD *)&v90[6] = v15;
                LODWORD(v79) = 14;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Rejecting hypothesis,hID,%{public}d,in favor of,hID,%{public}d",  &v89,  v79);
                uint64_t v17 = (char *)v16;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)",  "%s\n",  v16);
                if (v17 != buf) {
                  free(v17);
                }
              }

              *((_DWORD *)i + 16memset(&v6[1], 0, 7) = 4;
            }
          }

          return 1LL;
        }
      }
    }
  }

  if (!*(_DWORD *)(a1 + 908)) {
    return 1LL;
  }
  uint64_t v21 = *(void *)(a1 + 288);
  if (!v21) {
    return 1LL;
  }
  unint64_t v22 = v21 + *(void *)(a1 + 280) - 1;
  uint64_t v23 = *(void *)(*(void *)(a1 + 256) + 8 * (v22 / 0x17));
  unint64_t v24 = v22 % 0x17;
  if (!*(_BYTE *)(v23 + 176 * v24 + 168)) {
    return 1LL;
  }
  float64x2_t v25 = (double *)(v23 + 176 * v24);
  double v84 = v25[8];
  double v85 = v25[7];
  double v26 = v25[10];
  double v82 = v25[9];
  double v83 = v25[1];
  sub_100E8FA20(a1 + 248, (double *)(a2 + 16));
  double v27 = sub_100D2DBDC((double *)(a1 + 1800), *(double *)(a2 + 24), *(double *)(a2 + 32), v85, v84, v26);
  double v28 = (v82 * v82 + *(double *)(a2 + 40) * *(double *)(a2 + 40)) * 0.5;
  if (v28 < 2500000000.0) {
    double v28 = 2500000000.0;
  }
  double v29 = v27 * v27 / v28;
  if (v29 <= 36.0)
  {
LABEL_42:
    uint64_t v30 = *(uint64_t **)(a1 + 240);
    if (!v30) {
      return 1LL;
    }
    int8x16_t v80 = (double *)(a1 + 184);
    double v81 = v26;
    while (1)
    {
      if (*((_DWORD *)v30 + 167))
      {
        uint64_t v31 = v30[6];
        if (v31)
        {
          unint64_t v32 = v31 + v30[5] - 1;
          uint64_t v33 = *(void *)(v30[2] + 8 * (v32 / 0x17));
          unint64_t v34 = v32 % 0x17;
          if (*(_BYTE *)(v33 + 176 * v34 + 168))
          {
            unint64_t v35 = (double *)(v33 + 176 * v34);
            double v36 = v35[6];
            double v37 = sub_100D2DBDC((double *)(a1 + 1800), v35[7], v35[8], v85, v84, v26);
            double v38 = v36 - v83;
            if (v36 - v83 >= -1.0 && v38 <= 900.0) {
              break;
            }
          }
        }
      }

void sub_100AB1B4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100AB1B64(uint64_t a1)
{
  unint64_t v3 = (void *)(a1 + 240);
  unint64_t v2 = *(void **)(a1 + 240);
  if (v2)
  {
    do
    {
      sub_100E8C3CC(v2 + 1, (double *)(a1 + 184));
      unint64_t v2 = (void *)*v2;
    }

    while (v2);
    uint64_t v4 = (void *)*v3;
    *(void *)buf = 0LL;
    if (v4)
    {
      uint64_t v5 = v3;
      do
      {
        BOOL v6 = sub_100ABF528((uint64_t)(v4 + 1));
        uint64_t v7 = *(void **)v5;
        if (v6)
        {
          do
            uint64_t v7 = (void *)*v7;
          while (v7 && sub_100ABF528((uint64_t)(v7 + 1)));
          if (buf != v5 && v5 != (_BYTE *)v7)
          {
            int v8 = v5;
            do
            {
              uint64_t v9 = v8;
              int v8 = (void *)*v8;
            }

            while (v8 != v7);
            if (v9 != (void *)v5)
            {
              void *v9 = *(void *)buf;
              *(void *)buf = *(void *)v5;
              *(void *)uint64_t v5 = v7;
            }
          }

          if (!v7) {
            break;
          }
        }

        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
      }

      while (*v7);
    }
  }

  else
  {
    *(void *)buf = 0LL;
  }

  uint64_t v50 = (uint64_t)v3;
  sub_1005F68F8((void **)buf);
  uint64_t v10 = *(uint64_t **)(a1 + 216);
  double v11 = (uint64_t *)(a1 + 224);
  while (v11 != v10)
  {
    sub_100E8C3CC(v10 + 5, (double *)(a1 + 184));
    if (v10[10])
    {
      int v12 = (uint64_t *)v10[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          int v12 = (uint64_t *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          int v13 = (uint64_t *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          uint64_t v10 = v13;
        }

        while (!v14);
      }

      uint64_t v10 = v13;
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v15 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        int v16 = *((_DWORD *)v10 + 173);
        uint64_t v17 = sub_100832C40(*((_DWORD *)v10 + 8));
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,provider specific hypothesis with empty buffer is erased,hID,%{public}d,type,%{public}s",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v18 = qword_101934968;
        int v19 = *((_DWORD *)v10 + 173);
        unint64_t v20 = sub_100832C40(*((_DWORD *)v10 + 8));
        *(_DWORD *)unint64_t v54 = 67240450;
        *(_DWORD *)&v54[4] = v19;
        *(_WORD *)&v54[8] = 2082;
        *(void *)&v54[10] = v20;
        LODWORD(v49) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  2LL,  "#fusion,purging,provider specific hypothesis with empty buffer is erased,hID,%{public}d,type,%{public}s",  v54,  v49);
        unint64_t v22 = (char *)v21;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::performHypothesesPurging()", "%s\n", v21);
        if (v22 != buf) {
          free(v22);
        }
      }

      uint64_t v10 = sub_100ABF6EC((uint64_t **)(a1 + 216), v10);
    }
  }

  uint64_t v53 = a1;
  *(void *)unint64_t v54 = 0LL;
  *(void *)buf = a1;
  uint64_t v23 = *(void **)(a1 + 240);
  if (v23)
  {
    unint64_t v24 = (_BYTE *)v50;
    do
    {
      int v25 = sub_100AB6460((uint64_t)buf, (uint64_t)(v23 + 1));
      double v26 = *(void **)v24;
      if (v25)
      {
        do
          double v26 = (void *)*v26;
        while (v26 && sub_100AB6460((uint64_t)buf, (uint64_t)(v26 + 1)));
        if (v54 != v24 && v24 != (_BYTE *)v26)
        {
          double v27 = v24;
          do
          {
            double v28 = v27;
            double v27 = (void *)*v27;
          }

          while (v27 != v26);
          if (v28 != (void *)v24)
          {
            *double v28 = *(void *)v54;
            *(void *)unint64_t v54 = *(void *)v24;
            *(void *)unint64_t v24 = v26;
          }
        }

        if (!v26) {
          break;
        }
      }

      uint64_t v23 = (void *)*v26;
      unint64_t v24 = v26;
    }

    while (*v26);
  }

  sub_1005F68F8((void **)v54);
  double v29 = *(uint64_t **)(a1 + 216);
  while (v11 != v29)
  {
    if ((sub_100AB6460((uint64_t)&v53, (uint64_t)(v29 + 5)) & 1) != 0)
    {
      double v29 = sub_100ABF6EC((uint64_t **)(a1 + 216), v29);
    }

    else
    {
      uint64_t v30 = (uint64_t *)v29[1];
      if (v30)
      {
        do
        {
          uint64_t v31 = v30;
          uint64_t v30 = (uint64_t *)*v30;
        }

        while (v30);
      }

      else
      {
        do
        {
          uint64_t v31 = (uint64_t *)v29[2];
          BOOL v14 = *v31 == (void)v29;
          double v29 = v31;
        }

        while (!v14);
      }

      double v29 = v31;
    }
  }

  uint64_t v52 = a1;
  unint64_t v32 = *(void **)(a1 + 240);
  if (v32)
  {
    uint64_t v33 = 0LL;
    do
    {
      ++v33;
      unint64_t v32 = (void *)*v32;
    }

    while (v32);
    if ((unint64_t)(v33 - 1) >= 0xC)
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      unint64_t v34 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v33;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&_BYTE buf[14] = 12LL;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,maximum number of fused hypotheses reached,number,%{public}zu,max,%{public}zu",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        *(_DWORD *)unint64_t v54 = 134349312;
        *(void *)&v54[4] = v33;
        *(_WORD *)&v54[12] = 2050;
        *(void *)&v54[14] = 12LL;
        LODWORD(v49) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging,maximum number of fused hypotheses reached,number,%{public}zu,max,%{public}zu",  v54,  v49);
        int v48 = (char *)v47;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::performHypothesesPurging()", "%s\n", v47);
        if (v48 != buf) {
          free(v48);
        }
      }

      int v51 = v33 - 12;
      sub_100AB6974(&v52, &v51, 0);
      if (v51 >= 1)
      {
        sub_100AB6974(&v52, &v51, 4);
        if (v51 >= 1)
        {
          sub_100AB6974(&v52, &v51, 3);
          if (v51 >= 1)
          {
            sub_100AB6974(&v52, &v51, 1);
            if (v51 >= 1)
            {
              unint64_t v35 = 13LL;
              uint64_t v36 = v50;
              do
              {
                uint64_t v36 = *(void *)v36;
                --v35;
              }

              while (v35 > 1);
              for (; v36; uint64_t v36 = *(void *)v36)
              {
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                double v37 = (os_log_s *)qword_101934968;
                if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v38 = *(void *)(v36 + 48);
                  if (v38) {
                    uint64_t v39 = *(void *)(*(void *)(*(void *)(v36 + 16)
                  }
                                                + 8 * ((v38 + *(void *)(v36 + 40) - 1) / 0x17uLL))
                                    + 176 * ((v38 + *(void *)(v36 + 40) - 1) % 0x17uLL)
                                    + 8);
                  else {
                    uint64_t v39 = 0LL;
                  }
                  int v40 = *(_DWORD *)(v36 + 660);
                  *(_DWORD *)buf = 67240704;
                  *(_DWORD *)&uint8_t buf[4] = v40;
                  *(_WORD *)&uint8_t buf[8] = 2050;
                  *(void *)&buf[10] = v39;
                  *(_WORD *)&_BYTE buf[18] = 2050;
                  *(void *)&buf[20] = v38;
                  _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,active fused hypothesis deleted,hID,%{public}d,validityTime_MCT,%{public}.3f,bufferSize,%{public}zu",  buf,  0x1Cu);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  int v41 = *(_DWORD *)(v36 + 660);
                  uint64_t v42 = *(void *)(v36 + 48);
                  if (v42) {
                    uint64_t v43 = *(void *)(*(void *)(*(void *)(v36 + 16)
                  }
                                                + 8 * ((v42 + *(void *)(v36 + 40) - 1) / 0x17uLL))
                                    + 176 * ((v42 + *(void *)(v36 + 40) - 1) % 0x17uLL)
                                    + 8);
                  else {
                    uint64_t v43 = 0LL;
                  }
                  *(_DWORD *)unint64_t v54 = 67240704;
                  *(_DWORD *)&v54[4] = v41;
                  *(_WORD *)&v54[8] = 2050;
                  *(void *)&v54[10] = v43;
                  *(_WORD *)&v54[18] = 2050;
                  *(void *)&v54[20] = v42;
                  LODWORD(v49) = 28;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging,active fused hypothesis deleted,hID,%{public}d,validityTime_MCT,%{public}.3f,bufferSize,%{public}zu",  v54,  v49);
                  unint64_t v45 = (char *)v44;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesesPurging()",  "%s\n",  v44);
                  if (v45 != buf) {
                    free(v45);
                  }
                }
              }

              sub_100AB6C98(v50, 0LL, 0LL);
            }
          }
        }
      }
    }
  }

  return 1LL;
}

void sub_100AB23E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

uint64_t sub_100AB2438(uint64_t a1)
{
  int v1 = *(uint64_t **)(a1 + 240);
  if (!v1) {
    return 1LL;
  }
  int v168 = (uint8_t *)(a1 + 240);
  double v178 = (double *)(a1 + 1800);
  double v177 = (uint64_t **)(a1 + 192);
  __asm { FMOV            V0.2D, #-1.0 }

  float64x2_t v180 = _Q0;
  _Q0.f64[0] = NAN;
  _Q0.f64[1] = NAN;
  int8x16_t v176 = (int8x16_t)vnegq_f64(_Q0);
LABEL_3:
  if (!*((_DWORD *)v1 + 167)) {
    goto LABEL_120;
  }
  uint64_t v7 = v1[6];
  if (!v7
    || !*(_BYTE *)(*(void *)(v1[2] + 8 * ((v7 + v1[5] - 1) / 0x17uLL)) + 176 * ((v7 + v1[5] - 1) % 0x17uLL) + 168))
  {
    goto LABEL_120;
  }

  int v8 = (uint64_t *)*v1;
  if (*v1)
  {
    int v175 = (int64x2_t *)(v1 + 1);
    while (1)
    {
      if (*((_DWORD *)v8 + 167))
      {
        uint64_t v9 = v8[6];
        if (v9)
        {
          unint64_t v10 = v9 + v8[5] - 1;
          uint64_t v11 = *(void *)(v8[2] + 8 * (v10 / 0x17));
          unint64_t v12 = v10 % 0x17;
          if (*(_BYTE *)(v11 + 176 * v12 + 168))
          {
            unint64_t v13 = v1[6] + v1[5] - 1;
            if (fabs( sub_100E8C200( *(void *)(v1[2] + 8 * (v13 / 0x17)) + 176 * (v13 % 0x17),  (double *)(v11 + 176 * v12 + 8))) > 0.001)
            {
              unint64_t v14 = v8[6] + v8[5] - 1;
              unint64_t v15 = *(void *)(v8[2] + 8 * (v14 / 0x17)) + 176 * (v14 % 0x17);
              double v17 = *(double *)(v15 + 8);
              int v16 = (double *)(v15 + 8);
              double v18 = v17;
              uint64_t v19 = v1[6] + v1[5] - 1;
              uint64_t v20 = ((unint64_t)v19 * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
              double v23 = *(double *)(v21 + 8);
              unint64_t v22 = (double *)(v21 + 8);
              if (v18 <= v23)
              {
                uint64_t v24 = (uint64_t)(v8 + 7);
                int v16 = v22;
              }

              else
              {
                uint64_t v24 = (uint64_t)(v1 + 7);
              }

              sub_1004CCD0C(v24, v16);
            }

            float64x2_t v197 = v180;
            *(_OWORD *)uint64_t v200 = xmmword_1012E0070;
            *(_OWORD *)&v200[2] = xmmword_1012E0070;
            *(float64x2_t *)&v200[5] = v180;
            *(float64x2_t *)&v200[7] = v180;
            uint64_t v196 = &off_1018920B8;
            v200[9] = 0xBFF0000000000000LL;
            int v201 = 0;
            char v202 = 0;
            int v203 = 0;
            if ((sub_1004CE2F8((uint64_t)(v1 + 7), (uint64_t)&v196) & 1) == 0)
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              int v105 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEBUG,  "#fusion, hypotheses merging, outer loop get filter estimate failed.",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                *(_WORD *)__int128 v204 = 0;
                LODWORD(v16memset(&v6[1], 0, 7) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion, hypotheses merging, outer loop get filter estimate failed.",  v204,  v167);
                unsigned int v157 = (uint8_t *)v156;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesesMerging()",  "%s\n",  v156);
                if (v157 != buf) {
                  free(v157);
                }
              }

LABEL_176:
  *(void *)buf = 0LL;
  int v160 = v168;
  int v161 = *(uint8_t **)v168;
  if (*(void *)v168)
  {
    do
    {
      BOOL v162 = sub_100ABF780((uint64_t)(v161 + 8));
      double v163 = *(uint8_t **)v160;
      if (v162)
      {
        do
          double v163 = *(uint8_t **)v163;
        while (v163 && sub_100ABF780((uint64_t)(v163 + 8)));
        if (buf != v160 && v160 != v163)
        {
          uint64_t v164 = v160;
          do
          {
            uint64_t v165 = v164;
            uint64_t v164 = *(uint8_t **)v164;
          }

          while (v164 != v163);
          if (v165 != v160)
          {
            *(void *)uint64_t v165 = *(void *)buf;
            *(void *)buf = *(void *)v160;
            *(void *)int v160 = v163;
          }
        }

        if (!v163) {
          break;
        }
      }

      int v161 = *(uint8_t **)v163;
      int v160 = v163;
    }

    while (*(void *)v163);
  }

  sub_1005F68F8((void **)buf);
  return 1LL;
}

  *(_DWORD *)(a1 + 396) |= 0x10000000u;
  uint64_t v61 = *(void **)(a1 + 224);
  if (!v61)
  {
    uint64_t v61 = operator new(0x18uLL);
    *uint64_t v61 = off_1018764A0;
    v61[1] = 0LL;
    *((_DWORD *)v61 + 4) = 0;
    *(void *)(a1 + 224) = v61;
  }

  __int128 v62 = *(void *)(a2 + 224);
  if (!v62) {
    __int128 v62 = *(void *)(qword_1019A1D38 + 224);
  }
  sub_100BBA064((uint64_t)v61, v62);
  uint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_153:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_186;
  }

  uint64_t v49 = *(void *)(v5 + 376);
  if (!v49) {
    uint64_t v49 = *(void *)(qword_1019A1D38 + 376);
  }
  BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4C,  v49,  a2,  a4);
  if ((*(_DWORD *)(v5 + 400) & 0x10000) != 0)
  {
LABEL_179:
    uint64_t v50 = *(void *)(v5 + 384);
    if (!v50) {
      uint64_t v50 = *(void *)(qword_1019A1D38 + 384);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x4D,  v50,  a2,  a4);
  }

  return result;
}

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          BOOL v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 0xBu:
          *(_BYTE *)(a1 + 108) |= 2u;
          double v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
            goto LABEL_172;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v84);
          goto LABEL_174;
        case 0xCu:
          *(_BYTE *)(a1 + 108) |= 4u;
          unint64_t v85 = *((void *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
            goto LABEL_172;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v85);
          goto LABEL_174;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_176;
      }
    }

    uint64_t v21 = 0;
    unint64_t v22 = 0;
    double v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      double v23 = v4 + 1;
      uint64_t v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        double v17 = 0LL;
        goto LABEL_21;
      }
    }

    BOOL v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

  BOOL result = *(float *)(a2 + 268);
  v5 |= 0x200000000000000uLL;
  *unint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 268) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x800000000000000LL) == 0)
  {
LABEL_71:
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_72;
    }
    goto LABEL_178;
  }

  PB::TextFormatter::format(this, "quiescenceSpinEpochCount", *(_DWORD *)(a1 + 232));
  uint64_t v7 = *v5;
  BOOL v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x2000000000000LL) == 0)
  {
LABEL_75:
    if ((v7 & 0x4000000000000LL) == 0) {
      goto LABEL_76;
    }
    goto LABEL_178;
  }

  BOOL result = PB::Writer::write(this, *(float *)(v3 + 268), 0x1F7u);
  uint64_t v5 = *v4;
  BOOL v6 = v4[1];
  if ((*v4 & 0x800000000000000LL) == 0)
  {
LABEL_71:
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_72;
    }
    goto LABEL_178;
  }

              *(void *)(a1 + 56) = v24;
              goto LABEL_212;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 8u;
              double v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              double v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                double v75 = 0;
                int v76 = 0;
                int8x16_t v31 = 0LL;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    int8x16_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_181;
                  }

                  BOOL v77 = v27++;
                  unint64_t v78 = *(_BYTE *)(v28 + v77);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  unint64_t v14 = v76++ > 8;
                  if (v14)
                  {
                    int8x16_t v31 = 0LL;
LABEL_180:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_181;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  int8x16_t v31 = 0LL;
                }
                goto LABEL_180;
              }

              double v29 = 0;
              int8x16_t v30 = 0;
              int8x16_t v31 = 0LL;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                int8x16_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_181;
                }
                v29 += 7;
                double v27 = v2;
                unint64_t v14 = v30++ > 8;
              }

              while (!v14);
              int8x16_t v31 = 0LL;
LABEL_181:
              *(void *)(a1 + 32) = -(v31 & 1) ^ (v31 >> 1);
              goto LABEL_212;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              uint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              unint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v79 = 0;
                unint64_t v80 = 0;
                double v37 = 0LL;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    double v37 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }

                  double v81 = v33++;
                  double v82 = *(_BYTE *)(v34 + v81);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  unint64_t v14 = v80++ > 8;
                  if (v14)
                  {
                    double v37 = 0LL;
LABEL_185:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_186;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  double v37 = 0LL;
                }
                goto LABEL_185;
              }

              unint64_t v35 = 0;
              uint64_t v36 = 0;
              double v37 = 0LL;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                double v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_186;
                }
                v35 += 7;
                uint64_t v33 = v2;
                unint64_t v14 = v36++ > 8;
              }

              while (!v14);
              double v37 = 0LL;
LABEL_186:
              *(void *)(a1 + 8) = v37;
              goto LABEL_212;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_171;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
LABEL_171:
                unint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_212;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 108) = v40;
              goto LABEL_212;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              uint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              int v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                double v83 = 0;
                double v84 = 0;
                unint64_t v45 = 0LL;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_191;
                  }

                  unint64_t v85 = v41++;
                  double v86 = *(_BYTE *)(v42 + v85);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  unint64_t v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_190:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_191;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_190;
              }

              uint64_t v43 = 0;
              double v44 = 0;
              unint64_t v45 = 0LL;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                uint64_t v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_191;
                }
                v43 += 7;
                uint64_t v41 = v2;
                unint64_t v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_191:
              *(_DWORD *)(a1 + 72) = v45;
              goto LABEL_212;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 2u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                unint64_t v87 = 0;
                unint64_t v88 = 0;
                unint64_t v51 = 0LL;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    unint64_t v51 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_196;
                  }

                  unint64_t v89 = v47++;
                  double v90 = *(_BYTE *)(v48 + v89);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  unint64_t v14 = v88++ > 8;
                  if (v14)
                  {
                    unint64_t v51 = 0LL;
LABEL_195:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_196;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  unint64_t v51 = 0LL;
                }
                goto LABEL_195;
              }

              uint64_t v49 = 0;
              uint64_t v50 = 0;
              unint64_t v51 = 0LL;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                uint64_t v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_196;
                }
                v49 += 7;
                unint64_t v47 = v2;
                unint64_t v14 = v50++ > 8;
              }

              while (!v14);
              unint64_t v51 = 0LL;
LABEL_196:
              *(void *)(a1 + 16) = v51;
              goto LABEL_212;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              __int128 v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              std::__shared_count v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                unint64_t v91 = 0;
                unint64_t v92 = 0;
                __int128 v57 = 0LL;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    __int128 v57 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_201;
                  }

                  uint64_t v93 = v53++;
                  uint64_t v94 = *(_BYTE *)(v54 + v93);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  unint64_t v14 = v92++ > 8;
                  if (v14)
                  {
                    __int128 v57 = 0LL;
LABEL_200:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_201;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  __int128 v57 = 0LL;
                }
                goto LABEL_200;
              }

              __int128 v55 = 0;
              std::__shared_count v56 = 0;
              __int128 v57 = 0LL;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                __int128 v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_201;
                }
                v55 += 7;
                __int128 v53 = v2;
                unint64_t v14 = v56++ > 8;
              }

              while (!v14);
              __int128 v57 = 0LL;
LABEL_201:
              *(void *)(a1 + 48) = v57;
              goto LABEL_212;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              int v59 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              double v60 = *(void *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5LL || v59 + 10 > v2)
              {
                unint64_t v95 = 0;
                double v96 = 0;
                std::__shared_count v63 = 0LL;
                if (v2 <= v59) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    std::__shared_count v63 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }

                  int v97 = v59++;
                  uint64_t v98 = *(_BYTE *)(v60 + v97);
                  *((void *)this + 1) = v59;
                  v63 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  unint64_t v14 = v96++ > 8;
                  if (v14)
                  {
                    std::__shared_count v63 = 0LL;
LABEL_205:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_206;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  std::__shared_count v63 = 0LL;
                }
                goto LABEL_205;
              }

              uint64_t v61 = 0;
              __int128 v62 = 0;
              std::__shared_count v63 = 0LL;
              do
              {
                unint64_t v2 = v59 + 1;
                *((void *)this + 1) = v59 + 1;
                __int128 v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v61 += 7;
                int v59 = v2;
                unint64_t v14 = v62++ > 8;
              }

              while (!v14);
              std::__shared_count v63 = 0LL;
LABEL_206:
              *(void *)(a1 + 40) = v63;
              goto LABEL_212;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 4u;
              uint64_t v65 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              int v66 = *(void *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5LL || v65 + 10 > v2)
              {
                int v99 = 0;
                uint64_t v100 = 0;
                uint64_t v69 = 0LL;
                if (v2 <= v65) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v65)
                  {
                    uint64_t v69 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }

                  __int16 v101 = v65++;
                  double v102 = *(_BYTE *)(v66 + v101);
                  *((void *)this + 1) = v65;
                  v69 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  unint64_t v14 = v100++ > 8;
                  if (v14)
                  {
                    uint64_t v69 = 0LL;
LABEL_210:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_211;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v69 = 0LL;
                }
                goto LABEL_210;
              }

              int v67 = 0;
              int v68 = 0;
              uint64_t v69 = 0LL;
              do
              {
                unint64_t v2 = v65 + 1;
                *((void *)this + 1) = v65 + 1;
                uint64_t v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0) {
                  goto LABEL_211;
                }
                v67 += 7;
                uint64_t v65 = v2;
                unint64_t v14 = v68++ > 8;
              }

              while (!v14);
              uint64_t v69 = 0LL;
LABEL_211:
              *(void *)(a1 + 24) = v69;
LABEL_212:
              unint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              BOOL result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_212;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

void sub_100AB3A9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100AB3AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_BYTE **)(a1 + 2088);
  if (v4 && v4[1] && *v4)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v5 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#selection,CarPlay mode returning max likelihood hypothesis",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      *(_WORD *)unint64_t v145 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,CarPlay mode returning max likelihood hypothesis",  v145,  2);
      __int128 v119 = (char *)v118;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v118);
      if (v119 != buf) {
        free(v119);
      }
    }

    return sub_100AB75AC(a1, a2);
  }

  uint64_t v7 = *(uint64_t **)(a1 + 240);
  if (!v7)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v10 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "#Error,#selection,No valid hypothesis available for selection,passthrough the location",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      *(_WORD *)unint64_t v145 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,#selection,No valid hypothesis available for selection,passthrough the location",  v145,  2);
      std::__shared_count v117 = (char *)v116;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v116);
      if (v117 != buf) {
        free(v117);
      }
    }

    __int128 v11 = *(_OWORD *)(a2 + 8);
    __int128 v12 = *(_OWORD *)(a2 + 24);
    __int128 v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 1024) = v13;
    *(_OWORD *)(a1 + 976) = v11;
    *(_OWORD *)(a1 + 992) = v12;
    __int128 v14 = *(_OWORD *)(a2 + 72);
    __int128 v15 = *(_OWORD *)(a2 + 88);
    __int128 v16 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)(a1 + 1072) = v16;
    *(_OWORD *)(a1 + 1056) = v15;
    *(_OWORD *)(a1 + 1040) = v14;
    return 1LL;
  }

  uint64_t v8 = 1LL;
  uint64_t v9 = *(void **)(a1 + 240);
  do
  {
    uint64_t v9 = (void *)*v9;
    --v8;
  }

  while (v9);
  if (!v8)
  {
    int v17 = *((_DWORD *)v7 + 167);
    if (v17
      && (uint64_t v18 = v7[6]) != 0
      && *(_BYTE *)(*(void *)(v7[2] + 8 * ((v18 + v7[5] - 1) / 0x17uLL)) + 176 * ((v18 + v7[5] - 1) % 0x17uLL) + 168))
    {
      if (v17 == 4)
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v19 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "#selection,only available hypothesis is a gross outlier, rejecting",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          *(_WORD *)unint64_t v145 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,only available hypothesis is a gross outlier, rejecting",  v145,  2);
          uint64_t v133 = (char *)v132;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v132);
          if (v133 != buf) {
            free(v133);
          }
        }

        uint64_t result = 0LL;
        int v20 = 5;
        goto LABEL_191;
      }

      *(void *)unint64_t v145 = &off_1018920B8;
      __asm { FMOV            V0.2D, #-1.0 }

      *(_OWORD *)&v145[8] = _Q0;
      *(_OWORD *)&v146[16] = xmmword_1012E0070;
      *(_OWORD *)&v146[32] = xmmword_1012E0070;
      *(_OWORD *)&v146[56] = _Q0;
      *(_OWORD *)&v146[72] = _Q0;
      *(void *)&v146[88] = 0xBFF0000000000000LL;
      *(_DWORD *)&v146[96] = 0;
      v146[100] = 0;
      *(_DWORD *)&v146[104] = 0;
      if (sub_1004CCD0C((uint64_t)(v7 + 7), (double *)(a2 + 16))
        && (sub_1004CE2F8((uint64_t)(v7 + 7), (uint64_t)v145) & 1) != 0)
      {
        *(_DWORD *)&v146[104] = sub_100E8FA20((uint64_t)(v7 + 1), (double *)(a2 + 16));
        sub_100AB862C(a1 + 248, (uint64_t)(v7 + 1));
        __int128 v103 = *(_OWORD *)&v146[64];
        *(_OWORD *)(a1 + 1040) = *(_OWORD *)&v146[48];
        *(_OWORD *)(a1 + 1056) = v103;
        *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v146[80];
        *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v146[92];
        __int128 v104 = *(_OWORD *)v146;
        *(_OWORD *)(a1 + 976) = *(_OWORD *)&v145[8];
        *(_OWORD *)(a1 + 992) = v104;
        __int128 v79 = *(_OWORD *)&v146[16];
        __int128 v80 = *(_OWORD *)&v146[32];
        goto LABEL_193;
      }

      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v105 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_ERROR,  "#Error,#selection,Failed to retrieve estimate from the only available hypothesis",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_190;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      v144[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,#selection,Failed to retrieve estimate from the only available hypothesis",  v144,  2);
      double v23 = (char *)v137;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v137);
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v21 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "#selection,only available hypothesis is invalid fused hypothesis, rejecting",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_190;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      *(_WORD *)unint64_t v145 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,only available hypothesis is invalid fused hypothesis, rejecting",  v145,  2);
      double v23 = (char *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v22);
    }

    if (v23 != buf) {
      free(v23);
    }
    goto LABEL_190;
  }

  int v143 = 1;
  if (!*(_BYTE *)(a1 + 2096))
  {
    double v24 = *(double *)(a1 + 2104);
  }

  int v25 = 0;
  unsigned int v26 = 0;
  uint64_t v141 = 0LL;
  double v27 = (double *)(a2 + 16);
  do
  {
    unint64_t v28 = v7[5] + v7[6];
    uint64_t v29 = v7[2];
    uint64_t v30 = v7[3];
    int8x16_t v31 = (void *)(v29 + 8 * (v28 / 0x17));
    if (v30 == v29) {
      unint64_t v32 = 0LL;
    }
    else {
      unint64_t v32 = *v31 + 176 * (v28 % 0x17);
    }
    while (1)
    {
      if (v30 == v29) {
        unint64_t v33 = 0LL;
      }
      else {
        unint64_t v33 = *(void *)(v29 + 8 * (v7[5] / 0x17uLL)) + 176 * (v7[5] % 0x17uLL);
      }
      if (v32 == v33) {
        goto LABEL_69;
      }
      if (v32 == *v31)
      {
        uint64_t v35 = *(v31 - 1);
        if (!*(_BYTE *)(v35 + 4040)) {
          goto LABEL_69;
        }
        unint64_t v34 = v35 + 4048;
      }

      else
      {
        unint64_t v34 = v32;
        if (!*(_BYTE *)(v32 - 8)) {
          goto LABEL_69;
        }
      }

      if (sub_100E8C200(v34 - 176, v27) > 31.0)
      {
LABEL_69:
        int v38 = *((_DWORD *)v7 + 167);
        goto LABEL_70;
      }

      if (v32 == *v31) {
        break;
      }
      unint64_t v36 = v32;
      if (*(_BYTE *)(v32 - 20)) {
        goto LABEL_64;
      }
LABEL_68:
      v32 -= 176LL;
      uint64_t v29 = v7[2];
      uint64_t v30 = v7[3];
    }

    uint64_t v37 = *(v31 - 1);
    if (!*(_BYTE *)(v37 + 4028)) {
      goto LABEL_67;
    }
    unint64_t v36 = v37 + 4048;
LABEL_64:
    if (*(_DWORD *)(v36 - 16) != 4 || (int v38 = *((_DWORD *)v7 + 167), v38 == 4))
    {
      if (v32 != *v31) {
        goto LABEL_68;
      }
LABEL_67:
      uint64_t v39 = *--v31;
      unint64_t v32 = v39 + 4048;
      goto LABEL_68;
    }

    ++v25;
    uint64_t v141 = v7;
LABEL_70:
    if ((v38 & 0xFFFFFFFB) != 0) {
      ++v26;
    }
    uint64_t v7 = (uint64_t *)*v7;
  }

  while (v7);
  if (v25 < 1)
  {
    uint64_t v140 = 0LL;
    BOOL v47 = 0;
    int v40 = 0;
    double v46 = -1.0;
    uint64_t v45 = 0LL;
  }

  else
  {
    int v40 = sub_10044B44C((void *)(a1 + 1840), &dbl_101347860);
    uint64_t v41 = *(void *)(a1 + 1696);
    double v42 = *(double *)(v41 + 384);
    if (v42 >= 0.0)
    {
      int v43 = *(void *)(v41 + 392) - 1 < 2 ? 1 : v40;
      if (*v27 < v42 || *v27 - v42 <= 6.0) {
        int v40 = v43;
      }
    }

    sub_100AB7520(v41, (uint64_t)buf);
    double v46 = *(double *)buf;
    uint64_t v45 = *(void *)&buf[8];
    uint64_t v140 = *(void *)v148;
    BOOL v47 = *(double *)&buf[8] <= 25.0;
    if (*(double *)buf < 0.0 || *v27 >= *(double *)buf && *v27 - *(double *)buf > 6.0)
    {
      *(void *)buf = 0xBFF0000000000000LL;
      if ((sub_10044B5B8(a1 + 1840, (double *)buf) & 1) == 0 && !sub_10044B95C(a1 + 1840))
      {
        *(void *)unint64_t v145 = 0xBFF0000000000000LL;
        if ((sub_10044B44C((void *)(a1 + 1840), (double *)v145) & 1) == 0)
        {
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          uint64_t v48 = (os_log_s *)qword_101934968;
          if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
          {
            double v49 = *v27;
            *(_DWORD *)buf = 134349824;
            *(double *)&uint8_t buf[4] = v49;
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(double *)&_BYTE buf[14] = v46;
            *(_WORD *)&_BYTE buf[22] = 2050;
            *(void *)unint64_t v148 = v45;
            *(_WORD *)&v148[8] = 2050;
            *(void *)&v148[10] = v140;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "#selection,IO data usage timed out,location_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m,%{publ ic}.1f,DistanceMovedInterval_s,%{public}.2f",  buf,  0x2Au);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934960 != -1) {
              dispatch_once(&qword_101934960, &stru_10186D380);
            }
            double v134 = *v27;
            *(_DWORD *)unint64_t v145 = 134349824;
            *(double *)&v145[4] = v134;
            *(_WORD *)&v145[12] = 2050;
            *(double *)&v145[14] = v46;
            *(_WORD *)&v145[22] = 2050;
            *(void *)double v146 = v45;
            *(_WORD *)&v146[8] = 2050;
            *(void *)&v146[10] = v140;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,IO data usage timed out,location_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m,%{publ ic}.1f,DistanceMovedInterval_s,%{public}.2f",  v145,  42);
            unint64_t v136 = (char *)v135;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v135);
            if (v136 != buf) {
              free(v136);
            }
          }

          BOOL v47 = 0;
        }
      }
    }

    v143 |= v40 | v47;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v50 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    double v51 = *v27;
    int v52 = *(unsigned __int8 *)(a1 + 2075);
    int v53 = *(unsigned __int8 *)(a1 + 2076);
    int v54 = *(unsigned __int8 *)(a1 + 2096);
    uint64_t v55 = *(void *)(a1 + 2104);
    *(_DWORD *)buf = 134351360;
    *(double *)&uint8_t buf[4] = v51;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&_BYTE buf[14] = v52;
    *(_WORD *)&_BYTE buf[18] = 1026;
    *(_DWORD *)&buf[20] = v53;
    *(_WORD *)unint64_t v148 = 1026;
    *(_DWORD *)&v148[2] = v54;
    *(_WORD *)&v148[6] = 1026;
    *(_DWORD *)&v148[8] = v143;
    *(_WORD *)&v148[12] = 1026;
    *(_DWORD *)&v148[14] = v25;
    *(_WORD *)&v148[18] = 1026;
    *(_DWORD *)&v148[20] = v26;
    *(_WORD *)unint64_t v149 = 2050;
    *(void *)&v149[2] = v55;
    LOWORD(v150) = 1026;
    *(_DWORD *)((char *)&v150 + 2) = v40;
    HIWORD(v150) = 1026;
    v151[0] = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "#selection,newLocation_mct,%{public}.3f,isInsideVisit,%{public}d,isLikelyOutOfAVisit,%{public}d,isWiFiAssociated,% {public}d,%{public}d,numHypoWithAPWiFi,%{public}d,NumNonOutlierHypo,%{public}d,LastWifiAssociatedTime,%{public}.3f ,static,%{public}d,radialDistanceMovedWithinThreshold,%{public}d",  buf,  0x46u);
  }

  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v109 = *v27;
    int v110 = *(unsigned __int8 *)(a1 + 2075);
    int v111 = *(unsigned __int8 *)(a1 + 2076);
    int v112 = *(unsigned __int8 *)(a1 + 2096);
    uint64_t v113 = *(void *)(a1 + 2104);
    *(_DWORD *)unint64_t v145 = 134351360;
    *(double *)&v145[4] = v109;
    *(_WORD *)&v145[12] = 1026;
    *(_DWORD *)&v145[14] = v110;
    *(_WORD *)&v145[18] = 1026;
    *(_DWORD *)&v145[20] = v111;
    *(_WORD *)double v146 = 1026;
    *(_DWORD *)&v146[2] = v112;
    *(_WORD *)&v146[6] = 1026;
    *(_DWORD *)&v146[8] = v143;
    *(_WORD *)&v146[12] = 1026;
    *(_DWORD *)&v146[14] = v25;
    *(_WORD *)&v146[18] = 1026;
    *(_DWORD *)&v146[20] = v26;
    *(_WORD *)&v146[24] = 2050;
    *(void *)&v146[26] = v113;
    *(_WORD *)&v146[34] = 1026;
    *(_DWORD *)&v146[36] = v40;
    *(_WORD *)&v146[40] = 1026;
    *(_DWORD *)&v146[42] = v47;
    LODWORD(v138) = 70;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#selection,newLocation_mct,%{public}.3f,isInsideVisit,%{public}d,isLikelyOutOfAVisit,%{public}d,isWiFiAssociated,% {public}d,%{public}d,numHypoWithAPWiFi,%{public}d,NumNonOutlierHypo,%{public}d,LastWifiAssociatedTime,%{public}.3f ,static,%{public}d,radialDistanceMovedWithinThreshold,%{public}d",  v145,  v138);
    std::__shared_count v115 = (char *)v114;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v114);
    if (v115 != buf) {
      free(v115);
    }
    p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
  }

  char v57 = v143 ^ 1;
  if (v25 != 1) {
    char v57 = 1;
  }
  if ((v57 & 1) == 0 && v141 && *((_DWORD *)v141 + 167) != 4)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v66 = (os_log_s *)p_vtable[301];
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      int v67 = *((_DWORD *)v141 + 165);
      double v68 = sub_1003713F0();
      double v69 = sub_1003713F0();
      double v70 = *(double *)(a1 + 2104);
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)&uint8_t buf[4] = v67;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(double *)&buf[10] = v68;
      *(_WORD *)&_BYTE buf[18] = 1026;
      *(_DWORD *)&buf[20] = v40;
      *(_WORD *)unint64_t v148 = 1026;
      *(_DWORD *)&v148[2] = v47;
      *(_WORD *)&v148[6] = 1026;
      *(_DWORD *)&v148[8] = 1;
      *(_WORD *)&v148[12] = 2050;
      *(double *)&v148[14] = v69 - v70;
      *(_WORD *)&v148[22] = 2050;
      *(double *)unint64_t v149 = v46 - v70;
      *(_WORD *)&v149[8] = 2050;
      uint64_t v150 = v45;
      LOWORD(v151[0]) = 2050;
      *(void *)((char *)v151 + 2) = v140;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "#selection,APWiFi,hID,%{public}d,now_mct,%{public}.3f,Static,%{public}d,IODistanceBelowThreshold,%{public}d,isWi FiAssociated,%{public}d,how_long,%{public}.3f,IOAgeWrtAPWiFi_s,%{public}.2f,IODistanceMoved_m,%{public}.1f,IODis tanceMovedInterval_s,%{public}.1f",  buf,  0x4Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v122 = qword_101934968;
      int v123 = *((_DWORD *)v141 + 165);
      double v124 = sub_1003713F0();
      double v125 = sub_1003713F0();
      double v126 = *(double *)(a1 + 2104);
      *(_DWORD *)unint64_t v145 = 67242240;
      *(_DWORD *)&v145[4] = v123;
      *(_WORD *)&v145[8] = 2050;
      *(double *)&v145[10] = v124;
      *(_WORD *)&v145[18] = 1026;
      *(_DWORD *)&v145[20] = v40;
      *(_WORD *)double v146 = 1026;
      *(_DWORD *)&v146[2] = v47;
      *(_WORD *)&v146[6] = 1026;
      *(_DWORD *)&v146[8] = 1;
      *(_WORD *)&v146[12] = 2050;
      *(double *)&v146[14] = v125 - v126;
      *(_WORD *)&v146[22] = 2050;
      *(double *)&v146[24] = v46 - v126;
      *(_WORD *)&v146[32] = 2050;
      *(void *)&v146[34] = v45;
      *(_WORD *)&v146[42] = 2050;
      *(void *)&v146[44] = v140;
      LODWORD(v138) = 76;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v122,  2LL,  "#selection,APWiFi,hID,%{public}d,now_mct,%{public}.3f,Static,%{public}d,IODistanceBelowThreshold,%{public}d,isWi FiAssociated,%{public}d,how_long,%{public}.3f,IOAgeWrtAPWiFi_s,%{public}.2f,IODistanceMoved_m,%{public}.1f,IODis tanceMovedInterval_s,%{public}.1f",  v145,  v138);
      int v128 = (char *)v127;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v127);
      if (v128 != buf) {
        free(v128);
      }
    }

    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if ((v40 | v47) == 1)
    {
      *(void *)unint64_t v145 = &off_1018920B8;
      __asm { FMOV            V0.2D, #-1.0 }

      *(_OWORD *)&v145[8] = _Q0;
      *(_OWORD *)&v146[16] = xmmword_1012E0070;
      *(_OWORD *)&v146[32] = xmmword_1012E0070;
      *(_OWORD *)&v146[56] = _Q0;
      *(_OWORD *)&v146[72] = _Q0;
      *(void *)&v146[88] = 0xBFF0000000000000LL;
      *(_DWORD *)&v146[96] = 0;
      v146[100] = 0;
      *(_DWORD *)&v146[104] = 0;
      *(_DWORD *)&v146[104] = sub_100E8FA20((uint64_t)(v141 + 1), v27);
      if (sub_1004CCD0C((uint64_t)(v141 + 7), v27) && sub_1004CE2F8((uint64_t)(v141 + 7), (uint64_t)v145))
      {
        unint64_t v76 = v141[6] + v141[5] - 1;
        *(_OWORD *)(*(void *)(v141[2] + 8 * (v76 / 0x17)) + 176 * (v76 % 0x17)) = *(_OWORD *)(a2 + 8);
        sub_100AB862C(a1 + 248, (uint64_t)(v141 + 1));
        __int128 v77 = *(_OWORD *)&v146[64];
        *(_OWORD *)(a1 + 1040) = *(_OWORD *)&v146[48];
        *(_OWORD *)(a1 + 1056) = v77;
        *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v146[80];
        *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v146[92];
        __int128 v78 = *(_OWORD *)v146;
        *(_OWORD *)(a1 + 976) = *(_OWORD *)&v145[8];
        *(_OWORD *)(a1 + 992) = v78;
        __int128 v79 = *(_OWORD *)&v146[16];
        __int128 v80 = *(_OWORD *)&v146[32];
        goto LABEL_193;
      }

      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v97 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEBUG,  "#selection,Failed to retrieve estimate from APWiFiFix hypothesis",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2))
      {
LABEL_168:
        p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
        if (v26) {
          goto LABEL_137;
        }
LABEL_169:
        double v98 = -1.0;
        if (*(_DWORD *)(a1 + 908))
        {
          uint64_t v99 = *(void *)(a1 + 288);
          if (v99) {
            double v98 = sub_100E8C200( *(void *)(*(void *)(a1 + 256) + 8 * ((v99 + *(void *)(a1 + 280) - 1) / 0x17uLL))
          }
                  + 176 * ((v99 + *(void *)(a1 + 280) - 1) % 0x17uLL),
                    v27);
        }

        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v100 = (os_log_s *)p_vtable[301];
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&uint8_t buf[4] = v98;
          _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "#selection,all hypotheses are marked as outliers,age of previously selected hypothesis,%{public}.3f",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          *(_DWORD *)unint64_t v145 = 134349056;
          *(double *)&v145[4] = v98;
          LODWORD(v138) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "#selection,all hypotheses are marked as outliers,age of previously selected hypothesis,%{public}.3f",  v145,  v138);
          uint64_t v121 = (char *)v120;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v120);
          if (v121 != buf) {
            free(v121);
          }
        }

        if (v98 > 600.0)
        {
LABEL_180:
          if ((sub_100AB86F4(a1, a2) & 1) != 0) {
            return 1LL;
          }
        }

LABEL_222:
    if (v65 != buf) {
      free(v65);
    }
    goto LABEL_168;
  }

  int v58 = v143;
  if (v25 > 0) {
    int v58 = 1;
  }
  if (v26 >= 2 && v58)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v59 = (os_log_s *)p_vtable[301];
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v60 = sub_10080E94C();
      *(_DWORD *)buf = 1;
      double v61 = sub_10080EB58(v60, buf);
      *(_DWORD *)buf = 134349568;
      *(double *)&uint8_t buf[4] = v61;
      *(_WORD *)&_BYTE buf[12] = 1026;
      *(_DWORD *)&_BYTE buf[14] = v143;
      *(_WORD *)&_BYTE buf[18] = 1026;
      *(_DWORD *)&buf[20] = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEBUG,  "#selection,now_mct,%{public}.3f,APWiFiFix override skipped in favor of hypotheses mixture,Associated,%{public}d, NumHypoWithAPWiFi,%{public}d",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v62 = qword_101934968;
      double v63 = sub_1003713F0();
      *(_DWORD *)unint64_t v145 = 134349568;
      *(double *)&v145[4] = v63;
      *(_WORD *)&v145[12] = 1026;
      *(_DWORD *)&v145[14] = v143;
      *(_WORD *)&v145[18] = 1026;
      *(_DWORD *)&v145[20] = v25;
      LODWORD(v138) = 24;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v62,  2LL,  "#selection,now_mct,%{public}.3f,APWiFiFix override skipped in favor of hypotheses mixture,Associated,%{public}d, NumHypoWithAPWiFi,%{public}d",  v145,  v138);
      uint64_t v65 = (char *)v64;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v64);
      goto LABEL_222;
    }
  }

              *(_DWORD *)(a1 + 28) = v58;
              break;
            case 405:
              *(_DWORD *)(a1 + 68) |= 0x200u;
              uint64_t v60 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              double v61 = *(void *)this;
              if (v60 > 0xFFFFFFFFFFFFFFF5LL || v60 + 10 > v2)
              {
                int v110 = 0;
                int v111 = 0;
                __int128 v64 = 0LL;
                if (v2 <= v60) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v60)
                  {
                    LODWORD(v64) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_227;
                  }

                  int v112 = v60++;
                  uint64_t v113 = *(_BYTE *)(v61 + v112);
                  *((void *)this + 1) = v60;
                  v64 |= (unint64_t)(v113 & 0x7F) << v110;
                  if ((v113 & 0x80) == 0) {
                    break;
                  }
                  v110 += 7;
                  __int128 v14 = v111++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    goto LABEL_226;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v64) = 0;
                }
LABEL_226:
                unint64_t v2 = v112 + 1;
              }

              else
              {
                uint64_t v62 = 0;
                double v63 = 0;
                __int128 v64 = 0LL;
                while (1)
                {
                  unint64_t v2 = v60 + 1;
                  *((void *)this + 1) = v60 + 1;
                  uint64_t v65 = *(_BYTE *)(v61 + v60);
                  v64 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0) {
                    break;
                  }
                  v62 += 7;
                  uint64_t v60 = v2;
                  __int128 v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    break;
                  }
                }
              }

          *(void *)(a1 + 64) = v74;
          goto LABEL_274;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          __int128 v77 = *((void *)this + 1);
          __int128 v78 = *((void *)this + 2);
          __int128 v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5LL && v77 + 10 <= v78)
          {
            __int128 v80 = 0;
            double v81 = 0;
            double v82 = 0LL;
            do
            {
              double v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              double v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_225;
              }
              v80 += 7;
              __int128 v77 = v83;
              BOOL v47 = v81++ > 8;
            }

            while (!v47);
LABEL_187:
            double v82 = 0LL;
            goto LABEL_225;
          }

          double v125 = 0;
          double v126 = 0;
          double v82 = 0LL;
          if (v78 <= v77) {
            __int128 v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              double v82 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v127 = v77 + 1;
              int v128 = *(_BYTE *)(v79 + v77);
              *((void *)this + 1) = v127;
              v82 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                __int128 v77 = v127;
                BOOL v47 = v126++ > 8;
                if (v47) {
                  goto LABEL_187;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                double v82 = 0LL;
              }
            }

            break;
          }

void sub_100AB5720(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100AB5730(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 2160) - 3) >= 2)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v10 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "#Error,get fused location failed, Fusion is not in the running state",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v19[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,get fused location failed, Fusion is not in the running state",  v19,  2);
    __int128 v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const",  "%s\n",  v11);
LABEL_39:
    if (v12 != buf) {
      free(v12);
    }
    return 0LL;
  }

  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(void *)(a2 + 12) = 0LL;
  *(void *)(a2 + 4) = 0LL;
  *(_OWORD *)(a2 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a2 + 36) = _Q0;
  *(_OWORD *)(a2 + 52) = _Q0;
  *(_OWORD *)(a2 + 68) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a2 + 88) = 0xBFF0000000000000LL;
  *(void *)(a2 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  if (!*(_DWORD *)(a1 + 1096))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int128 v13 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "#Error,getFusedLocation,fused location type is Unknown",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v19[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,getFusedLocation,fused location type is Unknown",  v19,  2);
    __int128 v12 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const",  "%s\n",  v14);
    goto LABEL_39;
  }

  if (*(double *)(a1 + 1008) <= 0.0)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int128 v15 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "#Error,getFusedLocation,get fused location: failed, hunc <= 0",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v19[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,getFusedLocation,get fused location: failed, hunc <= 0",  v19,  2);
    __int128 v12 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const",  "%s\n",  v16);
    goto LABEL_39;
  }

  if (sub_100AA621C(a1, a1 + 968, a2))
  {
    *(_DWORD *)a2 = *(_DWORD *)a1;
    *(void *)(a2 + 124) = *(void *)(a1 + 124);
    *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 100);
    *(void *)(a2 + 116) = *(void *)(a1 + 116);
    *(void *)(a2 + 136) = *(void *)(a1 + 136);
    *(_BYTE *)(a2 + 152) = *(_BYTE *)(a1 + 152);
    BOOL result = 1LL;
    *(_DWORD *)(a2 + 132) = 1;
    return result;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  int v17 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "#fusion,getFusedLocation,failed to convert to daemon location",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v19[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,getFusedLocation,failed to convert to daemon location",  v19,  2);
    __int128 v12 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getFusedLocation(CLDaemonLocation &) const",  "%s\n",  v18);
    goto LABEL_39;
  }

  return result;
}

void sub_100AB5CE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100AB5CF4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  *(void *)(a2 + 104) = 0LL;
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(void *)(a2 + 12) = 0LL;
  *(void *)(a2 + 4) = 0LL;
  *(_OWORD *)(a2 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a2 + 36) = _Q0;
  *(_OWORD *)(a2 + 52) = _Q0;
  __int128 v26 = _Q0;
  *(_OWORD *)(a2 + 68) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a2 + 88) = 0xBFF0000000000000LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  if (!*(_DWORD *)(a1 + 908))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int128 v14 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "#fusion,invalid latest selected hypothesis in getting the latest predicted fused state",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v28) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,invalid latest selected hypothesis in getting the latest predicted fused state",  &v28,  2);
    __int128 v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)",  "%s\n",  v15);
    goto LABEL_52;
  }

  uint64_t v9 = sub_10080E94C();
  *(_DWORD *)buf = 1;
  double v38 = sub_10080EB58(v9, buf);
  unint64_t v28 = &off_1018920B8;
  __int128 v29 = v26;
  __int128 v30 = xmmword_1012E0070;
  __int128 v31 = xmmword_1012E0070;
  __int128 v32 = v26;
  __int128 v33 = v26;
  unint64_t v34 = 0xBFF0000000000000LL;
  int v35 = 0;
  char v36 = 0;
  int v37 = 0;
  BOOL v10 = sub_1004CCD0C(a1 + 296, &v38);
  char v11 = sub_1004CE2F8(a1 + 296, (uint64_t)&v28);
  if (!v10 || (v11 & 1) == 0)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v17 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "#fusion,Failed to retrieve predicted estimate from the latest selected hypothesis.",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v27[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,Failed to retrieve predicted estimate from the latest selected hypothesis.",  v27,  2);
    __int128 v16 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)",  "%s\n",  v18);
    goto LABEL_52;
  }

  uint64_t v12 = sub_100E8FA20(a1 + 248, &v38);
  int v37 = v12;
  if (!(_DWORD)v12)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v19 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "#fusion,,getLatestPredictedFusedLocation,fused location type is Unknown",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v27[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,,getLatestPredictedFusedLocation,fused location type is Unknown",  v27,  2);
    __int128 v16 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)",  "%s\n",  v20);
    goto LABEL_52;
  }

  if (*(double *)&v30 <= 0.0)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v21 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "#fusion,getLatestPredictedFusedLocation failed, hunc <= 0",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v27[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,getLatestPredictedFusedLocation failed, hunc <= 0",  v27,  2);
    __int128 v16 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)",  "%s\n",  v22);
    goto LABEL_52;
  }

  if (!sub_100AA621C(v12, (uint64_t)&v28, a2))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v23 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "#fusion,getLatestPredictedFusedLocation,failed to convert to daemon location",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v27[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,getLatestPredictedFusedLocation,failed to convert to daemon location",  v27,  2);
    __int128 v16 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::getLatestPredictedFusedLocation(CLDaemonLocation &)",  "%s\n",  v25);
LABEL_52:
    if (v16 != buf) {
      free(v16);
    }
    return 0LL;
  }

  uint64_t v13 = 1LL;
  *(_DWORD *)(a2 + 132) = 1;
  sub_100FBA824((uint64_t)&v28, (uint64_t)"#fusion,getLatestPredictedFusedLocation,output", 0);
  return v13;
}

void sub_100AB6454(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100AB6460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (!v3)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v13 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(_DWORD *)(a2 + 652);
      *(_DWORD *)buf = 67240192;
      int v32 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,hypothesis with empty buffer is erased,hID,%{public}d",  buf,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v15 = *(_DWORD *)(a2 + 652);
    LODWORD(v2memset(&v6[1], 0, 7) = 67240192;
    HIDWORD(v2memset(&v6[1], 0, 7) = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging,hypothesis with empty buffer is erased,hID,%{public}d",  &v27,  8,  v27,  v28,  v29,  *(_OWORD *)v30,  *(_OWORD *)&v30[16]);
    goto LABEL_31;
  }

  double v4 = sub_100E8C200( *(void *)(*(void *)(a2 + 8) + 8 * ((v3 + *(void *)(a2 + 32) - 1) / 0x17uLL))
       + 176 * ((v3 + *(void *)(a2 + 32) - 1) % 0x17uLL),
         (double *)(*(void *)a1 + 184LL));
  if (*(_DWORD *)(a2 + 660) == 1 && v4 > 15.0)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v5 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a2 + 652);
      int v7 = *(_DWORD *)(a2 + 660);
      uint64_t v8 = *(void *)(a2 + 40);
      *(_DWORD *)buf = 67241216;
      int v32 = v6;
      __int16 v33 = 1026;
      int v34 = v7;
      __int16 v35 = 2050;
      uint64_t v36 = v8;
      __int16 v37 = 2050;
      double v38 = v4;
      __int16 v39 = 2050;
      uint64_t v40 = 0x402E000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,stale tentative hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age, %{public}.2f,maxAge,%{public}.2f",  buf,  0x2Cu);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v9 = *(_DWORD *)(a2 + 652);
    int v10 = *(_DWORD *)(a2 + 660);
    uint64_t v11 = *(void *)(a2 + 40);
    LODWORD(v2memset(&v6[1], 0, 7) = 67241216;
    HIDWORD(v2memset(&v6[1], 0, 7) = v9;
    LOWORD(v28) = 1026;
    *(_DWORD *)((char *)&v28 + 2) = v10;
    HIWORD(v28) = 2050;
    *(_WORD *)__int128 v30 = 2050;
    *(double *)&_DWORD v30[2] = v4;
    *(_WORD *)&v30[10] = 2050;
    *(void *)&v30[12] = 0x402E000000000000LL;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging,stale tentative hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age,%{ public}.2f,maxAge,%{public}.2f",  &v27,  44,  v27,  v28,  v11,  *(_OWORD *)v30,  *(_OWORD *)&v30[16]);
LABEL_31:
    __int128 v26 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto cllcf::CLLCFusion::performHypothesesPurging()::(anonymous class)::operator()(const LCFusionLocationHypothesis &) const",  "%s\n",  v12);
    if (v26 != buf) {
      free(v26);
    }
    return 1LL;
  }

  if (v4 > 30.0)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int128 v16 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *(_DWORD *)(a2 + 652);
      int v18 = *(_DWORD *)(a2 + 660);
      uint64_t v19 = *(void *)(a2 + 40);
      int v20 = *(_DWORD *)(a2 + 656);
      *(_DWORD *)buf = 67241472;
      int v32 = v17;
      __int16 v33 = 1026;
      int v34 = v18;
      __int16 v35 = 2050;
      uint64_t v36 = v19;
      __int16 v37 = 2050;
      double v38 = v4;
      __int16 v39 = 2050;
      uint64_t v40 = 0x403E000000000000LL;
      __int16 v41 = 1026;
      int v42 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,stale hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age,%{public}. 2f,maxAge,%{public}.2f,numLostDataAssociation,%{public}u",  buf,  0x32u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v22 = *(_DWORD *)(a2 + 652);
    int v23 = *(_DWORD *)(a2 + 660);
    uint64_t v24 = *(void *)(a2 + 40);
    int v25 = *(_DWORD *)(a2 + 656);
    LODWORD(v2memset(&v6[1], 0, 7) = 67241472;
    HIDWORD(v2memset(&v6[1], 0, 7) = v22;
    LOWORD(v28) = 1026;
    *(_DWORD *)((char *)&v28 + 2) = v23;
    HIWORD(v28) = 2050;
    *(_WORD *)__int128 v30 = 2050;
    *(double *)&_DWORD v30[2] = v4;
    *(_WORD *)&v30[10] = 2050;
    *(void *)&v30[12] = 0x403E000000000000LL;
    *(_WORD *)&v30[20] = 1026;
    *(_DWORD *)&v30[22] = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging,stale hypothesis is erased,hID,%{public}d,State,%{public}d,bufferSize,%{public}zu,age,%{public}.2f ,maxAge,%{public}.2f,numLostDataAssociation,%{public}u",  &v27,  50,  v27,  v28,  v24,  *(_OWORD *)v30,  *(_OWORD *)&v30[16]);
    goto LABEL_31;
  }

  return 0LL;
}

void *sub_100AB6974(void *result, int *a2, int a3)
{
  double v4 = (void *)(*result + 240LL);
  uint64_t v3 = (void *)*v4;
  int v5 = *a2;
  if (*v4) {
    BOOL v6 = v5 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v9 = (void **)(*result + 240LL);
    do
    {
      if (*((_DWORD *)v3 + 167) == a3)
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v10 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v11 = v3[6];
          if (v11) {
            uint64_t v12 = *(void *)(*(void *)(v3[2] + 8 * ((v11 + v3[5] - 1) / 0x17uLL))
          }
                            + 176 * ((v11 + v3[5] - 1) % 0x17uLL)
                            + 8);
          else {
            uint64_t v12 = 0LL;
          }
          int v13 = *((_DWORD *)v3 + 165);
          int v14 = *((_DWORD *)v3 + 167);
          *(_DWORD *)buf = 67240960;
          int v31 = v13;
          __int16 v32 = 1026;
          int v33 = v14;
          __int16 v34 = 2050;
          uint64_t v35 = v12;
          __int16 v36 = 2050;
          uint64_t v37 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "#fusion,purging, fused hypothesis deleted,hID,%{public}d,type,%{public}d,validityTime_MCT,%{public}.3f,buffe rSize,%{public}zu",  buf,  0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          int v16 = *((_DWORD *)v3 + 165);
          int v17 = *((_DWORD *)v3 + 167);
          uint64_t v18 = v3[6];
          if (v18) {
            uint64_t v19 = *(void *)(*(void *)(v3[2] + 8 * ((v18 + v3[5] - 1) / 0x17uLL))
          }
                            + 176 * ((v18 + v3[5] - 1) % 0x17uLL)
                            + 8);
          else {
            uint64_t v19 = 0LL;
          }
          v23[0] = 67240960;
          v23[1] = v16;
          __int16 v24 = 1026;
          int v25 = v17;
          __int16 v26 = 2050;
          uint64_t v27 = v19;
          __int16 v28 = 2050;
          uint64_t v29 = v18;
          LODWORD(v22) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging, fused hypothesis deleted,hID,%{public}d,type,%{public}d,validityTime_MCT,%{public}.3f,buffe rSize,%{public}zu",  v23,  v22);
          uint64_t v21 = (uint8_t *)v20;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto cllcf::CLLCFusion::performHypothesesPurging()::(anonymous class)::operator()(int &, HypothesisState) const",  "%s\n",  v20);
          if (v21 != buf) {
            free(v21);
          }
        }

        BOOL result = (void *)sub_100ABDCF4((uint64_t)v4, v9);
        int v5 = *a2 - 1;
        *a2 = v5;
      }

      else
      {
        BOOL result = (void *)*v3;
        int v9 = (void **)v3;
      }

      if (result) {
        BOOL v15 = v5 <= 0;
      }
      else {
        BOOL v15 = 1;
      }
      uint64_t v3 = result;
    }

    while (!v15);
  }

  return result;
}

void *sub_100AB6C98(uint64_t a1, void **a2, void *a3)
{
  if (a2 != a3)
  {
    double v4 = *a2;
    if (*a2 != a3)
    {
      *a2 = a3;
      do
      {
        int v5 = (void *)*v4;
        sub_10000AE14((uint64_t)(v4 + 74));
        sub_1005F67A0(v4 + 1);
        operator delete(v4);
        double v4 = v5;
      }

      while (v5 != a3);
    }
  }

  return a3;
}

BOOL sub_100AB6D04(uint64_t a1)
{
  int v1 = *(double **)(a1 + 240);
  if (v1)
  {
    uint64_t v3 = 1LL;
    double v4 = *(void **)(a1 + 240);
    do
    {
      double v4 = (void *)*v4;
      --v3;
    }

    while (v4);
    if (v3)
    {
      int v5 = 0;
      double v6 = v1[81];
      int v7 = *(uint64_t **)(a1 + 240);
      do
      {
        int v8 = *((_DWORD *)v7 + 167);
        BOOL v9 = (v8 & 0xFFFFFFFB) == 0;
        BOOL v10 = (v8 & 0xFFFFFFFB) != 0;
        if (!v9) {
          ++v5;
        }
        int v7 = (uint64_t *)*v7;
      }

      while (v7);
      double v11 = -18.4206807 - log((double)v5);
      v49[0] = 0LL;
      v49[1] = 0LL;
      uint64_t v48 = (uint64_t *)v49;
      double v12 = 0.0;
      int v13 = v1;
      do
      {
        if ((*((_DWORD *)v13 + 167) & 0xFFFFFFFB) != 0)
        {
          unsigned int v50 = *((_DWORD *)v13 + 165);
          double v14 = v13[81] - v6;
          *(void *)buf = &v50;
          if (v14 >= v11)
          {
            BOOL v15 = sub_10044BD34(&v48, &v50, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
            *((double *)v15 + 5) = exp(v14);
          }

          else
          {
            sub_10044BD34(&v48, &v50, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5] = 0LL;
          }

          *(void *)buf = &v50;
          double v12 = v12 + *((double *)sub_10044BD34(&v48, &v50, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5);
        }

        int v13 = *(double **)v13;
      }

      while (v13);
      if (v12 != 0.0 && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        uint64_t v22 = *(uint64_t **)(a1 + 240);
        if (v22)
        {
          uint64_t v47 = 67109632LL;
          do
          {
            if ((*((_DWORD *)v22 + 167) & 0xFFFFFFFB) != 0)
            {
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              int v23 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                int v24 = *((_DWORD *)v22 + 165);
                uint64_t v25 = v22[80];
                uint64_t v26 = v22[81];
                *(_DWORD *)buf = v47;
                *(_DWORD *)&uint8_t buf[4] = v24;
                __int16 v57 = 2048;
                uint64_t v58 = v25;
                __int16 v59 = 2048;
                uint64_t v60 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood normalize apriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f",  buf,  0x1Cu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v34 = *((_DWORD *)v22 + 165);
                uint64_t v35 = v22[80];
                uint64_t v36 = v22[81];
                unsigned int v50 = v47;
                int v51 = v34;
                __int16 v52 = 2048;
                uint64_t v53 = v35;
                __int16 v54 = 2048;
                uint64_t v55 = v36;
                LODWORD(v46) = 28;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood normalize apriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f",  &v50,  v46,  *(double *)&v47);
                double v38 = (uint8_t *)v37;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()",  "%s\n",  v37);
                if (v38 != buf) {
                  free(v38);
                }
              }

              unsigned int v50 = *((_DWORD *)v22 + 165);
              *(void *)buf = &v50;
              double v27 = *((double *)sub_10044BD34(&v48, &v50, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 5) / v12;
              __int16 v28 = (uint8_t *)(v22 + 80);
              *((double *)v22 + 80) = v27;
              *(void *)buf = 0x3FF0000000000000LL;
              if (v27 > 1.0) {
                __int16 v28 = buf;
              }
              if (v27 < 0.00000001) {
                __int16 v28 = (uint8_t *)&unk_101347878;
              }
              double v29 = *(double *)v28;
              v22[80] = *(void *)v28;
              *((double *)v22 + 81) = log(v29);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              __int128 v30 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *((_DWORD *)v22 + 165);
                uint64_t v32 = v22[80];
                uint64_t v33 = v22[81];
                *(_DWORD *)buf = v47;
                *(_DWORD *)&uint8_t buf[4] = v31;
                __int16 v57 = 2048;
                uint64_t v58 = v32;
                __int16 v59 = 2048;
                uint64_t v60 = v33;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood normalize aposteriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f",  buf,  0x1Cu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v39 = *((_DWORD *)v22 + 165);
                uint64_t v40 = v22[80];
                uint64_t v41 = v22[81];
                unsigned int v50 = v47;
                int v51 = v39;
                __int16 v52 = 2048;
                uint64_t v53 = v40;
                __int16 v54 = 2048;
                uint64_t v55 = v41;
                LODWORD(v46) = 28;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood normalize aposteriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f",  &v50,  v46,  *(double *)&v47);
                int v43 = (uint8_t *)v42;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()",  "%s\n",  v42);
                if (v43 != buf) {
                  free(v43);
                }
              }
            }

            uint64_t v22 = (uint64_t *)*v22;
          }

          while (v22);
        }
      }

      else
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v17 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "#selection,Error in normalization method, invalid sum",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          LOWORD(v50) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Error in normalization method, invalid sum",  &v50,  2);
          uint64_t v45 = (uint8_t *)v44;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()",  "%s\n",  v44);
          if (v45 != buf) {
            free(v45);
          }
        }

        sub_100ABA088(a1);
      }

      sub_100008390((uint64_t)&v48, v49[0]);
    }

    else
    {
      *((_OWORD *)v1 + 40) = xmmword_1012E0180;
    }
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v18 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#selection,Normalize method called without any valid hypotheses available",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v50) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Normalize method called without any valid hypotheses available",  &v50,  2);
      int v20 = (uint8_t *)v19;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v19);
      if (v20 != buf) {
        free(v20);
      }
    }
  }

  return v1 != 0LL;
}

void sub_100AB74E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
}

double sub_100AB7520@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 240);
  float v4 = hypotf( (float)(*(float *)(a1 + 260) + *(float *)(a1 + 248)) - *(float *)(a1 + 300),  (float)(*(float *)(a1 + 264) + *(float *)(a1 + 252)) - *(float *)(a1 + 304));
  double v5 = (float)((float)(*(float *)(a1 + 268) + *(float *)(a1 + 256)) - *(float *)(a1 + 308));
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  double result = *(double *)(a1 + 280) + *(double *)(a1 + 272);
  *(double *)(a2 + 24) = result;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a1 + 48);
  return result;
}

uint64_t sub_100AB75AC(uint64_t a1, uint64_t a2)
{
  double v123 = *(double *)(a2 + 16);
  uint64_t v2 = *(void *)(a1 + 240);
  if (!v2)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v53 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "#selection,No valid hypothesis available for selection",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v11memset(&v6[1], 0, 7) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,No valid hypothesis available for selection",  &v117,  2);
    uint64_t v55 = (uint8_t *)v54;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)",  "%s\n",  v54);
    goto LABEL_142;
  }

  uint64_t v5 = 1LL;
  double v6 = *(void **)(a1 + 240);
  do
  {
    double v6 = (void *)*v6;
    --v5;
  }

  while (v6);
  if (v5)
  {
    if (sub_100AB6D04(a1))
    {
      int v7 = *(double **)(a1 + 240);
      if (v7)
      {
        int v8 = 0;
        char v9 = 0;
        int8x16_t v111 = (int8x16_t)xmmword_1012EA5D0;
        __asm { FMOV            V0.2D, #-1.0 }

        double v14 = -1.0;
        double v15 = 0.0;
        double v16 = -1.0;
        double v17 = -1.0;
        __int128 v114 = _Q0;
        __int128 v113 = _Q0;
        do
        {
          std::__shared_count v117 = &off_1018920B8;
          __int128 v118 = v114;
          __int128 v120 = xmmword_1012E0070;
          __int128 v121 = xmmword_1012E0070;
          *(_OWORD *)&v122[8] = v114;
          *(_OWORD *)&v122[24] = v114;
          *(void *)&v122[40] = 0xBFF0000000000000LL;
          *(_DWORD *)&v122[48] = 0;
          v122[52] = 0;
          *(_DWORD *)&v122[56] = 0;
          BOOL v18 = sub_1004CCD0C((uint64_t)(v7 + 7), &v123);
          int v19 = sub_1004CE2F8((uint64_t)(v7 + 7), (uint64_t)&v117);
          unsigned int v20 = sub_100E8FA20((uint64_t)(v7 + 1), &v123);
          if (v18 && v19)
          {
            double v21 = v7[80];
            _NF = v21 > 0.00000001 && v15 < v21;
            if (_NF && (v20 > 8 || ((1 << v20) & 0x1D0) == 0))
            {
              __int128 v110 = v119;
              double v17 = *(double *)&v121;
              int v109 = *(_DWORD *)&v122[4];
              int8x16_t v112 = (int8x16_t)v120;
              __int128 v113 = *(_OWORD *)&v122[8];
              double v14 = *(double *)&v122[32];
              double v16 = *(double *)&v122[24];
              char v9 = v122[52];
              __int16 v115 = *(_WORD *)&v122[53];
              char v116 = v122[55];
              int v8 = sub_100E8FA20((uint64_t)(v7 + 1), &v123);
              if (qword_101934960 != -1) {
                dispatch_once(&qword_101934960, &stru_10186D380);
              }
              int v23 = (os_log_s *)qword_101934968;
              if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
              {
                int v24 = *((_DWORD *)v7 + 165);
                *(_DWORD *)buf = 67240192;
                LODWORD(v13memset(&v6[1], 0, 7) = v24;
                _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "#fusion selected hypothesis %{public}d",  buf,  8u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                int v44 = *((_DWORD *)v7 + 165);
                int v124 = 67240192;
                LODWORD(v125) = v44;
                LODWORD(v10memset(&v6[1], 0, 7) = 8;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion selected hypothesis %{public}d",  &v124,  v107);
                double v46 = (uint8_t *)v45;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)",  "%s\n",  v45);
                if (v46 != buf) {
                  free(v46);
                }
              }

              int8x16_t v111 = vextq_s8(v112, v112, 8uLL);
              if ((v8 & 0xFFFFFFFD) == 1)
              {
                unint64_t v25 = *((void *)v7 + 5) + *((void *)v7 + 6);
                uint64_t v26 = *((void *)v7 + 2);
                uint64_t v27 = *((void *)v7 + 3);
                __int16 v28 = (void *)(v26 + 8 * (v25 / 0x17));
                if (v27 == v26) {
                  uint64_t v29 = 0LL;
                }
                else {
                  uint64_t v29 = *v28 + 176 * (v25 % 0x17);
                }
                while (1)
                {
                  unint64_t v30 = v27 == v26
                      ? 0LL
                      : *(void *)(v26 + 8 * (*((void *)v7 + 5) / 0x17uLL)) + 176 * (*((void *)v7 + 5) % 0x17uLL);
                  if (v29 == v30) {
                    break;
                  }
                  uint64_t v31 = v29;
                  if (v29 == *v28) {
                    uint64_t v31 = *(v28 - 1) + 4048LL;
                  }
                  if (sub_100E8C200(v31 - 176, &v123) > 2.0) {
                    break;
                  }
                  if (v29 == *v28)
                  {
                    uint64_t v33 = *(v28 - 1);
                    uint64_t v32 = v33 + 4048;
                    if (*(_DWORD *)(v33 + 4032) == v8) {
                      goto LABEL_42;
                    }
                    --v28;
                  }

                  else
                  {
                    if (*(_DWORD *)(v29 - 16) == v8)
                    {
                      uint64_t v32 = v29;
LABEL_42:
                      int v34 = *(std::__shared_weak_count **)(v32 - 152);
                      if (v34 && (int v34 = std::__shared_weak_count::lock(v34)) != 0LL) {
                        uint64_t v35 = *(void *)(v32 - 160);
                      }
                      else {
                        uint64_t v35 = 0LL;
                      }
                      __int128 v108 = v34;
                      if (qword_101934960 != -1) {
                        dispatch_once(&qword_101934960, &stru_10186D380);
                      }
                      uint64_t v36 = (os_log_s *)qword_101934968;
                      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v37 = v29;
                        if (v29 == *v28) {
                          uint64_t v37 = *(v28 - 1) + 4048LL;
                        }
                        _ZF = *(_DWORD *)(v37 - 16) == 3;
                        double v38 = "GPS";
                        if (_ZF) {
                          double v38 = "Accessory";
                        }
                        int v39 = *((_DWORD *)v7 + 165);
                        uint64_t v40 = *(void *)(v35 + 24);
                        uint64_t v41 = *(void *)(v35 + 32);
                        *(_DWORD *)buf = 136316419;
                        uint64_t v137 = v38;
                        __int16 v138 = 1024;
                        int v139 = v39;
                        __int16 v140 = 2049;
                        uint64_t v141 = v110;
                        __int16 v142 = 2049;
                        uint64_t v143 = v40;
                        __int16 v144 = 2049;
                        uint64_t v145 = *((void *)&v110 + 1);
                        __int16 v146 = 2049;
                        uint64_t v147 = v41;
                        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "#fusion Overriding outputLocation with %s location,%d,lat,%{private}.7f,%{private}.7f,lon,%{pr ivate}.7f,%{private}.7f",  buf,  0x3Au);
                      }

                      if (sub_1002921D0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_101934960 != -1) {
                          dispatch_once(&qword_101934960, &stru_10186D380);
                        }
                        if (v29 == *v28) {
                          uint64_t v29 = *(v28 - 1) + 4048LL;
                        }
                        uint64_t v47 = "GPS";
                        if (*(_DWORD *)(v29 - 16) == 3) {
                          uint64_t v47 = "Accessory";
                        }
                        int v48 = *((_DWORD *)v7 + 165);
                        uint64_t v49 = *(void *)(v35 + 24);
                        uint64_t v50 = *(void *)(v35 + 32);
                        int v124 = 136316419;
                        double v125 = v47;
                        __int16 v126 = 1024;
                        int v127 = v48;
                        __int16 v128 = 2049;
                        uint64_t v129 = v110;
                        __int16 v130 = 2049;
                        uint64_t v131 = v49;
                        __int16 v132 = 2049;
                        uint64_t v133 = *((void *)&v110 + 1);
                        __int16 v134 = 2049;
                        uint64_t v135 = v50;
                        LODWORD(v10memset(&v6[1], 0, 7) = 58;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion Overriding outputLocation with %s location,%d,lat,%{private}.7f,%{private}.7f,lon,%{pr ivate}.7f,%{private}.7f",  &v124,  v107);
                        __int16 v52 = (uint8_t *)v51;
                        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)",  "%s\n",  v51);
                        if (v52 != buf) {
                          free(v52);
                        }
                      }

                      double v17 = *(double *)(v35 + 56);
                      double v16 = *(double *)(v35 + 96);
                      double v14 = *(double *)(v35 + 104);
                      char v9 = *(_BYTE *)(v35 + 124);
                      __int16 v115 = *(_WORD *)(v35 + 125);
                      int8x16_t v111 = vextq_s8(*(int8x16_t *)(v35 + 40), *(int8x16_t *)(v35 + 40), 8uLL);
                      __int128 v113 = *(_OWORD *)(v35 + 80);
                      char v116 = *(_BYTE *)(v35 + 127);
                      __int128 v110 = *(_OWORD *)(v35 + 24);
                      int v109 = *(_DWORD *)(v35 + 76);
                      if (v108)
                      {
                        p_uint64_t shared_owners = (unint64_t *)&v108->__shared_owners_;
                        do
                          unint64_t v43 = __ldaxr(p_shared_owners);
                        while (__stlxr(v43 - 1, p_shared_owners));
                        if (!v43)
                        {
                          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                          std::__shared_weak_count::__release_weak(v108);
                        }
                      }

                      break;
                    }

                    uint64_t v32 = v29;
                  }

                  uint64_t v29 = v32 - 176;
                  uint64_t v26 = *((void *)v7 + 2);
                  uint64_t v27 = *((void *)v7 + 3);
                }
              }

              double v15 = v21;
            }
          }

          int v7 = *(double **)v7;
        }

        while (v7);
      }

      else
      {
        char v9 = 0;
        int v8 = 0;
        __asm { FMOV            V0.2D, #-1.0 }

        int8x16_t v111 = (int8x16_t)xmmword_1012EA5D0;
        __int128 v113 = _Q0;
        double v17 = -1.0;
        double v16 = -1.0;
        double v14 = -1.0;
      }

      double v70 = v123;
      int v71 = *(_DWORD *)(a2 + 120);
      uint64_t v72 = *(void *)(a2 + 112);
      uint64_t v73 = *(void *)(a2 + 64);
      int v74 = *(_DWORD *)(a2 + 72);
      *(void *)(a1 + 976) = *(void *)(a2 + 8);
      *(double *)(a1 + 984) = v70;
      *(_OWORD *)(a1 + 992) = v110;
      *(int8x16_t *)(a1 + 1008) = vextq_s8(v111, v111, 8uLL);
      *(double *)(a1 + 1024) = v17;
      *(void *)(a1 + 1032) = v73;
      *(_DWORD *)(a1 + 1040) = v74;
      *(_DWORD *)(a1 + 1044) = v109;
      *(_OWORD *)(a1 + 1048) = v113;
      *(double *)(a1 + 1064) = v16;
      *(double *)(a1 + 1072) = v14;
      *(void *)(a1 + 1080) = v72;
      *(_DWORD *)(a1 + 1088) = v71;
      *(_BYTE *)(a1 + 1092) = v9;
      *(_BYTE *)(a1 + 1095) = v116;
      *(_WORD *)(a1 + 1093) = v115;
      uint64_t v58 = 1LL;
      *(_DWORD *)(a1 + 1096) = v8;
      return v58;
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v65 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "#selection, Failed to normalize likelihoods",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v11memset(&v6[1], 0, 7) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#selection, Failed to normalize likelihoods",  &v117,  2);
    uint64_t v55 = (uint8_t *)v100;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)",  "%s\n",  v100);
LABEL_142:
    if (v55 != buf) {
      free(v55);
    }
    return 0LL;
  }

  std::__shared_count v117 = &off_1018920B8;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v118 = _Q0;
  __int128 v120 = xmmword_1012E0070;
  __int128 v121 = xmmword_1012E0070;
  *(_OWORD *)&v122[8] = _Q0;
  *(_OWORD *)&v122[24] = _Q0;
  *(void *)&v122[40] = 0xBFF0000000000000LL;
  *(_DWORD *)&v122[48] = 0;
  v122[52] = 0;
  *(_DWORD *)&v122[56] = 0;
  BOOL v57 = sub_1004CCD0C(v2 + 56, &v123);
  uint64_t v58 = sub_1004CE2F8(*(void *)(a1 + 240) + 56LL, (uint64_t)&v117) & v57;
  if ((v58 & 1) != 0)
  {
    *(_DWORD *)&v122[56] = sub_100E8FA20(*(void *)(a1 + 240) + 8LL, &v123);
    if ((*(_DWORD *)&v122[56] & 0xFFFFFFFD) == 1)
    {
      uint64_t v59 = *(void *)(a1 + 240);
      unint64_t v60 = *(void *)(v59 + 40) + *(void *)(v59 + 48);
      uint64_t v61 = *(void *)(v59 + 16);
      uint64_t v62 = *(void *)(v59 + 24);
      double v63 = (void *)(v61 + 8 * (v60 / 0x17));
      if (v62 == v61) {
        uint64_t v64 = 0LL;
      }
      else {
        uint64_t v64 = *v63 + 176 * (v60 % 0x17);
      }
      while (1)
      {
        if (v62 == v61) {
          unint64_t v75 = 0LL;
        }
        else {
          unint64_t v75 = *(void *)(v61 + 8 * (*(void *)(v59 + 40) / 0x17uLL)) + 176 * (*(void *)(v59 + 40) % 0x17uLL);
        }
        if (v64 == v75) {
          break;
        }
        uint64_t v76 = v64;
        if (v64 == *v63) {
          uint64_t v76 = *(v63 - 1) + 4048LL;
        }
        if (sub_100E8C200(v76 - 176, &v123) > 2.0) {
          break;
        }
        if (v64 == *v63)
        {
          uint64_t v78 = *(v63 - 1);
          uint64_t v77 = v78 + 4048;
          if (*(_DWORD *)(v78 + 4032) == *(_DWORD *)&v122[56]) {
            goto LABEL_117;
          }
          --v63;
        }

        else
        {
          if (*(_DWORD *)(v64 - 16) == *(_DWORD *)&v122[56])
          {
            uint64_t v77 = v64;
LABEL_117:
            __int128 v79 = *(std::__shared_weak_count **)(v77 - 152);
            if (v79)
            {
              __int128 v80 = std::__shared_weak_count::lock(v79);
              if (v80)
              {
                uint64_t v81 = *(void *)(v77 - 160);
LABEL_122:
                if (qword_101934960 != -1) {
                  dispatch_once(&qword_101934960, &stru_10186D380);
                }
                double v82 = (os_log_s *)qword_101934968;
                if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v83 = v64;
                  if (v64 == *v63) {
                    uint64_t v83 = *(v63 - 1) + 4048LL;
                  }
                  int v84 = *(_DWORD *)(v59 + 660);
                  if (*(_DWORD *)(v83 - 16) == 3) {
                    unint64_t v85 = "Accessory";
                  }
                  else {
                    unint64_t v85 = "GPS";
                  }
                  uint64_t v86 = *(void *)(v81 + 24);
                  uint64_t v87 = *(void *)(v81 + 32);
                  *(_DWORD *)buf = 136316419;
                  uint64_t v137 = v85;
                  __int16 v138 = 1024;
                  int v139 = v84;
                  __int16 v140 = 2048;
                  uint64_t v141 = v119;
                  __int16 v142 = 2049;
                  uint64_t v143 = v86;
                  __int16 v144 = 2049;
                  uint64_t v145 = *((void *)&v119 + 1);
                  __int16 v146 = 2049;
                  uint64_t v147 = v87;
                  _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEBUG,  "#fusion Overriding outputLocation with raw %s location,%d,lat,%.7f,%{private}.7f,lon,%{private}.7f,%{private}.7f",  buf,  0x3Au);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  if (v64 == *v63) {
                    uint64_t v64 = *(v63 - 1) + 4048LL;
                  }
                  int v101 = *(_DWORD *)(v59 + 660);
                  if (*(_DWORD *)(v64 - 16) == 3) {
                    double v102 = "Accessory";
                  }
                  else {
                    double v102 = "GPS";
                  }
                  uint64_t v103 = *(void *)(v81 + 24);
                  uint64_t v104 = *(void *)(v81 + 32);
                  int v124 = 136316419;
                  double v125 = v102;
                  __int16 v126 = 1024;
                  int v127 = v101;
                  __int16 v128 = 2048;
                  uint64_t v129 = v119;
                  __int16 v130 = 2049;
                  uint64_t v131 = v103;
                  __int16 v132 = 2049;
                  uint64_t v133 = *((void *)&v119 + 1);
                  __int16 v134 = 2049;
                  uint64_t v135 = v104;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion Overriding outputLocation with raw %s location,%d,lat,%.7f,%{private}.7f,lon,%{private}.7f,%{private}.7f",  &v124,  58);
                  unint64_t v106 = (uint8_t *)v105;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)",  "%s\n",  v105);
                  if (v106 != buf) {
                    free(v106);
                  }
                }

                __int128 v88 = *(_OWORD *)(v81 + 8);
                __int128 v89 = *(_OWORD *)(v81 + 24);
                __int128 v90 = *(_OWORD *)(v81 + 56);
                __int128 v120 = *(_OWORD *)(v81 + 40);
                __int128 v121 = v90;
                __int128 v118 = v88;
                __int128 v119 = v89;
                __int128 v91 = *(_OWORD *)(v81 + 72);
                __int128 v92 = *(_OWORD *)(v81 + 88);
                __int128 v93 = *(_OWORD *)(v81 + 104);
                *(_OWORD *)&v122[44] = *(_OWORD *)(v81 + 116);
                *(_OWORD *)&v122[16] = v92;
                *(_OWORD *)&v122[32] = v93;
                *(_OWORD *)uint64_t v122 = v91;
                if (v80)
                {
                  uint64_t v94 = (unint64_t *)&v80->__shared_owners_;
                  do
                    unint64_t v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }

                break;
              }
            }

            else
            {
              __int128 v80 = 0LL;
            }

            uint64_t v81 = 0LL;
            goto LABEL_122;
          }

          uint64_t v77 = v64;
        }

        uint64_t v64 = v77 - 176;
        uint64_t v61 = *(void *)(v59 + 16);
        uint64_t v62 = *(void *)(v59 + 24);
      }
    }

    __int128 v96 = *(_OWORD *)&v122[16];
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)v122;
    *(_OWORD *)(a1 + 1056) = v96;
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v122[32];
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v122[44];
    __int128 v97 = v119;
    *(_OWORD *)(a1 + 976) = v118;
    *(_OWORD *)(a1 + 992) = v97;
    __int128 v98 = v121;
    *(_OWORD *)(a1 + 1008) = v120;
    *(_OWORD *)(a1 + 1024) = v98;
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v66 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "#selection,Failed to retrieve estimate from the only available hypothesis",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v124) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Failed to retrieve estimate from the only available hypothesis",  &v124,  2);
      double v68 = (uint8_t *)v67;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)",  "%s\n",  v67);
      if (v68 != buf) {
        free(v68);
      }
    }
  }

  return v58;
}

void sub_100AB861C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100AB862C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  __int128 v4 = *(_OWORD *)(a2 + 524);
  __int128 v5 = *(_OWORD *)(a2 + 540);
  __int128 v6 = *(_OWORD *)(a2 + 556);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 540) = v5;
  *(_OWORD *)(a1 + 556) = v6;
  *(_OWORD *)(a1 + 524) = v4;
  __int128 v7 = *(_OWORD *)(a2 + 460);
  __int128 v8 = *(_OWORD *)(a2 + 476);
  __int128 v9 = *(_OWORD *)(a2 + 508);
  *(_OWORD *)(a1 + 492) = *(_OWORD *)(a2 + 492);
  *(_OWORD *)(a1 + 508) = v9;
  *(_OWORD *)(a1 + 460) = v7;
  *(_OWORD *)(a1 + 476) = v8;
  __int128 v10 = *(_OWORD *)(a2 + 396);
  __int128 v11 = *(_OWORD *)(a2 + 412);
  __int128 v12 = *(_OWORD *)(a2 + 444);
  *(_OWORD *)(a1 + 428) = *(_OWORD *)(a2 + 428);
  *(_OWORD *)(a1 + 444) = v12;
  *(_OWORD *)(a1 + 396) = v10;
  *(_OWORD *)(a1 + 412) = v11;
  sub_1000F2F30((void *)(a1 + 584), (uint64_t *)(a2 + 584));
  __int128 v13 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v13;
  __int128 v14 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v14;
  __int128 v16 = *(_OWORD *)(a2 + 680);
  __int128 v15 = *(_OWORD *)(a2 + 696);
  __int128 v17 = *(_OWORD *)(a2 + 664);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 680) = v16;
  *(_OWORD *)(a1 + 696) = v15;
  *(_OWORD *)(a1 + 664) = v17;
  return a1;
}

uint64_t sub_100AB86F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (double *)(a2 + 16);
  uint64_t v171 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a1 + 240);
  if (!v3)
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v49 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "#selection,No valid hypothesis available for selection",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    LOWORD(v165) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,No valid hypothesis available for selection",  &v165,  2);
    int v51 = (uint8_t *)v50;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)",  "%s\n",  v50);
    goto LABEL_198;
  }

  uint64_t v6 = 1LL;
  __int128 v7 = *(void **)(a1 + 240);
  do
  {
    __int128 v7 = (void *)*v7;
    --v6;
  }

  while (v7);
  if (v6)
  {
    if (sub_100AB6D04(a1))
    {
      double v163 = 0.0;
      v164[0] = 0.0;
      if ((sub_100D2E600((double *)(a1 + 1800), v164, &v163, *(double *)(a2 + 24), *(double *)(a1 + 1704)) & 1) != 0)
      {
        __int128 v8 = *(uint64_t **)(a1 + 240);
        if (v8)
        {
          double v136 = v163 * 0.0174532925;
          double v137 = v164[0] * 0.0174532925;
          uint64_t v133 = v171;
          uint64_t v134 = *(void *)(a2 + 8);
          double v9 = 0.0;
          __asm { FMOV            V0.2D, #-1.0 }

          float64x2_t v160 = _Q0;
          _Q0.f64[0] = NAN;
          _Q0.f64[1] = NAN;
          int8x16_t v156 = (int8x16_t)vnegq_f64(_Q0);
          double v153 = 0.0;
          double v154 = 0.0;
          double v150 = 0.0;
          double v151 = 0.0;
          double v155 = 0.0;
          double v158 = 0.0;
          double v152 = 0.0;
          double v149 = 0.0;
          do
          {
            if ((*((_DWORD *)v8 + 167) & 0xFFFFFFFB) != 0)
            {
              uint64_t v15 = v8[6];
              if (v15)
              {
                if (*(_BYTE *)(*(void *)(v8[2] + 8 * ((v15 + v8[5] - 1) / 0x17uLL))
                              + 176 * ((v15 + v8[5] - 1) % 0x17uLL)
                              + 168))
                {
                  uint64_t v165 = &off_1018920B8;
                  float64x2_t v166 = v160;
                  __int128 v168 = xmmword_1012E0070;
                  __int128 v169 = xmmword_1012E0070;
                  *(float64x2_t *)&v170[8] = v160;
                  *(float64x2_t *)&v170[24] = v160;
                  *(void *)&v170[40] = 0xBFF0000000000000LL;
                  *(_DWORD *)&v170[48] = 0;
                  v170[52] = 0;
                  *(_DWORD *)&v170[56] = 0;
                  BOOL v16 = sub_1004CCD0C((uint64_t)(v8 + 7), (double *)&v171);
                  int v17 = sub_1004CE2F8((uint64_t)(v8 + 7), (uint64_t)&v165);
                  if (*(_BYTE *)(a1 + 164))
                  {
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    BOOL v18 = (os_log_s *)qword_101934968;
                    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                    {
                      int v19 = *((_DWORD *)v8 + 165);
                      *(_DWORD *)buf = 67109120;
                      int v175 = v19;
                      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood equal override setting likelihood to 1 for hID,%d",  buf,  8u);
                    }

                    double v20 = 1.0;
                    if (sub_1002921D0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_101934960 != -1) {
                        dispatch_once(&qword_101934960, &stru_10186D380);
                      }
                      int v21 = *((_DWORD *)v8 + 165);
                      int v172 = 67109120;
                      int v173 = v21;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood equal override setting likelihood to 1 for hID,%d",  &v172);
                      uint64_t v143 = (uint8_t *)v22;
                      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)",  "%s\n",  v22);
                      if (v143 != buf) {
                        free(v143);
                      }
                    }
                  }

                  else
                  {
                    double v20 = *((double *)v8 + 80);
                  }

                  if (v16 && v17 && v20 > 0.00000001)
                  {
                    double v23 = v9 + v20;
                    sub_1002929AC((v20 * *(double *)&v167 + v9 * v155) / (v9 + v20));
                    double v155 = v25;
                    *(double *)v26.i64 = *((double *)&v167 + 1) * 0.0174532925;
                    if (fabs(*((double *)&v167 + 1) * 0.0174532925) <= 3.14159265)
                    {
                      int8x16_t v28 = (int8x16_t)0x400921FB54442D18uLL;
                    }

                    else
                    {
                      double v144 = *(double *)vbslq_s8(v156, (int8x16_t)0x400921FB54442D18uLL, v26).i64;
                      double v27 = fmod(*(double *)v26.i64 + v144, 6.28318531);
                      int8x16_t v28 = (int8x16_t)0x400921FB54442D18uLL;
                      *(double *)v26.i64 = v27 - v144;
                    }

                    *(double *)v24.i64 = v158 * 0.0174532925;
                    double v29 = v158 * 0.0174532925;
                    if (fabs(v158 * 0.0174532925) > *(double *)v28.i64)
                    {
                      double v139 = *(double *)vbslq_s8(v156, v28, v24).i64;
                      uint64_t v145 = v26.i64[0];
                      double v30 = fmod(*(double *)v24.i64 + v139, 6.28318531);
                      *(double *)v24.i64 = v158 * 0.0174532925;
                      v26.i64[0] = v145;
                      v28.i64[0] = 0x400921FB54442D18LL;
                      double v29 = v30 - v139;
                    }

                    double v31 = *(double *)v26.i64 - v29;
                    BOOL v32 = *(double *)v26.i64 - v29 > *(double *)v28.i64;
                    BOOL v33 = vabdd_f64(*(double *)v26.i64, v29) <= *(double *)v28.i64;
                    double v34 = -0.0;
                    if (!v33) {
                      double v34 = dbl_1013477A0[v32];
                    }
                    sub_100292950((v20 * ((*(double *)v24.i64 + v31 + v34) * 57.2957795) + v9 * v158) / v23);
                    double v158 = v37;
                    if (*((double *)&v168 + 1) != -1.0)
                    {
                      double v39 = v152;
                      double v38 = v153;
                      if (*(double *)&v169 != -1.0)
                      {
                        double v39 = (v20 * *((double *)&v168 + 1) + v153 * v152) / (v153 + v20);
                        double v38 = v153 + v20;
                      }

                      double v152 = v39;
                      double v153 = v38;
                    }

                    if (*(double *)&v170[24] != -1.0 && *(double *)&v170[32] != -1.0)
                    {
                      *(double *)v35.i64 = *(double *)&v170[24] * 0.0174532925;
                      if (fabs(*(double *)&v170[24] * 0.0174532925) <= 3.14159265)
                      {
                        int8x16_t v41 = (int8x16_t)0x400921FB54442D18uLL;
                      }

                      else
                      {
                        double v146 = *(double *)vbslq_s8(v156, (int8x16_t)0x400921FB54442D18uLL, v35).i64;
                        double v40 = fmod(*(double *)v35.i64 + v146, 6.28318531);
                        int8x16_t v41 = (int8x16_t)0x400921FB54442D18uLL;
                        *(double *)v35.i64 = v40 - v146;
                      }

                      *(double *)v36.i64 = v151 * 0.0174532925;
                      double v42 = v151 * 0.0174532925;
                      if (fabs(v151 * 0.0174532925) > *(double *)v41.i64)
                      {
                        double v140 = *(double *)vbslq_s8(v156, v41, v36).i64;
                        uint64_t v147 = v35.i64[0];
                        double v43 = fmod(*(double *)v36.i64 + v140, 6.28318531);
                        *(double *)v36.i64 = v151 * 0.0174532925;
                        v35.i64[0] = v147;
                        v41.i64[0] = 0x400921FB54442D18LL;
                        double v42 = v43 - v140;
                      }

                      double v44 = *(double *)v35.i64 - v42;
                      BOOL v45 = *(double *)v35.i64 - v42 > *(double *)v41.i64;
                      BOOL v33 = vabdd_f64(*(double *)v35.i64, v42) <= *(double *)v41.i64;
                      double v46 = -0.0;
                      if (!v33) {
                        double v46 = dbl_1013477A0[v45];
                      }
                      double v47 = v20 * ((*(double *)v36.i64 + v44 + v46) * 57.2957795) + v154 * v151;
                      double v154 = v154 + v20;
                      sub_100292890(v47 / v154);
                      double v151 = v48;
                    }

                    if (*(double *)&v170[8] != -1.0 && *(double *)&v170[16] != -1.0)
                    {
                      double v149 = (v20 * *(double *)&v170[8] + v150 * v149) / (v150 + v20);
                      double v150 = v150 + v20;
                    }
                  }

                  else
                  {
                    double v23 = v9;
                  }

                  double v9 = v23;
                }
              }
            }

            __int128 v8 = (uint64_t *)*v8;
          }

          while (v8);
          if (v9 >= 0.00000001)
          {
            uint64_t v62 = *(uint64_t **)(a1 + 240);
            if (v62)
            {
              int v63 = 0;
              double v64 = -1.0;
              double v148 = 0.0;
              double v142 = 0.0;
              double v141 = 0.0;
              double v135 = 0.0;
              double v65 = 0.0;
              double v66 = -1.0;
              do
              {
                if ((*((_DWORD *)v62 + 167) & 0xFFFFFFFB) != 0)
                {
                  uint64_t v67 = v62[6];
                  if (v67)
                  {
                    if (*(_BYTE *)(*(void *)(v62[2] + 8 * ((v67 + v62[5] - 1) / 0x17uLL))
                                  + 176 * ((v67 + v62[5] - 1) % 0x17uLL)
                                  + 168))
                    {
                      uint64_t v165 = &off_1018920B8;
                      float64x2_t v166 = v160;
                      __int128 v168 = xmmword_1012E0070;
                      __int128 v169 = xmmword_1012E0070;
                      *(float64x2_t *)&v170[8] = v160;
                      *(float64x2_t *)&v170[24] = v160;
                      *(void *)&v170[40] = 0xBFF0000000000000LL;
                      *(_DWORD *)&v170[48] = 0;
                      v170[52] = 0;
                      *(_DWORD *)&v170[56] = 0;
                      double v157 = v66;
                      if (*(_BYTE *)(a1 + 164))
                      {
                        if (qword_101934960 != -1) {
                          dispatch_once(&qword_101934960, &stru_10186D380);
                        }
                        double v68 = (os_log_s *)qword_101934968;
                        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                        {
                          int v69 = *((_DWORD *)v62 + 165);
                          *(_DWORD *)buf = 67109120;
                          int v175 = v69;
                          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "#selection,Likelihood equal override setting likelihood to 1 for hID,%d",  buf,  8u);
                        }

                        double v159 = 1.0;
                        if (sub_1002921D0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_101934960 != -1) {
                            dispatch_once(&qword_101934960, &stru_10186D380);
                          }
                          int v70 = *((_DWORD *)v62 + 165);
                          int v172 = 67109120;
                          int v173 = v70;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Likelihood equal override setting likelihood to 1 for hID,%d",  &v172);
                          uint64_t v72 = (uint8_t *)v71;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)",  "%s\n",  v71);
                          if (v72 != buf) {
                            free(v72);
                          }
                          double v64 = -1.0;
                        }
                      }

                      else
                      {
                        double v159 = *((double *)v62 + 80);
                      }

                      if (sub_1004CE2F8((uint64_t)(v62 + 7), (uint64_t)&v165))
                      {
                        double v138 = *(double *)&v168;
                        double v73 = sub_100292B54(*(double *)&v167, v155);
                        double v74 = *(double *)&v168;
                        double v75 = sub_100292B54(*((double *)&v167 + 1), v158);
                        double v76 = v159 / v9;
                        if (*((double *)&v168 + 1) == v64 || *(double *)&v169 == v64)
                        {
                          double v78 = v159 / v9;
                        }

                        else
                        {
                          double v77 = v141;
                          if (v153 > 0.00000001) {
                            double v77 = v141
                          }
                          double v141 = v77;
                          if (v153 > 0.00000001) {
                            double v78 = v159 / v153;
                          }
                          else {
                            double v78 = v159 / v9;
                          }
                        }

                        if (*(double *)&v170[24] != -1.0)
                        {
                          double v79 = *(double *)&v170[32];
                          if (*(double *)&v170[32] != -1.0 && v154 > 0.00000001)
                          {
                            double v80 = sub_100292B54(*(double *)&v170[24], v151);
                            double v78 = v159 / v154;
                            double v135 = v135 + v159 / v154 * (v80 * v80) + v159 / v154 * (v79 * v79);
                          }
                        }

                        if (*(double *)&v170[8] != -1.0 && *(double *)&v170[16] != -1.0 && v150 > 0.00000001)
                        {
                          double v65 = v65
                          double v78 = v159 / v150;
                        }

                        double v148 = v148 + v76 * (v137 * v73 * (v137 * v73)) + v76 * (v138 * v138) * 0.5;
                        double v142 = v142 + v76 * (v136 * v75 * (v136 * v75)) + v76 * (v74 * v74) * 0.5;
                        if (v78 <= v157)
                        {
                          double v78 = v157;
                        }

                        else
                        {
                          int v63 = sub_100E8FA20((uint64_t)(v62 + 1), (double *)&v171);
                          sub_100AB862C(a1 + 248, (uint64_t)(v62 + 1));
                        }
                      }

                      else
                      {
                        double v78 = v157;
                      }

                      double v66 = v78;
                      double v64 = -1.0;
                    }
                  }
                }

                uint64_t v62 = (uint64_t *)*v62;
              }

              while (v62);
              double v89 = v142 + v148;
              double v90 = v135;
              double v91 = v141;
            }

            else
            {
              int v63 = 0;
              double v65 = 0.0;
              double v90 = 0.0;
              double v91 = 0.0;
              double v89 = 0.0;
            }

            double v95 = sqrt(v91);
            if (v153 <= 0.00000001) {
              double v96 = -1.0;
            }
            else {
              double v96 = v95;
            }
            if (v153 <= 0.00000001) {
              double v97 = -1.0;
            }
            else {
              double v97 = v152;
            }
            BOOL v98 = v154 > 0.00000001;
            BOOL v99 = v90 < 3600.0;
            double v100 = sqrt(v90);
            if (v98 && v99) {
              double v101 = v151;
            }
            else {
              double v101 = -1.0;
            }
            if (v98 && v99) {
              double v102 = v100;
            }
            else {
              double v102 = -1.0;
            }
            double v103 = sqrt(v65);
            if (v150 <= 0.00000001) {
              double v104 = -1.0;
            }
            else {
              double v104 = v149;
            }
            if (v150 <= 0.00000001) {
              double v105 = -1.0;
            }
            else {
              double v105 = v103;
            }
            int v106 = *(_DWORD *)(a2 + 120);
            uint64_t v107 = *(void *)(a2 + 112);
            int v108 = *(_DWORD *)(a1 + 160);
            if (v108)
            {
              if (v108 == 1)
              {
                int v63 = 1;
              }

              else
              {
                int v63 = *(_DWORD *)(a1 + 160);
                if (v108 != 4)
                {
                  if (qword_101934960 != -1) {
                    dispatch_once(&qword_101934960, &stru_10186D380);
                  }
                  int v109 = (os_log_s *)qword_101934968;
                  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEBUG,  "#selection,Output default set to invalid type error. Setting type to unknown",  buf,  2u);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_101934960 != -1) {
                      dispatch_once(&qword_101934960, &stru_10186D380);
                    }
                    LOWORD(v165) = 0;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Output default set to invalid type error. Setting type to unknown",  &v165,  2);
                    __int16 v132 = (uint8_t *)v131;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)",  "%s\n",  v131);
                    if (v132 != buf) {
                      free(v132);
                    }
                  }

                  int v63 = 0;
                }
              }
            }

            double v110 = sqrt(v89);
            uint64_t v111 = *(void *)(a2 + 64);
            int v112 = *(_DWORD *)(a2 + 72);
            *(void *)(a1 + 976) = v134;
            *(void *)(a1 + 984) = v133;
            *(double *)(a1 + 992) = v155;
            *(double *)(a1 + 1000) = v158;
            *(double *)(a1 + 1008) = v110;
            *(double *)(a1 + 1016) = v97;
            *(double *)(a1 + 1024) = v96;
            *(void *)(a1 + 1032) = v111;
            *(_DWORD *)(a1 + 1040) = v112;
            *(double *)(a1 + 1048) = v104;
            *(double *)(a1 + 1056) = v105;
            *(double *)(a1 + 1064) = v101;
            *(double *)(a1 + 1072) = v102;
            *(void *)(a1 + 1080) = v107;
            *(_DWORD *)(a1 + 1088) = v106;
            *(_BYTE *)(a1 + 1092) = 0;
            __int16 v113 = *(_WORD *)buf;
            *(_BYTE *)(a1 + 1095) = buf[2];
            *(_WORD *)(a1 + 1093) = v113;
            *(_DWORD *)(a1 + 1096) = v63;
            unint64_t v114 = *(void *)(a1 + 288) + *(void *)(a1 + 280) - 1LL;
            unint64_t v115 = *(void *)(*(void *)(a1 + 256) + 8 * (v114 / 0x17)) + 176 * (v114 % 0x17);
            *(void *)(v115 + 40) = v134;
            *(void *)(v115 + 48) = v133;
            *(double *)(v115 + 56) = v155;
            *(double *)(v115 + 64) = v158;
            *(double *)(v115 + 72) = v110;
            *(double *)(v115 + 80) = v97;
            *(double *)(v115 + 88) = v96;
            *(void *)(v115 + 96) = v111;
            *(_DWORD *)(v115 + 104) = v112;
            *(double *)(v115 + 112) = v104;
            *(double *)(v115 + 120) = v105;
            *(double *)(v115 + 128) = v101;
            *(double *)(v115 + 136) = v102;
            *(void *)(v115 + 144) = v107;
            *(_DWORD *)(v115 + 152) = v106;
            *(_BYTE *)(v115 + 156) = 0;
            LOWORD(v112) = *(_WORD *)buf;
            *(_BYTE *)(v115 + 159) = buf[2];
            *(_WORD *)(v115 + 15memset(&v6[1], 0, 7) = v112;
            *(_DWORD *)(v115 + 160) = v63;
            unint64_t v116 = *(void *)(a1 + 288) + *(void *)(a1 + 280) - 1LL;
            uint64_t v117 = *(void *)(*(void *)(a1 + 256) + 8 * (v116 / 0x17));
            __int128 v118 = (char *)operator new(0xA0uLL);
            *((void *)v118 + 1) = 0LL;
            __int128 v119 = (unint64_t *)(v118 + 8);
            *((void *)v118 + 2) = 0LL;
            __int128 v120 = (unint64_t *)(v118 + 16);
            *(void *)__int128 v118 = off_10186D518;
            *((void *)v118 + 3) = &off_1018920B8;
            uint64_t v121 = v117 + 176 * (v116 % 0x17);
            __int128 v122 = *(_OWORD *)(v121 + 40);
            __int128 v123 = *(_OWORD *)(v121 + 56);
            __int128 v124 = *(_OWORD *)(v121 + 88);
            *((_OWORD *)v118 + 4) = *(_OWORD *)(v121 + 72);
            *((_OWORD *)v118 + 5) = v124;
            *((_OWORD *)v118 + 2) = v122;
            *((_OWORD *)v118 + 3) = v123;
            __int128 v125 = *(_OWORD *)(v121 + 104);
            __int128 v126 = *(_OWORD *)(v121 + 120);
            __int128 v127 = *(_OWORD *)(v121 + 136);
            *(_OWORD *)(v118 + 140) = *(_OWORD *)(v121 + 148);
            *((_OWORD *)v118 + memset(&v6[1], 0, 7) = v126;
            *((_OWORD *)v118 + 8) = v127;
            *((_OWORD *)v118 + 6) = v125;
            int v161 = v118 + 24;
            BOOL v162 = (std::__shared_weak_count *)v118;
            do
              unint64_t v128 = __ldxr(v120);
            while (__stxr(v128 + 1, v120));
            sub_1004CEAFC(a1 + 296, v2, (uint64_t *)&v161);
            if (v162) {
              std::__shared_weak_count::__release_weak(v162);
            }
            do
              unint64_t v129 = __ldaxr(v119);
            while (__stlxr(v129 - 1, v119));
            if (!v129)
            {
              (*(void (**)(char *))(*(void *)v118 + 16LL))(v118);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v118);
            }

            return 1LL;
          }
        }

        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v81 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "#selection,No valid hypotheses with substantial likelihoods found",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        LOWORD(v165) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,No valid hypotheses with substantial likelihoods found",  &v165,  2);
        int v51 = (uint8_t *)v130;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)",  "%s\n",  v130);
      }

      else
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        unint64_t v60 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "#Error,fusion hypothesis selection, calc_dNdE failed",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        LOWORD(v165) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,fusion hypothesis selection, calc_dNdE failed",  &v165,  2);
        int v51 = (uint8_t *)v61;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)",  "%s\n",  v61);
      }
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      std::__shared_count v56 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "#selection, Failed to normalize likelihoods",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        return 0LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v165) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#selection, Failed to normalize likelihoods",  &v165,  2);
      int v51 = (uint8_t *)v57;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)",  "%s\n",  v57);
    }

void sub_100AB9ED0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

char *sub_100AB9EE8(uint64_t a1, char *__src, _DWORD *a3)
{
  __int128 v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    __int128 v14 = *(_BYTE **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      sub_100007008();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      int v19 = (char *)sub_10000956C(v7, v18);
    }
    else {
      int v19 = 0LL;
    }
    std::stringbuf::string_type __p = v19;
    uint64_t v22 = &v19[4 * v16];
    double v23 = v22;
    int8x16_t v24 = &v19[4 * v18];
    sub_100ABF944(&__p, a3);
    __int128 v4 = sub_10000B0F0((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }

  else
  {
    __int128 v10 = __src + 4;
    __int128 v11 = v6 - 4;
    __int128 v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)__int128 v12 = v13;
      v12 += 4;
    }

    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(_DWORD *)__int128 v4 = *a3;
  }

  return v4;
}

void sub_100ABA050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100ABA088(uint64_t a1)
{
  int v1 = *(double **)(a1 + 240);
  if (v1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = *(void **)(a1 + 240);
    do
    {
      ++v2;
      uint64_t v3 = (void *)*v3;
    }

    while (v3);
    double v4 = 1.0;
    double v5 = 1.0 / (double)v2;
    if (v5 <= 1.0) {
      double v4 = 1.0 / (double)v2;
    }
    if (v5 >= 0.00000001) {
      double v6 = v4;
    }
    else {
      double v6 = 0.00000001;
    }
    double v7 = log(v6);
    unint64_t v8 = v1;
    do
    {
      v8[80] = v6;
      v8[81] = v7;
      unint64_t v8 = *(double **)v8;
    }

    while (v8);
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v9 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "#selection,reset hypotheses Likelihoods is called without any valid hypotheses available",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,reset hypotheses Likelihoods is called without any valid hypotheses available",  v13,  2);
      __int128 v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::resetAllHypothesesLikelihoods()", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  return v1 != 0LL;
}

void sub_100ABA288(uint64_t a1, double *a2, unsigned int *a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  double v5 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = CLMotionActivity::activityTypeToString(*a3);
    double v7 = *a2;
    uint64_t v8 = *((void *)a3 + 10);
    uint64_t v9 = *((void *)a3 + 5);
    int v11 = *a3;
    unsigned int v10 = a3[1];
    *(_DWORD *)buf = 136316674;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v65 = 2050;
    double v66 = v7;
    __int16 v67 = 2050;
    uint64_t v68 = v8;
    __int16 v69 = 2050;
    uint64_t v70 = v9;
    __int16 v71 = 1026;
    int v72 = v11;
    __int16 v73 = 1026;
    unsigned int v74 = v10;
    __int16 v75 = 2080;
    uint64_t v76 = CLMotionActivity::activityConfidenceToString(v10);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#fusion,received motion state,%s,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,timestamp,%{public}.3f,type,%{p ublic}d,confidence,%{public}d,%s",  buf,  0x40u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v34 = qword_101934968;
    uint64_t v35 = CLMotionActivity::activityTypeToString(*a3);
    uint64_t v36 = *(void *)a2;
    uint64_t v37 = *((void *)a3 + 10);
    uint64_t v38 = *((void *)a3 + 5);
    int v40 = *a3;
    unsigned int v39 = a3[1];
    uint64_t v41 = CLMotionActivity::activityConfidenceToString(v39);
    *(_DWORD *)std::__shared_count v56 = 136316674;
    *(void *)&v56[4] = v35;
    *(_WORD *)&v56[12] = 2050;
    *(void *)&v56[14] = v36;
    *(_WORD *)&v56[22] = 2050;
    *(void *)&v56[24] = v37;
    LOWORD(v5memset(&v6[1], 0, 7) = 2050;
    *(void *)((char *)&v57 + 2) = v38;
    WORD5(v5memset(&v6[1], 0, 7) = 1026;
    HIDWORD(v5memset(&v6[1], 0, 7) = v40;
    LOWORD(v58) = 1026;
    *(_DWORD *)((char *)&v58 + 2) = v39;
    WORD3(v58) = 2080;
    *((void *)&v58 + 1) = v41;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v34,  2LL,  "#fusion,received motion state,%s,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,timestamp,%{public}.3f,type,%{p ublic}d,confidence,%{public}d,%s",  v56,  64);
    double v43 = (char *)v42;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)",  "%s\n",  v42);
    if (v43 != buf) {
      free(v43);
    }
  }

  if (!*(_BYTE *)(a1 + 2208))
  {
    __int128 v20 = *((_OWORD *)a3 + 7);
    __int128 v61 = *((_OWORD *)a3 + 6);
    __int128 v62 = v20;
    uint64_t v63 = *((void *)a3 + 16);
    __int128 v21 = *((_OWORD *)a3 + 3);
    __int128 v57 = *((_OWORD *)a3 + 2);
    __int128 v58 = v21;
    __int128 v22 = *((_OWORD *)a3 + 5);
    __int128 v59 = *((_OWORD *)a3 + 4);
    __int128 v60 = v22;
    __int128 v23 = *((_OWORD *)a3 + 1);
    *(_OWORD *)std::__shared_count v56 = *(_OWORD *)a3;
    *(_OWORD *)&v56[16] = v23;
    uint64_t v25 = *(void *)(a1 + 1696);
    __int128 v50 = *(_OWORD *)(v25 + 384);
    sub_100AA44E4(v25, (uint64_t)v51);
    if (*(double *)&v50 < 0.0
      || *a2 >= *(double *)&v50 && *a2 - *(double *)&v50 > 6.0
      || (DWORD2(v50) - 3) > 1)
    {
      if (v51[0] < 0.0) {
        goto LABEL_12;
      }
      BOOL v31 = *a2 - v51[0] <= 6.0 || *a2 < v51[0];
      if (!v31 || v51[1] >= 0.001 || v52 <= 0.3) {
        goto LABEL_12;
      }
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      BOOL v32 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = *(void *)a2;
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v33;
        __int16 v65 = 2050;
        double v66 = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR delta-altitude changes,del ta altitude change,%{public}.2f",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v46 = *(void *)a2;
      *(_DWORD *)uint64_t v53 = 134349312;
      *(void *)&v53[4] = v46;
      __int16 v54 = 2050;
      double v55 = v52;
      LODWORD(v48) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR delta-altitude changes,delta altitude change,%{public}.2f",  v53,  v48);
      double v30 = (char *)v47;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)",  "%s\n",  v47);
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int8x16_t v26 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v27 = *(void *)a2;
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v27;
        __int16 v65 = 1026;
        LODWORD(v66) = DWORD2(v50);
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR/VDR data,IO derived Motion type,%{public}d",  buf,  0x12u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v28 = *(void *)a2;
      *(_DWORD *)uint64_t v53 = 134349312;
      *(void *)&v53[4] = v28;
      __int16 v54 = 1026;
      LODWORD(v55) = DWORD2(v50);
      LODWORD(v48) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct_now,%{public}.3f,Static motion state override to Moving based on IO PDR/VDR data,IO derived Motion type,%{public}d",  v53,  v48);
      double v30 = (char *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)",  "%s\n",  v29);
    }

    if (v30 != buf) {
      free(v30);
    }
LABEL_47:
    *(_DWORD *)std::__shared_count v56 = 3;
LABEL_12:
    sub_100449C00(a1 + 1840, a2, (__int128 *)v56);
    sub_100AA469C(a1, a2);
    return;
  }

  *(void *)&__int128 v50 = 0LL;
  __int128 v12 = (__n128 *)sub_10080E94C();
  sub_10080ED44(v12, (__n128 *)v56);
  if ((sub_1007B8DE8((uint64_t)v56, (double *)&v50) & 1) != 0)
  {
    *(double *)uint64_t v53 = *((double *)a3 + 10) - *(double *)&v50;
    *(void *)buf = v53;
    int v13 = sub_100ABFA50((uint64_t **)(a1 + 2216), (double *)v53, (uint64_t)&unk_1012CF090, (void **)buf);
    *(_OWORD *)(v13 + 5) = *(_OWORD *)a3;
    __int128 v14 = *((_OWORD *)a3 + 1);
    __int128 v15 = *((_OWORD *)a3 + 2);
    __int128 v16 = *((_OWORD *)a3 + 3);
    *(_OWORD *)(v13 + 13) = *((_OWORD *)a3 + 4);
    *(_OWORD *)(v13 + 11) = v16;
    *(_OWORD *)(v13 + 9) = v15;
    *(_OWORD *)(v13 + memset(&v6[1], 0, 7) = v14;
    __int128 v17 = *((_OWORD *)a3 + 5);
    __int128 v18 = *((_OWORD *)a3 + 6);
    __int128 v19 = *((_OWORD *)a3 + 7);
    v13[21] = (uint64_t *)*((void *)a3 + 16);
    *(_OWORD *)(v13 + 19) = v19;
    *(_OWORD *)(v13 + 1memset(&v6[1], 0, 7) = v18;
    *(_OWORD *)(v13 + 15) = v17;
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int8x16_t v24 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "#fusion, cannot compute fMachContinuousToCFAbsoluteOffset_s to convert buffered motion activity sample time, discarding sample",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      *(_WORD *)uint64_t v53 = 0;
      LODWORD(v48) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion, cannot compute fMachContinuousToCFAbsoluteOffset_s to convert buffered motion activity sample time, discarding sample",  v53,  v48);
      BOOL v45 = (char *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }
  }

void sub_100ABAB1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABAB28(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v6 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    int v8 = *(_DWORD *)(a3 + 8);
    int v9 = *(_DWORD *)(a3 + 12);
    *(_DWORD *)buf = 134349568;
    uint64_t v25 = v7;
    __int16 v26 = 1026;
    int v27 = v8;
    __int16 v28 = 1026;
    int v29 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,fitness session update,mct,%{public}.3f,type,%{public}d,predicted,%{public}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v13 = *a2;
    int v14 = *(_DWORD *)(a3 + 8);
    int v15 = *(_DWORD *)(a3 + 12);
    int v18 = 134349568;
    __int128 v19 = v13;
    __int16 v20 = 1026;
    int v21 = v14;
    __int16 v22 = 1026;
    int v23 = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,fitness session update,mct,%{public}.3f,type,%{public}d,predicted,%{public}d",  &v18,  24);
    __int128 v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  BOOL v10 = *(double *)a3 <= 0.0;
  int v11 = *(_DWORD *)(a3 + 8);
  if ((v10 | (v11 == 71) ^ (v11 == 0)) != 1 || v11 == 0)
  {
    sub_10044A458(a1 + 1840, a2, (__int128 *)a3);
    sub_100AA469C(a1, (double *)a2);
  }

void sub_100ABAD8C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100ABAD98(uint64_t a1, double *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v6 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    BOOL v8 = sub_100ECF944((void *)a3);
    BOOL v9 = sub_100ECF4A4(a3, *a2, 6.0);
    int v10 = *(_DWORD *)a3;
    BOOL v11 = *(_DWORD *)a3 == 0;
    BOOL v12 = *(_DWORD *)a3 == 3;
    *(_DWORD *)buf = 134350336;
    *(double *)&uint8_t buf[4] = v7;
    __int16 v41 = 1026;
    BOOL v42 = v8;
    __int16 v43 = 1026;
    BOOL v44 = v9;
    __int16 v45 = 1026;
    BOOL v46 = v11;
    __int16 v47 = 1026;
    BOOL v48 = v12;
    __int16 v49 = 1026;
    BOOL v50 = v10 == 1;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,received MapsRouteHintData,mct,%{public}.3f,goodConnectivity,%{public}d,timedout,%{public}d,isPedestrian,% {public}d,isBicycle,%{public}d,isVehicular,%{public}d",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v19 = qword_101934968;
    double v20 = *a2;
    BOOL v21 = sub_100ECF944((void *)a3);
    BOOL v22 = sub_100ECF4A4(a3, *a2, 6.0);
    int v23 = *(_DWORD *)a3;
    BOOL v24 = *(_DWORD *)a3 == 0;
    BOOL v25 = *(_DWORD *)a3 == 3;
    unsigned int v28 = 134350336;
    double v29 = v20;
    __int16 v30 = 1026;
    BOOL v31 = v21;
    __int16 v32 = 1026;
    BOOL v33 = v22;
    __int16 v34 = 1026;
    BOOL v35 = v24;
    __int16 v36 = 1026;
    BOOL v37 = v25;
    __int16 v38 = 1026;
    BOOL v39 = v23 == 1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  2LL,  "#fusion,received MapsRouteHintData,mct,%{public}.3f,goodConnectivity,%{public}d,timedout,%{public}d,isPedestrian,% {public}d,isBicycle,%{public}d,isVehicular,%{public}d",  COERCE_DOUBLE(134350336LL),  &v28,  42);
    int v27 = (char *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::routeHintUpdate(const CFTimeInterval &, const CLMapsRouteHintData &)",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  *(void *)(a1 + 1968) = *(void *)a3;
  if (a1 + 1968 != a3) {
    sub_1005F6B84( (char *)(a1 + 1976),  *(char **)(a3 + 8),  *(void *)(a3 + 16),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  }
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a3 + 32);
  if (!sub_100ECF4A4(a3, *a2, 6.0))
  {
    int v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 == 3)
    {
      if (*(_DWORD *)(a1 + 1912) != 6)
      {
        *(_DWORD *)(a1 + 1912) = 6;
        double v15 = *a2;
        unsigned int v28 = 6;
        *(void *)buf = &v28;
        __int128 v16 = sub_10044BD34((uint64_t **)(a1 + 1888), &v28, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        goto LABEL_21;
      }
    }

    else if (v13 == 1)
    {
      int v17 = *(_DWORD *)(a1 + 1912);
      if ((v17 - 1) < 5 || v17 == 10)
      {
        *(_DWORD *)(a1 + 1912) = 7;
        double v15 = *a2;
        unsigned int v28 = 7;
        *(void *)buf = &v28;
        __int128 v16 = sub_10044BD34((uint64_t **)(a1 + 1888), &v28, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        goto LABEL_21;
      }
    }

    else if (!v13)
    {
      unsigned int v14 = *(_DWORD *)(a1 + 1912);
      if (v14 <= 0xA && ((1 << v14) & 0x7C7) != 0)
      {
        *(_DWORD *)(a1 + 1912) = 3;
        double v15 = *a2;
        unsigned int v28 = 3;
        *(void *)buf = &v28;
        __int128 v16 = sub_10044BD34((uint64_t **)(a1 + 1888), &v28, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
LABEL_21:
        *((double *)v16 + 5) = v15;
      }
    }
  }

  return sub_100AA469C(a1, a2);
}

void sub_100ABB1AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABB1B8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v6 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *((void *)a3 + 2);
    uint64_t v10 = *((void *)a3 + 3);
    uint64_t v11 = *((void *)a3 + 4);
    *(_DWORD *)buf = 134350080;
    uint64_t v47 = v7;
    __int16 v48 = 2050;
    uint64_t v49 = v8;
    __int16 v50 = 1026;
    *(_DWORD *)int v51 = v9;
    *(_WORD *)&double v51[4] = 1026;
    *(_DWORD *)&v51[6] = v10;
    LOWORD(v52[0]) = 2050;
    *(void *)((char *)v52 + 2) = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,received outdoor update,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,type,%{public}d,confidence,%{pub lic}d,prob,%{public}.2f",  buf,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v18 = *a2;
    uint64_t v19 = *(void *)a3;
    uint64_t v20 = *((void *)a3 + 2);
    uint64_t v21 = *((void *)a3 + 3);
    uint64_t v22 = *((void *)a3 + 4);
    *(_DWORD *)__int16 v38 = 134350080;
    *(void *)&v38[4] = v18;
    *(_WORD *)BOOL v39 = 2050;
    *(void *)&v39[2] = v19;
    __int16 v40 = 1026;
    int v41 = v20;
    __int16 v42 = 1026;
    int v43 = v21;
    __int16 v44 = 2050;
    uint64_t v45 = v22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,received outdoor update,mct_now,%{public}.3f,start_time_cfat,%{public}.3f,type,%{public}d,confidence,%{pub lic}d,prob,%{public}.2f",  v38,  44);
    BOOL v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::indoorOutdoorUpdate(const CFTimeInterval &, const CLOutdoor_Type::OutdoorUpdate &)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
  }

  if (*((void *)a3 + 2))
  {
    BOOL v12 = (CLMotionActivity *)sub_100ABB664((void *)(a1 + 2016), a2, a3);
    *(void *)__int16 v38 = 0xBFF0000000000000LL;
    CLMotionActivity::getInit(v12);
    if (!*(_BYTE *)(a1 + 2208)
      && sub_10044A3DC((void *)(a1 + 1840), v38)
      && *(double *)v38 > 0.0
      && (*(double *)v38 < 0.0 || *(double *)a2 >= *(double *)v38 && *(double *)a2 - *(double *)v38 > 2.56))
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v13 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *a2;
        uint64_t v15 = *(void *)v38;
        uint64_t v16 = CLMotionActivity::activityTypeToString(*(unsigned int *)&v38[8]);
        uint64_t v17 = CLMotionActivity::activityConfidenceToString(*(unsigned int *)v39);
        *(_DWORD *)buf = 134349826;
        uint64_t v47 = v14;
        __int16 v48 = 2050;
        uint64_t v49 = v15;
        __int16 v50 = 2080;
        *(void *)int v51 = v16;
        *(_WORD *)&v51[8] = 2080;
        v52[0] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#fusion,re-using last known motion state,mct_now,%{public}.3f,lastMotionState_mct,%{public}.3f,type,%s,confidence,%s",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v25 = qword_101934968;
        uint64_t v26 = *a2;
        int v30 = 134349826;
        uint64_t v31 = v26;
        __int16 v32 = 2050;
        uint64_t v33 = *(void *)v38;
        __int16 v34 = 2080;
        uint64_t v35 = CLMotionActivity::activityTypeToString(*(unsigned int *)&v38[8]);
        __int16 v36 = 2080;
        uint64_t v37 = CLMotionActivity::activityConfidenceToString(*(unsigned int *)v39);
        LODWORD(v29) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  2LL,  "#fusion,re-using last known motion state,mct_now,%{public}.3f,lastMotionState_mct,%{public}.3f,type,%s,confidence,%s",  &v30,  v29);
        unsigned int v28 = (uint8_t *)v27;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::indoorOutdoorUpdate(const CFTimeInterval &, const CLOutdoor_Type::OutdoorUpdate &)",  "%s\n",  v27);
        if (v28 != buf) {
          free(v28);
        }
      }

      *(void *)__int16 v38 = *a2;
      sub_10044A310((void *)(a1 + 1840), (uint64_t)v38);
      sub_100AA469C(a1, (double *)a2);
    }
  }

void sub_100ABB658(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100ABB664(void *a1, uint64_t *a2, __int128 *a3)
{
  unint64_t v6 = a1[5];
  if (v6 >= 0xB)
  {
    ++a1[4];
    a1[5] = v6 - 1;
    sub_1002D6E20((uint64_t)a1, 1);
  }

  uint64_t v9 = *a2;
  __int128 v7 = a3[1];
  __int128 v10 = *a3;
  __int128 v11 = v7;
  __int128 v12 = a3[2];
  uint64_t v13 = *((void *)a3 + 6);
  return sub_100ABEBE4(a1, (__int128 *)&v9);
}

void sub_100ABB6F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v17 = a3;
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  unint64_t v6 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    __int128 v7 = (a3 - 1) > 5 ? "Unavailable" : off_10186D558[(int)a3 - 1];
    uint64_t v8 = *a2;
    sub_1010DDBC0(__p, v7);
    uint64_t v9 = SBYTE3(v22) >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 134349826;
    uint64_t v26 = v8;
    __int16 v27 = 1026;
    int v28 = a3;
    __int16 v29 = 2082;
    int v30 = v9;
    __int16 v31 = 1026;
    int v32 = HIDWORD(a3);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d",  buf,  0x22u);
    if (SBYTE3(v22) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v10 = qword_101934968;
    uint64_t v11 = *a2;
    sub_1009FE16C(a3, v15);
    if (v16 >= 0) {
      __int128 v12 = v15;
    }
    else {
      __int128 v12 = (void **)v15[0];
    }
    *(_DWORD *)std::stringbuf::string_type __p = 134349826;
    *(void *)&__p[4] = v11;
    __int16 v19 = 1026;
    int v20 = a3;
    __int16 v21 = 2082;
    uint64_t v22 = v12;
    __int16 v23 = 1026;
    int v24 = HIDWORD(a3);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  2LL,  "#fusion,mct,%{public}.3f,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d",  __p,  34);
    uint64_t v14 = v13;
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::signalEnvironmentUpdate(const CFTimeInterval &, const CLSignalEnvironmentProvider_Type::Si gnalEnvironmentInfo)",  "%s\n",  v14);
  }

  sub_10069EE70(a1 + 2272, (int *)&v17);
  if ((_DWORD)v17) {
    *(void *)(a1 + 2064) = v17;
  }
}

void sub_100ABB9B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABB9C4(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  unint64_t v6 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *a2;
    *(_DWORD *)buf = 134349312;
    uint64_t v16 = v7;
    __int16 v17 = 1026;
    int v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f, change in locationApp foreground status,isForeGround,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v8 = *a2;
    int v11 = 134349312;
    uint64_t v12 = v8;
    __int16 v13 = 1026;
    int v14 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f, change in locationApp foreground status,isForeGround,%{public}d",  &v11,  18);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::locationAppForegroundStatusUpdate(const CFTimeInterval &, BOOL)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  *(_BYTE *)(a1 + 2072) = a3;
}

void sub_100ABBBB4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100ABBBC0(uint64_t a1, double *a2, int a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  unint64_t v6 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    *(_DWORD *)buf = 134349312;
    *(double *)&uint8_t buf[4] = v7;
    __int16 v20 = 1026;
    int v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,hasAirborneClient,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v12 = *(void *)a2;
    unsigned int v15 = 134349312;
    uint64_t v16 = v12;
    __int16 v17 = 1026;
    int v18 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct,%{public}.3f,hasAirborneClient,%{public}d",  &v15,  18);
    int v14 = (char *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void cllcf::CLLCFusion::airborneClientUpdate(const CFTimeInterval &, BOOL)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  *(_BYTE *)(a1 + 2073) = a3;
  unsigned int v8 = *(_DWORD *)(a1 + 1912);
  if (a3)
  {
    if (v8 >= 8 && v8 != 10) {
      return sub_100AA469C(a1, a2);
    }
    *(_DWORD *)(a1 + 1912) = 8;
    double v9 = *a2;
    unsigned int v15 = 8;
    *(void *)buf = &v15;
    uint64_t v10 = sub_10044BD34((uint64_t **)(a1 + 1888), &v15, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
LABEL_11:
    *((double *)v10 + 5) = v9;
    return sub_100AA469C(a1, a2);
  }

  if (v8 >= 8 && v8 != 10)
  {
    *(_DWORD *)(a1 + 1912) = 0;
    double v9 = *a2;
    unsigned int v15 = 0;
    *(void *)buf = &v15;
    uint64_t v10 = sub_10044BD34((uint64_t **)(a1 + 1888), &v15, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
    goto LABEL_11;
  }

  return sub_100AA469C(a1, a2);
}

void sub_100ABBE5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABBE68(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  *(_BYTE *)(a1 + 2074) = a2;
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  double v4 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    double v6 = sub_10080EB58(v5, buf);
    *(_DWORD *)buf = 134349312;
    double v15 = v6;
    __int16 v16 = 1026;
    int v17 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#fusion,mct,%{public}.3f,hasFitnessClient,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v7 = qword_101934968;
    int v10 = 134349312;
    double v11 = sub_1003713F0();
    __int16 v12 = 1026;
    int v13 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  2LL,  "#fusion,mct,%{public}.3f,hasFitnessClient,%{public}d",  &v10,  18);
    double v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::fitnessClientUpdate(BOOL)", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

void sub_100ABC060(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABC06C(uint64_t a1, char a2)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  *(_BYTE *)(a1 + 2096) = a2;
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  double v4 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 2096);
    uint64_t v6 = *(void *)(a1 + 2104);
    uint64_t v7 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    double v8 = sub_10080EB58(v7, buf);
    uint64_t v9 = sub_10080E94C();
    double v10 = sub_10080EF30(v9);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)BOOL v46 = v5;
    *(_WORD *)&v46[4] = 2050;
    *(void *)&v46[6] = v6;
    *(_WORD *)&v46[14] = 2050;
    *(double *)&v46[16] = v8;
    *(_WORD *)&v46[24] = 2050;
    *(double *)&v46[26] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#fusion, update WiFi AP association state,associated,%{public}d,last association time mct,%{public}.3f,now_mct,%{p ublic}.3f,propagation_us,%{public}.3f",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v16 = qword_101934968;
    int v17 = *(unsigned __int8 *)(a1 + 2096);
    uint64_t v18 = *(void *)(a1 + 2104);
    double v19 = sub_1003713F0();
    uint64_t v20 = sub_10080E94C();
    LODWORD(v41) = 67240960;
    HIDWORD(v41) = v17;
    *(_WORD *)__int16 v42 = 2050;
    *(void *)&v42[2] = v18;
    __int16 v43 = 2050;
    *(double *)__int16 v44 = v19;
    *(_WORD *)&v44[8] = 2050;
    *(void *)&v44[10] = sub_10080EF30(v20);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "#fusion, update WiFi AP association state,associated,%{public}d,last association time mct,%{public}.3f,now_mct,%{p ublic}.3f,propagation_us,%{public}.3f",  &v41,  38);
    uint64_t v22 = (uint8_t *)v21;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::associatedWiFiAPStateUpdate(BOOL)", "%s\n", v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  *(void *)(a1 + 2128) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 2112) = 0u;
  if (*(_BYTE *)(a1 + 2096))
  {
    uint64_t v11 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    *(double *)(a1 + 2104) = sub_10080EB58(v11, buf);
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a1 + 992);
    sub_10036479C(*(void *)(a1 + 1696) + 232LL);
  }

  else
  {
    sub_100AB7520(*(void *)(a1 + 1696), (uint64_t)&v41);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    __int16 v12 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = sub_10080E94C();
      *(_DWORD *)buf = 1;
      double v14 = sub_10080EB58(v13, buf);
      double v15 = *(double *)(a1 + 2104);
      *(_DWORD *)buf = 134350336;
      *(double *)BOOL v46 = v14;
      *(_WORD *)&v46[8] = 2050;
      *(double *)&v46[10] = v15;
      *(_WORD *)&v46[18] = 2050;
      *(void *)&v46[20] = *(void *)v42;
      *(_WORD *)&v46[28] = 2050;
      *(void *)&v46[30] = *(void *)&v44[4];
      __int16 v47 = 2050;
      double v48 = v41;
      __int16 v49 = 2050;
      double v50 = v41 - v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#fusion,now_mct,%{public}.3f,WiFi AP disassociates,last association time mct,%{public}.3f,IODistanceMoved_m,%{pu blic}.1f,IODistanceMovedInterval_s,%{public}.1f,lastIOTimestamp_mct,%{public}.3f,IOAgeSinceAssociated_s,%{public}.2f",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v23 = qword_101934968;
      double v24 = sub_1003713F0();
      double v25 = *(double *)(a1 + 2104);
      int v29 = 134350336;
      double v30 = v24;
      __int16 v31 = 2050;
      double v32 = v25;
      __int16 v33 = 2050;
      uint64_t v34 = *(void *)v42;
      __int16 v35 = 2050;
      uint64_t v36 = *(void *)&v44[4];
      __int16 v37 = 2050;
      double v38 = v41;
      __int16 v39 = 2050;
      double v40 = v41 - v25;
      LODWORD(v28) = 62;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "#fusion,now_mct,%{public}.3f,WiFi AP disassociates,last association time mct,%{public}.3f,IODistanceMoved_m,%{pu blic}.1f,IODistanceMovedInterval_s,%{public}.1f,lastIOTimestamp_mct,%{public}.3f,IOAgeSinceAssociated_s,%{public}.2f",  &v29,  v28);
      __int16 v27 = (uint8_t *)v26;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::associatedWiFiAPStateUpdate(BOOL)", "%s\n", v26);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

void sub_100ABC4F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABC4FC(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  *(_BYTE *)(a1 + 2075) = a2;
  uint64_t v4 = sub_10080E94C();
  *(_DWORD *)buf = 1;
  *(double *)(a1 + 2080) = sub_10080EB58(v4, buf);
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  int v5 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 2080);
    int v7 = *(unsigned __int8 *)(a1 + 2075);
    int v8 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)buf = 134349568;
    uint64_t v21 = v6;
    __int16 v22 = 1026;
    int v23 = v7;
    __int16 v24 = 1026;
    int v25 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "#fusion,mct_now,%{public}.3f,IsInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v9 = *(void *)(a1 + 2080);
    int v10 = *(unsigned __int8 *)(a1 + 2075);
    int v11 = *(unsigned __int8 *)(a1 + 2076);
    int v14 = 134349568;
    uint64_t v15 = v9;
    __int16 v16 = 1026;
    int v17 = v10;
    __int16 v18 = 1026;
    int v19 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,mct_now,%{public}.3f,IsInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d",  &v14,  24);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::feedInAVisit(const BOOL)", "%s\n", v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  *(_BYTE *)(a1 + 2076) = 0;
  sub_10069E7B8(a1 + 2272, a2);
}

void sub_100ABC728(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABC734(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v2 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    double v4 = sub_10080EB58(v3, buf);
    uint64_t v5 = *(void *)(a1 + 2080);
    int v6 = *(unsigned __int8 *)(a1 + 2075);
    int v7 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)buf = 134349824;
    double v24 = v4;
    __int16 v25 = 2050;
    uint64_t v26 = v5;
    __int16 v27 = 1026;
    int v28 = v6;
    __int16 v29 = 1026;
    int v30 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#fusion,mct_now,%{public}.3f,received LikelyOutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d ,wasLikelyOutOfAVisit,%{public}d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v8 = qword_101934968;
    double v9 = sub_1003713F0();
    uint64_t v10 = *(void *)(a1 + 2080);
    int v11 = *(unsigned __int8 *)(a1 + 2075);
    int v12 = *(unsigned __int8 *)(a1 + 2076);
    int v15 = 134349824;
    double v16 = v9;
    __int16 v17 = 2050;
    uint64_t v18 = v10;
    __int16 v19 = 1026;
    int v20 = v11;
    __int16 v21 = 1026;
    int v22 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  2LL,  "#fusion,mct_now,%{public}.3f,received LikelyOutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d ,wasLikelyOutOfAVisit,%{public}d",  &v15,  34);
    int v14 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::feedLikelyOutOfAVisit()", "%s\n", v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  *(_BYTE *)(a1 + 2076) = 1;
  sub_10069E988(a1 + 2272);
}

void sub_100ABC974(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABC980(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100AA29E8(a1);
  }
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v2 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    double v4 = sub_10080EB58(v3, buf);
    uint64_t v5 = *(void *)(a1 + 2080);
    int v6 = *(unsigned __int8 *)(a1 + 2075);
    int v7 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)buf = 134349824;
    double v24 = v4;
    __int16 v25 = 2050;
    uint64_t v26 = v5;
    __int16 v27 = 1026;
    int v28 = v6;
    __int16 v29 = 1026;
    int v30 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#fusion,mct_now,%{public}.3f,received OutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLi kelyOutOfAVisit,%{public}d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v8 = qword_101934968;
    double v9 = sub_1003713F0();
    uint64_t v10 = *(void *)(a1 + 2080);
    int v11 = *(unsigned __int8 *)(a1 + 2075);
    int v12 = *(unsigned __int8 *)(a1 + 2076);
    int v15 = 134349824;
    double v16 = v9;
    __int16 v17 = 2050;
    uint64_t v18 = v10;
    __int16 v19 = 1026;
    int v20 = v11;
    __int16 v21 = 1026;
    int v22 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  2LL,  "#fusion,mct_now,%{public}.3f,received OutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLi kelyOutOfAVisit,%{public}d",  &v15,  34);
    int v14 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void cllcf::CLLCFusion::feedOutOfAVisit()", "%s\n", v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  *(_WORD *)(a1 + 2075) = 0;
  sub_10069ECAC(a1 + 2272);
}

void sub_100ABCBC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

double sub_100ABCBCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100D2DBDC( (double *)(a1 + 1800),  *(double *)(a2 + 24),  *(double *)(a2 + 32),  *(double *)(a3 + 24),  *(double *)(a3 + 32),  0.0);
}

BOOL sub_100ABCBF4(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v30 = 0.0;
  double v31 = 0.0;
  int v7 = (double *)(a1 + 1800);
  if (a2[7] <= 0.0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = a2;
  }
  if ((sub_100D2E600(v7, &v31, &v30, a2[3], v8[6]) & 1) != 0)
  {
    double v13 = a2[3];
    *(double *)v10.i64 = a2[4] * 0.0174532925;
    double v14 = a3[3];
    *(double *)v12.i64 = a3[4] * 0.0174532925;
    v11.i64[0] = 0x400921FB54442D18LL;
    int8x16_t v27 = v11;
    if (fabs(*(double *)v10.i64) > 3.14159265)
    {
      v15.f64[0] = NAN;
      v15.f64[1] = NAN;
      double v23 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v15), v11, v10).i64;
      int8x16_t v25 = v12;
      *(double *)v9.i64 = fmod(*(double *)v10.i64 + v23, 6.28318531);
      int8x16_t v12 = v25;
      int8x16_t v11 = v27;
      *(double *)v10.i64 = *(double *)v9.i64 - v23;
    }

    if (fabs(*(double *)v12.i64) > *(double *)v11.i64)
    {
      v16.f64[0] = NAN;
      v16.f64[1] = NAN;
      double v24 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v16), v11, v12).i64;
      uint64_t v26 = v10.i64[0];
      *(double *)v9.i64 = fmod(*(double *)v12.i64 + v24, 6.28318531);
      v10.i64[0] = v26;
      int8x16_t v11 = v27;
      *(double *)v12.i64 = *(double *)v9.i64 - v24;
    }

    *(double *)v9.i64 = *(double *)v10.i64 - *(double *)v12.i64;
    if (vabdd_f64(*(double *)v10.i64, *(double *)v12.i64) > *(double *)v11.i64)
    {
      v17.f64[0] = NAN;
      v17.f64[1] = NAN;
      double v28 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v17), v11, v9).i64;
      *(double *)v9.i64 = fmod(*(double *)v9.i64 + v28, 6.28318531) - v28;
    }

    double v18 = a2[5] * a2[5] * 0.5 + a3[5] * a3[5] * 0.5;
    if (v18 != 0.0)
    {
      *a4 = sqrt( 1.0 / v18 * ((v13 - v14) * 0.0174532925 * v31 * ((v13 - v14) * 0.0174532925 * v31))
            + *(double *)v9.i64
            * 57.2957795
            * 0.0174532925
            * v30
            * (*(double *)v9.i64
             * 57.2957795
             * 0.0174532925
             * v30)
            * (1.0
             / v18));
      return 1LL;
    }

    return 0LL;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  int v20 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Error, calc_dNdE failed.", buf, 2u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    v29[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error, calc_dNdE failed.",  v29,  2);
    int v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::computeInterHypothesisMahalanobisDistance(const LCFusionProviderLocation &, const LCFusion ProviderLocation &, double &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
    return 0LL;
  }

  return result;
}

void sub_100ABCF08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_100ABCF14(uint64_t a1, _DWORD *a2, char **a3, double **a4)
{
  *a2 = 0;
  a3[1] = *a3;
  a4[1] = *a4;
  double v4 = *(uint64_t **)(a1 + 240);
  if (v4)
  {
    uint64_t v39 = (uint64_t)(a3 + 2);
    uint64_t v40 = (uint64_t)(a4 + 2);
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v43 = _Q0;
    do
    {
      double v55 = &off_1018920B8;
      __int128 v56 = v43;
      __int128 v57 = xmmword_1012E0070;
      __int128 v58 = xmmword_1012E0070;
      __int128 v59 = v43;
      __int128 v60 = v43;
      unint64_t v61 = 0xBFF0000000000000LL;
      int v62 = 0;
      char v63 = 0;
      int v64 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        uint64_t v12 = v4[6];
        if (v12)
        {
          if (*(_BYTE *)(*(void *)(v4[2] + 8 * ((v12 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v12 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            if (sub_1004CE2F8((uint64_t)(v4 + 7), (uint64_t)&v55))
            {
              if (*(double *)&v57 > 0.0)
              {
                ++*a2;
                double v13 = (uint64_t *)*v4;
                if (*v4)
                {
                  do
                  {
                    while (1)
                    {
                      uint64_t v45 = &off_1018920B8;
                      __int128 v46 = v43;
                      __int128 v47 = xmmword_1012E0070;
                      __int128 v48 = xmmword_1012E0070;
                      __int128 v49 = v43;
                      __int128 v50 = v43;
                      unint64_t v51 = 0xBFF0000000000000LL;
                      int v52 = 0;
                      char v53 = 0;
                      int v54 = 0;
                      if (*((_DWORD *)v13 + 167))
                      {
                        uint64_t v14 = v13[6];
                        if (v14)
                        {
                          if (*(_BYTE *)(*(void *)(v13[2] + 8 * ((v14 + v13[5] - 1) / 0x17uLL))
                                        + 176 * ((v14 + v13[5] - 1) % 0x17uLL)
                                        + 168)
                            && sub_1004CE2F8((uint64_t)(v13 + 7), (uint64_t)&v45)
                            && *(double *)&v47 > 0.0)
                          {
                            break;
                          }
                        }
                      }

                      double v13 = (uint64_t *)*v13;
                      if (!v13) {
                        goto LABEL_51;
                      }
                    }

                    double v15 = sub_100ABCBCC(a1, (uint64_t)&v55, (uint64_t)&v45);
                    double v16 = v15;
                    double v44 = v15;
                    double v18 = a4[1];
                    unint64_t v17 = (unint64_t)a4[2];
                    if ((unint64_t)v18 >= v17)
                    {
                      int v20 = *a4;
                      uint64_t v21 = v18 - *a4;
                      unint64_t v22 = v21 + 1;
                      uint64_t v23 = v17 - (void)v20;
                      if (v23 >> 2 > v22) {
                        unint64_t v22 = v23 >> 2;
                      }
                      else {
                        unint64_t v24 = v22;
                      }
                      if (v24)
                      {
                        int8x16_t v25 = (char *)sub_1000071BC(v40, v24);
                        int v20 = *a4;
                        double v18 = a4[1];
                      }

                      else
                      {
                        int8x16_t v25 = 0LL;
                      }

                      uint64_t v26 = (double *)&v25[8 * v21];
                      *uint64_t v26 = v16;
                      __int16 v19 = v26 + 1;
                      while (v18 != v20)
                      {
                        uint64_t v27 = *((void *)v18-- - 1);
                        *((void *)v26-- - 1) = v27;
                      }

                      *a4 = v26;
                      a4[1] = v19;
                      a4[2] = (double *)&v25[8 * v24];
                      if (v20) {
                        operator delete(v20);
                      }
                    }

                    else
                    {
                      double *v18 = v15;
                      __int16 v19 = v18 + 1;
                    }

                    a4[1] = v19;
                    if (sub_100ABCBF4(a1, (double *)&v55, (double *)&v45, &v44))
                    {
                      __int16 v29 = a3[1];
                      unint64_t v28 = (unint64_t)a3[2];
                      if ((unint64_t)v29 >= v28)
                      {
                        double v31 = *a3;
                        uint64_t v32 = (v29 - *a3) >> 3;
                        unint64_t v33 = v32 + 1;
                        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_53:
                        }
                          sub_100007008();
                        uint64_t v34 = v28 - (void)v31;
                        if (v34 >> 2 > v33) {
                          unint64_t v33 = v34 >> 2;
                        }
                        else {
                          unint64_t v35 = v33;
                        }
                        if (v35)
                        {
                          uint64_t v36 = (char *)sub_1000071BC(v39, v35);
                          double v31 = *a3;
                          __int16 v29 = a3[1];
                        }

                        else
                        {
                          uint64_t v36 = 0LL;
                        }

                        __int16 v37 = &v36[8 * v32];
                        *(double *)__int16 v37 = v44;
                        double v30 = v37 + 8;
                        while (v29 != v31)
                        {
                          uint64_t v38 = *((void *)v29 - 1);
                          v29 -= 8;
                          *((void *)v37 - 1) = v38;
                          v37 -= 8;
                        }

                        *a3 = v37;
                        a3[1] = v30;
                        a3[2] = &v36[8 * v35];
                        if (v31) {
                          operator delete(v31);
                        }
                      }

                      else
                      {
                        *(double *)__int16 v29 = v44;
                        double v30 = v29 + 8;
                      }

                      a3[1] = v30;
                    }

                    double v13 = (uint64_t *)*v13;
                  }

                  while (v13);
                }
              }
            }
          }
        }
      }

void sub_100ABD2C4(uint64_t a1, double *a2, char **a3, double **a4)
{
  a3[1] = *a3;
  a4[1] = *a4;
  double v4 = *(uint64_t **)(a1 + 240);
  if (v4 && a2[5] > 0.0)
  {
    uint64_t v41 = (uint64_t)(a3 + 2);
    uint64_t v42 = (uint64_t)(a4 + 2);
    __asm { FMOV            V1.2D, #-1.0 }

    __int128 v14 = xmmword_1012E0070;
    __int128 v43 = _Q1;
    do
    {
      uint64_t v45 = &off_1018920B8;
      __int128 v46 = _Q1;
      __int128 v47 = v14;
      __int128 v48 = v14;
      __int128 v49 = _Q1;
      __int128 v50 = _Q1;
      unint64_t v51 = 0xBFF0000000000000LL;
      int v52 = 0;
      char v53 = 0;
      int v54 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        uint64_t v15 = v4[6];
        if (v15)
        {
          if (*(_BYTE *)(*(void *)(v4[2] + 8 * ((v15 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v15 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            int v16 = sub_1004CE2F8((uint64_t)(v4 + 7), (uint64_t)&v45);
            __int128 v14 = xmmword_1012E0070;
            _Q1 = v43;
            if (v16)
            {
              if (*(double *)&v47 > 0.0)
              {
                double v44 = 0.0;
                if (sub_100ABCBF4(a1, a2, (double *)&v45, &v44))
                {
                  double v18 = a3[1];
                  unint64_t v17 = (unint64_t)a3[2];
                  if ((unint64_t)v18 >= v17)
                  {
                    int v20 = *a3;
                    uint64_t v21 = (v18 - *a3) >> 3;
                    unint64_t v22 = v21 + 1;
                    uint64_t v23 = v17 - (void)v20;
                    if (v23 >> 2 > v22) {
                      unint64_t v22 = v23 >> 2;
                    }
                    else {
                      unint64_t v24 = v22;
                    }
                    if (v24)
                    {
                      int8x16_t v25 = (char *)sub_1000071BC(v41, v24);
                      int v20 = *a3;
                      double v18 = a3[1];
                    }

                    else
                    {
                      int8x16_t v25 = 0LL;
                    }

                    uint64_t v26 = &v25[8 * v21];
                    *(double *)uint64_t v26 = v44;
                    __int16 v19 = v26 + 8;
                    while (v18 != v20)
                    {
                      uint64_t v27 = *((void *)v18 - 1);
                      v18 -= 8;
                      *((void *)v26 - 1) = v27;
                      v26 -= 8;
                    }

                    *a3 = v26;
                    a3[1] = v19;
                    a3[2] = &v25[8 * v24];
                    if (v20) {
                      operator delete(v20);
                    }
                  }

                  else
                  {
                    *(double *)double v18 = v44;
                    __int16 v19 = v18 + 8;
                  }

                  a3[1] = v19;
                }

                double v28 = sub_100ABCBCC(a1, (uint64_t)a2, (uint64_t)&v45);
                double v29 = v28;
                double v44 = v28;
                double v31 = a4[1];
                unint64_t v30 = (unint64_t)a4[2];
                if ((unint64_t)v31 >= v30)
                {
                  unint64_t v33 = *a4;
                  uint64_t v34 = v31 - *a4;
                  unint64_t v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 61) {
LABEL_46:
                  }
                    sub_100007008();
                  uint64_t v36 = v30 - (void)v33;
                  if (v36 >> 2 > v35) {
                    unint64_t v35 = v36 >> 2;
                  }
                  else {
                    unint64_t v37 = v35;
                  }
                  if (v37)
                  {
                    uint64_t v38 = (char *)sub_1000071BC(v42, v37);
                    unint64_t v33 = *a4;
                    double v31 = a4[1];
                  }

                  else
                  {
                    uint64_t v38 = 0LL;
                  }

                  uint64_t v39 = (double *)&v38[8 * v34];
                  *uint64_t v39 = v29;
                  uint64_t v32 = v39 + 1;
                  while (v31 != v33)
                  {
                    uint64_t v40 = *((void *)v31-- - 1);
                    *((void *)v39-- - 1) = v40;
                  }

                  *a4 = v39;
                  a4[1] = v32;
                  a4[2] = (double *)&v38[8 * v37];
                  if (v33) {
                    operator delete(v33);
                  }
                }

                else
                {
                  *double v31 = v28;
                  uint64_t v32 = v31 + 1;
                }

                __int128 v14 = xmmword_1012E0070;
                _Q1 = v43;
                a4[1] = v32;
              }
            }
          }
        }
      }

      double v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

void sub_100ABD5C4(uint64_t a1, double *a2, char **a3, char **a4)
{
  a3[1] = *a3;
  a4[1] = *a4;
  double v4 = *(uint64_t **)(a1 + 240);
  if (v4 && a2[5] > 0.0)
  {
    uint64_t v46 = (uint64_t)(a3 + 2);
    uint64_t v47 = (uint64_t)(a4 + 2);
    __asm { FMOV            V1.2D, #-1.0 }

    __int128 v14 = xmmword_1012E0070;
    __int128 v48 = _Q1;
    do
    {
      __int128 v50 = &off_1018920B8;
      __int128 v51 = _Q1;
      __int128 v52 = v14;
      __int128 v53 = v14;
      __int128 v54 = _Q1;
      __int128 v55 = _Q1;
      unint64_t v56 = 0xBFF0000000000000LL;
      int v57 = 0;
      char v58 = 0;
      int v59 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        uint64_t v15 = v4[6];
        if (v15)
        {
          if (*(_BYTE *)(*(void *)(v4[2] + 8 * ((v15 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v15 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            int v16 = sub_1004CE2F8((uint64_t)(v4 + 7), (uint64_t)&v50);
            __int128 v14 = xmmword_1012E0070;
            _Q1 = v48;
            if (v16)
            {
              if (*(double *)&v52 > 0.0)
              {
                double v49 = 0.0;
                if (sub_100ABCBF4(a1, a2, (double *)&v50, &v49))
                {
                  double v17 = v49;
                  uint64_t v18 = v52;
                  int v20 = a3[1];
                  unint64_t v19 = (unint64_t)a3[2];
                  if ((unint64_t)v20 >= v19)
                  {
                    uint64_t v22 = (v20 - *a3) >> 4;
                    unint64_t v23 = v22 + 1;
                    uint64_t v24 = v19 - (void)*a3;
                    if (v24 >> 3 > v23) {
                      unint64_t v23 = v24 >> 3;
                    }
                    else {
                      unint64_t v25 = v23;
                    }
                    if (v25) {
                      uint64_t v26 = (char *)sub_100037038(v46, v25);
                    }
                    else {
                      uint64_t v26 = 0LL;
                    }
                    uint64_t v27 = &v26[16 * v22];
                    *(double *)uint64_t v27 = v17;
                    *((void *)v27 + 1) = v18;
                    double v29 = *a3;
                    double v28 = a3[1];
                    unint64_t v30 = v27;
                    if (v28 != *a3)
                    {
                      do
                      {
                        *((_OWORD *)v30 - 1) = *((_OWORD *)v28 - 1);
                        v30 -= 16;
                        v28 -= 16;
                      }

                      while (v28 != v29);
                      double v28 = *a3;
                    }

                    uint64_t v21 = v27 + 16;
                    *a3 = v30;
                    a3[1] = v27 + 16;
                    a3[2] = &v26[16 * v25];
                    if (v28) {
                      operator delete(v28);
                    }
                  }

                  else
                  {
                    *(double *)int v20 = v49;
                    *((void *)v20 + 1) = v18;
                    uint64_t v21 = v20 + 16;
                  }

                  a3[1] = v21;
                }

                double v31 = sub_100ABCBCC(a1, (uint64_t)a2, (uint64_t)&v50);
                double v32 = v31;
                double v49 = v31;
                uint64_t v33 = v52;
                unint64_t v35 = (unint64_t)a4[1];
                unint64_t v34 = (unint64_t)a4[2];
                if (v35 >= v34)
                {
                  uint64_t v37 = (uint64_t)(v35 - (void)*a4) >> 4;
                  unint64_t v38 = v37 + 1;
                  if ((unint64_t)(v37 + 1) >> 60) {
LABEL_46:
                  }
                    sub_100007008();
                  uint64_t v39 = v34 - (void)*a4;
                  if (v39 >> 3 > v38) {
                    unint64_t v38 = v39 >> 3;
                  }
                  else {
                    unint64_t v40 = v38;
                  }
                  if (v40) {
                    uint64_t v41 = (char *)sub_100037038(v47, v40);
                  }
                  else {
                    uint64_t v41 = 0LL;
                  }
                  uint64_t v42 = &v41[16 * v37];
                  *(double *)uint64_t v42 = v32;
                  *((void *)v42 + 1) = v33;
                  double v44 = *a4;
                  __int128 v43 = a4[1];
                  uint64_t v45 = v42;
                  if (v43 != *a4)
                  {
                    do
                    {
                      *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
                      v45 -= 16;
                      v43 -= 16;
                    }

                    while (v43 != v44);
                    __int128 v43 = *a4;
                  }

                  uint64_t v36 = v42 + 16;
                  *a4 = v45;
                  a4[1] = v42 + 16;
                  a4[2] = &v41[16 * v40];
                  if (v43) {
                    operator delete(v43);
                  }
                }

                else
                {
                  *(double *)unint64_t v35 = v31;
                  *(void *)(v35 + 8) = v33;
                  uint64_t v36 = (char *)(v35 + 16);
                }

                __int128 v14 = xmmword_1012E0070;
                _Q1 = v48;
                a4[1] = v36;
              }
            }
          }
        }
      }

      double v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

void sub_100ABD8F8(id a1)
{
  qword_101934968 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t sub_100ABD924(void *a1, uint64_t a2)
{
  double v4 = (void **)a1[1];
  uint64_t v5 = (void **)a1[2];
  if (v5 == v4)
  {
    int v6 = a1 + 5;
    uint64_t v5 = (void **)a1[1];
  }

  else
  {
    int v6 = a1 + 5;
    unint64_t v7 = a1[4];
    uint64_t v8 = &v4[v7 / 0x17];
    unint64_t v9 = (unint64_t)*v8;
    unint64_t v10 = (unint64_t)*v8 + 176 * (v7 % 0x17);
    unint64_t v11 = (unint64_t)v4[(a1[5] + v7) / 0x17] + 176 * ((a1[5] + v7) % 0x17);
    if (v10 != v11)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 + 24);
        if (v12)
        {
          std::__shared_weak_count::__release_weak(v12);
          unint64_t v9 = (unint64_t)*v8;
        }

        v10 += 176LL;
        if (v10 - v9 == 4048)
        {
          unint64_t v13 = (unint64_t)v8[1];
          ++v8;
          unint64_t v9 = v13;
          unint64_t v10 = v13;
        }
      }

      while (v10 != v11);
      double v4 = (void **)a1[1];
      uint64_t v5 = (void **)a1[2];
    }
  }

  *int v6 = 0LL;
  unint64_t v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v15 = a1[2];
      double v4 = (void **)(a1[1] + 8LL);
      a1[1] = v4;
      unint64_t v14 = v15 - (void)v4;
    }

    while (v14 > 0x10);
  }

  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 11LL;
    goto LABEL_16;
  }

  if (v14 >> 3 == 2)
  {
    uint64_t v16 = 23LL;
LABEL_16:
    a1[4] = v16;
  }

  sub_100ABDA88(a1);
  uint64_t result = sub_100ABDC88((uint64_t)a1, a2);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100ABDA88(void *a1)
{
  if (a1[5])
  {
    sub_100ABDAF8((uint64_t)a1, 0);
    sub_100ABDB54(a1, 0);
  }

  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = a1[2] - 8LL;
    }

    a1[4] = 0LL;
  }

  sub_100ABDBC8((uint64_t)a1);
}

uint64_t sub_100ABDAF8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x17) {
    a2 = 1;
  }
  if (v2 < 0x2E) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 23LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_100ABDB54(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 23 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x17) {
    a2 = 1;
  }
  if (v5 < 0x2E) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void sub_100ABDBC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(void *)a1) >> 3)
  {
    if (v5 == v4)
    {
      unint64_t v10 = 0LL;
      int v7 = 0LL;
    }

    else
    {
      int v7 = (char *)sub_1000071BC(v2, v6);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      unint64_t v10 = &v7[8 * v9];
      uint64_t v11 = v5 - v8;
      if (v5 != v8)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 8 * (v11 >> 3);
        do
        {
          *(void *)&v7[v12] = *(void *)(v8 + v12);
          v12 += 8LL;
        }

        while (v13 != v12);
        uint64_t v5 = *(void *)(a1 + 8);
        uint64_t v14 = *(void *)(a1 + 16);
        goto LABEL_9;
      }
    }

    uint64_t v14 = v5;
LABEL_9:
    uint64_t v15 = v14 - v5;
    uint64_t v16 = *(void **)a1;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v7[v15];
    *(void *)(a1 + 24) = v10;
    if (v16) {
      operator delete(v16);
    }
  }

uint64_t sub_100ABDC88(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  sub_100ABDBC8(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_100ABDCF4(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 1;
  *a2 = (void *)**a2;
  sub_10000AE14((uint64_t)(v3 + 74));
  sub_1005F67A0(v4);
  operator delete(v3);
  return (uint64_t)*a2;
}

void *sub_100ABDD44(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v3 = a2[4];
    uint64_t v4 = a2[1];
    if (a2[2] == v4)
    {
      uint64_t v5 = 0LL;
      uint64_t v8 = 0LL;
      int v7 = (void *)(v4 + 8 * ((a2[5] + v3) / 0x17));
    }

    else
    {
      uint64_t v5 = *(void *)(v4 + 8 * (v3 / 0x17)) + 176 * (v3 % 0x17);
      unint64_t v6 = a2[5] + v3;
      int v7 = (void *)(v4 + 8 * (v6 / 0x17));
      uint64_t v8 = *v7 + 176 * (v6 % 0x17);
    }

    sub_100ABDE10(a1, (uint64_t *)(v4 + 8 * (v3 / 0x17)), v5, v7, v8);
  }

  return a1;
}

void *sub_100ABDE10(void *a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = 23 * (a4 - a2) + 0x2E8BA2E8BA2E8BA3LL * ((a5 - *a4) >> 4) - 0x2E8BA2E8BA2E8BA3LL * ((a3 - *a2) >> 4);
  }
  return sub_100ABDE74(a1, a2, a3, v5);
}

void *sub_100ABDE74(void *a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = a1[5];
  if (v8 >= a4)
  {
    unint64_t v15 = a1[4];
    uint64_t v16 = a1[1];
    double v17 = (uint64_t *)(v16 + 8 * (v15 / 0x17));
    if (a1[2] == v16) {
      unint64_t v18 = 0LL;
    }
    else {
      unint64_t v18 = *v17 + 176 * (v15 % 0x17);
    }
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    sub_1005A83FC(&v22, a4);
    int v20 = v22;
    uint64_t v21 = v23;
    uint64_t v22 = v17;
    uint64_t v23 = v18;
    sub_100ABE3C4(a2, a3, v20, v21, (uint64_t)&v22);
    return (void *)sub_100ABE1DC((uint64_t)a1, v22, v23);
  }

  else
  {
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    sub_1005A83FC(&v22, v8);
    uint64_t v9 = v22;
    uint64_t v10 = v23;
    unint64_t v11 = a1[4];
    uint64_t v12 = a1[1];
    uint64_t v13 = (uint64_t *)(v12 + 8 * (v11 / 0x17));
    if (a1[2] == v12) {
      unint64_t v14 = 0LL;
    }
    else {
      unint64_t v14 = *v13 + 176 * (v11 % 0x17);
    }
    uint64_t v22 = v13;
    uint64_t v23 = v14;
    sub_100ABE3C4(a2, a3, v9, v10, (uint64_t)&v22);
    return sub_100ABDFDC(a1, v9, v10, a4 - a1[5]);
  }

void *sub_100ABDFDC(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 23 * ((v9 - v8) >> 3) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100ABE620(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }

  uint64_t v13 = (void *)(v8 + 8 * (v11 / 0x17));
  if (v9 == v8) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = *v13 + 176 * (v11 % 0x17);
  }
  double v31 = (void *)(v8 + 8 * (v11 / 0x17));
  unint64_t v32 = v14;
  uint64_t result = sub_1005A83FC(&v31, a4);
  uint64_t v16 = v32;
  if (v14 != v32)
  {
    double v17 = v31;
    do
    {
      if (v13 == v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4048LL;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }

      else
      {
        unint64_t v19 = v14;
        do
        {
          *(_OWORD *)unint64_t v19 = *(_OWORD *)a3;
          *(void *)(v19 + 16) = *(void *)(a3 + 16);
          uint64_t v20 = *(void *)(a3 + 24);
          *(void *)(v19 + 24) = v20;
          if (v20)
          {
            uint64_t v21 = (unint64_t *)(v20 + 16);
            do
              unint64_t v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }

          *(void *)(v19 + 32) = &off_1018920B8;
          __int128 v23 = *(_OWORD *)(a3 + 40);
          __int128 v24 = *(_OWORD *)(a3 + 56);
          __int128 v25 = *(_OWORD *)(a3 + 72);
          *(_OWORD *)(v19 + 88) = *(_OWORD *)(a3 + 88);
          *(_OWORD *)(v19 + 72) = v25;
          *(_OWORD *)(v19 + 56) = v24;
          *(_OWORD *)(v19 + 40) = v23;
          __int128 v26 = *(_OWORD *)(a3 + 104);
          __int128 v27 = *(_OWORD *)(a3 + 120);
          __int128 v28 = *(_OWORD *)(a3 + 136);
          *(_OWORD *)(v19 + 148) = *(_OWORD *)(a3 + 148);
          *(_OWORD *)(v19 + 136) = v28;
          *(_OWORD *)(v19 + 120) = v27;
          *(_OWORD *)(v19 + 104) = v26;
          *(_WORD *)(v19 + 168) = *(_WORD *)(a3 + 168);
          a3 += 176LL;
          if (a3 - *a2 == 4048)
          {
            uint64_t v29 = a2[1];
            ++a2;
            a3 = v29;
          }

          v19 += 176LL;
        }

        while (v19 != v18);
      }

      a1[5] += 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v18 - v14) >> 4);
      if (v13 == v17) {
        break;
      }
      unint64_t v30 = v13[1];
      ++v13;
      unint64_t v14 = v30;
    }

    while (v30 != v16);
  }

  return result;
}

uint64_t sub_100ABE1DC(uint64_t result, void *a2, uint64_t a3)
{
  unint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (void *)(v6 + 8 * (v5 / 0x17));
  if (v7 == v6) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *v8 + 176 * (v5 % 0x17);
  }
  if (v9 != a3)
  {
    uint64_t v10 = (a3 - *a2) >> 4;
    uint64_t v11 = 23 * (v8 - a2) + 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v9 - *v8) >> 4) - 0x2E8BA2E8BA2E8BA3LL * v10;
    if (v11 >= 1)
    {
      unint64_t v12 = (void *)(v6 + 8 * (v4 / 0x17));
      if (v7 == v6) {
        unint64_t v13 = 0LL;
      }
      else {
        unint64_t v13 = *v12 + 176 * (v4 % 0x17);
      }
      if (a3 == v13) {
        uint64_t v14 = 0LL;
      }
      else {
        uint64_t v14 = 23 * (a2 - v12) + 0x2E8BA2E8BA2E8BA3LL * v10 - 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v13 - *v12) >> 4);
      }
      unint64_t v19 = v12;
      unint64_t v20 = v13;
      sub_1005A83FC(&v19, v14);
      unint64_t v15 = v20;
      if (v20 != v9)
      {
        uint64_t v16 = v19;
        do
        {
          double v17 = *(std::__shared_weak_count **)(v15 + 24);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          v15 += 176LL;
          if (v15 - *v16 == 4048)
          {
            unint64_t v18 = v16[1];
            ++v16;
            unint64_t v15 = v18;
          }
        }

        while (v15 != v9);
      }

      v3[5] -= v11;
      do
        uint64_t result = sub_100ABDB54(v3, 1);
      while ((result & 1) != 0);
    }
  }

  return result;
}

double sub_100ABE3C4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4048; ; uint64_t i = v12 + 4048)
    {
      sub_100ABE454(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      uint64_t v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100ABE454(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

uint64_t sub_100ABE454@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  uint64_t result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    unint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      uint64_t v10 = 0x2E8BA2E8BA2E8BA3LL * ((v9 - a4 + 4048) >> 4);
      if (0x2E8BA2E8BA2E8BA3LL * ((v8 - result) >> 4) < v10) {
        uint64_t v10 = 0x2E8BA2E8BA2E8BA3LL * ((v8 - result) >> 4);
      }
      uint64_t result = sub_100ABE524(result, result + 176 * v10, a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }

    a4 = v11;
    if (*(v5 - 1) + 4048 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }

  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100ABE524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100ABE580(a3, v4);
      v4 += 176LL;
      a3 += 176LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

uint64_t sub_100ABE580(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = (unint64_t *)(v4 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  __int128 v9 = *(_OWORD *)(a2 + 40);
  __int128 v10 = *(_OWORD *)(a2 + 56);
  __int128 v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  __int128 v12 = *(_OWORD *)(a2 + 104);
  __int128 v13 = *(_OWORD *)(a2 + 120);
  __int128 v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 136) = v14;
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  return a1;
}

void sub_100ABE620(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x17) {
    unint64_t v6 = v5 / 0x17 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x17;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x17) {
    unint64_t v8 = v7 / 0x17;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x17)
  {
    for (a1[4] = v7 - 23 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      double v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v28);
          double v31 = &v29[8 * (v28 >> 2)];
          unint64_t v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          __int128 v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }

          __int128 v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFD0uLL);
          sub_1000EC960(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0xFD0uLL);
          sub_1000ECA74((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 22LL;
          }
          else {
            uint64_t v64 = 23LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - 23 * v8;
      if (v8)
      {
        double v66 = (char *)a1[2];
        do
        {
          __int16 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              double v79 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              double v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                double v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                BOOL v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)BOOL v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              __int128 v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                double v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int16 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                double v66 = (char *)a1[1];
              }

              double v77 = &v66[-8 * (v74 >> 1)];
              double v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)double v66 = v69;
          double v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      double v91 = a1 + 3;
      if (v13) {
        __int128 v15 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v13);
      }
      else {
        __int128 v15 = 0LL;
      }
      uint64_t v38 = -23LL * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        __int128 v88 = operator new(0xFD0uLL);
        sub_1000ECB90(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        unint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              double v49 = (char *)sub_1000071BC((uint64_t)v91, v48);
              __int128 v51 = (uint64_t *)__p[1];
              unint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                unint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                __int128 v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)__int128 v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              unint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                unint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                unint64_t v40 = (char *)__p[1];
              }

              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              unint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)unint64_t v40 = *v39;
          unint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      int v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000ECCA4((uint64_t)__p, v57);
      }

      int v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_100ABEB70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ABEBE4(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100ABECB0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + ((v7 & 0x3F) << 6));
  __int128 v9 = *a2;
  __int128 v10 = a2[1];
  __int128 v11 = a2[3];
  v8[2] = a2[2];
  v8[3] = v11;
  *unint64_t v8 = v9;
  v8[1] = v10;
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5] + 1LL;
  a1[5] = v13;
  unint64_t v14 = v12 + v13;
  uint64_t v15 = a1[1];
  uint64_t v16 = (void *)(v15 + 8 * (v14 >> 6));
  uint64_t v17 = *v16 + ((v14 & 0x3F) << 6);
  if (a1[2] == v15) {
    uint64_t v17 = 0LL;
  }
  if (v17 == *v16) {
    uint64_t v17 = *(v16 - 1) + 4096LL;
  }
  return v17 - 64;
}

void sub_100ABECB0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100ABEF78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100ABEFC4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100ABF03C(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 6);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100ABF020(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100ABF03C(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_100007008();
  }
  uint64_t result = (char *)sub_100046304((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t **sub_100ABF090(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int128 v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x78uLL);
    _DWORD v11[4] = **a4;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    void v11[14] = 0LL;
    void v11[5] = 0xBFF0000000000000LL;
    v11[7] = 0xBFF0000000000000LL;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_BYTE *)v11 + 112) = 1;
    sub_1000085FC(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100ABF170(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10186D3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100ABF184(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10186D3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100ABF1A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **sub_100ABF1B8(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  double v8 = a1 + 1;
  __int128 v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        double v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        double v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x30uLL);
    v14[1] = v7;
    _WORD v12[8] = **a4;
    *((void *)v12 + 5) = 0LL;
    char v15 = 1;
    sub_1000085FC(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0LL;
    sub_100ABF29C((uint64_t)v14, 0LL);
    return (uint64_t **)v12;
  }

  return v9;
}

void sub_100ABF29C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1005F69EC(v2 + 5);
    }
    operator delete(v2);
  }

uint64_t *sub_100ABF2E0(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  double v8 = a1 + 1;
  __int128 v9 = a1 + 1;
  if (v6)
  {
    double v10 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        double v11 = *((double *)v6 + 4);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        double v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        double v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    _DWORD v12[4] = **a4;
    double v12[5] = 0LL;
    v12[6] = 0LL;
    char v15 = 1;
    sub_1000085FC(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0LL;
    sub_10031C474((uint64_t)v14, 0LL);
    return v12;
  }

  return (uint64_t *)v9;
}

void sub_100ABF3C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10186D478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100ABF3D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10186D478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100ABF3FC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100ABF40C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10186D4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100ABF420(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10186D4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100ABF444(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **sub_100ABF454(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int128 v9 = a1 + 1;
LABEL_10:
    double v11 = (uint64_t *)operator new(0x2F8uLL);
    *((_DWORD *)v11 + 8) = **a4;
    bzero(v11 + 5, 0x2D0uLL);
    sub_1005F658C((uint64_t)(v11 + 5));
    sub_1000085FC(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }

  return v9;
}

BOOL sub_100ABF528(uint64_t a1)
{
  if (!*(void *)(a1 + 40))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v2 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)buf = 67240192;
      int v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,fused hypothesis with empty buffer is erased,hID,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v5 = *(_DWORD *)(a1 + 652);
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging,fused hypothesis with empty buffer is erased,hID,%{public}d",  v8,  8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto cllcf::CLLCFusion::performHypothesesPurging()::(anonymous class)::operator()(const LCFusionLocationHypothesis &) const",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return *(void *)(a1 + 40) == 0LL;
}

uint64_t *sub_100ABF6EC(uint64_t **a1, uint64_t *a2)
{
  int v3 = sub_1000087E8(a1, a2);
  sub_10000AE14((uint64_t)(a2 + 78));
  sub_1005F67A0(a2 + 5);
  operator delete(a2);
  return v3;
}

void sub_100ABF738(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10186D518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100ABF74C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10186D518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100ABF770(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL sub_100ABF780(uint64_t a1)
{
  if (!*(void *)(a1 + 40))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    unint64_t v2 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)buf = 67240192;
      int v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#fusion,purging,merged hypothesis with empty buffer is erased,hID,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v5 = *(_DWORD *)(a1 + 652);
      v8[0] = 67240192;
      v8[1] = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#fusion,purging,merged hypothesis with empty buffer is erased,hID,%{public}d",  v8,  8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto cllcf::CLLCFusion::performHypothesesMerging()::(anonymous class)::operator()(const LCFusionLocationHypothesis &) const",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return *(void *)(a1 + 40) == 0LL;
}

void sub_100ABF944(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    int v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      uint64_t v17 = (char *)sub_10000956C(a1[4], v16);
      uint64_t v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      int64_t v20 = (int *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        uint64_t v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)uint64_t v23 = v24;
          v23 += 4;
          v22 -= 4LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      char v15 = &v4[4 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }

  *(_DWORD *)uint64_t v4 = *a2;
  a1[2] = v4 + 4;
}

uint64_t **sub_100ABFA50(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0xB0uLL);
    *((void *)v11 + 4) = **a4;
    *((void *)v11 + 21) = 0LL;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100ABFB34()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101347820;
      v1[3] = unk_101347830;
      v1[4] = xmmword_101347840;
      v1[0] = xmmword_101347800;
      v1[1] = unk_101347810;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100ABFC08(_Unwind_Exception *a1)
{
}

void *sub_100ABFC20(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10186D598;
  a1[9] = off_10186D650;
  sub_100B14CF0(a1 + 43, 0LL, 0LL);
  sub_100B14CF0(a1 + 45, 0LL, 0LL);
  sub_100B14CF0(a1 + 47, 0LL, 0LL);
  (*(void (**)(void *))(*a1 + 112LL))(a1);
  return a1;
}

void sub_100ABFCE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ABFD0C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_10182BDA0;
  *(void *)a1 = off_10186D830;
  *(void *)(a1 + 72) = off_10186D8D8;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10186D830;
  *(void *)(a1 + 72) = off_10186D8D8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + memset(&v8[8], 0, 208) = 0u;
  *(_DWORD *)(a1 + 264) = 12000;
  *(void *)(a1 + 272) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 280));
  *(void *)(a1 + 280) = &off_10182BDA0;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  char v15 = (int *)(a1 + 264);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 264));
  uint64_t v17 = v34;
  if (v34)
  {
    p_uint64_t shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    *char v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10186D918);
  }
  int64_t v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D918);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<MaxMetsProcessing>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, cons t CLSqliteDatabase::SqlitePropertyPersistence) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassC DataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100AC00B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[34] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_1001B9D48(v26);
  sub_100D8A88C(a12);
  void *v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100AC0158()
{
}

void *sub_100AC0160(void *a1)
{
  a1[9] = off_10186D8D8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10186D830;
  a1[34] = off_10182BD58;
  sub_1001B9C98(a1 + 35);
  sub_1001B9D48(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100AC01E0(uint64_t a1)
{
  return sub_100AC0160((void *)(a1 - 72));
}

void sub_100AC01E8(void *a1)
{
  uint64_t v1 = sub_100AC0160(a1);
  operator delete(v1);
}

void sub_100AC01FC(uint64_t a1)
{
  uint64_t v1 = sub_100AC0160((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100AC0214(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100B14CF8(a1 + 43, &v13);
  int v5 = (sqlite3_stmt *)sub_100019240(v13);
  if (sub_1003B7480(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v6 = a1[10];
    uint64_t v7 = (sqlite3_stmt *)sub_100019240(v13);
    sub_1003BB2BC(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }

  else
  {
    uint64_t v8 = -1LL;
  }

  sub_1003C05BC(a1[10]);
  uint64_t v9 = a1[10];
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_1003C1EC0(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  return v8;
}

void sub_100AC031C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC0340(uint64_t a1, uint64_t a2)
{
  return sub_100AC0214((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100AC0348(uint64_t a1, char **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from MaxMetsProcessingHistory ORDER BY startTime ASC", &v20);
    uint64_t v5 = v20;
    uint64_t v23 = v20;
    sub_1003C0454(*(void *)(a1 + 80));
    while (!sub_100AC0544(&v23, (uint64_t)&v20))
    {
      unint64_t v6 = (unint64_t)a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if (v6 >= v7)
      {
        unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)*a2) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0x666666666666666LL) {
          sub_100007008();
        }
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a2) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x333333333333333LL) {
          unint64_t v12 = 0x666666666666666LL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = &v13[40 * v9];
        *(_OWORD *)uint64_t v14 = v20;
        *((_OWORD *)v14 + 1) = v21;
        *((void *)v14 + 4) = v22;
        char v16 = *a2;
        char v15 = a2[1];
        uint64_t v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            __int128 v18 = *(_OWORD *)(v15 - 40);
            __int128 v19 = *(_OWORD *)(v15 - 24);
            *((void *)v17 - 1) = *((void *)v15 - 1);
            *(_OWORD *)(v17 - 24) = v19;
            *(_OWORD *)(v17 - 40) = v18;
            v17 -= 40;
            v15 -= 40;
          }

          while (v15 != v16);
          char v15 = *a2;
        }

        uint64_t v8 = v14 + 40;
        *a2 = v17;
        a2[1] = v14 + 40;
        a2[2] = &v13[40 * v12];
        if (v15) {
          operator delete(v15);
        }
      }

      else
      {
        *(_OWORD *)unint64_t v6 = v20;
        *(_OWORD *)(v6 + 16) = v21;
        *(void *)(v6 + 32) = v22;
        uint64_t v8 = (char *)(v6 + 40);
      }

      a2[1] = v8;
    }

    uint64_t result = sub_1003C05BC(*(void *)(a1 + 80));
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100AC051C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC0544(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  unint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  unint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  unint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v9, 3);
  unint64_t v10 = (sqlite3_stmt *)sub_100019240(*a1);
  double v11 = sqlite3_column_double(v10, 4);
  uint64_t result = 0LL;
  *(double *)(a2 + 32) = v11;
  return result;
}

uint64_t sub_100AC05FC(uint64_t a1)
{
  uint64_t v3 = v8;
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    unint64_t v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100AC069C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC06C0(uint64_t a1)
{
  return sub_100AC05FC(a1 - 72);
}

uint64_t sub_100AC06C8(uint64_t *a1)
{
  uint64_t result = sub_1003C1048(a1[10]);
  if ((_DWORD)result)
  {
    sub_100AC0758((uint64_t)a1);
    sub_1003B59A0( a1[10],  "MaxMetsProcessingHistory",  (const char **)&off_10186D6E0,  (const std::string::value_type **)&off_10198F468,  0);
    a1[43] = sub_1003BF158(a1[10], "DELETE FROM MaxMetsProcessingHistory WHERE endTime < ?");
    a1[44] = v3;
    a1[45] = sub_1003BF158(a1[10], "SELECT * FROM MaxMetsProcessingHistory ORDER BY id DESC LIMIT 1");
    a1[46] = v4;
    uint64_t result = sub_1003BF158( a1[10],  "UPDATE MaxMetsProcessingHistory SET startTime = ?, endTime = ?, maxMets = ?, lastUpdateTime = ? WHERE id = ?");
    a1[47] = result;
    a1[48] = v5;
  }

  return result;
}

uint64_t sub_100AC0758(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "MaxMetsProcessingHistory");
  if ((_DWORD)result)
  {
    unint64_t v35 = "lastUpdateTime";
    int v36 = 5;
    __int16 v37 = 0;
    char v38 = 0;
    char v39 = 0;
    if ((sub_1003BC790(*(void *)(a1 + 80), "MaxMetsProcessingHistory", "lastUpdateTime", (uint64_t)&v35) & 1) != 0)
    {
      uint64_t result = sub_100AC1100( a1,  "MaxMetsProcessingHistory",  (const char **)&off_10186D6E0,  (const std::string::value_type **)&off_10198F468);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      sub_1003C0454(*(void *)(a1 + 80));
      sub_10000CE18((uint64_t)v31);
      uint64_t v3 = sub_10000CF44(&v32, (uint64_t)"ALTER TABLE MaxMetsProcessingHistory ADD COLUMN ", 48LL);
      uint64_t v4 = sub_10000CF44(v3, (uint64_t)"lastUpdateTime", 14LL);
      uint64_t v5 = sub_10000CF44(v4, (uint64_t)" ", 1LL);
      unint64_t v6 = (const char *)sub_1003BCC40(2);
      size_t v7 = strlen(v6);
      uint64_t v8 = sub_10000CF44(v5, (uint64_t)v6, v7);
      sub_10000CF44(v8, (uint64_t)";", 1LL);
      uint64_t v9 = *(void *)(a1 + 80);
      std::stringbuf::str(&v28, &v33);
      if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v10 = &v28;
      }
      else {
        unint64_t v10 = (std::stringbuf::string_type *)v28.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(v9, (char *)v10, &v26);
      uint64_t v11 = v26.__r_.__value_.__r.__words[0];
      v26.__r_.__value_.__r.__words[0] = 0LL;
      if ((char)v28.__r_.__value_.__s.__size_ < 0)
      {
        uint64_t v12 = v11;
        operator delete(v28.__r_.__value_.__l.__data_);
        uint64_t v11 = v12;
      }

      uint64_t v13 = *(void *)(a1 + 80);
      uint64_t v25 = v11;
      uint64_t v14 = (sqlite3_stmt *)sub_100019240(v11);
      sub_1003BB2BC(v13, v14);
      sub_10000CE18((uint64_t)&v28);
      char v15 = sub_10000CF44(&v28.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE MaxMetsProcessingHistory SET ", 36LL);
      char v16 = sub_10000CF44(v15, (uint64_t)"lastUpdateTime", 14LL);
      sub_10000CF44(v16, (uint64_t)" = 0;", 5LL);
      uint64_t v17 = *(void *)(a1 + 80);
      std::stringbuf::str(&v26, &v29);
      if ((v26.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v18 = &v26;
      }
      else {
        __int128 v18 = (std::stringbuf::string_type *)v26.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(v17, (char *)v18, &v27);
      uint64_t v19 = v27;
      uint64_t v27 = 0LL;
      uint64_t v20 = *(void *)(a1 + 80);
      __int128 v21 = (sqlite3_stmt *)sub_100019240(v19);
      sub_1003BB2BC(v20, v21);
      sub_1003C05BC(*(void *)(a1 + 80));
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
      }
      v28.__r_.__value_.__r.__words[0] = v22;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + *(void *)(v22 - sub_100008390(v2, *(void **)(v1 + 24)) = v23;
      v28.__r_.__value_.__l.__cap_ = v24;
      std::streambuf::~streambuf(&v29);
      std::ios::~ios(&v30);
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
      }
      v31[0] = v22;
      *(void *)((char *)v31 + *(void *)(v22 - sub_100008390(v2, *(void **)(v1 + 24)) = v23;
      std::string::size_type v32 = v24;
      std::streambuf::~streambuf(&v33);
      std::ios::~ios(&v34);
      sub_100AC1100( a1,  "MaxMetsProcessingHistory",  (const char **)&off_10186D6E0,  (const std::string::value_type **)&off_10198F468);
    }

    return sub_1003BF200(*(void *)(a1 + 80), "MaxMetsProcessingHistory");
  }

  return result;
}

void sub_100AC0AB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a17);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8LL))(a9);
  }
  sub_1011F8850((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC0B4C(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM MaxMetsProcessingHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_100AC0BE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC0C00(uint64_t a1)
{
  return sub_100AC0B4C(a1 - 72);
}

uint64_t sub_100AC0C08(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    sub_1003C0D54(a1[10], "DELETE FROM MaxMetsProcessingHistory WHERE startTime > ?", &v11);
    uint64_t v5 = v11;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v11);
    if (sub_1003B7480(v6, 1, *(double *)(a2 + 8)))
    {
      uint64_t v7 = a1[10];
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      sub_1003BB2BC(v7, v8);
    }

    uint64_t v9 = a1[10];
    else {
      uint64_t v10 = *(void *)(v9 + 88);
    }
    uint64_t result = sub_1003C1EC0(v9, v10);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100AC0CD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC0CF0(uint64_t a1, double a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "UPDATE MaxMetsProcessingHistory SET startTime = startTime + ?, endTime = endTime + ?, lastUpdateTime = lastUpdateTime + ?",  &v11);
    uint64_t v5 = v11;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v11);
    uint64_t result = sub_1003B7480(v6, 1, a2);
    if ((_DWORD)result)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003B7480(v7, 2, a2);
      if ((_DWORD)result)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003B7480(v8, 3, a2);
        if ((_DWORD)result)
        {
          uint64_t v9 = *(void *)(a1 + 80);
          uint64_t v10 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003BB2BC(v9, v10);
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100AC0DB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC0DD8(uint64_t a1, double *a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO MaxMetsProcessingHistory (startTime, endTime, maxMets, lastUpdateTime) VALUES (?, ?, ?, ?)",  &v12);
    uint64_t v5 = v12;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v12);
    uint64_t result = sub_1003B7480(v6, 1, a2[1]);
    if ((_DWORD)result)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003B7480(v7, 2, a2[2]);
      if ((_DWORD)result)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003B7480(v8, 3, a2[3]);
        if ((_DWORD)result)
        {
          uint64_t v9 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003B7480(v9, 4, a2[4]);
          if ((_DWORD)result)
          {
            uint64_t v10 = *(void *)(a1 + 80);
            uint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
            uint64_t result = sub_1003BB2BC(v10, v11);
          }
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100AC0EB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC0ED8()
{
  return 0LL;
}

uint64_t sub_100AC0EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v12;
  if (v12)
  {
    uint64_t v5 = sub_100AC0544(&v12, a2);
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186D800);
    }
    uint64_t v6 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "MaxMetsProcessingRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10186D800);
      }
      __int16 v11 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  17LL,  "MaxMetsProcessingRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement",  &v11,  2);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLActivityDB::ActivityCode CLMaxMetsProcessingRecorderDb::getMostRecentRecordUL(MaxMetsProcessing &) const",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    uint64_t v5 = 2LL;
  }

  uint64_t v7 = v12;
  uint64_t v12 = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  if (!v4) {
    return 2LL;
  }
  return v5;
}

void sub_100AC10D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC1100(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D918);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D918);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      __int16 v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<MaxMetsProcessing>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnI nfo *, const char **) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)uint64_t v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    __int16 v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)double v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      char v16 = v143;
    }
    else {
      char v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    __int128 v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      __int128 v21 = &__p;
    }
    else {
      __int128 v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    std::string::size_type v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    std::stringbuf::string_type v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::stringbuf::string_type v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      std::stringbuf::string_type v28 = v143;
    }
    else {
      std::stringbuf::string_type v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v139;
    }
    else {
      uint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    int v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    char v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int64_t v41 = &__p;
    }
    else {
      int64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    uint64_t v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v47 = &__p;
      }
      else {
        uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      unint64_t v48 = v143;
    }
    else {
      unint64_t v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    uint64_t v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v54 = buf;
    }
    else {
      __int128 v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    unint64_t v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v60 = buf;
    }
    else {
      __int128 v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int128 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    double v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v69 = &__p;
    }
    else {
      uint64_t v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    uint64_t v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v75 = &__p;
      }
      else {
        __int16 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    int64_t v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      double v79 = &__p;
    }
    else {
      double v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    uint64_t v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v85 = &__p;
      }
      else {
        BOOL v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      uint64_t v86 = v143;
    }
    else {
      uint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    __int128 v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v95 = &__p;
    }
    else {
      double v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    double v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      double v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        double v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          double v103 = &__p;
        }
        else {
          double v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        double v104 = v141;
      }
      else {
        double v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      int v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      int v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      double v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      int v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v114 = buf;
      }
      else {
        unint64_t v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      unint64_t v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v121 = &__p;
      }
      else {
        uint64_t v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      __int128 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D918);
      }
      __int128 v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186D918);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v13memset(&v6[1], 0, 7) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        double v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<MaxMetsProcessing>::migrateDbConstraints(const char *, const CLSqliteDatabase::Colum nInfo *, const char **) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D918);
      }
      __int128 v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186D918);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v13memset(&v6[1], 0, 7) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        uint64_t v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<MaxMetsProcessing>::migrateDbConstraints(const char *, const CLSqliteDatabase::Colum nInfo *, const char **) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100AC2298( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100AC25B8(void *a1, void **a2, double a3, double a4)
{
  __int128 v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v45);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (HIBYTE(v46)) {
      goto LABEL_3;
    }
LABEL_39:
    sub_10125C570(v10);
    goto LABEL_40;
  }

  uint64_t v4 = (std::stringbuf *)v45[1];
  operator delete(v45[0]);
  if (!v4) {
    goto LABEL_39;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v45);
  __int16 v11 = sub_10000CF44(&v46, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if ((SBYTE7(v41) & 0x80u) == 0) {
    __int128 v12 = __p;
  }
  else {
    __int128 v12 = (void **)__p[0];
  }
  if ((SBYTE7(v41) & 0x80u) == 0) {
    uint64_t v13 = BYTE7(v41);
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  uint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v47;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v47);
  if ((SBYTE7(v41) & 0x80u) == 0) {
    char v16 = (char *)__p;
  }
  else {
    char v16 = (char *)__p[0];
  }
  sub_1003C0D54(v15, v16, &v43);
  uint64_t v5 = v43;
  uint64_t v43 = 0LL;
  uint64_t v44 = v5;
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    __int128 v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v44, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        signed __int8 v20 = (char *)a2[1];
        __int128 v21 = (char *)a2[2];
        if (v20 >= v21)
        {
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)*a2) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x666666666666666LL) {
            sub_100007008();
          }
          unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (_BYTE *)*a2) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x333333333333333LL) {
            unint64_t v28 = 0x666666666666666LL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28) {
            std::string::size_type v29 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v28);
          }
          else {
            std::string::size_type v29 = 0LL;
          }
          uint64_t v30 = &v29[40 * v25];
          __int128 v31 = *(_OWORD *)__p;
          __int128 v32 = v41;
          *((void *)v30 + 4) = v42;
          *(_OWORD *)uint64_t v30 = v31;
          *((_OWORD *)v30 + 1) = v32;
          uint64_t v34 = (char *)*a2;
          __int128 v33 = (char *)a2[1];
          std::string::size_type v35 = v30;
          if (v33 != *a2)
          {
            do
            {
              __int128 v36 = *(_OWORD *)(v33 - 40);
              __int128 v37 = *(_OWORD *)(v33 - 24);
              *((void *)v35 - 1) = *((void *)v33 - 1);
              *(_OWORD *)(v35 - 24) = v37;
              *(_OWORD *)(v35 - 40) = v36;
              v35 -= 40;
              v33 -= 40;
            }

            while (v33 != v34);
            __int128 v33 = (char *)*a2;
          }

          std::string::size_type v24 = v30 + 40;
          *a2 = v35;
          a2[1] = v30 + 40;
          a2[2] = &v29[40 * v28];
          if (v33) {
            operator delete(v33);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)__p;
          __int128 v23 = v41;
          *((void *)v20 + 4) = v42;
          *(_OWORD *)signed __int8 v20 = v22;
          *((_OWORD *)v20 + 1) = v23;
          std::string::size_type v24 = v20 + 40;
        }

        a2[1] = v24;
      }

      uint64_t v5 = v44;
      goto LABEL_42;
    }
  }

void sub_100AC2900( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC2968(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D918);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D918);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)uint64_t v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186D918);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<MaxMetsProcessing>::setDatabaseAccessible() [T = MaxMetsProcessing, DataProt ectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D918);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    char v16 = (void *)(v14 + 8 * (v13 / 0x66));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 40 * (v13 % 0x66);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x66)) + 40 * (v22 % 0x66);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186D938);
      }
      std::string::size_type v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186D938);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<MaxMetsProcessing>::setDatabaseAccessible() [T = MaxMetsProcessing, DataProt ectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 40LL;
      if (v17 - *v16 == 4080)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186D918);
    }
    __int128 v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D918);
      }
    }

    signed __int8 v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  unint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      unint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 51LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 102LL;
  }

  *(void *)(a1 + memset(&v8[8], 0, 208) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100AC309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

id *sub_100AC30D0(uint64_t a1, __int128 *a2, char a3)
{
  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v35);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104LL))(a1, v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D918);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186D918);
        }
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v36,  2);
        char v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsPr ocessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 1);
    double v8 = v34;
    double v9 = v7 - v34;
    if (v7 - v34 < 0.0) {
      double v9 = -(v7 - v34);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186D918);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        double v41 = v34;
        __int16 v42 = 2050;
        uint64_t v43 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186D918);
        }
        uint64_t v24 = *((void *)a2 + 1);
        int v36 = 134349312;
        double v37 = v34;
        __int16 v38 = 2050;
        uint64_t v39 = v24;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v36,  22);
        unint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsPr ocessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 1);
      double v8 = v34;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186D918);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          double v41 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186D918);
          }
          double v27 = *((double *)a2 + 1);
          int v36 = 134217984;
          double v37 = v27;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v36));
          uint64_t v29 = (uint8_t *)v28;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMets Processing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v28);
          if (v29 != buf) {
            free(v29);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10186D918);
        double v18 = v32;
      }

      double v19 = v17 - v18;
      signed __int8 v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v41 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186D918);
        }
        int v36 = 134217984;
        double v37 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v36));
        uint64_t v31 = (uint8_t *)v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsPr ocessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v30);
        if (v31 != buf) {
          free(v31);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, v33, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100AC3814( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100AC3840(uint64_t a1)
{
  return sub_100AC2968(a1 - 72);
}

void sub_100AC3848(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100AC3874(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v39);
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if (HIBYTE(v40)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10125C6DC(v4);
LABEL_44:
    sub_100007008();
  }

  __int128 v33 = v39[1];
  operator delete(v39[0]);
  if (!v33) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v39);
    int v6 = sub_10000CF44(&v40, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v35) & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((SBYTE7(v35) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v35);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v41);
    if ((SBYTE7(v35) & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    sub_1003C0D54(v10, v11, &v37);
    uint64_t v12 = v37;
    uint64_t v37 = 0LL;
    uint64_t v38 = v12;
    if (SBYTE7(v35) < 0) {
      operator delete(__p[0]);
    }
    sub_1003C0454(a1[10]);
    while (!sub_1001BA11C((uint64_t)a1, &v38, (uint64_t)__p))
    {
      unint64_t v13 = (unint64_t)a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if (v13 >= v14)
      {
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*a2) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x666666666666666LL) {
          goto LABEL_44;
        }
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)*a2) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x333333333333333LL) {
          unint64_t v21 = 0x666666666666666LL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          __int128 v22 = (char *)sub_100100EF8((uint64_t)(a2 + 2), v21);
        }
        else {
          __int128 v22 = 0LL;
        }
        unint64_t v23 = &v22[40 * v18];
        __int128 v24 = *(_OWORD *)__p;
        __int128 v25 = v35;
        *((void *)v23 + 4) = v36;
        *(_OWORD *)unint64_t v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        double v27 = *a2;
        unint64_t v26 = a2[1];
        unint64_t v28 = v23;
        if (v26 != *a2)
        {
          do
          {
            __int128 v29 = *(_OWORD *)(v26 - 40);
            __int128 v30 = *(_OWORD *)(v26 - 24);
            *((void *)v28 - 1) = *((void *)v26 - 1);
            *(_OWORD *)(v28 - 24) = v30;
            *(_OWORD *)(v28 - 40) = v29;
            v28 -= 40;
            v26 -= 40;
          }

          while (v26 != v27);
          unint64_t v26 = *a2;
        }

        double v17 = v23 + 40;
        *a2 = v28;
        a2[1] = v23 + 40;
        a2[2] = &v22[40 * v21];
        if (v26) {
          operator delete(v26);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)__p;
        __int128 v16 = v35;
        *(void *)(v13 + 32) = v36;
        *(_OWORD *)unint64_t v13 = v15;
        *(_OWORD *)(v13 + 16) = v16;
        double v17 = (char *)(v13 + 40);
      }

      a2[1] = v17;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v31 = v38;
    uint64_t v38 = 0LL;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    *(void **)((char *)v39
    uint64_t v40 = v32;
    std::streambuf::~streambuf(&v41);
    return std::ios::~ios(&v42);
  }

  return result;
}

void sub_100AC3B78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC3BE0(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10125C848(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  uint64_t v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100AC3E40(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10125C9B4(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    unint64_t v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100AC4078(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10125CB20(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100AC42A0(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100AC42CC(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100AC42F8(uint64_t a1, char *a2, int a3)
{
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return a1;
}

void sub_100AC4370( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC43A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  char v7 = operator new(8uLL);
  *char v7 = &off_10186D968;
  *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v12 = v7;
  *(void *)a4 = 0LL;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  sub_100AC44C4(a1, (__int128 *)v13, a3, (uint64_t *)&v12, (__int128 *)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (uint64_t)v12;
  uint64_t v12 = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_100AC4474( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8LL))(a15);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC44C4(uint64_t a1, __int128 *a2, int a3, uint64_t *a4, __int128 *a5)
{
  *(_BYTE *)a1 = 0;
  __int128 v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + 40) = 0x100000002LL;
  char v9 = (os_log_s *)(a1 + 40);
  uint64_t v10 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v11 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v11;
  }

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  uint64_t v12 = *a4;
  *a4 = 0LL;
  *(void *)(a1 + 96) = v12;
  if (qword_101934830 != -1) {
    goto LABEL_42;
  }
  while (1)
  {
    uint64_t v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v10;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v42 = 1024;
      int v43 = a3;
      __int16 v44 = 1024;
      int v45 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Creating managed location database %s (count triggers %d, use cache %d)",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D9A8);
      }
      double v27 = v10;
      int v35 = 136315650;
      uint64_t v36 = v27;
      __int16 v37 = 1024;
      int v38 = a3;
      __int16 v39 = 1024;
      int v40 = 1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Creating managed location database %s (count triggers %d, use cache %d)",  (const char *)&v35,  24,  v34);
      __int128 v29 = (char *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatabas e(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }

    if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96)))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186D9A8);
      }
      char v9 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        __int128 v15 = v10;
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Data protection is enabled, creating in-memory database for table %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D9A8);
        }
        __int128 v30 = v10;
        int v35 = 136315138;
        uint64_t v36 = v30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Data protection is enabled, creating in-memory database for table %s",  (const char *)&v35);
        char v9 = (os_log_s *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatab ase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataTyp e = CLTelephonyService_Type::LteCell]",  "%s\n",  v31);
        if (v9 != (os_log_s *)buf) {
          free(v9);
        }
      }

      sub_100AC4BB8((_BYTE *)a1, a3, buf);
      uint64_t v16 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v17 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v16;
      if (v17)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
        uint64_t v18 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
      }
    }

    else
    {
      sub_1004C4AFC(a1, (uint64_t)v9, buf);
      uint64_t v19 = *(void *)buf;
      *(void *)buf = 0LL;
      uint64_t v20 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        uint64_t v21 = *(void *)buf;
        *(void *)buf = 0LL;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
        }
        uint64_t v19 = *(void *)(a1 + 32);
      }

      if (!v19)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186D9A8);
        }
        char v9 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_10186D9A8);
          }
          LOWORD(v35) = 0;
          LODWORD(v33) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "Persistent database failed to create despite data protection not enabled. Falling back to in-memory database",  &v35,  v33);
          char v9 = (os_log_s *)v32;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDat abase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, Dat aType = CLTelephonyService_Type::LteCell]",  "%s\n",  v32);
          if (v9 != (os_log_s *)buf) {
            free(v9);
          }
        }

        sub_100AC4BB8((_BYTE *)a1, a3, buf);
        uint64_t v22 = *(void *)buf;
        *(void *)buf = 0LL;
        uint64_t v23 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
          uint64_t v24 = *(void *)buf;
          *(void *)buf = 0LL;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
          }
          uint64_t v22 = *(void *)(a1 + 32);
        }

        if (!v22 || !sub_100400B64(v22))
        {
          sub_10125CDFC(buf);
          goto LABEL_41;
        }
      }
    }

    uint64_t v25 = *(void *)(a1 + 32);
    if (v25)
    {
      if (sub_100400B64(v25)) {
        return a1;
      }
    }

    sub_10125CC8C(buf);
LABEL_41:
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  *(_DWORD *)buf,  "CLManagedLocationDatabase");
    __break(1u);
LABEL_42:
    dispatch_once(&qword_101934830, &stru_10186D9A8);
  }

void sub_100AC4B34(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AC4BB8(_BYTE *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  char v9 = 0;
  uint64_t v8 = 0LL;
  char v10 = a2;
  if (SHIBYTE(v7) < 0)
  {
    sub_1010DD48C(&v11, __p[0], (unint64_t)__p[1]);
    uint64_t v13 = 0LL;
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v11 = *(_OWORD *)__p;
    uint64_t v12 = v7;
    uint64_t v13 = 0LL;
  }

  sub_1004C4AFC((uint64_t)a1, (uint64_t)&v8, a3);
  if (*a3)
  {
    *a1 = 1;
    sub_100AC4D00((uint64_t)a1);
  }

  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_100AC4C84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AC4CD4(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100AC4D00(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_10125CF6C();
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1000392EC((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    else {
      uint64_t v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }

  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  uint64_t v6 = (void **)__p[0];
  uint64_t v7 = objc_alloc(&OBJC_CLASS___CLOSTransaction);
  if (v5 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = v6;
  }
  *(void *)(a1 + 88) = -[CLOSTransaction initWithDescription:](v7, "initWithDescription:", v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100AC4E04(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100AC4E30( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, float *a7@<X8>)
{
  uint64_t v8 = (const float *)&dword_10199A640;
  int64x2_t v9 = (int64x2_t)xmmword_101347B90;
  int64x2_t v10 = (int64x2_t)xmmword_1012CB1D0;
  float32x4_t v11 = vld1q_dup_f32(v8);
  uint64_t v12 = -512LL;
  int64x2_t v13 = vdupq_n_s64(4uLL);
  do
  {
    *(float32x4_t *)&v108[v12 + 1024] = vmulq_f32( v11,  vcvt_hight_f32_f64( (int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v10)),  vcvtq_f64_u64((uint64x2_t)v9)));
    float32x4_t v14 = vmulq_f32(*(float32x4_t *)(a1 + v12 + 512), *(float32x4_t *)(a1 + v12 + 512));
    *(float32x4_t *)&v108[v12 + 512] = v14;
    float32x4_t v15 = vmulq_f32(*(float32x4_t *)(a2 + v12 + 512), *(float32x4_t *)(a2 + v12 + 512));
    float32x4_t v16 = vmulq_f32(*(float32x4_t *)(a3 + v12 + 512), *(float32x4_t *)(a3 + v12 + 512));
    *(float32x4_t *)&v108[v12] = vaddq_f32(v15, v16);
    *(float32x4_t *)&v105[v12 + 1024] = vaddq_f32(vaddq_f32(v14, v15), v16);
    *(float32x4_t *)&v105[v12 + 512] = vaddq_f32( vaddq_f32( vmulq_f32(*(float32x4_t *)(a4 + v12 + 512), *(float32x4_t *)(a4 + v12 + 512)),  vmulq_f32(*(float32x4_t *)(a5 + v12 + 512), *(float32x4_t *)(a5 + v12 + 512))),  vmulq_f32(*(float32x4_t *)(a6 + v12 + 512), *(float32x4_t *)(a6 + v12 + 512)));
    int64x2_t v9 = vaddq_s64(v9, v13);
    int64x2_t v10 = vaddq_s64(v10, v13);
    v12 += 16LL;
  }

  while (v12);
  unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_10199A650);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_10199A650))
  {
    qword_10199A648 = vcvtas_u32_f32(sub_1009AF760(50, 0x80uLL, 0.59));
    __cxa_guard_release(&qword_10199A650);
  }

  unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_10199A660);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_10199A660))
  {
    qword_10199A658 = vcvtas_u32_f32(sub_1009AF760(50, 0x80uLL, 4.3));
    __cxa_guard_release(&qword_10199A660);
  }

  unint64_t v19 = qword_10199A648;
  unint64_t v20 = qword_10199A658;
  if (qword_10199A648 <= (unint64_t)qword_10199A658)
  {
    float v22 = 0.0;
    unint64_t v23 = qword_10199A648;
    do
      float v22 = v22 + v106[v23++];
    while (v23 <= qword_10199A658);
    *a7 = v22;
    float v21 = 0.0;
    if (v22 > 0.0)
    {
      do
        float v21 = v21 + *(float *)&v108[4 * v19++];
      while (v19 <= v20);
      float v21 = v21 / v22;
    }
  }

  else
  {
    *a7 = 0.0;
    float v21 = 0.0;
  }

  a7[1] = v21;
  unsigned __int8 v24 = atomic_load((unsigned __int8 *)&qword_10199A670);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_10199A670))
  {
    qword_10199A668 = vcvtas_u32_f32(sub_1009AF760(50, 0x80uLL, 0.39));
    __cxa_guard_release(&qword_10199A670);
  }

  unsigned __int8 v25 = atomic_load((unsigned __int8 *)&qword_10199A680);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_10199A680))
  {
    qword_10199A678 = vcvtas_u32_f32(sub_1009AF760(50, 0x80uLL, 3.12));
    __cxa_guard_release(&qword_10199A680);
  }

  unint64_t v26 = sub_100AC57C0(qword_10199A668, qword_10199A678, (uint64_t)v106, 128LL);
  unint64_t v27 = v26 - 1;
  unint64_t v28 = v26 + 1;
  if (v26 - 1 <= v26 + 1)
  {
    float v31 = 0.0;
    unint64_t v32 = v26 - 1;
    do
      float v31 = v31 + v106[v32++];
    while (v32 <= v28);
    float v30 = 0.0;
    float v29 = 0.0;
    if (v31 > 0.0)
    {
      float v33 = 0.0;
      unint64_t v34 = v26 - 1;
      do
      {
        float v33 = v33 + (float)(*(float *)&v108[4 * v34 + 512] * v106[v34]);
        ++v34;
      }

      while (v34 <= v28);
      float v29 = v33 / v31;
    }

    a7[2] = v29;
    unint64_t v35 = v26 - 1;
    do
      float v30 = v30 + v106[v35++];
    while (v35 <= v28);
  }

  else
  {
    a7[2] = 0.0;
    float v29 = 0.0;
    float v30 = 0.0;
  }

  a7[3] = v30;
  float v36 = (float)(v29 + v29) / *(float *)&dword_10199A640;
  float v37 = (float)((float)(v29 * 3.0) * 0.5) / *(float *)&dword_10199A640;
  unint64_t v38 = vcvtas_u32_f32(v36);
  unint64_t v39 = v38 - 1;
  unint64_t v40 = v38 + 1;
  unint64_t v41 = v38;
  if (v38 - 1 <= v38 + 1)
  {
    unint64_t v42 = v38 - 1;
    unint64_t v41 = v38;
    do
    {
      if (v106[v42] > v106[v41]) {
        unint64_t v41 = v42;
      }
      ++v42;
    }

    while (v42 <= v40);
  }

  float v43 = (float)(v26 + 3);
  unint64_t v44 = vcvtas_u32_f32(v37);
  unint64_t v45 = v44 - 1;
  unint64_t v46 = v44 + 1;
  unint64_t v47 = v44;
  if (v44 - 1 <= v44 + 1)
  {
    unint64_t v48 = v44 - 1;
    unint64_t v47 = v44;
    do
    {
      if (v106[v48] > v106[v47]) {
        unint64_t v47 = v48;
      }
      ++v48;
    }

    while (v48 <= v46);
  }

  float v49 = 0.0;
  float v50 = 0.0;
  if (v36 > v43)
  {
    unint64_t v51 = v41 - 1;
    for (unint64_t i = v41 + 1; v51 <= i; ++v51)
      float v50 = v50 + v106[v51];
  }

  if (v37 > v43)
  {
    unint64_t v53 = v47 - 1;
    unint64_t v54 = v47 + 1;
    if (v53 <= v54)
    {
      float v49 = 0.0;
      do
        float v49 = v49 + v106[v53++];
      while (v53 <= v54);
    }
  }

  float v55 = 0.0;
  if (v30 > 0.0)
  {
    if (v50 > v49) {
      float v49 = v50;
    }
    float v55 = v49 / v30;
  }

  a7[4] = v55;
  if (v27 <= v28)
  {
    unint64_t v56 = v26;
    do
    {
      ++v27;
    }

    while (v27 <= v28);
    unint64_t v27 = v56 - 1;
    unint64_t v28 = v56 + 1;
  }

  for (float j = 0.0; v27 <= v28; ++v27)
    float j = j + *(float *)&v105[4 * v27];
  for (a7[5] = j; v39 <= v40; ++v39)
  {
  }

  for (; v45 <= v46; ++v45)
  {
  }

  float v58 = 0.0;
  BOOL v59 = v36 > v43;
  float v60 = 0.0;
  if (v59)
  {
    for (unint64_t k = v38 - 1; k <= v38 + 1; ++k)
      float v60 = v60 + *(float *)&v105[4 * k];
  }

  if (v37 > v43)
  {
    unint64_t v62 = v44 - 1;
    if (v44 - 1 <= v44 + 1)
    {
      float v58 = 0.0;
      do
        float v58 = v58 + *(float *)&v105[4 * v62++];
      while (v62 <= v44 + 1);
    }
  }

  float v63 = 0.0;
  float v64 = 0.0;
  if (j > 0.0)
  {
    if (v60 <= v58) {
      float v60 = v58;
    }
    float v64 = v60 / j;
  }

  unint64_t v65 = v26 + 2;
  a7[6] = v64;
  for (uint64_t m = 1LL; m != 128; ++m)
    float v63 = v63 + v106[m];
  float v67 = 0.0;
  float v68 = v107 + 0.0;
  a7[7] = v63;
  a7[8] = v68;
  float v69 = v68 / v63;
  if (v63 <= 0.0) {
    float v69 = 0.0;
  }
  a7[9] = v69;
  float v70 = 0.0;
  if (v63 > 0.0) {
    float v70 = *a7 / v63;
  }
  a7[10] = v70;
  for (uint64_t n = 4LL; n != 512; n += 4LL)
    float v67 = v67 + *(float *)&v105[n + 512];
  float v72 = v30 / v63;
  float v73 = 0.0;
  if (v63 <= 0.0) {
    float v72 = 0.0;
  }
  float v74 = v30 / v67;
  if (v67 <= 0.0) {
    float v74 = 0.0;
  }
  a7[13] = v67;
  a7[14] = v74;
  a7[15] = v72;
  if (v65 >= 0xFF) {
    unint64_t v65 = 255LL;
  }
  float v75 = *(float *)&v105[4 * v26 + 1016];
  float v76 = 0.0;
  if (v75 > 0.0) {
    float v76 = v106[v26] / v75;
  }
  float v77 = v106[v65];
  if (v77 > 0.0) {
    float v73 = v106[v26] / v77;
  }
  if (v76 >= v73) {
    float v76 = v73;
  }
  a7[11] = v76;
  float v78 = 0.0;
  for (iunint64_t i = 4LL; ii != 512; ii += 4LL)
    float v78 = v78 + *(float *)&v105[ii];
  float v80 = v78 / v63;
  if (v63 <= 0.0) {
    float v80 = 0.0;
  }
  a7[12] = v80;
  unsigned __int8 v81 = atomic_load((unsigned __int8 *)&qword_10199A690);
  if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_10199A690))
  {
    qword_10199A688 = vcvtas_u32_f32(sub_1009AF760(50, 0x80uLL, 10.0));
    __cxa_guard_release(&qword_10199A690);
  }

  unint64_t v82 = qword_10199A688;
  uint64_t v83 = qword_10199A688;
  if ((unint64_t)qword_10199A688 <= 0x7E)
  {
    uint64_t v84 = &v106[qword_10199A688];
    uint64_t v85 = qword_10199A688;
    uint64_t v86 = qword_10199A688;
    do
    {
      float v87 = *v84;
      if (*v84 <= *(v84 - 1) || v87 <= v84[1] || (uint64_t v83 = v85, v87 <= v106[v86])) {
        uint64_t v83 = v86;
      }
      ++v85;
      ++v84;
      uint64_t v86 = v83;
    }

    while (v85 != 127);
  }

  unint64_t v88 = v83 - 1;
  unint64_t v89 = v83 + 1;
  if (v83 - 1 <= (unint64_t)(v83 + 1))
  {
    float v91 = 0.0;
    unint64_t v92 = v83 - 1;
    do
      float v91 = v91 + v106[v92++];
    while (v92 <= v89);
    float v90 = 0.0;
    float v93 = 0.0;
    if (v91 > 0.0)
    {
      unint64_t v94 = v83 - 1;
      do
      {
        float v93 = v93 + (float)(*(float *)&v108[4 * v94 + 512] * v106[v94]);
        ++v94;
      }

      while (v94 <= v89);
      float v93 = v93 / v91;
    }

    a7[16] = v93;
    do
      float v90 = v90 + v106[v88++];
    while (v88 <= v89);
  }

  else
  {
    a7[16] = 0.0;
    float v90 = 0.0;
  }

  a7[17] = v90;
  if (v82 <= 0x7F)
  {
    float v96 = 0.0;
    for (jfloat j = v82; jj != 128; ++jj)
      float v96 = v96 + v106[jj];
    a7[18] = v96;
    float v98 = 0.0;
    do
      float v98 = v98 + *(float *)&v105[4 * v82++];
    while (v82 != 128);
    float v99 = v98 / v96;
    if (v96 <= 0.0) {
      float v99 = 0.0;
    }
    a7[19] = v98;
    a7[20] = v99;
    float v95 = v90 / v96;
    if (v96 <= 0.0) {
      float v95 = 0.0;
    }
  }

  else
  {
    *((void *)a7 + 9) = 0LL;
    float v95 = 0.0;
    a7[20] = 0.0;
  }

  a7[21] = v95;
  uint64_t v100 = v83 + 2;
  float v101 = *(float *)&v105[4 * v83 + 1016];
  float v102 = 0.0;
  float v103 = 0.0;
  if (v101 > 0.0) {
    float v103 = v106[v83] / v101;
  }
  float v104 = v106[v100];
  if (v104 > 0.0) {
    float v102 = v106[v83] / v104;
  }
  if (v103 < v102) {
    float v102 = v103;
  }
  a7[22] = v102;
}

void sub_100AC5760(_Unwind_Exception *a1)
{
}

unint64_t sub_100AC57C0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 - 1 <= a2) {
    sub_10125D124();
  }
  if (a1 > a2) {
    return a1;
  }
  unint64_t v5 = a1;
  do
  {
    uint64_t v6 = (float *)(a3 + 4 * a1);
    float v7 = *v6;
    ++a1;
    unint64_t v5 = v4;
  }

  while (a1 <= a2);
  return v4;
}

void sub_100AC5838(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100AC5864()
{
  dword_10199A640 = sub_1009AF790(50, 0x80uLL);
}

uint64_t sub_100AC5888(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208])
    {
      sub_100253308(*(void *)(a3 + 8));
      return sub_100253308(*(void *)(a3 + 72));
    }
  }

  return result;
}

uint64_t sub_100AC5928(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 48LL))(*(void *)(a3 + 8));
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void, double))(**(void **)(a3 + 72) + 48LL))(*(void *)(a3 + 72), a1);
  }
  return result;
}

void sub_100AC5984(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)(a3 + 24) = 3LL;
  *(_DWORD *)(a3 + 36) = 0;
  float v6 = *(float *)(a2 + 1368);
  float v7 = *(float *)(a2 + 1372);
  float v8 = *(double *)(a2 + 560);
  double v9 = (*(float *)(a2 + 1380) - v8) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
  int v10 = sub_1003DBFB4(a2);
  else {
    int v11 = 0;
  }
  float v12 = v9;
  float v13 = v6 * sub_100D086F8(v12, v7);
  sub_100FBF0F8(a1 + 8, a2, (uint64_t)buf);
  float v14 = *(float *)((char *)&v52 + 2);
  BOOL v15 = *(_DWORD *)(a2 + 400) != 0;
  BOOL v16 = *(_BYTE *)(a2 + 1220) != 0;
  BOOL v17 = v15 && v16;
  if (v15 && v16) {
    int v18 = 2;
  }
  else {
    int v18 = *(_DWORD *)(a2 + 1216);
  }
  int isTypeStatic = CLMotionActivity::isTypeStatic(*(unsigned int *)(a2 + 288));
  int v20 = isTypeStatic;
  *(void *)(a3 + 32) = 3LL;
  if (v18 == 1)
  {
    if ((v11 & 1) == 0)
    {
      int v25 = 0;
      *(void *)(a3 + 20) = 1082130432LL;
      *(void *)(a3 + 28) = 1082130432LL;
      float v13 = 0.0;
      float v28 = 4.0;
      float v24 = 4.0;
      float v27 = 4.0;
      goto LABEL_34;
    }

    float v24 = v13 * 0.6;
    *(float *)a3 = v13 * 0.6;
    *(float *)(a3 + 20) = v13 * 0.6;
    *(float *)(a3 + 28) = v13 * 0.6;
    int v25 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 1;
    float v28 = 4.0;
    float v27 = *(float *)"333@";
    if ((float)(v13 * 0.6) < 2.8)
    {
      uint64_t v29 = 1077097267LL;
LABEL_28:
      *(void *)(a3 + 20) = v29 & 0xFFFF0000FFFFFFFFLL | 0x300000000LL;
      int v25 = 3;
      float v13 = v24;
LABEL_34:
      *(float *)(a3 + 12) = v28;
      *(_DWORD *)(a3 + 36) = 7;
LABEL_35:
      float v21 = v13;
      *(float *)&int v22 = v24;
      if (v27 >= 2.1) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }

void sub_100AC5EEC(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100AC5F18(uint64_t a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10186DAA8;
  *(void *)(a1 + 72) = off_10186DB50;
  sub_100B14CF0((void *)(a1 + 336), 0LL, 0LL);
  sub_100B14CF0((void *)(a1 + 352), 0LL, 0LL);
  *(_BYTE *)(a1 + 368) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  return a1;
}

void sub_100AC5FCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC5FF8(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  float v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  void *v12 = &off_10182BDA0;
  *(void *)a1 = off_10186DD00;
  *(void *)(a1 + 72) = off_10186DDA8;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10186DD00;
  *(void *)(a1 + 72) = off_10186DDA8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + memset(&v8[8], 0, 208) = 0u;
  *(void *)(a1 + 224) = 0LL;
  *(int64x2_t *)(a1 + 232) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 248) = 0LL;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 272));
  *(void *)(a1 + 272) = &off_10182BDA0;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  BOOL v15 = (int *)(a1 + 256);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 256));
  BOOL v17 = v34;
  if (v34)
  {
    p_uint64_t shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    *BOOL v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10186DCD0);
  }
  int v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186DCD0);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    int v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::CLActivityRecorderDb(const char *, BOOL, float, const std ::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = HealthColdStorageCloudKitMetadata, DataProtect ionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100AC63B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[33] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_1000EAA04(v26);
  sub_100D8A88C(a12);
  void *v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100AC6458()
{
}

void *sub_100AC6460(void *a1)
{
  a1[9] = off_10186DDA8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10186DD00;
  a1[33] = off_10182BD58;
  sub_1001B9C98(a1 + 34);
  sub_1000EAA04(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100AC64E0(uint64_t a1)
{
  return sub_100AC6460((void *)(a1 - 72));
}

void sub_100AC64E8(void *a1)
{
  uint64_t v1 = sub_100AC6460(a1);
  operator delete(v1);
}

void sub_100AC64FC(uint64_t a1)
{
  uint64_t v1 = sub_100AC6460((void *)(a1 - 72));
  operator delete(v1);
}

void sub_100AC6514(void *a1, uint64_t a2)
{
  sqlite3_int64 v4 = 0LL;
  int64x2_t v5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v6 = 0LL;
  if (sub_10029DF68(a1, (uint64_t)&v4))
  {
    *(void *)(a2 + 8) = v5.i64[0];
    sub_100AC6588((uint64_t)a1, a2, v4);
  }

  else
  {
    sub_1001B3964(a1, a2, 1LL);
  }

void sub_100AC6588(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  if (sub_100D8A92C(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 368) || ((*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1), *(_BYTE *)(a1 + 368)))
    {
      uint64_t v7 = a1 + 112;
      uint64_t v6 = *(void *)(a1 + 112);
      uint64_t v21 = a1 + 112;
      (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
      __int16 v22 = 256;
      sub_100B14CF8((uint64_t *)(a1 + 352), &v20);
      if (v20)
      {
        float v8 = (sqlite3_stmt *)sub_100019240(v20);
        if (sub_1003B7480(v8, 1, *(double *)(a2 + 8)))
        {
          double v9 = (sqlite3_stmt *)sub_100019240(v20);
          if (sub_1003B7480(v9, 2, *(double *)(a2 + 16)))
          {
            int v10 = (sqlite3_stmt *)sub_100019240(v20);
            if (sub_1003C2F58(v10, 3, *(void **)(a2 + 24)))
            {
              int v11 = (sqlite3_stmt *)sub_100019240(v20);
              if (sub_1003C2D24(v11, 4, a3))
              {
                uint64_t v12 = *(void *)(a1 + 80);
                uint64_t v13 = (sqlite3_stmt *)sub_100019240(v20);
                sub_1003BB2BC(v12, v13);
              }
            }
          }
        }
      }

      else
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        uint64_t v14 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[CloudKit] Invalid SQL statement", buf, 2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186DCD0);
          }
          __int16 v19 = 0;
          int v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "[CloudKit] Invalid SQL statement",  &v19,  2);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CMHealthColdStorageCloudKitMetadataDb::updateRecord(const HealthColdStorageCloudKitMetadata &, uint64_t)",  "%s\n",  v18);
        }
      }

      uint64_t v15 = v20;
      uint64_t v20 = 0LL;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      char v16 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "[CloudKit], Unable to initialize CloudKit metadata DB",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        LOWORD(v21) = 0;
        BOOL v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "[CloudKit], Unable to initialize CloudKit metadata DB",  &v21,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CMHealthColdStorageCloudKitMetadataDb::updateRecord(const HealthColdStorageCloudKitMetadata &, uint64_t)",  "%s\n",  v17);
      }
    }
  }

void sub_100AC6950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a5 + 8LL))(a5);
  }
  sub_1011C52D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC69A0(uint64_t a1)
{
  uint64_t result = sub_1003C1048(*(void *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100AC6A24(a1);
    sub_1003B59A0( *(void *)(a1 + 80),  "ColdStorageCloudKitMetadata",  (const char **)&off_10186DBE0,  (const std::string::value_type **)&off_10198F478,  0);
    *(void *)(a1 + 336) = sub_1003BF158( *(void *)(a1 + 80),  "SELECT * FROM ColdStorageCloudKitMetadata ORDER BY id DESC LIMIT 1");
    *(void *)(a1 + 344) = v3;
    uint64_t result = sub_1003BF158( *(void *)(a1 + 80),  "UPDATE ColdStorageCloudKitMetadata SET startTime = ?, lastUpdateTime = ?, metadata = ? WHERE id = ?");
    *(void *)(a1 + 352) = result;
    *(void *)(a1 + 360) = v4;
    *(_BYTE *)(a1 + 368) = 1;
  }

  return result;
}

uint64_t sub_100AC6A24(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "ColdStorageCloudKitMetadata");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    float v8 = "startTime";
    do
    {
      unint64_t v38 = v8;
      int v39 = 5;
      __int16 v40 = 0;
      char v41 = 0;
      char v42 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "ColdStorageCloudKitMetadata", v8, (uint64_t)&v38) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v34);
        double v9 = sub_10000CF44(&v35, (uint64_t)"ALTER TABLE ColdStorageCloudKitMetadata ADD COLUMN ", 51LL);
        size_t v10 = strlen(v8);
        int v11 = sub_10000CF44(v9, (uint64_t)v8, v10);
        uint64_t v12 = sub_10000CF44(v11, (uint64_t)" ", 1LL);
        uint64_t v13 = (const char *)sub_1003BCC40((int)(&off_10186DBE0)[v3 + 7]);
        size_t v14 = strlen(v13);
        uint64_t v15 = sub_10000CF44(v12, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v31, &v36);
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          BOOL v17 = &v31;
        }
        else {
          BOOL v17 = (std::stringbuf::string_type *)v31.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v29);
        uint64_t v18 = v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        uint64_t v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v31);
        uint64_t v21 = sub_10000CF44( &v31.__r_.__value_.__l.__cap_,  (uint64_t)"UPDATE VO2MaxCloudKitSyncEngineMetadata SET ",  44LL);
        size_t v22 = strlen(v8);
        float v23 = sub_10000CF44(v21, (uint64_t)v8, v22);
        sub_10000CF44(v23, (uint64_t)" = 0;", 5LL);
        uint64_t v24 = *(void *)(a1 + 80);
        std::stringbuf::str(&v29, &v32);
        if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v25 = &v29;
        }
        else {
          int v25 = (std::stringbuf::string_type *)v29.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v24, (char *)v25, &v30);
        uint64_t v26 = v30;
        uint64_t v30 = 0LL;
        uint64_t v27 = *(void *)(a1 + 80);
        uint64_t v28 = (sqlite3_stmt *)sub_100019240(v26);
        sub_1003BB2BC(v27, v28);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
        }
        v31.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + *(void *)(v5 - sub_100008390(v2, *(void **)(v1 + 24)) = v7;
        v31.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v32);
        std::ios::~ios(&v33);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v34[0] = v5;
        *(void *)((char *)v34 + *(void *)(v5 - sub_100008390(v2, *(void **)(v1 + 24)) = v7;
        std::string::size_type v35 = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        int v4 = 1;
      }

      float v8 = (&off_10186DBE0)[v3 + 12];
      v3 += 6LL;
    }

    while (v3 != 18);
    uint64_t result = sub_100AC7310( a1,  "ColdStorageCloudKitMetadata",  (const char **)&off_10186DBE0,  (const std::string::value_type **)&off_10198F478);
  }

  return result;
}

void sub_100AC6DC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void *sub_100AC6E60@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "ColdStorageCloudKitMetadata");
}

void *sub_100AC6E70@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "ColdStorageCloudKitMetadata");
}

void sub_100AC6E80(uint64_t a1, uint64_t a2)
{
  if (sub_100D8A92C(a1 + 72))
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO ColdStorageCloudKitMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)",  buf);
    uint64_t v4 = *(void *)buf;
    if (*(void *)buf)
    {
      std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
      if (sub_1003B7480(v5, 1, *(double *)(a2 + 8)))
      {
        std::string::size_type v6 = (sqlite3_stmt *)sub_100019240(v4);
        if (sub_1003B7480(v6, 2, *(double *)(a2 + 16)))
        {
          std::string::size_type v7 = (sqlite3_stmt *)sub_100019240(v4);
          if (sub_1003C2F58(v7, 3, *(void **)(a2 + 24)))
          {
            uint64_t v8 = *(void *)(a1 + 80);
            double v9 = (sqlite3_stmt *)sub_100019240(v4);
            sub_1003BB2BC(v8, v9);
          }
        }
      }

      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      size_t v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CloudKit] Invalid SQL statement", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        v13[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "[CloudKit] Invalid SQL statement",  v13,  2);
        uint64_t v12 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CMHealthColdStorageCloudKitMetadataDb::insertRecordUL(const HealthColdStorageCloudKitMetadata &, BOOL)",  "%s\n",  v11);
        if (v12 != buf) {
          free(v12);
        }
      }
    }
  }

void sub_100AC70A8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100AC70CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v14;
  if (!v14)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186DCD0);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CloudKit] Invalid SQL statement", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      __int16 v13 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "[CloudKit] Invalid SQL statement",  &v13,  2);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLActivityDB::ActivityCode CMHealthColdStorageCloudKitMetadataDb::getMostRecentRecordUL(HealthColdStorag eCloudKitMetadata &) const",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

void sub_100AC72E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC7310(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186DCD0);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      __int16 v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::migrateDbConstraints(const char *, const CLSqliteD atabase::ColumnInfo *, const char **) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityD B::ClassCDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)uint64_t v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    int v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)double v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      uint64_t v21 = &__p;
    }
    else {
      uint64_t v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v34 = &v139;
    }
    else {
      unint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v41 = &__p;
    }
    else {
      char v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    char v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    int v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v47 = &__p;
      }
      else {
        __int16 v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      double v48 = v143;
    }
    else {
      double v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    int v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    double v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v54 = buf;
    }
    else {
      double v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    uint64_t v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    double v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v60 = buf;
    }
    else {
      int v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    int v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    int v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    double v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v69 = &__p;
    }
    else {
      float v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    float v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    float v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      float v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        float v75 = &__p;
      }
      else {
        float v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    float v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      double v79 = &__p;
    }
    else {
      double v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    float v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v85 = &__p;
      }
      else {
        uint64_t v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      uint64_t v86 = v143;
    }
    else {
      uint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    unint64_t v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    float v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v95 = &__p;
    }
    else {
      float v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    float v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      float v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        float v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          float v103 = &__p;
        }
        else {
          float v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        float v104 = v141;
      }
      else {
        float v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      int v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      int v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      double v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      int v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v114 = buf;
      }
      else {
        unint64_t v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      unint64_t v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + memset(&v6[1], 0, 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v121 = &__p;
      }
      else {
        uint64_t v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      __int128 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      __int128 v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v13memset(&v6[1], 0, 7) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        double v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::migrateDbConstraints(const char *, const CLSqlit eDatabase::ColumnInfo *, const char **) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActiv ityDB::ClassCDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      __int128 v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v13memset(&v6[1], 0, 7) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        uint64_t v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::migrateDbConstraints(const char *, const CLSqlit eDatabase::ColumnInfo *, const char **) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActiv ityDB::ClassCDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100AC84A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

NSData *sub_100AC87C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100AC87D4(a2, a3);
}

NSData *sub_100AC87D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  int v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  uint64_t v8 = sqlite3_column_blob(v7, 3);
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
  uint64_t result =  -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  v8,  sqlite3_column_bytes(v9, 3));
  *(void *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100AC8884(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v34);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if (HIBYTE(v35)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10125D2F0(v4);
LABEL_44:
    sub_100007008();
  }

  uint64_t v30 = v34[1];
  operator delete(v34[0]);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v34);
    int v6 = sub_10000CF44(&v35, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if (__p[23] >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = *(_BYTE **)__p;
    }
    if (__p[23] >= 0) {
      uint64_t v8 = __p[23];
    }
    else {
      uint64_t v8 = *(void *)&__p[8];
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v36);
    if (__p[23] >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = *(char **)__p;
    }
    sub_1003C0D54(v10, v11, &v32);
    uint64_t v12 = v32;
    uint64_t v32 = 0LL;
    uint64_t v33 = v12;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_1003C0454(a1[10]);
    *(void *)std::string __p = 0LL;
    *(int64x2_t *)&__p[8] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(void *)&__p[24] = 0LL;
    while (!sub_1001BA11C((uint64_t)a1, &v33, (uint64_t)__p))
    {
      __int16 v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v17 = (v13 - *a2) >> 5;
        unint64_t v18 = v17 + 1;
        uint64_t v19 = v14 - (void)*a2;
        if (v19 >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          uint64_t v21 = (char *)sub_10000835C((uint64_t)(a2 + 2), v20);
        }
        else {
          uint64_t v21 = 0LL;
        }
        size_t v22 = &v21[32 * v17];
        __int128 v23 = *(_OWORD *)&__p[16];
        *(_OWORD *)size_t v22 = *(_OWORD *)__p;
        *((_OWORD *)v22 + 1) = v23;
        size_t v25 = *a2;
        std::string::size_type v24 = a2[1];
        uint64_t v26 = v22;
        if (v24 != *a2)
        {
          do
          {
            __int128 v27 = *((_OWORD *)v24 - 1);
            *((_OWORD *)v26 - 2) = *((_OWORD *)v24 - 2);
            *((_OWORD *)v26 - 1) = v27;
            v26 -= 32;
            v24 -= 32;
          }

          while (v24 != v25);
          std::string::size_type v24 = *a2;
        }

        uint64_t v16 = v22 + 32;
        *a2 = v26;
        a2[1] = v22 + 32;
        a2[2] = &v21[32 * v20];
        if (v24) {
          operator delete(v24);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)&__p[16];
        *(_OWORD *)__int16 v13 = *(_OWORD *)__p;
        *((_OWORD *)v13 + 1) = v15;
        uint64_t v16 = v13 + 32;
      }

      a2[1] = v16;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v28 = v33;
    uint64_t v33 = 0LL;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
    *(void **)((char *)v34
    uint64_t v35 = v29;
    std::streambuf::~streambuf(&v36);
    return std::ios::~ios(&v37);
  }

  return result;
}

void sub_100AC8B58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC8BC0(void *a1, void **a2, double a3, double a4)
{
  uint64_t v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v40);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    if (HIBYTE(v41)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10125D45C(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v40[1];
  operator delete(v40[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v40);
  int v11 = sub_10000CF44(&v41, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if (__p[23] >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = *(_BYTE **)__p;
  }
  if (__p[23] >= 0) {
    uint64_t v13 = __p[23];
  }
  else {
    uint64_t v13 = *(void *)&__p[8];
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v42;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v42);
  if (__p[23] >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = *(char **)__p;
  }
  sub_1003C0D54(v15, v16, &v38);
  uint64_t v5 = v38;
  uint64_t v38 = 0LL;
  uint64_t v39 = v5;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    unint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      *(void *)std::string __p = 0LL;
      *(int64x2_t *)&__p[8] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      *(void *)&__p[24] = 0LL;
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v39, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        unint64_t v20 = a2[1];
        unint64_t v21 = (unint64_t)a2[2];
        if ((unint64_t)v20 >= v21)
        {
          uint64_t v24 = ((char *)v20 - (_BYTE *)*a2) >> 5;
          unint64_t v25 = v24 + 1;
          uint64_t v26 = v21 - (void)*a2;
          if (v26 >> 4 > v25) {
            unint64_t v25 = v26 >> 4;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27) {
            uint64_t v28 = (char *)sub_10000835C((uint64_t)(a2 + 2), v27);
          }
          else {
            uint64_t v28 = 0LL;
          }
          uint64_t v29 = &v28[32 * v24];
          __int128 v30 = *(_OWORD *)&__p[16];
          *(_OWORD *)uint64_t v29 = *(_OWORD *)__p;
          *((_OWORD *)v29 + 1) = v30;
          uint64_t v32 = (char *)*a2;
          __int128 v31 = (char *)a2[1];
          uint64_t v33 = v29;
          if (v31 != *a2)
          {
            do
            {
              __int128 v34 = *((_OWORD *)v31 - 1);
              *((_OWORD *)v33 - 2) = *((_OWORD *)v31 - 2);
              *((_OWORD *)v33 - 1) = v34;
              v33 -= 32;
              v31 -= 32;
            }

            while (v31 != v32);
            __int128 v31 = (char *)*a2;
          }

          __int128 v23 = v29 + 32;
          *a2 = v33;
          a2[1] = v29 + 32;
          a2[2] = &v28[32 * v27];
          if (v31) {
            operator delete(v31);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)&__p[16];
          *unint64_t v20 = *(_OWORD *)__p;
          v20[1] = v22;
          __int128 v23 = v20 + 2;
        }

        a2[1] = v23;
      }

      uint64_t v5 = v39;
      goto LABEL_43;
    }
  }

void sub_100AC8ED8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC8F40(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v38 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186DCD0);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)buf = 134349056;
        *(void *)std::stringbuf v42 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        uint64_t v34 = *(void *)(a1 + 216);
        int v39 = 134349056;
        uint64_t v40 = v34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v39,  12);
        std::stringbuf v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::setDatabaseAccessible() [T = HealthColdS torageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186DCD0);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v11;
      __int16 v45 = 2049;
      uint64_t v46 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    uint64_t v13 = *(void *)(a1 + 184);
    uint64_t v14 = *(void *)(a1 + 192);
    uint64_t v15 = (void *)(v13 + 8LL * (*(void *)(a1 + 208) >> 7));
    if (v14 == v13) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = *v15 + 32 * (*(void *)(a1 + 208) & 0x7FLL);
    }
    while (1)
    {
      if (v14 == v13)
      {
        uint64_t v22 = 0LL;
      }

      else
      {
        unint64_t v21 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        uint64_t v22 = *(void *)(v13 + ((v21 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v21 & 0x7F);
      }

      if (v16 == v22) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10186DDE8);
      }
      __int128 v23 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10186DDE8);
        }
        LOWORD(v39) = 0;
        LODWORD(v3memset(&v6[1], 0, 7) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v39,  v37);
        uint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::setDatabaseAccessible() [T = HealthColdS torageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v16, 1LL);
      v16 += 32LL;
      if (v16 - *v15 == 4096)
      {
        uint64_t v24 = v15[1];
        ++v15;
        uint64_t v16 = v24;
      }

      uint64_t v13 = *(void *)(a1 + 184);
      uint64_t v14 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10186DCD0);
    }
    uint64_t v17 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      unint64_t v18 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
    }

    uint64_t v19 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v20 = (void *)(a1 + 88);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v20;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  unint64_t v27 = *(void ***)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 192);
      unint64_t v27 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v27;
      unint64_t v29 = v30 - (void)v27;
    }

    while (v29 > 0x10);
  }

  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 64LL;
  }

  else
  {
    if (v29 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v31 = 128LL;
  }

  *(void *)(a1 + memset(&v8[8], 0, 208) = v31;
LABEL_61:
  uint64_t v32 = *(void **)(a1 + 144);
  if (v32)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100AC9648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

id *sub_100AC967C(uint64_t a1, uint64_t a2, char a3)
{
  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v35);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  uint64_t v32 = 0LL;
  int64x2_t v33 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v34 = 0LL;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104LL))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v36,  2);
        uint64_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)(a2 + 8);
    double v8 = *(double *)v33.i64;
    double v9 = v7 - *(double *)v33.i64;
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
      }
      uint64_t v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        double v41 = *(double *)v33.i64;
        __int16 v42 = 2050;
        uint64_t v43 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        uint64_t v23 = *(void *)(a2 + 8);
        int v36 = 134349312;
        double v37 = *(double *)v33.i64;
        __int16 v38 = 2050;
        uint64_t v39 = v23;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v36,  22);
        unint64_t v25 = (uint8_t *)v24;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)(a2 + 8);
      double v8 = *(double *)v33.i64;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          double v41 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186DCD0);
          }
          double v26 = *(double *)(a2 + 8);
          int v36 = 134217984;
          double v37 = v26;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v36));
          uint64_t v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, bo ol) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        double v18 = v31;
      }

      double v19 = v17 - v18;
      unint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v41 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10186DCD0);
        }
        int v36 = 134217984;
        double v37 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v36));
        uint64_t v30 = (uint8_t *)v29;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v29);
        if (v30 != buf) {
          free(v30);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100AC9DCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100AC9DF8(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10125D5C8(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100ACA058(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10125D734(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100ACA290(uint64_t a1)
{
  return sub_100AC8F40(a1 - 72);
}

void sub_100ACA298(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100ACA2C4(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10125D8A0(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100ACA4EC(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100ACA518(unsigned int a1)
{
  return (a1 < 0x28) & (0x800000003FuLL >> a1);
}

uint64_t sub_100ACA534(uint64_t a1, char a2)
{
  *(void *)a1 = off_10186DE18;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_OWORD *)buf = xmmword_1012CB1D0;
  sub_100ACBB3C(a1 + 40, buf, 2LL);
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(_DWORD *)(a1 + 88) = 180;
  *(_BYTE *)(a1 + 92) = 1;
  *(_BYTE *)(a1 + 93) = a2;
  *(_BYTE *)(a1 + 94) = 1;
  sub_1000210A0((void **)(a1 + 64), 0xB4uLL);
  *(_BYTE *)(a1 + 94) = sub_1004FD160() ^ 1;
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186DEB8);
  }
  uint64_t v4 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 94);
    buf[0] = 67240192;
    buf[1] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#ilsa,CLStreamingAwareLocationProviderStateMachine,initializer,isLocationStreamingAllowed,%{public}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    int v7 = *(unsigned __int8 *)(a1 + 94);
    v9[0] = 67240192;
    v9[1] = v7;
    double v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934998,  0LL,  "#ilsa,CLStreamingAwareLocationProviderStateMachine,initializer,isLocationStreamingAllowed,%{public}d",  v9,  8);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStreamingAwareLocationProviderStateMachine::CLStreamingAwareLocationProviderStateMachine(BOOL)",  "%s\n",  v8);
  }

  return a1;
}

void sub_100ACA77C(_Unwind_Exception *a1)
{
  int v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 72) = v7;
    operator delete(v7);
  }

  sub_100008390(v3, *(void **)(v1 + 48));
  sub_100008390(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_100ACA7BC(uint64_t a1)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186DEB8);
  }
  uint64_t v2 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 94);
    *(_DWORD *)buf = 67240192;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    int v5 = *(unsigned __int8 *)(a1 + 94);
    v7[0] = 67240192;
    v7[1] = v5;
    int v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934998,  2LL,  "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,%{public}d",  v7,  8);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStreamingAwareLocationProviderStateMachine::isLocationStreamingAllowed() const",  "%s\n",  v6);
  }

  return *(unsigned __int8 *)(a1 + 94);
}

void sub_100ACA970(unsigned __int8 *a1, int a2)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186DEB8);
  }
  uint64_t v4 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a1[94];
    *(_DWORD *)buf = 67240448;
    int v15 = v5;
    __int16 v16 = 1026;
    int v17 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,old,%{public}d,new,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    int v8 = a1[94];
    v11[0] = 67240448;
    v11[1] = v8;
    __int16 v12 = 1026;
    int v13 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934998,  2LL,  "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,old,%{public}d,new,%{public}d",  v11,  14);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLStreamingAwareLocationProviderStateMachine::setLocationStreamingAllowedState(const BOOL)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  int v6 = a1[94];
  a1[94] = a2;
  if (v6 != a2)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    (*(void (**)(unsigned __int8 *, CFAbsoluteTime))(*(void *)a1 + 96LL))(a1, Current);
  }

void sub_100ACAB60(_BYTE *a1, uint64_t a2, double a3)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186DEB8);
  }
  int v6 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setLocalGPSRestricted,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    v9[0] = 67109120;
    v9[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934998,  0LL,  "setLocalGPSRestricted,%d",  v9);
    int v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLStreamingAwareLocationProviderStateMachine::setLocalGPSRestricted(BOOL, CFAbsoluteTime)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if (a1[92] != (_DWORD)a2)
  {
    if (a1[93])
    {
      a1[92] = a2;
      (*(void (**)(_BYTE *, uint64_t, double))(*(void *)a1 + 136LL))(a1, a2, a3);
    }
  }

uint64_t sub_100ACAD48(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, double a5)
{
  unsigned int v8 = a2;
  HIDWORD(v66) = a2;
  if (*a3 >= 3u)
  {
    if (*a3 != 9) {
      goto LABEL_16;
    }
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    uint64_t v14 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2050;
      *(void *)&buf[20] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Source no longer available, source:%{public, location:CLStreamingAwareLocationProvi derStateMachine::LocationSource}lld}",  buf,  0x1Cu);
    }

    *(void *)buf = (char *)&v66 + 4;
    __int16 v12 = sub_100228E48((uint64_t **)(a1 + 40), (int *)&v66 + 1, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
    int v13 = 1;
  }

  else
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    uint64_t v10 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2050;
      *(void *)&buf[20] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Source now available, source:%{public, location:CLStreamingAwareLocationProviderSta teMachine::LocationSource}lld}",  buf,  0x1Cu);
    }

    int v11 = (uint64_t **)(a1 + 40);
    if (*(_DWORD *)(a4 + 96) == 1)
    {
      *(void *)buf = (char *)&v66 + 4;
      __int16 v12 = sub_100228E48(v11, (int *)&v66 + 1, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
      int v13 = 3;
    }

    else
    {
      *(void *)buf = (char *)&v66 + 4;
      __int16 v12 = sub_100228E48(v11, (int *)&v66 + 1, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
      int v13 = 2;
    }
  }

  *((_DWORD *)v12 + 8) = v13;
  unsigned int v8 = HIDWORD(v66);
LABEL_16:
  if (v8 == 1)
  {
    int v15 = (void **)(a1 + 64);
    __int16 v16 = (uint64_t **)(a1 + 40);
    if (*(void *)(a1 + 72) - *(void *)(a1 + 64) < 0x2CDuLL)
    {
      *(void *)buf = (char *)&v66 + 4;
      uint64_t v20 = sub_100228E48(v16, (int *)&v66 + 1, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
      uint64_t v21 = v20;
      unint64_t v22 = *(void *)(a1 + 80);
      uint64_t v23 = *(char **)(a1 + 72);
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = (char *)*v15;
        uint64_t v26 = (v23 - (_BYTE *)*v15) >> 2;
        unint64_t v27 = v26 + 1;
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          uint64_t v30 = (char *)sub_10000956C(a1 + 80, v29);
          uint64_t v25 = *(char **)(a1 + 64);
          uint64_t v23 = *(char **)(a1 + 72);
        }

        else
        {
          uint64_t v30 = 0LL;
        }

        double v31 = &v30[4 * v26];
        uint64_t v32 = &v30[4 * v29];
        *(_DWORD *)double v31 = *((_DWORD *)v21 + 8);
        std::stringbuf v24 = v31 + 4;
        while (v23 != v25)
        {
          int v33 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v33;
          v31 -= 4;
        }

        *(void *)(a1 + 64) = v31;
        *(void *)(a1 + 72) = v24;
        *(void *)(a1 + 80) = v32;
        if (v25) {
          operator delete(v25);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v23 = *((_DWORD *)v20 + 8);
        std::stringbuf v24 = v23 + 4;
      }

      *(void *)(a1 + 72) = v24;
      int v19 = 180;
    }

    else
    {
      *(void *)buf = (char *)&v66 + 4;
      int v17 = sub_100228E48(v16, (int *)&v66 + 1, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
      int v18 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(*(void *)(a1 + 64) + 4LL * (v18 % 180)) = *((_DWORD *)v17 + 8);
      int v19 = v18 + 1;
    }

    *(_DWORD *)(a1 + 88) = v19;
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    uint64_t v34 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *(int **)(a1 + 64);
      int v36 = *(int **)(a1 + 72);
      if (v35 == v36)
      {
        uint64_t v43 = 0LL;
        uint64_t v37 = 0LL;
        uint64_t v40 = 0LL;
        uint64_t v46 = 0LL;
      }

      else
      {
        uint64_t v37 = 0LL;
        __int16 v38 = *(int **)(a1 + 64);
        do
        {
          int v39 = *v38++;
          if (v39 == 3) {
            ++v37;
          }
        }

        while (v38 != v36);
        uint64_t v40 = 0LL;
        double v41 = *(int **)(a1 + 64);
        do
        {
          int v42 = *v41++;
          if (v42 == 2) {
            ++v40;
          }
        }

        while (v41 != v36);
        uint64_t v43 = 0LL;
        std::string::size_type v44 = *(int **)(a1 + 64);
        do
        {
          int v45 = *v44++;
          if (v45 == 1) {
            ++v43;
          }
        }

        while (v44 != v36);
        uint64_t v46 = 0LL;
        __int16 v47 = *(int **)(a1 + 64);
        do
        {
          if (!*v47++) {
            ++v46;
          }
        }

        while (v47 != v36);
      }

      *(_DWORD *)buf = 134350080;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&_BYTE buf[14] = v40;
      *(_WORD *)&_BYTE buf[22] = 2050;
      *(void *)&_BYTE buf[24] = v43;
      __int16 v78 = 2050;
      uint64_t v79 = v46;
      __int16 v80 = 2050;
      uint64_t v81 = v36 - v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "Companion Availability Statistics,ahq,%{public}ld,a,%{public}ld,ua,%{public}ld,uk,%{public}ld,s,%{public}zu",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10186DEB8);
      }
      int v50 = *(int **)(a1 + 64);
      __int128 v51 = *(int **)(a1 + 72);
      if (v50 == v51)
      {
        uint64_t v58 = 0LL;
        uint64_t v52 = 0LL;
        uint64_t v55 = 0LL;
        uint64_t v61 = 0LL;
      }

      else
      {
        uint64_t v52 = 0LL;
        __int128 v53 = *(int **)(a1 + 64);
        do
        {
          int v54 = *v53++;
          if (v54 == 3) {
            ++v52;
          }
        }

        while (v53 != v51);
        uint64_t v55 = 0LL;
        uint64_t v56 = *(int **)(a1 + 64);
        do
        {
          int v57 = *v56++;
          if (v57 == 2) {
            ++v55;
          }
        }

        while (v56 != v51);
        uint64_t v58 = 0LL;
        __int128 v59 = *(int **)(a1 + 64);
        do
        {
          int v60 = *v59++;
          if (v60 == 1) {
            ++v58;
          }
        }

        while (v59 != v51);
        uint64_t v61 = 0LL;
        int v62 = *(int **)(a1 + 64);
        do
        {
          if (!*v62++) {
            ++v61;
          }
        }

        while (v62 != v51);
      }

      int v67 = 134350080;
      uint64_t v68 = v52;
      __int16 v69 = 2050;
      uint64_t v70 = v55;
      __int16 v71 = 2050;
      uint64_t v72 = v58;
      __int16 v73 = 2050;
      uint64_t v74 = v61;
      __int16 v75 = 2050;
      uint64_t v76 = v51 - v50;
      LODWORD(v66) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934998,  2LL,  "Companion Availability Statistics,ahq,%{public}ld,a,%{public}ld,ua,%{public}ld,uk,%{public}ld,s,%{public}zu",  &v67,  v66);
      __int128 v65 = (char *)v64;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLStreamingAwareLocationProviderStateMachine::receivedLocationNotification(LocationSource, const CL LocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, CFAbsoluteTime)",  "%s\n",  v64);
      if (v65 != buf) {
        free(v65);
      }
    }
  }

  (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, a5);
  return (*(uint64_t (**)(uint64_t, void, _DWORD *, uint64_t, double))(*(void *)a1 + 104LL))( a1,  HIDWORD(v66),  a3,  a4,  a5);
}

uint64_t sub_100ACB400(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, a2);
}

uint64_t sub_100ACB444(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, a2);
}

uint64_t sub_100ACB488(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, a2);
}

uint64_t sub_100ACB4CC(uint64_t **a1, int a2, int a3, double a4)
{
  int v11 = a2;
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186DEB8);
  }
  unsigned int v8 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = a2;
    __int16 v18 = 1026;
    int v19 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Client interest changed, notification:%{public, location:CLLocationProvider_Type::Not ification}lld, is interested:%{public}d}",  buf,  0x22u);
  }

  int v9 = a1 + 1;
  if (a3) {
    sub_10004A8FC(v9, &v11, &v11);
  }
  else {
    sub_1004EF494((uint64_t)v9, &v11);
  }
  return ((uint64_t (*)(uint64_t **, double))(*a1)[12])(a1, a4);
}

uint64_t *sub_100ACB610(uint64_t a1, uint64_t a2)
{
  int v15 = a2;
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186DEB8);
  }
  uint64_t v4 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2050;
    *(void *)&buf[20] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Stopping location for source, source:%{public, location:CLStreamingAwareLocationProvi derStateMachine::LocationSource}lld}",  buf,  0x1Cu);
  }

  uint64_t v5 = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v14 = _Q0;
  do
  {
    uint64_t v11 = dword_101347C98[v5];
    __int16 v12 = *(void (****)(void, uint64_t, uint64_t, void, _BYTE *))(a1 + 32);
    *(void *)&uint8_t buf[16] = 0LL;
    int v17 = 0;
    *(_OWORD *)buf = v14;
    *(_DWORD *)&_BYTE buf[24] = 0;
    (**v12)(v12, a2, v11, 0LL, buf);
    ++v5;
  }

  while (v5 != 3);
  *(void *)buf = &v15;
  uint64_t result = sub_100228E48((uint64_t **)(a1 + 40), &v15, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t *sub_100ACB794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (char *)dword_101347C98;
  while (!*(void *)(a1 + 16))
  {
LABEL_8:
    v6 += 4;
    if (v6 == "44CLStreamingAwareLocationProviderStateMachine")
    {
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10186DEB8);
      }
      uint64_t v10 = (os_log_s *)qword_101934998;
      if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_FAULT))
      {
        int v17 = 68289026;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:State is out of sync with registrations}",  (uint8_t *)&v17,  0x12u);
        if (qword_101934990 != -1) {
          dispatch_once(&qword_101934990, &stru_10186DEB8);
        }
      }

      uint64_t v11 = (os_log_s *)qword_101934998;
      if (os_signpost_enabled((os_log_t)qword_101934998))
      {
        int v17 = 68289026;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "State is out of sync with registrations",  "{msg%{public}.0s:State is out of sync with registrations}",  (uint8_t *)&v17,  0x12u);
      }

      return sub_100ACB610(a1, a2);
    }
  }

  int v7 = *(_DWORD *)v6;
  unsigned int v8 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    int v9 = *((_DWORD *)v8 + 7);
    if (v7 >= v9) {
      break;
    }
LABEL_7:
    unsigned int v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_8;
    }
  }

  if (v9 < v7)
  {
    ++v8;
    goto LABEL_7;
  }

  if (v7 | a2)
  {
LABEL_25:
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
  }

  else
  {
    if (!*(_BYTE *)(a1 + 93) || !*(_BYTE *)(a1 + 92))
    {
      int v7 = 0;
      goto LABEL_25;
    }

    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186DEB8);
    }
    int v13 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 68289026;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Local GPS is forbidden right now.  Downgrading to wifi accuracy}",  (uint8_t *)&v17,  0x12u);
      int v7 = 1;
      goto LABEL_25;
    }

    int v7 = 1;
  }

  __int128 v14 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    int v15 = *(unsigned __int8 *)(a3 + 17);
    int v17 = 68289794;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2050;
    uint64_t v22 = a2;
    __int16 v23 = 2050;
    uint64_t v24 = v7;
    __int16 v25 = 1026;
    int v26 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Starting location for source, source:%{public, location:CLStreamingAwareLocationProvi derStateMachine::LocationSource}lld, notification:%{public, location:CLLocationProvider_Type::Notification}lld , include motion:%{public}d}",  (uint8_t *)&v17,  0x2Cu);
  }

  for (uint64_t i = 0LL; i != 12; i += 4LL)
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a2);
  return result;
}

void sub_100ACBB10(id a1)
{
  qword_101934998 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_100ACBB3C(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1004EF350((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8LL;
    }

    while (v6);
  }

  return a1;
}

void sub_100ACBBA0(_Unwind_Exception *a1)
{
}

void sub_100ACBC5C(id a1)
{
  qword_10199A698 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLDataProtectionManagerSilo");
}

uint64_t sub_100ACBD10(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100ACC3FC;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199A6A8 != -1) {
    dispatch_once(&qword_10199A6A8, block);
  }
  return qword_1019A1B78;
}

uint64_t sub_100ACC038(_DWORD *a1)
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_10186E0A0);
  }
  uint64_t v2 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1[28];
    *(_DWORD *)buf = 67240192;
    int v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#dataprotection postDataAvailability, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    int v5 = a1[28];
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#dataprotection postDataAvailability, %{public}d",  v8,  8);
    int v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDataProtectionManager::postDataAvailability()", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  *(_DWORD *)buf = a1[28];
  v8[0] = 0;
  return (*(uint64_t (**)(_DWORD *, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v8,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
}

BOOL sub_100ACC244()
{
  int v0 = MKBDeviceUnlockedSinceBoot();
  if (v0 < 0)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    uint64_t v1 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      int v7 = v0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "#dataprotection MKBDeviceUnlockedSinceBoot returned with an error, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E0A0);
      }
      v5[0] = 67240192;
      v5[1] = v0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  16LL,  "#dataprotection MKBDeviceUnlockedSinceBoot returned with an error, %{public}d",  v5,  8);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLDataProtectionManager::deviceUnlockedSinceBoot()", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

  return v0 == 1;
}

uint64_t sub_100ACC3FC(uint64_t a1)
{
  uint64_t v2 = operator new(0x80uLL);
  uint64_t result = sub_100ACC448((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A1B78 = (uint64_t)v2;
  return result;
}

void sub_100ACC434(_Unwind_Exception *a1)
{
}

uint64_t sub_100ACC448(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100ACC9E0(a1, "DataProtectionManager", a2);
  *(void *)uint64_t v3 = off_10186DF08;
  *(_DWORD *)(v3 + 112) = 1;
  *(void *)(v3 + 120) = 0LL;
  char v23 = 1;
  int v4 = MKBDeviceFormattedForContentProtection();
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_10186E0A0);
  }
  int v5 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v29 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#dataprotection init, content protection formatting, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    int v24 = 67240192;
    int v25 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#dataprotection init, content protection formatting, %{public}d",  &v24,  8);
    __int16 v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  if (v4)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)a1,  (CFNotificationCallback)sub_100ACCA7C,  kMobileKeyBagLockStatusNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    int v7 = MKBGetDeviceLockState(0LL);
    int v8 = v7;
    if (v7 < 0)
    {
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E0A0);
      }
      int v10 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        int v29 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_10186E0A0);
        }
        int v24 = 67240192;
        int v25 = v8;
        LODWORD(v21) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d",  &v24,  v21);
        uint64_t v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      *(_DWORD *)(a1 + 112) = 0;
    }

    else if ((v7 - 1) <= 1)
    {
      *(_DWORD *)(a1 + 112) = 0;

      if (sub_100ACCC9C()) {
        int v9 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "CLDataProtectionManager::fLockedTransaction");
      }
      else {
        int v9 = 0LL;
      }
      *(void *)(a1 + 120) = v9;
    }

    BOOL v11 = sub_100ACC244();
    char v23 = v11;
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    __int16 v12 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      int v29 = v8;
      __int16 v30 = 1026;
      BOOL v31 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#dataprotection init, lockState, %{public}d, deviceUnlockedSinceBoot, %{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E0A0);
      }
      int v24 = 67240448;
      int v25 = v8;
      __int16 v26 = 1026;
      BOOL v27 = v11;
      LODWORD(v21) = 14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#dataprotection init, lockState, %{public}d, deviceUnlockedSinceBoot, %{public}d",  &v24,  v21);
      int v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    if (!v11)
    {
      int v13 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( v13,  (const void *)a1,  (CFNotificationCallback)sub_100ACCD44,  @"com.apple.mobile.keybagd.first_unlock",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }

  *(_DWORD *)buf = 1;
  (*(void (**)(uint64_t, uint8_t *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v22,  1LL,  0xFFFFFFFFLL,  0LL);
  sub_100ACC038((_DWORD *)a1);
  return a1;
}

void sub_100ACC9B8(_Unwind_Exception *a1)
{
}

uint64_t sub_100ACC9E0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10186E0D0;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100ACCA60(_Unwind_Exception *exception_object)
{
}

void sub_100ACCA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186E060);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDataProtectionManager::onKeybagStateChange",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E060);
    }
    BOOL v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDataProtectionManager::onKeybagStateChange, event:%{public, location:escape_only} s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_100ACF6D0;
  void v13[3] = &unk_10182D1B8;
  v13[4] = a2;
  double v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  _WORD v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ACCC7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ACCC9C()
{
  char v7 = 1;
  sub_1002F0B04(&v5);
  int v0 = sub_1002A6F64(v5, "CLDataProtectionManager.LockedTransaction", (BOOL *)&v7);
  uint64_t v1 = v6;
  if (v6)
  {
    p_uint64_t shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (v7) {
    return 1LL;
  }
  else {
    return v0 ^ 1u;
  }
}

void sub_100ACCD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100ACCD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186E060);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDataProtectionManager::onDeviceUnlockedSinceBoot",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E060);
    }
    BOOL v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDataProtectionManager::onDeviceUnlockedSinceBoot, event:%{public, location:escape _only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_100ACF6D8;
  void v13[3] = &unk_10182D1B8;
  v13[4] = a2;
  double v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  _WORD v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ACCF44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ACCF64(uint64_t a1)
{
  *(void *)a1 = off_10186E0D0;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100ACCFD8(id *a1)
{
  *a1 = off_10186DF08;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);

  a1[15] = 0LL;
  return sub_100ACCF64((uint64_t)a1);
}

void sub_100ACD024(id *a1)
{
  uint64_t v1 = (void *)sub_100ACCFD8(a1);
  operator delete(v1);
}

void *sub_100ACD038@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100ACD0B0()
{
  return 1LL;
}

uint64_t sub_100ACD0B8()
{
  return 1LL;
}

void sub_100ACD0C0(uint64_t a1)
{
  int v2 = MKBGetDeviceLockState(0LL);
  BOOL v3 = v2;
  if (!v2)
  {
    id v5 = *(id *)(a1 + 120);
    *(void *)(a1 + 120) = 0LL;
    uint64_t v6 = *(void **)(a1 + 40);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    _OWORD v24[2] = nullsub_928;
    void v24[3] = &unk_10181A288;
    _DWORD v24[4] = v5;
    [v6 afterInterval:v24 async:10.0];
    if (*(_DWORD *)(a1 + 112)) {
      goto LABEL_28;
    }
    *(_DWORD *)(a1 + 112) = 1;
    goto LABEL_27;
  }

  if (v2 == 2)
  {

    if (sub_100ACCC9C()) {
      int v4 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "CLDataProtectionManager::fLockedTransaction");
    }
    else {
      int v4 = 0LL;
    }
    *(void *)(a1 + 120) = v4;
    *(_DWORD *)(a1 + 112) = 0;
LABEL_27:
    sub_100ACC038((_DWORD *)a1);
    goto LABEL_28;
  }

  if (v2 < 0)
  {
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    char v7 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      BOOL v32 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E0A0);
      }
      int v25 = 67240192;
      BOOL v26 = v3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d",  &v25,  8);
      __int16 v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    *(_DWORD *)(a1 + 112) = 0;
    sub_100ACC038((_DWORD *)a1);
    BOOL v8 = sub_100ACC244();
    LOBYTE(v26) = v8;
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    int v9 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      BOOL v32 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "#dataprotection onKeybagStateChange, deviceUnlockedSinceBoot, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E0A0);
      }
      int v29 = 67240192;
      BOOL v30 = v8;
      LODWORD(v23) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#dataprotection onKeybagStateChange, deviceUnlockedSinceBoot, %{public}d",  &v29,  v23);
      __int16 v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    if (!v8)
    {
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E0A0);
      }
      int v10 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        BOOL v32 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#dataprotection #warning, reverting state back to not unlocked since first boot, %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_10186E0A0);
        }
        int v29 = 67240192;
        BOOL v30 = 0;
        LODWORD(v23) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#dataprotection #warning, reverting state back to not unlocked since first boot, %{public}d",  &v29,  v23);
        __int16 v22 = (uint8_t *)v21;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v21);
        if (v22 != buf) {
          free(v22);
        }
      }

      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)a1,  (CFNotificationCallback)sub_100ACCD44,  @"com.apple.mobile.keybagd.first_unlock",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      *(_DWORD *)buf = 1;
      (*(void (**)(uint64_t, uint8_t *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  &v25,  1LL,  0xFFFFFFFFLL,  0LL);
    }
  }

uint64_t sub_100ACD784(const void *a1)
{
  BOOL v2 = sub_100ACC244();
  _DWORD v8[4] = v2;
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_10186E0A0);
  }
  BOOL v3 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    BOOL v11 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "#dataprotection onDeviceUnlockedSinceBoot, %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    v9[0] = 67240192;
    v9[1] = v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#dataprotection onDeviceUnlockedSinceBoot, %{public}d",  v9,  8);
    char v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDataProtectionManager::onDeviceUnlockedSinceBoot(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  if (v2)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.mobile.keybagd.first_unlock", 0LL);
  }

  *(_DWORD *)buf = 1;
  return (*(uint64_t (**)(const void *, uint8_t *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v8,  1LL,  0xFFFFFFFFLL,  0LL);
}

void sub_100ACD980(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  BOOL v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLDataProtectionManager");
  sub_100ACDB14((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *BOOL v8 = off_10186DFE8;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100ACDA1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_100ACDA48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  char v10 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLDataProtectionManager");
  sub_100ACDB14((uint64_t)v10, a1, (uint64_t *)__p, a4, a2, a3);
  void *v10 = off_10186DFE8;
  *a5 = v10;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100ACDAE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100ACDB14(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_10186E220;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    char v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100ACDBE8(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E060);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        BOOL v11 = (void *)(a1 + 8);
        *(_DWORD *)buf = 136446466;
        uint64_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10186E060);
        }
        char v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        int v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::Notification Data, char, char>::removeClient(int) [Notification_T = CLDataProtectionManager_Type::Notification, Notificatio nData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100ACDE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198F548);
}

uint64_t sub_100ACDE70(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          int v24 = (uint64_t *)v18;
        }
        else {
          int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        *(void *)buf = 0LL;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          int v36 = sub_100AD050C(buf);
          sub_100ACFB34((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_10198F549;
        HIDWORD(v40) = v17;
        *(void *)buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)buf = (char *)&v40 + 4;
        BOOL v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)buf = (char *)&v40 + 4;
        __int16 v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186E060);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E060);
    }
    uint64_t v37 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    int v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData , char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, N otificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100ACE2CC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E060);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E060);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      int v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationDa ta, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::N otification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, Reg istrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100ACE54C(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10186E060);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                uint64_t v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10186E060);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                __int16 v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::Noti ficationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CL DataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::Notificat ionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100ACE8D4(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  _BYTE v6[2] = 0LL;
  *uint64_t v6 = off_10186E1B0;
  v6[1] = 0LL;
  uint64_t v7 = *a3;
  *((void *)&v14 + 1) = v6;
  v6[3] = v7;
  *(void *)&__int128 v14 = v6 + 3;
  int v13 = *a2;
  int v15 = &v13;
  BOOL v8 = sub_10023347C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_1012CF090, &v15);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  int v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_100ACE9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100ACE9BC(uint64_t a1, unsigned int *a2, void *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E060);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v12 = (void *)(a1 + 8);
      int v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      uint64_t v68 = v12;
      __int16 v69 = 2050;
      uint64_t v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)__int16 v71 = &v71[8];
      memset(&v71[8], 0, 24);
      uint64_t v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_uint64_t shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x20uLL);
      v27[2] = 0LL;
      void *v27 = off_10186E1B0;
      v27[1] = 0LL;
      v27[3] = *a3;
      *(void *)buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_100ACF6E0(a3);
    if (a5 == -1)
    {
      sub_100ACF760((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          uint64_t v37 = (uint64_t *)v33;
        }
        else {
          uint64_t v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          uint64_t v43 = (unint64_t *)v38;
        }
        else {
          uint64_t v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        __int128 v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10186E060);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            uint64_t v46 = v71;
          }
          else {
            uint64_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_10186E060);
          }
          __int16 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            std::string::size_type v49 = __p;
          }
          else {
            std::string::size_type v49 = (void **)__p[0];
          }
          *(_DWORD *)__int16 v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          __int128 v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::Notificati onData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, bo ol) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManag er_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      __int128 v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      uint64_t v52 = v40 + 3;
      __int128 v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      uint64_t v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          __int128 v59 = v53;
        }
        else {
          __int128 v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          uint64_t v56 = v53;
        }
        __int128 v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_100ACFB34((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_100ACEFF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100ACF040(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E060);
    }
    BOOL v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E060);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationDa ta, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E060);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E060);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationDa ta, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_10186E060);
            }
            int v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10186E060);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::Notifi cationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, Not ificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100ACF5EC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100AD04AC(a1);
  operator delete(v1);
}

id sub_100ACF600(uint64_t a1, int a2, void *a3)
{
  id result = sub_100ACFC60(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100ACF64C(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100ACF678(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100ACF6A4(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100ACF6D0(uint64_t a1)
{
}

uint64_t sub_100ACF6D8(uint64_t a1)
{
  return sub_100ACD784(*(const void **)(a1 + 32));
}

CLCppContainer *sub_100ACF6E0(void *a1)
{
  BOOL v2 = operator new(8uLL);
  *BOOL v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100ACFC50;
  uint64_t v7 = &unk_10181D3D0;
  BOOL v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100ACF760(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          BOOL v12 = (uint64_t *)v4;
        }
        else {
          BOOL v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int128 v51 = v9;
        id v13 = sub_100ACFC60(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        __int128 v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v50 = v19;
              sub_100ACFB34(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v51 = v29;
              uint64_t v34 = v29[6];
              __int128 v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      __int128 v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      __int128 v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      __int128 v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              int v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10186E060);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10186E060);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                __int128 v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::Notification Data, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = C LDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::Notifica tionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100ACFB34(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100ACFC60(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    __int128 v14 = (int *)(*(void *)a2 + 32LL);
    BOOL v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_100ACFC10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10186E1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100ACFC24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10186E1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100ACFC50(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100ACFC60(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100ACFCD8(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_100AD0060(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100ACFCD8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100AD040C((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101347E59LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101347E59LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDataProtectionManager_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100AD0060(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101347E59LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101347E59LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E1F0);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDataProtectionManager_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100AD040C(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D3EC0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8) {
      sub_10125DB94();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_100AD0480(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100AD04AC(uint64_t a1)
{
  *(void *)a1 = &off_10186E220;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100AD050C(void *a1)
{
  id v2 = operator new(8uLL);
  *id v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100AD058C;
  uint64_t v7 = &unk_10181D3D0;
  uint64_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100AD058C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void *sub_100AD059C@<X0>(uint64_t a1@<X8>)
{
  v15[0] = &off_10186E268;
  v15[1] = sub_100AD08B4;
  _DWORD v15[2] = 0LL;
  int v16 = v15;
  sub_1010DDBC0(v17, "kCLConnectionMessageARSessionState");
  sub_1008945BC((uint64_t)&v18, (uint64_t)v15);
  v13[0] = &off_10186E268;
  v13[1] = sub_100AD0ADC;
  _DWORD v13[2] = 0LL;
  unint64_t v14 = v13;
  sub_1010DDBC0(v19, "kCLConnectionMessageVIOEstimation");
  sub_1008945BC((uint64_t)&v20, (uint64_t)v13);
  v11[0] = &off_10186E268;
  v11[1] = sub_100AD0D04;
  _DWORD v11[2] = 0LL;
  uint64_t v12 = v11;
  sub_1010DDBC0(v21, "kCLConnectionMessageVLLocalizationResult");
  sub_1008945BC((uint64_t)v22, (uint64_t)v11);
  sub_100AD10F8(a1, (unsigned __int8 *)v17, 3LL);
  for (uint64_t i = 0LL; i != -21; i -= 7LL)
  {
    int v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      int v3 = &v22[i * 8];
      uint64_t v4 = 4LL;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0) {
      operator delete((void *)v21[i]);
    }
  }

  uint64_t v5 = v12;
  if (v12 == v11)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  else if (v12)
  {
    uint64_t v6 = 5LL;
    goto LABEL_14;
  }

  uint64_t v7 = v14;
  if (v14 == v13)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  else if (v14)
  {
    uint64_t v8 = 5LL;
    goto LABEL_19;
  }

  id result = v16;
  if (v16 == v15)
  {
    uint64_t v10 = 4LL;
    id result = v15;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }

  else if (v16)
  {
    uint64_t v10 = 5LL;
    return (void *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }

  return result;
}

void sub_100AD07A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20, char a21)
{
  for (uint64_t i = 112LL; i != -56; i -= 56LL)
    sub_10026E430((uint64_t)(&a21 + i));
  int v23 = a12;
  if (a12 == &a9)
  {
    uint64_t v24 = 4LL;
    int v23 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_8;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  int v25 = a16;
  if (a16 == &a13)
  {
    uint64_t v26 = 4LL;
    int v25 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_13;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*(void *)v25 + 8 * v26))();
LABEL_13:
  uint64_t v27 = a20;
  if (a20 == &a17)
  {
    uint64_t v28 = 4LL;
    uint64_t v27 = &a17;
  }

  else
  {
    if (!a20) {
      goto LABEL_18;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*(void *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_100AD08B4(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  char v3 = sub_100C6AC9C(a1);
  char v4 = v3;
  if (SBYTE3(v13) < 0)
  {
    operator delete(__p);
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
  }

  else if ((v3 & 1) != 0)
  {
    goto LABEL_12;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10186E238);
  }
  uint64_t v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Client lacks proper entitlement to hint _CLARSessionState, client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10186E238);
    }
  }

  uint64_t v7 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Client lacks proper entitlement to hint _CLARSessionState",  "{msg%{public}.0s:Client lacks proper entitlement to hint _CLARSessionState, client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
  }

void sub_100AD0A9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100AD0ADC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  char v3 = sub_100C6AC9C(a1);
  char v4 = v3;
  if (SBYTE3(v13) < 0)
  {
    operator delete(__p);
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
  }

  else if ((v3 & 1) != 0)
  {
    goto LABEL_12;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10186E238);
  }
  uint64_t v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Client lacks proper entitlement to hint _CLVIOEstimation, client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10186E238);
    }
  }

  uint64_t v7 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Client lacks proper entitlement to hint _CLVIOEstimation",  "{msg%{public}.0s:Client lacks proper entitlement to hint _CLVIOEstimation, client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
  }

void sub_100AD0CC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100AD0D04(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  char v3 = sub_100C6AC9C(a1);
  char v4 = v3;
  if (SBYTE3(v13) < 0)
  {
    operator delete(__p);
    if ((v4 & 1) != 0) {
      goto LABEL_12;
    }
  }

  else if ((v3 & 1) != 0)
  {
    goto LABEL_12;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10186E238);
  }
  uint64_t v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Client lacks proper entitlement to hint _CLVLLocalizationResult, client:%{public, loc ation:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10186E238);
    }
  }

  uint64_t v7 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    std::stringbuf::string_type __p = (void *)68289282;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Client lacks proper entitlement to hint _CLVLLocalizationResult",  "{msg%{public}.0s:Client lacks proper entitlement to hint _CLVLLocalizationResult, client:%{public, loc ation:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
  }

void sub_100AD0EEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100AD0F2C(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100AD0F58(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &off_10186E268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100AD0F94(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10186E268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100AD0FB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100AD0FC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100AD0FFC()
{
}

void sub_100AD1008(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  char v3 = (std::__shared_weak_count *)a3[1];
  unint64_t v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  if (v3)
  {
    p_uint64_t shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  __int16 v10 = v17;
  if (v17)
  {
    __int16 v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    uint64_t v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100AD10DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100AD10F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100AD1170(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100AD115C(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100AD1170(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100AD13F0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100AD13D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100AD13F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100AD1464(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100AD144C(_Unwind_Exception *a1)
{
}

void *sub_100AD1464(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100AD14BC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100AD14D8(unsigned int a1)
{
  return (a1 < 0x2D) & (0x10FE81F1BF80uLL >> a1);
}

void sub_100AD14F8(uint64_t a1)
{
  if (qword_10199A6B8 != -1) {
    dispatch_once(&qword_10199A6B8, &stru_10186E2E8);
  }
  int v2 = byte_10199A6B0;
  *(_BYTE *)(a1 + 74) = byte_10199A6B0;
  switch(v2)
  {
    case 1:
      *(_OWORD *)a1 = xmmword_101348470;
      *(_OWORD *)(a1 + 16) = xmmword_101348480;
      *(_DWORD *)(a1 + 32) = 1034147594;
      *(_OWORD *)(a1 + 36) = xmmword_101348330;
      uint64_t v10 = 0x3F4CCCCD3F99999ALL;
      goto LABEL_32;
    case 2:
      *(_OWORD *)a1 = xmmword_101348430;
      *(_OWORD *)(a1 + 16) = xmmword_101348440;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348330;
      *(void *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      int v11 = 1056964608;
      goto LABEL_33;
    case 3:
      *(_OWORD *)a1 = xmmword_101348410;
      *(_OWORD *)(a1 + 16) = xmmword_101348420;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      uint64_t v12 = 0x3F0000003F99999ALL;
      goto LABEL_16;
    case 4:
      *(_OWORD *)a1 = xmmword_101348450;
      *(_OWORD *)(a1 + 16) = xmmword_101348460;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      uint64_t v10 = 0x3E8F5C293F99999ALL;
      goto LABEL_32;
    case 5:
      *(_OWORD *)a1 = xmmword_1013483F0;
      *(_OWORD *)(a1 + 16) = xmmword_101348400;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v12 = 0x3F07AE143F99999ALL;
LABEL_16:
      *(void *)(a1 + 52) = v12;
      int v13 = 1050253722;
      goto LABEL_27;
    case 6:
      __int128 v14 = xmmword_101348210;
      __int128 v15 = xmmword_1013483E0;
      goto LABEL_30;
    case 7:
      *(_OWORD *)a1 = xmmword_1013483A0;
      *(_OWORD *)(a1 + 16) = xmmword_1013483B0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348330;
      *(void *)(a1 + 52) = 0x3EB333333F99999ALL;
      *(_DWORD *)(a1 + 68) = 1056964608;
      *(_WORD *)(a1 + 72) = 0;
      uint64_t v16 = 0x600000000LL;
      goto LABEL_98;
    case 8:
      *(_OWORD *)a1 = xmmword_101348340;
      *(_OWORD *)(a1 + 16) = xmmword_101348350;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348330;
      *(void *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1056964608;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xB00000000LL;
      goto LABEL_98;
    case 9:
      *(_OWORD *)a1 = xmmword_101348310;
      *(_OWORD *)(a1 + 16) = xmmword_101348320;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348330;
      *(void *)(a1 + 52) = 0x3F3333333F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 257;
      uint64_t v16 = 0xC3F028F5CLL;
      goto LABEL_98;
    case 10:
    case 11:
      *(_OWORD *)a1 = xmmword_101348360;
      *(_OWORD *)(a1 + 16) = xmmword_101348370;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3CCCCCCD3F99999ALL;
      int v5 = 1045220557;
      goto LABEL_47;
    case 12:
      *(_OWORD *)a1 = xmmword_1013482F0;
      *(_OWORD *)(a1 + 16) = xmmword_101348300;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3F147AE13F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1300000000LL;
      goto LABEL_98;
    case 13:
      *(_OWORD *)a1 = xmmword_1013480D0;
      *(_OWORD *)(a1 + 16) = xmmword_1013482E0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3F19999A3F99999ALL;
      int v11 = 1045220557;
      goto LABEL_33;
    case 14:
      *(_OWORD *)a1 = xmmword_101348270;
      *(_OWORD *)(a1 + 16) = xmmword_101348280;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3E428F5C3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 0;
      goto LABEL_28;
    case 15:
      *(_OWORD *)a1 = xmmword_101348380;
      *(_OWORD *)(a1 + 16) = xmmword_101348390;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v17 = 0x3F3333333F99999ALL;
      goto LABEL_26;
    case 16:
      *(_OWORD *)a1 = xmmword_101348360;
      *(_OWORD *)(a1 + 16) = xmmword_101348370;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      uint64_t v17 = 0x3CC49BA63F99999ALL;
LABEL_26:
      *(void *)(a1 + 52) = v17;
      int v13 = 1045220557;
LABEL_27:
      *(_DWORD *)(a1 + 68) = v13;
      *(_WORD *)(a1 + 72) = 1;
LABEL_28:
      uint64_t v16 = 0x900000000LL;
      goto LABEL_98;
    case 17:
      __int128 v14 = xmmword_101348210;
      __int128 v15 = xmmword_1013483C0;
LABEL_30:
      *(_OWORD *)a1 = v14;
      *(_OWORD *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3ED70A3D3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x500000000LL;
      goto LABEL_98;
    case 19:
      *(_OWORD *)a1 = xmmword_101348210;
      *(_OWORD *)(a1 + 16) = xmmword_1013483D0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v10 = 0x3ED70A3D3F99999ALL;
LABEL_32:
      *(void *)(a1 + 52) = v10;
      int v11 = 1050253722;
LABEL_33:
      *(_DWORD *)(a1 + 68) = v11;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x800000000LL;
      goto LABEL_98;
    case 20:
      *(_OWORD *)a1 = xmmword_1013482C0;
      *(_OWORD *)(a1 + 16) = xmmword_1013482D0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3E6147AE3F99999ALL;
      int v18 = 1045220557;
      goto LABEL_69;
    case 21:
      *(_OWORD *)a1 = xmmword_101348100;
      *(_OWORD *)(a1 + 16) = xmmword_1013482B0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v3 = 0x3E8A3D713F99999ALL;
      goto LABEL_36;
    case 22:
      *(_OWORD *)a1 = xmmword_101348150;
      *(_OWORD *)(a1 + 16) = xmmword_1013482A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v19 = 1045220557;
      goto LABEL_41;
    case 23:
      *(_OWORD *)a1 = xmmword_1013480D0;
      *(_OWORD *)(a1 + 16) = xmmword_101348290;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3F19999A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1C00000000LL;
      goto LABEL_98;
    case 24:
      *(_OWORD *)a1 = xmmword_1013480D0;
      *(_OWORD *)(a1 + 16) = xmmword_1013481C0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v20 = 0x3F07AE143F99999ALL;
      goto LABEL_55;
    case 25:
      *(_OWORD *)a1 = xmmword_101348250;
      *(_OWORD *)(a1 + 16) = xmmword_101348260;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      int v19 = 1050253722;
LABEL_41:
      *(_DWORD *)(a1 + 68) = v19;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xD00000000LL;
      goto LABEL_98;
    case 26:
      __int128 v21 = xmmword_101348070;
      __int128 v22 = xmmword_1013481D0;
      goto LABEL_50;
    case 27:
      *(_OWORD *)a1 = xmmword_101348210;
      *(_OWORD *)(a1 + 16) = xmmword_101348220;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v23 = 0x3ED6C8B43F99999ALL;
      goto LABEL_51;
    case 28:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_101348240;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xE00000000LL;
      goto LABEL_98;
    case 29:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_1013481D0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3EA3D70A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xA00000000LL;
      goto LABEL_98;
    case 30:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_101348230;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3EB333333F99999ALL;
      int v5 = 1050253722;
LABEL_47:
      *(_DWORD *)(a1 + 68) = v5;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xC00000000LL;
      goto LABEL_98;
    case 31:
      __int128 v24 = xmmword_101348100;
      __int128 v25 = xmmword_101348200;
      goto LABEL_53;
    case 32:
      __int128 v21 = xmmword_101348070;
      __int128 v22 = xmmword_1013481F0;
LABEL_50:
      *(_OWORD *)a1 = v21;
      *(_OWORD *)(a1 + 16) = v22;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      uint64_t v23 = 0x3EA3D70A3F99999ALL;
LABEL_51:
      *(void *)(a1 + 52) = v23;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1000000000LL;
      goto LABEL_98;
    case 33:
      __int128 v24 = xmmword_101348100;
      __int128 v25 = xmmword_1013481E0;
LABEL_53:
      *(_OWORD *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v25;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v26 = 0x3E8000003F99999ALL;
      goto LABEL_57;
    case 34:
      *(_OWORD *)a1 = xmmword_1013480D0;
      *(_OWORD *)(a1 + 16) = xmmword_1013481C0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v20 = 0x3E8000003F99999ALL;
LABEL_55:
      *(void *)(a1 + 52) = v20;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1600000000LL;
      goto LABEL_98;
    case 35:
      *(_OWORD *)a1 = xmmword_101348100;
      *(_OWORD *)(a1 + 16) = xmmword_1013481B0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v26 = 0x3E1EB8523F99999ALL;
LABEL_57:
      *(void *)(a1 + 52) = v26;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1700000000LL;
      goto LABEL_98;
    case 36:
      *(_OWORD *)a1 = xmmword_1013480D0;
      *(_OWORD *)(a1 + 16) = xmmword_101348140;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3E051EB83F99999ALL;
      int v4 = 1040522936;
      goto LABEL_59;
    case 37:
      *(_OWORD *)a1 = xmmword_101348100;
      *(_OWORD *)(a1 + 16) = xmmword_101348130;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3E1EB8523F99999ALL;
      int v27 = 1042200658;
      goto LABEL_77;
    case 38:
      *(_OWORD *)a1 = xmmword_101348100;
      *(_OWORD *)(a1 + 16) = xmmword_1013481A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v28 = 0x3E8A3D713F99999ALL;
      goto LABEL_63;
    case 39:
      *(_OWORD *)a1 = xmmword_101348100;
      *(_OWORD *)(a1 + 16) = xmmword_101348190;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      uint64_t v28 = 0x3E75C28F3F99999ALL;
LABEL_63:
      *(void *)(a1 + 52) = v28;
      *(_DWORD *)(a1 + 68) = 1048576000;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1900000000LL;
      goto LABEL_98;
    case 40:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_101348180;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      int v9 = 1050253722;
      goto LABEL_97;
    case 41:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_101348170;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      int v6 = 1045220557;
      goto LABEL_75;
    case 42:
      __int128 v29 = xmmword_101348070;
      __int128 v30 = xmmword_101348080;
      goto LABEL_74;
    case 43:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_101348080;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3D8F5C293F99999ALL;
      int v6 = 1032805417;
      goto LABEL_75;
    case 44:
      *(_OWORD *)a1 = xmmword_101348150;
      *(_OWORD *)(a1 + 16) = xmmword_101348160;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v18 = 1041865114;
LABEL_69:
      *(_DWORD *)(a1 + 68) = v18;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xF00000000LL;
      goto LABEL_98;
    case 45:
    case 61:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_101348080;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3DCCCCCD3F99999ALL;
      int v6 = 1036831949;
      goto LABEL_75;
    case 46:
    case 54:
    case 57:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_1013480C0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      uint64_t v3 = 0x3E4CCCCD3F99999ALL;
LABEL_36:
      *(void *)(a1 + 52) = v3;
      int v9 = 1045220557;
      goto LABEL_97;
    case 47:
    case 53:
    case 59:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_1013480A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3CA3D70A3F99999ALL;
      int v4 = 1017370378;
LABEL_59:
      *(_DWORD *)(a1 + 68) = v4;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1500000000LL;
      goto LABEL_98;
    case 48:
    case 60:
      __int128 v7 = xmmword_101348070;
      __int128 v8 = xmmword_1013480A0;
      goto LABEL_10;
    case 49:
      *(_OWORD *)a1 = xmmword_101348100;
      *(_OWORD *)(a1 + 16) = xmmword_101348120;
      *(_DWORD *)(a1 + 32) = 1092616192;
      __int128 v31 = xmmword_101348090;
      goto LABEL_72;
    case 50:
      *(_OWORD *)a1 = xmmword_101348100;
      *(_OWORD *)(a1 + 16) = xmmword_101348110;
      *(_DWORD *)(a1 + 32) = 1092616192;
      __int128 v31 = xmmword_1013480F0;
LABEL_72:
      *(_OWORD *)(a1 + 36) = v31;
      *(void *)(a1 + 52) = 0x3E75C28F3F99999ALL;
      int v27 = 1047904911;
      goto LABEL_77;
    case 51:
      __int128 v29 = xmmword_101348070;
      __int128 v30 = xmmword_1013480B0;
LABEL_74:
      *(_OWORD *)a1 = v29;
      *(_OWORD *)(a1 + 16) = v30;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v6 = 1041865114;
LABEL_75:
      *(_DWORD *)(a1 + 68) = v6;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1200000000LL;
      goto LABEL_98;
    case 52:
      *(_OWORD *)a1 = xmmword_1013480D0;
      *(_OWORD *)(a1 + 16) = xmmword_1013480E0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_1013480F0;
      *(void *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      int v27 = 1045220557;
LABEL_77:
      *(_DWORD *)(a1 + 68) = v27;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1800000000LL;
      goto LABEL_98;
    case 55:
    case 58:
      __int128 v7 = xmmword_101348070;
      __int128 v8 = xmmword_1013480B0;
LABEL_10:
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v9 = 1041865114;
      goto LABEL_97;
    case 56:
      *(_OWORD *)a1 = xmmword_101348070;
      *(_OWORD *)(a1 + 16) = xmmword_1013480A0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101348090;
      *(void *)(a1 + 52) = 0x3C23D70A3F99999ALL;
      int v9 = 1008981770;
LABEL_97:
      *(_DWORD *)(a1 + 68) = v9;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1400000000LL;
LABEL_98:
      *(void *)(a1 + 60) = v16;
      break;
    default:
      if (qword_101934700 != -1) {
        dispatch_once(&qword_101934700, &stru_10186E308);
      }
      int v32 = (os_log_s *)qword_101934708;
      if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = sub_1004F2598();
        sub_1004F58C8(v33, (uint64_t)__p);
        uint64_t v34 = v44 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "No parameters for on body is available for %s",  buf,  0xCu);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934700 != -1) {
          dispatch_once(&qword_101934700, &stru_10186E308);
        }
        uint64_t v35 = qword_101934708;
        uint64_t v36 = sub_1004F2598();
        sub_1004F58C8(v36, (uint64_t)buf);
        if (v40 >= 0) {
          int v37 = buf;
        }
        else {
          int v37 = *(_BYTE **)buf;
        }
        int v41 = 136315138;
        BOOL v42 = v37;
        BOOL v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v35,  0LL,  "No parameters for on body is available for %s",  (const char *)&v41);
        if (v40 < 0) {
          operator delete(*(void **)buf);
        }
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOnBodyNotifier_Type::Params::init()", "%s\n", v38);
      }

      break;
  }

void sub_100AD2544(id a1)
{
  if ((sub_1004F97F4() & 0x800) != 0)
  {
    sub_1004F2598();
    unsigned int v1 = sub_1004F2690() - 16;
    if (v1 > 0xE3) {
      char v2 = 0;
    }
    else {
      char v2 = asc_101348568[v1];
    }
    byte_10199A6B0 = v2;
  }

void sub_100AD258C(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 61) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  sub_100AD14F8((uint64_t)a1);
}

void sub_100AD25A4(uint64_t a1)
{
  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_10186E308);
  }
  char v2 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
  {
    double v3 = *(float *)a1;
    double v4 = *(float *)(a1 + 4);
    double v5 = *(float *)(a1 + 8);
    double v6 = *(float *)(a1 + 12);
    double v7 = *(float *)(a1 + 16);
    double v8 = *(float *)(a1 + 20);
    double v9 = *(float *)(a1 + 24);
    double v10 = *(float *)(a1 + 28);
    double v11 = *(float *)(a1 + 32);
    int v12 = *(_DWORD *)(a1 + 36);
    int v13 = *(_DWORD *)(a1 + 40);
    int v14 = *(_DWORD *)(a1 + 44);
    int v15 = *(_DWORD *)(a1 + 48);
    double v16 = *(float *)(a1 + 52);
    double v17 = *(float *)(a1 + 56);
    int v18 = *(_DWORD *)(a1 + 64);
    double v19 = *(float *)(a1 + 68);
    int v20 = *(unsigned __int8 *)(a1 + 72);
    int v21 = *(unsigned __int8 *)(a1 + 73);
    double v22 = *(float *)(a1 + 60);
    *(_DWORD *)buf = 134222848;
    double v86 = v3;
    __int16 v87 = 2048;
    double v88 = v4;
    __int16 v89 = 2048;
    double v90 = v5;
    __int16 v91 = 2048;
    double v92 = v6;
    __int16 v93 = 2048;
    double v94 = v7;
    __int16 v95 = 2048;
    double v96 = v8;
    __int16 v97 = 2048;
    double v98 = v9;
    __int16 v99 = 2048;
    double v100 = v10;
    __int16 v101 = 2048;
    double v102 = v11;
    __int16 v103 = 1024;
    int v104 = v12;
    __int16 v105 = 1024;
    int v106 = v13;
    __int16 v107 = 1024;
    int v108 = v14;
    __int16 v109 = 1024;
    int v110 = v15;
    __int16 v111 = 2048;
    double v112 = v16;
    __int16 v113 = 2048;
    double v114 = v17;
    __int16 v115 = 1024;
    int v116 = v18;
    __int16 v117 = 2048;
    double v118 = v19;
    __int16 v119 = 1024;
    int v120 = v20;
    __int16 v121 = 1024;
    int v122 = v21;
    __int16 v123 = 2048;
    double v124 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Parameters: theta0, %f, theta1, %f, theta2, %f, theta3, %f, theta4, %f, theta5, %f, minLowPower, %f, maxLowPower, %f, maxHighPower, %f, lowBandStart, %d, lowBandStop, %d, highbandStart, %d, highBandStop, %d, wakeThreshold, %f, o ddsThreshold, %f, medianFilterSize, %u, confidenceThreshold, %f, useHysteresis, %d, useAngleOverride, %d, angleMet ricThreshold, %f",  buf,  0xAEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10186E308);
    }
    double v23 = *(float *)a1;
    double v24 = *(float *)(a1 + 4);
    double v25 = *(float *)(a1 + 8);
    double v26 = *(float *)(a1 + 12);
    double v27 = *(float *)(a1 + 16);
    double v28 = *(float *)(a1 + 20);
    double v29 = *(float *)(a1 + 24);
    double v30 = *(float *)(a1 + 28);
    double v31 = *(float *)(a1 + 32);
    int v32 = *(_DWORD *)(a1 + 36);
    int v33 = *(_DWORD *)(a1 + 40);
    int v34 = *(_DWORD *)(a1 + 44);
    int v35 = *(_DWORD *)(a1 + 48);
    double v36 = *(float *)(a1 + 52);
    double v37 = *(float *)(a1 + 56);
    int v38 = *(_DWORD *)(a1 + 64);
    double v39 = *(float *)(a1 + 68);
    int v40 = *(unsigned __int8 *)(a1 + 72);
    int v41 = *(unsigned __int8 *)(a1 + 73);
    double v42 = *(float *)(a1 + 60);
    int v45 = 134222848;
    double v46 = v23;
    __int16 v47 = 2048;
    double v48 = v24;
    __int16 v49 = 2048;
    double v50 = v25;
    __int16 v51 = 2048;
    double v52 = v26;
    __int16 v53 = 2048;
    double v54 = v27;
    __int16 v55 = 2048;
    double v56 = v28;
    __int16 v57 = 2048;
    double v58 = v29;
    __int16 v59 = 2048;
    double v60 = v30;
    __int16 v61 = 2048;
    double v62 = v31;
    __int16 v63 = 1024;
    int v64 = v32;
    __int16 v65 = 1024;
    int v66 = v33;
    __int16 v67 = 1024;
    int v68 = v34;
    __int16 v69 = 1024;
    int v70 = v35;
    __int16 v71 = 2048;
    double v72 = v36;
    __int16 v73 = 2048;
    double v74 = v37;
    __int16 v75 = 1024;
    int v76 = v38;
    __int16 v77 = 2048;
    double v78 = v39;
    __int16 v79 = 1024;
    int v80 = v40;
    __int16 v81 = 1024;
    int v82 = v41;
    __int16 v83 = 2048;
    double v84 = v42;
    LODWORD(v44) = 174;
    uint64_t v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  2LL,  "Parameters: theta0, %f, theta1, %f, theta2, %f, theta3, %f, theta4, %f, theta5, %f, minLowPower, %f, maxLowPower, %f, maxHighPower, %f, lowBandStart, %d, lowBandStop, %d, highbandStart, %d, highBandSt op, %d, wakeThreshold, %f, oddsThreshold, %f, medianFilterSize, %u, confidenceThreshold, %f, useHyst eresis, %d, useAngleOverride, %d, angleMetricThreshold, %f",  COERCE_DOUBLE(&v45),  v44);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOnBodyNotifier_Type::Params::log() const", "%s\n", v43);
  }

void sub_100AD2964(id a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 61) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_100AD14F8(a3);
  if (a2)
  {
    uint64_t v6 = CMOnBodyStatusManagerManufacturer;
    id v7 = [a1 objectForKeyedSubscript:CMOnBodyStatusManagerManufacturer];
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    {
      if (sub_100AD3080((uint64_t)objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", v6),  "objectForKeyedSubscript:",  a2)))
      {
        a1 = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v6), "objectForKeyedSubscript:", a2);
        if (qword_101934700 != -1) {
          dispatch_once(&qword_101934700, &stru_10186E308);
        }
        double v9 = (os_log_s *)qword_101934708;
        if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          id v33 = [a2 UTF8String];
          __int16 v34 = 2080;
          id v35 = objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Using the manufacturer specific parameters (%s): %s",  buf,  0x16u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_18;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934700 != -1) {
          dispatch_once(&qword_101934700, &stru_10186E308);
        }
        uint64_t v10 = qword_101934708;
        [a2 UTF8String];
        objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
        double v11 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  2LL,  "Using the manufacturer specific parameters (%s): %s",  v31,  22);
LABEL_28:
        double v29 = (uint8_t *)v11;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)",  "%s\n",  v11);
        if (v29 != buf) {
          free(v29);
        }
LABEL_18:
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta0), "floatValue");
        *(_DWORD *)a3 = v14;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta1), "floatValue");
        *(_DWORD *)(a3 + 4) = v15;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta2), "floatValue");
        *(_DWORD *)(a3 + 8) = v16;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta3), "floatValue");
        *(_DWORD *)(a3 + 12) = v17;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta4), "floatValue");
        *(_DWORD *)(a3 + 16) = v18;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta5), "floatValue");
        *(_DWORD *)(a3 + 20) = v19;
        objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMinLowPower),  "floatValue");
        *(_DWORD *)(a3 + 24) = v20;
        objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxLowPower),  "floatValue");
        *(_DWORD *)(a3 + 28) = v21;
        objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxHighPower),  "floatValue");
        *(_DWORD *)(a3 + 32) = v22;
        *(_DWORD *)(a3 + 36) = objc_msgSend( objc_msgSend( a1,  "objectForKeyedSubscript:",  CMOnBodyStatusManagerLowBandStart),  "intValue");
        *(_DWORD *)(a3 + 40) = objc_msgSend( objc_msgSend( a1,  "objectForKeyedSubscript:",  CMOnBodyStatusManagerLowBandStop),  "intValue");
        *(_DWORD *)(a3 + 44) = objc_msgSend( objc_msgSend( a1,  "objectForKeyedSubscript:",  CMOnBodyStatusManagerHighBandStart),  "intValue");
        *(_DWORD *)(a3 + 48) = objc_msgSend( objc_msgSend( a1,  "objectForKeyedSubscript:",  CMOnBodyStatusManagerHighBandStop),  "intValue");
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerWakeThreshold), "floatValue");
        *(_DWORD *)(a3 + 52) = v23;
        objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerOddsThreshold), "floatValue");
        *(_DWORD *)(a3 + 56) = v24;
        *(_DWORD *)(a3 + 64) = objc_msgSend( objc_msgSend( a1,  "objectForKeyedSubscript:",  CMOnBodyStatusManagerMedianFilterSize),  "unsignedIntValue");
        objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerConfidenceThreshold),  "floatValue");
        *(_DWORD *)(a3 + 68) = v25;
        *(_BYTE *)(a3 + 72) = objc_msgSend( objc_msgSend( a1,  "objectForKeyedSubscript:",  CMOnBodyStatusManagerUseHysteresis),  "BOOLValue");
        *(_BYTE *)(a3 + 73) = objc_msgSend( objc_msgSend( a1,  "objectForKeyedSubscript:",  CMOnBodyStatusManagerUseAngleOverride),  "BOOLValue");
        objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerAngleMetricThreshold),  "floatValue");
        *(_DWORD *)(a3 + 60) = v26;
        return;
      }
    }
  }

  if (sub_100AD3080((uint64_t)a1))
  {
    int v12 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  a1);
    -[NSMutableDictionary removeObjectForKey:](v12, "removeObjectForKey:", CMOnBodyStatusManagerManufacturer);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10186E308);
    }
    int v13 = (os_log_s *)qword_101934708;
    if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      id v33 = objc_msgSend(-[NSMutableDictionary description](v12, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Using the default parameters: %s", buf, 0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10186E308);
    }
    uint64_t v28 = qword_101934708;
    objc_msgSend(-[NSMutableDictionary description](v12, "description"), "UTF8String");
    double v11 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  2LL,  "Using the default parameters: %s",  v31);
    goto LABEL_28;
  }

  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_10186E308);
  }
  double v27 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning Using the hardcoded parameters",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10186E308);
    }
    v31[0] = 0;
    double v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  0LL,  "#Warning Using the hardcoded parameters",  v31,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)",  "%s\n",  v30);
  }

uint64_t sub_100AD3080(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v1, v2) & 1) != 0
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta0]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta1]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta2]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta3]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta4]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta5]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierMinLowPower]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierMaxLowPower]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierMaxHighPower]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerLowBandStart]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerLowBandStop]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerHighBandStart]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerHighBandStop]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerWakeThreshold]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerOddsThreshold]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerMedianFilterSize]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerConfidenceThreshold]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerUseHysteresis]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerUseAngleOverride]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerAngleMetricThreshold])
    {
      return 1LL;
    }

    else
    {
      if (qword_101934700 != -1) {
        dispatch_once(&qword_101934700, &stru_10186E308);
      }
      double v3 = (os_log_s *)qword_101934708;
      if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        id v10 = objc_msgSend(objc_msgSend(v1, "description"), "UTF8String");
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Invalid parameters received:\n%{public}s",  buf,  0xCu);
      }

      BOOL v4 = sub_1002921D0(115, 0);
      __n128 result = 0LL;
      if (v4)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934700 != -1) {
          dispatch_once(&qword_101934700, &stru_10186E308);
        }
        uint64_t v5 = qword_101934708;
        int v7 = 136446210;
        id v8 = objc_msgSend(objc_msgSend(v1, "description"), "UTF8String");
        uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v5,  17LL,  "Invalid parameters received:\n%{public}s",  &v7,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLOnBodyNotifier_Type::Params::isValid(NSDictionary *)",  "%s\n",  v6);
        return 0LL;
      }
    }
  }

  return result;
}

void sub_100AD3458(id a1)
{
  qword_101934708 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

double sub_100AD3484()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A6C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A6C8))
  {
    sub_101204164(v2, "VO2MaxPowerBudgetEstimatorQueryLookbackInterval", &qword_101348650, 0);
    qword_10199A6C0 = v3;
    __cxa_guard_release(&qword_10199A6C8);
  }

  return *(double *)&qword_10199A6C0;
}

void sub_100AD3500(_Unwind_Exception *a1)
{
}

double sub_100AD3518()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A6D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A6D8))
  {
    sub_101204164(v2, "VO2MaxOutOfSessionEstimateHoldoffInterval", &qword_101348658, 0);
    qword_10199A6D0 = v3;
    __cxa_guard_release(&qword_10199A6D8);
  }

  return *(double *)&qword_10199A6D0;
}

void sub_100AD3594(_Unwind_Exception *a1)
{
}

double sub_100AD35AC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A6E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A6E8))
  {
    uint64_t v2 = 0x40BC200000000000LL;
    sub_101204164(v3, "VO2MaxOutOfSessionEstimateTimeSinceLastWorkoutHoldOffInterval", &v2, 0);
    qword_10199A6E0 = v4;
    __cxa_guard_release(&qword_10199A6E8);
  }

  return *(double *)&qword_10199A6E0;
}

void sub_100AD3630(_Unwind_Exception *a1)
{
}

double sub_100AD3648()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A6F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A6F8))
  {
    uint64_t v2 = 0x40F5180000000000LL;
    sub_101204164(v3, "VO2MaxPowerBudgetEstimatorZeroBudgetRefreshInterval", &v2, 0);
    qword_10199A6F0 = v4;
    __cxa_guard_release(&qword_10199A6F8);
  }

  return *(double *)&qword_10199A6F0;
}

void sub_100AD36CC(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD36E4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A708);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A708))
  {
    __int16 v2 = 180;
    sub_100A86234(v3, "SensitiveWalkingEscalationRulesLookbackTimeInSeconds", &v2, 0);
    word_10199A700 = v4;
    __cxa_guard_release(&qword_10199A708);
  }

  return (unsigned __int16)word_10199A700;
}

void sub_100AD3764(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD377C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A718);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A718))
  {
    __int16 v2 = 120;
    sub_100A86234(v3, "SensitiveWalkingEscalationRulesActiveTimeInSeconds", &v2, 0);
    word_10199A710 = v4;
    __cxa_guard_release(&qword_10199A718);
  }

  return (unsigned __int16)word_10199A710;
}

void sub_100AD37FC(_Unwind_Exception *a1)
{
}

float sub_100AD3814()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A728);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A728))
  {
    int v2 = 1072064102;
    sub_101206C88(v3, "SensitiveWalkingEscalationRulesActiveSpeedInMPH", &v2, 0);
    dword_10199A720 = v4;
    __cxa_guard_release(&qword_10199A728);
  }

  return *(float *)&dword_10199A720;
}

void sub_100AD3898(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD38B0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A738);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A738))
  {
    sub_10023AE2C(v2, "VO2MaxDeescalatorMaxEscalationTimeSeconds", &dword_101348660, 0);
    dword_10199A730 = v3;
    __cxa_guard_release(&qword_10199A738);
  }

  return dword_10199A730;
}

void sub_100AD392C(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD3944()
{
  return sub_100AD38B0() + 30;
}

float sub_100AD395C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A748);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A748))
  {
    sub_101206C88(v2, "VO2MaxDeescalatorMaxPercentBadSamples", &dword_101348664, 0);
    dword_10199A740 = v3;
    __cxa_guard_release(&qword_10199A748);
  }

  return *(float *)&dword_10199A740;
}

void sub_100AD39D8(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD39F0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A758);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A758))
  {
    unsigned __int8 v2 = 0;
    sub_1012049AC(v3, "VO2MaxDeescalatorDisableWRCheck", &v2, 0);
    byte_10199A750 = v3[1];
    __cxa_guard_release(&qword_10199A758);
  }

  return byte_10199A750;
}

void sub_100AD3A6C(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD3A84()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A768);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A768))
  {
    unsigned __int8 v2 = 0;
    sub_1012049AC(v3, "VO2MaxDeescalatorDisableHRCheck", &v2, 0);
    byte_10199A760 = v3[1];
    __cxa_guard_release(&qword_10199A768);
  }

  return byte_10199A760;
}

void sub_100AD3B00(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD3B18()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A778);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A778))
  {
    unsigned __int8 v2 = 0;
    sub_1012049AC(v3, "VO2MaxDeescalatorDisableGPSCheck", &v2, 0);
    byte_10199A770 = v3[1];
    __cxa_guard_release(&qword_10199A778);
  }

  return byte_10199A770;
}

void sub_100AD3B94(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD3BAC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A788);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A788))
  {
    unsigned __int8 v2 = 0;
    sub_1012049AC(v3, "VO2MaxDeescalatorDisableSessionStatsCheck", &v2, 0);
    byte_10199A780 = v3[1];
    __cxa_guard_release(&qword_10199A788);
  }

  return byte_10199A780;
}

void sub_100AD3C28(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD3C40()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199A798);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199A798))
  {
    unsigned __int8 v2 = 0;
    sub_1012049AC(v3, "VO2MaxDeescalatorDisableIODisambiguationCheck", &v2, 0);
    byte_10199A790 = v3[1];
    __cxa_guard_release(&qword_10199A798);
  }

  return byte_10199A790;
}

void sub_100AD3CBC(_Unwind_Exception *a1)
{
}

void sub_100AD3CD4( uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  if (sub_100AD4388(a2->f64))
  {
    int v11 = 4;
  }

  else
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186E348);
    }
    int v12 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Rejection: ModelContinuousWalking missing required feature inputs",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_10186E348);
      }
      LOWORD(v7memset(&v6[1], 0, 7) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "Rejection: ModelContinuousWalking missing required feature inputs",  &v77,  2);
      __int16 v75 = (uint8_t *)v74;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const F eatures &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v74);
      if (v75 != buf) {
        free(v75);
      }
    }

    *(_DWORD *)(a5 + 48) = 8;
    int v11 = 12;
  }

  if (!*(_BYTE *)(a4 + 57)) {
    *(_DWORD *)(a5 + 48) = v11;
  }
  sub_1004CBC48(a1, a5, a3);
  double v13 = sub_10070C5C4(a2);
  *(double *)(a5 + 24) = v13;
  *(double *)(a5 + 32) = sub_10070C6CC(v13);
  *(void *)(a5 + 40) = v14;
  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186E348);
  }
  int v15 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v16 = *(double *)(a5 + 32);
    float64_t v17 = *(double *)(a5 + 40);
    float64_t v18 = *(double *)(a5 + 16);
    float64_t v19 = *(double *)(a5 + 24);
    int v20 = *(_DWORD *)(a5 + 48);
    int v21 = *(_DWORD *)(a5 + 8);
    int v22 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)buf = 134350593;
    float64_t v115 = v18;
    __int16 v116 = 2050;
    float64_t v117 = v16;
    __int16 v118 = 2050;
    float64_t v119 = v17;
    __int16 v120 = 2049;
    float64_t v121 = v19;
    __int16 v122 = 1026;
    *(_DWORD *)__int16 v123 = v20;
    *(_WORD *)&v123[4] = 1025;
    *(_DWORD *)&v123[6] = v21;
    LOWORD(v124) = 1025;
    *(_DWORD *)((char *)&v124 + 2) = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessModelContinuousWalking::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNo tOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBou ts28Days,%{private}d",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186E348);
    }
    float64_t v43 = *(double *)(a5 + 32);
    float64_t v44 = *(double *)(a5 + 40);
    float64_t v45 = *(double *)(a5 + 16);
    float64_t v46 = *(double *)(a5 + 24);
    int v47 = *(_DWORD *)(a5 + 48);
    int v48 = *(_DWORD *)(a5 + 8);
    int v49 = *(_DWORD *)(a5 + 12);
    int v77 = 134350593;
    float64_t v78 = v45;
    __int16 v79 = 2050;
    float64_t v80 = v43;
    __int16 v81 = 2050;
    float64_t v82 = v44;
    __int16 v83 = 2049;
    float64_t v84 = v46;
    __int16 v85 = 1026;
    *(_DWORD *)double v86 = v47;
    *(_WORD *)&v86[4] = 1025;
    *(_DWORD *)&v86[6] = v48;
    LOWORD(v8memset(&v6[1], 0, 7) = 1025;
    *(_DWORD *)((char *)&v87 + 2) = v49;
    LODWORD(v76) = 60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessModelContinuousWalking::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNo tOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBou ts28Days,%{private}d",  &v77,  v76);
    __int16 v51 = (uint8_t *)v50;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Fea tures &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v50);
    if (v51 != buf) {
      free(v51);
    }
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186E348);
  }
  int v23 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v24 = a2->f64[0];
    float64_t v25 = a2->f64[1];
    float64_t v26 = a2[4].f64[0];
    float64_t v27 = a2[4].f64[1];
    float64_t v28 = a2[1].f64[0];
    float64_t v29 = a2[1].f64[1];
    float64_t v31 = a2[3].f64[0];
    float64_t v30 = a2[3].f64[1];
    float64_t v32 = a2[2].f64[0];
    float64_t v33 = a2[2].f64[1];
    float64_t v35 = a2[8].f64[1];
    float64_t v34 = a2[9].f64[0];
    float64_t v36 = a2[6].f64[0];
    float64_t v37 = a2[6].f64[1];
    float64_t v39 = a2[7].f64[1];
    float64_t v38 = a2[8].f64[0];
    float64_t v40 = a2[7].f64[0];
    float64_t v42 = a2[5].f64[0];
    float64_t v41 = a2[5].f64[1];
    *(_DWORD *)buf = 134288129;
    float64_t v115 = v24;
    __int16 v116 = 2049;
    float64_t v117 = v25;
    __int16 v118 = 2049;
    float64_t v119 = v28;
    __int16 v120 = 2049;
    float64_t v121 = v26;
    __int16 v122 = 2049;
    *(float64_t *)__int16 v123 = v27;
    *(_WORD *)&v123[8] = 2049;
    float64_t v124 = v30;
    __int16 v125 = 2049;
    float64_t v126 = v29;
    __int16 v127 = 2049;
    float64_t v128 = v33;
    __int16 v129 = 2049;
    float64_t v130 = v31;
    __int16 v131 = 2049;
    float64_t v132 = v32;
    __int16 v133 = 2049;
    float64_t v134 = v35;
    __int16 v135 = 2049;
    float64_t v136 = v34;
    __int16 v137 = 2049;
    float64_t v138 = v39;
    __int16 v139 = 2049;
    float64_t v140 = v36;
    __int16 v141 = 2049;
    float64_t v142 = v37;
    __int16 v143 = 2049;
    float64_t v144 = v38;
    __int16 v145 = 2049;
    float64_t v146 = v41;
    __int16 v147 = 2049;
    float64_t v148 = v40;
    __int16 v149 = 2049;
    float64_t v150 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessModelContinuousWalking::Features,allBoutsBoutDurationCv,%{private}.2f,allBoutsBoutDurationMe dian,%{private}.2f,allBoutsCycleTimeCv,%{private}.2f,intermediateBoutsWalkingSpeedMedian,%{private}.2f,intermediat eBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,intermediateBoutsWalkingSpeedCv,%{private}.2f,intermediateBou tsCycleTimeCv,%{private}.2f,intermediateBoutsStepLengthMedian,%{private}.2f,intermediateBoutsStepLengthMedianHeigh tnorm,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedMedian,%{pr ivate}.2f,shortBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,shortBoutsStepLengthMedianHeightnorm,%{private} .2f,shortBoutsCycleTimeMedian,%{private}.2f,shortBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkin gSpeedCv,%{private}.2f,shortBoutsCycleTimeCv,%{private}.2f,shortBoutsStepLengthCv,%{private}.2f,longBoutsWalkingSp eedCountRatioLog,%{private}.2f",  buf,  0xC0u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186E348);
    }
    float64_t v52 = a2->f64[0];
    float64_t v53 = a2->f64[1];
    float64_t v54 = a2[4].f64[0];
    float64_t v55 = a2[4].f64[1];
    float64_t v56 = a2[1].f64[0];
    float64_t v57 = a2[1].f64[1];
    float64_t v59 = a2[3].f64[0];
    float64_t v58 = a2[3].f64[1];
    float64_t v61 = a2[2].f64[0];
    float64_t v60 = a2[2].f64[1];
    float64_t v63 = a2[8].f64[1];
    float64_t v62 = a2[9].f64[0];
    float64_t v64 = a2[6].f64[0];
    float64_t v65 = a2[6].f64[1];
    float64_t v67 = a2[7].f64[1];
    float64_t v66 = a2[8].f64[0];
    float64_t v68 = a2[7].f64[0];
    __int16 v71 = (uint64_t *)&a2[5];
    float64_t v69 = a2[5].f64[0];
    uint64_t v70 = v71[1];
    int v77 = 134288129;
    float64_t v78 = v52;
    __int16 v79 = 2049;
    float64_t v80 = v53;
    __int16 v81 = 2049;
    float64_t v82 = v56;
    __int16 v83 = 2049;
    float64_t v84 = v54;
    __int16 v85 = 2049;
    *(float64_t *)double v86 = v55;
    *(_WORD *)&v86[8] = 2049;
    float64_t v87 = v58;
    __int16 v88 = 2049;
    float64_t v89 = v57;
    __int16 v90 = 2049;
    float64_t v91 = v60;
    __int16 v92 = 2049;
    float64_t v93 = v59;
    __int16 v94 = 2049;
    float64_t v95 = v61;
    __int16 v96 = 2049;
    float64_t v97 = v63;
    __int16 v98 = 2049;
    float64_t v99 = v62;
    __int16 v100 = 2049;
    float64_t v101 = v67;
    __int16 v102 = 2049;
    float64_t v103 = v64;
    __int16 v104 = 2049;
    float64_t v105 = v65;
    __int16 v106 = 2049;
    float64_t v107 = v66;
    __int16 v108 = 2049;
    uint64_t v109 = v70;
    __int16 v110 = 2049;
    float64_t v111 = v68;
    __int16 v112 = 2049;
    float64_t v113 = v69;
    LODWORD(v76) = 192;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessModelContinuousWalking::Features,allBoutsBoutDurationCv,%{private}.2f,allBoutsBoutDurationMe dian,%{private}.2f,allBoutsCycleTimeCv,%{private}.2f,intermediateBoutsWalkingSpeedMedian,%{private}.2f,intermediat eBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,intermediateBoutsWalkingSpeedCv,%{private}.2f,intermediateBou tsCycleTimeCv,%{private}.2f,intermediateBoutsStepLengthMedian,%{private}.2f,intermediateBoutsStepLengthMedianHeigh tnorm,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedMedian,%{pr ivate}.2f,shortBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,shortBoutsStepLengthMedianHeightnorm,%{private} .2f,shortBoutsCycleTimeMedian,%{private}.2f,shortBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkin gSpeedCv,%{private}.2f,shortBoutsCycleTimeCv,%{private}.2f,shortBoutsStepLengthCv,%{private}.2f,longBoutsWalkingSp eedCountRatioLog,%{private}.2f",  &v77,  v76);
    __int16 v73 = (uint8_t *)v72;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Fea tures &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v72);
    if (v73 != buf) {
      free(v73);
    }
  }

BOOL sub_100AD4388(double *a1)
{
  return *a1 != -INFINITY
      && a1[1] != -INFINITY
      && a1[2] != -INFINITY
      && a1[3] != -INFINITY
      && a1[4] != -INFINITY
      && a1[5] != -INFINITY
      && a1[6] != -INFINITY
      && a1[7] != -INFINITY
      && a1[8] != -INFINITY
      && a1[9] != -INFINITY
      && a1[10] != -INFINITY
      && a1[11] != -INFINITY
      && a1[12] != -INFINITY
      && a1[13] != -INFINITY
      && a1[14] != -INFINITY
      && a1[15] != -INFINITY
      && a1[16] != -INFINITY
      && a1[17] != -INFINITY
      && a1[18] != -INFINITY;
}

void sub_100AD44C8(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  int64x2_t v7 = vdupq_n_s64(0xFFF0000000000000LL);
  *(int64x2_t *)a3 = v7;
  *(int64x2_t *)(a3 + 16) = v7;
  *(int64x2_t *)(a3 + 32) = v7;
  *(int64x2_t *)(a3 + 48) = v7;
  *(int64x2_t *)(a3 + 64) = v7;
  *(int64x2_t *)(a3 + 80) = v7;
  *(int64x2_t *)(a3 + 96) = v7;
  *(int64x2_t *)(a3 + 112) = v7;
  *(int64x2_t *)(a3 + 128) = v7;
  *(void *)(a3 + 144) = 0xFFF0000000000000LL;
  int8x16_t v176 = 0LL;
  double v177 = 0LL;
  uint64_t v178 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  *(void *)buf = &v176;
  if (v9 == v8)
  {
    int v12 = 0LL;
    double v13 = 0LL;
  }

  else
  {
    do
    {
      double v10 = *(double *)(v9 + 8);
      if (v10 < a4 && v10 >= a4 + -2419200.0) {
        sub_1004CC934((void ***)buf, (_OWORD *)v9);
      }
      v9 += 224LL;
    }

    while (v9 != v8);
    double v13 = (double *)v176;
    int v12 = v177;
  }

  uint64_t v145 = a2;
  std::stringbuf::string_type __p = 0LL;
  unint64_t v174 = 0LL;
  int v175 = 0LL;
  int8x16_t v170 = 0LL;
  uint64_t v171 = 0LL;
  int v172 = 0LL;
  __int128 v167 = 0LL;
  __int128 v168 = 0LL;
  __int128 v169 = 0LL;
  uint64_t v164 = 0LL;
  uint64_t v165 = 0LL;
  float64x2_t v166 = 0LL;
  int v161 = 0LL;
  BOOL v162 = 0LL;
  double v163 = 0LL;
  double v158 = 0LL;
  double v159 = 0LL;
  float64x2_t v160 = 0LL;
  double v155 = 0LL;
  int8x16_t v156 = 0LL;
  double v157 = 0LL;
  double v152 = 0LL;
  double v153 = 0LL;
  double v154 = 0LL;
  __int16 v149 = 0LL;
  float64_t v150 = 0LL;
  double v151 = 0LL;
  float64_t v146 = 0LL;
  __int16 v147 = 0LL;
  float64_t v148 = 0LL;
  if (v13 == v12)
  {
    unint64_t v15 = 0LL;
    unint64_t v14 = 0LL;
  }

  else
  {
    unint64_t v14 = 0LL;
    unint64_t v15 = 0LL;
    do
    {
      double v16 = v13[2] - v13[1];
      if (v16 > 600.0 || v16 <= 60.0)
      {
        int v18 = *((_DWORD *)v13 + 13);
        if (v18) {
          int v19 = 42;
        }
        else {
          int v19 = -1;
        }
        int v20 = v19 & (_DWORD)v13[24];
        if (v16 <= 60.0)
        {
          if (!v20)
          {
            float64_t v25 = v156;
            if (v156 >= v157)
            {
              float64_t v33 = (char *)v155;
              uint64_t v34 = (v156 - (_BYTE *)v155) >> 3;
              unint64_t v35 = v34 + 1;
              uint64_t v36 = v157 - (_BYTE *)v155;
              if ((v157 - (_BYTE *)v155) >> 2 > v35) {
                unint64_t v35 = v36 >> 2;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                float64_t v38 = (char *)sub_1000071BC((uint64_t)&v157, v37);
                float64_t v33 = (char *)v155;
                float64_t v25 = v156;
              }

              else
              {
                float64_t v38 = 0LL;
              }

              __int16 v73 = &v38[8 * v34];
              *(double *)__int16 v73 = v13[14];
              float64_t v26 = v73 + 8;
              while (v25 != v33)
              {
                uint64_t v74 = *((void *)v25 - 1);
                v25 -= 8;
                *((void *)v73 - 1) = v74;
                v73 -= 8;
              }

              double v155 = v73;
              int8x16_t v156 = v26;
              double v157 = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }

            else
            {
              *(double *)int8x16_t v156 = v13[14];
              float64_t v26 = v25 + 8;
            }

            int8x16_t v156 = v26;
            int v18 = *((_DWORD *)v13 + 13);
          }

          if (v18) {
            int v75 = 42;
          }
          else {
            int v75 = -1;
          }
          if ((v75 & *((_DWORD *)v13 + 49)) == 0)
          {
            uint64_t v76 = v153;
            if (v153 >= v154)
            {
              float64_t v78 = (char *)v152;
              uint64_t v79 = (v153 - (_BYTE *)v152) >> 3;
              unint64_t v80 = v79 + 1;
              uint64_t v81 = v154 - (_BYTE *)v152;
              if ((v154 - (_BYTE *)v152) >> 2 > v80) {
                unint64_t v80 = v81 >> 2;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                __int16 v83 = (char *)sub_1000071BC((uint64_t)&v154, v82);
                float64_t v78 = (char *)v152;
                uint64_t v76 = v153;
              }

              else
              {
                __int16 v83 = 0LL;
              }

              float64_t v84 = &v83[8 * v79];
              *(double *)float64_t v84 = v13[15];
              int v77 = v84 + 8;
              while (v76 != v78)
              {
                uint64_t v85 = *((void *)v76 - 1);
                v76 -= 8;
                *((void *)v84 - 1) = v85;
                v84 -= 8;
              }

              double v152 = v84;
              double v153 = v77;
              double v154 = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }

            else
            {
              *(double *)double v153 = v13[15];
              int v77 = v76 + 8;
            }

            double v153 = v77;
            int v18 = *((_DWORD *)v13 + 13);
          }

          if (v18) {
            int v86 = 42;
          }
          else {
            int v86 = -1;
          }
          if ((v86 & (_DWORD)v13[25]) == 0)
          {
            float64_t v87 = v150;
            if (v150 >= v151)
            {
              float64_t v89 = (char *)v149;
              uint64_t v90 = (v150 - (_BYTE *)v149) >> 3;
              unint64_t v91 = v90 + 1;
              uint64_t v92 = v151 - (_BYTE *)v149;
              if ((v151 - (_BYTE *)v149) >> 2 > v91) {
                unint64_t v91 = v92 >> 2;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                __int16 v94 = (char *)sub_1000071BC((uint64_t)&v151, v93);
                float64_t v89 = (char *)v149;
                float64_t v87 = v150;
              }

              else
              {
                __int16 v94 = 0LL;
              }

              float64_t v95 = &v94[8 * v90];
              *(double *)float64_t v95 = v13[16];
              __int16 v88 = v95 + 8;
              while (v87 != v89)
              {
                uint64_t v96 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v95 - 1) = v96;
                v95 -= 8;
              }

              __int16 v149 = v95;
              float64_t v150 = v88;
              double v151 = &v94[8 * v93];
              if (v89) {
                operator delete(v89);
              }
            }

            else
            {
              *(double *)float64_t v150 = v13[16];
              __int16 v88 = v87 + 8;
            }

            float64_t v150 = v88;
            int v18 = *((_DWORD *)v13 + 13);
          }

          if (v18) {
            int v97 = 42;
          }
          else {
            int v97 = -1;
          }
          if ((v97 & (_DWORD)v13[24]) == 0)
          {
            double v98 = v13[7];
            if (v98 > 0.0)
            {
              float64_t v99 = v147;
              if (v147 >= v148)
              {
                float64_t v101 = (double *)v146;
                uint64_t v102 = ((char *)v147 - (_BYTE *)v146) >> 3;
                unint64_t v103 = v102 + 1;
                uint64_t v104 = (char *)v148 - (_BYTE *)v146;
                else {
                  unint64_t v105 = v103;
                }
                if (v105)
                {
                  __int16 v106 = (char *)sub_1000071BC((uint64_t)&v148, v105);
                  float64_t v101 = (double *)v146;
                  float64_t v99 = v147;
                  double v98 = v13[7];
                }

                else
                {
                  __int16 v106 = 0LL;
                }

                uint64_t v109 = (double *)&v106[8 * v102];
                *uint64_t v109 = v98;
                __int16 v100 = v109 + 1;
                while (v99 != v101)
                {
                  uint64_t v110 = *((void *)v99-- - 1);
                  *((void *)v109-- - 1) = v110;
                }

                float64_t v146 = v109;
                __int16 v147 = v100;
                float64_t v148 = (double *)&v106[8 * v105];
                if (v101) {
                  operator delete(v101);
                }
              }

              else
              {
                *__int16 v147 = v98;
                __int16 v100 = v99 + 1;
              }

              __int16 v147 = v100;
            }
          }
        }

        else if (!v20)
        {
          ++v14;
        }
      }

      else
      {
        int v21 = *((_DWORD *)v13 + 13);
        if (v21) {
          int v22 = 42;
        }
        else {
          int v22 = -1;
        }
        if ((v22 & (_DWORD)v13[24]) == 0)
        {
          int v23 = v174;
          if (v174 >= v175)
          {
            float64_t v27 = (char *)__p;
            uint64_t v28 = (v174 - (_BYTE *)__p) >> 3;
            unint64_t v29 = v28 + 1;
            uint64_t v30 = v175 - (_BYTE *)__p;
            if ((v175 - (_BYTE *)__p) >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              float64_t v32 = (char *)sub_1000071BC((uint64_t)&v175, v31);
              float64_t v27 = (char *)__p;
              int v23 = v174;
            }

            else
            {
              float64_t v32 = 0LL;
            }

            float64_t v39 = &v32[8 * v28];
            *(double *)float64_t v39 = v13[14];
            float64_t v24 = v39 + 8;
            while (v23 != v27)
            {
              uint64_t v40 = *((void *)v23 - 1);
              v23 -= 8;
              *((void *)v39 - 1) = v40;
              v39 -= 8;
            }

            std::stringbuf::string_type __p = v39;
            unint64_t v174 = v24;
            int v175 = &v32[8 * v31];
            if (v27) {
              operator delete(v27);
            }
          }

          else
          {
            *(double *)unint64_t v174 = v13[14];
            float64_t v24 = v23 + 8;
          }

          unint64_t v174 = v24;
          int v21 = *((_DWORD *)v13 + 13);
        }

        if (v21) {
          int v41 = 42;
        }
        else {
          int v41 = -1;
        }
        if ((v41 & *((_DWORD *)v13 + 49)) == 0)
        {
          float64_t v42 = v171;
          if (v171 >= v172)
          {
            float64_t v44 = (char *)v170;
            uint64_t v45 = (v171 - (_BYTE *)v170) >> 3;
            unint64_t v46 = v45 + 1;
            uint64_t v47 = v172 - (_BYTE *)v170;
            if ((v172 - (_BYTE *)v170) >> 2 > v46) {
              unint64_t v46 = v47 >> 2;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              int v49 = (char *)sub_1000071BC((uint64_t)&v172, v48);
              float64_t v44 = (char *)v170;
              float64_t v42 = v171;
            }

            else
            {
              int v49 = 0LL;
            }

            double v50 = &v49[8 * v45];
            *(double *)double v50 = v13[15];
            float64_t v43 = v50 + 8;
            while (v42 != v44)
            {
              uint64_t v51 = *((void *)v42 - 1);
              v42 -= 8;
              *((void *)v50 - 1) = v51;
              v50 -= 8;
            }

            int8x16_t v170 = v50;
            uint64_t v171 = v43;
            int v172 = &v49[8 * v48];
            if (v44) {
              operator delete(v44);
            }
          }

          else
          {
            *(double *)uint64_t v171 = v13[15];
            float64_t v43 = v42 + 8;
          }

          uint64_t v171 = v43;
          int v21 = *((_DWORD *)v13 + 13);
        }

        if (v21) {
          int v52 = 42;
        }
        else {
          int v52 = -1;
        }
        if ((v52 & (_DWORD)v13[25]) == 0)
        {
          float64_t v53 = v168;
          if (v168 >= v169)
          {
            float64_t v55 = (char *)v167;
            uint64_t v56 = (v168 - (_BYTE *)v167) >> 3;
            unint64_t v57 = v56 + 1;
            uint64_t v58 = v169 - (_BYTE *)v167;
            if ((v169 - (_BYTE *)v167) >> 2 > v57) {
              unint64_t v57 = v58 >> 2;
            }
            else {
              unint64_t v59 = v57;
            }
            if (v59)
            {
              float64_t v60 = (char *)sub_1000071BC((uint64_t)&v169, v59);
              float64_t v55 = (char *)v167;
              float64_t v53 = v168;
            }

            else
            {
              float64_t v60 = 0LL;
            }

            float64_t v61 = &v60[8 * v56];
            *(double *)float64_t v61 = v13[16];
            float64_t v54 = v61 + 8;
            while (v53 != v55)
            {
              uint64_t v62 = *((void *)v53 - 1);
              v53 -= 8;
              *((void *)v61 - 1) = v62;
              v61 -= 8;
            }

            __int128 v167 = v61;
            __int128 v168 = v54;
            __int128 v169 = &v60[8 * v59];
            if (v55) {
              operator delete(v55);
            }
          }

          else
          {
            *(double *)__int128 v168 = v13[16];
            float64_t v54 = v53 + 8;
          }

          __int128 v168 = v54;
          int v21 = *((_DWORD *)v13 + 13);
        }

        if (v21) {
          int v63 = 42;
        }
        else {
          int v63 = -1;
        }
        if ((v63 & (_DWORD)v13[24]) == 0)
        {
          double v64 = v13[7];
          if (v64 > 0.0)
          {
            float64_t v65 = v159;
            if (v159 >= v160)
            {
              float64_t v67 = (double *)v158;
              uint64_t v68 = ((char *)v159 - (_BYTE *)v158) >> 3;
              unint64_t v69 = v68 + 1;
              uint64_t v70 = (char *)v160 - (_BYTE *)v158;
              else {
                unint64_t v71 = v69;
              }
              if (v71)
              {
                double v72 = (char *)sub_1000071BC((uint64_t)&v160, v71);
                float64_t v67 = (double *)v158;
                float64_t v65 = v159;
                double v64 = v13[7];
              }

              else
              {
                double v72 = 0LL;
              }

              float64_t v107 = (double *)&v72[8 * v68];
              *float64_t v107 = v64;
              float64_t v66 = v107 + 1;
              while (v65 != v67)
              {
                uint64_t v108 = *((void *)v65-- - 1);
                *((void *)v107-- - 1) = v108;
              }

              double v158 = v107;
              double v159 = v66;
              float64x2_t v160 = (double *)&v72[8 * v71];
              if (v67) {
                operator delete(v67);
              }
            }

            else
            {
              *double v159 = v64;
              float64_t v66 = v65 + 1;
            }

            double v159 = v66;
          }
        }
      }

      if (*((_DWORD *)v13 + 9))
      {
        double v111 = v13[2] - v13[1];
        __int16 v112 = v165;
        if (v165 >= v166)
        {
          double v114 = (double *)v164;
          uint64_t v115 = ((char *)v165 - (_BYTE *)v164) >> 3;
          unint64_t v116 = v115 + 1;
          uint64_t v117 = (char *)v166 - (_BYTE *)v164;
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            float64_t v119 = (char *)sub_1000071BC((uint64_t)&v166, v118);
            double v114 = (double *)v164;
            __int16 v112 = v165;
          }

          else
          {
            float64_t v119 = 0LL;
          }

          __int16 v120 = (double *)&v119[8 * v115];
          *__int16 v120 = v111;
          float64_t v113 = v120 + 1;
          while (v112 != v114)
          {
            uint64_t v121 = *((void *)v112-- - 1);
            *((void *)v120-- - 1) = v121;
          }

          uint64_t v164 = v120;
          uint64_t v165 = v113;
          float64x2_t v166 = (double *)&v119[8 * v118];
          if (v114) {
            operator delete(v114);
          }
        }

        else
        {
          *uint64_t v165 = v111;
          float64_t v113 = v112 + 1;
        }

        uint64_t v165 = v113;
      }

      int v122 = *((_DWORD *)v13 + 48);
      int v123 = *((_DWORD *)v13 + 13);
      if (v123) {
        int v124 = 42;
      }
      else {
        int v124 = -1;
      }
      if ((v124 & v122) == 0)
      {
        double v125 = v13[7];
        if (v125 > 0.0)
        {
          float64_t v126 = v162;
          if (v162 >= v163)
          {
            float64_t v128 = (double *)v161;
            uint64_t v129 = ((char *)v162 - (_BYTE *)v161) >> 3;
            unint64_t v130 = v129 + 1;
            if ((unint64_t)(v129 + 1) >> 61) {
LABEL_284:
            }
              sub_100007008();
            uint64_t v131 = (char *)v163 - (_BYTE *)v161;
            else {
              unint64_t v132 = v130;
            }
            if (v132)
            {
              __int16 v133 = (char *)sub_1000071BC((uint64_t)&v163, v132);
              float64_t v128 = (double *)v161;
              float64_t v126 = v162;
              double v125 = v13[7];
            }

            else
            {
              __int16 v133 = 0LL;
            }

            float64_t v134 = (double *)&v133[8 * v129];
            *float64_t v134 = v125;
            __int16 v127 = v134 + 1;
            while (v126 != v128)
            {
              uint64_t v135 = *((void *)v126-- - 1);
              *((void *)v134-- - 1) = v135;
            }

            int v161 = v134;
            BOOL v162 = v127;
            double v163 = (double *)&v133[8 * v132];
            if (v128) {
              operator delete(v128);
            }
          }

          else
          {
            *BOOL v162 = v125;
            __int16 v127 = v126 + 1;
          }

          BOOL v162 = v127;
          int v122 = *((_DWORD *)v13 + 48);
          int v123 = *((_DWORD *)v13 + 13);
        }
      }

      if (v123) {
        int v136 = 42;
      }
      else {
        int v136 = -1;
      }
      if ((v136 & v122) == 0) {
        ++v15;
      }
      v13 += 28;
    }

    while (v13 != v12);
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186E348);
  }
  __int16 v137 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134352384;
    *(double *)&uint8_t buf[4] = a4;
    __int16 v208 = 2050;
    uint64_t v209 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v177 - (_BYTE *)v176) >> 5);
    __int16 v210 = 2050;
    uint64_t v211 = (v174 - (_BYTE *)__p) >> 3;
    __int16 v212 = 2050;
    uint64_t v213 = (v171 - (_BYTE *)v170) >> 3;
    __int16 v214 = 2050;
    uint64_t v215 = (v168 - (_BYTE *)v167) >> 3;
    __int16 v216 = 2050;
    uint64_t v217 = ((char *)v165 - (_BYTE *)v164) >> 3;
    __int16 v218 = 2050;
    uint64_t v219 = ((char *)v162 - (_BYTE *)v161) >> 3;
    __int16 v220 = 2050;
    uint64_t v221 = ((char *)v159 - (_BYTE *)v158) >> 3;
    __int16 v222 = 2050;
    uint64_t v223 = (v156 - (_BYTE *)v155) >> 3;
    __int16 v224 = 2050;
    uint64_t v225 = (v153 - (_BYTE *)v152) >> 3;
    __int16 v226 = 2050;
    uint64_t v227 = (v150 - (_BYTE *)v149) >> 3;
    __int16 v228 = 2050;
    uint64_t v229 = ((char *)v147 - (_BYTE *)v146) >> 3;
    __int16 v230 = 2050;
    unint64_t v231 = v14;
    __int16 v232 = 2050;
    unint64_t v233 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v137,  OS_LOG_TYPE_DEBUG,  "SteadinessModelContinuousWalking::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermed iateWalkingSpeeds,%{public}lu,numIntermediateDST,%{public}lu,numIntermediateStepLengths,%{public}lu,numDurations,% {public}lu,numCycleTimes,%{public}lu,numIntermediateCycleTimes,%{public}lu,numShortWalkingSpeeds,%{public}lu,numSh ortDST,%{public}lu,numShortStepLengths,%{public}lu,numShortCycleTimes,%{public}lu,numLongBouts,%{public}lu,numAllB outs,%{public}lu",  buf,  0x8Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186E348);
    }
    int v179 = 134352384;
    double v180 = a4;
    __int16 v181 = 2050;
    uint64_t v182 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v177 - (_BYTE *)v176) >> 5);
    __int16 v183 = 2050;
    uint64_t v184 = (v174 - (_BYTE *)__p) >> 3;
    __int16 v185 = 2050;
    uint64_t v186 = (v171 - (_BYTE *)v170) >> 3;
    __int16 v187 = 2050;
    uint64_t v188 = (v168 - (_BYTE *)v167) >> 3;
    __int16 v189 = 2050;
    uint64_t v190 = ((char *)v165 - (_BYTE *)v164) >> 3;
    __int16 v191 = 2050;
    uint64_t v192 = ((char *)v162 - (_BYTE *)v161) >> 3;
    __int16 v193 = 2050;
    uint64_t v194 = ((char *)v159 - (_BYTE *)v158) >> 3;
    __int16 v195 = 2050;
    uint64_t v196 = (v156 - (_BYTE *)v155) >> 3;
    __int16 v197 = 2050;
    uint64_t v198 = (v153 - (_BYTE *)v152) >> 3;
    __int16 v199 = 2050;
    uint64_t v200 = (v150 - (_BYTE *)v149) >> 3;
    __int16 v201 = 2050;
    uint64_t v202 = ((char *)v147 - (_BYTE *)v146) >> 3;
    __int16 v203 = 2050;
    unint64_t v204 = v14;
    __int16 v205 = 2050;
    unint64_t v206 = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  2LL,  "SteadinessModelContinuousWalking::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermed iateWalkingSpeeds,%{public}lu,numIntermediateDST,%{public}lu,numIntermediateStepLengths,%{public}lu,numDurations,% {public}lu,numCycleTimes,%{public}lu,numIntermediateCycleTimes,%{public}lu,numShortWalkingSpeeds,%{public}lu,numSh ortDST,%{public}lu,numShortStepLengths,%{public}lu,numShortCycleTimes,%{public}lu,numLongBouts,%{public}lu,numAllB outs,%{public}lu",  &v179,  142);
    float64_t v144 = (char *)v143;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Features CLMobility::SteadinessModelContinuousWalking::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetri cs> &, const CLBodyMetrics &) const",  "%s\n",  v143);
    if (v144 != buf) {
      free(v144);
    }
  }

  *(double *)a3 = sub_100CFC21C((double **)&v164);
  *(double *)(a3 + 8) = sub_100CFC440((uint64_t *)&v164);
  *(double *)(a3 + 16) = sub_100CFC21C((double **)&v161);
  double v138 = sub_100CFC440((uint64_t *)&__p);
  *(double *)(a3 + 64) = v138;
  if (v138 != -INFINITY) {
    *(double *)(a3 + 72) = v138 / sqrtf(*(float *)(v145 + 8) * 9.8067);
  }
  *(double *)(a3 + 56) = sub_100CFC21C((double **)&__p);
  *(double *)(a3 + 24) = sub_100CFC21C((double **)&v158);
  double v139 = sub_100CFC440((uint64_t *)&v167);
  *(double *)(a3 + 40) = v139;
  if (v139 != -INFINITY) {
    *(double *)(a3 + 48) = v139 / *(float *)(v145 + 8);
  }
  *(double *)(a3 + 32) = sub_100CFC440((uint64_t *)&v170);
  double v140 = sub_100CFC440((uint64_t *)&v155);
  *(double *)(a3 + 136) = v140;
  if (v140 != -INFINITY) {
    *(double *)(a3 + 144) = v140 / sqrtf(*(float *)(v145 + 8) * 9.8067);
  }
  double v141 = sub_100CFC440((uint64_t *)&v149);
  *(double *)(a3 + 120) = v141;
  if (v141 != -INFINITY) {
    *(double *)(a3 + 120) = v141 / *(float *)(v145 + 8);
  }
  *(double *)(a3 + 96) = sub_100CFC440((uint64_t *)&v146);
  *(double *)(a3 + 104) = sub_100CFC440((uint64_t *)&v152);
  *(double *)(a3 + 128) = sub_100CFC21C((double **)&v155);
  *(double *)(a3 + 88) = sub_100CFC21C((double **)&v146);
  *(double *)(a3 + 112) = sub_100CFC21C((double **)&v149);
  if (v15)
  {
    double v142 = (double)v14;
    if (!v14) {
      double v142 = 0.5;
    }
    *(double *)(a3 + 80) = log(v142 / (double)v15);
  }

  if (v146)
  {
    __int16 v147 = (double *)v146;
    operator delete(v146);
  }

  if (v149)
  {
    float64_t v150 = (char *)v149;
    operator delete(v149);
  }

  if (v152)
  {
    double v153 = (char *)v152;
    operator delete(v152);
  }

  if (v155)
  {
    int8x16_t v156 = (char *)v155;
    operator delete(v155);
  }

  if (v158)
  {
    double v159 = (double *)v158;
    operator delete(v158);
  }

  if (v161)
  {
    BOOL v162 = (double *)v161;
    operator delete(v161);
  }

  if (v164)
  {
    uint64_t v165 = (double *)v164;
    operator delete(v164);
  }

  if (v167)
  {
    __int128 v168 = (char *)v167;
    operator delete(v167);
  }

  if (v170)
  {
    uint64_t v171 = (char *)v170;
    operator delete(v170);
  }

  if (__p)
  {
    unint64_t v174 = (char *)__p;
    operator delete(__p);
  }

  if (v176)
  {
    double v177 = (double *)v176;
    operator delete(v176);
  }

void sub_100AD5450( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a52) {
    operator delete(a52);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AD5528(id a1)
{
  qword_101934488 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

id *sub_100AD5554(id *a1)
{
  if (*a1)
  {

    *a1 = 0LL;
  }

  return a1;
}

uint64_t sub_100AD558C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_10186E378;
  *(double *)(a1 + 24) = a4 + 60.0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = CFStringCreateWithFormat(0LL, 0LL, @"%s.%lx", a2, a3);
  return a1;
}

uint64_t sub_100AD55F4(uint64_t a1)
{
  *(void *)a1 = off_10186E378;
  IOPMAssertionID v2 = *(_DWORD *)(a1 + 12);
  if (v2)
  {
    IOPMAssertionRelease(v2);
    *(_DWORD *)(a1 + 12) = 0;
  }

  int v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0LL;
  }

  *(void *)(a1 + 40) = 0LL;
  return a1;
}

void sub_100AD5654(uint64_t a1)
{
  unsigned int v1 = (void *)sub_100AD55F4(a1);
  operator delete(v1);
}

uint64_t sub_100AD5668(uint64_t a1, uint64_t *a2)
{
  if (*(double *)(a1 + 24) > 60.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32) >= *(double *)(a1 + 24))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186E398);
    }
    int v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v38 = 2082;
      float64_t v39 = "";
      __int16 v40 = 2114;
      uint64_t v41 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Tried to take power assertion that has already timed out, AssertionIdentifier:%{pub lic, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186E398);
      }
    }

    uint64_t v6 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      uint64_t v7 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v38 = 2082;
      float64_t v39 = "";
      __int16 v40 = 2114;
      uint64_t v41 = v7;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Tried to take power assertion that has already timed out",  "{msg%{public}.0s:Tried to take power assertion that has already timed out, AssertionIdentifier:%{pub lic, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 < 1)
  {
LABEL_24:
    unint64_t v14 = a2;
    unint64_t v15 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@(%s)", *(void *)(a1 + 16), v14);
    double v16 = *(double *)(a1 + 24);
    *(_DWORD *)buf = 0;
    if (v16 <= 60.0) {
      IOReturn v17 = IOPMAssertionCreateWithName(@"PreventUserIdleSystemSleep", 0xFFu, v15, (IOPMAssertionID *)buf);
    }
    else {
      IOReturn v17 = IOPMAssertionCreateWithDescription( @"PreventUserIdleSystemSleep",  v15,  0LL,  0LL,  0LL,  v16,  @"TimeoutActionRelease",  (IOPMAssertionID *)buf);
    }
    int v18 = *(_DWORD *)buf;
    if (v17) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = *(_DWORD *)buf == 0;
    }
    if (!v19)
    {
      *(_DWORD *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(CFAbsoluteTime *)(a1 + 32) = CFAbsoluteTimeGetCurrent();
      *(void *)(a1 + 40) = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  a2);
    }

    int v20 = *(_DWORD *)(a1 + 8);
    BOOL v13 = v20 > 0;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10186E3B8);
    }
    int v21 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v22 = v20 <= 0 ? "Fail" : "Took";
      sub_1002A6C50(v15, (std::string *)buf);
      int v23 = (v41 & 0x80000000LL) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)std::stringbuf::string_type __p = 136315394;
      *(void *)&__p[4] = v22;
      *(_WORD *)&_BYTE __p[12] = 2080;
      *(void *)&__p[14] = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s, %s", __p, 0x16u);
      if (SBYTE3(v41) < 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186E3B8);
      }
      uint64_t v25 = qword_101934A78;
      if (v20 <= 0) {
        float64_t v26 = "Fail";
      }
      else {
        float64_t v26 = "Took";
      }
      sub_1002A6C50(v15, (std::string *)__p);
      if (__p[23] >= 0) {
        float64_t v27 = __p;
      }
      else {
        float64_t v27 = *(_BYTE **)__p;
      }
      LODWORD(v35.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      WORD2(v35.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
      LODWORD(v34) = 22;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  2LL,  "%s, %s",  (const char *)&v35,  v34);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPowerAssertion::takePowerAssertion(std::string)", "%s\n", v28);
    }

    CFRelease(v15);
  }

  else
  {
    *(_DWORD *)(a1 + 8) = v8 + 1;
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10186E3B8);
    }
    uint64_t v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(_DWORD *)(a1 + 8);
      sub_1002A6C50(*(const __CFString **)(a1 + 16), (std::string *)__p);
      if (__p[23] >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = *(const char **)__p;
      }
      int v12 = a2;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      __int16 v38 = 2080;
      float64_t v39 = v11;
      __int16 v40 = 2080;
      uint64_t v41 = (uint64_t)v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Took, inc ref, %d, %s, thisReason, %s",  buf,  0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186E3B8);
      }
      uint64_t v29 = qword_101934A78;
      int v30 = *(_DWORD *)(a1 + 8);
      sub_1002A6C50(*(const __CFString **)(a1 + 16), &v35);
      if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v31 = &v35;
      }
      else {
        unint64_t v31 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::stringbuf::string_type __p = 67109634;
      *(_DWORD *)&__p[4] = v30;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = v31;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = a2;
      LODWORD(v33) = 28;
      float64_t v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  2LL,  "Took, inc ref, %d, %s, thisReason, %s",  __p,  v33,  v35.__r_.__value_.__l.__data_);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPowerAssertion::takePowerAssertion(std::string)", "%s\n", v32);
    }

    return 1LL;
  }

  return v13;
}

BOOL sub_100AD5D38(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  BOOL v2 = __OFSUB__(v1, 1);
  int v3 = v1 - 1;
  if (v3 < 0 != v2) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (v3)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10186E3B8);
    }
    uint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a1 + 8);
      sub_1002A6C50(*(const __CFString **)(a1 + 16), __p);
      uint64_t v7 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v6;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Release power assertion, dec ref, %d, %s",  (uint8_t *)&buf,  0x12u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186E3B8);
      }
      uint64_t v9 = qword_101934A78;
      int v10 = *(_DWORD *)(a1 + 8);
      sub_1002A6C50(*(const __CFString **)(a1 + 16), &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v24 = 67109378;
      *(_DWORD *)uint64_t v25 = v10;
      *(_WORD *)&_DWORD v25[4] = 2080;
      *(void *)&v25[6] = p_buf;
      LODWORD(v21) = 18;
      int v12 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  2LL,  "Release power assertion, dec ref, %d, %s",  &v24,  v21);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPowerAssertion::releasePowerAssertion()", "%s\n", (const char *)v12);
      if (v12 != __p) {
        free(v12);
      }
      return 0LL;
    }
  }

  else
  {
    IOPMAssertionRelease(*(_DWORD *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = 0;

    *(void *)(a1 + 40) = 0LL;
    double Current = CFAbsoluteTimeGetCurrent();
    double v14 = *(double *)(a1 + 32);
    *(void *)(a1 + 32) = 0LL;
    if (qword_101934A70 != -1)
    {
      double v22 = Current;
      dispatch_once(&qword_101934A70, &stru_10186E3B8);
      double Current = v22;
    }

    double v15 = Current - v14;
    double v16 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      sub_1002A6C50(*(const __CFString **)(a1 + 16), __p);
      IOReturn v17 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Release power assertion, %s, heldFor, %.2lf",  (uint8_t *)&buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186E3B8);
      }
      uint64_t v18 = qword_101934A78;
      sub_1002A6C50(*(const __CFString **)(a1 + 16), &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v19 = &buf;
      }
      else {
        BOOL v19 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v24 = 136315394;
      *(void *)uint64_t v25 = v19;
      *(_WORD *)&_WORD v25[8] = 2048;
      *(double *)&v25[10] = v15;
      LODWORD(v21) = 22;
      int v20 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v18,  2LL,  "Release power assertion, %s, heldFor, %.2lf",  (const char *)&v24,  *(double *)&v21);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPowerAssertion::releasePowerAssertion()", "%s\n", (const char *)v20);
      if (v20 != __p) {
        free(v20);
      }
    }

    return 1LL;
  }

  return result;
}

void sub_100AD6188(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100AD61B4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100AD655C(id *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        a1[3] = String;
        goto LABEL_30;
      case 2u:
        double v14 = objc_alloc_init(&OBJC_CLASS___CLCKVO2MaxSessionAttributes);

        a1[2] = v14;
        goto LABEL_29;
      case 3u:
        double v15 = objc_alloc_init(&OBJC_CLASS___CLCKVO2MaxEstimate);

        a1[1] = v15;
        goto LABEL_29;
      case 4u:
        double v16 = objc_alloc_init(&OBJC_CLASS___CLCKVO2MaxSummary);
        [a1 addSummaries:v16];

        if (PBReaderPlaceMark(a2, v17) && (sub_100B636A4((uint64_t)v16, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark(a2, v17);
LABEL_30:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_30;
    }
  }

double sub_100AD6EA0(uint64_t a1)
{
  double result = 7.59982549e15;
  *(_OWORD *)a1 = xmmword_101348690;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_100AD6EB4(uint64_t result, float a2)
{
  float v2 = *(float *)result;
  else {
    int v3 = 4;
  }
  *(_DWORD *)(result + 16) = v3;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = fminf(v2, 65.0);
  *(float *)(result + 12) = a2;
  return result;
}

float sub_100AD6EE0(uint64_t a1, float a2)
{
  *(float *)a1 = a2;
  int v2 = *(_DWORD *)(a1 + 4);
  if (a2 >= 65.0) {
    int v3 = 1;
  }
  else {
    int v3 = 4;
  }
  *(_DWORD *)(a1 + 16) = v3;
  float result = fminf(a2, 65.0);
  *(float *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t sub_100AD6F0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)a1 = off_10186E3E8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 24), *(void **)(a3 + 16), *(void *)(a3 + 24));
  }

  else
  {
    __int128 v10 = *(_OWORD *)(a3 + 16);
    *(void *)(a1 + 40) = *(void *)(a3 + 32);
    *(_OWORD *)(a1 + 24) = v10;
  }

  sub_10046E90C(a1 + 48, (void *)(a3 + 40));
  *(_BYTE *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = a5;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + memset(&v8[8], 0, 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 488) = 1;
  sub_100AD70C0(a1, (unsigned __int8 *)a2);
  __int128 v11 = *(_OWORD *)(a2 + 144);
  __int128 v25 = *(_OWORD *)(a2 + 128);
  __int128 v26 = v11;
  uint64_t v27 = *(void *)(a2 + 160);
  __int128 v12 = *(_OWORD *)(a2 + 80);
  __int128 v21 = *(_OWORD *)(a2 + 64);
  __int128 v22 = v12;
  __int128 v13 = *(_OWORD *)(a2 + 112);
  __int128 v23 = *(_OWORD *)(a2 + 96);
  __int128 v24 = v13;
  __int128 v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu1 = *(_OWORD *)a2;
  __int128 v18 = v14;
  __int128 v15 = *(_OWORD *)(a2 + 48);
  __int128 v19 = *(_OWORD *)(a2 + 32);
  __int128 v20 = v15;
  sub_100AD7650(a1, uu1);
  sub_100AD7C08((int64x2_t *)a1, *(void *)(a2 + 48));
  return a1;
}

void sub_100AD7088( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

__n128 sub_100AD70C0(uint64_t a1, unsigned __int8 *uu2)
{
  unint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = (void *)(v5 + 8 * (v4 / 0x18));
  if (v6 == v5)
  {
    unint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v8 = *(void *)(v5 + 8 * (v4 / 0x18)) + 168 * (v4 % 0x18);
    unint64_t v9 = *(void *)(v5 + 8 * ((*(void *)(a1 + 88) + v4) / 0x18)) + 168 * ((*(void *)(a1 + 88) + v4) % 0x18);
    if (v8 != v9)
    {
      while (1)
      {
        __int128 v10 = *(_OWORD *)v8;
        __int128 v11 = *(_OWORD *)(v8 + 32);
        __int128 v50 = *(_OWORD *)(v8 + 16);
        __int128 v51 = v11;
        *(_OWORD *)uu1 = v10;
        __int128 v12 = *(_OWORD *)(v8 + 48);
        __int128 v13 = *(_OWORD *)(v8 + 64);
        __int128 v14 = *(_OWORD *)(v8 + 96);
        __int128 v54 = *(_OWORD *)(v8 + 80);
        __int128 v55 = v14;
        __int128 v52 = v12;
        __int128 v53 = v13;
        __int128 v15 = *(_OWORD *)(v8 + 112);
        __int128 v16 = *(_OWORD *)(v8 + 128);
        __int128 v17 = *(_OWORD *)(v8 + 144);
        uint64_t v59 = *(void *)(v8 + 160);
        __int128 v57 = v16;
        __int128 v58 = v17;
        __int128 v56 = v15;
        if (!uuid_compare(uu1, uu2)) {
          break;
        }
        v8 += 168LL;
        if (v8 - *v7 == 4032)
        {
          unint64_t v18 = v7[1];
          ++v7;
          unint64_t v8 = v18;
        }

        if (v8 == v9)
        {
          unint64_t v8 = v9;
          break;
        }
      }

      unint64_t v4 = *(void *)(a1 + 80);
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 64);
    }
  }

  unint64_t v19 = v4 + *(void *)(a1 + 88);
  __int128 v20 = *(_OWORD *)uu2;
  __int128 v21 = *((_OWORD *)uu2 + 1);
  *(_OWORD *)(a1 + 168) = *((_OWORD *)uu2 + 2);
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 136) = v20;
  __int128 v22 = *((_OWORD *)uu2 + 3);
  __int128 v23 = *((_OWORD *)uu2 + 4);
  __int128 v24 = *((_OWORD *)uu2 + 5);
  *(_OWORD *)(a1 + 232) = *((_OWORD *)uu2 + 6);
  *(_OWORD *)(a1 + 216) = v24;
  *(_OWORD *)(a1 + 200) = v23;
  *(_OWORD *)(a1 + 184) = v22;
  __int128 v25 = *((_OWORD *)uu2 + 7);
  __int128 v26 = *((_OWORD *)uu2 + 9);
  uint64_t v27 = *((void *)uu2 + 20);
  *(_OWORD *)(a1 + 264) = *((_OWORD *)uu2 + 8);
  *(_OWORD *)(a1 + 280) = v26;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 296) = v27;
  *(_OWORD *)(a1 + 248) = v25;
  *(void *)(a1 + 472) = 0LL;
  uint64_t v28 = (uint64_t *)(v5 + 8 * (v19 / 0x18));
  *(_OWORD *)(a1 + 312) = 0u;
  if (v6 == v5)
  {
    if (!v8) {
      goto LABEL_17;
    }
    unint64_t v30 = 0LL;
    uint64_t v29 = *v28;
  }

  else
  {
    uint64_t v29 = *v28;
    unint64_t v30 = *v28 + 168 * (v19 % 0x18);
    if (v8 == v30)
    {
LABEL_17:
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186E410);
      }
      uint64_t v34 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uu1 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "CLWorkoutSeriesDetectionModelController, confirmed workout is not in workout user prior list for auto-detection",  uu1,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(uu1, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186E410);
        }
        v48[0] = 0;
        uint64_t v36 = (unsigned __int8 *)_os_log_send_and_compose_impl( 2LL,  0LL,  uu1,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "CLWorkoutSeriesDetectionModelController, confirmed workout is not in workout user pri or list for auto-detection",  v48,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWorkoutSeriesDetectionModelController::updateWorkingModelsFromUserPrior(const CLMotionStateMediator_Typ e::WorkoutSettings &)",  "%s\n");
LABEL_37:
        if (v36 != uu1) {
          free(v36);
        }
        return result;
      }

      return result;
    }
  }

  uint64_t v31 = v30 - v29;
  unint64_t v32 = 0xCF3CF3CF3CF3CF3DLL * (v31 >> 3);
  if (v31 < 169) {
    unint64_t v33 = v28[-((24 - v32) / 0x18)] + 168 * (24 * ((24 - v32) / 0x18) - (24 - v32)) + 3864;
  }
  else {
    unint64_t v33 = v28[(v32 - 1) / 0x18] + 168 * ((v32 - 1) % 0x18);
  }
  if (v8 == v33)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186E410);
    }
    __int16 v40 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uu1 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, confirmed workout is the last workout in user prior list",  uu1,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(uu1, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186E410);
      }
      v48[0] = 0;
      uint64_t v36 = (unsigned __int8 *)_os_log_send_and_compose_impl( 2LL,  0LL,  uu1,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, confirmed workout is the last workout in user prior list",  v48,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::updateWorkingModelsFromUserPrior(const CLMotionStateMediator_Type: :WorkoutSettings &)",  "%s\n");
      goto LABEL_37;
    }
  }

  else
  {
    uint64_t v37 = v8 - *v7;
    unint64_t v38 = 0xCF3CF3CF3CF3CF3DLL * (v37 >> 3);
    if (v37 < -167) {
      unint64_t v39 = v7[-((22 - v38) / 0x18)] + 168 * (24 * ((22 - v38) / 0x18) - (22 - v38)) + 3864;
    }
    else {
      unint64_t v39 = v7[(v38 + 1) / 0x18] + 168 * ((v38 + 1) % 0x18);
    }
    __int128 v41 = *(_OWORD *)v39;
    __int128 v42 = *(_OWORD *)(v39 + 32);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v39 + 16);
    *(_OWORD *)(a1 + 344) = v42;
    *(_OWORD *)(a1 + 312) = v41;
    __int128 v43 = *(_OWORD *)(v39 + 48);
    __int128 v44 = *(_OWORD *)(v39 + 64);
    __int128 v45 = *(_OWORD *)(v39 + 96);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(v39 + 80);
    *(_OWORD *)(a1 + 408) = v45;
    *(_OWORD *)(a1 + 360) = v43;
    *(_OWORD *)(a1 + 376) = v44;
    __n128 result = *(__n128 *)(v39 + 112);
    __int128 v46 = *(_OWORD *)(v39 + 128);
    __int128 v47 = *(_OWORD *)(v39 + 144);
    *(void *)(a1 + 472) = *(void *)(v39 + 160);
    *(_OWORD *)(a1 + 440) = v46;
    *(_OWORD *)(a1 + 456) = v47;
    *(__n128 *)(a1 + 424) = result;
  }

  return result;
}

void sub_100AD7650(uint64_t a1, unsigned __int8 *uu1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    __int128 v4 = *(_OWORD *)(a1 + 248);
    uint64_t v61 = *(void *)(a1 + 296);
    __int128 v5 = *(_OWORD *)(a1 + 184);
    __int128 v6 = *(_OWORD *)(a1 + 216);
    __int128 v55 = *(_OWORD *)(a1 + 200);
    __int128 v56 = v6;
    __int128 v57 = *(_OWORD *)(a1 + 232);
    __int128 v58 = v4;
    __int128 v7 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)uu2 = *(_OWORD *)(a1 + 136);
    __int128 v52 = v7;
    __int128 v53 = *(_OWORD *)(a1 + 168);
    __int128 v54 = v5;
    __int128 v8 = *(_OWORD *)(a1 + 280);
    __int128 v59 = *(_OWORD *)(a1 + 264);
    __int128 v60 = v8;
    __int128 v9 = *(_OWORD *)(a1 + 456);
    __int128 v48 = *(_OWORD *)(a1 + 440);
    __int128 v49 = v9;
    uint64_t v50 = *(void *)(a1 + 472);
    __int128 v10 = *(_OWORD *)(a1 + 392);
    __int128 v44 = *(_OWORD *)(a1 + 376);
    __int128 v45 = v10;
    __int128 v11 = *(_OWORD *)(a1 + 408);
    __int128 v47 = *(_OWORD *)(a1 + 424);
    __int128 v46 = v11;
    __int128 v12 = *(_OWORD *)(a1 + 328);
    *(_OWORD *)__int16 v40 = *(_OWORD *)(a1 + 312);
    __int128 v41 = v12;
    __int128 v13 = *(_OWORD *)(a1 + 344);
    __int128 v43 = *(_OWORD *)(a1 + 360);
    __int128 v42 = v13;
    int v14 = uuid_compare(uu1, uu2);
    uint64_t v15 = *((void *)uu1 + 6);
    BOOL v16 = v15 != 14;
    if (*((void *)uu1 + 8) == (void)v55)
    {
      BOOL v16 = 1;
      BOOL v17 = 1;
    }

    else
    {
      BOOL v17 = v15 != 19;
    }

    BOOL v18 = v15 == (void)v54 && v16;
    if (v18 && v17 || !v14)
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186E410);
      }
      uint64_t v27 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134218240;
        uint64_t v37 = v54;
        __int16 v38 = 2048;
        uint64_t v39 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, workout matches current model, high sensitivity for current model and medium sensitivity for  queued model, currentModel, %ld, queuedModel, %ld",  buf,  0x16u);
      }

      int v25 = 2;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186E410);
        }
        int v32 = 134218240;
        uint64_t v33 = v54;
        __int16 v34 = 2048;
        uint64_t v35 = v43;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, workout matches current model, high sensitivity for cur rent model and medium sensitivity for  queued model, currentModel, %ld, queuedModel, %ld",  &v32,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)",  "%s\n",  v29);
      }

      int v26 = 1;
    }

    else
    {
      int v19 = uuid_compare(uu1, v40);
      uint64_t v20 = *((void *)uu1 + 6);
      BOOL v21 = v20 != 14;
      if (*((void *)uu1 + 8) == (void)v44)
      {
        BOOL v21 = 1;
        BOOL v22 = 1;
      }

      else
      {
        BOOL v22 = v20 != 19;
      }

      BOOL v23 = v20 == (void)v43 && v21;
      if (v23 && v22 || !v19)
      {
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186E410);
        }
        uint64_t v28 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v37 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, workout matches queued model, high sensitivity for queued model, queuedModel, %ld",  buf,  0xCu);
        }

        int v26 = 2;
        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10186E410);
          }
          int v32 = 134217984;
          uint64_t v33 = v43;
          uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, workout matches queued model, high sensitivity for qu eued model, queuedModel, %ld",  &v32);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)",  "%s\n",  v31);
          int v25 = 0;
          int v26 = 2;
        }

        else
        {
          int v25 = 0;
        }
      }

      else
      {
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186E410);
        }
        __int128 v24 = (os_log_s *)qword_101934688;
        if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, workout does not match current or queued workouts, low sensitivity for all models",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934680 != -1) {
            dispatch_once(&qword_101934680, &stru_10186E410);
          }
          LOWORD(v32) = 0;
          unint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, workout does not match current or queued workouts, lo w sensitivity for all models",  &v32,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)",  "%s\n",  v30);
        }

        int v25 = 0;
        int v26 = 0;
      }
    }

    *(_DWORD *)(a1 + 304) = v25;
    *(_DWORD *)(a1 + 480) = v26;
  }

  else
  {
    *(_DWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 480) = 0;
  }

  sub_100AD9658(a1);
}

void sub_100AD7C08(int64x2_t *a1, uint64_t a2)
{
  __int128 v5 = (void *)a1[7].i64[0];
  __int128 v6 = (void *)a1[7].i64[1];
  __int128 v4 = a1 + 7;
  if (v5 == v6)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186E410);
    }
    __int128 v7 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, bringing up workout detection models",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186E410);
      }
      v72[0] = 0;
      unint64_t v71 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, bringing up workout detection models",  v72,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::bringupModels(CMWorkoutType)",  "%s\n",  v71);
    }

    __int128 v8 = (char *)operator new(0x88uLL);
    *((void *)v8 + 16) = 0LL;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + memset(&v6[1], 0, 7) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *(_OWORD *)__int128 v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    sub_100A365A0((__n128 *)v8);
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(void *)__int128 v8 = off_10186CC50;
    unint64_t v9 = a1[8].u64[0];
    __int128 v10 = (void *)a1[7].i64[1];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = ((uint64_t)v10 - v4->i64[0]) >> 3;
      uint64_t v13 = v9 - v4->i64[0];
      uint64_t v14 = v13 >> 2;
      else {
        unint64_t v15 = v14;
      }
      uint64_t v76 = a1 + 8;
      if (v15) {
        BOOL v16 = (char *)sub_1000071BC((uint64_t)a1[8].i64, v15);
      }
      else {
        BOOL v16 = 0LL;
      }
      BOOL v17 = &v16[8 * v12];
      BOOL v18 = &v16[8 * v15];
      int v75 = v18;
      *(void *)BOOL v17 = v8;
      __int128 v11 = v17 + 8;
      v74.i64[1] = (uint64_t)(v17 + 8);
      uint64_t v20 = (void *)a1[7].i64[0];
      int v19 = (void *)a1[7].i64[1];
      if (v19 == v20)
      {
        int64x2_t v22 = vdupq_n_s64((unint64_t)v19);
      }

      else
      {
        do
        {
          uint64_t v21 = *--v19;
          void *v19 = 0LL;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }

        while (v19 != v20);
        int64x2_t v22 = *v4;
        __int128 v11 = (void *)v74.i64[1];
        BOOL v18 = v75;
      }

      a1[7].i64[0] = (uint64_t)v17;
      a1[7].i64[1] = (uint64_t)v11;
      int64x2_t v74 = v22;
      BOOL v23 = (char *)a1[8].i64[0];
      a1[8].i64[0] = (uint64_t)v18;
      int v75 = v23;
      *(void *)std::string buf = v22.i64[0];
      sub_1002D70CC((uint64_t)buf);
    }

    else
    {
      void *v10 = v8;
      __int128 v11 = v10 + 1;
    }

    a1[7].i64[1] = (uint64_t)v11;
    __int128 v24 = (char *)operator new(0x88uLL);
    *((void *)v24 + 16) = 0LL;
    *((_OWORD *)v24 + 6) = 0u;
    *((_OWORD *)v24 + memset(&v6[1], 0, 7) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 5) = 0u;
    *((_OWORD *)v24 + 2) = 0u;
    *((_OWORD *)v24 + 3) = 0u;
    *(_OWORD *)__int128 v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    sub_100A365A0((__n128 *)v24);
    *(void *)__int128 v24 = off_10186CCE0;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_OWORD *)(v24 + 120) = 0u;
    int v26 = (void *)a1[7].i64[1];
    unint64_t v25 = a1[8].u64[0];
    if ((unint64_t)v26 >= v25)
    {
      uint64_t v28 = ((uint64_t)v26 - v4->i64[0]) >> 3;
      uint64_t v29 = v25 - v4->i64[0];
      uint64_t v30 = v29 >> 2;
      else {
        unint64_t v31 = v30;
      }
      uint64_t v76 = a1 + 8;
      if (v31) {
        int v32 = (char *)sub_1000071BC((uint64_t)a1[8].i64, v31);
      }
      else {
        int v32 = 0LL;
      }
      uint64_t v33 = &v32[8 * v28];
      __int16 v34 = &v32[8 * v31];
      int v75 = v34;
      *(void *)uint64_t v33 = v24;
      uint64_t v27 = v33 + 8;
      v74.i64[1] = (uint64_t)(v33 + 8);
      uint64_t v36 = (void *)a1[7].i64[0];
      uint64_t v35 = (void *)a1[7].i64[1];
      if (v35 == v36)
      {
        int64x2_t v38 = vdupq_n_s64((unint64_t)v35);
      }

      else
      {
        do
        {
          uint64_t v37 = *--v35;
          *uint64_t v35 = 0LL;
          *((void *)v33 - 1) = v37;
          v33 -= 8;
        }

        while (v35 != v36);
        int64x2_t v38 = *v4;
        uint64_t v27 = (void *)v74.i64[1];
        __int16 v34 = v75;
      }

      a1[7].i64[0] = (uint64_t)v33;
      a1[7].i64[1] = (uint64_t)v27;
      int64x2_t v74 = v38;
      uint64_t v39 = (char *)a1[8].i64[0];
      a1[8].i64[0] = (uint64_t)v34;
      int v75 = v39;
      *(void *)std::string buf = v38.i64[0];
      sub_1002D70CC((uint64_t)buf);
    }

    else
    {
      *int v26 = v24;
      uint64_t v27 = v26 + 1;
    }

    a1[7].i64[1] = (uint64_t)v27;
    __int16 v40 = (char *)operator new(0x88uLL);
    *((void *)v40 + 16) = 0LL;
    *((_OWORD *)v40 + 6) = 0u;
    *((_OWORD *)v40 + memset(&v6[1], 0, 7) = 0u;
    *((_OWORD *)v40 + 4) = 0u;
    *((_OWORD *)v40 + 5) = 0u;
    *((_OWORD *)v40 + 2) = 0u;
    *((_OWORD *)v40 + 3) = 0u;
    *(_OWORD *)__int16 v40 = 0u;
    *((_OWORD *)v40 + 1) = 0u;
    sub_100A365A0((__n128 *)v40);
    *(_OWORD *)(v40 + 120) = 0u;
    *(_OWORD *)(v40 + 104) = 0u;
    *(_OWORD *)(v40 + 88) = 0u;
    *(void *)__int16 v40 = off_10186CD70;
    __int128 v42 = (void *)a1[7].i64[1];
    unint64_t v41 = a1[8].u64[0];
    if ((unint64_t)v42 >= v41)
    {
      uint64_t v44 = ((uint64_t)v42 - v4->i64[0]) >> 3;
      uint64_t v45 = v41 - v4->i64[0];
      uint64_t v46 = v45 >> 2;
      else {
        unint64_t v47 = v46;
      }
      uint64_t v76 = a1 + 8;
      if (v47) {
        __int128 v48 = (char *)sub_1000071BC((uint64_t)a1[8].i64, v47);
      }
      else {
        __int128 v48 = 0LL;
      }
      __int128 v49 = &v48[8 * v44];
      uint64_t v50 = &v48[8 * v47];
      int v75 = v50;
      *(void *)__int128 v49 = v40;
      __int128 v43 = v49 + 8;
      v74.i64[1] = (uint64_t)(v49 + 8);
      __int128 v52 = (void *)a1[7].i64[0];
      __int128 v51 = (void *)a1[7].i64[1];
      if (v51 == v52)
      {
        int64x2_t v54 = vdupq_n_s64((unint64_t)v51);
      }

      else
      {
        do
        {
          uint64_t v53 = *--v51;
          *__int128 v51 = 0LL;
          *((void *)v49 - 1) = v53;
          v49 -= 8;
        }

        while (v51 != v52);
        int64x2_t v54 = *v4;
        __int128 v43 = (void *)v74.i64[1];
        uint64_t v50 = v75;
      }

      a1[7].i64[0] = (uint64_t)v49;
      a1[7].i64[1] = (uint64_t)v43;
      int64x2_t v74 = v54;
      __int128 v55 = (char *)a1[8].i64[0];
      a1[8].i64[0] = (uint64_t)v50;
      int v75 = v55;
      *(void *)std::string buf = v54.i64[0];
      sub_1002D70CC((uint64_t)buf);
    }

    else
    {
      *__int128 v42 = v40;
      __int128 v43 = v42 + 1;
    }

    a1[7].i64[1] = (uint64_t)v43;
    __int128 v56 = (char *)operator new(0x88uLL);
    *((void *)v56 + 16) = 0LL;
    *((_OWORD *)v56 + 6) = 0u;
    *((_OWORD *)v56 + memset(&v6[1], 0, 7) = 0u;
    *((_OWORD *)v56 + 4) = 0u;
    *((_OWORD *)v56 + 5) = 0u;
    *((_OWORD *)v56 + 2) = 0u;
    *((_OWORD *)v56 + 3) = 0u;
    *(_OWORD *)__int128 v56 = 0u;
    *((_OWORD *)v56 + 1) = 0u;
    sub_100A365A0((__n128 *)v56);
    *(void *)__int128 v56 = off_10186CE00;
    *(_OWORD *)(v56 + 88) = 0u;
    *(_OWORD *)(v56 + 104) = 0u;
    *(_OWORD *)(v56 + 120) = 0u;
    __int128 v58 = (void *)a1[7].i64[1];
    unint64_t v57 = a1[8].u64[0];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v59 = ((uint64_t)v58 - v4->i64[0]) >> 3;
      uint64_t v60 = v57 - v4->i64[0];
      uint64_t v61 = v60 >> 2;
      else {
        unint64_t v62 = v61;
      }
      uint64_t v76 = a1 + 8;
      if (v62) {
        int v63 = (char *)sub_1000071BC((uint64_t)a1[8].i64, v62);
      }
      else {
        int v63 = 0LL;
      }
      double v64 = &v63[8 * v59];
      float64_t v65 = &v63[8 * v62];
      int v75 = v65;
      *(void *)double v64 = v56;
      __int128 v6 = v64 + 8;
      v74.i64[1] = (uint64_t)(v64 + 8);
      float64_t v67 = (void *)a1[7].i64[0];
      float64_t v66 = (void *)a1[7].i64[1];
      if (v66 == v67)
      {
        int64x2_t v69 = vdupq_n_s64((unint64_t)v66);
      }

      else
      {
        do
        {
          uint64_t v68 = *--v66;
          void *v66 = 0LL;
          *((void *)v64 - 1) = v68;
          v64 -= 8;
        }

        while (v66 != v67);
        int64x2_t v69 = *v4;
        __int128 v6 = (void *)v74.i64[1];
        float64_t v65 = v75;
      }

      a1[7].i64[0] = (uint64_t)v64;
      a1[7].i64[1] = (uint64_t)v6;
      int64x2_t v74 = v69;
      uint64_t v70 = (char *)a1[8].i64[0];
      a1[8].i64[0] = (uint64_t)v65;
      int v75 = v70;
      *(void *)std::string buf = v69.i64[0];
      sub_1002D70CC((uint64_t)buf);
    }

    else
    {
      *__int128 v58 = v56;
      __int128 v6 = v58 + 1;
    }

    a1[7].i64[1] = (uint64_t)v6;
    __int128 v5 = (void *)a1[7].i64[0];
  }

  while (v5 != v6)
  {
    (*(void (**)(void, uint64_t))(*(void *)*v5 + 16LL))(*v5, a2);
    ++v5;
  }

  sub_100AD9658((uint64_t)a1);
}

void sub_100AD827C(_Unwind_Exception *a1)
{
}

void sub_100AD82CC(int64x2_t *a1, uint64_t a2, int a3)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186E410);
  }
  __int128 v6 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a2 + 112);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v30 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, receieved client workout confirmation, activeWorkout,%ld",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186E410);
    }
    uint64_t v14 = *(void *)(a2 + 112);
    int v27 = 134217984;
    uint64_t v28 = v14;
    unint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, receieved client workout confirmation, activeWorkout,%ld",  &v27);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::onWorkoutConfirmedEvent(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)",  "%s\n",  v15);
  }

  sub_100AD70C0((uint64_t)a1, (unsigned __int8 *)(a2 + 64));
  __int128 v8 = *(_OWORD *)(a2 + 208);
  __int128 v24 = *(_OWORD *)(a2 + 192);
  __int128 v25 = v8;
  uint64_t v26 = *(void *)(a2 + 224);
  __int128 v9 = *(_OWORD *)(a2 + 144);
  __int128 v20 = *(_OWORD *)(a2 + 128);
  __int128 v21 = v9;
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v22 = *(_OWORD *)(a2 + 160);
  __int128 v23 = v10;
  __int128 v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)uu1 = *(_OWORD *)(a2 + 64);
  __int128 v17 = v11;
  __int128 v12 = *(_OWORD *)(a2 + 112);
  __int128 v18 = *(_OWORD *)(a2 + 96);
  __int128 v19 = v12;
  sub_100AD7650((uint64_t)a1, uu1);
  if (a3)
  {
    uint64_t v13 = *(void *)(a2 + 112);
    sub_100AD9A18((uint64_t)a1);
    sub_100AD7C08(a1, v13);
  }

void sub_100AD84F4(int64x2_t *a1, int a2)
{
  if (a2)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186E410);
    }
    int v3 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, transition, resetting workout detection models",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186E410);
      }
      v5[0] = 0;
      __int128 v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, transition, resetting workout detection models",  v5,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::onTransitionConfirmedEvent(BOOL)",  "%s\n",  v4);
    }

    sub_100AD9A18((uint64_t)a1);
    sub_100AD7C08(a1, 33LL);
  }

void sub_100AD869C(int64x2_t *a1, uint64_t a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186E410);
  }
  __int128 v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 112);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v28 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, detected new segment, resetting models, activeWorkout,%ld",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186E410);
    }
    uint64_t v12 = *(void *)(a2 + 112);
    int v25 = 134217984;
    uint64_t v26 = v12;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, detected new segment, resetting models, activeWorkout,%ld",  &v25);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::onSegmentDetectionEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v13);
  }

  if (*(void *)(a2 + 112) == 33LL)
  {
    uint64_t v6 = 33LL;
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 208);
    __int128 v22 = *(_OWORD *)(a2 + 192);
    __int128 v23 = v7;
    uint64_t v24 = *(void *)(a2 + 224);
    __int128 v8 = *(_OWORD *)(a2 + 144);
    __int128 v18 = *(_OWORD *)(a2 + 128);
    __int128 v19 = v8;
    __int128 v9 = *(_OWORD *)(a2 + 176);
    __int128 v20 = *(_OWORD *)(a2 + 160);
    __int128 v21 = v9;
    __int128 v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)uu1 = *(_OWORD *)(a2 + 64);
    __int128 v15 = v10;
    __int128 v11 = *(_OWORD *)(a2 + 112);
    __int128 v16 = *(_OWORD *)(a2 + 96);
    __int128 v17 = v11;
    sub_100AD7650((uint64_t)a1, uu1);
    uint64_t v6 = *(void *)(a2 + 112);
  }

  sub_100AD9A18((uint64_t)a1);
  sub_100AD7C08(a1, v6);
}

void sub_100AD88C4(uint64_t a1@<X0>, uint64_t **a2@<X1>, void **a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  __int128 v80 = *(_OWORD *)(a1 + 136);
  __int128 v81 = *(_OWORD *)(a1 + 152);
  __int128 v82 = *(_OWORD *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v54 = *(void *)(a1 + 192);
  uint64_t v50 = *(void *)(a1 + 208);
  uint64_t v51 = *(void *)(a1 + 200);
  __int128 v76 = *(_OWORD *)(a1 + 248);
  __int128 v77 = *(_OWORD *)(a1 + 264);
  __int128 v78 = *(_OWORD *)(a1 + 280);
  uint64_t v79 = *(void *)(a1 + 296);
  __int128 v74 = *(_OWORD *)(a1 + 216);
  __int128 v75 = *(_OWORD *)(a1 + 232);
  __int128 v71 = *(_OWORD *)(a1 + 312);
  __int128 v72 = *(_OWORD *)(a1 + 328);
  __int128 v73 = *(_OWORD *)(a1 + 344);
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v52 = *(void *)(a1 + 368);
  uint64_t v46 = *(void *)(a1 + 384);
  uint64_t v47 = *(void *)(a1 + 376);
  __int128 v67 = *(_OWORD *)(a1 + 424);
  __int128 v68 = *(_OWORD *)(a1 + 440);
  __int128 v69 = *(_OWORD *)(a1 + 456);
  uint64_t v70 = *(void *)(a1 + 472);
  __int128 v65 = *(_OWORD *)(a1 + 392);
  __int128 v66 = *(_OWORD *)(a1 + 408);
  uint64_t v6 = *a2;
  __int128 v55 = a2[1];
  if (*a2 != v55)
  {
    uint64_t v48 = (uint64_t)(a3 + 2);
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v53 = _Q0;
    while (1)
    {
      int v12 = *((_DWORD *)v6 + 5);
      if (v12) {
        break;
      }
LABEL_31:
      v6 += 4;
      if (v6 == v55) {
        return;
      }
    }

    __int128 v62 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    uint64_t v61 = 0LL;
    if (v12 == 2) {
      uint64_t v13 = 20LL;
    }
    else {
      uint64_t v13 = 21LL;
    }
    uint64_t v14 = *v6;
    if (sub_100BEF6EC(v6[3], v54) == v4)
    {
      uint64_t v15 = v4;
      uint64_t v16 = v51;
      __int128 v62 = v80;
      __int128 v63 = v81;
      __int128 v64 = v82;
      __int128 v58 = v76;
      __int128 v59 = v77;
      __int128 v60 = v78;
      uint64_t v61 = v79;
      __int128 v17 = v74;
      __int128 v18 = v75;
      uint64_t v19 = v54;
      uint64_t v20 = v50;
    }

    else
    {
      if (sub_100BEF6EC(v6[3], v52) != v5)
      {
        uint64_t v29 = v6[3];
        uint64_t v19 = sub_100AD8D80((void *)a1, v29);
        uint64_t v15 = sub_100BEF6EC(v29, v19);
        if (v15 == 19)
        {
          uint64_t v16 = sub_100AD8ED0((void *)a1, v19);
          uint64_t v20 = v30;
          uint64_t v15 = 19LL;
        }

        else
        {
          uint64_t v16 = 0LL;
          uint64_t v20 = 0LL;
        }

        goto LABEL_12;
      }

      uint64_t v15 = v5;
      uint64_t v19 = v52;
      __int128 v62 = v71;
      __int128 v63 = v72;
      __int128 v64 = v73;
      __int128 v58 = v67;
      __int128 v59 = v68;
      __int128 v60 = v69;
      uint64_t v61 = v70;
      __int128 v17 = v65;
      __int128 v18 = v66;
      uint64_t v20 = v46;
      uint64_t v16 = v47;
    }

    __int128 v56 = v17;
    __int128 v57 = v18;
LABEL_12:
    __int128 v21 = (char *)a3[1];
    __int128 v22 = (char *)a3[2];
    if (v21 >= v22)
    {
      uint64_t v24 = 0x34F72C234F72C235LL * ((v21 - (_BYTE *)*a3) >> 3);
      unint64_t v25 = v24 + 1;
      unint64_t v26 = 0x34F72C234F72C235LL * ((v22 - (_BYTE *)*a3) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x8D3DCB08D3DCB0LL) {
        unint64_t v27 = 0x11A7B9611A7B961LL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27) {
        uint64_t v28 = (char *)sub_100AD9CE8(v48, v27);
      }
      else {
        uint64_t v28 = 0LL;
      }
      unint64_t v31 = &v28[232 * v24];
      *(_OWORD *)unint64_t v31 = v53;
      *((void *)v31 + 2) = v13;
      *((void *)v31 + 3) = v14;
      *((_OWORD *)v31 + 4) = v62;
      *((_OWORD *)v31 + 5) = v63;
      *((_OWORD *)v31 + 6) = v64;
      *((_OWORD *)v31 + 2) = 0u;
      *((_OWORD *)v31 + 3) = 0u;
      *((void *)v31 + 14) = v15;
      *((void *)v31 + 15) = v19;
      *((void *)v31 + 16) = v16;
      *((void *)v31 + 1memset(&v6[1], 0, 7) = v20;
      *((_OWORD *)v31 + 9) = v56;
      *((_OWORD *)v31 + 10) = v57;
      *((void *)v31 + 28) = v61;
      *((_OWORD *)v31 + 12) = v59;
      *((_OWORD *)v31 + 13) = v60;
      *((_OWORD *)v31 + 11) = v58;
      uint64_t v33 = (char *)*a3;
      int v32 = (char *)a3[1];
      __int16 v34 = v31;
      if (v32 != *a3)
      {
        do
        {
          __int128 v35 = *(_OWORD *)(v32 - 232);
          __int128 v36 = *(_OWORD *)(v32 - 216);
          *(_OWORD *)(v34 - 200) = *(_OWORD *)(v32 - 200);
          *(_OWORD *)(v34 - 216) = v36;
          *(_OWORD *)(v34 - 232) = v35;
          __int128 v37 = *(_OWORD *)(v32 - 184);
          __int128 v38 = *(_OWORD *)(v32 - 168);
          __int128 v39 = *(_OWORD *)(v32 - 152);
          *(_OWORD *)(v34 - 136) = *(_OWORD *)(v32 - 136);
          *(_OWORD *)(v34 - 152) = v39;
          *(_OWORD *)(v34 - 168) = v38;
          *(_OWORD *)(v34 - 184) = v37;
          __int128 v40 = *(_OWORD *)(v32 - 120);
          __int128 v41 = *(_OWORD *)(v32 - 104);
          __int128 v42 = *(_OWORD *)(v32 - 88);
          *(_OWORD *)(v34 - 72) = *(_OWORD *)(v32 - 72);
          *(_OWORD *)(v34 - 88) = v42;
          *(_OWORD *)(v34 - 104) = v41;
          *(_OWORD *)(v34 - 120) = v40;
          __int128 v43 = *(_OWORD *)(v32 - 56);
          __int128 v44 = *(_OWORD *)(v32 - 40);
          __int128 v45 = *(_OWORD *)(v32 - 24);
          *((void *)v34 - 1) = *((void *)v32 - 1);
          *(_OWORD *)(v34 - 24) = v45;
          *(_OWORD *)(v34 - 40) = v44;
          *(_OWORD *)(v34 - 56) = v43;
          v34 -= 232;
          v32 -= 232;
        }

        while (v32 != v33);
        int v32 = v33;
      }

      __int128 v23 = v31 + 232;
      *a3 = v34;
      a3[1] = v31 + 232;
      a3[2] = &v28[232 * v27];
      if (v32) {
        operator delete(v32);
      }
    }

    else
    {
      *(_OWORD *)__int128 v21 = v53;
      *((void *)v21 + 2) = v13;
      *((void *)v21 + 3) = v14;
      *((_OWORD *)v21 + 4) = v62;
      *((_OWORD *)v21 + 5) = v63;
      *((_OWORD *)v21 + 6) = v64;
      *((_OWORD *)v21 + 2) = 0u;
      *((_OWORD *)v21 + 3) = 0u;
      *((void *)v21 + 14) = v15;
      *((void *)v21 + 15) = v19;
      *((void *)v21 + 16) = v16;
      *((void *)v21 + 1memset(&v6[1], 0, 7) = v20;
      *((_OWORD *)v21 + 9) = v56;
      *((_OWORD *)v21 + 10) = v57;
      *((void *)v21 + 28) = v61;
      __int128 v23 = v21 + 232;
      *((_OWORD *)v21 + 12) = v59;
      *((_OWORD *)v21 + 13) = v60;
      *((_OWORD *)v21 + 11) = v58;
    }

    a3[1] = v23;
    goto LABEL_31;
  }

void sub_100AD8D58(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100AD8D80(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[10];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = (void *)(v3 + 8 * (v2 / 0x18));
  if (v4 == v3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = (void *)(*v5 + 168 * (v2 % 0x18));
  }
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
LABEL_5:
  __int128 v11 = v6 - 504;
  while (1)
  {
    unint64_t v12 = v4 == v3 ? 0LL : *(void *)(v3 + 8 * ((a1[11] + v2) / 0x18)) + 168 * ((a1[11] + v2) % 0x18);
    if (v6 == (void *)v12) {
      break;
    }
    uint64_t v13 = v6[6];
    if (v13 == 19)
    {
      int v14 = a2 == 19;
      uint64_t v15 = v6[8];
      int v16 = v15 == 0;
      if (v15) {
        int v17 = 0;
      }
      else {
        int v17 = a2 == 19;
      }
      BOOL v18 = v15 == 1;
    }

    else
    {
      int v14 = v13 == a2;
      uint64_t v19 = v6[7];
      int v16 = v19 == 1;
      if (v19 == 1) {
        int v17 = v14;
      }
      else {
        int v17 = 0;
      }
      BOOL v18 = v19 == 2;
    }

    int v20 = v18;
    if (!v18) {
      int v14 = 0;
    }
    v10 += v17;
    v9 += v20;
    v8 += v16;
    v7 += v14;
    v11 += 21;
    v6 += 21;
    if ((void *)*v5 == v11)
    {
      __int128 v21 = (void *)v5[1];
      ++v5;
      uint64_t v6 = v21;
      goto LABEL_5;
    }
  }

  if (v10 && !v7) {
    return 1LL;
  }
  if (!v10 && v7) {
    return 2LL;
  }
  if (v8 && !v9) {
    return 1LL;
  }
  if (v9) {
    BOOL v23 = v8 == 0;
  }
  else {
    BOOL v23 = 0;
  }
  if (v23) {
    return 2LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100AD8ED0(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)+[CMWorkout CMSwimWorkoutLocationFromCMWorkoutLocationType:]( &OBJC_CLASS___CMWorkout,  "CMSwimWorkoutLocationFromCMWorkoutLocationType:",  a2);
  if (!result)
  {
    sub_100AD9BE4(a1);
    return 0LL;
  }

  return result;
}

void sub_100AD8F30(void *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  unint64_t v2 = (void *)a1[14];
  uint64_t v3 = (void *)a1[15];
  if (v2 != v3)
  {
    uint64_t v6 = (uint64_t)(a2 + 2);
    do
    {
      (**(void (***)(__int128 *__return_ptr, void, void))*v2)(&v22, *v2, a1[13]);
      int v8 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        __int128 v11 = *a2;
        uint64_t v12 = (v8 - *a2) >> 5;
        unint64_t v13 = v12 + 1;
        uint64_t v14 = v7 - (void)v11;
        if (v14 >> 4 > v13) {
          unint64_t v13 = v14 >> 4;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          int v16 = (char *)sub_10000835C(v6, v15);
          __int128 v11 = *a2;
          int v8 = a2[1];
        }

        else
        {
          int v16 = 0LL;
        }

        __int128 v17 = v23;
        BOOL v18 = &v16[32 * v12];
        *(_OWORD *)BOOL v18 = v22;
        *((_OWORD *)v18 + 1) = v17;
        if (v8 == v11)
        {
          __int128 v21 = &v16[32 * v12];
        }

        else
        {
          uint64_t v19 = &v16[32 * v12];
          do
          {
            __int128 v20 = *((_OWORD *)v8 - 1);
            __int128 v21 = v19 - 32;
            *((_OWORD *)v19 - 2) = *((_OWORD *)v8 - 2);
            *((_OWORD *)v19 - 1) = v20;
            v8 -= 32;
            v19 -= 32;
          }

          while (v8 != v11);
        }

        int v10 = v18 + 32;
        *a2 = v21;
        a2[1] = v18 + 32;
        a2[2] = &v16[32 * v15];
        if (v11) {
          operator delete(v11);
        }
      }

      else
      {
        __int128 v9 = v23;
        *(_OWORD *)int v8 = v22;
        *((_OWORD *)v8 + 1) = v9;
        int v10 = v8 + 32;
      }

      a2[1] = v10;
      ++v2;
    }

    while (v2 != v3);
  }

void sub_100AD9084(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100AD90A4(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v35 = 0u;
  __int128 v76 = 0u;
  uint64_t v77 = 0LL;
  __int128 v4 = *(_OWORD *)(a1 + 31);
  __int128 v5 = *(_OWORD *)(a1 + 35);
  __int128 v69 = *(_OWORD *)(a1 + 33);
  __int128 v70 = v5;
  uint64_t v71 = a1[37];
  __int128 v6 = *(_OWORD *)(a1 + 23);
  __int128 v7 = *(_OWORD *)(a1 + 27);
  __int128 v65 = *(_OWORD *)(a1 + 25);
  __int128 v66 = v7;
  __int128 v67 = *(_OWORD *)(a1 + 29);
  __int128 v68 = v4;
  __int128 v8 = *(_OWORD *)(a1 + 19);
  v63[0] = *(_OWORD *)(a1 + 17);
  v63[1] = v8;
  v63[2] = *(_OWORD *)(a1 + 21);
  __int128 v64 = v6;
  __int128 v9 = *(_OWORD *)(a1 + 57);
  __int128 v60 = *(_OWORD *)(a1 + 55);
  __int128 v61 = v9;
  uint64_t v62 = a1[59];
  __int128 v10 = *(_OWORD *)(a1 + 49);
  __int128 v56 = *(_OWORD *)(a1 + 47);
  __int128 v57 = v10;
  __int128 v11 = *(_OWORD *)(a1 + 53);
  __int128 v58 = *(_OWORD *)(a1 + 51);
  __int128 v59 = v11;
  __int128 v12 = *(_OWORD *)(a1 + 41);
  v54[0] = *(_OWORD *)(a1 + 39);
  v54[1] = v12;
  __int128 v13 = *(_OWORD *)(a1 + 45);
  __n128 v54[2] = *(_OWORD *)(a1 + 43);
  __int128 v55 = v13;
  (*(void (**)(void **__return_ptr, void *, void))(*a1 + 16LL))(&__p, a1, a1[13]);
  uint64_t v14 = (char *)__p;
  unint64_t v15 = v37;
  if (__p == v37)
  {
    uint64_t v17 = 0LL;
    uint64_t v16 = 0LL;
    goto LABEL_20;
  }

  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = *((void *)&v64 + 1);
  uint64_t v19 = v64;
  uint64_t v20 = *((void *)&v55 + 1);
  uint64_t v33 = *((void *)&v64 + 1);
  uint64_t v34 = v55;
  __int128 v35 = 0u;
  uint64_t v32 = *((void *)&v55 + 1);
  while ((*((_DWORD *)v14 + 4) - 1) > 1)
  {
LABEL_14:
    v14 += 32;
    if (v14 == v15) {
      goto LABEL_20;
    }
  }

  if (sub_100BEF6EC(*((void *)v14 + 3), v18) == v19)
  {
    sub_100AD9478((uint64_t)a1, (uint64_t)v14, (uint64_t)v63, (uint64_t)&v38);
    goto LABEL_19;
  }

  if (sub_100BEF6EC(*((void *)v14 + 3), v20) != v34)
  {
    if (!(void)v35)
    {
      uint64_t v21 = v19;
      uint64_t v22 = *((void *)v14 + 3);
      uint64_t v23 = sub_100AD8D80(a1, v22);
      if (*((_DWORD *)v14 + 4) == 1)
      {
        uint64_t v22 = 33LL;
      }

      else if (v22 == 2)
      {
        uint64_t v22 = sub_100BEF6EC(2LL, v23);
      }

      sub_100AD9570((uint64_t)a1, v22, (uint64_t)&v38, *((double *)v14 + 1), *(double *)v14);
      __int128 v82 = v42;
      __int128 v83 = v43;
      __int128 v84 = v44;
      __int128 v78 = v38;
      __int128 v79 = v39;
      __int128 v80 = v40;
      __int128 v81 = v41;
      __int128 v35 = v45;
      uint64_t v16 = v46;
      uint64_t v17 = v47;
      uint64_t v77 = v53;
      __int128 v75 = v51;
      __int128 v76 = v52;
      __int128 v73 = v49;
      __int128 v74 = v50;
      __int128 v72 = v48;
      if (v22 == 19)
      {
        uint64_t v24 = sub_100AD8ED0(a1, v23);
        uint64_t v19 = v21;
        uint64_t v20 = v32;
        uint64_t v18 = v33;
        uint64_t v16 = v24;
        uint64_t v17 = v25;
      }

      else
      {
        uint64_t v19 = v21;
        uint64_t v20 = v32;
        uint64_t v18 = v33;
      }
    }

    goto LABEL_14;
  }

  sub_100AD9478((uint64_t)a1, (uint64_t)v14, (uint64_t)v54, (uint64_t)&v38);
LABEL_19:
  __int128 v82 = v42;
  __int128 v83 = v43;
  __int128 v84 = v44;
  __int128 v78 = v38;
  __int128 v79 = v39;
  __int128 v80 = v40;
  __int128 v81 = v41;
  __int128 v35 = v45;
  uint64_t v16 = v46;
  uint64_t v17 = v47;
  uint64_t v77 = v53;
  __int128 v75 = v51;
  __int128 v76 = v52;
  __int128 v73 = v49;
  __int128 v74 = v50;
  __int128 v72 = v48;
LABEL_20:
  __int128 v26 = v83;
  *(_OWORD *)(a2 + 64) = v82;
  *(_OWORD *)(a2 + 80) = v26;
  __int128 v27 = v79;
  *(_OWORD *)a2 = v78;
  *(_OWORD *)(a2 + 16) = v27;
  __int128 v28 = v81;
  *(_OWORD *)(a2 + 32) = v80;
  *(_OWORD *)(a2 + 48) = v28;
  *(_OWORD *)(a2 + 96) = v84;
  *(_OWORD *)(a2 + 112) = v35;
  *(void *)(a2 + 128) = v16;
  *(void *)(a2 + 136) = v17;
  __int128 v29 = v73;
  *(_OWORD *)(a2 + 144) = v72;
  *(_OWORD *)(a2 + 160) = v29;
  *(void *)(a2 + 224) = v77;
  __int128 v30 = v76;
  __int128 v31 = v74;
  *(_OWORD *)(a2 + 192) = v75;
  *(_OWORD *)(a2 + memset(&v8[8], 0, 208) = v30;
  *(_OWORD *)(a2 + 176) = v31;
  sub_100AD88C4((uint64_t)a1, (uint64_t **)&__p, (void **)(a2 + 232));
  if (__p)
  {
    __int128 v37 = (char *)__p;
    operator delete(__p);
  }

void sub_100AD943C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100AD9478@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = *(double *)a2;
  result.n128_u64[0] = *(void *)(a2 + 8);
  *(void *)a4 = result.n128_u64[0];
  *(void *)(a4 + 8) = 0xBFF0000000000000LL;
  *(void *)(a4 + 16) = 23LL;
  *(double *)(a4 + 24) = v6;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  __int128 v7 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a4 + 192) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a4 + memset(&v8[8], 0, 208) = v7;
  *(void *)(a4 + 224) = *(void *)(a3 + 160);
  __int128 v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a4 + 144) = v8;
  __int128 v9 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a4 + 160) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a4 + 176) = v9;
  __int128 v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 80) = v10;
  __int128 v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 112) = v11;
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    sub_100AD9570(a1, 0x21uLL, (uint64_t)v18, result.n128_f64[0], v6);
    __int128 v12 = v18[13];
    *(_OWORD *)(a4 + 192) = v18[12];
    *(_OWORD *)(a4 + memset(&v8[8], 0, 208) = v12;
    *(void *)(a4 + 224) = v19;
    __int128 v13 = v18[9];
    *(_OWORD *)(a4 + 128) = v18[8];
    *(_OWORD *)(a4 + 144) = v13;
    __int128 v14 = v18[11];
    *(_OWORD *)(a4 + 160) = v18[10];
    *(_OWORD *)(a4 + 176) = v14;
    __int128 v15 = v18[5];
    *(_OWORD *)(a4 + 64) = v18[4];
    *(_OWORD *)(a4 + 80) = v15;
    __int128 v16 = v18[7];
    *(_OWORD *)(a4 + 96) = v18[6];
    *(_OWORD *)(a4 + 112) = v16;
    __int128 v17 = v18[1];
    *(_OWORD *)a4 = v18[0];
    *(_OWORD *)(a4 + 16) = v17;
    __n128 result = (__n128)v18[3];
    *(_OWORD *)(a4 + 32) = v18[2];
    *(__n128 *)(a4 + 48) = result;
  }

  return result;
}

void sub_100AD9570( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(void *)(a3 + 224) = 0LL;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + memset(&v8[8], 0, 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(double *)a3 = a4;
  *(void *)(a3 + 8) = 0xBFF0000000000000LL;
  *(void *)(a3 + 16) = 23LL;
  *(double *)(a3 + 24) = a5;
  *(void *)(a3 + 112) = a2;
  *(void *)(a3 + 120) = sub_100BEF788(a2);
  uuid_copy((unsigned __int8 *)(a3 + 64), out);
  uuid_copy((unsigned __int8 *)(a3 + 80), (const unsigned __int8 *)(a1 + 8));
}

void sub_100AD9658(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186E410);
  }
  unint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 184);
    int v4 = *(_DWORD *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 360);
    int v6 = *(_DWORD *)(a1 + 480);
    *(_DWORD *)std::string buf = 134218752;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v4;
    *(_WORD *)&_BYTE buf[18] = 2048;
    *(void *)&buf[20] = v5;
    __int16 v43 = 1024;
    int v44 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController,configuringModels,currentWorkout,%ld,currentModelSensitivity,%d,queuedWork out,%ld,queuedModelSensitivity,%d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186E410);
    }
    uint64_t v29 = *(void *)(a1 + 184);
    int v30 = *(_DWORD *)(a1 + 304);
    uint64_t v31 = *(void *)(a1 + 360);
    int v32 = *(_DWORD *)(a1 + 480);
    int v34 = 134218752;
    uint64_t v35 = v29;
    __int16 v36 = 1024;
    int v37 = v30;
    __int16 v38 = 2048;
    uint64_t v39 = v31;
    __int16 v40 = 1024;
    int v41 = v32;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController,configuringModels,currentWorkout,%ld,currentModelSensitivity ,%d,queuedWorkout,%ld,queuedModelSensitivity,%d",  &v34,  34);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::configureModels()",  "%s\n",  v33);
    if (v33 != buf) {
      free(v33);
    }
  }

  memset(buf, 0, 24);
  uint64_t v7 = *(void *)(a1 + 184);
  int v8 = *(_DWORD *)(a1 + 304);
  __int128 v10 = sub_100037038((uint64_t)&buf[16], 1uLL);
  __int128 v11 = *(char **)buf;
  __int128 v12 = *(char **)&buf[8];
  __int128 v13 = (char *)&v10[4 * v9];
  *(void *)__int128 v10 = v7;
  v10[2] = v8;
  __int128 v14 = (char *)(v10 + 4);
  __int128 v15 = v10;
  if (v12 != v11)
  {
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v12 - 1);
      v15 -= 4;
      v12 -= 16;
    }

    while (v12 != v11);
    __int128 v11 = *(char **)buf;
  }

  *(void *)std::string buf = v15;
  *(void *)&uint8_t buf[8] = v10 + 4;
  *(void *)&uint8_t buf[16] = &v10[4 * v9];
  if (v11)
  {
    operator delete(v11);
    __int128 v13 = *(char **)&buf[16];
  }

  *(void *)&uint8_t buf[8] = v10 + 4;
  uint64_t v16 = *(void *)(a1 + 360);
  int v17 = *(_DWORD *)(a1 + 480);
  if (v14 >= v13)
  {
    uint64_t v19 = *(char **)buf;
    uint64_t v20 = (uint64_t)&v14[-*(void *)buf] >> 4;
    unint64_t v21 = v20 + 1;
    uint64_t v22 = (uint64_t)&v13[-*(void *)buf];
    if (v22 >> 3 > v21) {
      unint64_t v21 = v22 >> 3;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      uint64_t v24 = (char *)sub_100037038((uint64_t)&buf[16], v23);
      uint64_t v19 = *(char **)buf;
      __int128 v14 = *(char **)&buf[8];
    }

    else
    {
      uint64_t v24 = 0LL;
    }

    uint64_t v25 = &v24[16 * v20];
    __int128 v26 = &v24[16 * v23];
    *(void *)uint64_t v25 = v16;
    *((_DWORD *)v25 + 2) = v17;
    uint64_t v18 = v25 + 16;
    if (v14 != v19)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
        v25 -= 16;
        v14 -= 16;
      }

      while (v14 != v19);
      uint64_t v19 = *(char **)buf;
    }

    *(void *)std::string buf = v25;
    *(void *)&uint8_t buf[8] = v18;
    *(void *)&uint8_t buf[16] = v26;
    if (v19) {
      operator delete(v19);
    }
  }

  else
  {
    *((void *)v10 + 2) = v16;
    v10[6] = v17;
    uint64_t v18 = (char *)(v10 + 8);
  }

  *(void *)&uint8_t buf[8] = v18;
  __int128 v28 = *(void **)(a1 + 112);
  __int128 v27 = *(void **)(a1 + 120);
  while (v28 != v27)
  {
    (*(void (**)(void, _BYTE *))(*(void *)*v28 + 8LL))(*v28, buf);
    ++v28;
  }

  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

void sub_100AD99F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

void sub_100AD9A18(uint64_t a1)
{
  if (*(void *)(a1 + 112) != *(void *)(a1 + 120))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186E410);
    }
    unint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutSeriesDetectionModelController, tearing down workout detection models",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186E410);
      }
      v8[0] = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLWorkoutSeriesDetectionModelController, tearing down workout detection models",  v8,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutSeriesDetectionModelController::teardownModels()",  "%s\n",  v7);
    }

    uint64_t v3 = *(void **)(a1 + 112);
    int v4 = *(void **)(a1 + 120);
    while (v4 != v3)
    {
      uint64_t v6 = *--v4;
      uint64_t v5 = v6;
      *int v4 = 0LL;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
      }
    }

    *(void *)(a1 + 120) = v3;
  }

void *sub_100AD9BE4(void *result)
{
  unint64_t v1 = result[10];
  uint64_t v2 = result[7];
  uint64_t v3 = result[8];
  int v4 = (void *)(v2 + 8 * (v1 / 0x18));
  if (v3 == v2) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = *v4 + 168 * (v1 % 0x18);
  }
LABEL_4:
  unint64_t v6 = v5 - 4032;
  while (1)
  {
    unint64_t v7 = v3 == v2 ? 0LL : *(void *)(v2 + 8 * ((result[11] + v1) / 0x18)) + 168 * ((result[11] + v1) % 0x18);
    if (v5 == v7) {
      return result;
    }
    v6 += 168LL;
    v5 += 168LL;
    if (*v4 == v6)
    {
      unint64_t v8 = v4[1];
      ++v4;
      unint64_t v5 = v8;
      goto LABEL_4;
    }
  }

void sub_100AD9CA8(uint64_t a1)
{
  unint64_t v1 = (void *)sub_1002C5030(a1);
  operator delete(v1);
}

void sub_100AD9CBC(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100AD9CE8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962LL) {
    sub_1000070D4();
  }
  return operator new(232 * a2);
}

void sub_100AD9DD4(id a1)
{
  qword_10199A7B8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLStatusBarIconManagerSilo");
}

void *sub_100AD9E88(void *a1)
{
  uint64_t v2 = operator new(0xE8uLL);
  sub_100ADA5C4((uint64_t)v2, a1);
  return v2;
}

void sub_100AD9EBC(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD9F3C(uint64_t a1)
{
  uint64_t v3 = (_BYTE *)(a1 + 112);
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v13 = a1 + 112;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
  __int16 v14 = 256;
  if (v3[32])
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186E648);
    }
    int v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#sbim: E911 is active; forcing icon on.",
        buf,
        2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186E648);
      }
      __int16 v12 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#sbim: E911 is active; forcing icon on.",
        &v12,
        2);
      __int128 v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 2LL, "StatusBarIconState CLStatusBarIconManager::iconState()", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t v5 = 2LL;
  }

  else if ((*(_DWORD *)(a1 + 192) & 2) != 0)
  {
    uint64_t v5 = 2LL;
  }

  else
  {
    uint64_t v5 = *(_DWORD *)(a1 + 192) & 1;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E648);
  }
  unint64_t v6 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = off_10186E580[v5];
    int v8 = *(unsigned __int8 *)(a1 + 148);
    *(_DWORD *)std::string buf = 68289538;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = v7;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#sbim: Location icon should now be in state, IconState:%{public, location:escape_only }s, SystemServiceSwitchEnabled:%{public}hhd}",  buf,  0x22u);
  }

  (*(void (**)(_BYTE *))(*(void *)v3 + 24LL))(v3);
  return v5;
}

void sub_100ADA1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

BOOL sub_100ADA220(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16LL))(a1 + 112);
  int v5 = *(unsigned __int8 *)(a1 + a2 + 145);
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v5 != 0;
}

uint64_t sub_100ADA2D0(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16LL))(a1 + 112);
  *(_BYTE *)(a1 + 144) = a2;
  sub_100ADB354(a1, 7u, a2);
  sub_100ADADA0(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_100ADA350(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100ADA3A0(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v7 = a2 - 1;
  else {
    uint64_t v8 = 0LL;
  }
  int v9 = 0;
  switch(a3)
  {
    case 0LL:
      goto LABEL_15;
    case 1LL:
      int v9 = 1;
      goto LABEL_15;
    case 2LL:
      int v9 = 2;
      goto LABEL_15;
    case 3LL:
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186E648);
      }
      __int128 v10 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        __int128 v15 = "";
        __int16 v16 = 2050;
        uint64_t v17 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Got max arrow state!, entityClass:%{public, location:CLLocationDictionaryUtilitie sEntityClass}lld}",  (uint8_t *)&v12,  0x1Cu);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10186E648);
        }
      }

      __int128 v11 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        __int128 v15 = "";
        __int16 v16 = 2050;
        uint64_t v17 = a2;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Got max arrow state!",  "{msg%{public}.0s:Got max arrow state!, entityClass:%{public, location:CLLocationDictionaryUtilitie sEntityClass}lld}",  (uint8_t *)&v12,  0x1Cu);
      }

      int v9 = 0;
LABEL_15:
      *(_DWORD *)(a1 + 4 * v8 + 156) = v9;
      break;
    default:
      break;
  }

  if ((a4 & 1) != 0 || sub_100ADBD04(a1, a2)) {
    sub_100ADB7CC(a1, a4);
  }
}

uint64_t sub_100ADA5C4(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_100ADA8E8(a1, "CLStatusBarIconManager", a2);
  *uint64_t v4 = off_10186E460;
  sub_1002E4C3C(v4 + 14, "CLStatusBarIconManager", 1LL, 1LL);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = 0LL;
  *(_BYTE *)(a1 + 144) = 0;
  *(void *)(a1 + 192) = 0xFFFFFFFF00000000LL;
  [a2 silo];
  sub_100583844((uint64_t)sub_100ADA984, a1, *(void **)(a1 + 128), &v16);
  std::string::size_type v5 = v16.__r_.__value_.__r.__words[0];
  v16.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    std::string::size_type v7 = v16.__r_.__value_.__r.__words[0];
    v16.__r_.__value_.__r.__words[0] = 0LL;
    if (v7) {
      (*(void (**)(std::string::size_type))(*(void *)v7 + 8LL))(v7);
    }
  }

  uint64_t v8 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "queue");
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100ADAB54;
  handler[3] = &unk_101832780;
  handler[4] = a1;
  notify_register_dispatch("CLStatusBarIconSwitchSyncNotification", (int *)(a1 + 196), v8, handler);
  memset(&v16, 0, sizeof(v16));
  std::string::operator=(&v16, (const std::string *)&qword_10199A7A0);
  [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0 registrationInfo:sub_10120E548((uint64_t)&v16)];
  sub_100ADAC84((_BYTE *)a1);
  for (uint64_t i = 0LL; i != 3; ++i)
  {
    if (i)
    {
      *(void *)(a1 + 8 * i + 200) = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "newTimer");
      *(_BYTE *)(a1 + i + 224) = 0;
    }
  }

  int v15 = 0;
  int v13 = 3;
  BOOL v14 = sub_100ADA220(a1, 3u);
  (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v15,  &v13,  1LL,  0xFFFFFFFFLL,  0LL);
  int v15 = 1;
  int v13 = 4;
  BOOL v14 = sub_100ADA220(a1, 4u);
  (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v15,  &v13,  1LL,  0xFFFFFFFFLL,  0LL);
  int v15 = 2;
  int v13 = 7;
  BOOL v14 = sub_100ADA220(a1, 7u);
  (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v15,  &v13,  1LL,  0xFFFFFFFFLL,  0LL);
  id v10 = [*(id *)(a1 + 128) silo];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_100ADAD98;
  v12[3] = &unk_10181D3D0;
  _DWORD v12[4] = a1;
  [v10 afterInterval:v12 async:sub_100AE0164(1)];
  return a1;
}

void sub_100ADA878( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  uint64_t v25 = *(void *)(v22 + 136);
  *(void *)(v22 + 136) = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  sub_1002E4CB0(v23);
  sub_100ADAEE0(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100ADA8E8(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10186E678;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100ADA968(_Unwind_Exception *exception_object)
{
}

void sub_100ADA984(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186E628);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    std::string::size_type v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStatusBarIconManager::onClientNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E628);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      BOOL v14 = "";
      __int16 v15 = 2082;
      std::string v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStatusBarIconManager::onClientNotification, event:%{public, location:escape_only} s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_100ADAFE8(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ADAB34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ADAB54()
{
  unsigned __int8 v0 = _os_activity_create( (void *)&_mh_execute_header,  "CL: #SystemServiceSwitch Received sync darwin notification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v0, &v2);

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E648);
  }
  uint64_t v1 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v4 = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2082;
    uint64_t v8 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#SystemServiceSwitch Received sync darwin notification, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  os_activity_scope_leave(&v2);
}

void sub_100ADAC70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_100ADAC84(_BYTE *a1)
{
  os_activity_scope_state_s v2 = v10;
  if (v10)
  {
    p_uint64_t shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = a1 + 145;
  do
  {
    *(_DWORD *)&v6[4 * v5++ + 11] = 0;
  }

  while (v5 != 9);
  char v7 = a1[148];
  a1[150] = v7;
  a1[151] = v7;
  return sub_1002A5590(v11);
}

void sub_100ADAD70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100ADAD98(uint64_t a1)
{
  return sub_100ADADA0(*(void *)(a1 + 32));
}

uint64_t sub_100ADADA0(uint64_t a1)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E648);
  }
  os_activity_scope_state_s v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:sbim: Posting status bar icon visibility change notification}",  (uint8_t *)v7,  0x12u);
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLShouldDisplayStatusBarIconChangedNotification, 0LL, 0LL, 0);
  int v4 = *(_DWORD *)(a1 + 192);
  uint64_t result = _os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync");
  if ((result & 1) == 0)
  {
    if ((v4 & 2) != 0) {
      uint64_t v6 = 2LL;
    }
    else {
      uint64_t v6 = v4 & 1;
    }
    return (uint64_t)objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 128), "vendor"),  "proxyForService:",  @"CLUsageSyncManager"),  "onStatusBarIconChange:",  v6);
  }

  return result;
}

uint64_t sub_100ADAEE0(uint64_t a1)
{
  *(void *)a1 = off_10186E678;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100ADAF54(uint64_t a1)
{
  *(void *)a1 = off_10186E460;
  for (uint64_t i = 200LL; i != 224; i += 8LL)
  {
    [*(id *)(a1 + i) invalidate];
  }

  notify_cancel(*(_DWORD *)(a1 + 196));
  uint64_t v3 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1002E4CB0(a1 + 112);
  return sub_100ADAEE0(a1);
}

void sub_100ADAFD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100ADAF54(a1);
  operator delete(v1);
}

void sub_100ADAFE8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E648);
  }
  uint64_t v5 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    __int16 v9 = 2082;
    char v10 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:sbim: Got client notification}",  (uint8_t *)v8,  0x12u);
  }

  if (!*a3)
  {
    sub_100ADB124(a1);
    id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", @"CLClientManager");
    if (byte_10199A7B7 >= 0) {
      char v7 = &qword_10199A7A0;
    }
    else {
      char v7 = (uint64_t *)qword_10199A7A0;
    }
    objc_msgSend( v6,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  }

void sub_100ADB124(uint64_t a1)
{
  uint64_t v10 = a1 + 112;
  (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E648);
  }
  os_activity_scope_state_s v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v12[0]) = 2082;
    *(void *)((char *)v12 + 2) = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Clearing status bar icon enabled states}",  buf,  0x12u);
  }

  for (uint64_t i = 0LL; i != 9; ++i)
  {
    sub_100ADB354(a1, i, 0);
    *(_DWORD *)(a1 + 4 * i + 156) = 0;
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "StatusBarIconStates", 0xFFFFFFFFLL);
  int v4 = (std::__shared_weak_count *)v12[0];
  if (v12[0])
  {
    uint64_t v5 = (unint64_t *)(v12[0] + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  sub_1002F0B04(buf);
  sub_1002F13B4(*(uint64_t *)buf);
  char v7 = (std::__shared_weak_count *)v12[0];
  if (v12[0])
  {
    __int16 v8 = (unint64_t *)(v12[0] + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  sub_100ADB7CC(a1, 1);
  (*(void (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
}

void sub_100ADB310( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ADB354(uint64_t a1, unsigned int a2, int a3)
{
  char v27 = a3;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v24 = a1 + 112;
  (*(void (**)(void))(v6 + 16))();
  __int16 v26 = 256;
  uint64_t v7 = a1 + a2;
  *(_BYTE *)(v7 + 145) = a3;
  __int16 v8 = (unsigned __int8 *)(v7 + 145);
  char v9 = *(_BYTE *)(a1 + 148);
  *(_BYTE *)(a1 + 150) = v9;
  *(_BYTE *)(a1 + 151) = v9;
  if (a2 <= 7 && ((1 << a2) & 0x98) != 0)
  {
    LODWORD(buf) = a2;
    BYTE4(buf) = a3;
    switch(a2)
    {
      case 7u:
        LODWORD(v22) = 2;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v22,  &buf,  1LL,  0xFFFFFFFFLL,  0LL);
        break;
      case 4u:
        LODWORD(v22) = 1;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v22,  &buf,  1LL,  0xFFFFFFFFLL,  0LL);
        break;
      case 3u:
        LODWORD(v22) = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v22,  &buf,  1LL,  0xFFFFFFFFLL,  0LL);
        break;
    }
  }

  if (*v8 != a3)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186E648);
    }
    uint64_t v20 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      uint64_t buf = 68289538LL;
      __int16 v29 = 2082;
      int v30 = "";
      __int16 v31 = 1026;
      unsigned int v32 = a2;
      __int16 v33 = 1026;
      int v34 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#sbim: unsupported attempt to set icon visibility, class:%{public}d, enabled:%{public}hhd}",  (uint8_t *)&buf,  0x1Eu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186E648);
      }
    }

    __int16 v21 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      uint64_t buf = 68289538LL;
      __int16 v29 = 2082;
      int v30 = "";
      __int16 v31 = 1026;
      unsigned int v32 = a2;
      __int16 v33 = 1026;
      int v34 = a3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#sbim: unsupported attempt to set icon visibility",  "{msg%{public}.0s:#sbim: unsupported attempt to set icon visibility, class:%{public}d, enabled:%{public}hhd}",  (uint8_t *)&buf,  0x1Eu);
    }

    goto LABEL_36;
  }

  if (a2 != 9)
  {
    uint64_t v10 = off_10186E530[a2];
    sub_1002A5370(&buf);
    sub_1002F0B04(&v22);
    sub_1002A8F8C(v22, "StatusBarIconStates", &buf);
    __int128 v11 = v23;
    if (v23)
    {
      p_uint64_t shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    sub_1002AB3FC((uint64_t)&buf, v10, &v27);
    sub_1002F0B04(&v22);
    sub_1002ACE6C(v22, "StatusBarIconStates", (uint64_t)&buf);
    BOOL v14 = v23;
    if (v23)
    {
      __int16 v15 = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    sub_1002F0B04(&v22);
    sub_1002F13B4(v22);
    __int16 v17 = v23;
    if (v23)
    {
      uint64_t v18 = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    sub_1002A5590(&buf);
  }

  sub_100ADB7CC(a1, 1);
  if (HIBYTE(v26))
  {
LABEL_36:
    if ((_BYTE)v26) {
      pthread_mutex_unlock(v25);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v24 + 24LL))(v24);
    }
  }

void sub_100ADB764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100ADB7BC(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x100ADB7B4LL);
}

void sub_100ADB7CC(uint64_t a1, int a2)
{
  uint64_t v3 = 0LL;
  int v4 = 0;
  do
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186E648);
    }
    uint64_t v5 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(unsigned int *)(a1 + 4 * v3 + 156);
      *(_DWORD *)uint64_t buf = 68289538;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 2050;
      uint64_t v35 = v3;
      __int16 v36 = 2050;
      uint64_t v37 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#sbim: entity class state mask, class:%{public, location:CLLocationDictionaryUtilit iesEntityClass}lld, mask:%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}",  buf,  0x26u);
    }

    if (sub_100ADBD04(a1, v3)) {
      v4 |= *(_DWORD *)(a1 + 4 * v3 + 156);
    }
    ++v3;
  }

  while (v3 != 9);
  uint64_t v8 = 0LL;
  uint64_t v9 = a1 + 224;
  *(void *)&__int128 v7 = 68289794LL;
  __int128 v26 = v7;
  do
  {
    int v10 = v8 == 1;
    __int128 v11 = *(void **)(a1 + 200 + 8 * v8);
    if (v8 == 2) {
      int v10 = 2;
    }
    int v12 = *(_DWORD *)(a1 + 192);
    int v13 = v12 & v10;
    int v14 = v10 & v4;
    if ((v12 & v10) != 0 && v14 == 0)
    {
      if (*(_BYTE *)(v9 + v8)) {
        BOOL v17 = a2 == 0;
      }
      else {
        BOOL v17 = 0;
      }
      if (!v17)
      {
        double v18 = sub_100AE0164(1);
        if (v8 == 2) {
          int v19 = 1;
        }
        else {
          int v19 = a2;
        }
        if (v19) {
          double v20 = 0.0;
        }
        else {
          double v20 = v18;
        }
        if (!objc_msgSend(v11, "handler", v18, v26))
        {
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472LL;
          v28[2] = sub_100ADBD84;
          void v28[3] = &unk_10182B540;
          v28[4] = a1;
          int v29 = v8;
          [v11 setHandler:v28];
        }

        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10186E648);
        }
        __int16 v21 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289538;
          int v31 = 0;
          __int16 v32 = 2082;
          __int16 v33 = "";
          __int16 v34 = 2050;
          uint64_t v35 = v8;
          __int16 v36 = 1026;
          LODWORD(v3memset(&v6[1], 0, 7) = (int)v20;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#sbim: scheduling arrow demotion timer, state:%{public, location:CLLocationDict ionaryUtilitiesArrowState}lld, delay:%{public}d}",  buf,  0x22u);
        }

        [v11 setNextFireDelay:v20];
        *(_BYTE *)(v9 + v8) = 1;
      }
    }

    else
    {
      if (v13)
      {
        if (*(_BYTE *)(v9 + v8)) {
          BOOL v16 = v14 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16) {
          goto LABEL_51;
        }
      }

      else if (!v14)
      {
        goto LABEL_51;
      }

      *(_DWORD *)(a1 + 192) = v12 | v10;
      objc_msgSend(v11, "setNextFireDelay:", 1.79769313e308, v26);
      *(_BYTE *)(v9 + v8) = 0;
      if (v13)
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10186E648);
        }
        uint64_t v22 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(unsigned int *)(a1 + 192);
          *(_DWORD *)uint64_t buf = v26;
          int v31 = 0;
          __int16 v32 = 2082;
          __int16 v33 = "";
          __int16 v34 = 2050;
          uint64_t v35 = v8;
          __int16 v36 = 2050;
          uint64_t v37 = v23;
          __int16 v38 = 2050;
          uint64_t v39 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#sbim: only cancelling a demotion timer due to another demotion timer in-flight,  state:%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, mask:%{public, location:CLLocati onDictionaryUtilitiesArrowState}lld, newMask:%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}",  buf,  0x30u);
        }
      }

      else
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10186E648);
        }
        uint64_t v24 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v25 = *(unsigned int *)(a1 + 192);
          *(_DWORD *)uint64_t buf = 68289538;
          int v31 = 0;
          __int16 v32 = 2082;
          __int16 v33 = "";
          __int16 v34 = 2050;
          uint64_t v35 = v8;
          __int16 v36 = 2050;
          uint64_t v37 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#sbim: promoting arrow, state:%{public, location:CLLocationDictionaryUtilitiesA rrowState}lld, mask:%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}",  buf,  0x26u);
        }

        sub_100ADADA0(a1);
      }
    }

uint64_t sub_100ADBC30()
{
  unsigned __int8 v0 = v6;
  if (v6)
  {
    p_uint64_t shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }

  LOBYTE(v5) = 0;
  sub_1002A6F64((uint64_t)v7, "SystemService", (BOOL *)&v5);
  uint64_t v3 = v5;
  sub_1002A5590(v7);
  return v3;
}

void sub_100ADBCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_100ADBD04(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16LL))(a1 + 112);
  BOOL v5 = a2 < 8 && ((0x87u >> a2) & 1) != 0 || *(_BYTE *)(a1 + a2 + 145) != 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  return v5;
}

void sub_100ADBD84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(a1 + 40);
  if (*(_BYTE *)(v1 + v2 + 224))
  {
    int v4 = *(_DWORD *)(v1 + 192);
    if ((v4 & 2) != 0) {
      uint64_t v5 = 2LL;
    }
    else {
      uint64_t v5 = v4 & 1;
    }
    if ((_DWORD)v2 == 2) {
      int v6 = -3;
    }
    else {
      int v6 = ~((_DWORD)v2 == 1);
    }
    *(_DWORD *)(v1 + 192) = v4 & v6;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186E648);
    }
    __int128 v7 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(int *)(a1 + 40);
      uint64_t v9 = *(unsigned int *)(v1 + 192);
      v11[0] = 68289794;
      v11[1] = 0;
      __int16 v12 = 2082;
      int v13 = "";
      __int16 v14 = 2050;
      uint64_t v15 = v8;
      __int16 v16 = 2050;
      uint64_t v17 = v5;
      __int16 v18 = 2050;
      uint64_t v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#sbim: executing arrow demotion timer, state:%{public, location:CLLocationDictionar yUtilitiesArrowState}lld, previousState:%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, ne wMask:%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}",  (uint8_t *)v11,  0x30u);
    }

    if ((*(_DWORD *)(v1 + 192) & 2) != 0) {
      int v10 = 2;
    }
    else {
      int v10 = *(_DWORD *)(v1 + 192) & 1;
    }
    if (v10 != (_DWORD)v5) {
      sub_100ADADA0(v1);
    }
  }

void sub_100ADBEF8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLStatusBarIconManager");
  sub_100ADBFC0((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *uint64_t v8 = off_10186E5B0;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100ADBF94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100ADBFC0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_10186E7C8;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100ADC094(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E628);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        __int128 v11 = (void *)(a1 + 8);
        *(_DWORD *)uint64_t buf = 136446466;
        __int16 v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10186E628);
        }
        __int16 v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        uint64_t v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationDa ta>::removeClient(int) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLSta tusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100ADC308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198F610);
}

uint64_t sub_100ADC31C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)__int16 v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        *(void *)uint64_t buf = 0LL;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          __int16 v36 = sub_100ADE97C(buf);
          sub_100ADDFA4((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_10198F611;
        HIDWORD(v40) = v17;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        int v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        __int16 v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186E628);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v47 = 1026;
    int v48 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E628);
    }
    uint64_t v37 = (void *)(a1 + 8);
    *(_DWORD *)__int16 v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    uint64_t v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>: :registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStatusBarIco nManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_ T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100ADC778(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E628);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E628);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData >::clientRegistered(int, const Notification_T &) [Notification_T = CLStatusBarIconManager_Type::Notification, No tificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100ADC9F8(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10186E628);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                uint64_t v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10186E628);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                __int16 v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::Notifi cationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStatusBarIconM anager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, Notific ationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100ADCD80(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  _BYTE v6[2] = 0LL;
  *uint64_t v6 = off_10186E758;
  v6[1] = 0LL;
  uint64_t v7 = *a3;
  *((void *)&v14 + 1) = v6;
  v6[3] = v7;
  *(void *)&__int128 v14 = v6 + 3;
  int v13 = *a2;
  int v15 = &v13;
  BOOL v8 = sub_10023347C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_1012CF090, &v15);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  int v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_100ADCE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100ADCE68(uint64_t a1, unsigned int *a2, void *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E628);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v12 = (void *)(a1 + 8);
      int v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      __int128 v68 = v12;
      __int16 v69 = 2050;
      __int128 v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      __int128 v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_uint64_t shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x20uLL);
      v27[2] = 0LL;
      void *v27 = off_10186E758;
      v27[1] = 0LL;
      v27[3] = *a3;
      *(void *)uint64_t buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_100ADDB50(a3);
    if (a5 == -1)
    {
      sub_100ADDBD0((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          uint64_t v37 = (uint64_t *)v33;
        }
        else {
          uint64_t v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          __int16 v43 = (unint64_t *)v38;
        }
        else {
          __int16 v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        __int128 v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10186E628);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            uint64_t v46 = v71;
          }
          else {
            uint64_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_10186E628);
          }
          __int16 v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            __int128 v49 = __p;
          }
          else {
            __int128 v49 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          __int128 v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::Notification Data>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notificat ion_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::Notific ationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      __int128 v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      __int128 v52 = v40 + 3;
      uint64_t v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      __int128 v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          __int128 v59 = v53;
        }
        else {
          __int128 v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          __int128 v56 = v53;
        }
        uint64_t v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_100ADDFA4((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_100ADD4A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100ADD4EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E628);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E628);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData >::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIc onManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186E628);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E628);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData >::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIc onManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_10186E628);
            }
            int v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10186E628);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::Notifica tionData>::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100ADDA98(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100ADE91C(a1);
  operator delete(v1);
}

id sub_100ADDAAC(uint64_t a1, int a2, void *a3)
{
  id result = sub_100ADE0D0(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100ADDAF8(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100ADDB24(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

CLCppContainer *sub_100ADDB50(void *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100ADE0C0;
  uint64_t v7 = &unk_10181D3D0;
  BOOL v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100ADDBD0(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          BOOL v12 = (uint64_t *)v4;
        }
        else {
          BOOL v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int128 v51 = v9;
        id v13 = sub_100ADE0D0(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        __int128 v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int128 v50 = v19;
              sub_100ADDFA4(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int128 v51 = v29;
              uint64_t v34 = v29[6];
              __int128 v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      __int128 v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      __int128 v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      __int128 v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int128 v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10186E628);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10186E628);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationDa ta>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLStatusBarIcon Manager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, Notifi cationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100ADDFA4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100ADE0D0(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    __int128 v14 = (int *)(*(void *)a2 + 32LL);
    BOOL v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_100ADE080(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10186E758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100ADE094(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10186E758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100ADE0C0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100ADE0D0(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100ADE148(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_100ADE4D0(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100ADE148(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100ADE87C((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101348827LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101348827LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStatusBarIconManager_Type::NotificationData, C allbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100ADE4D0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101348827LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101348827LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186E798);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStatusBarIconManager_Type::NotificationData, C allbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100ADE87C(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D3ED8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8) {
      sub_10125DE8C();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_100ADE8F0(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100ADE91C(uint64_t a1)
{
  *(void *)a1 = off_10186E7C8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100ADE97C(void *a1)
{
  id v2 = operator new(8uLL);
  *id v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100ADE9FC;
  uint64_t v7 = &unk_10181D3D0;
  uint64_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100ADE9FC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_100ADEA0C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100ADEA70()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100ADEAE4(_Unwind_Exception *a1)
{
}

uint64_t sub_100ADEAFC()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10199A7A0, (void *)&_mh_execute_header);
}

void *sub_100ADEB40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
  }

  int v11 = *(_DWORD *)(a3 + 24);
  sub_1008666C8((uint64_t)a1, a2, (__int128 *)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10186E7F0;
  sub_10001A504((uint64_t)(a1 + 24), a4);
  return a1;
}

void sub_100ADEBE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

unint64_t sub_100ADEC14(uint64_t a1)
{
  uint64_t v1 = a1;
  int v2 = *(_DWORD *)(a1 + 144);
  __chkstk_darwin(a1);
  int v124 = (char *)&v118 - v4;
  uint64_t v6 = sub_100865E44(v3 + 48, (char *)&v118 - v4, v5);
  uint64_t v7 = v6;
  int v123 = (void *)(v1 + 120);
  float v8 = 1.0 / (float)v2;
  if ((_DWORD)v6)
  {
    double v9 = (double)*(unint64_t *)(v124 + 42);
    double v10 = v9 - *(double *)(v1 + 224);
    uint64_t v11 = (int)v6 - 1LL;
    uint64_t v12 = (unint64_t *)&v124[50 * v11 + 42];
    double v13 = (double)*v12 - v9;
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10186E820);
    }
    double v14 = v10 / 1000000.0;
    unint64_t v15 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = v123;
      uint64_t v17 = *(void *)(v124 + 42);
      unint64_t v18 = *v12;
      int v136 = 136447746;
      __int16 v137 = v16;
      __int16 v138 = 1026;
      *(_DWORD *)double v139 = v7;
      *(_WORD *)&v139[4] = 2050;
      *(double *)&v139[6] = v14;
      *(_WORD *)&v139[14] = 2050;
      *(void *)&v139[16] = vabdd_f64(v14, v8);
      *(_WORD *)&v139[24] = 2050;
      *(void *)&v139[26] = v17;
      *(_WORD *)&v139[34] = 2050;
      *(void *)&v139[36] = v18;
      *(_WORD *)&v139[44] = 2050;
      *(double *)&v139[46] = v13 / 1000000.0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{pub lic}llu], time interval %{public}f",  (uint8_t *)&v136,  0x44u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v136, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10186E820);
      }
      __int16 v88 = v123;
      uint64_t v89 = *(void *)(v124 + 42);
      unint64_t v90 = *v12;
      int v128 = 136447746;
      uint64_t v129 = v88;
      __int16 v130 = 1026;
      *(_DWORD *)uint64_t v131 = v7;
      *(_WORD *)&v131[4] = 2050;
      *(double *)&v131[6] = v14;
      *(_WORD *)&v131[14] = 2050;
      *(void *)&v131[16] = vabdd_f64(v14, v8);
      *(_WORD *)&v131[24] = 2050;
      *(void *)&v131[26] = v89;
      *(_WORD *)&v131[34] = 2050;
      *(void *)&v131[36] = v90;
      *(_WORD *)&v131[44] = 2050;
      *(double *)&v131[46] = v13 / 1000000.0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v136,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{pub lic}llu], time interval %{public}f",  &v128,  68);
      uint64_t v92 = (int *)v91;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v91);
      if (v92 != &v136) {
        free(v92);
      }
    }

    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10186E820);
    }
    BOOL v19 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_INFO))
    {
      int v20 = v123;
      unint64_t v21 = *(void *)(v124 + 42);
      unint64_t v22 = *v12;
      double v23 = (double)*v12 * 0.000000999999997;
      double v24 = *((float *)v124 + 7);
      double v25 = *((float *)v124 + 8);
      double v26 = *((float *)v124 + 9);
      uint64_t v27 = (float *)&v124[50 * v11];
      double v28 = v27[7];
      double v29 = v27[8];
      double v30 = v27[9];
      int v136 = 136448770;
      __int16 v137 = v20;
      __int16 v138 = 2050;
      *(void *)double v139 = v21;
      *(_WORD *)&v139[8] = 2050;
      *(void *)&v139[10] = v22;
      *(_WORD *)&v139[18] = 2050;
      *(double *)&v139[20] = (double)v21 * 0.000000999999997;
      *(_WORD *)&v139[28] = 2050;
      *(double *)&v139[30] = v23;
      *(_WORD *)&v139[38] = 2050;
      *(double *)&v139[40] = v24;
      *(_WORD *)&v139[48] = 2050;
      *(double *)&v139[50] = v25;
      *(_WORD *)&v139[58] = 2050;
      *(double *)double v140 = v26;
      v140[4] = 2050;
      *(double *)&v140[5] = v28;
      v140[9] = 2050;
      double v141 = v29;
      __int16 v142 = 2050;
      double v143 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f % {public}f %{public}f], last sample [%{public}f %{public}f %{public}f]",  (uint8_t *)&v136,  0x70u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v136, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10186E820);
      }
      unint64_t v93 = v123;
      unint64_t v94 = *(void *)(v124 + 42);
      unint64_t v95 = *v12;
      double v96 = (double)*v12 * 0.000000999999997;
      double v97 = *((float *)v124 + 7);
      double v98 = *((float *)v124 + 8);
      double v99 = *((float *)v124 + 9);
      __int16 v100 = (float *)&v124[50 * v11];
      double v101 = v100[7];
      double v102 = v100[8];
      double v103 = v100[9];
      int v128 = 136448770;
      uint64_t v129 = v93;
      __int16 v130 = 2050;
      *(void *)uint64_t v131 = v94;
      *(_WORD *)&v131[8] = 2050;
      *(void *)&v131[10] = v95;
      *(_WORD *)&v131[18] = 2050;
      *(double *)&v131[20] = (double)v94 * 0.000000999999997;
      *(_WORD *)&v131[28] = 2050;
      *(double *)&v131[30] = v96;
      *(_WORD *)&v131[38] = 2050;
      *(double *)&v131[40] = v97;
      *(_WORD *)&v131[48] = 2050;
      *(double *)&v131[50] = v98;
      *(_WORD *)&v131[58] = 2050;
      *(double *)unint64_t v132 = v99;
      v132[4] = 2050;
      *(double *)&v132[5] = v101;
      v132[9] = 2050;
      double v133 = v102;
      __int16 v134 = 2050;
      double v135 = v103;
      LODWORD(v11memset(&v6[1], 0, 7) = 112;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v136,  1628LL,  &_mh_execute_header,  qword_1019347C8,  1LL,  "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f % {public}f %{public}f], last sample [%{public}f %{public}f %{public}f]",  &v128,  v117);
      unint64_t v105 = (int *)v104;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v104);
      if (v105 != &v136) {
        free(v105);
      }
    }

    *(double *)(v1 + 224) = (double)*v12;
  }

  double v125 = 0LL;
  float64_t v126 = 0LL;
  __int16 v127 = 0LL;
  sub_100ADFD78((void **)&v125, (int)v7);
  uint64_t v119 = v7;
  if ((int)v7 >= 1)
  {
    uint64_t v32 = 0LL;
    unint64_t v33 = 0LL;
    int v122 = &v127;
    uint64_t v34 = v119;
    *(void *)&__int128 v31 = 136446722LL;
    __int128 v121 = v31;
    *(void *)&__int128 v31 = 136446466LL;
    __int128 v120 = v31;
    uint64_t v35 = v1;
    while (1)
    {
      uint64_t v36 = &v124[50 * v32];
      unint64_t v37 = *(void *)(v36 + 42);
LABEL_63:
      if (++v32 == v34) {
        goto LABEL_72;
      }
    }

    if (v37 >= v33)
    {
      if (!v33)
      {
LABEL_44:
        unint64_t v33 = *(void *)(v36 + 42);
        int v46 = v126;
        if (v126 >= v127)
        {
          __int128 v51 = v125;
          unint64_t v52 = 0x8F5C28F5C28F5C29LL * ((v126 - v125) >> 1);
          unint64_t v53 = v52 + 1;
          if (v52 + 1 > 0x51EB851EB851EB8LL) {
            sub_100007008();
          }
          if (0x1EB851EB851EB852LL * ((v127 - v125) >> 1) > v53) {
            unint64_t v53 = 0x1EB851EB851EB852LL * ((v127 - v125) >> 1);
          }
          if (0x8F5C28F5C28F5C29LL * ((v127 - v125) >> 1) >= 0x28F5C28F5C28F5CLL) {
            unint64_t v54 = 0x51EB851EB851EB8LL;
          }
          else {
            unint64_t v54 = v53;
          }
          if (v54)
          {
            int v55 = (char *)sub_100ADFF60((uint64_t)v122, v54);
            __int128 v51 = v125;
            int v46 = v126;
          }

          else
          {
            int v55 = 0LL;
          }

          __int128 v56 = &v55[50 * v52];
          __int128 v57 = *(_OWORD *)v36;
          __int128 v58 = *((_OWORD *)v36 + 1);
          __int128 v59 = *((_OWORD *)v36 + 2);
          *((_WORD *)v56 + 24) = *((_WORD *)v36 + 24);
          *((_OWORD *)v56 + 1) = v58;
          *((_OWORD *)v56 + 2) = v59;
          *(_OWORD *)__int128 v56 = v57;
          if (v46 == v51)
          {
            uint64_t v64 = &v55[50 * v52];
          }

          else
          {
            __int128 v60 = &v55[50 * v52];
            do
            {
              __int128 v61 = *(_OWORD *)((char *)v46 - 50);
              __int128 v62 = *(_OWORD *)((char *)v46 - 34);
              __int128 v63 = *(_OWORD *)((char *)v46 - 18);
              uint64_t v64 = v60 - 50;
              *((_WORD *)v60 - 1) = *((_WORD *)v46 - 1);
              *(_OWORD *)(v60 - 18) = v63;
              *(_OWORD *)(v60 - 34) = v62;
              *(_OWORD *)(v60 - 50) = v61;
              int v46 = (_OWORD *)((char *)v46 - 50);
              v60 -= 50;
            }

            while (v46 != v51);
          }

          __int128 v50 = v56 + 50;
          double v125 = v64;
          float64_t v126 = v56 + 50;
          __int16 v127 = &v55[50 * v54];
          if (v51) {
            operator delete(v51);
          }
        }

        else
        {
          __int128 v47 = *(_OWORD *)v36;
          __int128 v48 = *((_OWORD *)v36 + 1);
          __int128 v49 = *((_OWORD *)v36 + 2);
          *((_WORD *)v126 + 24) = *((_WORD *)v36 + 24);
          v46[1] = v48;
          v46[2] = v49;
          _OWORD *v46 = v47;
          __int128 v50 = (char *)v46 + 50;
        }

        float64_t v126 = v50;
        goto LABEL_63;
      }
    }

    else
    {
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10186E820);
      }
      BOOL v38 = (os_log_s *)qword_1019347C8;
      if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
      {
        int v39 = v123;
        int v136 = v121;
        __int16 v137 = v39;
        __int16 v138 = 2048;
        *(void *)double v139 = v37;
        *(_WORD *)&v139[8] = 2048;
        *(void *)&v139[10] = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] time went backwards, current %llu, previous %llu",  (uint8_t *)&v136,  0x20u);
      }

      uint64_t v1 = v35;
      if (sub_1002921D0(115, 0))
      {
        bzero(&v136, 0x65CuLL);
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10186E820);
        }
        int v40 = v123;
        int v128 = v121;
        uint64_t v129 = v40;
        __int16 v130 = 2048;
        *(void *)uint64_t v131 = v37;
        *(_WORD *)&v131[8] = 2048;
        *(void *)&v131[10] = v33;
        LODWORD(v11memset(&v6[1], 0, 7) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v136,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] time went backwards, current %llu, previous %llu",  &v128,  v117);
        BOOL v42 = (int *)v41;
        sub_10029211C("Generic", 1LL, 0, 0LL, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v41);
        if (v42 != &v136) {
          free(v42);
        }
        uint64_t v1 = v35;
      }
    }

    double v43 = (double)(v37 - v33) / 1000000.0;
    if (v43 > v8 * 1.5)
    {
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10186E820);
      }
      BOOL v44 = (os_log_s *)qword_1019347C8;
      if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
      {
        int v45 = v123;
        int v136 = v120;
        __int16 v137 = v45;
        __int16 v138 = 2050;
        *(double *)double v139 = 1.0 / v43;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] wrong frequency read, %{public}f",  (uint8_t *)&v136,  0x16u);
      }

      uint64_t v1 = v35;
      if (sub_1002921D0(115, 0))
      {
        bzero(&v136, 0x65CuLL);
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10186E820);
        }
        __int128 v65 = v123;
        int v128 = v120;
        uint64_t v129 = v65;
        __int16 v130 = 2050;
        *(double *)uint64_t v131 = 1.0 / v43;
        LODWORD(v11memset(&v6[1], 0, 7) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v136,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] wrong frequency read, %{public}f",  &v128,  v117);
        __int16 v67 = (int *)v66;
        sub_10029211C("Generic", 1LL, 0, 0LL, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v66);
        if (v67 != &v136) {
          free(v67);
        }
        uint64_t v1 = v35;
      }
    }

    goto LABEL_44;
  }

void sub_100ADFD30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100ADFD78(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x8F5C28F5C28F5C29LL * ((v4 - (_BYTE *)*a1) >> 1) < a2)
  {
    if (a2 >= 0x51EB851EB851EB9LL) {
      sub_100007008();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)sub_100ADFF60(v3, a2);
    uint64_t v7 = &v6[50 * (v5 / 50)];
    double v9 = &v6[50 * v8];
    uint64_t v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int128 v13 = *(_OWORD *)(v10 - 50);
        __int128 v14 = *(_OWORD *)(v10 - 34);
        __int128 v15 = *(_OWORD *)(v10 - 18);
        *((_WORD *)v12 - 1) = *((_WORD *)v10 - 1);
        *(_OWORD *)(v12 - 18) = v15;
        *(_OWORD *)(v12 - 34) = v14;
        *(_OWORD *)(v12 - 50) = v13;
        v12 -= 50;
        v10 -= 50;
      }

      while (v10 != v11);
      double v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_100ADFE78(void *a1)
{
  *a1 = off_10186E7F0;
  int v2 = a1 + 24;
  uint64_t v3 = (void *)a1[27];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return sub_100866A6C((uint64_t)a1);
}

void sub_100ADFED4(void *a1)
{
  *a1 = off_10186E7F0;
  int v2 = a1 + 24;
  uint64_t v3 = (void *)a1[27];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  int64_t v5 = (void *)sub_100866A6C((uint64_t)a1);
  operator delete(v5);
}

void sub_100ADFF34(id a1)
{
  qword_1019347C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void *sub_100ADFF60(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x51EB851EB851EB9LL) {
    sub_1000070D4();
  }
  return operator new(50 * a2);
}

uint64_t sub_100ADFFA8()
{
  dword_10199A7E0 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_10199A7C8, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_10199A7E8, "DmFp");
  dword_10199A800 = 200;
  return __cxa_atexit((void (*)(void *))sub_100355650, qword_10199A7E8, (void *)&_mh_execute_header);
}

uint64_t sub_100AE0034(void *a1, int a2)
{
  char v4 = sub_100AE00C4(a1);
  double v5 = 60.0;
  if (a2 != 2) {
    double v5 = 0.0;
  }
  if (a2 == 1) {
    double v5 = 10.0;
  }
  if ((v4 & 6) != 0) {
    double v6 = v5;
  }
  else {
    double v6 = -1.0;
  }
  int v7 = sub_100AE0188(a1, v6);
  uint64_t v8 = sub_100AE0214([a1 objectForKeyedSubscript:@"RemoteUsage"]);
  if (v8) {
    LODWORD(v8) = sub_100AE0188(v8, v6);
  }
  return v8 | v7;
}

uint64_t sub_100AE00C4(void *a1)
{
  id v2 = [a1 objectForKey:@"Authorization"];
  if (v2)
  {
    unint64_t v3 = (unint64_t)[v2 integerValue];
    if (v3 < 5) {
      return qword_101348910[v3];
    }
    return 0LL;
  }

  id v5 = [a1 objectForKey:@"Authorized"];
  if (!v5)
  {
    uint64_t v6 = (int)sub_100AE0AB8(a1, 1) - 3LL;
    return 0LL;
  }

  else {
    return 1LL;
  }
}

double sub_100AE0164(int a1)
{
  double result = 60.0;
  if (a1 != 2) {
    double result = 0.0;
  }
  if (a1 == 1) {
    return 10.0;
  }
  return result;
}

uint64_t sub_100AE0188(void *a1, double a2)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = (uint64_t *)&off_10186E890;
  do
  {
    if (sub_100AE2684(a1, *(v6 - 1), *v6, a2 - dbl_101348898[v4])) {
      uint64_t v5 = dword_1013488E8[v4] | v5;
    }
    ++v4;
    v6 += 2;
  }

  while (v4 != 10);
  return v5;
}

NSMutableDictionary *sub_100AE0214(void *a1)
{
  uint64_t v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v2 = [a1 allKeys];
  id v3 = [v2 countByEnumeratingWithState:&v28 objects:v38 count:16];
  if (!v3) {
    goto LABEL_31;
  }
  id v5 = v3;
  char v6 = 0;
  uint64_t v7 = *(void *)v29;
  *(void *)&__int128 v4 = 68289282LL;
  __int128 v26 = v4;
  do
  {
    uint64_t v8 = 0LL;
    do
    {
      if (*(void *)v29 != v7) {
        objc_enumerationMutation(v2);
      }
      uint64_t v9 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)v8);
      id v10 = objc_msgSend(a1, "objectForKeyedSubscript:", v9, v26);
      uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSArray);
      char isKindOfClass = objc_opt_isKindOfClass(v10, v11);
      id v13 = [a1 objectForKeyedSubscript:v9];
      id v14 = v13;
      if ((isKindOfClass & 1) != 0)
      {
        id v15 = [v13 objectAtIndexedSubscript:1];
        uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSNumber);
        if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v27, "setObject:forKeyedSubscript:", v15, v9);
        }

        else
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10186E968);
          }
          unint64_t v18 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = v26;
            int v33 = 0;
            __int16 v34 = 2082;
            uint64_t v35 = "";
            __int16 v36 = 2114;
            id v37 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp , arr[1]:%{public, location:escape_only}@}",  buf,  0x1Cu);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_10186E968);
            }
          }

          BOOL v19 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            *(_DWORD *)uint64_t buf = v26;
            int v33 = 0;
            __int16 v34 = 2082;
            uint64_t v35 = "";
            __int16 v36 = 2114;
            id v37 = v15;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp",  "{msg%{public}.0s:Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp , arr[1]:%{public, location:escape_only}@}",  buf,  0x1Cu);
          }
        }

        char v6 = 1;
      }

      else
      {
        uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSNumber);
        if ((objc_opt_isKindOfClass(v14, v17) & 1) != 0)
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  [a1 objectForKeyedSubscript:v9],  v9);
        }

        else
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10186E968);
          }
          int v20 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            id v21 = [a1 objectForKeyedSubscript:v9];
            *(_DWORD *)uint64_t buf = v26;
            int v33 = 0;
            __int16 v34 = 2082;
            uint64_t v35 = "";
            __int16 v36 = 2114;
            id v37 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp, value:%{public, location:escape_only}@}",  buf,  0x1Cu);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_10186E968);
            }
          }

          unint64_t v22 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            id v23 = [a1 objectForKeyedSubscript:v9];
            *(_DWORD *)uint64_t buf = v26;
            int v33 = 0;
            __int16 v34 = 2082;
            uint64_t v35 = "";
            __int16 v36 = 2114;
            id v37 = v23;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp",  "{msg%{public}.0s:Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp, value:%{public, location:escape_only}@}",  buf,  0x1Cu);
          }
        }
      }

      uint64_t v8 = (char *)v8 + 1;
    }

    while (v5 != v8);
    id v24 = [v2 countByEnumeratingWithState:&v28 objects:v38 count:16];
    id v5 = v24;
  }

  while (v24);
  if ((v6 & 1) != 0) {
    return v27;
  }
LABEL_31:

  return (NSMutableDictionary *)a1;
}

uint64_t sub_100AE067C(void *a1, int a2)
{
  int v3 = sub_100AE0034(a1, a2);
  if ((v3 & 0x240) != 0) {
    return 2LL;
  }
  if (!v3) {
    return 0LL;
  }
  id v5 = [a1 objectForKeyedSubscript:@"InUseLevel"];
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0) {
    unsigned int v7 = [v5 intValue];
  }
  else {
    unsigned int v7 = 0;
  }
  id v8 = [a1 objectForKeyedSubscript:@"ProvisionalMonitoring"];
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0) {
    unsigned int v10 = [v8 BOOLValue] ^ 1;
  }
  else {
    unsigned int v10 = 1;
  }
  if (v7) {
    return 1LL;
  }
  else {
    return v10;
  }
}

uint64_t sub_100AE0758(void *a1)
{
  return sub_100AE0AB8(a1, 1);
}

BOOL sub_100AE0760(void *a1)
{
  return sub_100AE0034(a1, 0) != 0;
}

void sub_100AE0780(void *a1)
{
  qword_10199A810 = (uint64_t)[a1 copy];
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10199A808);
}

unint64_t sub_100AE07D0(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  if (qword_10199A828 != -1) {
    dispatch_once(&qword_10199A828, &stru_10186E840);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10199A820);
  id v2 = [(id)qword_10199A818 objectForKey:a1];
  if (v2)
  {
    unint64_t v3 = (unint64_t)[v2 BOOLValue];
  }

  else
  {
    __int128 v4 = (const __CFBoolean *)MGCopyAnswer(a1, 0LL);
    id v5 = v4;
    if (v4)
    {
      CFTypeID v6 = CFGetTypeID(v4);
      unint64_t v3 = v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5) != 0;
      CFRelease(v5);
      objc_msgSend( (id)qword_10199A818,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3),  a1);
    }

    else
    {
      unint64_t v3 = 0LL;
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10199A820);
  return v3;
}

void sub_100AE08DC(_Unwind_Exception *a1)
{
}

void sub_100AE08F8(id a1)
{
  qword_10199A818 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
}

uint64_t sub_100AE091C(const __CFString *a1)
{
  uint64_t v7 = 0LL;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  char v10 = 1;
  uint64_t v2 = sub_100CCE8AC();
  CFArrayRef v3 = sub_100CCEF08(v2, a1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _BYTE v6[2] = sub_100AE09DC;
  v6[3] = &unk_10186E868;
  _DWORD v6[4] = &v7;
  -[__CFArray enumerateObjectsUsingBlock:](v3, "enumerateObjectsUsingBlock:", v6);

  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_100AE09C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

unint64_t sub_100AE09DC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (qword_10199A830 != -1) {
    dispatch_once(&qword_10199A830, &stru_10186E928);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10199A808);
  id v7 = (id)qword_10199A810;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10199A808);
  if (![v7 count]) {
    sub_10125DFFC();
  }
  id v8 = [v7 objectForKeyedSubscript:a2];
  if (v8)
  {
    unint64_t result = (unint64_t)[v8 BOOLValue];
    if ((result & 1) != 0) {
      return result;
    }
    goto LABEL_6;
  }

  unint64_t result = sub_100AE07D0(a2);
  if ((result & 1) == 0)
  {
LABEL_6:
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }

  return result;
}

uint64_t sub_100AE0AB0(void *a1)
{
  return sub_100AE0AB8(a1, 0);
}

uint64_t sub_100AE0AB8(void *a1, int a2)
{
  id v4 = [a1 objectForKey:@"BundleId"];
  id v5 = (const __CFString *)[a1 objectForKey:@"BundlePath"];
  if (v4)
  {
    if (!a2) {
      return 1LL;
    }
    if ([a1 objectForKey:@"Registered"]) {
      return 1LL;
    }
    if ([a1 objectForKey:@"Authorized"]) {
      return 1LL;
    }
    uint64_t result = (uint64_t)[a1 objectForKey:@"Authorization"];
    if (result) {
      return 1LL;
    }
  }

  else
  {
    id v7 = (__CFString *)v5;
    if (v5)
    {
      if (sub_10029681C(v5))
      {
        return 4LL;
      }

      else
      {
        if (sub_100296914(v7))
        {
          unsigned int v8 = 5;
        }

        else if (sub_10029693C(v7))
        {
          unsigned int v8 = 7;
        }

        else if (sub_10029661C(v7))
        {
          unsigned int v8 = 8;
        }

        else if (sub_1002965E4(v7))
        {
          unsigned int v8 = 3;
        }

        else
        {
          unsigned int v8 = 2;
        }

        else {
          return 6LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100AE0BD4(void *a1)
{
  if ((objc_msgSend( objc_msgSend(a1, "objectForKey:", @"TemporaryAuthorization"),  "unsignedIntValue") & 2) != 0) {
    return 1LL;
  }
  else {
    return (uint64_t)objc_msgSend( objc_msgSend(a1, "objectForKey:", @"CorrectiveCompensationEnabled"),  "unsignedIntValue");
  }
}

id sub_100AE0C24(void *a1)
{
  return objc_msgSend(objc_msgSend(a1, "objectForKey:", @"IncidentalUseMode"), "unsignedIntValue");
}

uint64_t sub_100AE0C40(void *a1)
{
  unint64_t v2 = sub_100AE00C4(a1);
  int v3 = v2;
  if (v2 < 5 && ((0x17u >> v2) & 1) != 0) {
    return dword_101348968[v2];
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E968);
  }
  id v4 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    int v7 = 68289538;
    int v8 = 0;
    __int16 v9 = 2082;
    char v10 = "";
    __int16 v11 = 1026;
    int v12 = v3;
    __int16 v13 = 2114;
    id v14 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected AuthMask #clldu RegistrationResult, LocationDictionaryUtility AuthMask:%{p ublic}d, dictionary:%{public, location:escape_only}@}",  (uint8_t *)&v7,  0x22u);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186E968);
    }
  }

  id v5 = (os_log_s *)qword_101934988;
  if (os_signpost_enabled((os_log_t)qword_101934988))
  {
    int v7 = 68289538;
    int v8 = 0;
    __int16 v9 = 2082;
    char v10 = "";
    __int16 v11 = 1026;
    int v12 = v3;
    __int16 v13 = 2114;
    id v14 = a1;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected AuthMask #clldu RegistrationResult",  "{msg%{public}.0s:Unexpected AuthMask #clldu RegistrationResult, LocationDictionaryUtility AuthMask:%{p ublic}d, dictionary:%{public, location:escape_only}@}",  (uint8_t *)&v7,  0x22u);
  }

  return 4LL;
}

BOOL sub_100AE0E14(void *a1, void *a2)
{
  *a2 = 0x10000000000000LL;
  id v3 = [a1 objectForKey:@"TimeMissing"];
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    *a2 = v5;
  }

  return v4 != 0LL;
}

NSArray *sub_100AE0E60(void *a1, int a2, int a3, int a4)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E968);
  }
  uint64_t v5 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68290050;
    int v51 = 0;
    __int16 v52 = 2082;
    unint64_t v53 = "";
    __int16 v54 = 2114;
    unint64_t v55 = (unint64_t)a1;
    __int16 v56 = 1026;
    *(_DWORD *)__int128 v57 = a2;
    *(_WORD *)&v57[4] = 1026;
    *(_DWORD *)&v57[6] = a3;
    LOWORD(v5_Block_object_dispose(va, 8) = 1026;
    *(_DWORD *)((char *)&v58 + 2) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:computing #clldu registrationResults, dictionary:%{public, location:escape_only}@,  isSystemService:%{public}hhd, bigSwitchEnabled:%{public}hhd, overrideDeauthorization:%{public}hhd}",  buf,  0x2Eu);
  }

  id v6 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  [v6 addObject:a1];
  id v7 = sub_100AE1648(a1);
  if ([v7 count]) {
    [v6 addObjectsFromArray:v7];
  }
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v8 = [v6 countByEnumeratingWithState:&v44 objects:v59 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = 4LL;
    uint64_t v41 = *(void *)v45;
    uint64_t v11 = 4LL;
    uint64_t v12 = 4LL;
    obfloat j = v6;
LABEL_9:
    uint64_t v13 = 0LL;
    while (1)
    {
      if (*(void *)v45 != v41) {
        objc_enumerationMutation(obj);
      }
      id v14 = *(void **)(*((void *)&v44 + 1) + 8 * v13);
      id v15 = [v14 objectForKeyedSubscript:@"ZoneId"];
      id v16 = [v14 objectForKey:@"TimeMissing"];
      if (v16)
      {
        [v16 doubleValue];
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10186E968);
        }
        uint64_t v17 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          int v51 = 0;
          __int16 v52 = 2082;
          unint64_t v53 = "";
          __int16 v54 = 2114;
          unint64_t v55 = (unint64_t)v14;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#clldu _staticRegistrationResult , missing client, dictionary:%{public, locatio n:escape_only}@}",  buf,  0x1Cu);
        }

        uint64_t v18 = 7LL;
      }

      else
      {
        if (v15) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = a2 == 0;
        }
        if (v26) {
          goto LABEL_57;
        }
        int v27 = sub_100AE0AB8(v14, 1);
        if (v27 != 6 && v27 != 0) {
          goto LABEL_57;
        }
        int v29 = v27;
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10186E968);
        }
        __int128 v30 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          int v51 = 0;
          __int16 v52 = 2082;
          unint64_t v53 = "";
          __int16 v54 = 2114;
          unint64_t v55 = (unint64_t)v14;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#clldu staticRegistrationResult , unsupported system service, dictionary:%{publ ic, location:escape_only}@}",  buf,  0x1Cu);
        }

        uint64_t v18 = 3LL;
        if (v29)
        {
          if (v29 != 6)
          {
LABEL_57:
            uint64_t v18 = sub_100AE0C40(v14);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_10186E968);
            }
            __int128 v31 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t buf = 68289282;
              int v51 = 0;
              __int16 v52 = 2082;
              unint64_t v53 = "";
              __int16 v54 = 2050;
              unint64_t v55 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#clldu _staticRegistrationResult, registration:%{public, location:CLClientR egistrationResult}lld}",  buf,  0x1Cu);
            }
          }
        }
      }

      if (objc_msgSend( &off_1018D6F40,  "containsObject:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)))
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10186E968);
        }
        int v33 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "computing #clldu registrationResults, encountered doNotProceed static registration result. Early return",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10186E968);
          }
          v43[0] = 0;
          id v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "computing #clldu registrationResults, encountered doNotProceed static registration result. Early return",  v43,  2);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSArray *CLLocationDictionaryUtilitiesGetClientRegistrationResults(NSDictionary *, BOOL, BOOL, BOOL)",  "%s\n",  v37);
        }

        __int128 v49 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v18);
        uint64_t v11 = 4LL;
        __int16 v34 = &v49;
        uint64_t v10 = 4LL;
        goto LABEL_75;
      }

      if (a3)
      {
        unsigned int v19 = v18;
        if ((_DWORD)v18 == 1)
        {
          if (objc_msgSend( objc_msgSend(v14, "objectForKey:", @"ProvisionalMonitoring"),  "BOOLValue")) {
            unsigned int v19 = 8;
          }
          else {
            unsigned int v19 = 1;
          }
        }

        int v20 = a2;
        if ((_DWORD)v18 != 2) {
          int v20 = 0;
        }
        if ((v20 & a4) != 0) {
          uint64_t v21 = 0LL;
        }
        else {
          uint64_t v21 = v19;
        }
        uint64_t v22 = v21;
        if ((_DWORD)v21 == 4)
        {
          unsigned __int8 v23 = objc_msgSend( objc_msgSend(v14, "objectForKey:", @"TemporaryAuthorization"),  "intValue");
          if ((v23 & 1) != 0) {
            unsigned int v24 = 1;
          }
          else {
            unsigned int v24 = 4;
          }
          if ((v23 & 4) != 0) {
            uint64_t v21 = 2LL;
          }
          else {
            uint64_t v21 = v24;
          }
        }

        if (!v15)
        {
LABEL_39:
          uint64_t v10 = v21;
          uint64_t v11 = v22;
          uint64_t v12 = v18;
          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v21 = 2LL;
        uint64_t v22 = 2LL;
        if (!v15) {
          goto LABEL_39;
        }
      }

      int v25 = objc_msgSend( objc_msgSend(v14, "objectForKeyedSubscript:", @"ServiceMaskOperator"),  "intValue");
      uint64_t v12 = sub_100AE1824(v12, v18, v25);
      uint64_t v11 = sub_100AE1824(v11, v22, v25);
      uint64_t v10 = sub_100AE1824(v10, v21, v25);
LABEL_40:
      if (v9 == (id)++v13)
      {
        id v32 = [obj countByEnumeratingWithState:&v44 objects:v59 count:16];
        id v9 = v32;
        if (v32) {
          goto LABEL_9;
        }
        goto LABEL_70;
      }
    }
  }

  uint64_t v10 = 4LL;
  uint64_t v11 = 4LL;
  uint64_t v12 = 4LL;
LABEL_70:
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E968);
  }
  uint64_t v35 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289794;
    int v51 = 0;
    __int16 v52 = 2082;
    unint64_t v53 = "";
    __int16 v54 = 2050;
    unint64_t v55 = v12;
    __int16 v56 = 2050;
    *(void *)__int128 v57 = v11;
    *(_WORD *)&v57[8] = 2050;
    uint64_t v58 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#clldu registrationResults, static:%{public, location:CLClientRegistrationResult}lld, effective:%{public, location:CLClientRegistrationResult}lld, transient:%{public, location:CLClientRegistr ationResult}lld}",  buf,  0x30u);
  }

  __int128 v48 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v12);
  __int16 v34 = &v48;
LABEL_75:
  v34[1] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v11);
  void v34[2] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v10);
  return +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v34, 3LL);
}

id sub_100AE1648(void *a1)
{
  id v2 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  id v3 = [a1 objectForKey:@"InterestZones"];
  if ([v3 count])
  {
    id v4 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    id v16 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (!v5) {
      goto LABEL_15;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v18;
    while (1)
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v10 = [v3 objectForKeyedSubscript:v9];
        id v11 = [v10 objectForKey:@"Relevant"];
        if (v11 && [v11 BOOLValue])
        {
          uint64_t v12 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v10);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v9, @"ZoneId");
          unsigned int v13 = objc_msgSend( objc_msgSend(v10, "objectForKeyedSubscript:", @"ServiceMaskOperator"),  "intValue");
          id v14 = v4;
          if (v13)
          {
            if (v13 != 1) {
              continue;
            }
            id v14 = v16;
          }

          [v14 addObject:v12];
        }
      }

      id v6 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (!v6)
      {
LABEL_15:
        [v2 addObjectsFromArray:v4];
        [v2 addObjectsFromArray:v16];
        return v2;
      }
    }
  }

  return v2;
}

uint64_t sub_100AE1824(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  if ((_DWORD)a1 == 4 && (_DWORD)a2 == 4) {
    return 4LL;
  }
  if ((_DWORD)a1 == 4 || (_DWORD)a2 == 4)
  {
    if ((_DWORD)a1 == 4) {
      return a2;
    }
    else {
      return a1;
    }
  }

  else if (a3 == 1)
  {
    id v6 = objc_msgSend( off_10198F618,  "indexOfObject:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1));
    if (v6 <= objc_msgSend( off_10198F618,  "indexOfObject:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2))) {
      return v4;
    }
    else {
      return a2;
    }
  }

  else if (!a3)
  {
    id v5 = objc_msgSend( off_10198F618,  "indexOfObject:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1));
    if (v5 >= objc_msgSend( off_10198F618,  "indexOfObject:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2))) {
      return v4;
    }
    else {
      return a2;
    }
  }

  return v4;
}

id sub_100AE1934(void *a1)
{
  id v1 = [a1 objectForKey:@"InterestZones"];
  id result = [v1 count];
  if (result)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v3 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = 0LL;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v1);
          }
          id v8 = [v1 objectForKeyedSubscript:*(void *)(*((void *)&v10 + 1) + 8 * (void)i)];
          if (objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", @"Provenance"), "intValue") != 2)
          {
            uint64_t v9 = sub_100AE00C4(v8);
            if (!v9) {
              uint64_t v9 = 2
            }
                 * (objc_msgSend( objc_msgSend(v8, "objectForKeyedSubscript:", @"TemporaryAuthorization"),  "intValue") & 1u);
            v5 |= v9;
          }
        }

        id v4 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v4);
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    return (id)(v5 != 0);
  }

  return result;
}

CLClientManagerAuthorizationContext *sub_100AE1A9C( NSMutableDictionary *a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  id v10 = sub_100AE1934(a1);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10186E968);
  }
  __int128 v11 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68290819;
    int v114 = 0;
    __int16 v115 = 2082;
    unint64_t v116 = "";
    __int16 v117 = 2050;
    unint64_t v118 = a2;
    __int16 v119 = 2050;
    *(void *)__int128 v120 = a3;
    *(_WORD *)&v120[8] = 1026;
    *(_DWORD *)&_BYTE v120[10] = a4;
    *(_WORD *)&v120[14] = 1026;
    *(_DWORD *)&v120[16] = (_DWORD)v10;
    uint64_t v121 = 0x8310000009C0410LL;
    *(void *)int v122 = a5;
    *(_WORD *)&v122[8] = 2114;
    *(void *)int v123 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:computing #clldu freshAuthContext, EffectiveRegistration:%{public, location:CLClientR egistrationResult}lld, TransientRegistration:%{public, location:CLClientRegistrationResult}lld, bigSwitchSta te:%{public}hhd, isClientZonal:%{public}hhd, location:%{private, location:CLClientLocation}.*P, dictio nary:%{public, location:escape_only}@}",  buf,  0x4Cu);
  }

  unsigned int v92 = a2;
  int v83 = a4;
  int v12 = objc_msgSend( -[NSMutableDictionary objectForKey:](a1, "objectForKey:", @"InUseLevel"),  "unsignedIntValue");
  int v13 = sub_100AE0BD4(a1);
  int v14 = objc_msgSend( -[NSMutableDictionary objectForKey:](a1, "objectForKey:", @"IncidentalUseMode"),  "unsignedIntValue");
  BOOL v15 = sub_100AE2684(a1, (uint64_t)@"SignificantTimeStarted", (uint64_t)@"SignificantTimeStopped", -1.0);
  int v81 = v14;
  uint64_t v16 = sub_10029764C( a3,  v12,  v13,  v14,  (uint64_t)v10,  v15,  (int)objc_msgSend( -[NSMutableDictionary objectForKey:](a1, "objectForKey:", @"BackgroundLocationCapability"),  "BOOLValue"));
  uint64_t v18 = v17;
  int v96 = (int)v10;
  char v19 = objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( a1,  "objectForKeyedSubscript:",  @"PassiveServiceSession"),  "BOOLValue");
  char v20 = objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( a1,  "objectForKeyedSubscript:",  @"WhenInUseServiceSession"),  "BOOLValue");
  unint64_t v94 = a1;
  unsigned int v21 = objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( a1,  "objectForKeyedSubscript:",  @"AlwaysServiceSession"),  "BOOLValue");
  int v22 = objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( v94,  "objectForKeyedSubscript:",  @"SessionWithOldLinking"),  "BOOLValue");
  int v23 = objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( v94,  "objectForKeyedSubscript:",  @"ExplicitServiceSession"),  "BOOLValue");
  unsigned int v90 = a3;
  unsigned int v82 = v12;
  unsigned int v24 = v21;
  int v25 = v94;
  if (sub_100297608(a3, v12, v19, v20, v24, v22, v23))
  {
    v18 |= 0x80000uLL;
    v16 |= 0x80000uLL;
  }

  int v26 = sub_100297644((int)objc_msgSend( -[NSMutableDictionary objectForKeyedSubscript:]( v94,  "objectForKeyedSubscript:",  @"ExplicitServiceSession"),  "BOOLValue"));
  uint64_t v27 = v16 | 0x100000;
  uint64_t v28 = v18 | 0x100000;
  if (!v26)
  {
    uint64_t v28 = v18;
    uint64_t v27 = v16;
  }

  uint64_t v99 = v27;
  uint64_t v100 = v28;
  if (!v96)
  {
    p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    goto LABEL_18;
  }

  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (*(double *)(a5 + 20) <= 0.0)
  {
LABEL_18:
    __int128 v31 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    int v32 = v83;
    unint64_t v38 = v92;
    unint64_t v39 = v90;
    goto LABEL_62;
  }

  id v30 = -[NSMutableDictionary objectForKey:](v94, "objectForKey:", @"InterestZones");
  __int128 v31 = &OBJC_METACLASS___CLPrivacyManager.vtable;
  int v32 = v83;
  if ([v30 count])
  {
    if (*(double *)(a5 + 20) >= 0.0)
    {
      uint64_t v79 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v94);
      double v97 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v30);
      sub_100D2D9A4((uint64_t)&v101);
      __int128 v142 = 0u;
      __int128 v143 = 0u;
      __int128 v140 = 0u;
      __int128 v141 = 0u;
      id v41 = [v30 countByEnumeratingWithState:&v140 objects:buf count:16];
      if (v41)
      {
        id v42 = v41;
        uint64_t v43 = *(void *)v141;
        do
        {
          for (uint64_t i = 0LL; i != v42; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v141 != v43) {
              objc_enumerationMutation(v30);
            }
            uint64_t v45 = *(void *)(*((void *)&v140 + 1) + 8LL * (void)i);
            id v46 = [v30 objectForKeyedSubscript:v45];
            objc_msgSend(objc_msgSend(v46, "objectForKeyedSubscript:", @"Latitude"), "doubleValue");
            double v48 = v47;
            objc_msgSend(objc_msgSend(v46, "objectForKeyedSubscript:", @"Longitude"), "doubleValue");
            double v50 = v49;
            objc_msgSend(objc_msgSend(v46, "objectForKeyedSubscript:", @"Radius"), "doubleValue");
            if (sub_100D2DBDC((double *)&v101, v48, v50, *(double *)(a5 + 4), *(double *)(a5 + 12), 0.0) < v51)
            {
              __int16 v52 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v46);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v52,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"Relevant");
              -[NSMutableDictionary setObject:forKeyedSubscript:](v97, "setObject:forKeyedSubscript:", v52, v45);
            }
          }

          id v42 = [v30 countByEnumeratingWithState:&v140 objects:buf count:16];
        }

        while (v42);
      }

      int v25 = v79;
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v79,  "setObject:forKeyedSubscript:",  v97,  @"InterestZones");
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186E968);
      }
      __int128 v31 = &OBJC_METACLASS___CLPrivacyManager.vtable;
      int v32 = v83;
      uint64_t v53 = qword_101934988;
      if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_37;
      }
      *(_DWORD *)unint64_t v105 = 68289538;
      int v106 = 0;
      __int16 v107 = 2082;
      unint64_t v108 = "";
      __int16 v109 = 2114;
      uint64_t v110 = v94;
      __int16 v111 = 2114;
      __int16 v112 = v79;
      __int16 v34 = "{msg%{public}.0s:#clldu conincidingZones marked as Relevant, provided-dictionary:%{public, locat"
            "ion:escape_only}@, updatedDictionary:%{public, location:escape_only}@}";
      uint64_t v35 = v105;
      __int16 v36 = (os_log_s *)v53;
      uint32_t v37 = 38;
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186E968);
      }
      uint64_t v33 = qword_101934988;
      if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_37;
      }
      *(_DWORD *)uint64_t buf = 68289795;
      int v114 = 0;
      __int16 v115 = 2082;
      unint64_t v116 = "";
      __int16 v117 = 2114;
      unint64_t v118 = (unint64_t)v94;
      __int16 v119 = 1040;
      *(_DWORD *)__int128 v120 = 156;
      *(_WORD *)&v120[4] = 2097;
      *(void *)&v120[6] = a5;
      __int16 v34 = "{msg%{public}.0s:#pla Skip #clldu-MarkZonesAsRelevant. Invalid location, dictionary:%{public, lo"
            "cation:escape_only}@, location:%{private, location:CLClientLocation}.*P}";
      uint64_t v35 = buf;
      __int16 v36 = (os_log_s *)v33;
      uint32_t v37 = 44;
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186E968);
    }
    uint64_t v40 = qword_101934988;
    if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_37;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v114 = 0;
    __int16 v115 = 2082;
    unint64_t v116 = "";
    __int16 v117 = 2114;
    unint64_t v118 = (unint64_t)v94;
    __int16 v34 = "{msg%{public}.0s:#pla Skip #clldu-MarkZonesAsRelevant. No InterestZones, dictionary:%{public, loca"
          "tion:escape_only}@}";
    uint64_t v35 = buf;
    __int16 v36 = (os_log_s *)v40;
    uint32_t v37 = 28;
  }

  _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, v34, v35, v37);
LABEL_37:
  if (v32)
  {
    id v54 = sub_100AE1648(v25);
    uint64_t v80 = v25;
    if ([v54 count])
    {
      id v88 = -[NSMutableDictionary objectForKey:](v25, "objectForKey:", @"BundleId");
      id v87 = -[NSMutableDictionary objectForKey:](v25, "objectForKey:", @"BundlePath");
      unsigned int v55 = objc_msgSend( -[NSMutableDictionary objectForKey:](v25, "objectForKey:", @"InUseLevel"),  "unsignedIntValue");
      __int128 v101 = 0u;
      __int128 v102 = 0u;
      __int128 v103 = 0u;
      __int128 v104 = 0u;
      id v95 = [v54 countByEnumeratingWithState:&v101 objects:&v140 count:16];
      if (v95)
      {
        int v86 = v99;
        int v85 = v100;
        uint64_t v91 = *(void *)v102;
        uint64_t v84 = v55;
        obfloat j = v54;
        unsigned int v93 = v55;
        do
        {
          for (float j = 0LL; j != v95; float j = (char *)j + 1)
          {
            if (*(void *)v102 != v91) {
              objc_enumerationMutation(obj);
            }
            __int128 v57 = *(void **)(*((void *)&v101 + 1) + 8LL * (void)j);
            unsigned int v58 = objc_msgSend( objc_msgSend(v57, "objectForKeyedSubscript:", @"ServiceMaskOperator"),  "intValue");
            unsigned int v59 = objc_msgSend( -[NSArray objectAtIndexedSubscript:]( sub_100AE0E60(v57, 0, 1, 0),  "objectAtIndexedSubscript:",  2),  "intValue");
            unsigned int v60 = sub_100AE0BD4(v57);
            unsigned int v61 = objc_msgSend( objc_msgSend(v57, "objectForKey:", @"IncidentalUseMode"),  "unsignedIntValue");
            uint64_t v62 = sub_10029764C(v59, v55, v60, v61, 1LL, 0, 0);
            int v64 = v62;
            int v65 = v63;
            uint64_t v66 = v62 | v99;
            unsigned int v98 = v58;
            if (v58) {
              uint64_t v66 = v62 & v99;
            }
            uint64_t v99 = v66;
            if (v58) {
              uint64_t v67 = v63 & v100;
            }
            else {
              uint64_t v67 = v63 | v100;
            }
            uint64_t v100 = v67;
            __int128 v68 = (os_log_s *)v31[305];
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
            {
              __int16 v69 = (CLClientManagerAuthorizationContext *)[v88 UTF8String];
              id v70 = [v87 UTF8String];
              id v71 = objc_msgSend(objc_msgSend(v57, "objectForKeyedSubscript:", @"ZoneId"), "UTF8String");
              *(_DWORD *)uint64_t buf = 68292610;
              int v114 = 0;
              __int16 v115 = 2082;
              unint64_t v116 = "";
              __int16 v117 = 2082;
              unint64_t v118 = (unint64_t)v69;
              __int128 v31 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
              __int16 v119 = 2082;
              *(void *)__int128 v120 = v70;
              p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
              *(_WORD *)&v120[8] = 2082;
              *(void *)&_BYTE v120[10] = v71;
              *(_WORD *)&v120[18] = 2050;
              uint64_t v121 = v59;
              *(_WORD *)int v122 = 2050;
              *(void *)&v122[2] = v60;
              *(_WORD *)int v123 = 2050;
              *(void *)&v123[2] = v61;
              __int16 v124 = 2050;
              uint64_t v125 = v84;
              __int16 v126 = 1026;
              int v127 = v64;
              __int16 v128 = 1026;
              int v129 = v65;
              __int16 v130 = 1026;
              int v131 = v86;
              __int16 v132 = 1026;
              int v133 = v85;
              __int16 v134 = 2050;
              uint64_t v135 = v98;
              __int16 v136 = 1026;
              int v137 = v99;
              __int16 v138 = 1026;
              int v139 = v100;
              _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#pla #clldu-UpdateServiceMask using relevant zone, bundleID:%{public, locat ion:escape_only}s, bundlePath:%{public, location:escape_only}s, ZoneId:%{public, location:escape _only}s, zoneTransientRegistration:%{public, location:CLClientRegistrationResult}lld, zoneCC:%{p ublic, location:CLClientCorrectiveCompensation}lld, zoneIncidentalUse:%{public, location:CLClientInc identalUseMode}lld, zoneInUseLevel:%{public, location:CLClientInUseLevel}lld, zoneEffectiveMask: %{public}d, zoneProvisionalMask:%{public}d, ClientOldEffectiveMask:%{public}d, ClientOldProvis ionalMask:%{public}d, zoneServiceMaskOptr:%{public, location:CLClientInterestZoneServiceMaskOperat or}lld, ClientNewEffectiveMask:%{public}d, ClientNewProvisionalMask:%{public}d}",  buf,  0x86u);
            }

            unsigned int v55 = v93;
          }

          id v95 = [obj countByEnumeratingWithState:&v101 objects:&v140 count:16];
        }

        while (v95);
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186E968);
      }
      unint64_t v72 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        int v114 = 0;
        __int16 v115 = 2082;
        unint64_t v116 = "";
        __int16 v117 = 2114;
        unint64_t v118 = (unint64_t)v25;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Skip #clldu-UpdateClientServiceTypeMasks #pla for zones. No Relevant Interest Zones, dictionary:%{public, location:escape_only}@}",  buf,  0x1Cu);
      }
    }

    int v32 = v83;
    int v25 = v80;
  }

  uint64_t v73 = sub_100AE0E60(v25, 0, v32, 0);
  unint64_t v38 = (unint64_t)objc_msgSend( -[NSArray objectAtIndexedSubscript:](v73, "objectAtIndexedSubscript:", 1),  "intValue");
  unint64_t v39 = (unint64_t)objc_msgSend( -[NSArray objectAtIndexedSubscript:](v73, "objectAtIndexedSubscript:", 2),  "intValue");
LABEL_62:
  if ((_DWORD)v38 == 8 || (_DWORD)v38 == 1) {
    BOOL v74 = v81 == 3;
  }
  else {
    BOOL v74 = (_DWORD)v38 == 0;
  }
  LOBYTE(v7_Block_object_dispose(va, 8) = v74;
  __int128 v75 =  -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:]( objc_alloc(&OBJC_CLASS___CLClientManagerAuthorizationContext),  "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:autho rizedForWidgetUpdates:",  v82,  v38,  v39,  v99,  v100,  sub_100297738(v25, v39, v32),  v78);
  __int128 v76 = (os_log_s *)v31[305];
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v114 = 0;
    __int16 v115 = 2082;
    unint64_t v116 = "";
    __int16 v117 = 2114;
    unint64_t v118 = (unint64_t)v75;
    _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#clldu freshAuthContext, AuthContext:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  return v75;
}

BOOL sub_100AE2684(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7 = [a1 objectForKey:a2];
  id v8 = [a1 objectForKey:a3];
  uint64_t v9 = v8;
  if (!v7 || !v8)
  {
LABEL_5:
    BOOL v13 = v9 != 0LL;
    if (v7 && !v9) {
      return 1LL;
    }
    goto LABEL_9;
  }

  [v7 doubleValue];
  double v11 = v10;
  [v9 doubleValue];
  if (v11 > v12)
  {
    uint64_t v9 = 0LL;
    goto LABEL_5;
  }

  BOOL v13 = 1;
LABEL_9:
  if (a4 <= 0.0) {
    return 0LL;
  }
  if (!v13) {
    return 0LL;
  }
  -[NSDate timeIntervalSinceReferenceDate]( +[NSDate date](&OBJC_CLASS___NSDate, "date"),  "timeIntervalSinceReferenceDate");
  double v15 = v14;
  [v9 doubleValue];
  return a4 - vabdd_f64(v16, v15) > 0.0;
}

id sub_100AE2758(void *a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id result = [&off_1018D6F58 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    id v3 = result;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(&off_1018D6F58);
        }
        [a1 removeObjectForKey:*(void *)(*((void *)&v6 + 1) + 8 * (void)v5)];
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id result = [&off_1018D6F58 countByEnumeratingWithState:&v6 objects:v10 count:16];
      id v3 = result;
    }

    while (result);
  }

  return result;
}

void sub_100AE2848(id a1)
{
}

void sub_100AE2870(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100AE289C(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100AE28C8()
{
  if (qword_10199A838 != -1) {
    dispatch_once(&qword_10199A838, &stru_10186E988);
  }
  return qword_1019A1B80;
}

void sub_100AE290C()
{
  uint64_t v0 = sub_1006E27E8();
  sub_100413284(v0, buf);
  char v1 = sub_1002A6F64(*(uint64_t *)buf, "EnableMagnetometerCoexistenceCompensation", (BOOL *)&v47);
  char v2 = v1;
  id v3 = (std::__shared_weak_count *)v53[0];
  if (!v53[0]) {
    goto LABEL_5;
  }
  uint64_t v4 = (unint64_t *)(v53[0] + 8LL);
  do
    unint64_t v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
  {
LABEL_5:
    if ((v1 & 1) != 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if ((v2 & 1) == 0) {
LABEL_6:
  }
    char v47 = 1;
LABEL_7:
  sub_1006E27E8();
  if (sub_1006E2AC4())
  {
    __int128 v6 = (const __CFData *)sub_1005D1D74((int)buf);
    if (!v6)
    {
LABEL_9:
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186EA00);
      }
      __int128 v7 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning CPAS data response was invaild.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10186EA00);
        }
        LOWORD(v4_Block_object_dispose(va, 8) = 0;
        LODWORD(v44) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "#Warning CPAS data response was invaild.",  &v48,  v44);
        uint64_t v40 = (uint8_t *)v39;
        sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v39);
        if (v40 != buf) {
          free(v40);
        }
      }

      char v47 = 0;
      goto LABEL_46;
    }
  }

  else
  {
    sub_100AE3394("kCLConnectionMessageCompassCalibrationData", buf);
    objc_opt_class(&OBJC_CLASS___NSNumber);
    uint64_t v9 = v8;
    objc_opt_class(&OBJC_CLASS___NSData);
    uint64_t v11 = v10;
    *(void *)&double v12 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    double v14 = +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v9, v12, v11, v13, 0LL);
    uint64_t v45 = *(void *)buf;
    id v46 = (std::__shared_weak_count *)v53[0];
    if (v53[0])
    {
      double v15 = (unint64_t *)(v53[0] + 8LL);
      do
        unint64_t v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }

    id v17 = +[CMMotionUtils sendMessage:withReplyClassesSync:]( &OBJC_CLASS___CMMotionUtils,  "sendMessage:withReplyClassesSync:",  &v45,  v14);
    uint64_t v18 = v46;
    if (v46)
    {
      p_uint64_t shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    unsigned int v21 = (const __CFData *)[v17 objectForKeyedSubscript:CMCompassCalibrationData];
    __int128 v6 = v21;
    int v22 = (std::__shared_weak_count *)v53[0];
    if (!v53[0]) {
      goto LABEL_27;
    }
    int v23 = (unint64_t *)(v53[0] + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (!v6) {
        goto LABEL_9;
      }
    }

    else
    {
LABEL_27:
      if (!v21) {
        goto LABEL_9;
      }
    }
  }

  if (v47)
  {
    CFIndex Length = CFDataGetLength(v6);
    BytePtr = CFDataGetBytePtr(v6);
    uint64_t v27 = BytePtr;
    if (!BytePtr)
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186EA00);
      }
      __int128 v31 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL", buf, 2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_46;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186EA00);
      }
      LOWORD(v4_Block_object_dispose(va, 8) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "#Warning CPAS data is NULL",  &v48,  v44);
      unint64_t v38 = (uint8_t *)v41;
      sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v41);
      goto LABEL_84;
    }

    if (Length >= 2)
    {
      int v28 = *BytePtr;
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186EA00);
      }
      int v29 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v28;
        LOWORD(v53[0]) = 2048;
        *(void *)((char *)v53 + 2) = Length;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "cpas version is %u, length is %ld bytes",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10186EA00);
        }
        int v48 = 67109376;
        int v49 = v28;
        __int16 v50 = 2048;
        CFIndex v51 = Length;
        LODWORD(v44) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "cpas version is %u, length is %ld bytes",  &v48,  v44);
        uint64_t v43 = (uint8_t *)v42;
        sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v42);
        if (v43 != buf) {
          free(v43);
        }
      }

      if (v28 == 5 && Length == 76)
      {
        id v30 = operator new(0x70uLL);
        sub_100B044B0(v30, v27, 76LL);
LABEL_67:
        qword_1019A1B80 = (uint64_t)v30;
        return;
      }

      if (v28 == 6 && Length == 76)
      {
        id v30 = operator new(0x70uLL);
        sub_100B38C30(v30, v27, 76LL);
        goto LABEL_67;
      }

      if (v28 == a40clmagnetomet[0] && Length == 76)
      {
        id v30 = operator new(0xC0uLL);
        sub_100BEBFF0(v30, v27, 76LL);
        goto LABEL_67;
      }

      if (v28 == a40clmagnetomet_0[0] && Length == 28)
      {
        id v30 = operator new(0x90uLL);
        sub_100E45178(v30, v27, 76LL);
        goto LABEL_67;
      }

      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186EA00);
      }
      __int16 v36 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v28;
        LOWORD(v53[0]) = 2048;
        *(void *)((char *)v53 + 2) = Length;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "Warning: cpas data was found but did not match any versions. version (%u) length (%ld)",  buf,  0x12u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_46;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10186EA00);
      }
      int v48 = 67109376;
      int v49 = v28;
      __int16 v50 = 2048;
      CFIndex v51 = Length;
      LODWORD(v44) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Warning: cpas data was found but did not match any versions. version (%u) length (%ld)",  &v48,  v44);
      unint64_t v38 = (uint8_t *)v37;
      sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v37);
LABEL_84:
      if (v38 != buf) {
        free(v38);
      }
    }
  }

void sub_100AE32B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void *sub_100AE3320(uint64_t a1)
{
  id result = (void *)sub_1006DC9EC(a1, (uint64_t)"CLMagnetometerCoexistenceNotifier", 2);
  *id result = &off_10186E9B8;
  return result;
}

void sub_100AE3354(void *a1)
{
  char v1 = sub_1006DCAA8(a1);
  operator delete(v1);
}

void sub_100AE3368(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void *sub_100AE3394@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  id result = sub_100AE33EC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100AE33D8(_Unwind_Exception *a1)
{
}

void *sub_100AE33EC(void *a1, char *__s)
{
  a1[2] = 0LL;
  *a1 = off_10182B4B0;
  a1[1] = 0LL;
  sub_100AE344C((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_100AE3438(_Unwind_Exception *a1)
{
}

void sub_100AE344C(int a1, uint64_t a2, char *__s)
{
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100AE3498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100AE3544(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = a2;
  a1[2] = a3;
  *a1 = off_10186EA30;
  a1[3] = objc_alloc_init(&OBJC_CLASS___CLDaemonInUseAssertionAdapter);
  a1[4] = 0LL;
  return a1;
}

void sub_100AE3584(_Unwind_Exception *a1)
{
}

void *sub_100AE359C(uint64_t a1)
{
  *(void *)a1 = off_10186EA30;
  if (_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync"))
  {
    char v2 = (const std::string *)sub_100AE36B8(*(void **)(a1 + 32));
    id v3 = v2;
    if (v2)
    {
      if (sub_1008FF190(v2))
      {
        if ((char)v3->__r_.__value_.__s.__size_ < 0)
        {
          sub_1010DD48C(__p, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
        }

        else
        {
          __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
          int64_t cap = v3->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::stringbuf::string_type __p = v4;
        }

        if (cap >= 0) {
          char v5 = __p;
        }
        else {
          char v5 = (void **)__p[0];
        }
        __int128 v6 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5, __p[0], __p[1], cap);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLClientManager"),  "inUseAssertionInvalidatedDueToWatchConnectivityForClientKey:",  v6);
      }
    }
  }

  [*(id *)(a1 + 32) invalidate];

  [*(id *)(a1 + 24) setValid:0];
  *(void *)(a1 + 24) = 0LL;
  return sub_100213E60((void *)a1);
}

id sub_100AE36B8(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100AE4F14(a1);
  }
  else {
    return 0LL;
  }
}

void sub_100AE3708(uint64_t a1)
{
  char v1 = sub_100AE359C(a1);
  operator delete(v1);
}

void sub_100AE371C(void *a1, CLConnectionMessage **a2)
{
  __int128 v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 35LL)
    {
LABEL_7:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
      __int128 v6 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*a2);
        else {
          uint64_t v8 = *(const char **)v7;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        int v22 = "";
        __int16 v23 = 2082;
        unint64_t v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning unrecognized message, MessageName:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      return;
    }

    __int128 v4 = (void *)*v4;
  }

  else if (v5 != 35)
  {
    goto LABEL_7;
  }

  if (memcmp(v4, "InUseAssertion/kCLConnectionMessage", 0x23uLL)) {
    goto LABEL_7;
  }
  uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: InUseAssertion/kCLConnectionMessage",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10186EA90);
  }
  uint64_t v10 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v20 = 0;
    __int16 v21 = 2082;
    int v22 = "";
    __int16 v23 = 2082;
    unint64_t v24 = "activity";
    __int16 v25 = 2050;
    int v26 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:InUseAssertion/kCLConnectionMessage, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
  }

  uint64_t v11 = *a2;
  double v12 = a2[1];
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)((char *)v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  sub_100AE39C4(a1, v17);
  if (v12)
  {
    double v15 = (unint64_t *)((char *)v12 + 8);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v12 + 16LL))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100AE39A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_100AE39C4(void *a1, CLConnectionMessage **a2)
{
  __int128 v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonInUseAssertion::handleMessageInUseAssertion",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10186EA90);
  }
  int v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v6 = *a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    *(_WORD *)&_BYTE buf[28] = 2050;
    *(void *)&buf[30] = a1;
    *(_WORD *)&buf[38] = 2050;
    uint64_t v66 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLDaemonInUseAssertion::handleMessageInUseAssertion, event:%{public, location:escape_ only}s, this:%{public}p, message:%{public}p}",  buf,  0x30u);
  }

  if (a1[4])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10186EA90);
    }
    uint64_t v7 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
      uint64_t v8 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)unsigned int v59 = 136446210;
      *(void *)&v59[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#warning InUseAssertion already taken by %{public}s",  v59,  0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
      uint64_t v9 = qword_101934978;
      (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 24LL))(v59, a1);
      if (v60[0] >= 0) {
        uint64_t v10 = v59;
      }
      else {
        uint64_t v10 = *(uint8_t **)v59;
      }
      LODWORD(v58.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  0LL,  "#warning InUseAssertion already taken by %{public}s",  &v58,  12);
      double v12 = v11;
      if (SHIBYTE(v60[0]) < 0) {
        operator delete(*(void **)v59);
      }
LABEL_22:
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v12);
LABEL_68:
      if (v12 != buf) {
        free(v12);
      }
      goto LABEL_159;
    }

    goto LABEL_159;
  }

  sub_1010DDBC0(buf, "com.apple.locationd.usage_oracle");
  char v13 = sub_100AE4A5C(a1, (uint64_t *)buf);
  char v14 = v13;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v14 & 1) != 0) {
      goto LABEL_25;
    }
  }

  else if ((v13 & 1) != 0)
  {
LABEL_25:
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    id v16 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
    id v17 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
    id v18 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
    id v19 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageAssertionLevelKey"];
    if (!v16 || !v17 || !v18 || (int v20 = v19) == 0LL)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
      uint64_t v27 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
        int v28 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)unsigned int v59 = 136446210;
        *(void *)&v59[4] = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument",  v59,  0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10186EA90);
        }
        uint64_t v29 = qword_101934978;
        (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 24LL))(v59, a1);
        if (v60[0] >= 0) {
          id v30 = v59;
        }
        else {
          id v30 = *(uint8_t **)v59;
        }
        LODWORD(v58.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  17LL,  "#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument",  &v58,  12);
        double v12 = v31;
        if (SHIBYTE(v60[0]) < 0) {
          operator delete(*(void **)v59);
        }
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v12);
        goto LABEL_68;
      }

      goto LABEL_159;
    }

    memset(v62, 0, 35);
    __int128 v61 = 0u;
    *(_OWORD *)unsigned int v59 = 0u;
    memset(v60, 0, sizeof(v60));
    __int128 v63 = 0u;
    memset(v64, 0, 59);
    if ([v16 length])
    {
      sub_1010DDBC0(&v58, (char *)[v16 UTF8String]);
      sub_100FE2D54(&v58, (uint64_t)buf);
      if (SHIBYTE(v60[0]) < 0) {
        operator delete(*(void **)v59);
      }
      __int128 v21 = *(_OWORD *)buf;
    }

    else
    {
      sub_1010DDBC0(&v58, (char *)[v17 UTF8String]);
      sub_100FE2DDC(&v58, (uint64_t)buf);
      if (SHIBYTE(v60[0]) < 0) {
        operator delete(*(void **)v59);
      }
      __int128 v21 = *(_OWORD *)buf;
    }

    *(_OWORD *)unsigned int v59 = v21;
    v60[0] = *(void *)&buf[16];
    buf[23] = 0;
    buf[0] = 0;
    if (SHIBYTE(v60[3]) < 0) {
      operator delete((void *)v60[1]);
    }
    *(_OWORD *)&v60[1] = *(_OWORD *)&buf[24];
    v60[3] = v66;
    HIBYTE(v66) = 0;
    _BYTE buf[24] = 0;
    if (SHIBYTE(v62[0]) < 0) {
      operator delete((void *)v61);
    }
    __int128 v61 = v67;
    v62[0] = v68;
    HIBYTE(v6_Block_object_dispose(va, 8) = 0;
    LOBYTE(v6memset(&v6[1], 0, 7) = 0;
    if (SHIBYTE(v62[3]) < 0) {
      operator delete((void *)v62[1]);
    }
    *(_OWORD *)&v62[1] = v69;
    v62[3] = v70;
    HIBYTE(v70) = 0;
    LOBYTE(v69) = 0;
    LOWORD(v62[4]) = v71;
    BYTE2(v62[4]) = v72;
    if (SBYTE7(v64[0]) < 0) {
      operator delete((void *)v63);
    }
    __int128 v63 = v73;
    *(void *)&v64[0] = v74;
    HIBYTE(v74) = 0;
    LOBYTE(v73) = 0;
    if (SHIBYTE(v64[1]) < 0) {
      operator delete(*((void **)&v64[0] + 1));
    }
    char v32 = 0;
    *(_OWORD *)((char *)v64 + _Block_object_dispose(va, 8) = v75;
    *((void *)&v64[1] + 1) = v76;
    HIBYTE(v76) = 0;
    LOBYTE(v75) = 0;
    if (SBYTE7(v64[3]) < 0)
    {
      operator delete(*(void **)&v64[2]);
      char v32 = HIBYTE(v76);
    }

    v64[2] = v77;
    *(void *)&v64[3] = v78;
    HIBYTE(v7_Block_object_dispose(va, 8) = 0;
    LOBYTE(v7memset(&v6[1], 0, 7) = 0;
    WORD4(v64[3]) = v79;
    BYTE10(v64[3]) = v80;
    if (v32 < 0) {
      operator delete((void *)v75);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete((void *)v73);
    }
    if (SHIBYTE(v70) < 0) {
      operator delete((void *)v69);
    }
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)v67);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_100FE370C((uint64_t)v59);
    uint64_t v33 = BYTE7(v64[0]);
    if (SBYTE7(v64[0]) < 0) {
      uint64_t v33 = *((void *)&v63 + 1);
    }
    if (v33) {
      goto LABEL_171;
    }
    uint64_t v34 = HIBYTE(v62[0]);
    if (v62[0] < 0) {
      uint64_t v34 = *((void *)&v61 + 1);
    }
    if (v34)
    {
LABEL_171:
      if ([v18 length])
      {
        unsigned int v35 = [v20 intValue];
        if (v35 >= 3)
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10186EA90);
          }
          uint64_t v45 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
          {
            unsigned int v46 = [v20 intValue];
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&_BYTE buf[18] = 1026;
            *(_DWORD *)&buf[20] = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLIUA Received invalid assertion level, assertionLevel:%{public}d}",  buf,  0x18u);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10186EA90);
            }
          }

          char v47 = (os_log_s *)qword_101934978;
          if (os_signpost_enabled((os_log_t)qword_101934978))
          {
            unsigned int v48 = [v20 intValue];
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&_BYTE buf[18] = 1026;
            *(_DWORD *)&buf[20] = v48;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v47,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#CLIUA Received invalid assertion level",  "{msg%{public}.0s:#CLIUA Received invalid assertion level, assertionLevel:%{public}d}",  buf,  0x18u);
          }
        }

        else
        {
          uint64_t v36 = dword_1013489E8[v35];
          id v37 = objc_msgSend(objc_msgSend((id)a1[2], "vendor"), "proxyForService:", @"CLClientManager");
          objc_msgSend(v37, "registerDelegate:inSilo:", a1[3], objc_msgSend((id)a1[2], "silo"));
          sub_100FE3FB4((uint64_t)v59, (uint64_t)buf);
          if (buf[23] >= 0) {
            unint64_t v38 = buf;
          }
          else {
            unint64_t v38 = *(_BYTE **)buf;
          }
          v54[0] = _NSConcreteStackBlock;
          v54[1] = 3221225472LL;
          __n128 v54[2] = sub_100AE4D10;
          _OWORD v54[3] = &unk_10186EA58;
          v54[4] = a1;
          objc_msgSend( v37,  "takeInUseAssertionForClientKey:reason:assertionLevel:withReply:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38),  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  objc_msgSend(v18, "UTF8String")),  v36,  v54);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

LABEL_145:
        if (SBYTE7(v64[3]) < 0) {
          operator delete(*(void **)&v64[2]);
        }
        if (SHIBYTE(v64[1]) < 0) {
          operator delete(*((void **)&v64[0] + 1));
        }
        if (SBYTE7(v64[0]) < 0) {
          operator delete((void *)v63);
        }
        if (SHIBYTE(v62[3]) < 0) {
          operator delete((void *)v62[1]);
        }
        if (SHIBYTE(v62[0]) < 0) {
          operator delete((void *)v61);
        }
        if (SHIBYTE(v60[3]) < 0) {
          operator delete((void *)v60[1]);
        }
        if (SHIBYTE(v60[0]) < 0) {
          operator delete(*(void **)v59);
        }
        goto LABEL_159;
      }

      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
      unint64_t v39 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
        uint64_t v40 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v58.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s",  (uint8_t *)&v58,  0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_145;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
      uint64_t v41 = qword_101934978;
      (*(void (**)(std::string *__return_ptr, void *))(*a1 + 24LL))(&v58, a1);
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        id v42 = &v58;
      }
      else {
        id v42 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      int v56 = 136446210;
      __int128 v57 = v42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v41,  17LL,  "#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s",  &v56,  12);
      uint64_t v44 = v43;
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
      int v49 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
        __int16 v50 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v58.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v50;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_FAULT,  "#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s",  (uint8_t *)&v58,  0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_145;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
      uint64_t v51 = qword_101934978;
      (*(void (**)(std::string *__return_ptr, void *))(*a1 + 24LL))(&v58, a1);
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v52 = &v58;
      }
      else {
        __int16 v52 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      int v56 = 136446210;
      __int128 v57 = v52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v51,  17LL,  "#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s",  &v56,  12);
      uint64_t v44 = v53;
    }

    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v44);
    if (v44 != buf) {
      free(v44);
    }
    goto LABEL_145;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10186EA90);
  }
  int v22 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(buf, a1);
    __int16 v23 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)unsigned int v59 = 136446210;
    *(void *)&v59[4] = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s",  v59,  0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10186EA90);
    }
    uint64_t v24 = qword_101934978;
    (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 24LL))(v59, a1);
    if (v60[0] >= 0) {
      __int16 v25 = v59;
    }
    else {
      __int16 v25 = *(uint8_t **)v59;
    }
    LODWORD(v58.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s",  &v58,  12);
    double v12 = v26;
    if (SHIBYTE(v60[0]) < 0) {
      operator delete(*(void **)v59);
    }
    goto LABEL_22;
  }

  __int16 v79 = *(void *)(a1 + 152);
  if (!v79) {
    __int16 v79 = *(void *)(qword_1019A1CE8 + 152);
  }
  char v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B30870(v79, a2);
  int v81 = (int)v80;
  else {
    unsigned int v82 = 1;
  }
  __int128 v4 = (v4 + v81 + v82 + 2);
  id v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_157;
  }

  uint64_t v40 = *(void *)(v5 + 288);
  if (!v40) {
    uint64_t v40 = *(void *)(qword_1019A1D38 + 288);
  }
  id result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x40,  v40,  a2,  a4);
  uint64_t v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 0x40) == 0)
  {
LABEL_131:
    if ((v36 & 0x80) == 0) {
      goto LABEL_132;
    }
    goto LABEL_151;
  }

  __int128 v69 = *(void *)(a1 + 144);
  if (!v69) {
    __int128 v69 = *(void *)(qword_1019A1D48 + 144);
  }
  uint64_t v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062F7C8(v69, a2);
  __int16 v71 = (int)v70;
  else {
    char v72 = 1;
  }
  __int128 v4 = (v4 + v71 + v72 + 2);
  id v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x100000) == 0)
  {
LABEL_120:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_121;
    }
    goto LABEL_157;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  char v47 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v48 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 136315394;
    uint64_t v192 = "alertCanceledBecauseOfOnCharger";
    __int16 v193 = 2048;
    uint64_t v194 = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    uint64_t v135 = *(void *)(a1 + 8);
    __int16 v187 = 136315394;
    uint64_t v188 = "alertCanceledBecauseOfOnCharger";
    __int16 v189 = 2048;
    uint64_t v190 = v135;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    int v137 = (uint8_t *)v136;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v136);
    if (v137 != buf) {
      free(v137);
    }
  }

  a4[11] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x100000000LL) == 0)
  {
LABEL_21:
    if ((v10 & 0x200000000LL) == 0) {
      goto LABEL_22;
    }
    goto LABEL_157;
  }

  id result = *(float *)(a2 + 196);
  v5 |= 0x400000000000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 28_Block_object_dispose(va, 8) = v6;
  *(float *)(a1 + 196) = result;
  __int128 v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800000000000LL) == 0)
  {
LABEL_72:
    if ((v4 & 0x2000000000000LL) == 0) {
      goto LABEL_73;
    }
    goto LABEL_147;
  }

  PB::TextFormatter::format(this, "maxAudioEnergy", *(float *)(a1 + 236));
  __int128 v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000000LL) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000000LL) == 0) {
      goto LABEL_72;
    }
    goto LABEL_147;
  }

  id result = PB::Writer::write(this, *(float *)(v3 + 208), 0x42u);
  int v5 = *v4;
  __int128 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000LL) == 0)
  {
LABEL_71:
    if ((v5 & 0x4000000000000LL) == 0) {
      goto LABEL_72;
    }
    goto LABEL_147;
  }

  id result = *(float *)(a2 + 148);
  v5 |= 0x400000000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 14_Block_object_dispose(va, 8) = result;
  LOWORD(v_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 324);
  __int128 v4 = *v3;
  if ((*v3 & 0x1000000000LL) == 0)
  {
LABEL_65:
    if ((v4 & 0x10000000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_147;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudioCumulativeRotationThreshold", *(float *)(a1 + 216));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  __int128 v6 = *v5;
  if ((*v5 & 0x10000000000000LL) == 0)
  {
LABEL_64:
    if ((v6 & 0x20000000000000LL) == 0) {
      goto LABEL_65;
    }
    goto LABEL_147;
  }

  id result = PB::Writer::write(this, *(float *)(v3 + 148), 0xFFu);
  LOWORD(vmemset(&v6[1], 0, 7) = *((_WORD *)v4 + 4);
  int v5 = *v4;
  if ((*v4 & 0x1000000000LL) == 0)
  {
LABEL_65:
    if ((v5 & 0x10000000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_147;
  }

  uint64_t v34 = *(_BYTE *)(a2 + 339);
  v6 |= 0x10000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 339) = v34;
  __int128 v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x2000000000LL) == 0)
  {
LABEL_40:
    if ((v7 & 0x200000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_147;
  }

  PB::TextFormatter::format(this, "lastRemoteSampleTimestamp", *(void *)(a1 + 40));
  uint64_t v7 = *v5;
  __int128 v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x20) == 0)
  {
LABEL_44:
    if ((v7 & 0x80000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_147;
  }

  id result = PB::Writer::write(this, *(_BYTE *)(v3 + 339), 0x12Fu);
  int v5 = *v4;
  __int128 v6 = v4[1];
  if ((v6 & 0x2000000000LL) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_147;
  }

  uint64_t v78 = *(_BYTE *)(a2 + 195);
  __int16 v79 = v4 >> 16;
  v4 |= 0x100uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v79;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 195) = v78;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x100000000000000LL) == 0)
  {
LABEL_67:
    if ((v2 & 0x1000000000000000LL) == 0) {
      goto LABEL_68;
    }
    goto LABEL_147;
  }

  PB::TextFormatter::format(this, "maxEnergy2", *(float *)(a1 + 120));
  __int128 v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_66:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_147;
  }

  id result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x4B3u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  __int128 v4 = *(void *)(v3 + 204);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_147;
  }

        *(_DWORD *)(a1 + 32) = v43;
        goto LABEL_158;
      case 4u:
        *(_BYTE *)(a1 + 64) |= 4u;
        unsigned int v46 = *((void *)this + 1);
        char v47 = *((void *)this + 2);
        unsigned int v48 = *(void *)this;
        if (v46 <= 0xFFFFFFFFFFFFFFF5LL && v46 + 10 <= v47)
        {
          int v49 = 0;
          __int16 v50 = 0;
          uint64_t v51 = 0LL;
          do
          {
            __int16 v52 = v46 + 1;
            *((void *)this + 1) = v46 + 1;
            uint64_t v53 = *(_BYTE *)(v48 + v46);
            v51 |= (unint64_t)(v53 & 0x7F) << v49;
            if ((v53 & 0x80) == 0) {
              goto LABEL_148;
            }
            v49 += 7;
            unsigned int v46 = v52;
            double v15 = v50++ > 8;
          }

          while (!v15);
LABEL_106:
          LODWORD(v51) = 0;
          goto LABEL_148;
        }

        double v97 = 0;
        unsigned int v98 = 0;
        uint64_t v51 = 0LL;
        if (v47 <= v46) {
          char v47 = *((void *)this + 1);
        }
        while (2)
        {
          if (v47 == v46)
          {
            LODWORD(v51) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v99 = v46 + 1;
            uint64_t v100 = *(_BYTE *)(v48 + v46);
            *((void *)this + 1) = v99;
            v51 |= (unint64_t)(v100 & 0x7F) << v97;
            if (v100 < 0)
            {
              v97 += 7;
              unsigned int v46 = v99;
              double v15 = v98++ > 8;
              if (v15) {
                goto LABEL_106;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v51) = 0;
            }
          }

          break;
        }

        if (PB::Reader::placeMark(this, __p, v74, v75)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v73 + 16LL))(v73, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, __p);
LABEL_304:
          uint64_t v2 = *((void *)this + 1);
          id v3 = *((void *)this + 2);
          __int128 v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 0x1Au:
        *(_DWORD *)(a1 + 152) |= 0x10000u;
        __int128 v142 = *((void *)this + 1);
        __int128 v143 = *((void *)this + 2);
        float64_t v144 = *(void *)this;
        if (v142 <= 0xFFFFFFFFFFFFFFF5LL && v142 + 10 <= v143)
        {
          uint64_t v145 = 0;
          float64_t v146 = 0;
          __int16 v147 = 0LL;
          do
          {
            float64_t v148 = v142 + 1;
            *((void *)this + 1) = v142 + 1;
            __int16 v149 = *(_BYTE *)(v144 + v142);
            v147 |= (unint64_t)(v149 & 0x7F) << v145;
            if ((v149 & 0x80) == 0) {
              goto LABEL_303;
            }
            v145 += 7;
            __int128 v142 = v148;
            double v15 = v146++ > 8;
          }

          while (!v15);
LABEL_249:
          LODWORD(v14memset(&v6[1], 0, 7) = 0;
          goto LABEL_303;
        }

        uint64_t v198 = 0;
        __int16 v199 = 0;
        __int16 v147 = 0LL;
        if (v143 <= v142) {
          __int128 v143 = *((void *)this + 1);
        }
        while (2)
        {
          if (v143 == v142)
          {
            LODWORD(v14memset(&v6[1], 0, 7) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v200 = v142 + 1;
            __int16 v201 = *(_BYTE *)(v144 + v142);
            *((void *)this + 1) = v200;
            v147 |= (unint64_t)(v201 & 0x7F) << v198;
            if (v201 < 0)
            {
              v198 += 7;
              __int128 v142 = v200;
              double v15 = v199++ > 8;
              if (v15) {
                goto LABEL_249;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v14memset(&v6[1], 0, 7) = 0;
            }
          }

          break;
        }

void sub_100AE4980( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
}

uint64_t sub_100AE4A5C(void *a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10186EA90);
  }
  int v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(__p, a1);
    __int128 v6 = *(_BYTE **)__p;
    uint64_t v7 = "not entitled";
    if (v22 >= 0) {
      __int128 v6 = __p;
    }
    if ((_DWORD)isEntitled) {
      uint64_t v7 = "entitled";
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    __int16 v25 = v6;
    __int16 v26 = 2080;
    uint64_t v27 = v7;
    __int16 v28 = 2080;
    uint64_t v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v22) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10186EA90);
    }
    uint64_t v10 = qword_101934978;
    (*(void (**)(void **__return_ptr, void *))(*a1 + 24LL))(v17, a1);
    uint64_t v11 = (void **)v17[0];
    double v12 = "not entitled";
    if (v18 >= 0) {
      uint64_t v11 = v17;
    }
    if ((_DWORD)isEntitled) {
      double v12 = "entitled";
    }
    else {
      char v13 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::stringbuf::string_type __p = 136315650;
    *(void *)&__p[4] = v11;
    __int16 v20 = 2080;
    __int128 v21 = v12;
    __int16 v22 = 2080;
    __int16 v23 = v13;
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, v10, 2LL, "%s is %s for %s", __p, 32, v16);
    double v15 = v14;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDaemonInUseAssertion::isEntitled(const std::string &)", "%s\n", v15);
  }

  return isEntitled;
}

id sub_100AE4D10(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32)) {
    sub_10125E334();
  }
  id result = a2;
  *(void *)(v2 + 32) = result;
  return result;
}

id sub_100AE4D40(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  id v3 = (char *)sub_100AE36B8(*(void **)(a1 + 32));
  if (v3)
  {
    __int128 v4 = v3;
    if (v3[23] < 0)
    {
      sub_1010DD48C(__p, *(void **)v3, *((void *)v3 + 1));
    }

    else
    {
      __int128 v5 = *(_OWORD *)v3;
      uint64_t v11 = *((void *)v3 + 2);
      *(_OWORD *)std::stringbuf::string_type __p = v5;
    }

    if (v11 >= 0) {
      __int128 v6 = __p;
    }
    else {
      __int128 v6 = (void **)__p[0];
    }
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6),  @"ClientKeyPath");
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    CLConnection::getAuditToken(*(CLConnection **)(a1 + 8));
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  -[CLClientKeyPath clientKey](sub_10055FF18(&v9), "clientKey"),  @"NaturalConnectedIdentity");
    if (v4[47] < 0)
    {
      sub_1010DD48C(__p, *((void **)v4 + 3), *((void *)v4 + 4));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(v4 + 24);
      uint64_t v11 = *((void *)v4 + 5);
    }

    if (v11 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7),  @"Reason");
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 12)),  @"AssertionLevel");
  }

  return v2;
}

void sub_100AE4EC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE4EE8(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

id sub_100AE4F14(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186EAB0);
    }
    uint64_t v3 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001013489C5LL & 0x7FFFFFFFFFFFFFFFLL;
    __int128 v4 = (os_log_s *)v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10186EAB0);
    }
    uint64_t v7 = qword_101934478;
    if (!os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT)) {
      return 0LL;
    }
    int v8 = 134218498;
    id v9 = v2;
    __int16 v10 = 2048;
    uint64_t v11 = 0LL;
    __int16 v12 = 2080;
    unint64_t v13 = 0x80000001013489C5LL & 0x7FFFFFFFFFFFFFFFLL;
    __int128 v4 = (os_log_s *)v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }

  _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has cha nged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  (uint8_t *)&v8,  0x20u);
  return 0LL;
}

void sub_100AE50E8(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100AE5114(uint64_t result, uint64_t *a2, uint64_t a3)
{
  *(void *)id result = off_10186EAE0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = v4;
  *(void *)(result + 4_Block_object_dispose(va, 8) = v3;
  if (v3)
  {
    os_log_type_t v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(_BYTE *)(result + 56) = 0;
  return result;
}

void sub_100AE5150(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  a1[3] = *a2;
  a1[1] = v2;
  uint64_t v3 = a2[1];
  a1[2] = v3;
  if (v2 == v3)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186EB08);
    }
    __int16 v10 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CLCyclingFTPCacheIterator, no cycling sessions found from db query",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10186EB08);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "CLCyclingFTPCacheIterator, no cycling sessions found from db query",  v13,  2);
      __int16 v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCyclingFTPCacheIterator::generateSessionHistoryIterators(std::vector<CLCyclingFTPHistory::Session> &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  else
  {
    uint64_t v4 = (double *)a1[5];
    if (*(double *)(v2 + 24) < *v4)
    {
      uint64_t v5 = v2 + 88;
      do
      {
        uint64_t v6 = v5 + 88;
        if (v5 == v3) {
          break;
        }
        double v7 = *(double *)(v5 + 24);
        v5 += 88LL;
      }

      while (v7 < *v4);
      uint64_t v2 = v6 - 88;
      a1[1] = v6 - 88;
    }

    double v8 = v4[1];
    if (*(double *)(v3 - 72) > v8)
    {
      do
      {
        if (v3 == v2) {
          break;
        }
        a1[2] = v3 - 88;
        double v9 = *(double *)(v3 - 160);
        v3 -= 88LL;
      }

      while (v9 > v8);
    }
  }

void sub_100AE5360(uint64_t a1)
{
  if (sub_100395C04(*(void *)(a1 + 32)) && sub_100396108(*(void *)(a1 + 32)))
  {
    uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 40) + 40LL);
    if (v2)
    {
      sub_100AE5150((void *)a1, v2);
    }

    else
    {
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10186EB08);
      }
      uint64_t v3 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "CLCyclingFTPCacheIterator, no CLCyclingFTPHistory record returned from db query",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_10186EB08);
        }
        v6[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "CLCyclingFTPCacheIterator, no CLCyclingFTPHistory record returned from db query",  v6,  2);
        uint64_t v5 = (uint8_t *)v4;
        sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLCyclingFTPCacheIterator::cache()", "%s\n", v4);
        if (v5 != buf) {
          free(v5);
        }
      }
    }
  }

  *(_BYTE *)(a1 + 56) = 1;
}

void sub_100AE5528(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    sub_100396600(v2, a1);
    *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a1 + 16);
  }

  __int128 v6 = 0uLL;
  sub_10005F550(a1 + 40, &v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v6 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  *(_BYTE *)(a1 + 56) = 0;
}

void *sub_100AE55B0(void *a1)
{
  *a1 = off_10186EAE0;
  sub_10000AE14((uint64_t)(a1 + 5));
  return a1;
}

void sub_100AE55E0(void *a1)
{
  *a1 = off_10186EAE0;
  sub_10000AE14((uint64_t)(a1 + 5));
  operator delete(a1);
}

void sub_100AE5610(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100AE56E0(id a1)
{
  qword_10199A870 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLStreamingAwareLocationProviderSilo");
}

uint64_t sub_100AE5794(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100AE5E64;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199A888 != -1) {
    dispatch_once(&qword_10199A888, block);
  }
  return qword_10199A880;
}

void sub_100AE5928(uint64_t a1, void *a2, double a3)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  __int128 v6 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    id v16 = "";
    __int16 v17 = 2082;
    id v18 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    __int16 v19 = 2050;
    double v20 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Accuracy enablement assertion taken, client:%{public, location:escape_only}s, accur acy:%{public}f}",  buf,  0x26u);
  }

  for (uint64_t i = *(void **)(a1 + 248); i; uint64_t i = (void *)*i)
  {
    unint64_t v8 = i[4];
    if (v8 <= (unint64_t)a2)
    {
      ++i;
    }
  }

  id v9 = a2;
LABEL_11:
  unint64_t v13 = a2;
  *(void *)uint64_t buf = &v13;
  BOOL v10 = sub_100AE8184(a1);
  uint64_t v11 = *(_BYTE **)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100ACAB60(v11, v10, Current);
}

void sub_100AE5AD0(void *a1, void *a2)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  uint64_t v4 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v15 = 68289282LL;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2082;
    id v19 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Accuracy enablement assertion to be released, client:%{public, location:escape_only}s}",  (uint8_t *)&v15,  0x1Cu);
  }

  unint64_t v5 = (void *)a1[31];
  if (!v5)
  {
LABEL_10:
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    double v7 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
      uint64_t v9 = a1[32];
      unint64_t v15 = 68289538LL;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      id v19 = v8;
      __int16 v20 = 2050;
      uint64_t v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Accuracy enablement assertion not released, client:%{public, location:escape_only}s , fAccuracyAssertions size:%{public}ld}",  (uint8_t *)&v15,  0x26u);
    }

    return;
  }

  while (1)
  {
    unint64_t v6 = v5[4];
LABEL_9:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_10;
    }
  }

  if (v6 < (unint64_t)a2)
  {
    ++v5;
    goto LABEL_9;
  }

  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  BOOL v10 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    unint64_t v15 = 68289282LL;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2082;
    id v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Accuracy enablement assertion released, client:%{public, location:escape_only}s}",  (uint8_t *)&v15,  0x1Cu);
  }

  unint64_t v15 = (unint64_t)a2;
  sub_1004C40E4((uint64_t)(a1 + 30), &v15);

  BOOL v12 = sub_100AE8184((uint64_t)a1);
  unint64_t v13 = (_BYTE *)a1[16];
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100ACAB60(v13, v12, Current);
}

void sub_100AE5DA0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLStreamingAwareLocationProvider");
  sub_10047D890((uint64_t)v8, (uint64_t *)__p, a3, a1, a2);
  *id v8 = &off_10186EB58;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100AE5E38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100AE5E64(uint64_t a1)
{
  uint64_t v2 = operator new(0x108uLL);
  uint64_t result = sub_100AE5EB0((uint64_t)v2, *(void **)(a1 + 32));
  qword_10199A880 = (uint64_t)v2;
  return result;
}

void sub_100AE5E9C(_Unwind_Exception *a1)
{
}

uint64_t sub_100AE5EB0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100479C24(a1, "Streaming aware location provider", a2);
  *(void *)(v3 + 120) = off_10186ECF0;
  uint64_t v4 = v3 + 120;
  *(void *)uint64_t v3 = off_10186EB80;
  *(void *)(v3 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 136) =  objc_msgSend( objc_msgSend(*(id *)(v3 + 32), "vendor"),  "proxyForService:forClient:",  @"CLRemoteMotionAlarm",  @"CLStreamingAwareLocationProvider");
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = xmmword_101348A68;
  buf.__r_.__value_.__l.__cap_ = 2LL;
  sub_1004EF2D4(a1 + 144, (int *)&buf, 3LL);
  sub_100AE837C((uint64_t *)(a1 + 168), a1 + 144);
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v5 = a1 + 192;
  *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 256) = 0LL;
  *(_OWORD *)(a1 + memset(&v8[8], 0, 208) = 0u;
  *(void *)(a1 + 224) = 0LL;
  sub_1002F0B04(&buf);
  char v6 = sub_1002A6F64((uint64_t)buf.__r_.__value_.__l.__data_, "ForceStreamingBehaviorNoLocalGPS", &v32);
  if (v32) {
    char v7 = v6;
  }
  else {
    char v7 = 0;
  }
  if ((v7 & 1) != 0)
  {
    int v8 = 1;
  }

  else
  {
    sub_1004F2598();
    int v8 = sub_1004F5330();
  }

  *(_BYTE *)(a1 + 232) = v8;
  uint64_t size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    char v10 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }

    int v8 = *(unsigned __int8 *)(a1 + 232);
  }

  if (v8)
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    BOOL v12 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      buf.__r_.__value_.__r.__words[0] = 68289026LL;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:this platform will prefer streaming for GPS locations}",  (uint8_t *)&buf,  0x12u);
    }
  }

  sub_1004F2598();
  if ((sub_1001B9A1C() & 1) != 0 || *(_BYTE *)(a1 + 232))
  {
    sub_1004F2598();
    if ((sub_1004F64FC() & 8) != 0 && !*(_BYTE *)(a1 + 232))
    {
      unint64_t v13 = operator new(0xE0uLL);
      v14.n128_f64[0] = sub_1002270D0((uint64_t)v13);
    }

    else
    {
      unint64_t v13 = operator new(0x68uLL);
      sub_100364264((uint64_t)v13);
    }
  }

  else
  {
    unint64_t v13 = operator new(0x60uLL);
    sub_100290BF0((uint64_t)v13);
  }

  uint64_t v15 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v13;
  if (v15) {
    (*(void (**)(uint64_t, __n128))(*(void *)v15 + 8LL))(v15, v14);
  }
  *(void *)(*(void *)(a1 + 128) + 32LL) = v4;
  sub_101037234((uint64_t)sub_100AE64A8, a1, *(void **)(a1 + 32), &buf);
  std::string::size_type v16 = buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v17 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    std::string::size_type v18 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
    if (v18) {
      (*(void (**)(std::string::size_type))(*(void *)v18 + 8LL))(v18);
    }
  }

  sub_10043AC3C((uint64_t)sub_100AE6678, a1, *(void **)(a1 + 32), &buf);
  std::string::size_type v19 = buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v20 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    std::string::size_type v21 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
    if (v21) {
      (*(void (**)(std::string::size_type))(*(void *)v21 + 8LL))(v21);
    }
  }

  sub_10024560C((uint64_t)sub_100AE6850, a1, *(void **)(a1 + 32), &buf);
  std::string::size_type v22 = buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v23 = *(void *)(a1 + 208);
  *(void *)(a1 + memset(&v8[8], 0, 208) = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    std::string::size_type v24 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
  }

  sub_100468458((uint64_t)sub_100AE6A28, a1, *(void **)(a1 + 32), &buf);
  std::string::size_type v25 = buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v26 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v25;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
    std::string::size_type v27 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
    if (v27) {
      (*(void (**)(std::string::size_type))(*(void *)v27 + 8LL))(v27);
    }
  }

  [*(id *)(*(void *)(a1 + 216) + 16) register:*(void *)(*(void *)(a1 + 216) + 8) forNotification:1 registrationInfo:0];
  sub_100583844((uint64_t)sub_100AE6C00, a1, *(void **)(a1 + 32), &buf);
  std::string::size_type v28 = buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = *(void *)v5;
  *(void *)uint64_t v5 = v28;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    std::string::size_type v30 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0LL;
    if (v30) {
      (*(void (**)(std::string::size_type))(*(void *)v30 + 8LL))(v30);
    }
  }

  memset(&buf, 0, sizeof(buf));
  std::string::operator=(&buf, (const std::string *)&qword_10199A858);
  [*(id *)(*(void *)v5 + 16) register:*(void *)(*(void *)v5 + 8) forNotification:0 registrationInfo:sub_10120E548((uint64_t)&buf)];
  [*(id *)(*(void *)v5 + 16) register:*(void *)(*(void *)v5 + 8) forNotification:4 registrationInfo:0];
  return a1;
}

void sub_100AE635C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::string::size_type v22 = v20;
  operator delete(v22);
  sub_100008390(v19, *(void **)(v16 + 248));
  uint64_t v24 = *(void *)(v16 + 224);
  *(void *)(v16 + 224) = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  uint64_t v25 = *(void *)(v16 + 216);
  *(void *)(v16 + 216) = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  uint64_t v26 = *(void *)(v16 + 208);
  *(void *)(v16 + memset(&v8[8], 0, 208) = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  uint64_t v27 = *(void *)(v16 + 200);
  *(void *)(v16 + 200) = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  uint64_t v28 = *v21;
  uint64_t *v21 = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  sub_100008390(v18, *(void **)(v16 + 176));
  sub_100008390(v17, *(void **)(v16 + 152));
  uint64_t v29 = *(void *)(v16 + 128);
  *(void *)(v16 + 12_Block_object_dispose(va, 8) = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  sub_10047A1C0(v16);
  _Unwind_Resume(a1);
}

void sub_100AE64A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186EDF0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStreamingAwareLocationProvider::onStepCountNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186EDF0);
    }
    char v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      BOOL v12 = "";
      __int16 v13 = 2082;
      __n128 v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStreamingAwareLocationProvider::onStepCountNotification, event:%{public, location :escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_100AE7FF8(a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100AE6658( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE6678(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186EDF0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStreamingAwareLocationProvider::onLocalLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186EDF0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStreamingAwareLocationProvider::onLocalLocationNotification, event:%{public, loca tion:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100AE7CBC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100AE6830( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE6850(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186EDF0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStreamingAwareLocationProvider::onStreamedLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186EDF0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStreamingAwareLocationProvider::onStreamedLocationNotification, event:%{public, l ocation:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100AE7DD0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100AE6A08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE6A28(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186EDF0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStreamingAwareLocationProvider::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186EDF0);
    }
    char v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStreamingAwareLocationProvider::onMotionStateMediatorNotification, event:%{public , location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_100AE7EE4(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100AE6BE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE6C00(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10186EDF0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLStreamingAwareLocationProvider::onManagerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10186EDF0);
    }
    char v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLStreamingAwareLocationProvider::onManagerNotification, event:%{public, location:e scape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_100AE80F0(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100AE6DB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE6DD0(uint64_t a1)
{
  *(void *)a1 = off_10186EB80;
  *(void *)(a1 + 120) = off_10186ECF0;

  uint64_t v2 = *(void **)(a1 + 240);
  *(void *)(a1 + 136) = 0LL;
  if (v2 != (void *)(a1 + 248))
  {
    do
    {

      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }

        while (!v5);
      }

      uint64_t v2 = v4;
    }

    while (v4 != (void *)(a1 + 248));
  }

  sub_100008390(a1 + 240, *(void **)(a1 + 248));
  uint64_t v6 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 208);
  *(void *)(a1 + memset(&v8[8], 0, 208) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  sub_100008390(a1 + 168, *(void **)(a1 + 176));
  sub_100008390(a1 + 144, *(void **)(a1 + 152));
  uint64_t v11 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  return sub_10047A1C0(a1);
}

uint64_t sub_100AE6F2C(uint64_t a1)
{
  return sub_100AE6DD0(a1 - 120);
}

void sub_100AE6F34(uint64_t a1)
{
  char v1 = (void *)sub_100AE6DD0(a1);
  operator delete(v1);
}

void sub_100AE6F48(uint64_t a1)
{
  char v1 = (void *)sub_100AE6DD0(a1 - 120);
  operator delete(v1);
}

BOOL sub_100AE6F60(uint64_t a1, int a2, int *a3, __int128 *a4)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  uint64_t v8 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    int v9 = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, v21);
    uint64_t buf = 68289282LL;
    __int16 v29 = 2082;
    std::string::size_type v30 = "";
    __int16 v31 = 1026;
    int v32 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:cached location, found:%{public}d}",  (uint8_t *)&buf,  0x18u);
  }

  BOOL v10 = sub_10023FEB8(a1, a2, a3, a4);

  uint64_t v11 = v26;
  if (v26)
  {
    p_uint64_t shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (v25 < 0) {
    operator delete(__p);
  }
  __int16 v14 = v23;
  if (v23)
  {
    __int16 v15 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  __int16 v17 = v22;
  if (v22)
  {
    uint64_t v18 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return v10;
}

void sub_100AE715C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100AE7184(void *a1, unsigned int *a2)
{
  int v4 = *a2;
  if (*a2 >= 3)
  {
    if (v4 != 9)
    {
      [*(id *)(a1[25] + 16) register:*(void *)(a1[25] + 8) forNotification:*a2 registrationInfo:0];
      uint64_t v7 = 0LL;
      uint64_t v8 = &dword_101348B84;
      while (dword_101348B78[v7] != *a2)
      {
        if (++v7 == 3) {
          goto LABEL_9;
        }
      }

      uint64_t v8 = &dword_101348B78[v7];
LABEL_9:
    }
  }

  else
  {
    BOOL v5 = (uint64_t **)a1[16];
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100ACB4CC(v5, v4, 1, Current);
  }

  return 1LL;
}

uint64_t sub_100AE7250(void *a1, unsigned int *a2)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  int v4 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = *a2;
    v12[0] = 68289282;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 1026;
    unsigned int v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Stream clearing cached notification, notification:%{public}d}",  (uint8_t *)v12,  0x18u);
  }

  (*(void (**)(void *, unsigned int *))(*a1 + 120LL))(a1, a2);
  int v6 = *a2;
  if (*a2 >= 3)
  {
    if (v6 != 9)
    {
      [*(id *)(a1[25] + 16) unregister:*(void *)(a1[25] + 8) forNotification:*a2];
      uint64_t v9 = 0LL;
      BOOL v10 = &dword_101348B84;
      while (dword_101348B78[v9] != *a2)
      {
        if (++v9 == 3) {
          goto LABEL_13;
        }
      }

      BOOL v10 = &dword_101348B78[v9];
LABEL_13:
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)a1[16];
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100ACB4CC(v7, v6, 0, Current);
  }

  return 1LL;
}

uint64_t sub_100AE73F4(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v19 = a2;
  if (*a3)
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    uint64_t v6 = qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
    {
      *(void *)uint64_t buf = &v19;
      id v7 = objc_msgSend( objc_msgSend( sub_10023311C((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[8],  "description"),  "UTF8String");
      uint64_t v8 = *a3;
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      std::string::size_type v22 = "";
      __int16 v23 = 2082;
      id v24 = v7;
      __int16 v25 = 2050;
      uint64_t v26 = v8;
      uint64_t v9 = "{msg%{public}.0s:notifying, client:%{public, location:escape_only}s, notification:%{public, l"
           "ocation:CLLocationProvider_Type::Notification}lld}";
      BOOL v10 = (os_log_s *)v6;
      uint32_t v11 = 38;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    }
  }

  else
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    uint64_t v13 = qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
    {
      *(void *)uint64_t buf = &v19;
      id v14 = objc_msgSend( objc_msgSend( sub_10023311C((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[8],  "description"),  "UTF8String");
      uint64_t v15 = *(void *)(a4 + 20);
      uint64_t v16 = *(unsigned int *)(a4 + 96);
      uint64_t v17 = *(unsigned int *)(a4 + 512);
      *(_DWORD *)uint64_t buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      std::string::size_type v22 = "";
      __int16 v23 = 2082;
      id v24 = v14;
      __int16 v25 = 2050;
      uint64_t v26 = v15;
      __int16 v27 = 2050;
      uint64_t v28 = v16;
      __int16 v29 = 2050;
      uint64_t v30 = v17;
      uint64_t v9 = "{msg%{public}.0s:notifying location, client:%{public, location:escape_only}s, accuracy:%{pu"
           "blic}f, type:%{public, location:CLLocationType}lld, origin device:%{public, location:CLClientLocati"
           "onOriginDevice}lld}";
      BOOL v10 = (os_log_s *)v13;
      uint32_t v11 = 58;
      goto LABEL_10;
    }
  }

  return 1LL;
}

uint64_t sub_100AE7614(uint64_t a1, void *a2)
{
  *(void *)a1 = off_10186ED38;
  id v3 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 56) = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100AE76D0;
  v5[3] = &unk_10181D3D0;
  _DWORD v5[4] = a1;
  [v3 setHandler:v5];
  return a1;
}

void sub_100AE7694(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)(v1 + 40);
  if (v3 == (void *)(v1 + 16))
  {
    uint64_t v4 = 4LL;
    id v3 = (void *)(v1 + 16);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE76D0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(_BYTE *)(v1 + 56) = 0;
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = 0x7FEFFFFFFFFFFFFFLL;
  if (*(void *)(v1 + 40))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v2 = *(void *)(v1 + 40);
    if (!v2) {
      sub_100008BDC();
    }
    return (*(uint64_t (**)(uint64_t, CFAbsoluteTime *))(*(void *)v2 + 48LL))(v2, &Current);
  }

  return result;
}

uint64_t sub_100AE772C(uint64_t a1)
{
  *(void *)a1 = off_10186ED38;
  [*(id *)(a1 + 8) invalidate];

  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == (void *)(a1 + 16))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 16);
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void sub_100AE77A0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100AE772C(a1);
  operator delete(v1);
}

id sub_100AE77B4(id result, double a2)
{
  *((double *)result + 6) = a2;
  if (*((_BYTE *)result + 56)) {
    return objc_msgSend(*((id *)result + 1), "setNextFireTime:");
  }
  return result;
}

void *sub_100AE77CC(uint64_t a1, uint64_t a2)
{
  return sub_100021B50((void *)(a1 + 16), a2);
}

id sub_100AE77E8(uint64_t a1)
{
  *(_BYTE *)(a1 + 56) = 1;
  return [*(id *)(a1 + 8) setNextFireTime:*(double *)(a1 + 48)];
}

id sub_100AE77FC(uint64_t a1)
{
  *(_BYTE *)(a1 + 56) = 0;
  return [*(id *)(a1 + 8) setNextFireDelay:1.79769313e308];
}

uint64_t **sub_100AE7810(uint64_t a1, int a2, unsigned int a3, int a4, __int128 *a5)
{
  if (a2 == 1)
  {
    __int128 v7 = a5[1];
    v8[0] = *a5;
    v8[1] = v7;
    return sub_100AE7884(a1, a3, a4, v8, (uint64_t *)(a1 + 208), (uint64_t **)(a1 + 168));
  }

  else
  {
    if (a2) {
      sub_10125E66C();
    }
    __int128 v5 = a5[1];
    v9[0] = *a5;
    v9[1] = v5;
    return sub_100AE7884(a1, a3, a4, v9, (uint64_t *)(a1 + 200), (uint64_t **)(a1 + 144));
  }

uint64_t **sub_100AE7884(uint64_t a1, unsigned int a2, int a3, __int128 *a4, uint64_t *a5, uint64_t **a6)
{
  unsigned int v20 = a2;
  *(void *)&__int128 v18 = &v20;
  int v11 = *((unsigned __int8 *)sub_1004EF3D4(a6, (int *)&v20, (uint64_t)&unk_1012CF090, (_DWORD **)&v18) + 32);
  *(void *)&__int128 v18 = &v20;
  *((_BYTE *)sub_1004EF3D4(a6, (int *)&v20, (uint64_t)&unk_1012CF090, (_DWORD **)&v18) + 32) = a3;
  if (a3)
  {
    __int128 v12 = a4[1];
    __int128 v18 = *a4;
    __int128 v19 = v12;
    DWORD1(v19) = sub_10047D7E8(a1, v20);
    uint64_t v13 = *a5;
    if (v11)
    {
      sub_10047DC04(*a5, &v20, &v18);
    }

    else
    {
      uint64_t v16 = sub_100419014(&v18);
      [*(id *)(v13 + 16) register:*(void *)(v13 + 8) forNotification:v20 registrationInfo:v16];
    }

    return (uint64_t **)[*(id *)(*a5 + 16) register:*(void *)(*a5 + 8) forNotification:9 registrationInfo:0];
  }

  else
  {
    [*(id *)(*a5 + 16) unregister:*(void *)(*a5 + 8) forNotification:v20];
    uint64_t v14 = 0LL;
    while (1)
    {
      int v17 = dword_101348B84[v14];
      *(void *)&__int128 v18 = &v17;
      uint64_t result = sub_1004EF3D4(a6, &v17, (uint64_t)&unk_1012CF090, (_DWORD **)&v18);
      if (*((_BYTE *)result + 32)) {
        break;
      }
      if (++v14 == 3) {
        return (uint64_t **)[*(id *)(*a5 + 16) unregister:*(void *)(*a5 + 8) forNotification:9];
      }
    }
  }

  return result;
}

uint64_t **sub_100AE79F8(uint64_t a1, int a2, unsigned int a3, int a4, __int128 *a5)
{
  return sub_100AE7810(a1 - 120, a2, a3, a4, a5);
}

uint64_t sub_100AE7A00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 39) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a2 < 6) {
    unsigned int v3 = 0;
  }
  unsigned int v5 = v3;
  return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v5,  a3,  1LL,  0xFFFFFFFFLL,  0LL);
}

uint64_t sub_100AE7A48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 39) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a2 < 6) {
    unsigned int v3 = 0;
  }
  unsigned int v5 = v3;
  return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 - 120)
                                                                                               + 152LL))( a1 - 120,  &v5,  a3,  1LL,  0xFFFFFFFFLL,  0LL);
}

id sub_100AE7A90(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (a2) {
    return _[v2 registerClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
  else {
    return _[v2 unregisterClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
}

id sub_100AE7AAC(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (a2) {
    return _[v2 registerClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
  else {
    return _[v2 unregisterClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
}

uint64_t sub_100AE7AC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  uint64_t v4 = operator new(0x40uLL);
  uint64_t result = sub_100AE7614((uint64_t)v4, v3);
  *a2 = v4;
  return result;
}

void sub_100AE7B18(_Unwind_Exception *a1)
{
}

uint64_t sub_100AE7B2C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100AE7AC8(a1 - 120, a2);
}

id sub_100AE7B34(uint64_t a1, int a2)
{
  if (a2)
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    id v3 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Turning on step count notifications}",  (uint8_t *)&v6,  0x12u);
    }

    return [*(id *)(*(void *)(a1 + 224) + 16) register:*(void *)(*(void *)(a1 + 224) + 8) forNotification:1 registrationInfo:0];
  }

  else
  {
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    unsigned int v5 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Turning off step count notifications}",  (uint8_t *)&v6,  0x12u);
    }

    return [*(id *)(*(void *)(a1 + 224) + 16) unregister:*(void *)(*(void *)(a1 + 224) + 8) forNotification:1];
  }

id sub_100AE7CB4(uint64_t a1, int a2)
{
  return sub_100AE7B34(a1 - 120, a2);
}

uint64_t sub_100AE7CBC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  int v7 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = (int)*a3;
    v12[0] = 68289282;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received local notification, notification:%{public, location:CLLocationProvider_Type: :Notification}lld}",  (uint8_t *)v12,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100ACAD48(v9, 0, a3, a4, Current);
}

uint64_t sub_100AE7DD0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  int v7 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = (int)*a3;
    v12[0] = 68289282;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received streamed notification, notification:%{public, location:CLLocationProvider_Ty pe::Notification}lld}",  (uint8_t *)v12,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100ACAD48(v9, 1u, a3, a4, Current);
}

uint64_t sub_100AE7EE4(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 1)
  {
    uint64_t v3 = result;
    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    uint64_t v4 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received motion mediator notification}",  (uint8_t *)v7,  0x12u);
    }

    uint64_t v5 = *(void *)(v3 + 128);
    double Current = CFAbsoluteTimeGetCurrent();
    return sub_100ACB400(v5, Current);
  }

  return result;
}

uint64_t sub_100AE7FF8(uint64_t a1)
{
  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }
  uint64_t v2 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received step count notification}",  (uint8_t *)v6,  0x12u);
  }

  uint64_t v3 = *(void *)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100ACB488(v3, Current);
}

id *sub_100AE80F0(id *result, uint64_t a2, _DWORD *a3)
{
  if ((*a3 | 4) == 4)
  {
    uint64_t v4 = result;
    uint64_t result = (id *)(*((uint64_t (**)(id *))*result + 38))(result);
    if (!*a3)
    {
      id v5 = objc_msgSend(objc_msgSend(v4[4], "vendor"), "proxyForService:", @"CLClientManager");
      if (byte_10199A86F >= 0) {
        int v6 = &qword_10199A858;
      }
      else {
        int v6 = (uint64_t *)qword_10199A858;
      }
      return (id *)objc_msgSend( v5,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
    }
  }

  return result;
}

BOOL sub_100AE8184(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 240);
  uint64_t v2 = (double *)(a1 + 248);
  uint64_t v3 = qword_101934990;
  double v4 = 1.79769313e308;
  do
  {
    if (v3 != -1) {
      dispatch_once(&qword_101934990, &stru_10186EE10);
    }
    id v5 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *((void *)v1 + 5);
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:shouldLocalGPSBeRestricted,list, accuracy:%{public}f}",  buf,  0x1Cu);
      uint64_t v3 = qword_101934990;
    }

    else
    {
      uint64_t v3 = -1LL;
    }

    if (v1[5] < v4) {
      double v4 = v1[5];
    }
    __int16 v7 = (double *)*((void *)v1 + 1);
    if (v7)
    {
      do
      {
        __int16 v8 = v7;
        __int16 v7 = *(double **)v7;
      }

      while (v7);
    }

    else
    {
      do
      {
        __int16 v8 = (double *)*((void *)v1 + 2);
        BOOL v9 = *(void *)v8 == (void)v1;
        uint64_t v1 = v8;
      }

      while (!v9);
    }

    uint64_t v1 = v8;
  }

  while (v8 != v2);
  return v4 >= 100.0;
}

void sub_100AE8324(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100AE8350(id a1)
{
  qword_101934998 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t *sub_100AE837C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100AE83D0(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100AE83B8(_Unwind_Exception *a1)
{
}

uint64_t *sub_100AE83D0(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    double v4 = a2;
    id v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_1004EF350(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      __int16 v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          __int16 v8 = v7;
          __int16 v7 = *(int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          __int16 v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          double v4 = v8;
        }

        while (!v9);
      }

      double v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

void sub_100AE8454()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101348A30;
      v1[3] = unk_101348A40;
      v1[4] = xmmword_101348A50;
      v1[0] = xmmword_101348A10;
      v1[1] = unk_101348A20;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100AE8528(_Unwind_Exception *a1)
{
}

uint64_t sub_100AE8540()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10199A858, (void *)&_mh_execute_header);
}

uint64_t sub_100AE85BC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1002DC708((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_100AE8608(_Unwind_Exception *a1)
{
}

_DWORD *sub_100AE861C(_DWORD *a1, uint64_t a2)
{
  double v4 = sub_1002E0454(a1);
  sub_1002DCA80((uint64_t)v4, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100AE8664(_Unwind_Exception *a1)
{
}

_DWORD *sub_100AE8678(_DWORD *a1, uint64_t a2)
{
  double v4 = sub_1002E0454(a1);
  sub_1002DCA80((uint64_t)v4, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100AE86C0(_Unwind_Exception *a1)
{
}

void sub_100AE86D4(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10186EE30);
  }
  double v4 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WsbReproc, timer", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10186EE30);
    }
    v6[0] = 0;
    id v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbReproc, timer",  v6,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NewReprocessWsbRequest::HandleEvent::operator()(const Events::Client::WsbTimer &) const",  "%s\n",  v5);
  }

  if (*(void *)(a1 + 6288) != *(void *)(a1 + 6280))
  {
    sub_1010DDBC0(buf, "Timer");
    sub_100AE88E4((uint64_t)(a2 + 746), (__int128 *)buf);
  }

void sub_100AE88B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_100AE88E4(uint64_t a1, __int128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    __int128 v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }

  else
  {
    __int128 v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

void sub_100AE895C(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*(void *)(a1 + 6280) != *(void *)(a1 + 6288) && *a2 == *(_DWORD *)(a1 + 6344))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10186EE30);
    }
    uint64_t v6 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = a2[1];
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, reply, %{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10186EE30);
      }
      int v8 = a2[1];
      v10[0] = 67240192;
      v10[1] = v8;
      BOOL v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbAls, reply, %{public}d",  v10,  8);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::NewReprocessWsbRequest::HandleEvent::operator()(const Events::Network::AlsFinished &) const",  "%s\n",  v9);
    }

    sub_1010DDBC0(buf, "ALS");
    sub_100AE88E4((uint64_t)(a3 + 746), (__int128 *)buf);
  }

void sub_100AE8B6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_100AE8BA0(int *a1@<X1>, _DWORD *a2@<X8>)
{
}

void sub_100AE8C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100AE8C64(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100AE8C90(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
      sub_100AE861C(a3, a2);
      break;
    case 0x14:
      sub_100AE895C(a2, a1 + 2, a3);
      break;
    case 0x1C:
      sub_100AE86D4(a2, a3);
      break;
    default:
      sub_1002DDAB0();
  }

void sub_100AE8CF0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100AE8D8C(_Unwind_Exception *a1)
{
}

void sub_100AE8DA4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *uint64_t v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100AE8E30(_Unwind_Exception *a1)
{
}

uint64_t sub_100AE8E48(uint64_t a1, uint64_t *a2, double *a3, double *a4, uint64_t *a5)
{
  context = objc_autoreleasePoolPush();
  double v10 = *a3;
  double v11 = *a4;
  v78[0] = _NSConcreteStackBlock;
  v78[1] = 3221225472LL;
  v78[2] = sub_100AE9900;
  v78[3] = &unk_10186EE58;
  obfloat j = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  v78[4] = obj;
  uint64_t v12 = *a5;
  __int16 v13 = (double *)operator new(0x30uLL);
  *(void *)__int16 v13 = &off_10186EED0;
  *((void *)v13 + 1) = a1;
  _DWORD v13[2] = v10;
  void v13[3] = v11;
  *((void *)v13 + 4) = v12;
  *((void *)v13 + 5) = v78;
  __int128 v101 = v13;
  uint64_t v94 = 0LL;
  id v95 = &v94;
  uint64_t v96 = 0x2020000000LL;
  char v97 = 0;
  uint64_t v88 = 0LL;
  uint64_t v89 = &v88;
  uint64_t v90 = 0x3052000000LL;
  uint64_t v91 = sub_100AE99A4;
  unsigned int v92 = sub_100AE99B4;
  dispatch_group_t v93 = dispatch_group_create();
  uint64_t v84 = 0LL;
  int v85 = &v84;
  uint64_t v86 = 0x2020000000LL;
  uint64_t v87 = 0LL;
  *(void *)&__int128 v79 = _NSConcreteStackBlock;
  *((void *)&v79 + 1) = 3221225472LL;
  *(void *)&__int128 v80 = sub_100AE99C0;
  *((void *)&v80 + 1) = &unk_10186EEA0;
  int v81 = &v94;
  unsigned int v82 = &v88;
  int v83 = &v84;
  dispatch_group_enter((dispatch_group_t)v89[5]);
  *(void *)uint64_t buf = &v79;
  if (!v101) {
    sub_100008BDC();
  }
  uint64_t v14 = (void *)(*(uint64_t (**)(double *, uint8_t *))(*(void *)v101 + 48LL))(v101, buf);
  __int16 v15 = a2;
  uint64_t v16 = (dispatch_group_s *)v89[5];
  dispatch_time_t v17 = dispatch_time(0LL, 100000000LL);
  uint64_t v18 = dispatch_group_wait(v16, v17);
  v85[3] = v18;
  if (v18)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10186EE78);
    }
    __int128 v19 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = v85[3];
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10186EE78);
      }
      uint64_t v53 = v85[3];
      int v102 = 134349056;
      uint64_t v103 = v53;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu",  &v102,  12);
      unsigned int v55 = (uint8_t *)v54;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)",  "%s\n",  v54);
      if (v55 != buf) {
        free(v55);
      }
    }

    [v14 cancel];
  }

  else if (v89[5])
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10186EE78);
    }
    __int16 v21 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10186EE78);
      }
      LOWORD(v102) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,clearing dispatchGroup",  &v102,  2);
      unsigned int v59 = (uint8_t *)v58;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)",  "%s\n",  v58);
      if (v59 != buf) {
        free(v59);
      }
      __int16 v15 = a2;
    }

    v89[5] = 0LL;
  }

  if (v85[3]) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = *((_BYTE *)v95 + 24) == 0;
  }
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v88, 8);
  _Block_object_dispose(&v94, 8);
  __int16 v23 = v101;
  if (v101 == (double *)v100)
  {
    uint64_t v24 = 4LL;
    __int16 v23 = (double *)v100;
  }

  else
  {
    if (!v101) {
      goto LABEL_27;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_27:
  HIDWORD(v60) = v22;
  if (v22)
  {
    *(_DWORD *)(a1 + 40) = 0;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    id v64 = [obj countByEnumeratingWithState:&v74 objects:v99 count:16];
    if (v64)
    {
      uint64_t v63 = *(void *)v75;
      do
      {
        for (uint64_t i = 0LL; i != v64; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v75 != v63) {
            objc_enumerationMutation(obj);
          }
          __int16 v25 = *(void **)(*((void *)&v74 + 1) + 8LL * (void)i);
          __int128 v70 = 0u;
          __int128 v71 = 0u;
          __int128 v72 = 0u;
          __int128 v73 = 0u;
          __int128 v69 = v25;
          id v66 = [v25 sections];
          id v68 = [v66 countByEnumeratingWithState:&v70 objects:v98 count:16];
          if (v68)
          {
            uint64_t v67 = *(void *)v71;
            do
            {
              for (float j = 0LL; j != v68; float j = (char *)j + 1)
              {
                if (*(void *)v71 != v67) {
                  objc_enumerationMutation(v66);
                }
                __int16 v27 = *(void **)(*((void *)&v70 + 1) + 8LL * (void)j);
                __int128 v106 = 0u;
                __int128 v107 = 0u;
                *(_OWORD *)uint64_t buf = 0u;
                __int128 v105 = 0u;
                unsigned int v28 = [v69 tileSetStyle];
                if (!v28)
                {
                  [v27 height];
LABEL_44:
                  *(double *)uint64_t buf = v32;
                  goto LABEL_45;
                }

                if (v28 == 1)
                {
                  if ([v69 hasTerrainElevation])
                  {
                    [v27 topHeight];
                    double v30 = v29;
                    [v27 terrainElevation];
                    double v32 = v30 - v31;
                  }

                  else
                  {
                    [v27 topHeight];
                  }

                  goto LABEL_44;
                }

void sub_100AE9858( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v62 = (unint64_t *)STACK[0x2D8];
  if ((unint64_t *)STACK[0x2D8] == &STACK[0x2C0])
  {
    uint64_t v63 = 4LL;
    uint64_t v62 = &STACK[0x2C0];
  }

  else
  {
    if (!v62) {
      goto LABEL_6;
    }
    uint64_t v63 = 5LL;
  }

  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_6:
  _Unwind_Resume(a1);
}

id sub_100AE9900(uint64_t a1, void *a2)
{
  id result = objc_msgSend(objc_msgSend(a2, "sections"), "count");
  if (result) {
    return [*(id *)(a1 + 32) addObject:a2];
  }
  return result;
}

uint64_t sub_100AE9944(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  double v8 = a4;
  uint64_t v4 = *(void *)(a3 + 56);
  uint64_t v6 = *(void *)(a3 + 64);
  uint64_t v7 = v4;
  return sub_100AE8E48(a1, a2, (double *)&v7, (double *)&v6, (uint64_t *)&v8);
}

void sub_100AE9978(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100AE99A4(uint64_t a1, uint64_t a2)
{
}

void sub_100AE99B4(uint64_t a1)
{
}

void sub_100AE99C0(void *a1, void *a2)
{
  if (a2)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10186EE78);
    }
    uint64_t v4 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349571;
      id v29 = [a2 code];
      __int16 v30 = 2114;
      id v31 = [a2 domain];
      __int16 v32 = 2113;
      id v33 = [a2 localizedDescription];
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,%{private}@",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10186EE78);
      }
      uint64_t v10 = qword_1019348B8;
      int v22 = 134349571;
      id v23 = [a2 code];
      __int16 v24 = 2114;
      id v25 = [a2 domain];
      __int16 v26 = 2113;
      id v27 = [a2 localizedDescription];
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  0LL,  "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,%{private}@",  &v22,  32);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

  if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10186EE78);
    }
    uint64_t v5 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void **)(*(void *)(a1[6] + 8LL) + 24LL);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8LL) + 24LL);
      *(_DWORD *)uint64_t buf = 134349312;
      id v29 = v6;
      __int16 v30 = 1026;
      LODWORD(v31) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10186EE78);
      }
      __int16 v13 = *(void **)(*(void *)(a1[6] + 8LL) + 24LL);
      int v14 = *(unsigned __int8 *)(*(void *)(a1[4] + 8LL) + 24LL);
      int v22 = 134349312;
      id v23 = v13;
      __int16 v24 = 1026;
      LODWORD(v25) = v14;
      LODWORD(v21) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d",  &v22,  v21);
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8LL) + 40LL));
  }

  if (*(void *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10186EE78);
      }
      double v8 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "CLMM,clearing dispatchGroup when time-out has happened",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10186EE78);
        }
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,clearing dispatchGroup when time-out has happened",  &v22,  v21);
        uint64_t v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      *(void *)(*(void *)(a1[5] + 8LL) + 4sub_100272D04(v1, 0LL) = 0LL;
    }

    else
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10186EE78);
      }
      BOOL v9 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "CLMM,dispatchGroup is unexpectedly nil",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10186EE78);
        }
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,dispatchGroup is unexpectedly nil",  &v22,  v21);
        uint64_t v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }
    }
  }

__n128 sub_100AEA034(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &off_10186EED0;
  *(_OWORD *)(v2 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_100AEA07C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10186EED0;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

id sub_100AEA0AC(uint64_t a1, void *a2)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 8) + 2600),  "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:",  *(unsigned int *)(*(void *)(a1 + 8) + 2648),  *(void *)(a1 + 40),  *a2,  *(double *)(a1 + 16),  *(double *)(a1 + 24),  *(double *)(a1 + 32));
}

uint64_t sub_100AEA0D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100AEA10C()
{
}

void sub_100AEA118(uint64_t a1)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10186EFA8);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: beginSeries", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10186EFA8);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: beginSeries",  v7,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiServerResponseListener::beginSeries()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  uint64_t v4 = *(char **)(a1 + 24);
  __int128 v3 = (void *)(a1 + 24);
  sub_100603B94((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  void *v3 = 0LL;
  v3[1] = 0LL;
}

void sub_100AEA2BC(uint64_t a1)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10186EFA8);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)uint64_t v43 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: endSeries, size, %lu", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10186EFA8);
    }
    uint64_t v29 = *(void *)(a1 + 32);
    int v40 = 134217984;
    *(void *)unint64_t v41 = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: endSeries, size, %lu",  &v40);
    id v31 = (uint8_t *)v30;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiServerResponseListener::endSeries()", "%s\n", v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = (void *)(a1 + 24);
  if (v4 != (void *)(a1 + 24))
  {
    do
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186EFA8);
      }
      uint64_t v6 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *((_DWORD *)v4 + 24);
        uint64_t v8 = v4[10];
        uint64_t v9 = v4[11];
        *(_DWORD *)uint64_t buf = 67109632;
        *(_DWORD *)uint64_t v43 = v7;
        *(_WORD *)&v43[4] = 2048;
        *(void *)&v43[6] = v8;
        *(_WORD *)&v43[14] = 2048;
        *(void *)&v43[16] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10186EFA8);
        }
        int v20 = *((_DWORD *)v4 + 24);
        uint64_t v21 = v4[10];
        uint64_t v22 = v4[11];
        int v40 = 67109632;
        *(_DWORD *)unint64_t v41 = v20;
        *(_WORD *)&v41[4] = 2048;
        *(void *)&v41[6] = v21;
        *(_WORD *)&v41[14] = 2048;
        *(void *)&unsigned __int8 v41[16] = v22;
        LODWORD(v32) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf",  &v40,  v32,  v33);
        __int16 v24 = (uint8_t *)v23;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiServerResponseListener::endSeries()", "%s\n", v23);
        if (v24 != buf) {
          free(v24);
        }
      }

      if (*((int *)v4 + 24) >= 2)
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10186EFA8);
        }
        double v11 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = v4[10];
          uint64_t v13 = v4[11];
          *(_DWORD *)uint64_t buf = 134218240;
          *(void *)uint64_t v43 = v12;
          *(_WORD *)&__int16 v43[8] = 2048;
          *(void *)&v43[10] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "TILES: requestDownload, %.8f, %.8f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10186EFA8);
          }
          uint64_t v25 = v4[10];
          uint64_t v26 = v4[11];
          int v40 = 134218240;
          *(void *)unint64_t v41 = v25;
          *(_WORD *)&_WORD v41[8] = 2048;
          *(void *)&v41[10] = v26;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILES: requestDownload, %.8f, %.8f",  COERCE_DOUBLE(&v40),  v32);
          unsigned int v28 = (uint8_t *)v27;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiServerResponseListener::endSeries()", "%s\n", v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        id v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLWifiTilesManager");
        double v15 = *((double *)v4 + 10);
        double v16 = *((double *)v4 + 11);
        __int16 v34 = 0;
        char v35 = 0;
        unint64_t v36 = 0xBFF0000000000000LL;
        int v37 = 3;
        CFAbsoluteTime v38 = Current;
        __int16 v39 = 1;
        [v14 requestTileDownloadForLat:&v34 lon:v15 details:v16];
      }

      dispatch_time_t v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          dispatch_time_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v4[2];
          BOOL v19 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }

        while (!v19);
      }

      uint64_t v4 = v18;
    }

    while (v18 != v5);
  }

  sub_100603B94(a1 + 16, *(char **)(a1 + 24));
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = v5;
}

void sub_100AEA820(uint64_t a1, uint64_t *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10186EFC8);
    }
    uint64_t v6 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      unint64_t v7 = 0xD37A6F4DE9BD37A7LL * ((a2[1] - *a2) >> 3);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v7;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "@WifiAps, als, %{public}lu, isNearby, %{public}d",  (uint8_t *)buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10186EFC8);
      }
      unint64_t v17 = 0xD37A6F4DE9BD37A7LL * ((a2[1] - *a2) >> 3);
      unsigned int v23 = 134349312;
      unint64_t v24 = v17;
      __int16 v25 = 1026;
      int v26 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WifiAps, als, %{public}lu, isNearby, %{public}d",  &v23,  18);
      BOOL v19 = (std::stringbuf::string_type *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, BOOL)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        if (*(double *)(v8 + 20) >= 0.0)
        {
          sub_100C4E2C0((uint64_t)&v23, *(double *)(v8 + 4), *(double *)(v8 + 12));
          if (sub_1008AD614((uint64_t)&v23))
          {
            uint64_t v10 = sub_100603554(a1 + 16, (uint64_t)&v23);
            if ((void *)(a1 + 24) == v10)
            {
              *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = *(_OWORD *)(v8 + 4);
              LODWORD(buf[0].__r_.__value_.__r.__words[2]) = 1;
              sub_100AEADC8((uint64_t **)(a1 + 16), (uint64_t)&v23, (uint64_t)&v23, (__n128 *)buf);
            }

            else
            {
              ++*((_DWORD *)v10 + 24);
            }
          }

          else
          {
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_10186EFA8);
            }
            double v11 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
            {
              sub_1008AD840(&v23, buf);
              uint64_t v12 = buf;
              if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v12 = (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
              }
              LODWORD(v20.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "TILE: macAddressResolved, invalid hash value, %s",  (uint8_t *)&v20,  0xCu);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_10186EFA8);
              }
              uint64_t v13 = qword_101934A78;
              sub_1008AD840(&v23, &v20);
              id v14 = &v20;
              if ((v20.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                id v14 = (std::stringbuf::string_type *)v20.__r_.__value_.__r.__words[0];
              }
              int v21 = 136315138;
              uint64_t v22 = v14;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  17LL,  "TILE: macAddressResolved, invalid hash value, %s",  (const char *)&v21);
              double v16 = v15;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, BOOL)",  "%s\n",  (const char *)v16);
              if (v16 != buf) {
                free(v16);
              }
            }
          }

          if (v28 < 0) {
            operator delete(__p);
          }
        }

        v8 += 184LL;
      }

      while (v8 != v9);
    }

    sub_100AEA2BC(a1);
  }

void sub_100AEACA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AEACD8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 24);
  sub_100603B94(a1 + 16, *(char **)(a1 + 24));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
}

uint64_t sub_100AEAD08(uint64_t a1)
{
  *(void *)a1 = off_10186EF60;
  sub_100603B94(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_100AEAD3C(char **a1)
{
  *a1 = (char *)off_10186EF60;
  sub_100603B94((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

void sub_100AEAD70(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100AEAD9C(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t *sub_100AEADC8(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v7 = (uint64_t **)sub_10060372C((uint64_t)a1, &v10, a2);
  __n128 result = *v7;
  if (!*v7)
  {
    sub_100AEAE4C((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_1000085FC(a1, v10, v7, v9);
    return v9;
  }

  return result;
}

__n128 sub_100AEAE4C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  uint64_t v9 = v8 + 56;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1010DD48C(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *((void *)v8 + 9) = *(void *)(a2 + 40);
  }

  __n128 result = *a3;
  *((__n128 *)v8 + 5) = *a3;
  *((void *)v8 + 12) = a3[1].n128_u64[0];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100AEAEF4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10060386C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100AEAF10()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100AEAF74()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100AEAFE8(_Unwind_Exception *a1)
{
}

void *sub_100AEB000(void *a1, char *a2, void *a3)
{
  if (!a2)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186F188);
    }
    uint64_t v22 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)char v35 = 68289026;
      int v36 = 0;
      __int16 v37 = 2082;
      CFAbsoluteTime v38 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Attempting to create service location provider with NULL service name}",  v35,  0x12u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186F188);
      }
    }

    uint64_t v23 = qword_101934988;
    if (!os_signpost_enabled((os_log_t)qword_101934988)) {
      goto LABEL_28;
    }
    *(_DWORD *)char v35 = 68289026;
    int v36 = 0;
    __int16 v37 = 2082;
    CFAbsoluteTime v38 = "";
    unint64_t v17 = "Attempting to create service location provider with NULL service name";
    uint64_t v18 = "{msg%{public}.0s:Attempting to create service location provider with NULL service name}";
    BOOL v19 = v35;
    std::stringbuf::string_type v20 = (os_log_s *)v23;
    uint32_t v21 = 18;
    goto LABEL_27;
  }

  v39[0] = @"LocationBundles/";
  v39[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2);
  uint64_t v6 = -[NSString stringByAppendingPathExtension:]( +[NSString pathWithComponents:]( &OBJC_CLASS___NSString,  "pathWithComponents:",  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v39, 2LL)),  "stringByAppendingPathExtension:",  @"bundle");
  uint64_t v7 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0x408uLL, 0);
  uint64_t v8 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v9 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v25,  v35,  16LL);
  if (!v9)
  {
LABEL_13:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10186F188);
    }
    double v15 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v30 = 0;
      __int16 v31 = 2082;
      double v32 = "";
      __int16 v33 = 2082;
      __int16 v34 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unable to resolve bundle path for service, serviceName:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10186F188);
      }
    }

    uint64_t v16 = qword_101934988;
    if (!os_signpost_enabled((os_log_t)qword_101934988)) {
      goto LABEL_28;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    double v32 = "";
    __int16 v33 = 2082;
    __int16 v34 = a2;
    unint64_t v17 = "Unable to resolve bundle path for service";
    uint64_t v18 = "{msg%{public}.0s:Unable to resolve bundle path for service, serviceName:%{public, location:escape_only}s}";
    BOOL v19 = buf;
    std::stringbuf::string_type v20 = (os_log_s *)v16;
    uint32_t v21 = 28;
LABEL_27:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v17,  v18,  v19,  v21);
LABEL_28:
    id v14 = 0LL;
    goto LABEL_29;
  }

  id v10 = v9;
  uint64_t v11 = *(void *)v26;
LABEL_4:
  uint64_t v12 = 0LL;
  while (1)
  {
    if (*(void *)v26 != v11) {
      objc_enumerationMutation(v7);
    }
    uint64_t v13 = *(void **)(*((void *)&v25 + 1) + 8 * v12);
    if (-[NSFileManager fileExistsAtPath:]( v8,  "fileExistsAtPath:",  [v13 stringByAppendingPathComponent:v6]))
    {
      break;
    }

    if (v10 == (id)++v12)
    {
      id v10 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v25,  v35,  16LL);
      if (v10) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  if (!v13) {
    goto LABEL_13;
  }
  id v14 = [v13 stringByAppendingPathComponent:v6];
LABEL_29:
  sub_1008AE8E4((uint64_t)a1, a2, a3, 0LL, (unint64_t)v14);
  *a1 = &off_10186EFF8;
  return a1;
}

void *sub_100AEB408@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  id v10 = operator new(0x30uLL);
  __n128 result = sub_10047D9C0((uint64_t)v10, a1, a4, a2, a3);
  void *v10 = &off_10186F140;
  *a5 = v10;
  return result;
}

void sub_100AEB478(_Unwind_Exception *a1)
{
}

void sub_100AEB490(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008AF1C4(a1);
  operator delete(v1);
}

void sub_100AEB4A4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100AEB4D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = sub_1010DDBC0((void *)a1, "VO2MaxPowerBudgetEstimatorBudgetRefreshTime") + 3;
  sub_1010DDBC0(v10, "VO2MaxPowerBudgetEstimatorExtendedBudgetRefreshTime");
  sub_1010DDBC0((void *)(a1 + 48), "VO2MaxPowerBudgetEstimatorStairsBudgetRefreshTime");
  sub_1010DDBC0((void *)(a1 + 72), "VO2MaxPowerBudgetEstimatorTimeOfLastVO2MaxSessionEstimate");
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = objc_msgSend(objc_msgSend(a2, "silo"), "newTimer");
  *(void *)(a1 + 112) = objc_msgSend(objc_msgSend(*(id *)(a1 + 96), "silo"), "newTimer");
  *(_BYTE *)(a1 + 120) = 0;
  sub_10001A504(a1 + 128, a3);
  sub_10001A504(a1 + 160, a4);
  sub_10001A504(a1 + 192, a5);
  uint64_t v11 = *(void *)(a1 + 104);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a1;
    uint64_t v19 = *(void *)(a1 + 16);
  }

  sub_1005FC7E8((void *)(a1 + 224), v11, (__int128 *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = *(void *)(a1 + 112);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_1010DD48C(__dst, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }

  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)v10;
    uint64_t v17 = v10[2];
  }

  sub_1005FC7E8((void *)(a1 + 280), v12, (__int128 *)__dst);
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  _DWORD v15[2] = sub_100AEB83C;
  void v15[3] = &unk_10181D3D0;
  v15[4] = a1;
  [*(id *)(a1 + 104) setHandler:v15];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100AEBBC8;
  void v14[3] = &unk_10181D3D0;
  v14[4] = a1;
  [*(id *)(a1 + 112) setHandler:v14];
  sub_1005FC7F0(a1 + 224);
  sub_1005FC7F0(a1 + 280);
  return a1;
}

void sub_100AEB6E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  unint64_t v41 = *(void **)(v33 + 216);
  if (v41 == v38)
  {
    uint64_t v42 = 4LL;
    unint64_t v41 = v38;
  }

  else
  {
    if (!v41) {
      goto LABEL_6;
    }
    uint64_t v42 = 5LL;
  }

  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  uint64_t v43 = *(void **)(v33 + 184);
  if (v43 == v37)
  {
    uint64_t v44 = 4LL;
    uint64_t v43 = v37;
  }

  else
  {
    if (!v43) {
      goto LABEL_11;
    }
    uint64_t v44 = 5LL;
  }

  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_11:
  uint64_t v45 = *(void **)(v33 + 152);
  if (v45 == v36)
  {
    uint64_t v46 = 4LL;
    uint64_t v45 = v36;
  }

  else
  {
    if (!v45) {
      goto LABEL_16;
    }
    uint64_t v46 = 5LL;
  }

  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_16:
  _Unwind_Resume(a1);
}

void sub_100AEB83C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186F1A8);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLBackgroundEscalationsPowerBudgetEstimator, budgetRefreshTimer fire",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "CLBackgroundEscalationsPowerBudgetEstimator, budgetRefreshTimer fire",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLBackgroundEscalationsPowerBudgetEstimator::CLBackgroundEscalationsPowerBudgetEstimator(id<CLIntersiloUniverse>, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler)_block_invoke",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100AEB9D4(v1);
}

void sub_100AEB9D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) && (sub_1005FCA1C(a1 + 224) || sub_1005FCA1C(a1 + 280)))
  {
    double v2 = sub_100AEC6D4();
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    double v4 = Current - v2;
    uint64_t v5 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v12 = v4;
      __int16 v13 = 2050;
      double v14 = Current;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CLBackgroundEscalationsPowerBudgetEstimator, kicking off historical data query, startTime, %{public}.2f, endTime, %{public}.2f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186F1A8);
      }
      int v7 = 134349312;
      double v8 = v4;
      __int16 v9 = 2050;
      double v10 = Current;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLBackgroundEscalationsPowerBudgetEstimator, kicking off historical data query, startTime, %{public }.2f, endTime, %{public}.2f",  &v7,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationsPowerBudgetEstimator::kickoffHKQuery()",  "%s\n",  v6);
    }
  }

void sub_100AEBBC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186F1A8);
  }
  double v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLBackgroundEscalationsPowerBudgetEstimator, extendedBudgetRefreshTimer fire",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "CLBackgroundEscalationsPowerBudgetEstimator, extendedBudgetRefreshTimer fire",  v5,  2);
    double v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLBackgroundEscalationsPowerBudgetEstimator::CLBackgroundEscalationsPowerBudgetEstimator(id<CLIntersiloUniverse>, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler)_block_invoke",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100AEBD60(v1);
}

void sub_100AEBD60(uint64_t a1)
{
  uint64_t v2 = a1 + 280;
  if (sub_1005FCA1C(a1 + 280))
  {
    *(void *)&double v3 = objc_opt_class(&OBJC_CLASS___MCProfileConnection).n128_u64[0];
    if (v4
      && objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection",  v3),  "isHealthDataSubmissionAllowed"))
    {
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186F1A8);
      }
      uint64_t v5 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "IHA authorized to enable stairs escalation",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_10186F1A8);
        }
        LOWORD(v63[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "IHA authorized to enable stairs escalation",  v63,  2);
        unsigned int v55 = (uint8_t *)v54;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationsPowerBudgetEstimator::extendedBudgetHandler()",  "%s\n",  v54);
        if (v55 != buf) {
          free(v55);
        }
      }

      int v6 = 1;
    }

    else
    {
      int v6 = 0;
    }

    double v7 = sub_100295E8C();
    double v61 = 0.0;
    double v62 = 0.0;
    double v59 = 0.0;
    uint64_t v60 = 0LL;
    int v58 = 0;
    uint64_t v8 = sub_1006E27E8();
    sub_100413284(v8, buf);
    sub_1002A82BC(*(uint64_t *)buf, "BackgroundEscalationsExtendedBudgetAllowance", &v62);
    __int16 v9 = *(std::__shared_weak_count **)v73;
    if (*(void *)v73)
    {
      double v10 = (unint64_t *)(*(void *)v73 + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = sub_1006E27E8();
    sub_100413284(v12, buf);
    sub_1002A82BC(*(uint64_t *)buf, "ExtendedPowerBudgetRefreshInterval", &v61);
    __int16 v13 = *(std::__shared_weak_count **)v73;
    if (*(void *)v73)
    {
      double v14 = (unint64_t *)(*(void *)v73 + 8LL);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    uint64_t v16 = sub_1006E27E8();
    sub_100413284(v16, buf);
    sub_1002A7CB0(*(uint64_t *)buf, "StairsEscalationDisable", &v58);
    uint64_t v17 = *(std::__shared_weak_count **)v73;
    if (*(void *)v73)
    {
      uint64_t v18 = (unint64_t *)(*(void *)v73 + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    uint64_t v20 = sub_1006E27E8();
    sub_100413284(v20, buf);
    sub_1002A82BC(*(uint64_t *)buf, "StairsBudgetForAllRefreshInterval", &v59);
    uint32_t v21 = *(std::__shared_weak_count **)v73;
    if (*(void *)v73)
    {
      uint64_t v22 = (unint64_t *)(*(void *)v73 + 8LL);
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    uint64_t v24 = sub_1006E27E8();
    sub_100413284(v24, buf);
    sub_1002A82BC(*(uint64_t *)buf, "StairsBudgetAllowanceForAll", &v60);
    __int128 v25 = *(std::__shared_weak_count **)v73;
    if (*(void *)v73)
    {
      __int128 v26 = (unint64_t *)(*(void *)v73 + 8LL);
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    uint64_t v28 = sub_100B7ECFC();
    sub_100B7ED40(v28, (uint64_t)@"SensitiveEscalationExtendedBudgetRefreshInterval", (void **)&v61);
    uint64_t v29 = sub_100B7ECFC();
    sub_100B7ED40(v29, (uint64_t)@"SensitiveEscalationExtendedBudgetAllowanceSeconds", (void **)&v62);
    uint64_t v30 = sub_100B7ECFC();
    sub_100B7ED40(v30, (uint64_t)@"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds", (void **)&v60);
    uint64_t v31 = sub_100B7ECFC();
    sub_100B7ED40(v31, (uint64_t)@"SensitiveEscalationGeneralStairsBudgetRefreshInterval", (void **)&v59);
    int v57 = 0;
    uint64_t v32 = sub_1002F8DDC();
    if (byte_10199A8A7 >= 0) {
      uint64_t v33 = (const char *)&qword_10199A890;
    }
    else {
      uint64_t v33 = (const char *)qword_10199A890;
    }
    sub_1002A7CB0(v32, v33, &v57);
    int v34 = v57;
    v35.n128_f64[0] = v62;
    if (v62 <= 0.0 || (double v36 = v61, v61 <= 0.0))
    {
      if (v6 && (sub_1004F2598(), sub_1004FD45C()))
      {
        double v41 = v59;
        if (v59 == 0.0)
        {
          uint64_t v60 = 0x4050400000000000LL;
          double v59 = 201312.0;
          double v41 = 201312.0;
        }

        double v42 = v7 + v41;
        sub_1005FCAB0(v2, v7 + v41);
        *(void *)uint64_t buf = v60;
        uint64_t v43 = *(void *)(a1 + 216);
        if (!v43) {
          sub_100008BDC();
        }
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v43 + 48LL))(v43, buf);
        int v34 = 3;
      }

      else
      {
        *(void *)uint64_t buf = 0LL;
        uint64_t v44 = *(void *)(a1 + 216);
        if (!v44) {
          sub_100008BDC();
        }
        (*(void (**)(uint64_t, uint8_t *, __n128))(*(void *)v44 + 48LL))(v44, buf, v35);
        double v42 = 0.0;
      }

      *(void *)uint64_t buf = 0LL;
      uint64_t v45 = *(void *)(a1 + 184);
      if (!v45) {
        sub_100008BDC();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v45 + 48LL))(v45, buf);
    }

    else
    {
      sub_1004F2598();
      BOOL v37 = sub_1004FD45C();
      v38.n128_f64[0] = v62;
      if (!v37 || v34 == 1 || v58 == 1)
      {
        *(double *)uint64_t buf = v62;
        uint64_t v46 = *(void *)(a1 + 184);
        if (!v46) {
          sub_100008BDC();
        }
        (*(void (**)(uint64_t, uint8_t *, __n128))(*(void *)v46 + 48LL))(v46, buf, v38);
        *(void *)uint64_t buf = 0LL;
        uint64_t v47 = *(void *)(a1 + 216);
        if (!v47) {
          sub_100008BDC();
        }
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v47 + 48LL))(v47, buf);
        int v34 = 2;
      }

      else
      {
        *(double *)uint64_t buf = v62;
        uint64_t v39 = *(void *)(a1 + 216);
        if (!v39) {
          sub_100008BDC();
        }
        (*(void (**)(uint64_t, uint8_t *, double))(*(void *)v39 + 48LL))(v39, buf, v62);
        *(void *)uint64_t buf = 0LL;
        uint64_t v40 = *(void *)(a1 + 184);
        if (!v40) {
          sub_100008BDC();
        }
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v40 + 48LL))(v40, buf);
        int v34 = 1;
      }

      double v42 = v7 + v36;
      sub_1005FCAB0(v2, v42);
    }

    int v57 = v34;
    uint64_t v48 = sub_1002F8DDC();
    if (byte_10199A8A7 >= 0) {
      unint64_t v49 = (const char *)&qword_10199A890;
    }
    else {
      unint64_t v49 = (const char *)qword_10199A890;
    }
    sub_1002AC220(v48, v49, &v57);
    uint64_t v50 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v50 + 944LL))(v50);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    uint64_t v51 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67241216;
      *(_DWORD *)&uint8_t buf[4] = v57;
      *(_WORD *)__int128 v73 = 2050;
      *(double *)&v73[2] = v62;
      __int16 v74 = 2050;
      uint64_t v75 = v60;
      __int16 v76 = 2050;
      double v77 = v7;
      __int16 v78 = 2050;
      double v79 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "CLBackgroundEscalationsPowerBudgetEstimator, new extended budget awarded for sensitive escalation type : %{publi c}d, ExtendedBudget, %{public}.2f, stairsBudgetForAll, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f",  buf,  0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186F1A8);
      }
      v63[0] = 67241216;
      v63[1] = v57;
      __int16 v64 = 2050;
      double v65 = v62;
      __int16 v66 = 2050;
      uint64_t v67 = v60;
      __int16 v68 = 2050;
      double v69 = v7;
      __int16 v70 = 2050;
      double v71 = v42;
      LODWORD(v56) = 48;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "CLBackgroundEscalationsPowerBudgetEstimator, new extended budget awarded for sensitive escalation type : %{publi c}d, ExtendedBudget, %{public}.2f, stairsBudgetForAll, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f",  v63,  v56);
      uint64_t v53 = (uint8_t *)v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationsPowerBudgetEstimator::extendedBudgetHandler()",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
    }
  }

void sub_100AEC520( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100AEC550(uint64_t a1)
{
  *(void *)(a1 + 104) = 0LL;
  [*(id *)(a1 + 112) invalidate];

  *(void *)(a1 + 112) = 0LL;
  sub_1005FC7EC(a1 + 280);
  sub_1005FC7EC(a1 + 224);
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2 == (void *)(a1 + 192))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 192);
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  uint64_t v4 = *(void **)(a1 + 184);
  if (v4 == (void *)(a1 + 160))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(a1 + 160);
  }

  else
  {
    if (!v4) {
      goto LABEL_11;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  int v6 = *(void **)(a1 + 152);
  if (v6 == (void *)(a1 + 128))
  {
    uint64_t v7 = 4LL;
    int v6 = (void *)(a1 + 128);
  }

  else
  {
    if (!v6) {
      goto LABEL_16;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  return a1;
}

uint64_t sub_100AEC680(uint64_t a1, double a2)
{
  double v7 = a2;
  uint64_t v3 = sub_1002F8DDC();
  uint64_t v4 = (const char *)(a1 + 72);
  sub_1002AC7B8(v3, v4, &v7);
  uint64_t v5 = sub_1002F8DDC();
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 944LL))(v5);
}

double sub_100AEC6D4()
{
  double v4 = sub_100AD3484();
  uint64_t v0 = sub_100B7ECFC();
  sub_100B7ED40(v0, (uint64_t)@"VO2MaxPowerBudgetEstimatorQueryLookbackInterval", (void **)&v4);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186F1A8);
  }
  uint64_t v1 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    double v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "CLBackgroundEscalationsPowerBudgetEstimator, getting sensitiveEscalationHoldoffInterval, %.2f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    int v5 = 134217984;
    double v6 = v4;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "CLBackgroundEscalationsPowerBudgetEstimator, getting sensitiveEscalationHoldoffInterval, %.2f",  COERCE_DOUBLE(&v5));
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CFTimeInterval CLBackgroundEscalationsPowerBudgetEstimator::getSensitiveEscalationHoldoffInterval() const",  "%s\n",  v3);
  }

  return v4;
}

id sub_100AEC898(id result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24) && *(double *)(a2 + 16) != -1.0 && *(_BYTE *)(a2 + 27))
  {
    uint64_t v2 = (uint64_t)result;
    double v3 = sub_100295E8C();
    double v4 = sub_100AD3648();
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    double v5 = v3 + v4;
    double v6 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)&uint8_t buf[4] = v3;
      __int16 v14 = 2050;
      double v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on VO2MaxEstimate, now, %{public}.2f, nextRefreshTime, %{public}.2f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186F1A8);
      }
      int v9 = 134349312;
      double v10 = v3;
      __int16 v11 = 2050;
      double v12 = v5;
      double v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on VO2MaxEstimate, now, %{public}.2f, n extRefreshTime, %{public}.2f",  &v9,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationsPowerBudgetEstimator::feedVO2MaxEstimate(VO2MaxResult)",  "%s\n",  v8);
      if (v8 != buf) {
        free(v8);
      }
    }

    sub_100AEC680(v2, v3);
    *(void *)uint64_t buf = 0LL;
    uint64_t v7 = *(void *)(v2 + 152);
    if (!v7) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, _BYTE *))(*(void *)v7 + 48LL))(v7, buf);
    return sub_1005FCAB0(v2 + 224, v5);
  }

  return result;
}

void *sub_100AECACC(void *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 112);
  BOOL v3 = v2 > 0x18;
  uint64_t v4 = (1LL << v2) & 0x1028000;
  BOOL v5 = v3 || v4 == 0;
  if (!v5 && *(double *)(a2 + 8) - *(double *)a2 >= 600.0)
  {
    double v6 = result;
    double v7 = sub_100295E8C();
    double v8 = sub_100AD3648();
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    double v9 = v7 + v8;
    double v10 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)&uint8_t buf[4] = v7;
      __int16 v18 = 2050;
      double v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on workout stop event, now, %{public}.2f, nextRefres hTime, %{public}.2f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186F1A8);
      }
      int v13 = 134349312;
      double v14 = v7;
      __int16 v15 = 2050;
      double v16 = v9;
      double v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on workout stop event, now, %{public}. 2f, nextRefreshTime, %{public}.2f",  &v13,  22);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationsPowerBudgetEstimator::feedWorkoutStopEvent(CLMotionStateMediator_Type::WorkoutEvent)",  "%s\n",  v12);
      if (v12 != buf) {
        free(v12);
      }
    }

    *(void *)uint64_t buf = 0LL;
    uint64_t v11 = v6[19];
    if (!v11) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, _BYTE *))(*(void *)v11 + 48LL))(v11, buf);
    return sub_1005FCAB0((uint64_t)(v6 + 28), v9);
  }

  return result;
}

void sub_100AECD10(uint64_t a1, int a2)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10186F1A8);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLBackgroundEscalationsPowerBudgetEstimator, encrypted data available notification, isAvailable, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10186F1A8);
    }
    v6[0] = 67109120;
    v6[1] = a2;
    BOOL v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "CLBackgroundEscalationsPowerBudgetEstimator, encrypted data available notification, isAvailable, %d",  v6);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationsPowerBudgetEstimator::feedEncryptedDataAvailability(BOOL)",  "%s\n",  v5);
  }

  *(_BYTE *)(a1 + 120) = a2;
  sub_100AEB9D4(a1);
}

void sub_100AECEC8(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

NSDictionary *sub_100AECEF4()
{
  v1[0] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_1018D6F70;
  v1[1] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_1018D6F88;
  v1[2] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_1018D6FA0;
  v1[3] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_1018D6FB8;
  v1[4] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  unsigned __int8 v2[4] = &off_1018D6FD0;
  _OWORD v1[5] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1018D6FE8;
  v1[6] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1018D7000;
  __n128 result = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  7LL);
  qword_10199A8A8 = (uint64_t)result;
  return result;
}

uint64_t sub_100AED074(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208]) {
      return sub_100253308(*(void *)(a3 + 16));
    }
  }

  return result;
}

uint64_t sub_100AED10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(a3 + 352)) {
    return a2;
  }
  double v5 = *(double *)(a3 + 648);
  __int128 v6 = *(_OWORD *)(a3 + 232);
  __int128 v7 = *(_OWORD *)(a3 + 248);
  uint64_t v33 = *(void *)(a3 + 280);
  __int128 v8 = *(_OWORD *)(a3 + 168);
  __int128 v9 = *(_OWORD *)(a3 + 200);
  *(_OWORD *)&buf.isStanding = *(_OWORD *)(a3 + 184);
  *(_OWORD *)&buf.isVehicleConnected = v9;
  *(_OWORD *)&buf.vehicleType = *(_OWORD *)(a3 + 216);
  __int128 v30 = v6;
  *(_OWORD *)&buf.type = *(_OWORD *)(a3 + 152);
  *(_OWORD *)&buf.mountedConfidence = v8;
  __int128 v10 = *(_OWORD *)(a3 + 264);
  __int128 v31 = v7;
  __int128 v32 = v10;
  float v11 = v5;
  float v12 = v11 * 2.2369;
  uint64_t v13 = sub_1005186D4(a2, 2u);
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10186F210);
  }
  double v14 = v12;
  __int16 v15 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(a3 + 120);
    buf.type = 134218752;
    *(void *)&buf.confidence = v16;
    LOWORD(buf.mountedState) = 1026;
    *(int *)((char *)&buf.mountedState + 2) = a2;
    HIWORD(buf.mountedConfidence) = 1026;
    buf.conservativeMountedState = v13;
    LOWORD(buf.conservativeMountedProbability) = 2050;
    *(double *)((char *)&buf.conservativeMountedProbability + 2) = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Overriding youth type for outdoor cycling , beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f",  (uint8_t *)&buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186F210);
    }
    uint64_t v17 = *(void *)(a3 + 120);
    int v21 = 134218752;
    uint64_t v22 = v17;
    __int16 v23 = 1026;
    int v24 = a2;
    __int16 v25 = 1026;
    int v26 = v13;
    __int16 v27 = 2050;
    double v28 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  1LL,  "Overriding youth type for outdoor cycling , beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f",  &v21,  34);
    double v19 = (CLMotionActivity *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMotionActivity::TypeYouth CLFitnessYouthOutdoorCyclingOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)",  "%s\n",  v18);
    if (v19 != &buf) {
      free(v19);
    }
  }

  return v13;
}

void sub_100AED39C(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100AED3C8()
{
  if (qword_10199A8B0 != -1) {
    dispatch_once(&qword_10199A8B0, &stru_10186F230);
  }
  return qword_1019A1B88;
}

void sub_100AED408(id a1)
{
  uint64_t v1 = operator new(0x10uLL);
  *uint64_t v1 = 0LL;
  v1[1] = 0LL;
  qword_1019A1B88 = (uint64_t)v1;
}

void sub_100AED42C(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  unsigned __int8 v3[2] = sub_100AED498;
  unsigned __int8 v3[3] = &unk_101827B10;
  unsigned __int8 v3[4] = a1;
  v3[5] = a2;
  AnalyticsSendEventLazy(@"com.apple.CoreMotion.MagicMountWake", v3);
  *(CFAbsoluteTime *)(a1 + _Block_object_dispose(va, 8) = CFAbsoluteTimeGetCurrent();
}

NSDictionary *sub_100AED498(uint64_t a1)
{
  v17[0] = @"currentState";
  unint64_t v2 = *(double **)(a1 + 32);
  v18[0] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(*(void *)(a1 + 40) + 1LL));
  v17[1] = @"didWakeCount";
  v18[1] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(*(void *)(a1 + 40) + 21LL));
  _DWORD v17[2] = @"isSharingSubscribed";
  v18[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *((unsigned __int8 *)v2 + 1));
  void v17[3] = @"isSpringBoardSubscribed";
  v18[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)v2);
  _DWORD v17[4] = @"transitionLikelyToPossibleCount";
  v18[4] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(*(void *)(a1 + 40) + 2LL));
  v17[5] = @"transitionLikelyToUnmountedCount";
  void v18[5] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(*(void *)(a1 + 40) + 4LL));
  v17[6] = @"transitionPossibleToLikelyCount";
  v18[6] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(*(void *)(a1 + 40) + 3LL));
  v17[7] = @"transitionPossibleToUnmountedCount";
  v18[7] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int16 *)(*(void *)(a1 + 40) + 5LL));
  v17[8] = @"transitionUnmountedToPossibleCount";
  v18[8] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int16 *)(*(void *)(a1 + 40) + 7LL));
  v17[9] = @"cameraRollAngle";
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v4 + 1) == 4)
  {
    LOWORD(_D0) = *(_WORD *)(v4 + 19);
    __asm { FCVT            S0, H0 }

    *(float *)&_D0 = *(float *)&_D0 * 57.296;
    __int128 v9 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", _D0);
  }

  else
  {
    __int128 v9 = +[NSNull null](&OBJC_CLASS___NSNull, "null");
  }

  v18[9] = v9;
  v17[10] = @"landscapeAngle";
  uint64_t v11 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v11 + 1) == 4)
  {
    LOWORD(_D0) = *(_WORD *)(v11 + 17);
    __asm { FCVT            S0, H0 }

    *(float *)&_D0 = *(float *)&_D0 * 57.296;
    float v12 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", _D0);
  }

  else
  {
    float v12 = +[NSNull null](&OBJC_CLASS___NSNull, "null");
  }

  v18[10] = v12;
  v17[11] = @"timeSinceLandscape";
  uint64_t v13 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v13 + 1) == 4) {
    double v14 = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  (double)*(unint64_t *)(v13 + 9) / 1000000.0);
  }
  else {
    double v14 = +[NSNull null](&OBJC_CLASS___NSNull, "null");
  }
  v18[11] = v14;
  v17[12] = @"timeSinceLastEvent";
  if (v2[1] == 0.0) {
    __int16 v15 = +[NSNull null](&OBJC_CLASS___NSNull, "null");
  }
  else {
    __int16 v15 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent() - v2[1]);
  }
  v18[12] = v15;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  13LL);
}

void sub_100AED744(_BYTE *a1, uint64_t a2, char a3)
{
  __int128 v6 = &v25;
  sub_1011E2990(a2, &v25);
  uint64_t size = v25.__r_.__value_.__s.__size_;
  int v8 = (char)v25.__r_.__value_.__s.__size_;
  __int128 v9 = (void *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__s.__size_ & 0x80u) != 0)
  {
    uint64_t size = v25.__r_.__value_.__l.__size_;
    __int128 v6 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }

  __int128 v10 = (char *)v6 + size;
  if (size >= 11)
  {
    uint64_t v11 = v6;
    do
    {
      float v12 = (char *)memchr(v11, 115, size - 10);
      if (!v12) {
        break;
      }
      if (*(void *)v12 == 0x6F62676E69727073LL && *(void *)(v12 + 3) == 0x6472616F62676E69LL) {
        goto LABEL_12;
      }
      uint64_t v11 = (std::string *)(v12 + 1);
      uint64_t size = v10 - (char *)v11;
    }

    while (v10 - (char *)v11 > 10);
  }

  float v12 = v10;
LABEL_12:
  BOOL v15 = v12 == v10 || v12 - (char *)v6 == -1;
  if ((v8 & 0x80000000) == 0)
  {
    if (v15) {
      goto LABEL_20;
    }
LABEL_38:
    *a1 = a3;
    return;
  }

  operator delete(v9);
  if (!v15) {
    goto LABEL_38;
  }
LABEL_20:
  uint64_t v16 = &v25;
  sub_1011E2990(a2, &v25);
  uint64_t v17 = v25.__r_.__value_.__s.__size_;
  int v18 = (char)v25.__r_.__value_.__s.__size_;
  double v19 = (void *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__s.__size_ & 0x80u) != 0)
  {
    uint64_t v17 = v25.__r_.__value_.__l.__size_;
    uint64_t v16 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }

  uint64_t v20 = (char *)v16 + v17;
  if (v17 >= 8)
  {
    int v21 = v16;
    do
    {
      uint64_t v22 = (char *)memchr(v21, 115, v17 - 7);
      if (!v22) {
        break;
      }
      if (*(void *)v22 == 0x64676E6972616873LL) {
        goto LABEL_28;
      }
      int v21 = (std::string *)(v22 + 1);
      uint64_t v17 = v20 - (char *)v21;
    }

    while (v20 - (char *)v21 > 7);
  }

  uint64_t v22 = v20;
LABEL_28:
  BOOL v24 = v22 == v20 || v22 - (char *)v16 == -1;
  if (v18 < 0)
  {
    operator delete(v19);
    if (v24) {
      return;
    }
    goto LABEL_40;
  }

  if (!v24) {
LABEL_40:
  }
    a1[1] = a3;
}

void sub_100AED8F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  sub_1002F0B04(&v59);
  int v7 = sub_1002A82BC(v59, "ProactiveLocPositionUncThreshold", &v57);
  double v8 = v57;
  if (!v7) {
    double v8 = 30.0;
  }
  *(double *)(a1 + _Block_object_dispose(va, 8) = v8;
  sub_1002F0B04(&v57);
  int v9 = sub_1002A82BC(*(uint64_t *)&v57, "ProactiveLocSpeedUncThreshold", &v54);
  double v10 = v54;
  if (!v9) {
    double v10 = 4.0;
  }
  *(double *)(a1 + 16) = v10;
  sub_1002F0B04(&v54);
  int v11 = sub_1002A82BC(*(uint64_t *)&v54, "ProactiveLocCourseUncThreshold", &v52);
  double v12 = v52;
  if (!v11) {
    double v12 = 45.0;
  }
  *(double *)(a1 + 24) = v12;
  sub_1002F0B04(&v52);
  int v13 = sub_1002A82BC(*(uint64_t *)&v52, "ProactiveLocMaxSessionDuration", &v56);
  double v14 = v56;
  if (!v13) {
    double v14 = 18.0;
  }
  *(double *)(a1 + 32) = v14;
  __int128 v51 = xmmword_101348F90;
  *(_OWORD *)(a1 + 40) = xmmword_101348F90;
  *(_DWORD *)(a1 + 56) = 3;
  *(void *)(a1 + 64) = 0x4020000000000000LL;
  BOOL v15 = v53;
  if (v53)
  {
    p_uint64_t shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  int v18 = v55;
  if (v55)
  {
    double v19 = (unint64_t *)&v55->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  int v21 = v58;
  if (v58)
  {
    uint64_t v22 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  BOOL v24 = v60;
  if (v60)
  {
    std::string v25 = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 75) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  v63[0] = &off_10186F2A0;
  v63[1] = a1;
  __int16 v64 = v63;
  v61[0] = &off_10186F320;
  v61[1] = a1;
  double v62 = v61;
  sub_100F05748(a1 + 352, v63, v61);
  __int16 v27 = v62;
  if (v62 == v61)
  {
    uint64_t v28 = 4LL;
    __int16 v27 = v61;
  }

  else
  {
    if (!v62) {
      goto LABEL_34;
    }
    uint64_t v28 = 5LL;
  }

  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_34:
  uint64_t v29 = v64;
  if (v64 == v63)
  {
    uint64_t v30 = 4LL;
    uint64_t v29 = v63;
  }

  else
  {
    if (!v64)
    {
LABEL_39:
      *(_BYTE *)(a1 + 56_Block_object_dispose(va, 8) = 0;
      sub_10001A504(a1 + 576, a3);
      sub_10001A504(a1 + 608, a4);
      *(void *)(a1 + 640) = 0xBFF0000000000000LL;
      uint64_t v31 = sub_10080E94C();
      LODWORD(v59) = 1;
      double v32 = sub_10080EB58(v31, &v59);
      *(double *)(a1 + 160) = v32;
      *(double *)(a1 + 16_Block_object_dispose(va, 8) = v32;
      *(void *)(a1 + 40) = 0x7FEFFFFFFFFFFFFFLL;
      if (sub_1004F7000() && (sub_1004FCFC8() & 1) != 0)
      {
        __int128 v51 = xmmword_101348FA0;
      }

      else if (!sub_1004F7000())
      {
        goto LABEL_44;
      }

      *(_OWORD *)(a1 + 40) = v51;
LABEL_44:
      sub_1002F0B04(&v59);
      double v33 = *(double *)(a1 + 40);
      int v34 = sub_1002A82BC(v59, "ProactiveLocMinInterval", &v57);
      double v35 = v57;
      if (!v34) {
        double v35 = v33;
      }
      *(double *)(a1 + 40) = v35;
      double v36 = v60;
      if (v60)
      {
        BOOL v37 = (unint64_t *)&v60->__shared_owners_;
        do
          unint64_t v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }

      sub_1002F0B04(&v59);
      double v39 = *(double *)(a1 + 48);
      int v40 = sub_1002A82BC(v59, "ProactiveLocGnssDailyLimit", &v57);
      double v41 = v57;
      if (!v40) {
        double v41 = v39;
      }
      *(double *)(a1 + 4_Block_object_dispose(va, 8) = v41;
      double v42 = v60;
      if (v60)
      {
        uint64_t v43 = (unint64_t *)&v60->__shared_owners_;
        do
          unint64_t v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }

      sub_1002F0B04(&v59);
      double v45 = *(double *)(a1 + 64);
      int v46 = sub_1002A82BC(v59, "ProactiveLocRateOverrideMaxSessionDuration", &v57);
      double v47 = v57;
      if (!v46) {
        double v47 = v45;
      }
      *(double *)(a1 + 64) = v47;
      uint64_t v48 = v60;
      if (v60)
      {
        unint64_t v49 = (unint64_t *)&v60->__shared_owners_;
        do
          unint64_t v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }

      *(void *)(a1 + 640) = *(void *)(a1 + 40);
      sub_100A9E608();
    }

    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*v29 + 8 * v30))();
  goto LABEL_39;
}

uint64_t sub_100AEDDE0()
{
  uint64_t v4 = v39;
  uint64_t v39 = 0LL;
  uint64_t v5 = *v1;
  *uint64_t v1 = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v6 = v39;
    uint64_t v39 = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  int v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v0 + 72);
    BOOL v9 = *(void *)(v0 + 152) != 0LL;
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 64);
    LODWORD(v39) = 67241217;
    HIDWORD(v39) = v8;
    __int16 v40 = 1026;
    BOOL v41 = v9;
    __int16 v42 = 2049;
    uint64_t v43 = v10;
    __int16 v44 = 2050;
    uint64_t v45 = v11;
    __int16 v46 = 2050;
    uint64_t v47 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,gnssProviderClient,%{public}d,minInterval,%{private}0.2f,dailyLimit,%{public}0.2 f,rateOverrideMaxSessDur,%{public}0.2f",  (uint8_t *)&v39,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v39, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v17 = *(unsigned __int8 *)(v0 + 72);
    BOOL v18 = *(void *)(v0 + 152) != 0LL;
    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v20 = *(void *)(v0 + 48);
    uint64_t v21 = *(void *)(v0 + 64);
    int v29 = 67241217;
    int v30 = v17;
    __int16 v31 = 1026;
    BOOL v32 = v18;
    __int16 v33 = 2049;
    uint64_t v34 = v19;
    __int16 v35 = 2050;
    uint64_t v36 = v20;
    __int16 v37 = 2050;
    uint64_t v38 = v21;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v39,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,gnssProviderClient,%{public}d,minInterval,%{private}0.2f,dailyLimit,%{public}0.2 f,rateOverrideMaxSessDur,%{public}0.2f",  &v29,  44);
    unint64_t v23 = (char *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLProactiveLocation::CLProactiveLocation(id<CLIntersiloUniverse>, const CLProactiveLocationNotificationCallbackTyp e, const CLProactiveLocationLikelyVisitExitCallbackType)",  "%s\n",  v22);
  }

  id v13 = objc_msgSend(objc_msgSend(*(id *)v0, "silo"), "newTimer");
  id *v3 = v13;
  if (v13)
  {
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_100AEE35C;
    void v28[3] = &unk_10181D3D0;
    v28[4] = v0;
    [v13 setHandler:v28];
    [*v3 setNextFireDelay:1.79769313e308];
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    double v14 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      int v15 = *v2;
      LODWORD(v39) = 67240192;
      HIDWORD(v39) = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "#CLProactiveLoc,active,%{public}d,fProactiveLocationTimer creation failed",  (uint8_t *)&v39,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v39, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v24 = *v2;
      int v29 = 67240192;
      int v30 = v24;
      LODWORD(v2memset(&v6[1], 0, 7) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v39,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#CLProactiveLoc,active,%{public}d,fProactiveLocationTimer creation failed",  &v29,  v27);
      unint64_t v26 = (char *)v25;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLProactiveLocation::CLProactiveLocation(id<CLIntersiloUniverse>, const CLProactiveLocationNotificationCallbackT ype, const CLProactiveLocationLikelyVisitExitCallbackType)",  "%s\n",  v25);
    }
  }

  return v0;
}

void sub_100AEE1D8(_Unwind_Exception *a1)
{
  int v7 = *(void **)(v1 + 632);
  if (v7 == v4)
  {
    uint64_t v8 = 4LL;
    int v7 = v4;
  }

  else
  {
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  BOOL v9 = *(void **)(v1 + 600);
  if (v9 == v3)
  {
    uint64_t v10 = 4LL;
    BOOL v9 = v3;
  }

  else
  {
    if (!v9) {
      goto LABEL_11;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  sub_100F0584C(v2);
  uint64_t v11 = *v5;
  uint64_t *v5 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  _Unwind_Resume(a1);
}

void sub_100AEE35C(uint64_t a1)
{
}

void sub_100AEE364(uint64_t a1)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  uint64_t v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v6 = *(unsigned __int8 *)(a1 + 72);
    int v13 = 67240192;
    int v14 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer",  &v13,  8);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::onProactiveLocationTimer()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  [*(id *)(a1 + 80) setNextFireDelay:1.79769313e308];
  if (*(_BYTE *)(a1 + 72))
  {
    sub_100AEE7D0(a1, 2);
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240192;
      int v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer,startTrigger",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v9 = *(unsigned __int8 *)(a1 + 72);
      int v13 = 67240192;
      int v14 = v9;
      LODWORD(v12) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer,startTrigger",  &v13,  v12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::onProactiveLocationTimer()", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    sub_100AEED84(a1);
  }

uint64_t sub_100AEE690(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 80) = 0LL;
  }

  int v3 = (void *)(a1 + 576);
  uint64_t v4 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = 0LL;
  if (v4 == (void *)(a1 + 576))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(a1 + 576);
  }

  else
  {
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  int v6 = (void *)(a1 + 608);
  int v7 = *(void **)(a1 + 632);
  *(void *)(a1 + 632) = 0LL;
  if (v7 == (void *)(a1 + 608))
  {
    uint64_t v8 = 4LL;
    int v7 = (void *)(a1 + 608);
  }

  else
  {
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:

  *(void *)a1 = 0LL;
  int v9 = *(void **)(a1 + 632);
  if (v9 == v6)
  {
    uint64_t v10 = 4LL;
  }

  else
  {
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = 5LL;
    int v6 = *(void **)(a1 + 632);
  }

  (*(void (**)(void *))(*v6 + 8 * v10))(v6);
LABEL_18:
  uint64_t v11 = *(void **)(a1 + 600);
  if (v11 == v3)
  {
    uint64_t v12 = 4LL;
  }

  else
  {
    if (!v11) {
      goto LABEL_23;
    }
    uint64_t v12 = 5LL;
    int v3 = *(void **)(a1 + 600);
  }

  (*(void (**)(void *))(*v3 + 8 * v12))(v3);
LABEL_23:
  sub_100F0584C(a1 + 352);
  uint64_t v13 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  return a1;
}

void sub_100AEE7D0(uint64_t a1, int a2)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  uint64_t v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v24 = v5;
    __int16 v25 = 1026;
    int v26 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,reason,%{public}d,stopPositionRequest",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v11 = *(unsigned __int8 *)(a1 + 72);
    int v17 = 67240448;
    int v18 = v11;
    __int16 v19 = 1026;
    int v20 = a2;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,reason,%{public}d,stopPositionRequest",  &v17,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::stopPositionRequest(ProactiveLocationSessionEndReason)",  "%s\n",  v12);
  }

  uint64_t v6 = *(void *)(a1 + 152);
  if (v6 && *(_BYTE *)(a1 + 72))
  {
    [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:0];
    *(_BYTE *)(a1 + 72) = 0;
    uint64_t v7 = sub_10080E94C();
    *(_DWORD *)CLMotionActivity buf = 1;
    *(double *)(a1 + 120) = sub_10080EB58(v7, buf);
    *(_DWORD *)(a1 + 144) = a2;
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a1 + 74);
    sub_100AEEB78(a1, *(double *)(a1 + 40));
    sub_100AEFFEC(a1);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10186F270);
    }
    uint64_t v8 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 72);
      int v10 = *(unsigned __int8 *)(a1 + 75);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v24 = v9;
      __int16 v25 = 1026;
      int v26 = a2;
      __int16 v27 = 1026;
      int v28 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#wigo,off,#CLProactiveLoc,active,%{public}d,reason,%{public}d,staticCheckpoint,%{public}d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10186F270);
      }
      int v13 = *(unsigned __int8 *)(a1 + 72);
      int v14 = *(unsigned __int8 *)(a1 + 75);
      int v17 = 67240704;
      int v18 = v13;
      __int16 v19 = 1026;
      int v20 = a2;
      __int16 v21 = 1026;
      int v22 = v14;
      LODWORD(v16) = 20;
      int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,off,#CLProactiveLoc,active,%{public}d,reason,%{public}d,staticCheckpoint,%{public}d",  &v17,  v16);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::stopPositionRequest(ProactiveLocationSessionEndReason)",  "%s\n",  v15);
    }
  }

id sub_100AEEB78(uint64_t a1, double a2)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  uint64_t v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    double v6 = 0.0;
    if (a2 < 1.79769313e308) {
      double v6 = a2;
    }
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v15 = v5;
    __int16 v16 = 2050;
    double v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,updateTimer,%{public}0.2f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v8 = *(unsigned __int8 *)(a1 + 72);
    double v9 = 0.0;
    if (a2 < 1.79769313e308) {
      double v9 = a2;
    }
    v11[0] = 67240448;
    v11[1] = v8;
    __int16 v12 = 2050;
    double v13 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,updateTimer,%{public}0.2f",  v11,  18);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::updateTimer(const double)", "%s\n", v10);
  }

  id result = *(id *)(a1 + 80);
  if (result) {
    return [result setNextFireDelay:a2];
  }
  return result;
}

void sub_100AEED84(uint64_t a1)
{
  uint64_t v2 = sub_10080E94C();
  *(_DWORD *)CLMotionActivity buf = 1;
  double v3 = sub_10080EB58(v2, buf);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  uint64_t v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v6 = sub_10080E94C();
    double v7 = sub_10080EF30(v6);
    *(_DWORD *)CLMotionActivity buf = 67240704;
    int v77 = v5;
    __int16 v78 = 2050;
    *(double *)double v79 = v3;
    *(_WORD *)&v79[8] = 2050;
    double v80 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,proactiveLocationStartCheck,mct,%{public}.3f,propagation_us,%{public}.3f",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    uint64_t v38 = qword_101934838;
    int v39 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v40 = sub_10080E94C();
    int v54 = 67240704;
    int v55 = v39;
    __int16 v56 = 2050;
    *(double *)double v57 = v3;
    *(_WORD *)&v57[8] = 2050;
    double v58 = sub_10080EF30(v40);
    BOOL v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  2LL,  "#CLProactiveLoc,active,%{public}d,proactiveLocationStartCheck,mct,%{public}.3f,propagation_us,%{public}.3f",  &v54,  28);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v41);
  }

  sub_100AEF918(a1, v3);
  if (*(double *)(a1 + 48) <= *(double *)(a1 + 216))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v14 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v16 = *(void *)(a1 + 48);
      double v17 = *(double *)(a1 + 216);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v77 = v15;
      __int16 v78 = 2050;
      *(void *)double v79 = v16;
      *(_WORD *)&v79[8] = 2050;
      double v80 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,dailyGNSSLimitReached,limit,%{public}0.2f,usage,%{public}0.2f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v18 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 48);
      double v20 = *(double *)(a1 + 216);
      int v54 = 67240704;
      int v55 = v18;
      __int16 v56 = 2050;
      *(void *)double v57 = v19;
      *(_WORD *)&v57[8] = 2050;
      double v58 = v20;
      LODWORD(v53) = 28;
      __int16 v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,dailyGNSSLimitReached,limit,%{public}0.2f,usage,%{public}0.2f",  &v54,  v53);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v21);
    }
  }

  else
  {
    else {
      double v8 = 0.0;
    }
    else {
      double v9 = 0.0;
    }
    double v10 = *(double *)(a1 + 40);
    BOOL v11 = v9 > v10 && v8 > v10;
    if (v11)
    {
      int v12 = 0;
      int v13 = 1;
    }

    else
    {
      int v13 = sub_100AEF620(a1);
      int v12 = v13;
    }

    BOOL v22 = (*(_BYTE *)(a1 + 73) || *(_BYTE *)(a1 + 344))
       && !*(_BYTE *)(a1 + 76)
       && !*(_BYTE *)(a1 + 77)
       && !*(_BYTE *)(a1 + 78)
       && !*(_BYTE *)(a1 + 75)
       && *(_BYTE *)(a1 + 568) == 0;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    unint64_t v23 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(unsigned __int8 *)(a1 + 72);
      int v25 = *(unsigned __int8 *)(a1 + 73);
      int v26 = *(unsigned __int8 *)(a1 + 76);
      BOOL v27 = *(_BYTE *)(a1 + 77) == 0;
      BOOL v28 = *(_BYTE *)(a1 + 78) == 0;
      int v29 = *(unsigned __int8 *)(a1 + 344);
      int v30 = *(unsigned __int8 *)(a1 + 75);
      int v31 = *(unsigned __int8 *)(a1 + 568);
      *(_DWORD *)CLMotionActivity buf = 67243265;
      int v77 = v24;
      __int16 v78 = 1025;
      *(_DWORD *)double v79 = v25;
      *(_WORD *)&v79[4] = 1026;
      *(_DWORD *)&v79[6] = v11;
      LOWORD(v80) = 1026;
      *(_DWORD *)((char *)&v80 + 2) = v26;
      HIWORD(v80) = 1026;
      BOOL v81 = v27;
      __int16 v82 = 1026;
      BOOL v83 = v28;
      __int16 v84 = 1026;
      int v85 = 1;
      __int16 v86 = 2050;
      double v87 = v8;
      __int16 v88 = 2050;
      double v89 = v9;
      __int16 v90 = 1026;
      int v91 = v29;
      __int16 v92 = 1026;
      int v93 = v12;
      __int16 v94 = 1026;
      int v95 = v30;
      __int16 v96 = 1026;
      int v97 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,startCheck,outVisit,%{private}d,rate,%{public}d,lowPower,%{public}d,locService ,%{public}d,MA,%{public}d,posUnc,%{public}d,secFromLastConvergedFix,%{public}0.2f,secFromLastProactiveLoc,%{publ ic}0.2f,inVisitOverride,%{public}d,rateOverride,%{public}d,staticOverride,%{public}d,pendingAPSleep,%{public}d",  buf,  0x58u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v42 = *(unsigned __int8 *)(a1 + 72);
      int v43 = *(unsigned __int8 *)(a1 + 73);
      int v44 = *(unsigned __int8 *)(a1 + 76);
      BOOL v45 = *(_BYTE *)(a1 + 77) == 0;
      BOOL v46 = *(_BYTE *)(a1 + 78) == 0;
      int v47 = *(unsigned __int8 *)(a1 + 344);
      int v48 = *(unsigned __int8 *)(a1 + 75);
      int v49 = *(unsigned __int8 *)(a1 + 568);
      int v54 = 67243265;
      int v55 = v42;
      __int16 v56 = 1025;
      *(_DWORD *)double v57 = v43;
      *(_WORD *)&v57[4] = 1026;
      *(_DWORD *)&v57[6] = v11;
      LOWORD(v5_Block_object_dispose(va, 8) = 1026;
      *(_DWORD *)((char *)&v58 + 2) = v44;
      HIWORD(v5_Block_object_dispose(va, 8) = 1026;
      BOOL v59 = v45;
      __int16 v60 = 1026;
      BOOL v61 = v46;
      __int16 v62 = 1026;
      int v63 = 1;
      __int16 v64 = 2050;
      double v65 = v8;
      __int16 v66 = 2050;
      double v67 = v9;
      __int16 v68 = 1026;
      int v69 = v47;
      __int16 v70 = 1026;
      int v71 = v12;
      __int16 v72 = 1026;
      int v73 = v48;
      __int16 v74 = 1026;
      int v75 = v49;
      LODWORD(v53) = 88;
      unint64_t v50 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,startCheck,outVisit,%{private}d,rate,%{public}d,lowPower,%{publi c}d,locService,%{public}d,MA,%{public}d,posUnc,%{public}d,secFromLastConvergedFix,%{public}0.2f,se cFromLastProactiveLoc,%{public}0.2f,inVisitOverride,%{public}d,rateOverride,%{public}d,staticOverr ide,%{public}d,pendingAPSleep,%{public}d",  &v54,  v53);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v50);
    }

    if (v22)
    {
      if (v13)
      {
        sub_100AEFB20(a1);
      }

      else
      {
        double v32 = *(double *)(a1 + 40);
        if (v8 >= v32) {
          double v33 = 0.0;
        }
        else {
          double v33 = v32 - v8;
        }
        if (v9 >= v32) {
          double v34 = 0.0;
        }
        else {
          double v34 = v32 - v9;
        }
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_10186F250);
        }
        __int16 v35 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
        {
          int v36 = *(unsigned __int8 *)(a1 + 72);
          *(_DWORD *)CLMotionActivity buf = 67240704;
          int v77 = v36;
          __int16 v78 = 2050;
          *(double *)double v79 = v33;
          *(_WORD *)&v79[8] = 2050;
          double v80 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,deltaWrtConvergedFix,%{public}0.2f,deltaWrtProactiveSess,%{public}0.2f",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_10186F250);
          }
          int v51 = *(unsigned __int8 *)(a1 + 72);
          int v54 = 67240704;
          int v55 = v51;
          __int16 v56 = 2050;
          *(double *)double v57 = v33;
          *(_WORD *)&v57[8] = 2050;
          double v58 = v34;
          LODWORD(v53) = 28;
          double v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,deltaWrtConvergedFix,%{public}0.2f,deltaWrtProactiveSess,%{public}0.2f",  &v54,  v53);
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v52);
        }

        if (v33 >= v34) {
          double v37 = v33;
        }
        else {
          double v37 = v34;
        }
        if (v37 < 0.2) {
          double v37 = 0.2;
        }
        sub_100AEEB78(a1, v37);
      }
    }
  }

uint64_t sub_100AEF620(uint64_t a1)
{
  else {
    unsigned int v2 = 0;
  }
  double v3 = *(double *)(a1 + 112);
  int v4 = *(unsigned __int8 *)(a1 + 136);
  if (v3 > 0.0) {
    unsigned int v5 = v2;
  }
  else {
    unsigned int v5 = 0;
  }
  double v6 = *(double *)(a1 + 120) - v3;
  double v7 = *(double *)(a1 + 64);
  if (*(_BYTE *)(a1 + 136)) {
    unsigned int v5 = 0;
  }
  if (v6 <= v7) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = 0;
  }
  int v9 = *(_DWORD *)(a1 + 140);
  int v10 = *(_DWORD *)(a1 + 144);
  if (v10 != 1) {
    unsigned int v8 = 0;
  }
  if (v9 > 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0LL;
  }
  if ((_DWORD)v11 == 1) {
    *(_DWORD *)(a1 + 140) = v9 - 1;
  }
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  int v12 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(unsigned __int8 *)(a1 + 72);
    int v14 = *(_DWORD *)(a1 + 140);
    *(_DWORD *)CLMotionActivity buf = 67241984;
    int v35 = v13;
    __int16 v36 = 1026;
    int v37 = v11;
    __int16 v38 = 1026;
    unsigned int v39 = v2;
    __int16 v40 = 1026;
    BOOL v41 = v3 > 0.0;
    __int16 v42 = 1026;
    BOOL v43 = v4 == 0;
    __int16 v44 = 1026;
    BOOL v45 = v6 <= v7;
    __int16 v46 = 1026;
    BOOL v47 = v10 == 1;
    __int16 v48 = 1026;
    int v49 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,isRateOverrideTrue,%{public}d,isSessRtryAllowed,%{public}d,notFirstSession,%{pub lic}d,prevNoYield,%{public}d,prevSessionDurationSmall,%{public}d,prevAPSleep,%{public}d,remainingAttempts,%{public}d",  buf,  0x32u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v16 = *(unsigned __int8 *)(a1 + 72);
    int v17 = *(_DWORD *)(a1 + 140);
    v19[0] = 67241984;
    v19[1] = v16;
    __int16 v20 = 1026;
    int v21 = v11;
    __int16 v22 = 1026;
    unsigned int v23 = v2;
    __int16 v24 = 1026;
    BOOL v25 = v3 > 0.0;
    __int16 v26 = 1026;
    BOOL v27 = v4 == 0;
    __int16 v28 = 1026;
    BOOL v29 = v6 <= v7;
    __int16 v30 = 1026;
    BOOL v31 = v10 == 1;
    __int16 v32 = 1026;
    int v33 = v17;
    int v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,isRateOverrideTrue,%{public}d,isSessRtryAllowed,%{public}d,notFirs tSession,%{public}d,prevNoYield,%{public}d,prevSessionDurationSmall,%{public}d,prevAPSleep,%{public} d,remainingAttempts,%{public}d",  v19,  50);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLProactiveLocation::isRateOverrideTrue()", "%s\n", v18);
  }

  return v11;
}

void sub_100AEF918(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 160);
  if (v3 <= a2)
  {
    if (a2 - v3 >= 86400.0)
    {
      sub_100F06B20(a1 + 352, a1 + 168);
      sub_100DD738C(a1 + 168);
      sub_100AF2968(a1);
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#LCStats,submitMetrics,CurrentMCT < CA baseline time",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      v6[0] = 0;
      unsigned int v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#LCStats,submitMetrics,CurrentMCT < CA baseline time",  v6,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLProactiveLocation::statsSubmission(const CFTimeInterval)",  "%s\n",  v5);
    }

    sub_100AF2968(a1);
  }

void sub_100AEFB20(uint64_t a1)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  unsigned int v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v35 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,startPositionRequest",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v26 = *(unsigned __int8 *)(a1 + 72);
    LODWORD(v31) = 67240192;
    DWORD1(v31) = v26;
    BOOL v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,startPositionRequest",  &v31,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::startPositionRequest()", "%s\n", v27);
  }

  if (*(void *)(a1 + 152) && !*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 1;
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10186F270);
    }
    int v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240192;
      int v35 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#wigo,on,#CLProactiveLoc,active,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10186F270);
      }
      int v28 = *(unsigned __int8 *)(a1 + 72);
      LODWORD(v31) = 67240192;
      DWORD1(v31) = v28;
      LODWORD(v30) = 8;
      BOOL v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,on,#CLProactiveLoc,active,%{public}d",  &v31,  v30);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::startPositionRequest()", "%s\n", v29);
    }

    *(_OWORD *)(a1 + 104) = 0u;
    int v6 = *(_DWORD *)(a1 + 140);
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 132) = 0u;
    uint64_t v7 = sub_10080E94C();
    *(_DWORD *)CLMotionActivity buf = 1;
    double v8 = sub_10080EB58(v7, buf);
    *(double *)(a1 + 112) = v8;
    *(_DWORD *)(a1 + 140) = v6;
    double v9 = v8 - *(double *)(a1 + 96);
    double v10 = v8 - *(double *)(a1 + 88);
    if (v10 >= v9) {
      double v10 = v9;
    }
    *(double *)(a1 + 104) = v10;
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v31 = _Q0;
    __int16 v32 = 0;
    uint64_t v33 = 11LL;
    [*(id *)(*(void *)(a1 + 152) + 16) register:*(void *)(*(void *)(a1 + 152) + 8) forNotification:0 registrationInfo:sub_100419014(&v31)];
    sub_100AEEB78(a1, *(double *)(a1 + 32));
    if (*(void *)(a1 + 600))
    {
      sub_100246564((uint64_t)buf);
      int v42 = 0;
      uint64_t v16 = *(void *)(a1 + 600);
      if (!v16) {
        sub_100008BDC();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v16 + 48LL))(v16, buf);

      int v17 = v40;
      if (v40)
      {
        p_uint64_t shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          unint64_t v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }

      if (v39 < 0) {
        operator delete(__p);
      }
      __int16 v20 = v37;
      if (v37)
      {
        int v21 = (unint64_t *)&v37->__shared_owners_;
        do
          unint64_t v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }

      unsigned int v23 = v36;
      if (v36)
      {
        __int16 v24 = (unint64_t *)&v36->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }

void sub_100AEFFC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AEFFEC(uint64_t a1)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  unsigned int v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v103 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,statsUpdateOnSessionEnd",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v53 = *(unsigned __int8 *)(a1 + 72);
    int v91 = 67240192;
    int v92 = v53;
    int v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,statsUpdateOnSessionEnd",  &v91,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v54);
  }

  double v5 = *(double *)(a1 + 112);
  double v4 = *(double *)(a1 + 120);
  if (v4 > v5)
  {
    double v6 = v4 - v5;
    *(double *)(a1 + 216) = v4 - v5 + *(double *)(a1 + 216);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    uint64_t v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v9 = *(void *)(a1 + 216);
      *(_DWORD *)CLMotionActivity buf = 67240705;
      int v103 = v8;
      __int16 v104 = 2049;
      *(double *)__int128 v105 = v6;
      *(_WORD *)&v105[8] = 2049;
      *(void *)__int128 v106 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,stats,dailyPositionReqActiveSec,%{private}0.2f,total,%{private}0.2f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v87 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v88 = *(void *)(a1 + 216);
      int v91 = 67240705;
      int v92 = v87;
      __int16 v93 = 2049;
      *(double *)__int16 v94 = v6;
      *(_WORD *)&v94[8] = 2049;
      *(void *)int v95 = v88;
      LODWORD(v90) = 28;
      double v89 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,stats,dailyPositionReqActiveSec,%{private}0.2f,total,%{private}0.2f",  &v91,  v90);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v89);
    }

    if (*(void *)(a1 + 600))
    {
      sub_100246564((uint64_t)buf);
      int v119 = 1;
      double v120 = v6;
      uint64_t v10 = *(void *)(a1 + 600);
      if (!v10) {
        sub_100008BDC();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 48LL))(v10, buf);

      uint64_t v11 = v117;
      if (v117)
      {
        p_uint64_t shared_owners = (unint64_t *)&v117->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }

      if (v116 < 0) {
        operator delete(__p);
      }
      int v14 = v114;
      if (v114)
      {
        int v15 = (unint64_t *)&v114->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }

      int v17 = v113;
      if (v113)
      {
        int v18 = (unint64_t *)&v113->__shared_owners_;
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }

    ++*(_DWORD *)(a1 + 184);
    if (!*(_BYTE *)(a1 + 136)) {
      ++*(_DWORD *)(a1 + 192);
    }
    switch(*(_DWORD *)(a1 + 144))
    {
      case 1:
        ++*(_DWORD *)(a1 + 200);
        break;
      case 2:
        ++*(_DWORD *)(a1 + 196);
        break;
      case 3:
        ++*(_DWORD *)(a1 + 204);
        break;
      case 4:
        ++*(_DWORD *)(a1 + 208);
        break;
      case 5:
        ++*(_DWORD *)(a1 + 212);
        break;
      case 7:
        ++*(_DWORD *)(a1 + 188);
        if (v6 >= 3.0)
        {
          if (v6 >= 5.0)
          {
            if (v6 >= 8.0)
            {
              if (v6 >= 10.0)
              {
                if (v6 >= 15.0) {
                  ++*(_DWORD *)(a1 + 244);
                }
                else {
                  ++*(_DWORD *)(a1 + 240);
                }
              }

              else
              {
                ++*(_DWORD *)(a1 + 236);
              }
            }

            else
            {
              ++*(_DWORD *)(a1 + 232);
            }
          }

          else
          {
            ++*(_DWORD *)(a1 + 228);
          }
        }

        else
        {
          ++*(_DWORD *)(a1 + 224);
        }

        break;
      default:
        break;
    }

    double v20 = *(double *)(a1 + 104);
    if (v20 >= 180.0)
    {
      if (v20 >= 300.0)
      {
        if (v20 >= 600.0)
        {
          if (v20 >= 900.0)
          {
            if (v20 >= 1200.0)
            {
              if (v20 >= 1800.0) {
                ++*(_DWORD *)(a1 + 272);
              }
              else {
                ++*(_DWORD *)(a1 + 268);
              }
            }

            else
            {
              ++*(_DWORD *)(a1 + 264);
            }
          }

          else
          {
            ++*(_DWORD *)(a1 + 260);
          }
        }

        else
        {
          ++*(_DWORD *)(a1 + 256);
        }
      }

      else
      {
        ++*(_DWORD *)(a1 + 252);
      }
    }

    else
    {
      ++*(_DWORD *)(a1 + 248);
    }
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  int v21 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int8 *)(a1 + 72);
    int v23 = *(_DWORD *)(a1 + 200);
    int v24 = *(_DWORD *)(a1 + 204);
    int v25 = *(_DWORD *)(a1 + 208);
    int v26 = *(_DWORD *)(a1 + 184);
    int v27 = *(_DWORD *)(a1 + 188);
    int v29 = *(_DWORD *)(a1 + 192);
    int v28 = *(_DWORD *)(a1 + 196);
    uint64_t v30 = *(void *)(a1 + 216);
    *(_DWORD *)CLMotionActivity buf = 67242240;
    int v103 = v22;
    __int16 v104 = 1026;
    *(_DWORD *)__int128 v105 = v26;
    *(_WORD *)&uint8_t v105[4] = 1026;
    *(_DWORD *)&v105[6] = v23;
    *(_WORD *)__int128 v106 = 1026;
    *(_DWORD *)&v106[2] = v28;
    *(_WORD *)&v106[6] = 1026;
    *(_DWORD *)&v106[8] = v24;
    *(_WORD *)__int128 v107 = 1026;
    *(_DWORD *)&v107[2] = v25;
    *(_WORD *)unint64_t v108 = 1026;
    *(_DWORD *)&v108[2] = v27;
    __int16 v109 = 1026;
    int v110 = v29;
    __int16 v111 = 2050;
    uint64_t v112 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,overallStats,count,%{public}d,APSleep,%{public}d,Timeout,%{public}d,VisitEnd,%{p ublic}d,lowPowerMode,%{public}d,converged,%{public}d,noYield,%{public}d,total,%{public}0.2f",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v55 = *(unsigned __int8 *)(a1 + 72);
    int v56 = *(_DWORD *)(a1 + 200);
    int v57 = *(_DWORD *)(a1 + 204);
    int v58 = *(_DWORD *)(a1 + 208);
    int v59 = *(_DWORD *)(a1 + 184);
    int v60 = *(_DWORD *)(a1 + 188);
    int v62 = *(_DWORD *)(a1 + 192);
    int v61 = *(_DWORD *)(a1 + 196);
    uint64_t v63 = *(void *)(a1 + 216);
    int v91 = 67242240;
    int v92 = v55;
    __int16 v93 = 1026;
    *(_DWORD *)__int16 v94 = v59;
    *(_WORD *)&v94[4] = 1026;
    *(_DWORD *)&v94[6] = v56;
    *(_WORD *)int v95 = 1026;
    *(_DWORD *)&v95[2] = v61;
    *(_WORD *)&v95[6] = 1026;
    *(_DWORD *)&v95[8] = v57;
    *(_WORD *)__int16 v96 = 1026;
    *(_DWORD *)&v96[2] = v58;
    *(_WORD *)int v97 = 1026;
    *(_DWORD *)&v97[2] = v60;
    __int16 v98 = 1026;
    int v99 = v62;
    __int16 v100 = 2050;
    uint64_t v101 = v63;
    LODWORD(v90) = 60;
    __int16 v64 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,overallStats,count,%{public}d,APSleep,%{public}d,Timeout,%{public} d,VisitEnd,%{public}d,lowPowerMode,%{public}d,converged,%{public}d,noYield,%{public}d,total,%{public}0.2f",  &v91,  v90);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v64);
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  __int128 v31 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = *(_DWORD *)(a1 + 224);
    int v33 = *(_DWORD *)(a1 + 228);
    int v34 = *(_DWORD *)(a1 + 232);
    int v35 = *(_DWORD *)(a1 + 236);
    int v36 = *(_DWORD *)(a1 + 240);
    int v37 = *(_DWORD *)(a1 + 244);
    *(_DWORD *)CLMotionActivity buf = 67241472;
    int v103 = v32;
    __int16 v104 = 1026;
    *(_DWORD *)__int128 v105 = v33;
    *(_WORD *)&uint8_t v105[4] = 1026;
    *(_DWORD *)&v105[6] = v34;
    *(_WORD *)__int128 v106 = 1026;
    *(_DWORD *)&v106[2] = v35;
    *(_WORD *)&v106[6] = 1026;
    *(_DWORD *)&v106[8] = v36;
    *(_WORD *)__int128 v107 = 1026;
    *(_DWORD *)&v107[2] = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,convergedFixSessDurationStats,[0,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8,10),%{public}d ,[10,15),%{public}d,[15,),%{public}d",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v65 = *(_DWORD *)(a1 + 224);
    int v66 = *(_DWORD *)(a1 + 228);
    int v67 = *(_DWORD *)(a1 + 232);
    int v68 = *(_DWORD *)(a1 + 236);
    int v69 = *(_DWORD *)(a1 + 240);
    int v70 = *(_DWORD *)(a1 + 244);
    int v91 = 67241472;
    int v92 = v65;
    __int16 v93 = 1026;
    *(_DWORD *)__int16 v94 = v66;
    *(_WORD *)&v94[4] = 1026;
    *(_DWORD *)&v94[6] = v67;
    *(_WORD *)int v95 = 1026;
    *(_DWORD *)&v95[2] = v68;
    *(_WORD *)&v95[6] = 1026;
    *(_DWORD *)&v95[8] = v69;
    *(_WORD *)__int16 v96 = 1026;
    *(_DWORD *)&v96[2] = v70;
    LODWORD(v90) = 38;
    int v71 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,convergedFixSessDurationStats,[0,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8, 10),%{public}d,[10,15),%{public}d,[15,),%{public}d",  &v91,  v90);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v71);
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  __int16 v38 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = *(_DWORD *)(a1 + 248);
    int v40 = *(_DWORD *)(a1 + 252);
    int v41 = *(_DWORD *)(a1 + 256);
    int v42 = *(_DWORD *)(a1 + 260);
    int v43 = *(_DWORD *)(a1 + 264);
    int v44 = *(_DWORD *)(a1 + 268);
    int v45 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)CLMotionActivity buf = 67241728;
    int v103 = v39;
    __int16 v104 = 1026;
    *(_DWORD *)__int128 v105 = v40;
    *(_WORD *)&uint8_t v105[4] = 1026;
    *(_DWORD *)&v105[6] = v41;
    *(_WORD *)__int128 v106 = 1026;
    *(_DWORD *)&v106[2] = v42;
    *(_WORD *)&v106[6] = 1026;
    *(_DWORD *)&v106[8] = v43;
    *(_WORD *)__int128 v107 = 1026;
    *(_DWORD *)&v107[2] = v44;
    *(_WORD *)unint64_t v108 = 1026;
    *(_DWORD *)&v108[2] = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,sessIntervalStats,[0,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{public}d,[15,20),% {public}d,[20,30),%{public}d,[30,),%{public}d",  buf,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v72 = *(_DWORD *)(a1 + 248);
    int v73 = *(_DWORD *)(a1 + 252);
    int v74 = *(_DWORD *)(a1 + 256);
    int v75 = *(_DWORD *)(a1 + 260);
    int v76 = *(_DWORD *)(a1 + 264);
    int v77 = *(_DWORD *)(a1 + 268);
    int v78 = *(_DWORD *)(a1 + 272);
    int v91 = 67241728;
    int v92 = v72;
    __int16 v93 = 1026;
    *(_DWORD *)__int16 v94 = v73;
    *(_WORD *)&v94[4] = 1026;
    *(_DWORD *)&v94[6] = v74;
    *(_WORD *)int v95 = 1026;
    *(_DWORD *)&v95[2] = v75;
    *(_WORD *)&v95[6] = 1026;
    *(_DWORD *)&v95[8] = v76;
    *(_WORD *)__int16 v96 = 1026;
    *(_DWORD *)&v96[2] = v77;
    *(_WORD *)int v97 = 1026;
    *(_DWORD *)&v97[2] = v78;
    LODWORD(v90) = 44;
    double v79 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,sessIntervalStats,[0,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{publ ic}d,[15,20),%{public}d,[20,30),%{public}d,[30,),%{public}d",  &v91,  v90);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v79);
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  __int16 v46 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v47 = *(_DWORD *)(a1 + 288);
    uint64_t v48 = *(void *)(a1 + 280);
    int v49 = *(_DWORD *)(a1 + 292);
    int v50 = *(_DWORD *)(a1 + 296);
    int v51 = *(_DWORD *)(a1 + 300);
    int v52 = *(_DWORD *)(a1 + 304);
    *(_DWORD *)CLMotionActivity buf = 67241472;
    int v103 = v47;
    __int16 v104 = 2050;
    *(void *)__int128 v105 = v48;
    *(_WORD *)&v105[8] = 1026;
    *(_DWORD *)__int128 v106 = v49;
    *(_WORD *)&v106[4] = 1026;
    *(_DWORD *)&v106[6] = v50;
    *(_WORD *)&v106[10] = 1026;
    *(_DWORD *)__int128 v107 = v51;
    *(_WORD *)&v107[4] = 1026;
    *(_DWORD *)unint64_t v108 = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,APWakeStats,count,%{public}d,totalDuration,%{public}0.2f,[0,10),%{public}d,[10,20),%{public}d,[20, 30),%{public}d,[30,),%{public}d",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v80 = *(_DWORD *)(a1 + 288);
    uint64_t v81 = *(void *)(a1 + 280);
    int v82 = *(_DWORD *)(a1 + 292);
    int v83 = *(_DWORD *)(a1 + 296);
    int v84 = *(_DWORD *)(a1 + 300);
    int v85 = *(_DWORD *)(a1 + 304);
    int v91 = 67241472;
    int v92 = v80;
    __int16 v93 = 2050;
    *(void *)__int16 v94 = v81;
    *(_WORD *)&v94[8] = 1026;
    *(_DWORD *)int v95 = v82;
    *(_WORD *)&v95[4] = 1026;
    *(_DWORD *)&v95[6] = v83;
    *(_WORD *)&v95[10] = 1026;
    *(_DWORD *)__int16 v96 = v84;
    *(_WORD *)&v96[4] = 1026;
    *(_DWORD *)int v97 = v85;
    LODWORD(v90) = 42;
    __int16 v86 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,APWakeStats,count,%{public}d,totalDuration,%{public}0.2f,[0,10),%{public}d,[10,20),% {public}d,[20,30),%{public}d,[30,),%{public}d",  &v91,  v90);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v86);
  }

void sub_100AF0D98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AF0DE0(uint64_t a1, void *a2)
{
  if (a2)
  {
    else {
      int v4 = [a2 hasArrivalDate];
    }
    int v5 = v4 ^ 1;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    double v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240449;
      int v16 = v7;
      __int16 v17 = 1025;
      int v18 = v4 ^ 1;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,feedVisit,isOutsideVisit,%{private}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v10 = *(unsigned __int8 *)(a1 + 72);
      v12[0] = 67240449;
      v12[1] = v10;
      __int16 v13 = 1025;
      int v14 = v4 ^ 1;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,feedVisit,isOutsideVisit,%{private}d",  v12,  14);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::feedVisit(const CLVisit *)", "%s\n", v11);
    }

    if (*(unsigned __int8 *)(a1 + 73) != v5)
    {
      *(_BYTE *)(a1 + 73) = v5;
      uint64_t v8 = sub_10080E94C();
      *(_DWORD *)CLMotionActivity buf = 1;
      *(double *)(a1 + 8_Block_object_dispose(va, 8) = sub_10080EB58(v8, buf);
      if (*(_BYTE *)(a1 + 73))
      {
        *(_BYTE *)(a1 + 344) = 0;
        sub_100AEED84(a1);
      }

      else
      {
        sub_100AEE7D0(a1, 3);
        sub_100AEEB78(a1, *(double *)(a1 + 40));
        if (!objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType"))
        {
          char v9 = objc_msgSend(objc_msgSend(a2, "_placeInference"), "placeType") != (id)2;
          goto LABEL_15;
        }
      }
    }

    char v9 = 0;
LABEL_15:
    sub_100F05F40(a1 + 352, v4, v9);
  }

BOOL sub_100AF106C(uint64_t a1, uint64_t a2)
{
  if (!sub_100869780(a2) || (double v4 = *(double *)(a2 + 20), v4 <= 0.0))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240192;
      int v60 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,invalid,fix",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v35 = *(unsigned __int8 *)(a1 + 72);
      int v37 = 67240192;
      int v38 = v35;
      int v36 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,invalid,fix",  &v37,  8);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLProactiveLocation::isPositionFixConverged(const CLDaemonLocation &)",  "%s\n",  v36);
    }

    return 0LL;
  }

  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) != 1) {
    return 0LL;
  }
  BOOL v6 = *(double *)(a2 + 44) < 0.0 || (v5 = *(double *)(a2 + 52), v5 <= 0.0) || v5 >= *(double *)(a1 + 16);
  v12 = *(double *)(a2 + 60) >= 0.0 && (double v11 = *(double *)(a2 + 68), v11 > 0.0) && v11 < *(double *)(a1 + 24);
  BOOL v9 = !v6;
  if (!v6 && !v12) {
    BOOL v9 = *(_BYTE *)(a1 + 74) != 0;
  }
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  __int16 v13 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *(unsigned __int8 *)(a1 + 72);
    int v15 = *(_DWORD *)(a2 + 96);
    uint64_t v16 = *(void *)(a2 + 4);
    uint64_t v17 = *(void *)(a2 + 12);
    uint64_t v18 = *(void *)(a2 + 20);
    uint64_t v19 = *(void *)(a2 + 44);
    uint64_t v20 = *(void *)(a2 + 52);
    uint64_t v21 = *(void *)(a2 + 60);
    uint64_t v22 = *(void *)(a2 + 68);
    int v23 = *(unsigned __int8 *)(a1 + 73);
    *(_DWORD *)CLMotionActivity buf = 67242753;
    int v60 = v14;
    __int16 v61 = 1026;
    int v62 = v15;
    __int16 v63 = 2049;
    uint64_t v64 = v16;
    __int16 v65 = 2049;
    uint64_t v66 = v17;
    __int16 v67 = 2049;
    uint64_t v68 = v18;
    __int16 v69 = 2049;
    uint64_t v70 = v19;
    __int16 v71 = 2049;
    uint64_t v72 = v20;
    __int16 v73 = 2049;
    uint64_t v74 = v21;
    __int16 v75 = 2049;
    uint64_t v76 = v22;
    __int16 v77 = 1025;
    int v78 = v23;
    __int16 v79 = 1026;
    BOOL v80 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,type,%{public}d,lat,%{private}0.2f,lon,%{private}0.2f,hun c,%{private}0.2f,speed,%{private}0.2f,sunc,%{private}0.2f,course,%{private}0.2f,courseunc,%{private}0.2f,outvisit, %{private}d,convergedFix,%{public}d",  buf,  0x60u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v24 = *(unsigned __int8 *)(a1 + 72);
    int v25 = *(_DWORD *)(a2 + 96);
    uint64_t v26 = *(void *)(a2 + 4);
    uint64_t v27 = *(void *)(a2 + 12);
    uint64_t v28 = *(void *)(a2 + 20);
    uint64_t v29 = *(void *)(a2 + 44);
    uint64_t v30 = *(void *)(a2 + 52);
    uint64_t v31 = *(void *)(a2 + 60);
    uint64_t v32 = *(void *)(a2 + 68);
    int v33 = *(unsigned __int8 *)(a1 + 73);
    int v37 = 67242753;
    int v38 = v24;
    __int16 v39 = 1026;
    int v40 = v25;
    __int16 v41 = 2049;
    uint64_t v42 = v26;
    __int16 v43 = 2049;
    uint64_t v44 = v27;
    __int16 v45 = 2049;
    uint64_t v46 = v28;
    __int16 v47 = 2049;
    uint64_t v48 = v29;
    __int16 v49 = 2049;
    uint64_t v50 = v30;
    __int16 v51 = 2049;
    uint64_t v52 = v31;
    __int16 v53 = 2049;
    uint64_t v54 = v32;
    __int16 v55 = 1025;
    int v56 = v33;
    __int16 v57 = 1026;
    BOOL v58 = v9;
    int v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,isPositionFixConverged,type,%{public}d,lat,%{private}0.2f,lon,%{pr ivate}0.2f,hunc,%{private}0.2f,speed,%{private}0.2f,sunc,%{private}0.2f,course,%{private}0.2f,course unc,%{private}0.2f,outvisit,%{private}d,convergedFix,%{public}d",  &v37,  96);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLProactiveLocation::isPositionFixConverged(const CLDaemonLocation &)",  "%s\n",  v34);
  }

  return v9;
}

void sub_100AF1528(uint64_t a1, uint64_t a2)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  double v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v25 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,updateSessionInfo",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v11 = *(unsigned __int8 *)(a1 + 72);
    int v18 = 67240192;
    int v19 = v11;
    BOOL v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,updateSessionInfo",  &v18,  8);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::updateProactiveLocationSessionInfo(const CLDaemonLocation &)",  "%s\n",  v12);
  }

  if (sub_100869780(a2)
    && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1
    && *(_BYTE *)(a1 + 72)
    && !*(_BYTE *)(a1 + 136))
  {
    *(_BYTE *)(a1 + 136) = 1;
    uint64_t v6 = sub_10080E94C();
    *(_DWORD *)CLMotionActivity buf = 1;
    *(double *)(a1 + 12_Block_object_dispose(va, 8) = sub_10080EB58(v6, buf);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a1 + 56);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 72);
      int v9 = *(unsigned __int8 *)(a1 + 136);
      int v10 = *(_DWORD *)(a1 + 140);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v25 = v8;
      __int16 v26 = 1026;
      int v27 = v9;
      __int16 v28 = 1026;
      int v29 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,updateSessionInfo,yield,%{public}d,rateOverrideAttempts,%{public}d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v13 = *(unsigned __int8 *)(a1 + 72);
      int v14 = *(unsigned __int8 *)(a1 + 136);
      int v15 = *(_DWORD *)(a1 + 140);
      int v18 = 67240704;
      int v19 = v13;
      __int16 v20 = 1026;
      int v21 = v14;
      __int16 v22 = 1026;
      int v23 = v15;
      LODWORD(v1memset(&v6[1], 0, 7) = 20;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,updateSessionInfo,yield,%{public}d,rateOverrideAttempts,%{public}d",  &v18,  v17);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::updateProactiveLocationSessionInfo(const CLDaemonLocation &)",  "%s\n",  v16);
    }
  }

void sub_100AF18B4(uint64_t a1, uint64_t a2, double a3)
{
  if (sub_100AF106C(a1, a2))
  {
    *(double *)(a1 + 96) = a3;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    uint64_t v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v8 = *(void *)(a1 + 96);
      *(_DWORD *)CLMotionActivity buf = 67240448;
      int v16 = v7;
      __int16 v17 = 2050;
      uint64_t v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,feedLocation,fixConvergedMCT,%{public}0.2f",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v9 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v10 = *(void *)(a1 + 96);
      v12[0] = 67240448;
      v12[1] = v9;
      __int16 v13 = 2050;
      uint64_t v14 = v10;
      int v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,feedLocation,fixConvergedMCT,%{public}0.2f",  v12,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::feedLocation(const CLDaemonLocation &, const CFTimeInterval)",  "%s\n",  v11);
    }

    sub_100AEE7D0(a1, 7);
  }

void sub_100AF1AB8(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  uint64_t v6 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 72);
    int v8 = *a2;
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v20 = v7;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,feedDaemonStatus,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v13 = *(unsigned __int8 *)(a1 + 72);
    int v14 = *a2;
    v16[0] = 67240448;
    v16[1] = v13;
    __int16 v17 = 1026;
    int v18 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,feedDaemonStatus,%{public}d",  v16,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::feedDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::N otificationData &)",  "%s\n",  v15);
  }

  int v9 = *a2;
  if (*a2 == 15)
  {
    int v11 = *a3;
    *(_BYTE *)(a1 + 76) = v11;
    if (v11)
    {
      sub_100AEE7D0(a1, 4);
      sub_100AEEB78(a1, 1.79769313e308);
    }

    else
    {
      sub_100AEED84(a1);
    }
  }

  else if (v9 == 3)
  {
    ++*(_DWORD *)(a1 + 288);
    uint64_t v12 = sub_10080E94C();
    *(_DWORD *)CLMotionActivity buf = 1;
    *(double *)(a1 + 16_Block_object_dispose(va, 8) = sub_10080EB58(v12, buf);
    sub_100AF2138(a1);
    *(_BYTE *)(a1 + 56_Block_object_dispose(va, 8) = 0;
    if (!*(_BYTE *)(a1 + 72))
    {
      sub_100AEED84(a1);
      sub_100F06B10(a1 + 352);
    }
  }

  else if (v9 == 2)
  {
    uint64_t v10 = sub_10080E94C();
    *(_DWORD *)CLMotionActivity buf = 1;
    *(double *)(a1 + 176) = sub_10080EB58(v10, buf);
    sub_100AF1D68(a1);
    *(_BYTE *)(a1 + 56_Block_object_dispose(va, 8) = 1;
    sub_100AEE7D0(a1, 1);
  }

void sub_100AF1D68(uint64_t a1)
{
  double v3 = *(double *)(a1 + 168);
  double v2 = *(double *)(a1 + 176);
  if (v2 >= v3)
  {
    double v12 = v2 - v3;
    *(double *)(a1 + 280) = v2 - v3 + *(double *)(a1 + 280);
    if (v2 - v3 >= 10.0)
    {
      if (v12 >= 20.0)
      {
        if (v12 >= 30.0) {
          ++*(_DWORD *)(a1 + 304);
        }
        else {
          ++*(_DWORD *)(a1 + 300);
        }
      }

      else
      {
        ++*(_DWORD *)(a1 + 296);
      }
    }

    else
    {
      ++*(_DWORD *)(a1 + 292);
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v15 = *(void *)(a1 + 280);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v25 = v14;
      __int16 v26 = 2050;
      double v27 = v12;
      __int16 v28 = 2050;
      uint64_t v29 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,APWakeSec,wake,%{public}0.2f,total,%{public}0.2f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v16 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v17 = *(void *)(a1 + 280);
      int v18 = 67240704;
      int v19 = v16;
      __int16 v20 = 2050;
      double v21 = v12;
      __int16 v22 = 2050;
      uint64_t v23 = v17;
      int v11 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,APWakeSec,wake,%{public}0.2f,total,%{public}0.2f",  &v18,  28);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::updateAPWakeStats()", "%s\n");
      goto LABEL_26;
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    double v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v7 = *(void *)(a1 + 168);
      double v6 = *(double *)(a1 + 176);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v25 = v5;
      __int16 v26 = 2050;
      double v27 = v6;
      __int16 v28 = 2050;
      uint64_t v29 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#CLProactiveLoc,active,%{public}d,updateAPWakeStats,sleep,%{public}0.2f,wake,%{public}0.2f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v8 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v10 = *(void *)(a1 + 168);
      double v9 = *(double *)(a1 + 176);
      int v18 = 67240704;
      int v19 = v8;
      __int16 v20 = 2050;
      double v21 = v9;
      __int16 v22 = 2050;
      uint64_t v23 = v10;
      int v11 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#CLProactiveLoc,active,%{public}d,updateAPWakeStats,sleep,%{public}0.2f,wake,%{public}0.2f",  &v18,  28);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLProactiveLocation::updateAPWakeStats()", "%s\n");
LABEL_26:
      if (v11 != buf) {
        free(v11);
      }
    }
  }

void sub_100AF2138(uint64_t a1)
{
  double v3 = *(double *)(a1 + 168);
  double v2 = *(double *)(a1 + 176);
  if (v2 <= v3)
  {
    double v12 = v3 - v2;
    if (v3 - v2 >= 120.0)
    {
      if (v12 >= 300.0)
      {
        float v15 = v12 + *(float *)(a1 + 336);
        *(float *)(a1 + 336) = v15;
      }

      else
      {
        float v14 = v12 + *(float *)(a1 + 332);
        *(float *)(a1 + 332) = v14;
      }
    }

    else
    {
      float v13 = v12 + *(float *)(a1 + 328);
      *(float *)(a1 + 32_Block_object_dispose(va, 8) = v13;
    }

    float v16 = (float)(*(float *)(a1 + 328) + *(float *)(a1 + 332)) + *(float *)(a1 + 336);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    double v17 = v16;
    int v18 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v28 = v19;
      __int16 v29 = 2050;
      double v30 = v12;
      __int16 v31 = 2050;
      double v32 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,sleepDur,%{public}0.2f,total,%{public}0.2f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v20 = *(unsigned __int8 *)(a1 + 72);
      int v21 = 67240704;
      int v22 = v20;
      __int16 v23 = 2050;
      double v24 = v12;
      __int16 v25 = 2050;
      double v26 = v17;
      int v11 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,sleepDur,%{public}0.2f,total,%{public}0.2f",  &v21,  28);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveLocation::updateAPSleepStats()", "%s\n");
      goto LABEL_24;
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    double v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      double v7 = *(double *)(a1 + 168);
      double v6 = *(double *)(a1 + 176);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v28 = v5;
      __int16 v29 = 2050;
      double v30 = v6;
      __int16 v31 = 2050;
      double v32 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "#CLProactiveLoc,active,%{public}d,updateAPSleepStats,sleep,%{public}0.2f,wake,%{public}0.2f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v8 = *(unsigned __int8 *)(a1 + 72);
      double v10 = *(double *)(a1 + 168);
      double v9 = *(double *)(a1 + 176);
      int v21 = 67240704;
      int v22 = v8;
      __int16 v23 = 2050;
      double v24 = v9;
      __int16 v25 = 2050;
      double v26 = v10;
      int v11 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#CLProactiveLoc,active,%{public}d,updateAPSleepStats,sleep,%{public}0.2f,wake,%{public}0.2f",  &v21,  28);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLProactiveLocation::updateAPSleepStats()", "%s\n");
LABEL_24:
      if (v11 != buf) {
        free(v11);
      }
    }
  }

void sub_100AF2510(unsigned __int8 *a1, _DWORD *a2, _DWORD *a3)
{
  if ((*a2 - 1) <= 1)
  {
    unsigned int v6 = *a3 - 1;
    a1[74] = v6 < 2;
    if (a1[75]) {
      BOOL v7 = v6 >= 2;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      a1[75] = 0;
      sub_100AEED84((uint64_t)a1);
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v8 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v9 = a1[72];
      int v10 = a1[74];
      int v11 = a1[75];
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v22 = v9;
      __int16 v23 = 1026;
      int v24 = v10;
      __int16 v25 = 1026;
      int v26 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "#CLProactiveLoc,active,%{public}d,feedMotionNotification,static,%{public}d,staticCheckpoint,%{public}d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10186F250);
      }
      int v12 = a1[72];
      int v13 = a1[74];
      int v14 = a1[75];
      v16[0] = 67240704;
      v16[1] = v12;
      __int16 v17 = 1026;
      int v18 = v13;
      __int16 v19 = 1026;
      int v20 = v14;
      float v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "#CLProactiveLoc,active,%{public}d,feedMotionNotification,static,%{public}d,staticCheckpoint,%{public}d",  v16,  20);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_T ype::NotificationData &)",  "%s\n",  v15);
    }

    sub_100F06544((uint64_t)(a1 + 352), (uint64_t)a2, a3);
  }

void sub_100AF2758(uint64_t a1, int a2)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  double v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v13 = v5;
    __int16 v14 = 1026;
    int v15 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,active,%{public}d,feedLocationServicesEnablementStatus,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    int v7 = *(unsigned __int8 *)(a1 + 72);
    v9[0] = 67240448;
    v9[1] = v7;
    __int16 v10 = 1026;
    int v11 = a2;
    int v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,active,%{public}d,feedLocationServicesEnablementStatus,%{public}d",  v9,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveLocation::feedLocationServicesEnablementStatus(const BOOL)",  "%s\n",  v8);
  }

  int v6 = *(unsigned __int8 *)(a1 + 77);
  *(_BYTE *)(a1 + 7memset(&v6[1], 0, 7) = a2 ^ 1;
  if (v6 && a2)
  {
    sub_100AEED84(a1);
  }

  else if (!v6 && (a2 & 1) == 0)
  {
    sub_100AEE7D0(a1, 5);
    sub_100AEEB78(a1, 1.79769313e308);
  }

void sub_100AF2968(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 176);
  uint64_t v1 = (double *)(a1 + 168);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  uint64_t v4 = sub_10080E94C();
  int v5 = 1;
  *(v1 - 1) = sub_10080EB58(v4, &v5);
  *(void *)uint64_t v1 = v2;
  *((void *)v1 + 1) = v3;
}

void sub_100AF29D0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
}

uint64_t sub_100AF29D8(uint64_t a1, double a2)
{
  *(double *)(a1 + 40) = a2;
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10186F250);
  }
  uint64_t v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)CLMotionActivity buf = 134349056;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#CLProactiveLoc,Minimum session interval changed,proactiveLocationMinIntersessionInterval,%{public}.2f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10186F250);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 134349056;
    uint64_t v9 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#CLProactiveLoc,Minimum session interval changed,proactiveLocationMinIntersessionInterval,%{public}.2f",  &v8,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLProactiveLocation::requestProactiveMinSessionInterval(double)",  "%s\n",  v7);
  }

  return 1LL;
}

BOOL sub_100AF2BAC(uint64_t a1)
{
  double v1 = *(double *)(a1 + 640);
  if (v1 >= 0.0) {
    *(double *)(a1 + 40) = v1;
  }
  return v1 >= 0.0;
}

void sub_100AF2BC8(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100AF2BF4(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_100AF2C28(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &off_10186F2A0;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2C5C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186F2A0;
  a2[1] = v2;
  return result;
}

void sub_100AF2C78(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(_BYTE *)(v3 + 344) = v2;
  if (v2) {
    sub_100AEED84(v3);
  }
}

uint64_t sub_100AF2C90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100AF2CCC()
{
}

void *sub_100AF2CE0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &off_10186F320;
  result[1] = v3;
  return result;
}

uint64_t sub_100AF2D14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10186F320;
  a2[1] = v2;
  return result;
}

uint64_t sub_100AF2D30(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 632LL);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
  }
  return result;
}

uint64_t sub_100AF2D4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100AF2D88()
{
}

uint64_t sub_100AF2D94(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)a1 = _Q0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0LL;
  int v9 = 0;
  sub_100AF30B0((void *)(a1 + 32), 1uLL, &v9);
  int v8 = 0;
  sub_100AF30B0((void *)(a1 + 56), 1uLL, &v8);
  *(_DWORD *)(a1 + 80) = 1082130432;
  return a1;
}

void sub_100AF2E08(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void *sub_100AF2E28(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

  return a1;
}

double sub_100AF2E6C(uint64_t a1, double *a2, _DWORD *a3, double a4)
{
  double v8 = *a2;
  uint64_t v10 = *(void *)(a1 + 24);
  int v9 = (dispatch_once_t *)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100AF30A0;
  block[3] = &unk_10186F390;
  block[4] = a1;
  *(double *)&void block[5] = a4;
  if (v10 != -1) {
    dispatch_once(v9, block);
  }
  if ((*a3 - 1) < 2 || *a3 == 3 && !a3[1])
  {
    double v11 = a4 - *(double *)(a1 + 8);
    float v12 = 1.0;
    if (v11 > 3.0)
    {
      float v12 = exp((v11 + -3.0) * -0.5);
      if (v12 < 0.1) {
        float v12 = 0.1;
      }
    }
  }

  else
  {
    *(double *)(a1 + _Block_object_dispose(va, 8) = a4;
    float v12 = 1.0;
  }

  double v13 = a4 - *(double *)a1;
  uint64_t v28 = 0LL;
  sub_1000070FC(__p, 1uLL, &v28);
  *(double *)a1 = a4;
  if (v13 <= 10.0)
  {
    double v18 = *a2;
    float v19 = *a2;
    *(float *)(a1 + 80) = v19;
    __int16 v17 = *(float **)(a1 + 32);
    float v20 = *v17;
    double v21 = (float)(*v17 / (float)(*v17 + v19));
    int v22 = *(float **)(a1 + 56);
    double v14 = *v22 + v21 * (v18 - *v22);
    int v15 = __p[0];
    *(double *)__p[0] = v14;
    double v23 = v20 - v21 * v20;
    float v24 = v14;
    *int v22 = v24;
    float v16 = v23 + v13 * v13 * 0.349999994 * 0.5 * v12;
  }

  else
  {
    *(double *)(a1 + _Block_object_dispose(va, 8) = a4;
    **(_DWORD **)(a1 + 32) = 1092616192;
    double v14 = *a2;
    int v15 = __p[0];
    *(double *)__p[0] = *a2;
    float v16 = v14;
    __int16 v17 = *(float **)(a1 + 56);
  }

  float *v17 = v16;
  if (v14 - *a2 <= 25.0)
  {
    *(_DWORD *)(a1 + 16) = 0;
    double v8 = v14;
  }

  else
  {
    int v25 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v25 + 1;
    if (v25 >= 3)
    {
      *(double *)(a1 + _Block_object_dispose(va, 8) = a4;
      **(_DWORD **)(a1 + 32) = 1092616192;
      double v26 = *a2;
      *int v15 = *(void *)a2;
      *(float *)&double v26 = v26;
      **(_DWORD **)(a1 + 56) = LODWORD(v26);
    }
  }

  __p[1] = v15;
  operator delete(v15);
  return v8;
}

double sub_100AF30A0(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 8LL) = result;
  return result;
}

void *sub_100AF30B0(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10001B7A4(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_100AF3114(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100AF3130(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  sub_100473764((void *)(a1 + 16));
  sub_1010DDBC0(&__p, "OutdoorService");
  sub_100795C5C((void *)(a1 + 2504));
  if (v5 < 0) {
    operator delete(__p);
  }
  sub_100C65068(a1 + 2544, a1 + 2504);
  *(_OWORD *)(a1 + 6344) = 0u;
  sub_100F73578(a1 + 6368, a1 + 2504);
  *(_OWORD *)(a1 + 8976) = 0u;
  *(_OWORD *)(a1 + 8960) = 0u;
  *(_OWORD *)(a1 + 8944) = 0u;
  return a1;
}

void sub_100AF31F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  double v21 = v18;
  double v23 = *v21;
  os_log_s *v21 = 0LL;
  if (v23) {
    sub_100AF63F0((int)v21, v23);
  }
  sub_10125E83C(v20, v19);
  sub_1004752FC(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF3264(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 3160);
  if (v2)
  {
    *(void *)(a1 + 316_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 3088);
  if (v3)
  {
    *(void *)(a1 + 3096) = v3;
    operator delete(v3);
  }

  sub_10031CBC8(a1 + 2960);
  return a1;
}

void sub_100AF32D8(_BYTE *a1)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10186F3B0);
  }
  uint64_t v2 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Pausing for historical events from AOP to be processed",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F3B0);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "Pausing for historical events from AOP to be processed",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorManager::pause()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  *a1 = 1;
}

void sub_100AF3470(_BYTE *a1)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10186F3B0);
  }
  uint64_t v2 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Resuming after historical events from AOP have been processed",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F3B0);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "Resuming after historical events from AOP have been processed",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorManager::resume()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  *a1 = 0;
}

void sub_100AF3604(int64x2_t *a1, uint64_t a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10186F3B0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)CLMotionActivity buf = 134218240;
    uint64_t v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received motion state, startTime, %f, activityType, %u",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F3B0);
    }
    uint64_t v7 = *(void *)(a2 + 8);
    int v8 = *(_DWORD *)(a2 + 24);
    int v11 = 134218240;
    uint64_t v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  1LL,  "Received motion state, startTime, %f, activityType, %u",  COERCE_DOUBLE(&v11),  18);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLOutdoorManager::feedActivity(const CLOutdoorActivity &)", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  sub_100AF3AEC(a1, *(double *)(a2 + 8));
}

void sub_100AF37EC(uint64_t a1, __int128 *a2)
{
  __int128 v3 = a2[7];
  __int128 v31 = a2[6];
  __int128 v32 = v3;
  __int128 v4 = a2[9];
  __int128 v33 = a2[8];
  __int128 v34 = v4;
  __int128 v5 = a2[3];
  __int128 v27 = a2[2];
  __int128 v28 = v5;
  __int128 v6 = a2[5];
  __int128 v29 = a2[4];
  __int128 v30 = v6;
  __int128 v7 = a2[1];
  __int128 v25 = *a2;
  __int128 v26 = v7;
  uint64_t v8 = *(void *)(a1 + 280);
  if (v8) {
    (*(void (**)(uint64_t, __int128 *))(*(void *)v8 + 48LL))(v8, &v25);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    unint64_t v10 = v9 + *(void *)(a1 + 48) - 1;
    int v11 = *(void ***)(a1 + 24);
    double v12 = *((double *)v11[v10 / 0x19] + 20 * (v10 % 0x19) + 1);
    if (v12 > *((double *)&v25 + 1))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(void *)(a1 + 56) = 0LL;
      unint64_t v14 = v13 - (void)v11;
      if (v14 >= 0x11)
      {
        do
        {
          operator delete(*v11);
          uint64_t v15 = *(void *)(a1 + 32);
          int v11 = (void **)(*(void *)(a1 + 24) + 8LL);
          *(void *)(a1 + 24) = v11;
          unint64_t v14 = v15 - (void)v11;
        }

        while (v14 > 0x10);
      }

      if (v14 >> 3 == 1)
      {
        uint64_t v16 = 12LL;
      }

      else
      {
        if (v14 >> 3 != 2)
        {
LABEL_12:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186F3D0);
          }
          __int16 v17 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 134218240;
            uint64_t v40 = *((void *)&v25 + 1);
            __int16 v41 = 2048;
            double v42 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10186F3D0);
            }
            int v35 = 134218240;
            uint64_t v36 = *((void *)&v25 + 1);
            __int16 v37 = 2048;
            double v38 = v12;
            LODWORD(v24) = 22;
            double v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v35),  v24);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLMotionCoprocessorInterface::MotionState>::add(const T &) [T = CLMotionCoprocessorInt erface::MotionState]",  "%s\n",  v23);
          }

          goto LABEL_17;
        }

        uint64_t v16 = 25LL;
      }

      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v16;
      goto LABEL_12;
    }
  }

void sub_100AF3AEC(int64x2_t *a1, double a2)
{
  double v12 = a2;
  uint64_t i64 = (uint64_t)a1[559].i64;
  sub_100355FA8((int64x2_t *)a1[559].i64, &v12);
  if (!a1->i8[0] && a1[561].i64[1])
  {
    do
    {
      __int128 v4 = objc_autoreleasePoolPush();
      a1[561] = vaddq_s64(a1[561], (int64x2_t)xmmword_1012CE4D0);
      sub_1002109A4(i64, 1);
      sub_100795C60((uint64_t)&a1[156].i64[1], v5);
      sub_100C6506C((uint64_t)a1[159].i64, (uint64_t)v11, v5);
      uint64_t v6 = a1->i64[1];
      if (v6) {
        (*(void (**)(uint64_t, _BYTE *))(*(void *)v6 + 16LL))(v6, v11);
      }
      sub_100F736AC((uint64_t)a1[398].i64, (uint64_t)v11, &__p);
      __int128 v7 = (double *)__p;
      if (a1[397].i64[0])
      {
        uint64_t v8 = v10;
        if (__p != v10)
        {
          do
          {
            sub_100C07590(a1[397].i64[0], v7);
            v7 += 2;
          }

          while (v7 != v8);
          __int128 v7 = (double *)__p;
        }
      }

      if (v7)
      {
        unint64_t v10 = v7;
        operator delete(v7);
      }

      objc_autoreleasePoolPop(v4);
    }

    while (a1[561].i64[1]);
  }

void sub_100AF3C4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AF3C68(uint64_t a1, __n128 *a2)
{
  __int128 v4 = *(void **)(a1 + 6352);
  if (v4) {
    sub_100C06F40(v4, a2);
  }
}

void sub_100AF3CA8(__n128 *a1, __n128 *a2)
{
  __n128 v16 = *a2;
  unint64_t v3 = a1[8].n128_u64[1];
  if (v3) {
    (*(void (**)(unint64_t, __n128 *))(*(void *)v3 + 48LL))(v3, &v16);
  }
  unint64_t v4 = a1[3].n128_u64[1];
  if (v4)
  {
    unint64_t v5 = v4 + a1[3].n128_u64[0] - 1;
    uint64_t v6 = (void **)a1[1].n128_u64[1];
    double v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8LL)))[2 * v5];
    if (v7 > v16.n128_f64[0])
    {
      unint64_t v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0LL;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          unint64_t v10 = a1[2].n128_u64[0];
          uint64_t v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          unint64_t v9 = v10 - (void)v6;
        }

        while (v9 > 0x10);
      }

      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128LL;
      }

      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186F3D0);
          }
          double v12 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 134218240;
            unint64_t v22 = v16.n128_u64[0];
            __int16 v23 = 2048;
            double v24 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10186F3D0);
            }
            int v17 = 134218240;
            unint64_t v18 = v16.n128_u64[0];
            __int16 v19 = 2048;
            double v20 = v7;
            LODWORD(v15) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v17),  v15);
            unint64_t v14 = (uint8_t *)v13;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLAmbientLightSensor_Type::CLALSLuxResult>::add(const T &) [T = CLAmbientLightSensor_T ype::CLALSLuxResult]",  "%s\n",  v13);
            if (v14 != buf) {
              free(v14);
            }
          }

          goto LABEL_17;
        }

        uint64_t v11 = 256LL;
      }

      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }

void *sub_100AF3F44(uint64_t a1, const void *a2)
{
  return sub_100465F90((void *)(a1 + 488), a2);
}

void sub_100AF3F4C(uint64_t a1, __n128 *a2)
{
}

void sub_100AF3F54(__n128 *a1, __n128 *a2)
{
  __n128 v16 = *a2;
  unint64_t v3 = a1[8].n128_u64[1];
  if (v3) {
    (*(void (**)(unint64_t, __n128 *))(*(void *)v3 + 48LL))(v3, &v16);
  }
  unint64_t v4 = a1[3].n128_u64[1];
  if (v4)
  {
    unint64_t v5 = v4 + a1[3].n128_u64[0] - 1;
    uint64_t v6 = (void **)a1[1].n128_u64[1];
    double v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8LL)))[2 * v5];
    if (v7 > v16.n128_f64[0])
    {
      unint64_t v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0LL;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          unint64_t v10 = a1[2].n128_u64[0];
          uint64_t v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          unint64_t v9 = v10 - (void)v6;
        }

        while (v9 > 0x10);
      }

      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128LL;
      }

      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186F3D0);
          }
          double v12 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 134218240;
            unint64_t v22 = v16.n128_u64[0];
            __int16 v23 = 2048;
            double v24 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10186F3D0);
            }
            int v17 = 134218240;
            unint64_t v18 = v16.n128_u64[0];
            __int16 v19 = 2048;
            double v20 = v7;
            LODWORD(v15) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v17),  v15);
            unint64_t v14 = (uint8_t *)v13;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorLocationCoordinate>::add(const T &) [T = CLOutdoorLocationCoordinate]",  "%s\n",  v13);
            if (v14 != buf) {
              free(v14);
            }
          }

          goto LABEL_17;
        }

        uint64_t v11 = 256LL;
      }

      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }

void sub_100AF41F0(uint64_t a1, __int128 *a2)
{
}

void sub_100AF41F8(uint64_t a1, uint64_t *a2)
{
  if (a2[1] != a2[2]) {
    sub_100C66B6C(a1 + 2544, a2);
  }
}

void sub_100AF4210(uint64_t a1, uint64_t a2)
{
}

void sub_100AF4218(uint64_t a1, uint64_t a2)
{
  __int128 v25 = 0LL;
  uint64_t v26 = 0LL;
  __int128 v22 = *(_OWORD *)a2;
  uint64_t v23 = *(void *)(a2 + 16);
  std::stringbuf::string_type __p = 0LL;
  if (&v22 != (__int128 *)a2) {
    sub_10079D690( (char *)&__p,  *(char **)(a2 + 24),  *(void *)(a2 + 32),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2));
  }
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    (*(void (**)(uint64_t, __int128 *))(*(void *)v3 + 48LL))(v3, &v22);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void ***)(a1 + 24);
    double v7 = *((double *)v6[(v4 + v5 - 1) / 0x55] + 6 * ((v4 + v5 - 1) % 0x55));
    if (v7 > *(double *)&v22)
    {
      unint64_t v8 = *(void ***)(a1 + 32);
      if (v8 == v6)
      {
        unint64_t v8 = *(void ***)(a1 + 24);
      }

      else
      {
        unint64_t v9 = &v6[v5 / 0x55];
        unint64_t v10 = (unint64_t)*v9;
        unint64_t v11 = (unint64_t)*v9 + 48 * (v5 % 0x55);
        unint64_t v12 = (unint64_t)v6[(v5 + v4) / 0x55] + 48 * ((v5 + v4) % 0x55);
        if (v11 != v12)
        {
          do
          {
            uint64_t v13 = *(void **)(v11 + 24);
            if (v13)
            {
              *(void *)(v11 + 32) = v13;
              operator delete(v13);
              unint64_t v10 = (unint64_t)*v9;
            }

            v11 += 48LL;
            if (v11 - v10 == 4080)
            {
              unint64_t v14 = (unint64_t)v9[1];
              ++v9;
              unint64_t v10 = v14;
              unint64_t v11 = v14;
            }
          }

          while (v11 != v12);
          uint64_t v6 = *(void ***)(a1 + 24);
          unint64_t v8 = *(void ***)(a1 + 32);
        }
      }

      *(void *)(a1 + 56) = 0LL;
      unint64_t v15 = (char *)v8 - (char *)v6;
      if ((unint64_t)((char *)v8 - (char *)v6) >= 0x11)
      {
        do
        {
          operator delete(*v6);
          uint64_t v16 = *(void *)(a1 + 32);
          uint64_t v6 = (void **)(*(void *)(a1 + 24) + 8LL);
          *(void *)(a1 + 24) = v6;
          unint64_t v15 = v16 - (void)v6;
        }

        while (v15 > 0x10);
      }

      if (v15 >> 3 == 1)
      {
        uint64_t v17 = 42LL;
      }

      else
      {
        if (v15 >> 3 != 2)
        {
LABEL_23:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186F3D0);
          }
          unint64_t v18 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 134218240;
            uint64_t v32 = v22;
            __int16 v33 = 2048;
            double v34 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10186F3D0);
            }
            int v27 = 134218240;
            uint64_t v28 = v22;
            __int16 v29 = 2048;
            double v30 = v7;
            LODWORD(v21) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v27),  v21);
            double v20 = (uint8_t *)v19;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorGnssLeechLocation>::add(const T &) [T = CLOutdoorGnssLeechLocation]",  "%s\n",  v19);
            if (v20 != buf) {
              free(v20);
            }
          }

          goto LABEL_28;
        }

        uint64_t v17 = 85LL;
      }

      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v17;
      goto LABEL_23;
    }
  }

void sub_100AF45E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AF4608(uint64_t a1, __int128 *a2)
{
}

void sub_100AF4610(uint64_t a1, __int128 *a2)
{
  __int128 v3 = a2[1];
  __int128 v18 = *a2;
  __int128 v19 = v3;
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4) {
    (*(void (**)(uint64_t, __int128 *))(*(void *)v4 + 48LL))(v4, &v18);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    unint64_t v6 = v5 + *(void *)(a1 + 48) - 1;
    double v7 = *(void ***)(a1 + 24);
    double v8 = (*(double **)((char *)v7 + ((v6 >> 4) & 0xFFFFFFFFFFFFFF8LL)))[4 * (v6 & 0x7F)];
    if (v8 > *(double *)&v18)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(void *)(a1 + 56) = 0LL;
      unint64_t v10 = v9 - (void)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          uint64_t v11 = *(void *)(a1 + 32);
          double v7 = (void **)(*(void *)(a1 + 24) + 8LL);
          *(void *)(a1 + 24) = v7;
          unint64_t v10 = v11 - (void)v7;
        }

        while (v10 > 0x10);
      }

      if (v10 >> 3 == 1)
      {
        uint64_t v12 = 64LL;
      }

      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10186F3D0);
          }
          uint64_t v13 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 134218240;
            uint64_t v25 = v18;
            __int16 v26 = 2048;
            double v27 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10186F3D0);
            }
            int v20 = 134218240;
            uint64_t v21 = v18;
            __int16 v22 = 2048;
            double v23 = v8;
            LODWORD(v1memset(&v6[1], 0, 7) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "time rollback on add, newItemTime, %f, lastItemTime, %f",  COERCE_DOUBLE(&v20),  v17);
            uint64_t v16 = (uint8_t *)v15;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSourceBuffer<CLOutdoorGnssAvailabilityPredictor>::add(const T &) [T = CLOutdoorGnssAvailabilityPredictor]",  "%s\n",  v15);
            if (v16 != buf) {
              free(v16);
            }
          }

          goto LABEL_17;
        }

        uint64_t v12 = 128LL;
      }

      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v12;
      goto LABEL_12;
    }
  }

void sub_100AF48AC(uint64_t a1, int *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10186F3B0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    int v6 = a2[1];
    *(_DWORD *)CLMotionActivity buf = 67109376;
    int v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "SignalEnvironment, type, %d, fidelityLevel, %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F3B0);
    }
    int v7 = *a2;
    int v8 = a2[1];
    v11[0] = 67109376;
    v11[1] = v7;
    __int16 v12 = 1024;
    int v13 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "SignalEnvironment, type, %d, fidelityLevel, %d",  v11,  14);
    unint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorManager::feedSignalEnvironment(const CLOutdoorSignalEnvironment &)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  sub_100C66B64(a1 + 2544, a2);
}

double sub_100AF4A84(uint64_t a1, uint64_t *a2)
{
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_10186F3B0);
  }
  uint64_t v4 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[14];
    uint64_t v10 = a2[15];
    *(_DWORD *)CLMotionActivity buf = 134219264;
    uint64_t v34 = v5;
    __int16 v35 = 2048;
    uint64_t v36 = v6;
    __int16 v37 = 2048;
    uint64_t v38 = v7;
    __int16 v39 = 2048;
    uint64_t v40 = v8;
    __int16 v41 = 2048;
    uint64_t v42 = v9;
    __int16 v43 = 2048;
    uint64_t v44 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "WorkoutEvent, startTime, %f, endTime, %f, eventType, %ld, eventTime, %f, workoutType, %ld, workoutLocationType, %ld",  buf,  0x3Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F3B0);
    }
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    uint64_t v14 = a2[2];
    uint64_t v15 = a2[3];
    uint64_t v16 = a2[14];
    uint64_t v17 = a2[15];
    int v21 = 134219264;
    uint64_t v22 = v12;
    __int16 v23 = 2048;
    uint64_t v24 = v13;
    __int16 v25 = 2048;
    uint64_t v26 = v14;
    __int16 v27 = 2048;
    uint64_t v28 = v15;
    __int16 v29 = 2048;
    uint64_t v30 = v16;
    __int16 v31 = 2048;
    uint64_t v32 = v17;
    LODWORD(v20) = 62;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "WorkoutEvent, startTime, %f, endTime, %f, eventType, %ld, eventTime, %f, workoutType, %ld, workoutLocationType, %ld",  COERCE_DOUBLE(&v21),  v20);
    __int128 v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorManager::feedWorkoutEvent(const CLOutdoorWorkoutEvent &)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  return sub_100F74330(a1 + 6368, (uint64_t)a2);
}

void sub_100AF4CB0(uint64_t a1, int a2)
{
  __int128 v3 = (_BYTE *)(a1 + 6360);
  if (*(unsigned __int8 *)(a1 + 6360) == a2)
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F3B0);
    }
    uint64_t v4 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CLMotionActivity buf = 67109120;
      int v20 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "HK Privacy toggle unchanged, shouldWriteDaylightTime, %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_10186F3B0);
      }
      int v17 = 67109120;
      int v18 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "HK Privacy toggle unchanged, shouldWriteDaylightTime, %d",  &v17);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorManager::setShouldWriteDaylightTimeToHealthKit(BOOL)",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_10186F3B0);
    }
    uint64_t v8 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CLMotionActivity buf = 67109120;
      int v20 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "HK privacy toggle changed, shouldWriteDaylightTime, %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_10186F3B0);
      }
      int v17 = 67109120;
      int v18 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  0LL,  "HK privacy toggle changed, shouldWriteDaylightTime, %d",  &v17);
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorManager::setShouldWriteDaylightTimeToHealthKit(BOOL)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    _BYTE *v3 = a2;
    if (a2)
    {
      uint64_t v9 = operator new(8uLL);
      sub_100D2D390(v9);
      uint64_t v10 = *(void *)(a1 + 6344);
      *(void *)(a1 + 6344) = v9;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
        uint64_t v9 = *(void **)(a1 + 6344);
      }

      uint64_t v11 = operator new(0x48uLL);
      sub_100C06F24((uint64_t)v11, (uint64_t)v9);
      uint64_t v12 = *(void **)(a1 + 6352);
      *(void *)(a1 + 6352) = v11;
      if (v12) {
        sub_100AF63F0(a1 + 6352, v12);
      }
    }

    else
    {
      uint64_t v13 = *(void **)(a1 + 6352);
      *(void *)(a1 + 6352) = 0LL;
      if (v13) {
        sub_100AF63F0(a1 + 6352, v13);
      }
      uint64_t v14 = *(void *)(a1 + 6344);
      *(void *)(a1 + 6344) = 0LL;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
      }
    }
  }

void sub_100AF504C(_Unwind_Exception *a1)
{
}

void sub_100AF5074(id a1)
{
  qword_101934948 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

__n128 sub_100AF50A0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 25 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100AF51A0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 48);
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v11;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v14 = *(_OWORD *)(a2 + 112);
  __int128 v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 144) = v15;
  *(__n128 *)(v8 + 96) = result;
  *(_OWORD *)(v8 + 112) = v14;
  ++a1[5];
  return result;
}

void sub_100AF5174(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100AF51A0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x19;
  unint64_t v4 = v2 - 25;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100AF5468( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100AF54B4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100AF553C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * vmemset(&v6[1], 0, 7) = *a2;
  ++a1[5];
  return result;
}

void sub_100AF553C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100AF5804( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100AF5850(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100AF58D8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * vmemset(&v6[1], 0, 7) = *a2;
  ++a1[5];
  return result;
}

void sub_100AF58D8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100AF5BA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100AF5BEC(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100AF5CC4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  __int128 v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  *(void *)(v8 + 32) = 0LL;
  *(void *)(v8 + 40) = 0LL;
  *(void *)(v8 + 24) = 0LL;
  __n128 result = sub_100AF5FD8( (void *)(v8 + 24),  *((const void **)a2 + 3),  *((void *)a2 + 4),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2));
  ++a1[5];
  return result;
}

void sub_100AF5CC4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100AF5F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100AF5FD8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_10079D7E8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100AF6034(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_100AF6050(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100AF60DC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  size_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *size_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100AF60DC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100AF63A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100AF63F0(int a1, void *__p)
{
  if (__p)
  {
    BOOL v3 = (void *)__p[6];
    if (v3)
    {
      __p[7] = v3;
      operator delete(v3);
    }

    unint64_t v4 = (void *)__p[3];
    if (v4)
    {
      __p[4] = v4;
      operator delete(v4);
    }

    operator delete(__p);
  }

uint64_t sub_100AF6438()
{
  uint64_t v0 = operator new(0x30uLL);
  uint64_t result = sub_100AF64C0((uint64_t)v0);
  qword_1019A1B90 = (uint64_t)v0;
  return result;
}

void sub_100AF6468(_Unwind_Exception *a1)
{
}

uint64_t sub_100AF647C()
{
  if (qword_10199A8B8 != -1) {
    dispatch_once(&qword_10199A8B8, &stru_10186F3F0);
  }
  return qword_1019A1B90;
}

uint64_t sub_100AF64C0(uint64_t a1)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_1002E4C3C(a1 + 24, "SqliteDatabaseManager", 1LL, 1LL);
  sub_1002F0B04(buf);
  char v2 = sub_1002A6F64(*(uint64_t *)buf, "_SqliteDatabaseUseSecureDelete", (BOOL *)&v15);
  if ((_BYTE)v15) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  unint64_t v4 = *(std::__shared_weak_count **)v17;
  if (*(void *)v17)
  {
    uint64_t v5 = (unint64_t *)(*(void *)v17 + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  *(_BYTE *)(a1 + 40) = v3;
  sub_1002F0B04(buf);
  int v7 = *(unsigned __int8 *)(a1 + 40);
  else {
    BOOL v8 = v7 == 0;
  }
  __int128 v9 = *(std::__shared_weak_count **)v17;
  if (*(void *)v17)
  {
    uint64_t v10 = (unint64_t *)(*(void *)v17 + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  *(_BYTE *)(a1 + 41) = v8;
  int v15 = sqlite3_config(13, 512LL, 125LL);
  if (v15)
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186F410);
    }
    uint64_t v12 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v17 = 2082;
      *(void *)&_DWORD v17[2] = "";
      __int16 v18 = 1040;
      int v19 = 4;
      __int16 v20 = 2098;
      uint64_t v21 = &v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Can't set the sqlite lookaside buffers size to 64K, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
    }

    uint64_t v13 = (os_log_s *)off_101934A28;
    if (os_signpost_enabled((os_log_t)off_101934A28))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v17 = 2082;
      *(void *)&_DWORD v17[2] = "";
      __int16 v18 = 1040;
      int v19 = 4;
      __int16 v20 = 2098;
      uint64_t v21 = &v15;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Can't set the sqlite lookaside buffers size to 64K",  "{msg%{public}.0s:Can't set the sqlite lookaside buffers size to 64K, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
    }
  }

  return a1;
}

void sub_100AF67A0(_Unwind_Exception *a1)
{
}

void sub_100AF67DC()
{
}

void sub_100AF67E4(uint64_t a1, uint64_t a2)
{
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_10186F410);
  }
  char v3 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289283;
    v4[1] = 0;
    __int16 v5 = 2082;
    unint64_t v6 = "";
    __int16 v7 = 2081;
    uint64_t v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:sqlite3_trace, query:%{private, location:escape_only}s}",  (uint8_t *)v4,  0x1Cu);
  }

void sub_100AF68C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  label = dispatch_queue_get_label(0LL);
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_10186F410);
  }
  __int16 v7 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *a1;
    __int128 v9 = a1 + 3;
    v10[0] = 68290307;
    v10[1] = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = v8;
    __int16 v15 = 2082;
    uint64_t v16 = v9;
    __int16 v17 = 2081;
    uint64_t v18 = a2;
    __int16 v19 = 2050;
    uint64_t v20 = a3;
    __int16 v21 = 2082;
    unint64_t v22 = label;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:sqlite3_profile, db_ptr:%{public}p, db_name:%{public, location:escape_only}s, query:%{private, location:escape_only}s, elapsed_ns:%{public}llu, queue:%{public, location:escape_only}s}",  (uint8_t *)v10,  0x44u);
  }

uint64_t sub_100AF6A08(uint64_t a1, int *a2, const char *a3, sqlite3 **a4)
{
  if (!sub_1002E52D8(a1 + 24)) {
    sub_10125E87C();
  }
  if (*((_BYTE *)a2 + 8)) {
    int v7 = 1;
  }
  else {
    int v7 = 6;
  }
  int v8 = *a2;
  if (*a2 == 3)
  {
    char v57 = 0;
    int v13 = 3145728;
  }

  else if (v8 == 2)
  {
    char v57 = 0;
    int v13 = 0x200000;
  }

  else if (v8 == 1)
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186F410);
    }
    __int128 v9 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = a3[23] >= 0 ? (uint64_t)a3 : *(void *)a3;
      *(_DWORD *)CLMotionActivity buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 2082;
      *(void *)&_BYTE v79[10] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Attempted to open an encrypted database, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
    }

    __int16 v11 = (os_log_s *)off_101934A28;
    if (os_signpost_enabled((os_log_t)off_101934A28))
    {
      if (a3[23] >= 0) {
        uint64_t v12 = a3;
      }
      else {
        uint64_t v12 = *(const char **)a3;
      }
      *(_DWORD *)CLMotionActivity buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 2082;
      *(void *)&_BYTE v79[10] = v12;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Attempted to open an encrypted database",  "{msg%{public}.0s:Attempted to open an encrypted database, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    char v57 = 0;
    int v13 = 0x100000;
  }

  else
  {
    char v57 = 1;
    int v13 = 0x400000;
  }

  int flags = v7 | v13 | 0x20000;
  unsigned int v66 = 1;
  while (1)
  {
    if (a3[23] >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = *(const char **)a3;
    }
    unsigned int v66 = sqlite3_open_v2(v14, a4, flags, 0LL);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186F410);
    }
    __int16 v15 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
    {
      if (a3[23] >= 0) {
        uint64_t v16 = a3;
      }
      else {
        uint64_t v16 = *(const char **)a3;
      }
      *(_DWORD *)CLMotionActivity buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1040;
      *(_DWORD *)&_BYTE v79[10] = 4;
      *(_WORD *)&v79[14] = 2098;
      *(void *)&v79[16] = &v66;
      *(_WORD *)&v79[24] = 2082;
      *(void *)&v79[26] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:openDatabase, rc:%{public, location:SqliteResult}.*P, path:%{public, location:escape_only}s}",  buf,  0x2Cu);
    }

    if (!v66)
    {
      if (*((_BYTE *)a2 + 8)) {
        goto LABEL_38;
      }
      __int16 v19 = *a4;
      uint64_t v61 = *(void *)a2;
      __int16 v62 = *((_WORD *)a2 + 4);
      if (*((char *)a2 + 39) < 0)
      {
        sub_1010DD48C(&__p, *((void **)a2 + 2), *((void *)a2 + 3));
      }

      else
      {
        __int128 __p = *((_OWORD *)a2 + 1);
        uint64_t v64 = *((void *)a2 + 4);
      }

      uint64_t v65 = *((void *)a2 + 5);
      sub_1003C25FC(v19, &v61, *(unsigned __int8 *)(a1 + 41));
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)__p);
      }
      if (!v66)
      {
LABEL_38:
        unsigned int v66 = sqlite3_exec(*a4, "pragma page_size = 4096;", 0LL, 0LL, 0LL);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
        __int16 v17 = (os_log_s *)off_101934A28;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&_BYTE v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:pragma page_uint64_t size = 4096, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
        }

        if (!v66 && !*((_BYTE *)a2 + 8))
        {
          unsigned int v66 = sqlite3_exec(*a4, "pragma journal_mode=WAL;", 0LL, 0LL, 0LL);
          if (qword_101934A20 != -1) {
            dispatch_once(&qword_101934A20, &stru_10186F410);
          }
          uint64_t v18 = (os_log_s *)off_101934A28;
          if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v78 = 2082;
            *(void *)__int16 v79 = "";
            *(_WORD *)&v79[8] = 1040;
            *(_DWORD *)&_BYTE v79[10] = 4;
            *(_WORD *)&v79[14] = 2098;
            *(void *)&v79[16] = &v66;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:pragma journal_mode=WAL, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
          }
        }
      }
    }

    unsigned int v20 = v66;
    char v21 = v57;
    if (v66) {
      char v21 = 1;
    }
    if ((v21 & 1) == 0)
    {
      sub_10000CE18((uint64_t)buf);
      int v22 = *(unsigned __int8 *)(a1 + 40);
      uint64_t v23 = sub_10000CF44(&v79[6], (uint64_t)"pragma secure_delete = ", 23LL);
      uint64_t v24 = (void *)std::ostream::operator<<(v23, v22 != 0);
      sub_10000CF44(v24, (uint64_t)";", 1LL);
      std::stringbuf::str(&v60, (const std::stringbuf *)&v79[14]);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v25 = &v60;
      }
      else {
        unint64_t v25 = (std::stringbuf::string_type *)v60.__r_.__value_.__r.__words[0];
      }
      unsigned int v66 = sqlite3_exec(*a4, (const char *)v25, 0LL, 0LL, 0LL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
      uint64_t v26 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int16 v67 = 68289794;
        int v68 = 0;
        __int16 v69 = 2082;
        uint64_t v70 = "";
        __int16 v71 = 1026;
        int v72 = v22;
        __int16 v73 = 1040;
        int v74 = 4;
        __int16 v75 = 2098;
        uint64_t v76 = &v66;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:pragma secure_delete, useSecureDelete:%{public}hhd, rc:%{public, location:SqliteResult}.*P}",  v67,  0x28u);
      }

      *(void *)CLMotionActivity buf = v55;
      *(void *)&buf[*(void *)(v55 - 24)] = v54;
      *(void *)&v79[6] = v53;
      if (v82 < 0) {
        operator delete(v81);
      }
      std::streambuf::~streambuf(&v79[14]);
      std::ios::~ios(&v83);
      unsigned int v20 = v66;
    }

    if (!v20)
    {
      uint64_t v42 = *a4;
      if (*((_BYTE *)a2 + 8))
      {
        unsigned int v66 = sqlite3_exec(v42, "pragma cache_size = 5;", 0LL, 0LL, 0LL);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
        __int16 v43 = (os_log_s *)off_101934A28;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&_BYTE v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          uint64_t v44 = v43;
          uint64_t v45 = "{msg%{public}.0s:pragma cache_size = 5, rc:%{public, location:SqliteResult}.*P}";
LABEL_118:
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, v45, buf, 0x22u);
        }
      }

      else
      {
        unsigned int v66 = sqlite3_exec(v42, "pragma cache_size = 50;", 0LL, 0LL, 0LL);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
        unint64_t v46 = (os_log_s *)off_101934A28;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&_BYTE v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:pragma cache_uint64_t size = 50, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
        }

        if (v66)
        {
LABEL_124:
          char v41 = 0;
          goto LABEL_125;
        }

        unsigned int v66 = sqlite3_exec(*a4, "pragma cache_spill = 500;", 0LL, 0LL, 0LL);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
        uint64_t v52 = (os_log_s *)off_101934A28;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&_BYTE v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          uint64_t v44 = v52;
          uint64_t v45 = "{msg%{public}.0s:pragma cache_spill = 500, rc:%{public, location:SqliteResult}.*P}";
          goto LABEL_118;
        }
      }
    }

    if (v66) {
      goto LABEL_124;
    }
    unsigned int v66 = sqlite3_exec(*a4, "pragma recursive_triggers = true;", 0LL, 0LL, 0LL);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186F410);
    }
    __int16 v27 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1040;
      *(_DWORD *)&_BYTE v79[10] = 4;
      *(_WORD *)&v79[14] = 2098;
      *(void *)&v79[16] = &v66;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:pragma recursive_triggers = true, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
    }

    if (v66) {
      goto LABEL_124;
    }
    sqlite3_limit(*a4, 10, 10);
    int v28 = sqlite3_limit(*a4, 10, -1);
    if (v28 != 10)
    {
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
      __int16 v29 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1026;
        *(_DWORD *)&_BYTE v79[10] = 10;
        *(_WORD *)&v79[14] = 1026;
        *(_DWORD *)&v79[16] = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Trigger depth, expected:%{public}d, actual:%{public}d}",  buf,  0x1Eu);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
      }

      __int128 v30 = (os_log_s *)off_101934A28;
      if (os_signpost_enabled((os_log_t)off_101934A28))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1026;
        *(_DWORD *)&_BYTE v79[10] = 10;
        *(_WORD *)&v79[14] = 1026;
        *(_DWORD *)&v79[16] = v28;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Trigger depth",  "{msg%{public}.0s:Trigger depth, expected:%{public}d, actual:%{public}d}",  buf,  0x1Eu);
      }
    }

    if (v66) {
      goto LABEL_124;
    }
    unsigned int v66 = sqlite3_extended_result_codes(*a4, 1);
    if (v66)
    {
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
      __int128 v31 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&_BYTE v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v66;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Failed to enable extended result codes, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
      }

      __int128 v32 = (os_log_s *)off_101934A28;
      if (os_signpost_enabled((os_log_t)off_101934A28))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&_BYTE v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v66;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v32,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Failed to enable extended result codes",  "{msg%{public}.0s:Failed to enable extended result codes, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
      }

      if (v66) {
        goto LABEL_124;
      }
    }

    *(_DWORD *)__int16 v67 = -1;
    LODWORD(v60.__r_.__value_.__l.__data_) = sqlite3_file_control(*a4, "main", 4, v67);
    int v33 = sqlite3_db_readonly(*a4, "main");
    if (*((_BYTE *)a2 + 8)) {
      break;
    }
    int v34 = v33;
    if (v33 < 1) {
      break;
    }
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186F410);
    }
    __int16 v35 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
    {
      int v36 = *((unsigned __int8 *)a2 + 8);
      *(_DWORD *)CLMotionActivity buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1026;
      *(_DWORD *)&_BYTE v79[10] = v36;
      *(_WORD *)&v79[14] = 1026;
      *(_DWORD *)&v79[16] = v34;
      *(_WORD *)&v79[20] = 1026;
      *(_DWORD *)&v79[22] = *(_DWORD *)v67;
      *(_WORD *)&v79[26] = 1040;
      *(_DWORD *)&v79[28] = 4;
      *(_WORD *)&v79[32] = 2098;
      BOOL v80 = &v60;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Database opened with read/write access was found to be read-only., properties.readOnl y:%{public}d, sqlite3_db_readonly:%{public}d, last POSIX errNo:%{public}d, File control rc:%{publi c, location:SqliteResult}.*P}",  buf,  0x34u);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
    }

    __int16 v37 = (os_log_s *)off_101934A28;
    if (os_signpost_enabled((os_log_t)off_101934A28))
    {
      int v38 = *((unsigned __int8 *)a2 + 8);
      *(_DWORD *)CLMotionActivity buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1026;
      *(_DWORD *)&_BYTE v79[10] = v38;
      *(_WORD *)&v79[14] = 1026;
      *(_DWORD *)&v79[16] = v34;
      *(_WORD *)&v79[20] = 1026;
      *(_DWORD *)&v79[22] = *(_DWORD *)v67;
      *(_WORD *)&v79[26] = 1040;
      *(_DWORD *)&v79[28] = 4;
      *(_WORD *)&v79[32] = 2098;
      BOOL v80 = &v60;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v37,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Database opened with read/write access was found to be read-only.",  "{msg%{public}.0s:Database opened with read/write access was found to be read-only., properties.readOnl y:%{public}d, sqlite3_db_readonly:%{public}d, last POSIX errNo:%{public}d, File control rc:%{publi c, location:SqliteResult}.*P}",  buf,  0x34u);
    }

    int v59 = sqlite3_close(*a4);
    if (v59)
    {
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
      uint64_t v39 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&_BYTE v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v59;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Failed to close partially opened database, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
      }

      uint64_t v40 = (os_log_s *)off_101934A28;
      if (os_signpost_enabled((os_log_t)off_101934A28))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&_BYTE v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v59;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v40,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Failed to close partially opened database",  "{msg%{public}.0s:Failed to close partially opened database, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
      }
    }

    *a4 = 0LL;
    sub_100AF7C8C();
    if (v66)
    {
      char v41 = 1;
LABEL_125:
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
      uint64_t v47 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
      {
        int v48 = *__error();
        *(_DWORD *)CLMotionActivity buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1026;
        *(_DWORD *)&_BYTE v79[10] = v48;
        *(_WORD *)&v79[14] = 1040;
        *(_DWORD *)&v79[16] = 4;
        *(_WORD *)&v79[20] = 2098;
        *(void *)&v79[22] = &v66;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:failed to obtain database handle, errno:%{public}d, rc:%{public, location:SqliteResult}.*P}",  buf,  0x28u);
      }

      *(_DWORD *)__int16 v67 = sqlite3_close(*a4);
      if (*(_DWORD *)v67)
      {
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
        uint64_t v49 = (os_log_s *)off_101934A28;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&_BYTE v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = v67;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Failed to close partially opened database, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
          if (qword_101934A20 != -1) {
            dispatch_once(&qword_101934A20, &stru_10186F410);
          }
        }

        uint64_t v50 = (os_log_s *)off_101934A28;
        if (os_signpost_enabled((os_log_t)off_101934A28))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&_BYTE v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = v67;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v50,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Failed to close partially opened database",  "{msg%{public}.0s:Failed to close partially opened database, rc:%{public, location:SqliteResult}.*P}",  buf,  0x22u);
        }
      }

      *a4 = 0LL;
      uint64_t result = v66;
      if (v66 == 10 || v66 == 13)
      {
        sub_100AF7C8C();
      }

      else if ((v41 & 1) == 0)
      {
        return result;
      }
    }
  }

  char v41 = 0;
  if (v66) {
    goto LABEL_125;
  }
  return 0LL;
}

void sub_100AF7C34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AF7C84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

uint64_t sub_100AF7C8C()
{
  return sleep(5u);
}

uint64_t sub_100AF7CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)a2;
  __int16 v9 = *(_WORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1010DD48C(&__p, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 __p = *(_OWORD *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 32);
  }

  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v6 = sub_100AF7D9C(a1, &v8, &v13, a3);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  return v6;
}

void sub_100AF7D68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AF7D9C(uint64_t a1, uint64_t *a2, std::string *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v40 = a1 + 24;
  (*(void (**)(void))(v8 + 16))();
  __int16 v42 = 256;
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_10186F410);
  }
  __int16 v9 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
  {
    if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)CLMotionActivity buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v45 = 2082;
    *(void *)&id v45[2] = "";
    __int16 v46 = 2082;
    uint64_t v47 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Opening database, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  uint64_t v11 = sub_10008E8D0(a1, (const void **)&a3->__r_.__value_.__l.__data_);
  uint64_t v12 = a1 + 8;
  if (a1 + 8 != v11)
  {
    uint64_t v13 = 0LL;
    goto LABEL_50;
  }

  memset(&v39, 0, sizeof(v39));
  memset(&v37, 0, sizeof(v37));
  int v38 = 0;
  std::string::operator=(&v39, a3);
  *(void *)&__int128 v35 = 0LL;
  uint64_t v30 = *a2;
  __int16 v31 = *((_WORD *)a2 + 4);
  if (*((char *)a2 + 39) < 0)
  {
    sub_1010DD48C(&__p, (void *)a2[2], a2[3]);
  }

  else
  {
    __int128 __p = *((_OWORD *)a2 + 1);
    uint64_t v33 = a2[4];
  }

  uint64_t v34 = a2[5];
  uint64_t v14 = sub_100AF6A08(a1, (int *)&v30, (const char *)a3, (sqlite3 **)&v35);
  uint64_t v13 = v14;
  if (SHIBYTE(v33) < 0)
  {
    operator delete((void *)__p);
    if ((_DWORD)v13)
    {
LABEL_15:
      if ((void)v35)
      {
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_10186F410);
        }
        __int16 v15 = (os_log_s *)off_101934A28;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)CLMotionActivity buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v45 = 2082;
          *(void *)&id v45[2] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:openDatabase failed to open a connection and then to clean up after itself}",  buf,  0x12u);
          if (qword_101934A20 != -1) {
            dispatch_once(&qword_101934A20, &stru_10186F410);
          }
        }

        uint64_t v16 = (os_log_s *)off_101934A28;
        if (os_signpost_enabled((os_log_t)off_101934A28))
        {
          *(_DWORD *)CLMotionActivity buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v45 = 2082;
          *(void *)&id v45[2] = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "openDatabase failed to open a connection and then to clean up after itself",  "{msg%{public}.0s:openDatabase failed to open a connection and then to clean up after itself}",  buf,  0x12u);
        }
      }

      goto LABEL_46;
    }
  }

  else if ((_DWORD)v14)
  {
    goto LABEL_15;
  }

  __int16 v17 = operator new(0x10uLL);
  uint64_t v18 = v17;
  if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v19 = a3;
  }
  else {
    __int16 v19 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  sub_1002E4C3C(v17, v19, 1LL, 1LL);
  *((void *)&v35 + 1) = v18;
  int v36 = operator new(1uLL);
  *int v36 = 0;
  std::string::operator=(&v37, a3);
  sub_100AF8780((char *)buf, (__int128 *)a3, &v35);
  uint64_t v11 = (uint64_t)sub_100AF891C((uint64_t **)a1, (const void **)buf, (uint64_t)buf);
  if (v53 < 0) {
    operator delete(v52);
  }
  if (v51 < 0) {
    operator delete(v50);
  }
  if (SBYTE3(v47) < 0) {
    operator delete(*(void **)buf);
  }
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_10186F410);
  }
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG)) {
    sqlite3_profile( (sqlite3 *)v35,  (void (__cdecl *)(void *, const char *, sqlite3_uint64))sub_100AF68C8,  (void *)(v11 + 56));
  }
  sub_1002F0B04(buf);
  int v20 = sub_1002A6F64(*(uint64_t *)buf, "_SqliteTrace", &v43);
  if (v43) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  int v22 = *(std::__shared_weak_count **)v45;
  if (*(void *)v45)
  {
    uint64_t v23 = (unint64_t *)(*(void *)v45 + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (!v21) {
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }

  if (v21) {
LABEL_45:
  }
    sqlite3_trace((sqlite3 *)v35, (void (__cdecl *)(void *, const char *))sub_100AF67E4, (void *)(v11 + 56));
LABEL_46:
LABEL_50:
  if (v11 != v12)
  {
    __int128 v25 = *(_OWORD *)(v11 + 56);
    *(void *)(a4 + 16) = *(void *)(v11 + 72);
    *(_OWORD *)a4 = v25;
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)(v11 + 80));
    ++*(_DWORD *)(v11 + 104);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186F410);
    }
    uint64_t v26 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
    {
      if ((a3->__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v27 = a3;
      }
      else {
        __int16 v27 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      int v28 = *(_DWORD *)(v11 + 104);
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v45 = 2082;
      *(void *)&id v45[2] = "";
      __int16 v46 = 2082;
      uint64_t v47 = v27;
      __int16 v48 = 1026;
      int v49 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Reference count increased, path:%{public, location:escape_only}s, referenceCount:%{public}d}",  buf,  0x22u);
    }
  }

  if (HIBYTE(v42))
  {
    if ((_BYTE)v42) {
      pthread_mutex_unlock(v41);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
    }
  }

  return v13;
}

void sub_100AF8348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100AF83CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100AF841C(uint64_t a1)
{
  return a1;
}

void sub_100AF845C(uint64_t a1, sqlite3 *a2)
{
  uint64_t v15 = a1 + 24;
  (*(void (**)(void))(*(void *)(a1 + 24) + 16LL))();
  unint64_t v4 = *(uint64_t **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    while ((sqlite3 *)v4[7] != a2)
    {
      __int16 v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          __int16 v5 = (uint64_t *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          unint64_t v4 = v6;
        }

        while (!v7);
      }

      unint64_t v4 = v6;
    }

    --*((_DWORD *)v4 + 26);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10186F410);
    }
    uint64_t v8 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = v4 + 14;
      int v10 = *((_DWORD *)v4 + 26);
      *(_DWORD *)CLMotionActivity buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      int v21 = v9;
      __int16 v22 = 1026;
      int v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Reference count decreased, path:%{public, location:escape_only}s, referenceCount:%{public}d}",  buf,  0x22u);
    }

    if (!*((_DWORD *)v4 + 26))
    {
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10186F410);
      }
      uint64_t v11 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = v4 + 14;
        *(_DWORD *)CLMotionActivity buf = 68289282;
        int v17 = 0;
        __int16 v18 = 2082;
        __int16 v19 = "";
        __int16 v20 = 2082;
        int v21 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Destroying database, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      sqlite3_close(a2);
      uint64_t v13 = v4[8];
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
      }
      uint64_t v14 = (void *)v4[9];
      if (v14) {
        operator delete(v14);
      }
      sub_1000087E8((uint64_t **)a1, v4);
      sub_100AF88C8((uint64_t)(v4 + 4));
      operator delete(v4);
    }
  }

void sub_100AF8700(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100AF8728(id a1)
{
  off_101934A28 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100AF8754(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

char *sub_100AF8780(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v5;
  }

  __int128 v6 = *a3;
  *((void *)__dst + 5) = *((void *)a3 + 2);
  *(_OWORD *)(__dst + 24) = v6;
  if (*((char *)a3 + 47) < 0)
  {
    sub_1010DD48C(__dst + 48, *((void **)a3 + 3), *((void *)a3 + 4));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a3 + 24);
    *((void *)__dst + _Block_object_dispose(va, 8) = *((void *)a3 + 5);
    *((_OWORD *)__dst + 3) = v7;
  }

  *((_DWORD *)__dst + 1_Block_object_dispose(va, 8) = *((_DWORD *)a3 + 12);
  uint64_t v8 = __dst + 80;
  if (*((char *)a3 + 79) < 0)
  {
    sub_1010DD48C(v8, *((void **)a3 + 7), *((void *)a3 + 8));
  }

  else
  {
    __int128 v9 = *(__int128 *)((char *)a3 + 56);
    *((void *)__dst + 12) = *((void *)a3 + 9);
    *(_OWORD *)uint64_t v8 = v9;
  }

  return __dst;
}

void sub_100AF884C(_Unwind_Exception *exception_object)
{
}

void sub_100AF8880(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100AF8880(a1, *a2);
    sub_100AF8880(a1, a2[1]);
    sub_100AF88C8((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_100AF88C8(uint64_t a1)
{
}

_OWORD *sub_100AF891C(uint64_t **a1, const void **a2, uint64_t a3)
{
  __int128 v5 = (void **)sub_1000227E8((uint64_t)a1, &v12, a2);
  __int128 v6 = *v5;
  if (!*v5)
  {
    __int128 v7 = (uint64_t **)v5;
    __int128 v6 = operator new(0x88uLL);
    v10[1] = a1 + 1;
    _DWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0LL;
    *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *((void *)v6 + 12) = *(void *)(a3 + 64);
    void v6[5] = *(_OWORD *)(a3 + 48);
    *(void *)(a3 + 56) = 0LL;
    *(void *)(a3 + 64) = 0LL;
    *(void *)(a3 + 4_Block_object_dispose(va, 8) = 0LL;
    *((_DWORD *)v6 + 26) = *(_DWORD *)(a3 + 72);
    __int128 v8 = *(_OWORD *)(a3 + 80);
    *((void *)v6 + 16) = *(void *)(a3 + 96);
    v6[7] = v8;
    *(void *)(a3 + 80) = 0LL;
    *(void *)(a3 + 8_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a3 + 96) = 0LL;
    char v11 = 1;
    sub_1000085FC(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0LL;
    sub_100AF8A1C((uint64_t)v10, 0LL);
  }

  return v6;
}

void sub_100AF8A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100AF88C8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void *sub_100AF8A60(void *a1)
{
  *a1 = off_10186F460;
  uint64_t v2 = a1 + 1;
  char v3 = operator new(0x18uLL);
  sub_100A26DB8((uint64_t)v3);
  sub_100AF906C(v2, (uint64_t)v3);
  unint64_t v4 = operator new(0x18uLL);
  sub_100208DE8((uint64_t)v4);
  sub_100AF912C(a1 + 3, (uint64_t)v4);
  return a1;
}

void sub_100AF8AD0(_Unwind_Exception *a1)
{
}

uint64_t sub_100AF8B08(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 48) + 48LL))(*(void *)(a2 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t *, double))(**(void **)(a2 + 48) + 24LL))( *(void *)(a2 + 48),  &v9,  a3);
    if ((_DWORD)result)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(_BYTE *)(v7 + _Block_object_dispose(va, 8) = v11;
      *(_BYTE *)(v7 + 9) = CLMotionActivity::isTypeIndoorPedestrian(v10);
      uint64_t v8 = *(void *)(a1 + 24);
      *(_BYTE *)(v8 + _Block_object_dispose(va, 8) = v11;
      uint64_t result = CLMotionActivity::isTypeIndoorPedestrian(v10);
      *(_BYTE *)(v8 + 9) = result;
      if (v11)
      {
        sub_100253308(*(void *)(a2 + 24));
        sub_100253308(*(void *)(a2 + 8));
        uint64_t result = CLMotionActivity::isTypeIndoorPedestrian(v10);
        if ((_DWORD)result) {
          return sub_100253308(*(void *)(a2 + 64));
        }
      }
    }
  }

  return result;
}

uint64_t sub_100AF8BFC(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10186F4A8);
  }
  __int128 v5 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    __int128 v6 = "Walk";
    if (v4) {
      __int128 v6 = "Run";
    }
    *(_DWORD *)CLMotionActivity buf = 136315138;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Pedestrian, Using %s model", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10186F4A8);
    }
    uint64_t v9 = "Walk";
    if (v4) {
      uint64_t v9 = "Run";
    }
    int v11 = 136315138;
    uint64_t v12 = v9;
    unsigned int v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Pedestrian, Using %s model",  (const char *)&v11);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLCaloriePedestrianModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v10);
  }

  uint64_t v7 = 24LL;
  if (v4) {
    uint64_t v7 = 8LL;
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + v7) + 16LL))(*(void *)(a1 + v7), a2);
}

uint64_t sub_100AF8E1C(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  uint64_t v7 = 24LL;
  if (v6) {
    uint64_t v7 = 8LL;
  }
  return (*(uint64_t (**)(void, uint64_t, double))(**(void **)(a1 + v7) + 32LL))( *(void *)(a1 + v7),  a2,  a3);
}

uint64_t sub_100AF8E78(uint64_t a1, uint64_t a2)
{
  return sub_100AF8E80(a2, a2);
}

uint64_t sub_100AF8E80(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 352)) {
    return CLMotionActivity::isTypeRunning(*(unsigned int *)(a1 + 152), a2);
  }
  double v2 = *(double *)(a1 + 448);
  double v3 = fmax(((float)(*(float *)(a1 + 1360) * 39.37) + -59.0) * 0.0375 + 4.2, 4.2);
  double v4 = 2.23693991 / v3;
  BOOL v5 = v3 <= 4.8;
  double v6 = 0.466029147;
  if (v5) {
    double v6 = v4;
  }
  return v6 > v2 && v2 > 0.0;
}

BOOL sub_100AF8F04(double a1, double a2)
{
  float v2 = a2 * 39.3700981;
  double v3 = fmax((v2 + -59.0) * 0.0375 + 4.2, 4.2);
  double v4 = 2.23693991 / v3;
  BOOL v5 = v3 <= 4.8;
  double v6 = 0.466029147;
  if (v5) {
    double v6 = v4;
  }
  return v6 > a1 && a1 > 0.0;
}

double sub_100AF8F74(double a1)
{
  float v1 = a1 * 39.3700981;
  double result = fmax((v1 + -59.0) * 0.0375 + 4.2, 4.2);
  if (result > 4.8) {
    return 4.8;
  }
  return result;
}

void *sub_100AF8FC0(void *a1)
{
  *a1 = off_10186F460;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_10000AE14((uint64_t)(a1 + 3));
  sub_10000AE14(v2);
  return a1;
}

void sub_100AF9000(void *a1)
{
  *a1 = off_10186F460;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_10000AE14((uint64_t)(a1 + 3));
  sub_10000AE14(v2);
  operator delete(a1);
}

void sub_100AF9040(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_100AF906C(void *a1, uint64_t a2)
{
  *a1 = a2;
  double v4 = operator new(0x20uLL);
  *double v4 = &off_10186F4D8;
  v4[1] = 0LL;
  _DWORD v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100AF90B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AF90D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100AF90EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_100AF912C(void *a1, uint64_t a2)
{
  *a1 = a2;
  double v4 = operator new(0x20uLL);
  *double v4 = &off_10186F550;
  v4[1] = 0LL;
  _DWORD v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100AF9174(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AF9194(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_100AF91AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_100AF91EC(void *result, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  *uint64_t result = *a2;
  result[1] = v3;
  if (v3)
  {
    double v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  uint64_t v6 = a3[1];
  result[2] = *a3;
  result[3] = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  return result;
}

BOOL sub_100AF9230(void *a1)
{
  int v32 = 0;
  __int128 v33 = 0u;
  int v35 = 0;
  __int128 v34 = 0u;
  int v2 = (*(uint64_t (**)(void, int *))(*(void *)*a1 + 32LL))(*a1, &v32);
  if (v2 != 109)
  {
    double v3 = *(double *)&v33;
    double Current = CFAbsoluteTimeGetCurrent();
    __int16 v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    __int128 __p = 0LL;
    __int16 v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v5 = (*(uint64_t (**)(void, void **, double, double))(*(void *)a1[2] + 24LL))( a1[2],  &v29,  v3 + 5.0,  Current);
    if (v29 != v30)
    {
      sub_100AF97FC(v5, (uint64_t *)&v29, (uint64_t)&__p);
      uint64_t v6 = (char *)__p;
      if (__p == v27)
      {
LABEL_28:
        if (v6)
        {
          __int16 v27 = v6;
          operator delete(v6);
        }

        if (v29)
        {
          uint64_t v30 = v29;
          operator delete(v29);
        }

        return v2 != 109;
      }

      if (Current - *((double *)v27 - 5) < 30.0)
      {
        v27 -= 48;
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186F5D8);
        }
        uint64_t v7 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = *((void *)v27 - 5);
          *(_DWORD *)CLMotionActivity buf = 134349312;
          uint64_t v41 = v8;
          __int16 v42 = 2050;
          double v43 = Current;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "[SmoothedGaitMetricsProcessor]: Skipping last entry since we may not yet have all gait metrics entries, star tTime : %{public}f, now : %{public}f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_10186F5D8);
          }
          uint64_t v22 = *((void *)v27 - 5);
          int v36 = 134349312;
          uint64_t v37 = v22;
          __int16 v38 = 2050;
          double v39 = Current;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "[SmoothedGaitMetricsProcessor]: Skipping last entry since we may not yet have all gait metrics entries, star tTime : %{public}f, now : %{public}f",  &v36,  22);
          unint64_t v24 = (uint8_t *)v23;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()",  "%s\n",  v23);
          if (v24 != buf) {
            free(v24);
          }
        }
      }

      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10186F5D8);
      }
      uint64_t v9 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *((void *)__p + 1);
        double v11 = *((double *)v27 - 5);
        *(_DWORD *)CLMotionActivity buf = 134349312;
        uint64_t v41 = v10;
        __int16 v42 = 2050;
        double v43 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "[SmoothedGaitMetricsProcessor]: Processed smoothed gait matrics, first entry startTime : %{public}f, last entr y startTime : %{public}f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10186F5D8);
        }
        uint64_t v18 = *((void *)__p + 1);
        double v19 = *((double *)v27 - 5);
        int v36 = 134349312;
        uint64_t v37 = v18;
        __int16 v38 = 2050;
        double v39 = v19;
        LODWORD(v25) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "[SmoothedGaitMetricsProcessor]: Processed smoothed gait matrics, first entry startTime : %{public}f, last entr y startTime : %{public}f",  &v36,  v25);
        int v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      uint64_t v12 = (char *)__p;
      uint64_t v13 = v27;
      while (v12 != v13)
      {
        (*(void (**)(void, char *))(*(void *)*a1 + 16LL))(*a1, v12);
        v12 += 48;
      }
    }

    uint64_t v6 = (char *)__p;
    goto LABEL_28;
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_10186F5D8);
  }
  uint64_t v14 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[SmoothedGaitMetricsProcessor]: Could not access db",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10186F5D8);
    }
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "[SmoothedGaitMetricsProcessor]: Could not access db",  &v29,  2);
    uint64_t v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  return v2 != 109;
}

void sub_100AF97BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AF97FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    float32x4_t v7 = 0uLL;
    float v8 = 0.0;
    float v9 = 0.0;
    do
    {
      unsigned int v10 = 0;
      double v11 = *(double *)(v6 + 8);
      double v12 = v11 + 5.0;
      while (*(double *)(v6 + 8) < v12)
      {
        float v13 = *(float *)(v6 + 48);
        float v9 = v9 + v13;
        float32x4_t v14 = *(float32x4_t *)(v6 + 24);
        float v8 = vmlas_n_f32(v8, v13, v14.f32[0]);
        float32x4_t v7 = vaddq_f32(v7, v14);
        ++v10;
        v6 += 96LL;
        if (v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }

      if (v10)
      {
        *(float *)&double v12 = (float)v10;
        float v15 = v9 / (float)v10;
        float v16 = v8 / (float)v10;
        float32x4_t v17 = vdivq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v12, 0));
        double v19 = *(_DWORD **)(a3 + 8);
        unint64_t v18 = *(void *)(a3 + 16);
        if ((unint64_t)v19 >= v18)
        {
          int v21 = *(_DWORD **)a3;
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *(void *)a3) >> 4);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x555555555555555LL) {
            sub_100007008();
          }
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v21) >> 4);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v25 = 0x555555555555555LL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            float32x4_t v39 = v17;
            uint64_t v26 = (char *)sub_1000BB1F4(a3 + 16, v25);
            float32x4_t v17 = v39;
            __int16 v27 = v26;
            int v21 = *(_DWORD **)a3;
            double v19 = *(_DWORD **)(a3 + 8);
          }

          else
          {
            __int16 v27 = 0LL;
          }

          uint64_t v28 = &v27[48 * v22];
          *(_DWORD *)uint64_t v28 = 0;
          *((double *)v28 + 1) = v11;
          *((float32x4_t *)v28 + 1) = v17;
          *((float *)v28 + _Block_object_dispose(va, 8) = v16;
          *((float *)v28 + 9) = v15;
          *((_DWORD *)v28 + 10) = v10;
          __int16 v29 = v28;
          if (v19 != v21)
          {
            do
            {
              __int128 v30 = *((_OWORD *)v19 - 3);
              __int128 v31 = *((_OWORD *)v19 - 2);
              *(_OWORD *)(v29 - 20) = *(_OWORD *)(v19 - 5);
              *((_OWORD *)v29 - 3) = v30;
              *((_OWORD *)v29 - 2) = v31;
              v29 -= 48;
              v19 -= 12;
            }

            while (v19 != v21);
            int v21 = *(_DWORD **)a3;
          }

          __int16 v20 = v28 + 48;
          *(void *)a3 = v29;
          *(void *)(a3 + _Block_object_dispose(va, 8) = v28 + 48;
          *(void *)(a3 + 16) = &v27[48 * v25];
          if (v21) {
            operator delete(v21);
          }
        }

        else
        {
          _DWORD *v19 = 0;
          *((double *)v19 + 1) = v11;
          *((float32x4_t *)v19 + 1) = v17;
          *((float *)v19 + _Block_object_dispose(va, 8) = v16;
          *((float *)v19 + 9) = v15;
          __int16 v20 = v19 + 12;
          v19[10] = v10;
        }

        *(void *)(a3 + _Block_object_dispose(va, 8) = v20;
        uint64_t v5 = a2[1];
        float32x4_t v7 = 0uLL;
        float v9 = 0.0;
        float v8 = 0.0;
      }
    }

    while (v6 != v5);
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_10186F5D8);
  }
  int v32 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    *(_DWORD *)CLMotionActivity buf = 134349312;
    unint64_t v45 = v33;
    __int16 v46 = 2050;
    unint64_t v47 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "[SmoothedGaitMetricsProcessor]: Processed %{public}ld gait metrics entries, resulting in %{public}ld smoothed gait metrics entries",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10186F5D8);
    }
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    int v40 = 134349312;
    unint64_t v41 = v35;
    __int16 v42 = 2050;
    unint64_t v43 = v36;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "[SmoothedGaitMetricsProcessor]: Processed %{public}ld gait metrics entries, resulting in %{public}ld smoothed gait metrics entries",  &v40,  22);
    __int16 v38 = (uint8_t *)v37;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::SmoothedGaitMetricsProcessor::calculateSmoothedGaitMetrics(const std::vector<GaitMetrics> &, std: :vector<SmoothedGaitMetrics> &)",  "%s\n",  v37);
    if (v38 != buf) {
      free(v38);
    }
  }

void sub_100AF9BD4(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100AF9C00( uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_DWORD *)(a5 + 4_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  float64x2_t v11 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000LL);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a2, v11), (int32x4_t)vceqq_f64(a2[1], v11)))) & 1) != 0)
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186F618);
    }
    double v12 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Rejection: SteadinessModelGaitBaseline missing required feature inputs",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_10186F618);
      }
      LOWORD(v4memset(&v6[1], 0, 7) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  1LL,  "Rejection: SteadinessModelGaitBaseline missing required feature inputs",  &v47,  2);
      unint64_t v45 = (uint8_t *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const Steadi nessModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    *(_DWORD *)(a5 + 4_Block_object_dispose(va, 8) = 8;
    int v13 = 12;
  }

  else
  {
    int v13 = 4;
  }

  if (!*(_BYTE *)(a4 + 57)) {
    *(_DWORD *)(a5 + 4_Block_object_dispose(va, 8) = v13;
  }
  sub_1004CBC48(a1, a5, a3);
  double v14 = sub_10070C800(a2);
  *(double *)(a5 + 24) = v14;
  *(double *)(a5 + 32) = sub_10070C880(v14);
  *(void *)(a5 + 40) = v15;
  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186F618);
  }
  float v16 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v17 = *(double *)(a5 + 32);
    float64_t v18 = *(double *)(a5 + 40);
    float64_t v19 = *(double *)(a5 + 16);
    float64_t v20 = *(double *)(a5 + 24);
    int v21 = *(_DWORD *)(a5 + 48);
    int v22 = *(_DWORD *)(a5 + 8);
    int v23 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)CLMotionActivity buf = 134350593;
    float64_t v62 = v19;
    __int16 v63 = 2050;
    float64_t v64 = v17;
    __int16 v65 = 2050;
    float64_t v66 = v18;
    __int16 v67 = 2050;
    float64_t v68 = v20;
    __int16 v69 = 1026;
    int v70 = v21;
    __int16 v71 = 1025;
    int v72 = v22;
    __int16 v73 = 1025;
    int v74 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessModelGaitBaseline::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,% {public}.2f,rawSteadiness,%{public}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186F618);
    }
    float64_t v29 = *(double *)(a5 + 32);
    float64_t v30 = *(double *)(a5 + 40);
    float64_t v31 = *(double *)(a5 + 16);
    float64_t v32 = *(double *)(a5 + 24);
    int v33 = *(_DWORD *)(a5 + 48);
    int v34 = *(_DWORD *)(a5 + 8);
    int v35 = *(_DWORD *)(a5 + 12);
    int v47 = 134350593;
    float64_t v48 = v31;
    __int16 v49 = 2050;
    float64_t v50 = v29;
    __int16 v51 = 2050;
    float64_t v52 = v30;
    __int16 v53 = 2050;
    float64_t v54 = v32;
    __int16 v55 = 1026;
    int v56 = v33;
    __int16 v57 = 1025;
    int v58 = v34;
    __int16 v59 = 1025;
    int v60 = v35;
    LODWORD(v46) = 60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessModelGaitBaseline::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,% {public}.2f,rawSteadiness,%{public}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d",  &v47,  v46);
    uint64_t v37 = (uint8_t *)v36;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const Steadine ssModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v36);
    if (v37 != buf) {
      free(v37);
    }
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186F618);
  }
  unint64_t v24 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v26 = a2[1].f64[0];
    float64_t v25 = a2[1].f64[1];
    float64_t v28 = a2->f64[0];
    float64_t v27 = a2->f64[1];
    *(_DWORD *)CLMotionActivity buf = 134284289;
    float64_t v62 = v25;
    __int16 v63 = 2049;
    float64_t v64 = v27;
    __int16 v65 = 2049;
    float64_t v66 = v26;
    __int16 v67 = 2049;
    float64_t v68 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "CLMobility::SteadinessModelGaitBaseline::Features,balancePrior,%{private}.3f,intermediateBoutsStepLengthQ95Heightn orm,%{private}.3f,intermediateBoutsWalkingSpeedQ95Sqrtheightnorm,%{private}.3f,height,%{private}.2f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186F618);
    }
    float64_t v39 = a2[1].f64[0];
    float64_t v38 = a2[1].f64[1];
    float64_t v41 = a2->f64[0];
    float64_t v40 = a2->f64[1];
    int v47 = 134284289;
    float64_t v48 = v38;
    __int16 v49 = 2049;
    float64_t v50 = v40;
    __int16 v51 = 2049;
    float64_t v52 = v39;
    __int16 v53 = 2049;
    float64_t v54 = v41;
    LODWORD(v46) = 42;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "CLMobility::SteadinessModelGaitBaseline::Features,balancePrior,%{private}.3f,intermediateBoutsStepLengthQ95Heightn orm,%{private}.3f,intermediateBoutsWalkingSpeedQ95Sqrtheightnorm,%{private}.3f,height,%{private}.2f",  &v47,  v46);
    unint64_t v43 = (uint8_t *)v42;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const Steadine ssModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const",  "%s\n",  v42);
    if (v43 != buf) {
      free(v43);
    }
  }

double sub_100AFA190(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  __int16 v49 = 0LL;
  float64_t v50 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  *(void *)CLMotionActivity buf = &v49;
  if (v6 == v7)
  {
    __int128 __p = 0LL;
    int v47 = 0LL;
    float64_t v48 = 0LL;
    unint64_t v43 = 0LL;
    uint64_t v44 = 0LL;
    unint64_t v45 = 0LL;
  }

  else
  {
    double v8 = a1 + -2419200.0;
    do
    {
      double v9 = *(double *)(v6 + 8);
      if (v9 < a1 && v9 >= v8) {
        sub_1004CC934((void ***)buf, (_OWORD *)v6);
      }
      v6 += 224LL;
    }

    while (v6 != v7);
    float64x2_t v11 = (double *)v49;
    double v12 = v50;
    __int128 __p = 0LL;
    int v47 = 0LL;
    float64_t v48 = 0LL;
    unint64_t v43 = 0LL;
    uint64_t v44 = 0LL;
    unint64_t v45 = 0LL;
    if (v49 != v50)
    {
      do
      {
        double v13 = v11[2] - v11[1];
        if (v13 <= 600.0 && v13 > 60.0)
        {
          int v15 = *((_DWORD *)v11 + 13);
          if (v15) {
            int v16 = 42;
          }
          else {
            int v16 = -1;
          }
          if ((v16 & (_DWORD)v11[24]) == 0)
          {
            float64_t v17 = v47;
            if (v47 >= v48)
            {
              float64_t v19 = (char *)__p;
              uint64_t v20 = (v47 - (_BYTE *)__p) >> 3;
              unint64_t v21 = v20 + 1;
              uint64_t v22 = v48 - (_BYTE *)__p;
              if ((v48 - (_BYTE *)__p) >> 2 > v21) {
                unint64_t v21 = v22 >> 2;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                unint64_t v24 = (char *)sub_1000071BC((uint64_t)&v48, v23);
                float64_t v19 = (char *)__p;
                float64_t v17 = v47;
              }

              else
              {
                unint64_t v24 = 0LL;
              }

              float64_t v25 = &v24[8 * v20];
              *(double *)float64_t v25 = v11[14];
              float64_t v18 = v25 + 8;
              while (v17 != v19)
              {
                uint64_t v26 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v25 - 1) = v26;
                v25 -= 8;
              }

              __int128 __p = v25;
              int v47 = v18;
              float64_t v48 = &v24[8 * v23];
              if (v19) {
                operator delete(v19);
              }
            }

            else
            {
              *(double *)int v47 = v11[14];
              float64_t v18 = v17 + 8;
            }

            int v47 = v18;
            int v15 = *((_DWORD *)v11 + 13);
          }

          if (v15) {
            int v27 = 42;
          }
          else {
            int v27 = -1;
          }
          if ((v27 & (_DWORD)v11[25]) == 0)
          {
            float64_t v28 = v44;
            if (v44 >= v45)
            {
              float64_t v30 = (char *)v43;
              uint64_t v31 = (v44 - (_BYTE *)v43) >> 3;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61) {
LABEL_75:
              }
                sub_100007008();
              uint64_t v33 = v45 - (_BYTE *)v43;
              if ((v45 - (_BYTE *)v43) >> 2 > v32) {
                unint64_t v32 = v33 >> 2;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                int v35 = (char *)sub_1000071BC((uint64_t)&v45, v34);
                float64_t v30 = (char *)v43;
                float64_t v28 = v44;
              }

              else
              {
                int v35 = 0LL;
              }

              unint64_t v36 = &v35[8 * v31];
              *(double *)unint64_t v36 = v11[16];
              float64_t v29 = v36 + 8;
              while (v28 != v30)
              {
                uint64_t v37 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v36 - 1) = v37;
                v36 -= 8;
              }

              unint64_t v43 = v36;
              uint64_t v44 = v29;
              unint64_t v45 = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }

            else
            {
              *(double *)uint64_t v44 = v11[16];
              float64_t v29 = v28 + 8;
            }

            uint64_t v44 = v29;
          }
        }

        v11 += 28;
      }

      while (v11 != v12);
    }
  }

  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_10186F618);
  }
  float64_t v38 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)CLMotionActivity buf = 134349824;
    *(double *)&uint8_t buf[4] = a1;
    __int16 v61 = 2050;
    uint64_t v62 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v50 - (_BYTE *)v49) >> 5);
    __int16 v63 = 2050;
    uint64_t v64 = (v47 - (_BYTE *)__p) >> 3;
    __int16 v65 = 2050;
    uint64_t v66 = (v44 - (_BYTE *)v43) >> 3;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "SteadinessModelGaitBaseline::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateW alkingSpeeds,%{public}lu,numIntermediateStepLengths,%{public}lu",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_10186F618);
    }
    int v52 = 134349824;
    double v53 = a1;
    __int16 v54 = 2050;
    uint64_t v55 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v50 - (_BYTE *)v49) >> 5);
    __int16 v56 = 2050;
    uint64_t v57 = (v47 - (_BYTE *)__p) >> 3;
    __int16 v58 = 2050;
    uint64_t v59 = (v44 - (_BYTE *)v43) >> 3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  2LL,  "SteadinessModelGaitBaseline::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateW alkingSpeeds,%{public}lu,numIntermediateStepLengths,%{public}lu",  &v52,  42);
    __int16 v42 = (char *)v41;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Features CLMobility::SteadinessModelGaitBaseline::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> & , const CLBodyMetrics &, double) const",  "%s\n",  v41);
    if (v42 != buf) {
      free(v42);
    }
  }

  sub_100DEA954((uint64_t)&v43, 95);
  sub_100DEA954((uint64_t)&__p, 95);
  float v39 = *(float *)(a4 + 8);
  if (v43)
  {
    uint64_t v44 = (char *)v43;
    operator delete(v43);
  }

  if (__p)
  {
    int v47 = (char *)__p;
    operator delete(__p);
  }

  if (v49)
  {
    float64_t v50 = (double *)v49;
    operator delete(v49);
  }

  return v39;
}